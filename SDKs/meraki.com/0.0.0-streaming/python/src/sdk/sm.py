"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Sm:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def checkin_network_sm_devices(self, request: operations.CheckinNetworkSmDevicesRequest) -> operations.CheckinNetworkSmDevicesResponse:
        r"""Force check-in a set of devices
        Force check-in a set of devices
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckinNetworkSmDevicesRequest, base_url, '/networks/{networkId}/sm/devices/checkin', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckinNetworkSmDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.checkin_network_sm_devices_200_application_json_object = out

        return res

    def create_network_sm_bypass_activation_lock_attempt(self, request: operations.CreateNetworkSmBypassActivationLockAttemptRequest) -> operations.CreateNetworkSmBypassActivationLockAttemptResponse:
        r"""Bypass activation lock attempt
        Bypass activation lock attempt
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateNetworkSmBypassActivationLockAttemptRequest, base_url, '/networks/{networkId}/sm/bypassActivationLockAttempts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateNetworkSmBypassActivationLockAttemptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_network_sm_bypass_activation_lock_attempt_201_application_json_object = out

        return res

    def get_network_sm_bypass_activation_lock_attempt(self, request: operations.GetNetworkSmBypassActivationLockAttemptRequest) -> operations.GetNetworkSmBypassActivationLockAttemptResponse:
        r"""Bypass activation lock attempt status
        Bypass activation lock attempt status
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmBypassActivationLockAttemptRequest, base_url, '/networks/{networkId}/sm/bypassActivationLockAttempts/{attemptId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmBypassActivationLockAttemptResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_sm_bypass_activation_lock_attempt_200_application_json_object = out

        return res

    def get_network_sm_cellular_usage_history(self, request: operations.GetNetworkSmCellularUsageHistoryRequest) -> operations.GetNetworkSmCellularUsageHistoryResponse:
        r"""Return the client's daily cellular data usage history
        Return the client's daily cellular data usage history. Usage data is in kilobytes.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmCellularUsageHistoryRequest, base_url, '/networks/{networkId}/sm/{deviceId}/cellularUsageHistory', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmCellularUsageHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_cellular_usage_history_200_application_json_objects = out

        return res

    def get_network_sm_certs(self, request: operations.GetNetworkSmCertsRequest) -> operations.GetNetworkSmCertsResponse:
        r"""List the certs on a device
        List the certs on a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmCertsRequest, base_url, '/networks/{networkId}/sm/{deviceId}/certs', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmCertsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_certs_200_application_json_objects = out

        return res

    def get_network_sm_connectivity(self, request: operations.GetNetworkSmConnectivityRequest) -> operations.GetNetworkSmConnectivityResponse:
        r"""Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
        Returns historical connectivity data (whether a device is regularly checking in to Dashboard).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmConnectivityRequest, base_url, '/networks/{network_id}/sm/{id}/connectivity', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmConnectivityRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmConnectivityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_connectivity_200_application_json_objects = out

        return res

    def get_network_sm_desktop_logs(self, request: operations.GetNetworkSmDesktopLogsRequest) -> operations.GetNetworkSmDesktopLogsResponse:
        r"""Return historical records of various Systems Manager network connection details for desktop devices.
        Return historical records of various Systems Manager network connection details for desktop devices.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmDesktopLogsRequest, base_url, '/networks/{network_id}/sm/{id}/desktopLogs', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmDesktopLogsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmDesktopLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_desktop_logs_200_application_json_objects = out

        return res

    def get_network_sm_device_command_logs(self, request: operations.GetNetworkSmDeviceCommandLogsRequest) -> operations.GetNetworkSmDeviceCommandLogsResponse:
        r"""Return historical records of commands sent to Systems Manager devices
        Return historical records of commands sent to Systems Manager devices. Note that this will include the name of the Dashboard user who initiated the command if it was generated by a Dashboard admin rather than the automatic behavior of the system; you may wish to filter this out of any reports.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmDeviceCommandLogsRequest, base_url, '/networks/{network_id}/sm/{id}/deviceCommandLogs', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmDeviceCommandLogsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmDeviceCommandLogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_device_command_logs_200_application_json_objects = out

        return res

    def get_network_sm_device_profiles(self, request: operations.GetNetworkSmDeviceProfilesRequest) -> operations.GetNetworkSmDeviceProfilesResponse:
        r"""Get the profiles associated with a device
        Get the profiles associated with a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmDeviceProfilesRequest, base_url, '/networks/{networkId}/sm/{deviceId}/deviceProfiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmDeviceProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_device_profiles_200_application_json_objects = out

        return res

    def get_network_sm_devices(self, request: operations.GetNetworkSmDevicesRequest) -> operations.GetNetworkSmDevicesResponse:
        r"""List the devices enrolled in an SM network with various specified fields and filters
        List the devices enrolled in an SM network with various specified fields and filters
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmDevicesRequest, base_url, '/networks/{networkId}/sm/devices', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmDevicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_sm_devices_200_application_json_object = out

        return res

    def get_network_sm_network_adapters(self, request: operations.GetNetworkSmNetworkAdaptersRequest) -> operations.GetNetworkSmNetworkAdaptersResponse:
        r"""List the network adapters of a device
        List the network adapters of a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmNetworkAdaptersRequest, base_url, '/networks/{networkId}/sm/{deviceId}/networkAdapters', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmNetworkAdaptersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_network_adapters_200_application_json_objects = out

        return res

    def get_network_sm_performance_history(self, request: operations.GetNetworkSmPerformanceHistoryRequest) -> operations.GetNetworkSmPerformanceHistoryResponse:
        r"""Return historical records of various Systems Manager client metrics for desktop devices.
        Return historical records of various Systems Manager client metrics for desktop devices.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmPerformanceHistoryRequest, base_url, '/networks/{network_id}/sm/{id}/performanceHistory', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmPerformanceHistoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmPerformanceHistoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_performance_history_200_application_json_objects = out

        return res

    def get_network_sm_profiles(self, request: operations.GetNetworkSmProfilesRequest) -> operations.GetNetworkSmProfilesResponse:
        r"""List all the profiles in the network
        List all the profiles in the network
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmProfilesRequest, base_url, '/networks/{networkId}/sm/profiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_network_sm_profiles_200_application_json_object = out

        return res

    def get_network_sm_restrictions(self, request: operations.GetNetworkSmRestrictionsRequest) -> operations.GetNetworkSmRestrictionsResponse:
        r"""List the restrictions on a device
        List the restrictions on a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmRestrictionsRequest, base_url, '/networks/{networkId}/sm/{deviceId}/restrictions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmRestrictionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_restrictions_200_application_json_objects = out

        return res

    def get_network_sm_security_centers(self, request: operations.GetNetworkSmSecurityCentersRequest) -> operations.GetNetworkSmSecurityCentersResponse:
        r"""List the security centers on a device
        List the security centers on a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmSecurityCentersRequest, base_url, '/networks/{networkId}/sm/{deviceId}/securityCenters', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmSecurityCentersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_security_centers_200_application_json_objects = out

        return res

    def get_network_sm_softwares(self, request: operations.GetNetworkSmSoftwaresRequest) -> operations.GetNetworkSmSoftwaresResponse:
        r"""Get a list of softwares associated with a device
        Get a list of softwares associated with a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmSoftwaresRequest, base_url, '/networks/{networkId}/sm/{deviceId}/softwares', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmSoftwaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_softwares_200_application_json_objects = out

        return res

    def get_network_sm_user_device_profiles(self, request: operations.GetNetworkSmUserDeviceProfilesRequest) -> operations.GetNetworkSmUserDeviceProfilesResponse:
        r"""Get the profiles associated with a user
        Get the profiles associated with a user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmUserDeviceProfilesRequest, base_url, '/networks/{networkId}/sm/user/{userId}/deviceProfiles', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmUserDeviceProfilesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_user_device_profiles_200_application_json_objects = out

        return res

    def get_network_sm_user_softwares(self, request: operations.GetNetworkSmUserSoftwaresRequest) -> operations.GetNetworkSmUserSoftwaresResponse:
        r"""Get a list of softwares associated with a user
        Get a list of softwares associated with a user
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmUserSoftwaresRequest, base_url, '/networks/{networkId}/sm/user/{userId}/softwares', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmUserSoftwaresResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_user_softwares_200_application_json_objects = out

        return res

    def get_network_sm_users(self, request: operations.GetNetworkSmUsersRequest) -> operations.GetNetworkSmUsersResponse:
        r"""List the owners in an SM network with various specified fields and filters
        List the owners in an SM network with various specified fields and filters
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmUsersRequest, base_url, '/networks/{networkId}/sm/users', request)
        
        query_params = utils.get_query_params(operations.GetNetworkSmUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_users_200_application_json_objects = out

        return res

    def get_network_sm_wlan_lists(self, request: operations.GetNetworkSmWlanListsRequest) -> operations.GetNetworkSmWlanListsResponse:
        r"""List the saved SSID names on a device
        List the saved SSID names on a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworkSmWlanListsRequest, base_url, '/networks/{networkId}/sm/{deviceId}/wlanLists', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworkSmWlanListsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_network_sm_wlan_lists_200_application_json_objects = out

        return res

    def lock_network_sm_devices(self, request: operations.LockNetworkSmDevicesRequest) -> operations.LockNetworkSmDevicesResponse:
        r"""Lock a set of devices
        Lock a set of devices
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.LockNetworkSmDevicesRequest, base_url, '/networks/{network_id}/sm/devices/lock', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LockNetworkSmDevicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.lock_network_sm_devices_200_application_json_object = out

        return res

    def refresh_network_sm_device_details(self, request: operations.RefreshNetworkSmDeviceDetailsRequest) -> operations.RefreshNetworkSmDeviceDetailsResponse:
        r"""Refresh the details of a device
        Refresh the details of a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RefreshNetworkSmDeviceDetailsRequest, base_url, '/networks/{networkId}/sm/device/{deviceId}/refreshDetails', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RefreshNetworkSmDeviceDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def unenroll_network_sm_device(self, request: operations.UnenrollNetworkSmDeviceRequest) -> operations.UnenrollNetworkSmDeviceResponse:
        r"""Unenroll a device
        Unenroll a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnenrollNetworkSmDeviceRequest, base_url, '/networks/{networkId}/sm/devices/{deviceId}/unenroll', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnenrollNetworkSmDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.unenroll_network_sm_device_200_application_json_object = out

        return res

    def update_network_sm_device_fields(self, request: operations.UpdateNetworkSmDeviceFieldsRequest) -> operations.UpdateNetworkSmDeviceFieldsResponse:
        r"""Modify the fields of a device
        Modify the fields of a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSmDeviceFieldsRequest, base_url, '/networks/{networkId}/sm/device/fields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSmDeviceFieldsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_sm_device_fields_200_application_json_object = out

        return res

    def update_network_sm_devices_tags(self, request: operations.UpdateNetworkSmDevicesTagsRequest) -> operations.UpdateNetworkSmDevicesTagsResponse:
        r"""Add, delete, or update the tags of a set of devices
        Add, delete, or update the tags of a set of devices
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateNetworkSmDevicesTagsRequest, base_url, '/networks/{networkId}/sm/devices/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateNetworkSmDevicesTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_network_sm_devices_tags_200_application_json_object = out

        return res

    def wipe_network_sm_device(self, request: operations.WipeNetworkSmDeviceRequest) -> operations.WipeNetworkSmDeviceResponse:
        r"""Wipe a device
        Wipe a device
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.WipeNetworkSmDeviceRequest, base_url, '/networks/{networkId}/sm/device/wipe', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WipeNetworkSmDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.wipe_network_sm_device_200_application_json_object = out

        return res

    