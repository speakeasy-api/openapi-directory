// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FilterConditionEnum string

const (
	FilterConditionEnumEq         FilterConditionEnum = "EQ"
	FilterConditionEnumIn         FilterConditionEnum = "IN"
	FilterConditionEnumBetween    FilterConditionEnum = "BETWEEN"
	FilterConditionEnumBeginsWith FilterConditionEnum = "BEGINS_WITH"
)

func (e FilterConditionEnum) ToPointer() *FilterConditionEnum {
	return &e
}

func (e *FilterConditionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "EQ":
		fallthrough
	case "IN":
		fallthrough
	case "BETWEEN":
		fallthrough
	case "BEGINS_WITH":
		*e = FilterConditionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterConditionEnum: %v", v)
	}
}
