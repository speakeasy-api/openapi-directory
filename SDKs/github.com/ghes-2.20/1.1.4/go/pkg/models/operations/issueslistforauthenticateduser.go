// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// IssuesListForAuthenticatedUserFilterEnum - Indicates which sorts of issues to return. Can be one of:
// \* `assigned`: Issues assigned to you
// \* `created`: Issues created by you
// \* `mentioned`: Issues mentioning you
// \* `subscribed`: Issues you're subscribed to updates for
// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
type IssuesListForAuthenticatedUserFilterEnum string

const (
	IssuesListForAuthenticatedUserFilterEnumAssigned   IssuesListForAuthenticatedUserFilterEnum = "assigned"
	IssuesListForAuthenticatedUserFilterEnumCreated    IssuesListForAuthenticatedUserFilterEnum = "created"
	IssuesListForAuthenticatedUserFilterEnumMentioned  IssuesListForAuthenticatedUserFilterEnum = "mentioned"
	IssuesListForAuthenticatedUserFilterEnumSubscribed IssuesListForAuthenticatedUserFilterEnum = "subscribed"
	IssuesListForAuthenticatedUserFilterEnumRepos      IssuesListForAuthenticatedUserFilterEnum = "repos"
	IssuesListForAuthenticatedUserFilterEnumAll        IssuesListForAuthenticatedUserFilterEnum = "all"
)

func (e IssuesListForAuthenticatedUserFilterEnum) ToPointer() *IssuesListForAuthenticatedUserFilterEnum {
	return &e
}

func (e *IssuesListForAuthenticatedUserFilterEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "assigned":
		fallthrough
	case "created":
		fallthrough
	case "mentioned":
		fallthrough
	case "subscribed":
		fallthrough
	case "repos":
		fallthrough
	case "all":
		*e = IssuesListForAuthenticatedUserFilterEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListForAuthenticatedUserFilterEnum: %v", v)
	}
}

// IssuesListForAuthenticatedUserSortEnum - What to sort results by. Can be either `created`, `updated`, `comments`.
type IssuesListForAuthenticatedUserSortEnum string

const (
	IssuesListForAuthenticatedUserSortEnumCreated  IssuesListForAuthenticatedUserSortEnum = "created"
	IssuesListForAuthenticatedUserSortEnumUpdated  IssuesListForAuthenticatedUserSortEnum = "updated"
	IssuesListForAuthenticatedUserSortEnumComments IssuesListForAuthenticatedUserSortEnum = "comments"
)

func (e IssuesListForAuthenticatedUserSortEnum) ToPointer() *IssuesListForAuthenticatedUserSortEnum {
	return &e
}

func (e *IssuesListForAuthenticatedUserSortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "comments":
		*e = IssuesListForAuthenticatedUserSortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListForAuthenticatedUserSortEnum: %v", v)
	}
}

// IssuesListForAuthenticatedUserStateEnum - Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
type IssuesListForAuthenticatedUserStateEnum string

const (
	IssuesListForAuthenticatedUserStateEnumOpen   IssuesListForAuthenticatedUserStateEnum = "open"
	IssuesListForAuthenticatedUserStateEnumClosed IssuesListForAuthenticatedUserStateEnum = "closed"
	IssuesListForAuthenticatedUserStateEnumAll    IssuesListForAuthenticatedUserStateEnum = "all"
)

func (e IssuesListForAuthenticatedUserStateEnum) ToPointer() *IssuesListForAuthenticatedUserStateEnum {
	return &e
}

func (e *IssuesListForAuthenticatedUserStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		fallthrough
	case "all":
		*e = IssuesListForAuthenticatedUserStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IssuesListForAuthenticatedUserStateEnum: %v", v)
	}
}

type IssuesListForAuthenticatedUserRequest struct {
	// One of `asc` (ascending) or `desc` (descending).
	Direction *shared.DirectionEnum `queryParam:"style=form,explode=true,name=direction"`
	// Indicates which sorts of issues to return. Can be one of:
	// \* `assigned`: Issues assigned to you
	// \* `created`: Issues created by you
	// \* `mentioned`: Issues mentioning you
	// \* `subscribed`: Issues you're subscribed to updates for
	// \* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
	Filter *IssuesListForAuthenticatedUserFilterEnum `queryParam:"style=form,explode=true,name=filter"`
	// A list of comma separated label names. Example: `bug,ui,@high`
	Labels *string `queryParam:"style=form,explode=true,name=labels"`
	// Page number of the results to fetch.
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Results per page (max 100)
	PerPage *int64 `queryParam:"style=form,explode=true,name=per_page"`
	// Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Since *time.Time `queryParam:"style=form,explode=true,name=since"`
	// What to sort results by. Can be either `created`, `updated`, `comments`.
	Sort *IssuesListForAuthenticatedUserSortEnum `queryParam:"style=form,explode=true,name=sort"`
	// Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
	State *IssuesListForAuthenticatedUserStateEnum `queryParam:"style=form,explode=true,name=state"`
}

type IssuesListForAuthenticatedUserResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Resource not found
	BasicError *shared.BasicError
	// Response
	Issues []shared.Issue
}
