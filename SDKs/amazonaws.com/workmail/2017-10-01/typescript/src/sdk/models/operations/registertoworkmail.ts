/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum RegisterToWorkMailXAmzTargetEnum {
  WorkMailServiceRegisterToWorkMail = "WorkMailService.RegisterToWorkMail",
}

export class RegisterToWorkMailRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  registerToWorkMailRequest: shared.RegisterToWorkMailRequest;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: RegisterToWorkMailXAmzTargetEnum;
}

export class RegisterToWorkMailResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * DirectoryServiceAuthenticationFailedException
   */
  @SpeakeasyMetadata()
  directoryServiceAuthenticationFailedException?: any;

  /**
   * DirectoryUnavailableException
   */
  @SpeakeasyMetadata()
  directoryUnavailableException?: any;

  /**
   * EmailAddressInUseException
   */
  @SpeakeasyMetadata()
  emailAddressInUseException?: any;

  /**
   * EntityAlreadyRegisteredException
   */
  @SpeakeasyMetadata()
  entityAlreadyRegisteredException?: any;

  /**
   * EntityNotFoundException
   */
  @SpeakeasyMetadata()
  entityNotFoundException?: any;

  /**
   * EntityStateException
   */
  @SpeakeasyMetadata()
  entityStateException?: any;

  /**
   * InvalidParameterException
   */
  @SpeakeasyMetadata()
  invalidParameterException?: any;

  /**
   * MailDomainNotFoundException
   */
  @SpeakeasyMetadata()
  mailDomainNotFoundException?: any;

  /**
   * MailDomainStateException
   */
  @SpeakeasyMetadata()
  mailDomainStateException?: any;

  /**
   * OrganizationNotFoundException
   */
  @SpeakeasyMetadata()
  organizationNotFoundException?: any;

  /**
   * OrganizationStateException
   */
  @SpeakeasyMetadata()
  organizationStateException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  registerToWorkMailResponse?: Record<string, any>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
