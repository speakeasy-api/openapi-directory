// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkVlanRequestBodyDhcpHandlingEnum - The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
type UpdateNetworkVlanRequestBodyDhcpHandlingEnum string

const (
	UpdateNetworkVlanRequestBodyDhcpHandlingEnumDoNotRespondToDhcpRequests UpdateNetworkVlanRequestBodyDhcpHandlingEnum = "Do not respond to DHCP requests"
	UpdateNetworkVlanRequestBodyDhcpHandlingEnumRelayDhcpToAnotherServer   UpdateNetworkVlanRequestBodyDhcpHandlingEnum = "Relay DHCP to another server"
	UpdateNetworkVlanRequestBodyDhcpHandlingEnumRunADhcpServer             UpdateNetworkVlanRequestBodyDhcpHandlingEnum = "Run a DHCP server"
)

func (e UpdateNetworkVlanRequestBodyDhcpHandlingEnum) ToPointer() *UpdateNetworkVlanRequestBodyDhcpHandlingEnum {
	return &e
}

func (e *UpdateNetworkVlanRequestBodyDhcpHandlingEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Do not respond to DHCP requests":
		fallthrough
	case "Relay DHCP to another server":
		fallthrough
	case "Run a DHCP server":
		*e = UpdateNetworkVlanRequestBodyDhcpHandlingEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkVlanRequestBodyDhcpHandlingEnum: %v", v)
	}
}

// UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum - The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
type UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum string

const (
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumOneDay        UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "1 day"
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumOneHour       UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "1 hour"
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumOneWeek       UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "1 week"
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumTwelveHours   UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "12 hours"
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumThirtyMinutes UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "30 minutes"
	UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnumFourHours     UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum = "4 hours"
)

func (e UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum) ToPointer() *UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum {
	return &e
}

func (e *UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1 day":
		fallthrough
	case "1 hour":
		fallthrough
	case "1 week":
		fallthrough
	case "12 hours":
		fallthrough
	case "30 minutes":
		fallthrough
	case "4 hours":
		*e = UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum: %v", v)
	}
}

// UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum - The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
type UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum string

const (
	UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnumHex     UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = "hex"
	UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnumInteger UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = "integer"
	UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnumIP      UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = "ip"
	UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnumText    UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum = "text"
)

func (e UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum) ToPointer() *UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum {
	return &e
}

func (e *UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hex":
		fallthrough
	case "integer":
		fallthrough
	case "ip":
		fallthrough
	case "text":
		*e = UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum: %v", v)
	}
}

type UpdateNetworkVlanRequestBodyDhcpOptions struct {
	// The code for the DHCP option. This should be an integer between 2 and 254.
	Code string `json:"code"`
	// The type for the DHCP option. One of: 'text', 'ip', 'hex' or 'integer'
	Type UpdateNetworkVlanRequestBodyDhcpOptionsTypeEnum `json:"type"`
	// The value for the DHCP option
	Value string `json:"value"`
}

type UpdateNetworkVlanRequestBodyReservedIPRanges struct {
	// A text comment for the reserved range
	Comment string `json:"comment"`
	// The last IP in the reserved range
	End string `json:"end"`
	// The first IP in the reserved range
	Start string `json:"start"`
}

type UpdateNetworkVlanRequestBody struct {
	// The local IP of the appliance on the VLAN
	ApplianceIP *string `json:"applianceIp,omitempty"`
	// DHCP boot option for boot filename
	DhcpBootFilename *string `json:"dhcpBootFilename,omitempty"`
	// DHCP boot option to direct boot clients to the server to load the boot file from
	DhcpBootNextServer *string `json:"dhcpBootNextServer,omitempty"`
	// Use DHCP boot options specified in other properties
	DhcpBootOptionsEnabled *bool `json:"dhcpBootOptionsEnabled,omitempty"`
	// The appliance's handling of DHCP requests on this VLAN. One of: 'Run a DHCP server', 'Relay DHCP to another server' or 'Do not respond to DHCP requests'
	DhcpHandling *UpdateNetworkVlanRequestBodyDhcpHandlingEnum `json:"dhcpHandling,omitempty"`
	// The term of DHCP leases if the appliance is running a DHCP server on this VLAN. One of: '30 minutes', '1 hour', '4 hours', '12 hours', '1 day' or '1 week'
	DhcpLeaseTime *UpdateNetworkVlanRequestBodyDhcpLeaseTimeEnum `json:"dhcpLeaseTime,omitempty"`
	// The list of DHCP options that will be included in DHCP responses. Each object in the list should have "code", "type", and "value" properties.
	DhcpOptions []UpdateNetworkVlanRequestBodyDhcpOptions `json:"dhcpOptions,omitempty"`
	// The IPs of the DHCP servers that DHCP requests should be relayed to
	DhcpRelayServerIps []string `json:"dhcpRelayServerIps,omitempty"`
	// The DNS nameservers used for DHCP responses, either "upstream_dns", "google_dns", "opendns", or a newline seperated string of IP addresses or domain names
	DNSNameservers *string `json:"dnsNameservers,omitempty"`
	// The DHCP fixed IP assignments on the VLAN. This should be an object that contains mappings from MAC addresses to objects that themselves each contain "ip" and "name" string fields. See the sample request/response for more details.
	FixedIPAssignments map[string]interface{} `json:"fixedIpAssignments,omitempty"`
	// The id of the desired group policy to apply to the VLAN
	GroupPolicyID *string `json:"groupPolicyId,omitempty"`
	// The name of the VLAN
	Name *string `json:"name,omitempty"`
	// The DHCP reserved IP ranges on the VLAN
	ReservedIPRanges []UpdateNetworkVlanRequestBodyReservedIPRanges `json:"reservedIpRanges,omitempty"`
	// The subnet of the VLAN
	Subnet *string `json:"subnet,omitempty"`
	// The translated VPN subnet if VPN and VPN subnet translation are enabled on the VLAN
	VpnNatSubnet *string `json:"vpnNatSubnet,omitempty"`
}

type UpdateNetworkVlanRequest struct {
	RequestBody *UpdateNetworkVlanRequestBody `request:"mediaType=application/json"`
	NetworkID   string                        `pathParam:"style=simple,explode=false,name=networkId"`
	VlanID      string                        `pathParam:"style=simple,explode=false,name=vlanId"`
}

type UpdateNetworkVlanResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkVlan200ApplicationJSONObject map[string]interface{}
}
