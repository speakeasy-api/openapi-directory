// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// IssueJobStatusStatusEnum - The status of the import/export job
type IssueJobStatusStatusEnum string

const (
	IssueJobStatusStatusEnumAccepted IssueJobStatusStatusEnum = "ACCEPTED"
	IssueJobStatusStatusEnumStarted  IssueJobStatusStatusEnum = "STARTED"
	IssueJobStatusStatusEnumRunning  IssueJobStatusStatusEnum = "RUNNING"
	IssueJobStatusStatusEnumFailure  IssueJobStatusStatusEnum = "FAILURE"
)

func (e *IssueJobStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ACCEPTED":
		fallthrough
	case "STARTED":
		fallthrough
	case "RUNNING":
		fallthrough
	case "FAILURE":
		*e = IssueJobStatusStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for IssueJobStatusStatusEnum: %s", s)
	}
}

// IssueJobStatus - The status of an import or export job
type IssueJobStatus struct {
	// The total number of issues already imported/exported
	Count *int64 `json:"count,omitempty"`
	// The percentage of issues already imported/exported
	Pct *float64 `json:"pct,omitempty"`
	// The phase of the import/export job
	Phase *string `json:"phase,omitempty"`
	// The status of the import/export job
	Status *IssueJobStatusStatusEnum `json:"status,omitempty"`
	// The total number of issues being imported/exported
	Total *int64  `json:"total,omitempty"`
	Type  *string `json:"type,omitempty"`
}
