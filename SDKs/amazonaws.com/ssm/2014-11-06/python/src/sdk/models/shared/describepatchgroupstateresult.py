"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DescribePatchGroupStateResult:
    r"""Success"""
    
    instances: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Instances'), 'exclude': lambda f: f is None }})  
    instances_with_critical_non_compliant_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithCriticalNonCompliantPatches'), 'exclude': lambda f: f is None }})  
    instances_with_failed_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithFailedPatches'), 'exclude': lambda f: f is None }})  
    instances_with_installed_other_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithInstalledOtherPatches'), 'exclude': lambda f: f is None }})  
    instances_with_installed_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithInstalledPatches'), 'exclude': lambda f: f is None }})  
    instances_with_installed_pending_reboot_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithInstalledPendingRebootPatches'), 'exclude': lambda f: f is None }})  
    instances_with_installed_rejected_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithInstalledRejectedPatches'), 'exclude': lambda f: f is None }})  
    instances_with_missing_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithMissingPatches'), 'exclude': lambda f: f is None }})  
    instances_with_not_applicable_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithNotApplicablePatches'), 'exclude': lambda f: f is None }})  
    instances_with_other_non_compliant_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithOtherNonCompliantPatches'), 'exclude': lambda f: f is None }})  
    instances_with_security_non_compliant_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithSecurityNonCompliantPatches'), 'exclude': lambda f: f is None }})  
    instances_with_unreported_not_applicable_patches: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstancesWithUnreportedNotApplicablePatches'), 'exclude': lambda f: f is None }})  
    