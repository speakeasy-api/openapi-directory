/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SourceSplitResponse - The response to a SourceSplitRequest.
 */
public class SourceSplitResponse {
    /**
     * If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bundles")
    public DerivedSource[] bundles;

    public SourceSplitResponse withBundles(DerivedSource[] bundles) {
        this.bundles = bundles;
        return this;
    }
    
    /**
     * Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed "as is" without splitting. "bundles" is ignored in this case. If this is SPLITTING_HAPPENED, then "bundles" contains a list of bundles into which the source was split.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outcome")
    public SourceSplitResponseOutcomeEnum outcome;

    public SourceSplitResponse withOutcome(SourceSplitResponseOutcomeEnum outcome) {
        this.outcome = outcome;
        return this;
    }
    
    /**
     * DEPRECATED in favor of bundles.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shards")
    public SourceSplitShard[] shards;

    public SourceSplitResponse withShards(SourceSplitShard[] shards) {
        this.shards = shards;
        return this;
    }
    
    public SourceSplitResponse(){}
}
