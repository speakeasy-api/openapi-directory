"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudbaremetalsolutionv2logicalinterface as shared_googlecloudbaremetalsolutionv2logicalinterface
from ..shared import networkaddress as shared_networkaddress
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InstanceConfigNetworkConfigEnum(str, Enum):
    r"""The type of network configuration on the instance."""
    NETWORKCONFIG_UNSPECIFIED = 'NETWORKCONFIG_UNSPECIFIED'
    SINGLE_VLAN = 'SINGLE_VLAN'
    MULTI_VLAN = 'MULTI_VLAN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceConfigInput:
    r"""Configuration parameters for a new instance."""
    
    account_networks_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNetworksEnabled'), 'exclude': lambda f: f is None }})
    r"""If true networks can be from different projects of the same vendor account."""  
    client_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    hyperthreading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperthreading'), 'exclude': lambda f: f is None }})
    r"""Whether the instance should be provisioned with Hyperthreading enabled."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A transient unique identifier to idenfity an instance within an ProvisioningConfig request."""  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})
    r"""Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)"""  
    logical_interfaces: Optional[list[shared_googlecloudbaremetalsolutionv2logicalinterface.GoogleCloudBaremetalsolutionV2LogicalInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logicalInterfaces'), 'exclude': lambda f: f is None }})
    r"""List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true."""  
    network_config: Optional[InstanceConfigNetworkConfigEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfig'), 'exclude': lambda f: f is None }})
    r"""The type of network configuration on the instance."""  
    network_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTemplate'), 'exclude': lambda f: f is None }})
    r"""Server network template name. Filled if InstanceConfig.multivlan_config is true."""  
    os_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osImage'), 'exclude': lambda f: f is None }})
    r"""OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)"""  
    private_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    user_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userNote'), 'exclude': lambda f: f is None }})
    r"""User note field, it can be used by customers to add additional information for the BMS Ops team ."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceConfig:
    r"""Configuration parameters for a new instance."""
    
    account_networks_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNetworksEnabled'), 'exclude': lambda f: f is None }})
    r"""If true networks can be from different projects of the same vendor account."""  
    client_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    hyperthreading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperthreading'), 'exclude': lambda f: f is None }})
    r"""Whether the instance should be provisioned with Hyperthreading enabled."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A transient unique identifier to idenfity an instance within an ProvisioningConfig request."""  
    instance_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceType'), 'exclude': lambda f: f is None }})
    r"""Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)"""  
    logical_interfaces: Optional[list[shared_googlecloudbaremetalsolutionv2logicalinterface.GoogleCloudBaremetalsolutionV2LogicalInterface]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logicalInterfaces'), 'exclude': lambda f: f is None }})
    r"""List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the instance config."""  
    network_config: Optional[InstanceConfigNetworkConfigEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkConfig'), 'exclude': lambda f: f is None }})
    r"""The type of network configuration on the instance."""  
    network_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTemplate'), 'exclude': lambda f: f is None }})
    r"""Server network template name. Filled if InstanceConfig.multivlan_config is true."""  
    os_image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osImage'), 'exclude': lambda f: f is None }})
    r"""OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)"""  
    private_network: Optional[shared_networkaddress.NetworkAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateNetwork'), 'exclude': lambda f: f is None }})
    r"""A network."""  
    user_note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userNote'), 'exclude': lambda f: f is None }})
    r"""User note field, it can be used by customers to add additional information for the BMS Ops team ."""  
    