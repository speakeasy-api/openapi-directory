// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddApplicationInputProcessingConfigurationXAmzTargetEnum
type AddApplicationInputProcessingConfigurationXAmzTargetEnum string

const (
	AddApplicationInputProcessingConfigurationXAmzTargetEnumKinesisAnalytics20180523AddApplicationInputProcessingConfiguration AddApplicationInputProcessingConfigurationXAmzTargetEnum = "KinesisAnalytics_20180523.AddApplicationInputProcessingConfiguration"
)

func (e *AddApplicationInputProcessingConfigurationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "KinesisAnalytics_20180523.AddApplicationInputProcessingConfiguration":
		*e = AddApplicationInputProcessingConfigurationXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AddApplicationInputProcessingConfigurationXAmzTargetEnum: %s", s)
	}
}

type AddApplicationInputProcessingConfigurationHeaders struct {
	XAmzAlgorithm     *string                                                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        AddApplicationInputProcessingConfigurationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AddApplicationInputProcessingConfigurationRequest struct {
	Headers AddApplicationInputProcessingConfigurationHeaders
	Request shared.AddApplicationInputProcessingConfigurationRequest `request:"mediaType=application/json"`
}

type AddApplicationInputProcessingConfigurationResponse struct {
	// Success
	AddApplicationInputProcessingConfigurationResponse *shared.AddApplicationInputProcessingConfigurationResponse
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
