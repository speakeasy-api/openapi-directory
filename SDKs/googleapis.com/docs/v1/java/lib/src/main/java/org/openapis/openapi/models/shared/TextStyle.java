/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TextStyle - Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
 */
public class TextStyle {
    /**
     * A color that can either be fully opaque or fully transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundColor")
    public OptionalColor backgroundColor;

    public TextStyle withBackgroundColor(OptionalColor backgroundColor) {
        this.backgroundColor = backgroundColor;
        return this;
    }
    
    /**
     * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("baselineOffset")
    public TextStyleBaselineOffsetEnum baselineOffset;

    public TextStyle withBaselineOffset(TextStyleBaselineOffsetEnum baselineOffset) {
        this.baselineOffset = baselineOffset;
        return this;
    }
    
    /**
     * Whether or not the text is rendered as bold.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bold")
    public Boolean bold;

    public TextStyle withBold(Boolean bold) {
        this.bold = bold;
        return this;
    }
    
    /**
     * A magnitude in a single direction in the specified units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fontSize")
    public Dimension fontSize;

    public TextStyle withFontSize(Dimension fontSize) {
        this.fontSize = fontSize;
        return this;
    }
    
    /**
     * A color that can either be fully opaque or fully transparent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("foregroundColor")
    public OptionalColor foregroundColor;

    public TextStyle withForegroundColor(OptionalColor foregroundColor) {
        this.foregroundColor = foregroundColor;
        return this;
    }
    
    /**
     * Whether or not the text is italicized.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("italic")
    public Boolean italic;

    public TextStyle withItalic(Boolean italic) {
        this.italic = italic;
        return this;
    }
    
    /**
     * A reference to another portion of a document or an external URL resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link")
    public Link link;

    public TextStyle withLink(Link link) {
        this.link = link;
        return this;
    }
    
    /**
     * Whether or not the text is in small capital letters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smallCaps")
    public Boolean smallCaps;

    public TextStyle withSmallCaps(Boolean smallCaps) {
        this.smallCaps = smallCaps;
        return this;
    }
    
    /**
     * Whether or not the text is struck through.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("strikethrough")
    public Boolean strikethrough;

    public TextStyle withStrikethrough(Boolean strikethrough) {
        this.strikethrough = strikethrough;
        return this;
    }
    
    /**
     * Whether or not the text is underlined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("underline")
    public Boolean underline;

    public TextStyle withUnderline(Boolean underline) {
        this.underline = underline;
        return this;
    }
    
    /**
     * Represents a font family and weight of text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weightedFontFamily")
    public WeightedFontFamily weightedFontFamily;

    public TextStyle withWeightedFontFamily(WeightedFontFamily weightedFontFamily) {
        this.weightedFontFamily = weightedFontFamily;
        return this;
    }
    
    public TextStyle(){}
}
