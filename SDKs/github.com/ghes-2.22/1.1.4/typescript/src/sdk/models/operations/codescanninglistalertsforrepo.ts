/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CodeScanningListAlertsForRepoRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * Page number of the results to fetch.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Results per page (max 100)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ref" })
  ref?: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;

  /**
   * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: shared.CodeScanningAlertStateEnum;

  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tool_guid",
  })
  toolGuid?: string;

  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tool_name",
  })
  toolName?: string;
}

/**
 * Service unavailable
 */
export class CodeScanningListAlertsForRepo503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "documentation_url" })
  documentationUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

export class CodeScanningListAlertsForRepoResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata({ elemType: shared.CodeScanningAlertItems })
  codeScanningAlertItems?: shared.CodeScanningAlertItems[];

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  codeScanningListAlertsForRepo503ApplicationJSONObject?: CodeScanningListAlertsForRepo503ApplicationJSON;
}
