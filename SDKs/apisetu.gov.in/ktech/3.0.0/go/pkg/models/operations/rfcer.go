// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RfcerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type RfcerRequestBodyCertificateParameters struct {
	// cert_type
	CertType string `json:"cert_type"`
	// company_name
	CompanyName string `json:"company_name"`
	// reg_no
	RegNo string `json:"reg_no"`
	// sector
	Sector string `json:"sector"`
}

// RfcerRequestBodyFormatEnum - The format of the certificate in response.
type RfcerRequestBodyFormatEnum string

const (
	RfcerRequestBodyFormatEnumPdf RfcerRequestBodyFormatEnum = "pdf"
)

func (e *RfcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = RfcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RfcerRequestBodyFormatEnum: %s", s)
	}
}

// RfcerRequestBody - Request format
type RfcerRequestBody struct {
	CertificateParameters *RfcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RfcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type RfcerRequest struct {
	// Request format
	Request  *RfcerRequestBody `request:"mediaType=application/json"`
	Security RfcerSecurity
}

type Rfcer504ApplicationJSONErrorEnum string

const (
	Rfcer504ApplicationJSONErrorEnumGatewayTimeout Rfcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Rfcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Rfcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer504ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rfcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Rfcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Rfcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer504ApplicationJSON - Gateway timeout
type Rfcer504ApplicationJSON struct {
	Error            *Rfcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer503ApplicationJSONErrorEnum string

const (
	Rfcer503ApplicationJSONErrorEnumServiceUnavailable Rfcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Rfcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Rfcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer503ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rfcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Rfcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Rfcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer503ApplicationJSON - Service unavailable
type Rfcer503ApplicationJSON struct {
	Error            *Rfcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer502ApplicationJSONErrorEnum string

const (
	Rfcer502ApplicationJSONErrorEnumBadGatewy Rfcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Rfcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Rfcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer502ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rfcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Rfcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Rfcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer502ApplicationJSON - Bad gateway
type Rfcer502ApplicationJSON struct {
	Error            *Rfcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer500ApplicationJSONErrorEnum string

const (
	Rfcer500ApplicationJSONErrorEnumInternalServerError Rfcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Rfcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Rfcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer500ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer500ApplicationJSONErrorDescriptionEnumInternalServerError Rfcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Rfcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Rfcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer500ApplicationJSON - Internal server error
type Rfcer500ApplicationJSON struct {
	Error            *Rfcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer404ApplicationJSONErrorEnum string

const (
	Rfcer404ApplicationJSONErrorEnumRecordNotFound Rfcer404ApplicationJSONErrorEnum = "record_not_found"
	Rfcer404ApplicationJSONErrorEnumURLNotFound    Rfcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Rfcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rfcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer404ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rfcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rfcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rfcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Rfcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rfcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer404ApplicationJSON - No record found
type Rfcer404ApplicationJSON struct {
	Error            *Rfcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer401ApplicationJSONErrorEnum string

const (
	Rfcer401ApplicationJSONErrorEnumInvalidAuthentication Rfcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rfcer401ApplicationJSONErrorEnumInvalidAuthorization  Rfcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Rfcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rfcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer401ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rfcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rfcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rfcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Rfcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rfcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer401ApplicationJSON - Unauthorized access
type Rfcer401ApplicationJSON struct {
	Error            *Rfcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rfcer400ApplicationJSONErrorEnum string

const (
	Rfcer400ApplicationJSONErrorEnumMissingParameter Rfcer400ApplicationJSONErrorEnum = "missing_parameter"
	Rfcer400ApplicationJSONErrorEnumInvalidParameter Rfcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rfcer400ApplicationJSONErrorEnumInvalidFormat    Rfcer400ApplicationJSONErrorEnum = "invalid_format"
	Rfcer400ApplicationJSONErrorEnumInvalidTxnid     Rfcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rfcer400ApplicationJSONErrorEnumInvalidConsentid Rfcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Rfcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rfcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Rfcer400ApplicationJSONErrorDescriptionEnum string

const (
	Rfcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rfcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rfcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rfcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rfcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rfcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rfcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rfcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rfcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rfcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Rfcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rfcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Rfcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Rfcer400ApplicationJSON - Bad request
type Rfcer400ApplicationJSON struct {
	Error            *Rfcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rfcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RfcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rfcer400ApplicationJSONObject *Rfcer400ApplicationJSON
	// Unauthorized access
	Rfcer401ApplicationJSONObject *Rfcer401ApplicationJSON
	// No record found
	Rfcer404ApplicationJSONObject *Rfcer404ApplicationJSON
	// Internal server error
	Rfcer500ApplicationJSONObject *Rfcer500ApplicationJSON
	// Bad gateway
	Rfcer502ApplicationJSONObject *Rfcer502ApplicationJSON
	// Service unavailable
	Rfcer503ApplicationJSONObject *Rfcer503ApplicationJSON
	// Gateway timeout
	Rfcer504ApplicationJSONObject *Rfcer504ApplicationJSON
}
