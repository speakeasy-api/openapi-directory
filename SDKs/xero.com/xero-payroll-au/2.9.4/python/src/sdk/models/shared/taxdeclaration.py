"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import employmentbasis_enum as shared_employmentbasis_enum
from ..shared import residencystatus_enum as shared_residencystatus_enum
from ..shared import tfnexemptiontype_enum as shared_tfnexemptiontype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxDeclarationInput:
    
    approved_withholding_variation_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovedWithholdingVariationPercentage'), 'exclude': lambda f: f is None }})
    r"""If the employee has approved withholding variation. e.g (0 - 100)"""  
    australian_resident_for_tax_purposes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AustralianResidentForTaxPurposes'), 'exclude': lambda f: f is None }})
    r"""If the employee is Australian resident for tax purposes. e.g true or false"""  
    eligible_to_receive_leave_loading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EligibleToReceiveLeaveLoading'), 'exclude': lambda f: f is None }})
    r"""If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false"""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeID'), 'exclude': lambda f: f is None }})
    r"""Address line 1 for employee home address"""  
    employment_basis: Optional[shared_employmentbasis_enum.EmploymentBasisEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmploymentBasis'), 'exclude': lambda f: f is None }})  
    has_help_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasHELPDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has HECS or HELP debt. e.g true or false"""  
    has_sfss_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasSFSSDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has financial supplement debt. e.g true or false"""  
    has_student_startup_loan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasStudentStartupLoan'), 'exclude': lambda f: f is None }})
    r"""If the employee is eligible for student startup loan rules"""  
    has_trade_support_loan_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasTradeSupportLoanDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has trade support loan. e.g true or false"""  
    residency_status: Optional[shared_residencystatus_enum.ResidencyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResidencyStatus'), 'exclude': lambda f: f is None }})  
    tax_file_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxFileNumber'), 'exclude': lambda f: f is None }})
    r"""The tax file number e.g 123123123."""  
    tax_free_threshold_claimed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxFreeThresholdClaimed'), 'exclude': lambda f: f is None }})
    r"""If tax free threshold claimed. e.g true or false"""  
    tax_offset_estimated_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxOffsetEstimatedAmount'), 'exclude': lambda f: f is None }})
    r"""If has tax offset estimated then the tax offset estimated amount. e.g 100"""  
    tfn_exemption_type: Optional[shared_tfnexemptiontype_enum.TFNExemptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TFNExemptionType'), 'exclude': lambda f: f is None }})  
    upward_variation_tax_withholding_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpwardVariationTaxWithholdingAmount'), 'exclude': lambda f: f is None }})
    r"""If the employee has requested that additional tax be withheld each pay run. e.g 50"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxDeclaration:
    
    approved_withholding_variation_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApprovedWithholdingVariationPercentage'), 'exclude': lambda f: f is None }})
    r"""If the employee has approved withholding variation. e.g (0 - 100)"""  
    australian_resident_for_tax_purposes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AustralianResidentForTaxPurposes'), 'exclude': lambda f: f is None }})
    r"""If the employee is Australian resident for tax purposes. e.g true or false"""  
    eligible_to_receive_leave_loading: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EligibleToReceiveLeaveLoading'), 'exclude': lambda f: f is None }})
    r"""If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false"""  
    employee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeID'), 'exclude': lambda f: f is None }})
    r"""Address line 1 for employee home address"""  
    employment_basis: Optional[shared_employmentbasis_enum.EmploymentBasisEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmploymentBasis'), 'exclude': lambda f: f is None }})  
    has_help_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasHELPDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has HECS or HELP debt. e.g true or false"""  
    has_sfss_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasSFSSDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has financial supplement debt. e.g true or false"""  
    has_student_startup_loan: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasStudentStartupLoan'), 'exclude': lambda f: f is None }})
    r"""If the employee is eligible for student startup loan rules"""  
    has_trade_support_loan_debt: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HasTradeSupportLoanDebt'), 'exclude': lambda f: f is None }})
    r"""If employee has trade support loan. e.g true or false"""  
    residency_status: Optional[shared_residencystatus_enum.ResidencyStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResidencyStatus'), 'exclude': lambda f: f is None }})  
    tax_file_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxFileNumber'), 'exclude': lambda f: f is None }})
    r"""The tax file number e.g 123123123."""  
    tax_free_threshold_claimed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxFreeThresholdClaimed'), 'exclude': lambda f: f is None }})
    r"""If tax free threshold claimed. e.g true or false"""  
    tax_offset_estimated_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaxOffsetEstimatedAmount'), 'exclude': lambda f: f is None }})
    r"""If has tax offset estimated then the tax offset estimated amount. e.g 100"""  
    tfn_exemption_type: Optional[shared_tfnexemptiontype_enum.TFNExemptionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TFNExemptionType'), 'exclude': lambda f: f is None }})  
    updated_date_utc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDateUTC'), 'exclude': lambda f: f is None }})
    r"""Last modified timestamp"""  
    upward_variation_tax_withholding_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpwardVariationTaxWithholdingAmount'), 'exclude': lambda f: f is None }})
    r"""If the employee has requested that additional tax be withheld each pay run. e.g 50"""  
    