// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableServiceProtocolEnum string

const (
	WritableServiceProtocolEnumSix       WritableServiceProtocolEnum = "6"
	WritableServiceProtocolEnumSeventeen WritableServiceProtocolEnum = "17"
)

func (e *WritableServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "6":
		fallthrough
	case "17":
		*e = WritableServiceProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableServiceProtocolEnum: %s", s)
	}
}

type WritableServiceInput struct {
	CustomFields   map[string]interface{}      `json:"custom_fields,omitempty"`
	Description    *string                     `json:"description,omitempty"`
	Device         *int64                      `json:"device,omitempty"`
	Ipaddresses    []int64                     `json:"ipaddresses,omitempty"`
	Name           string                      `json:"name"`
	Port           int64                       `json:"port"`
	Protocol       WritableServiceProtocolEnum `json:"protocol"`
	VirtualMachine *int64                      `json:"virtual_machine,omitempty"`
}
