"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dateinterval as shared_dateinterval
from ..shared import expression as shared_expression
from ..shared import granularity_enum as shared_granularity_enum
from ..shared import metric_enum as shared_metric_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetUsageForecastRequest:
    
    granularity: shared_granularity_enum.GranularityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Granularity') }})  
    metric: shared_metric_enum.MetricEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Metric') }})  
    time_period: shared_dateinterval.DateInterval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimePeriod') }})  
    filter: Optional[shared_expression.Expression] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filter'), 'exclude': lambda f: f is None }})  
    prediction_interval_level: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PredictionIntervalLevel'), 'exclude': lambda f: f is None }})  
    