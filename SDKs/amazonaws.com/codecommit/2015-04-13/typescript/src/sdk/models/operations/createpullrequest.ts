/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum CreatePullRequestXAmzTargetEnum {
  CodeCommit20150413CreatePullRequest = "CodeCommit_20150413.CreatePullRequest",
}

export class CreatePullRequestRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  createPullRequestInput: shared.CreatePullRequestInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: CreatePullRequestXAmzTargetEnum;
}

export class CreatePullRequestResponse extends SpeakeasyBase {
  /**
   * ClientRequestTokenRequiredException
   */
  @SpeakeasyMetadata()
  clientRequestTokenRequiredException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createPullRequestOutput?: shared.CreatePullRequestOutput;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * IdempotencyParameterMismatchException
   */
  @SpeakeasyMetadata()
  idempotencyParameterMismatchException?: any;

  /**
   * InvalidClientRequestTokenException
   */
  @SpeakeasyMetadata()
  invalidClientRequestTokenException?: any;

  /**
   * InvalidDescriptionException
   */
  @SpeakeasyMetadata()
  invalidDescriptionException?: any;

  /**
   * InvalidReferenceNameException
   */
  @SpeakeasyMetadata()
  invalidReferenceNameException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidTargetException
   */
  @SpeakeasyMetadata()
  invalidTargetException?: any;

  /**
   * InvalidTargetsException
   */
  @SpeakeasyMetadata()
  invalidTargetsException?: any;

  /**
   * InvalidTitleException
   */
  @SpeakeasyMetadata()
  invalidTitleException?: any;

  /**
   * MaximumOpenPullRequestsExceededException
   */
  @SpeakeasyMetadata()
  maximumOpenPullRequestsExceededException?: any;

  /**
   * MultipleRepositoriesInPullRequestException
   */
  @SpeakeasyMetadata()
  multipleRepositoriesInPullRequestException?: any;

  /**
   * ReferenceDoesNotExistException
   */
  @SpeakeasyMetadata()
  referenceDoesNotExistException?: any;

  /**
   * ReferenceNameRequiredException
   */
  @SpeakeasyMetadata()
  referenceNameRequiredException?: any;

  /**
   * ReferenceTypeNotSupportedException
   */
  @SpeakeasyMetadata()
  referenceTypeNotSupportedException?: any;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  /**
   * SourceAndDestinationAreSameException
   */
  @SpeakeasyMetadata()
  sourceAndDestinationAreSameException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TargetRequiredException
   */
  @SpeakeasyMetadata()
  targetRequiredException?: any;

  /**
   * TargetsRequiredException
   */
  @SpeakeasyMetadata()
  targetsRequiredException?: any;

  /**
   * TitleRequiredException
   */
  @SpeakeasyMetadata()
  titleRequiredException?: any;
}
