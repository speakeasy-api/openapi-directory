// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

type SymbolUploadsCompleteSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

// SymbolUploadsCompleteRequestBodyStatusEnum - The desired operation for the symbol upload
type SymbolUploadsCompleteRequestBodyStatusEnum string

const (
	SymbolUploadsCompleteRequestBodyStatusEnumCommitted SymbolUploadsCompleteRequestBodyStatusEnum = "committed"
	SymbolUploadsCompleteRequestBodyStatusEnumAborted   SymbolUploadsCompleteRequestBodyStatusEnum = "aborted"
)

func (e *SymbolUploadsCompleteRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "committed":
		fallthrough
	case "aborted":
		*e = SymbolUploadsCompleteRequestBodyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsCompleteRequestBodyStatusEnum: %s", s)
	}
}

// SymbolUploadsCompleteRequestBody - A request containing information pertaining to completing a symbol upload process
type SymbolUploadsCompleteRequestBody struct {
	// The desired operation for the symbol upload
	Status SymbolUploadsCompleteRequestBodyStatusEnum `json:"status"`
}

type SymbolUploadsCompleteRequest struct {
	// The symbol information
	RequestBody SymbolUploadsCompleteRequestBody `request:"mediaType=application/json"`
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The ID of the symbol upload
	SymbolUploadID string `pathParam:"style=simple,explode=false,name=symbol_upload_id"`
}

// SymbolUploadsComplete500ApplicationJSON - Internal error
type SymbolUploadsComplete500ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsComplete403ApplicationJSON - Unauthorized
type SymbolUploadsComplete403ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsComplete400ApplicationJSON - Bad request
type SymbolUploadsComplete400ApplicationJSON struct {
	Message string `json:"message"`
}

// SymbolUploadsComplete200ApplicationJSONOriginEnum - The origin of the symbol upload
type SymbolUploadsComplete200ApplicationJSONOriginEnum string

const (
	SymbolUploadsComplete200ApplicationJSONOriginEnumUser   SymbolUploadsComplete200ApplicationJSONOriginEnum = "User"
	SymbolUploadsComplete200ApplicationJSONOriginEnumSystem SymbolUploadsComplete200ApplicationJSONOriginEnum = "System"
)

func (e *SymbolUploadsComplete200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "User":
		fallthrough
	case "System":
		*e = SymbolUploadsComplete200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsComplete200ApplicationJSONOriginEnum: %s", s)
	}
}

// SymbolUploadsComplete200ApplicationJSONStatusEnum - The current status for the symbol upload
type SymbolUploadsComplete200ApplicationJSONStatusEnum string

const (
	SymbolUploadsComplete200ApplicationJSONStatusEnumCreated    SymbolUploadsComplete200ApplicationJSONStatusEnum = "created"
	SymbolUploadsComplete200ApplicationJSONStatusEnumCommitted  SymbolUploadsComplete200ApplicationJSONStatusEnum = "committed"
	SymbolUploadsComplete200ApplicationJSONStatusEnumAborted    SymbolUploadsComplete200ApplicationJSONStatusEnum = "aborted"
	SymbolUploadsComplete200ApplicationJSONStatusEnumProcessing SymbolUploadsComplete200ApplicationJSONStatusEnum = "processing"
	SymbolUploadsComplete200ApplicationJSONStatusEnumIndexed    SymbolUploadsComplete200ApplicationJSONStatusEnum = "indexed"
	SymbolUploadsComplete200ApplicationJSONStatusEnumFailed     SymbolUploadsComplete200ApplicationJSONStatusEnum = "failed"
)

func (e *SymbolUploadsComplete200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "committed":
		fallthrough
	case "aborted":
		fallthrough
	case "processing":
		fallthrough
	case "indexed":
		fallthrough
	case "failed":
		*e = SymbolUploadsComplete200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsComplete200ApplicationJSONStatusEnum: %s", s)
	}
}

// SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum - The type of the symbol for the current symbol upload
type SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum string

const (
	SymbolUploadsComplete200ApplicationJSONSymbolTypeEnumApple           SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum = "Apple"
	SymbolUploadsComplete200ApplicationJSONSymbolTypeEnumJavaScript      SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum = "JavaScript"
	SymbolUploadsComplete200ApplicationJSONSymbolTypeEnumBreakpad        SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum = "Breakpad"
	SymbolUploadsComplete200ApplicationJSONSymbolTypeEnumAndroidProguard SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum = "AndroidProguard"
	SymbolUploadsComplete200ApplicationJSONSymbolTypeEnumUwp             SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum = "UWP"
)

func (e *SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Apple":
		fallthrough
	case "JavaScript":
		fallthrough
	case "Breakpad":
		fallthrough
	case "AndroidProguard":
		fallthrough
	case "UWP":
		*e = SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum: %s", s)
	}
}

type SymbolUploadsComplete200ApplicationJSONSymbolsUploaded struct {
	// The platform the symbol is associated with
	Platform string `json:"platform"`
	// The symbol id of the symbol binary
	SymbolID string `json:"symbol_id"`
}

// SymbolUploadsComplete200ApplicationJSONUser - User information of the one who intitiated the symbol upload
type SymbolUploadsComplete200ApplicationJSONUser struct {
	// The full name of the user. Might for example be first and last name
	DisplayName *string `json:"display_name,omitempty"`
	// The email of the user
	Email *string `json:"email,omitempty"`
}

// SymbolUploadsComplete200ApplicationJSON - A single symbol upload entity
type SymbolUploadsComplete200ApplicationJSON struct {
	// The application that this symbol upload belongs to
	AppID string `json:"app_id"`
	// The file name for the symbol upload
	FileName *string `json:"file_name,omitempty"`
	// The size of the file in Mebibytes. This may be 0 until the status is indexed
	FileSize *float64 `json:"file_size,omitempty"`
	// The origin of the symbol upload
	Origin *SymbolUploadsComplete200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The current status for the symbol upload
	Status SymbolUploadsComplete200ApplicationJSONStatusEnum `json:"status"`
	// The type of the symbol for the current symbol upload
	SymbolType SymbolUploadsComplete200ApplicationJSONSymbolTypeEnum `json:"symbol_type"`
	// The id for the current symbol upload
	SymbolUploadID string `json:"symbol_upload_id"`
	// The symbols found in the upload. This may be empty until the status is indexed
	SymbolsUploaded []SymbolUploadsComplete200ApplicationJSONSymbolsUploaded `json:"symbols_uploaded,omitempty"`
	// When the symbol upload was committed, or last transaction time if not committed
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// User information of the one who intitiated the symbol upload
	User *SymbolUploadsComplete200ApplicationJSONUser `json:"user,omitempty"`
}

type SymbolUploadsCompleteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	SymbolUploadsComplete200ApplicationJSONObject *SymbolUploadsComplete200ApplicationJSON
	// Bad request
	SymbolUploadsComplete400ApplicationJSONObject *SymbolUploadsComplete400ApplicationJSON
	// Unauthorized
	SymbolUploadsComplete403ApplicationJSONObject *SymbolUploadsComplete403ApplicationJSON
	// Internal error
	SymbolUploadsComplete500ApplicationJSONObject *SymbolUploadsComplete500ApplicationJSON
}
