"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSecdefRequestBody:
    r"""Order Parameters"""
    
    conid: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conid'), 'exclude': lambda f: f is None }})
    r"""The internal IB identifier for the trading product specified as an integer."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""The currency in which the given pair trades."""  
    exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchange'), 'exclude': lambda f: f is None }})
    r"""The exchange on which the trading product is listed (required for type=STK)."""  
    symbol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol'), 'exclude': lambda f: f is None }})
    r"""The symbol that identifies the trading product."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The instrument type of the contract (CASH)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetSecdef200ApplicationJSON:
    
    company_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CompanyName'), 'exclude': lambda f: f is None }})  
    contract_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractId'), 'exclude': lambda f: f is None }})  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})  
    exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Exchange'), 'exclude': lambda f: f is None }})  
    security_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityType'), 'exclude': lambda f: f is None }})  
    ticker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ticker'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetSecdefResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_secdef_200_application_json_objects: Optional[list[GetSecdef200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Financial Instrument Definition"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    