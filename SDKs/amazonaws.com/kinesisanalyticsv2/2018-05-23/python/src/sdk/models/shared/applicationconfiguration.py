"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import applicationcodeconfiguration as shared_applicationcodeconfiguration
from ..shared import applicationsnapshotconfiguration as shared_applicationsnapshotconfiguration
from ..shared import environmentproperties as shared_environmentproperties
from ..shared import flinkapplicationconfiguration as shared_flinkapplicationconfiguration
from ..shared import sqlapplicationconfiguration as shared_sqlapplicationconfiguration
from ..shared import vpcconfiguration as shared_vpcconfiguration
from ..shared import zeppelinapplicationconfiguration as shared_zeppelinapplicationconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ApplicationConfiguration:
    r"""Specifies the creation parameters for a Kinesis Data Analytics application."""
    
    application_code_configuration: Optional[shared_applicationcodeconfiguration.ApplicationCodeConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationCodeConfiguration'), 'exclude': lambda f: f is None }})  
    application_snapshot_configuration: Optional[shared_applicationsnapshotconfiguration.ApplicationSnapshotConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplicationSnapshotConfiguration'), 'exclude': lambda f: f is None }})  
    environment_properties: Optional[shared_environmentproperties.EnvironmentProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnvironmentProperties'), 'exclude': lambda f: f is None }})  
    flink_application_configuration: Optional[shared_flinkapplicationconfiguration.FlinkApplicationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlinkApplicationConfiguration'), 'exclude': lambda f: f is None }})  
    sql_application_configuration: Optional[shared_sqlapplicationconfiguration.SQLApplicationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SqlApplicationConfiguration'), 'exclude': lambda f: f is None }})  
    vpc_configurations: Optional[list[shared_vpcconfiguration.VpcConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfigurations'), 'exclude': lambda f: f is None }})  
    zeppelin_application_configuration: Optional[shared_zeppelinapplicationconfiguration.ZeppelinApplicationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZeppelinApplicationConfiguration'), 'exclude': lambda f: f is None }})  
    