"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import paymenteventresponsev3 as shared_paymenteventresponsev3
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentResponseV3:
    r"""200 response, request completed okay"""
    
    events: list[shared_paymenteventresponsev3.PaymentEventResponseV3] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events') }})  
    funding_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fundingStatus') }})
    r"""The funding status of the payment. One of the following values: [FUNDED, INSTRUCTED, UNFUNDED"""  
    payee_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeId') }})
    r"""The id of the paymeee"""  
    payment_amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentAmount') }})
    r"""The amount which the payee will receive"""  
    payment_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentId') }})
    r"""The id of the payment"""  
    payor_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorId') }})
    r"""The id of the payor"""  
    quote_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoteId') }})
    r"""The quote Id used for the FX"""  
    rails_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('railsId') }})
    r"""The rails ID. Default value is RAILS ID UNAVAILABLE when not populated."""  
    source_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountId') }})
    r"""The id of the source account from which the payment was taken"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Current status of the payment. One of the following values: ACCEPTED, AWAITING_FUNDS, FUNDED, UNFUNDED, BANK_PAYMENT_REQUESTED, REJECTED, ACCEPTED_BY_RAILS, CONFIRMED, FAILED, WITHDRAWN"""  
    submitted_date_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedDateTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountName'), 'exclude': lambda f: f is None }})  
    account_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountNumber'), 'exclude': lambda f: f is None }})
    r"""The account number for the account which will receive the payment."""  
    country_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryCode'), 'exclude': lambda f: f is None }})
    r"""The country code of the payment channel."""  
    filename_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filenameReference'), 'exclude': lambda f: f is None }})
    r"""ACH file payment was submitted in, if applicable"""  
    iban: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('iban'), 'exclude': lambda f: f is None }})
    r"""The iban for the payment."""  
    individual_identification_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individualIdentificationNumber'), 'exclude': lambda f: f is None }})
    r"""Individual Identification Number assigned to the payment in the ACH file, if applicable"""  
    inverted_rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('invertedRate'), 'exclude': lambda f: f is None }})
    r"""The inverted FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed"""  
    payment_channel_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelId'), 'exclude': lambda f: f is None }})  
    payment_channel_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannelName'), 'exclude': lambda f: f is None }})  
    payment_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentCurrency'), 'exclude': lambda f: f is None }})
    r"""ISO 3 character currency code"""  
    payment_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMemo'), 'exclude': lambda f: f is None }})
    r"""The payment memo set by the payor"""  
    payment_scheme: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentScheme'), 'exclude': lambda f: f is None }})  
    payor_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorName'), 'exclude': lambda f: f is None }})
    r"""The name of the payor"""  
    payor_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorPaymentId'), 'exclude': lambda f: f is None }})  
    rails_batch_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('railsBatchId'), 'exclude': lambda f: f is None }})  
    rails_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('railsPaymentId'), 'exclude': lambda f: f is None }})  
    rate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate'), 'exclude': lambda f: f is None }})
    r"""The FX rate for the payment, if FX was involved. **Note** that (depending on the role of the caller) this information may not be displayed"""  
    rejection_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectionReason'), 'exclude': lambda f: f is None }})  
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId'), 'exclude': lambda f: f is None }})
    r"""The remote id by which the payor refers to the payee. Only populated once payment is confirmed"""  
    return_cost: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnCost'), 'exclude': lambda f: f is None }})
    r"""The return cost if a returned payment."""  
    return_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnReason'), 'exclude': lambda f: f is None }})  
    routing_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routingNumber'), 'exclude': lambda f: f is None }})
    r"""The routing number for the payment."""  
    source_account_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAccountName'), 'exclude': lambda f: f is None }})
    r"""The name of the source account from which the payment was taken"""  
    source_amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceAmount'), 'exclude': lambda f: f is None }})
    r"""The source amount for the payment (amount debited to make the payment)"""  
    source_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCurrency'), 'exclude': lambda f: f is None }})
    r"""ISO 3 character currency code"""  
    trace_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('traceNumber'), 'exclude': lambda f: f is None }})
    r"""Trace Number assigned to the payment in the ACH file, if applicable"""  
    