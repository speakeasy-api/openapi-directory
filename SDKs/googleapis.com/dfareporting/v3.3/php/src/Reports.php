<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQuerySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryResponse
     */
	public function dfareportingReportsCompatibleFieldsQuery(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQuerySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/compatiblefields/query', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "report", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsCompatibleFieldsQueryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->compatibleFields = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CompatibleFields', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a report by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteResponse
     */
	public function dfareportingReportsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a report file by its report ID and file ID. This method supports media download.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetResponse
     */
	public function dfareportingReportsFilesGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}/files/{fileId}', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->file = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\File', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists files for a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListResponse
     */
	public function dfareportingReportsFilesList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}/files', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fileList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FileList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a report by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetResponse
     */
	public function dfareportingReportsGet(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertResponse
     */
	public function dfareportingReportsInsert(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "report", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves list of reports.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListResponse
     */
	public function dfareportingReportsList(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing report. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchResponse
     */
	public function dfareportingReportsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "report", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Runs a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunResponse
     */
	public function dfareportingReportsRun(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}/run', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->file = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\File', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateResponse
     */
	public function dfareportingReportsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/userprofiles/{profileId}/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "report", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfareportingReportsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }

        return $response;
    }
}