/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Request - A single kind of update to apply to a presentation.
 */
public class Request {
    /**
     * Creates an image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createImage")
    public CreateImageRequest createImage;

    public Request withCreateImage(CreateImageRequest createImage) {
        this.createImage = createImage;
        return this;
    }
    
    /**
     * Creates a line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createLine")
    public CreateLineRequest createLine;

    public Request withCreateLine(CreateLineRequest createLine) {
        this.createLine = createLine;
        return this;
    }
    
    /**
     * Creates bullets for all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createParagraphBullets")
    public CreateParagraphBulletsRequest createParagraphBullets;

    public Request withCreateParagraphBullets(CreateParagraphBulletsRequest createParagraphBullets) {
        this.createParagraphBullets = createParagraphBullets;
        return this;
    }
    
    /**
     * Creates a new shape.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createShape")
    public CreateShapeRequest createShape;

    public Request withCreateShape(CreateShapeRequest createShape) {
        this.createShape = createShape;
        return this;
    }
    
    /**
     * Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createSheetsChart")
    public CreateSheetsChartRequest createSheetsChart;

    public Request withCreateSheetsChart(CreateSheetsChartRequest createSheetsChart) {
        this.createSheetsChart = createSheetsChart;
        return this;
    }
    
    /**
     * Creates a slide.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createSlide")
    public CreateSlideRequest createSlide;

    public Request withCreateSlide(CreateSlideRequest createSlide) {
        this.createSlide = createSlide;
        return this;
    }
    
    /**
     * Creates a new table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createTable")
    public CreateTableRequest createTable;

    public Request withCreateTable(CreateTableRequest createTable) {
        this.createTable = createTable;
        return this;
    }
    
    /**
     * Creates a video. NOTE: Creating a video from Google Drive requires that the requesting app have at least one of the drive, drive.readonly, or drive.file OAuth scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createVideo")
    public CreateVideoRequest createVideo;

    public Request withCreateVideo(CreateVideoRequest createVideo) {
        this.createVideo = createVideo;
        return this;
    }
    
    /**
     * Deletes an object, either pages or page elements, from the presentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteObject")
    public DeleteObjectRequest deleteObject;

    public Request withDeleteObject(DeleteObjectRequest deleteObject) {
        this.deleteObject = deleteObject;
        return this;
    }
    
    /**
     * Deletes bullets from all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteParagraphBullets")
    public DeleteParagraphBulletsRequest deleteParagraphBullets;

    public Request withDeleteParagraphBullets(DeleteParagraphBulletsRequest deleteParagraphBullets) {
        this.deleteParagraphBullets = deleteParagraphBullets;
        return this;
    }
    
    /**
     * Deletes a column from a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTableColumn")
    public DeleteTableColumnRequest deleteTableColumn;

    public Request withDeleteTableColumn(DeleteTableColumnRequest deleteTableColumn) {
        this.deleteTableColumn = deleteTableColumn;
        return this;
    }
    
    /**
     * Deletes a row from a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteTableRow")
    public DeleteTableRowRequest deleteTableRow;

    public Request withDeleteTableRow(DeleteTableRowRequest deleteTableRow) {
        this.deleteTableRow = deleteTableRow;
        return this;
    }
    
    /**
     * Deletes text from a shape or a table cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleteText")
    public DeleteTextRequest deleteText;

    public Request withDeleteText(DeleteTextRequest deleteText) {
        this.deleteText = deleteText;
        return this;
    }
    
    /**
     * Duplicates a slide or page element. When duplicating a slide, the duplicate slide will be created immediately following the specified slide. When duplicating a page element, the duplicate will be placed on the same page at the same position as the original.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duplicateObject")
    public DuplicateObjectRequest duplicateObject;

    public Request withDuplicateObject(DuplicateObjectRequest duplicateObject) {
        this.duplicateObject = duplicateObject;
        return this;
    }
    
    /**
     * Groups objects to create an object group. For example, groups PageElements to create a Group on the same page as all the children.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupObjects")
    public GroupObjectsRequest groupObjects;

    public Request withGroupObjects(GroupObjectsRequest groupObjects) {
        this.groupObjects = groupObjects;
        return this;
    }
    
    /**
     * Inserts columns into a table. Other columns in the table will be resized to fit the new column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertTableColumns")
    public InsertTableColumnsRequest insertTableColumns;

    public Request withInsertTableColumns(InsertTableColumnsRequest insertTableColumns) {
        this.insertTableColumns = insertTableColumns;
        return this;
    }
    
    /**
     * Inserts rows into a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertTableRows")
    public InsertTableRowsRequest insertTableRows;

    public Request withInsertTableRows(InsertTableRowsRequest insertTableRows) {
        this.insertTableRows = insertTableRows;
        return this;
    }
    
    /**
     * Inserts text into a shape or a table cell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("insertText")
    public InsertTextRequest insertText;

    public Request withInsertText(InsertTextRequest insertText) {
        this.insertText = insertText;
        return this;
    }
    
    /**
     * Merges cells in a Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mergeTableCells")
    public MergeTableCellsRequest mergeTableCells;

    public Request withMergeTableCells(MergeTableCellsRequest mergeTableCells) {
        this.mergeTableCells = mergeTableCells;
        return this;
    }
    
    /**
     * Refreshes an embedded Google Sheets chart by replacing it with the latest version of the chart from Google Sheets. NOTE: Refreshing charts requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshSheetsChart")
    public RefreshSheetsChartRequest refreshSheetsChart;

    public Request withRefreshSheetsChart(RefreshSheetsChartRequest refreshSheetsChart) {
        this.refreshSheetsChart = refreshSheetsChart;
        return this;
    }
    
    /**
     * Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceAllShapesWithImage")
    public ReplaceAllShapesWithImageRequest replaceAllShapesWithImage;

    public Request withReplaceAllShapesWithImage(ReplaceAllShapesWithImageRequest replaceAllShapesWithImage) {
        this.replaceAllShapesWithImage = replaceAllShapesWithImage;
        return this;
    }
    
    /**
     * Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceAllShapesWithSheetsChart")
    public ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChart;

    public Request withReplaceAllShapesWithSheetsChart(ReplaceAllShapesWithSheetsChartRequest replaceAllShapesWithSheetsChart) {
        this.replaceAllShapesWithSheetsChart = replaceAllShapesWithSheetsChart;
        return this;
    }
    
    /**
     * Replaces all instances of text matching a criteria with replace text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceAllText")
    public ReplaceAllTextRequest replaceAllText;

    public Request withReplaceAllText(ReplaceAllTextRequest replaceAllText) {
        this.replaceAllText = replaceAllText;
        return this;
    }
    
    /**
     * Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replaceImage")
    public ReplaceImageRequest replaceImage;

    public Request withReplaceImage(ReplaceImageRequest replaceImage) {
        this.replaceImage = replaceImage;
        return this;
    }
    
    /**
     * Reroutes a line such that it's connected at the two closest connection sites on the connected page elements.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rerouteLine")
    public RerouteLineRequest rerouteLine;

    public Request withRerouteLine(RerouteLineRequest rerouteLine) {
        this.rerouteLine = rerouteLine;
        return this;
    }
    
    /**
     * Ungroups objects, such as groups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ungroupObjects")
    public UngroupObjectsRequest ungroupObjects;

    public Request withUngroupObjects(UngroupObjectsRequest ungroupObjects) {
        this.ungroupObjects = ungroupObjects;
        return this;
    }
    
    /**
     * Unmerges cells in a Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unmergeTableCells")
    public UnmergeTableCellsRequest unmergeTableCells;

    public Request withUnmergeTableCells(UnmergeTableCellsRequest unmergeTableCells) {
        this.unmergeTableCells = unmergeTableCells;
        return this;
    }
    
    /**
     * Update the properties of an Image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateImageProperties")
    public UpdateImagePropertiesRequest updateImageProperties;

    public Request withUpdateImageProperties(UpdateImagePropertiesRequest updateImageProperties) {
        this.updateImageProperties = updateImageProperties;
        return this;
    }
    
    /**
     * Updates the category of a line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateLineCategory")
    public UpdateLineCategoryRequest updateLineCategory;

    public Request withUpdateLineCategory(UpdateLineCategoryRequest updateLineCategory) {
        this.updateLineCategory = updateLineCategory;
        return this;
    }
    
    /**
     * Updates the properties of a Line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateLineProperties")
    public UpdateLinePropertiesRequest updateLineProperties;

    public Request withUpdateLineProperties(UpdateLinePropertiesRequest updateLineProperties) {
        this.updateLineProperties = updateLineProperties;
        return this;
    }
    
    /**
     * Updates the alt text title and/or description of a page element.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatePageElementAltText")
    public UpdatePageElementAltTextRequest updatePageElementAltText;

    public Request withUpdatePageElementAltText(UpdatePageElementAltTextRequest updatePageElementAltText) {
        this.updatePageElementAltText = updatePageElementAltText;
        return this;
    }
    
    /**
     * Updates the transform of a page element. Updating the transform of a group will change the absolute transform of the page elements in that group, which can change their visual appearance. See the documentation for PageElement.transform for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatePageElementTransform")
    public UpdatePageElementTransformRequest updatePageElementTransform;

    public Request withUpdatePageElementTransform(UpdatePageElementTransformRequest updatePageElementTransform) {
        this.updatePageElementTransform = updatePageElementTransform;
        return this;
    }
    
    /**
     * Updates the Z-order of page elements. Z-order is an ordering of the elements on the page from back to front. The page element in the front may cover the elements that are behind it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatePageElementsZOrder")
    public UpdatePageElementsZOrderRequest updatePageElementsZOrder;

    public Request withUpdatePageElementsZOrder(UpdatePageElementsZOrderRequest updatePageElementsZOrder) {
        this.updatePageElementsZOrder = updatePageElementsZOrder;
        return this;
    }
    
    /**
     * Updates the properties of a Page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatePageProperties")
    public UpdatePagePropertiesRequest updatePageProperties;

    public Request withUpdatePageProperties(UpdatePagePropertiesRequest updatePageProperties) {
        this.updatePageProperties = updatePageProperties;
        return this;
    }
    
    /**
     * Updates the styling for all of the paragraphs within a Shape or Table that overlap with the given text index range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateParagraphStyle")
    public UpdateParagraphStyleRequest updateParagraphStyle;

    public Request withUpdateParagraphStyle(UpdateParagraphStyleRequest updateParagraphStyle) {
        this.updateParagraphStyle = updateParagraphStyle;
        return this;
    }
    
    /**
     * Update the properties of a Shape.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateShapeProperties")
    public UpdateShapePropertiesRequest updateShapeProperties;

    public Request withUpdateShapeProperties(UpdateShapePropertiesRequest updateShapeProperties) {
        this.updateShapeProperties = updateShapeProperties;
        return this;
    }
    
    /**
     * Updates the properties of a Slide.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSlideProperties")
    public UpdateSlidePropertiesRequest updateSlideProperties;

    public Request withUpdateSlideProperties(UpdateSlidePropertiesRequest updateSlideProperties) {
        this.updateSlideProperties = updateSlideProperties;
        return this;
    }
    
    /**
     * Updates the position of slides in the presentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateSlidesPosition")
    public UpdateSlidesPositionRequest updateSlidesPosition;

    public Request withUpdateSlidesPosition(UpdateSlidesPositionRequest updateSlidesPosition) {
        this.updateSlidesPosition = updateSlidesPosition;
        return this;
    }
    
    /**
     * Updates the properties of the table borders in a Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableBorderProperties")
    public UpdateTableBorderPropertiesRequest updateTableBorderProperties;

    public Request withUpdateTableBorderProperties(UpdateTableBorderPropertiesRequest updateTableBorderProperties) {
        this.updateTableBorderProperties = updateTableBorderProperties;
        return this;
    }
    
    /**
     * Update the properties of a TableCell.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableCellProperties")
    public UpdateTableCellPropertiesRequest updateTableCellProperties;

    public Request withUpdateTableCellProperties(UpdateTableCellPropertiesRequest updateTableCellProperties) {
        this.updateTableCellProperties = updateTableCellProperties;
        return this;
    }
    
    /**
     * Updates the properties of a Table column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableColumnProperties")
    public UpdateTableColumnPropertiesRequest updateTableColumnProperties;

    public Request withUpdateTableColumnProperties(UpdateTableColumnPropertiesRequest updateTableColumnProperties) {
        this.updateTableColumnProperties = updateTableColumnProperties;
        return this;
    }
    
    /**
     * Updates the properties of a Table row.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTableRowProperties")
    public UpdateTableRowPropertiesRequest updateTableRowProperties;

    public Request withUpdateTableRowProperties(UpdateTableRowPropertiesRequest updateTableRowProperties) {
        this.updateTableRowProperties = updateTableRowProperties;
        return this;
    }
    
    /**
     * Update the styling of text in a Shape or Table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTextStyle")
    public UpdateTextStyleRequest updateTextStyle;

    public Request withUpdateTextStyle(UpdateTextStyleRequest updateTextStyle) {
        this.updateTextStyle = updateTextStyle;
        return this;
    }
    
    /**
     * Update the properties of a Video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateVideoProperties")
    public UpdateVideoPropertiesRequest updateVideoProperties;

    public Request withUpdateVideoProperties(UpdateVideoPropertiesRequest updateVideoProperties) {
        this.updateVideoProperties = updateVideoProperties;
        return this;
    }
    
    public Request(){}
}
