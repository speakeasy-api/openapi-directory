// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetServerTypesRequest struct {
	// Can be used to filter Server types by their name. The response will only contain the Server type matching the specified name.
	Name *string `queryParam:"style=form,explode=true,name=name"`
}

// GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum - Type of cpu
type GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum string

const (
	GetServerTypes200ApplicationJSONServerTypesCPUTypeEnumShared    GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum = "shared"
	GetServerTypes200ApplicationJSONServerTypesCPUTypeEnumDedicated GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum = "dedicated"
)

func (e *GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "shared":
		fallthrough
	case "dedicated":
		*e = GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum: %s", s)
	}
}

// GetServerTypes200ApplicationJSONServerTypesPricesPriceHourly - Hourly costs for a Server type in this Location
type GetServerTypes200ApplicationJSONServerTypesPricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// GetServerTypes200ApplicationJSONServerTypesPricesPriceMonthly - Monthly costs for a Server type in this Location
type GetServerTypes200ApplicationJSONServerTypesPricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type GetServerTypes200ApplicationJSONServerTypesPrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Server type in this Location
	PriceHourly GetServerTypes200ApplicationJSONServerTypesPricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Server type in this Location
	PriceMonthly GetServerTypes200ApplicationJSONServerTypesPricesPriceMonthly `json:"price_monthly"`
}

// GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum - Type of Server boot drive. Local has higher speed. Network has better availability.
type GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum string

const (
	GetServerTypes200ApplicationJSONServerTypesStorageTypeEnumLocal   GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum = "local"
	GetServerTypes200ApplicationJSONServerTypesStorageTypeEnumNetwork GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum = "network"
)

func (e *GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "local":
		fallthrough
	case "network":
		*e = GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum: %s", s)
	}
}

type GetServerTypes200ApplicationJSONServerTypes struct {
	// Number of cpu cores a Server of this type will have
	Cores float64 `json:"cores"`
	// Type of cpu
	CPUType GetServerTypes200ApplicationJSONServerTypesCPUTypeEnum `json:"cpu_type"`
	// True if Server type is deprecated
	Deprecated bool `json:"deprecated"`
	// Description of the Server type
	Description string `json:"description"`
	// Disk size a Server of this type will have in GB
	Disk float64 `json:"disk"`
	// ID of the Server type
	ID float64 `json:"id"`
	// Memory a Server of this type will have in GB
	Memory float64 `json:"memory"`
	// Unique identifier of the Server type
	Name string `json:"name"`
	// Prices in different Locations
	Prices []GetServerTypes200ApplicationJSONServerTypesPrices `json:"prices"`
	// Type of Server boot drive. Local has higher speed. Network has better availability.
	StorageType GetServerTypes200ApplicationJSONServerTypesStorageTypeEnum `json:"storage_type"`
}

// GetServerTypes200ApplicationJSON - The `server_types` key in the reply contains an array of Server type objects with this structure
type GetServerTypes200ApplicationJSON struct {
	ServerTypes []GetServerTypes200ApplicationJSONServerTypes `json:"server_types"`
}

type GetServerTypesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `server_types` key in the reply contains an array of Server type objects with this structure
	GetServerTypes200ApplicationJSONObject *GetServerTypes200ApplicationJSON
}
