"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Payors:
    r"""A Payor is the entity which is sending money. Here you will find the available APIs for working with Payors."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_payor_by_id_v1(self, request: operations.GetPayorByIDV1Request) -> operations.GetPayorByIDV1Response:
        r"""Get Payor
        <p>Get a Single Payor by Id.</p>
        <p>deprecated since v2.10 - Use /v2/payors
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayorByIDV1Request, base_url, '/v1/payors/{payorId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayorByIDV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayorV1])
                res.payor_v1 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_payor_by_id_v2(self, request: operations.GetPayorByIDV2Request) -> operations.GetPayorByIDV2Response:
        r"""Get Payor
        Get a Single Payor by Id.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPayorByIDV2Request, base_url, '/v2/payors/{payorId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPayorByIDV2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayorV2])
                res.payor_v2 = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def payor_add_payor_logo_v1(self, request: operations.PayorAddPayorLogoV1Request) -> operations.PayorAddPayorLogoV1Response:
        r"""Add Logo
        <p>Add Payor Logo</p>
        <p>Logo file is used in your branding and emails sent to payees</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayorAddPayorLogoV1Request, base_url, '/v1/payors/{payorId}/branding/logos', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payor_logo_request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorAddPayorLogoV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def payor_create_api_key_v1(self, request: operations.PayorCreateAPIKeyV1Request) -> operations.PayorCreateAPIKeyV1Response:
        r"""Create API Key
        <p>Create an an API key for the given payor Id and application Id</p>
        <p>You can create multiple API Keys for a given application</p>
        <p>API Keys are programmatic users for integrating your application with the Velo platform</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayorCreateAPIKeyV1Request, base_url, '/v1/payors/{payorId}/applications/{applicationId}/keys', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payor_create_api_key_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorCreateAPIKeyV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayorCreateAPIKeyResponse])
                res.payor_create_api_key_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out

        return res

    def payor_create_application_v1(self, request: operations.PayorCreateApplicationV1Request) -> operations.PayorCreateApplicationV1Response:
        r"""Create Application
        <p>Create an application for the given Payor ID.</p>
        <p>Applications provide a means to group your API Keys</p>
        <p>For example you might have an SAP application that you wish to integrate with Velo</p>
        <p>You can create an application and then create one or more API keys for the application</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayorCreateApplicationV1Request, base_url, '/v1/payors/{payorId}/applications', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payor_create_application_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorCreateApplicationV1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse404])
                res.inline_response_404 = out
        elif http_res.status_code == 409:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse409])
                res.inline_response_409 = out

        return res

    def payor_email_opt_out(self, request: operations.PayorEmailOptOutRequest) -> operations.PayorEmailOptOutResponse:
        r"""Reminder Email Opt-Out
        Update the emailRemindersOptOut field for a Payor. This API can be used to opt out
        or opt into Payor Reminder emails. These emails are typically around payee events
        such as payees registering and onboarding.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayorEmailOptOutRequest, base_url, '/v1/payors/{payorId}/reminderEmailsUpdate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "payor_email_opt_out_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorEmailOptOutResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def payor_get_branding(self, request: operations.PayorGetBrandingRequest) -> operations.PayorGetBrandingResponse:
        r"""Get Branding
        Get the payor branding details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PayorGetBrandingRequest, base_url, '/v1/payors/{payorId}/branding', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PayorGetBrandingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PayorBrandingResponse])
                res.payor_branding_response = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse400])
                res.inline_response_400 = out
        elif http_res.status_code == 403:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.InlineResponse403])
                res.inline_response_403 = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    