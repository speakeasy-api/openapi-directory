// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeStreamXAmzTargetEnum
type DescribeStreamXAmzTargetEnum string

const (
	DescribeStreamXAmzTargetEnumKinesis20131202DescribeStream DescribeStreamXAmzTargetEnum = "Kinesis_20131202.DescribeStream"
)

func (e DescribeStreamXAmzTargetEnum) ToPointer() *DescribeStreamXAmzTargetEnum {
	return &e
}

func (e *DescribeStreamXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Kinesis_20131202.DescribeStream":
		*e = DescribeStreamXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeStreamXAmzTargetEnum: %v", v)
	}
}

type DescribeStreamRequest struct {
	DescribeStreamInput shared.DescribeStreamInput `request:"mediaType=application/json"`
	// Pagination token
	ExclusiveStartShardID *string `queryParam:"style=form,explode=true,name=ExclusiveStartShardId"`
	// Pagination limit
	Limit             *string                      `queryParam:"style=form,explode=true,name=Limit"`
	XAmzAlgorithm     *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        DescribeStreamXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeStreamResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// Success
	DescribeStreamOutput *shared.DescribeStreamOutput
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
