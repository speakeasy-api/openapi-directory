<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class SearchSearchRequest
{
    /**
     * Your developer id
     * 
     * @var ?string $devid
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=devid')]
    public ?string $devid = null;
    
    /**
     * Placeholder for future development; currently unavailable
     * 
     * @var ?bool $includeAddresses
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_addresses')]
    public ?bool $includeAddresses = null;
    
    /**
     * Indicates if outlets will be returned in response (default = true)
     * 
     * @var ?bool $includeOutlets
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=include_outlets')]
    public ?bool $includeOutlets = null;
    
    /**
     * Filter by geographic coordinate of latitude
     * 
     * @var ?float $latitude
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=latitude')]
    public ?float $latitude = null;
    
    /**
     * Filter by geographic coordinate of longitude
     * 
     * @var ?float $longitude
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=longitude')]
    public ?float $longitude = null;
    
    /**
     * Indicates whether to find routes by suburbs in the search term (default = true)
     * 
     * @var ?bool $matchRouteBySuburb
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=match_route_by_suburb')]
    public ?bool $matchRouteBySuburb = null;
    
    /**
     * Indicates whether to search for stops according to a metlink stop ID (default = false)
     * 
     * @var ?bool $matchStopByGtfsStopId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=match_stop_by_gtfs_stop_id')]
    public ?bool $matchStopByGtfsStopId = null;
    
    /**
     * Indicates whether to find stops by suburbs in the search term (default = true)
     * 
     * @var ?bool $matchStopBySuburb
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=match_stop_by_suburb')]
    public ?bool $matchStopBySuburb = null;
    
    /**
     * Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
     * 
     * @var ?float $maxDistance
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=max_distance')]
    public ?float $maxDistance = null;
    
    /**
     * Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Operations\SearchSearchRouteTypesEnum> $routeTypes
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=route_types')]
    public ?array $routeTypes = null;
    
    /**
     * Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)
     * 
     * @var string $searchTerm
     */
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=search_term')]
    public string $searchTerm;
    
    /**
     * Authentication signature for request
     * 
     * @var ?string $signature
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=signature')]
    public ?string $signature = null;
    
    /**
     * Please ignore
     * 
     * @var ?string $token
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=token')]
    public ?string $token = null;
    
	public function __construct()
	{
		$this->devid = null;
		$this->includeAddresses = null;
		$this->includeOutlets = null;
		$this->latitude = null;
		$this->longitude = null;
		$this->matchRouteBySuburb = null;
		$this->matchStopByGtfsStopId = null;
		$this->matchStopBySuburb = null;
		$this->maxDistance = null;
		$this->routeTypes = null;
		$this->searchTerm = "";
		$this->signature = null;
		$this->token = null;
	}
}
