/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { ConditionalOperatorEnum } from "./conditionaloperatorenum";
import { ExpectedAttributeValue } from "./expectedattributevalue";
import { ReturnConsumedCapacityEnum } from "./returnconsumedcapacityenum";
import { ReturnItemCollectionMetricsEnum } from "./returnitemcollectionmetricsenum";
import { ReturnValueEnum } from "./returnvalueenum";
import { Expose, Transform } from "class-transformer";

/**
 * Represents the input of a <code>PutItem</code> operation.
 */
export class PutItemInput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ConditionExpression" })
  conditionExpression?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ConditionalOperator" })
  conditionalOperator?: ConditionalOperatorEnum;

  @SpeakeasyMetadata({ elemType: ExpectedAttributeValue })
  @Expose({ name: "Expected" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ExpectedAttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ExpectedAttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  expected?: Record<string, ExpectedAttributeValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "ExpressionAttributeNames" })
  expressionAttributeNames?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "ExpressionAttributeValues" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  expressionAttributeValues?: Record<string, AttributeValue>;

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "Item" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  item: Record<string, AttributeValue>;

  /**
   * <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ReturnConsumedCapacity" })
  returnConsumedCapacity?: ReturnConsumedCapacityEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ReturnItemCollectionMetrics" })
  returnItemCollectionMetrics?: ReturnItemCollectionMetricsEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ReturnValues" })
  returnValues?: ReturnValueEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName: string;
}
