"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RouteInfoNextHopTypeEnum(str, Enum):
    r"""Type of next hop."""
    NEXT_HOP_TYPE_UNSPECIFIED = 'NEXT_HOP_TYPE_UNSPECIFIED'
    NEXT_HOP_IP = 'NEXT_HOP_IP'
    NEXT_HOP_INSTANCE = 'NEXT_HOP_INSTANCE'
    NEXT_HOP_NETWORK = 'NEXT_HOP_NETWORK'
    NEXT_HOP_PEERING = 'NEXT_HOP_PEERING'
    NEXT_HOP_INTERCONNECT = 'NEXT_HOP_INTERCONNECT'
    NEXT_HOP_VPN_TUNNEL = 'NEXT_HOP_VPN_TUNNEL'
    NEXT_HOP_VPN_GATEWAY = 'NEXT_HOP_VPN_GATEWAY'
    NEXT_HOP_INTERNET_GATEWAY = 'NEXT_HOP_INTERNET_GATEWAY'
    NEXT_HOP_BLACKHOLE = 'NEXT_HOP_BLACKHOLE'
    NEXT_HOP_ILB = 'NEXT_HOP_ILB'
    NEXT_HOP_ROUTER_APPLIANCE = 'NEXT_HOP_ROUTER_APPLIANCE'

class RouteInfoRouteTypeEnum(str, Enum):
    r"""Type of route."""
    ROUTE_TYPE_UNSPECIFIED = 'ROUTE_TYPE_UNSPECIFIED'
    SUBNET = 'SUBNET'
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'
    PEERING_SUBNET = 'PEERING_SUBNET'
    PEERING_STATIC = 'PEERING_STATIC'
    PEERING_DYNAMIC = 'PEERING_DYNAMIC'
    POLICY_BASED = 'POLICY_BASED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RouteInfo:
    r"""For display only. Metadata associated with a Compute Engine route."""
    
    dest_ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destIpRange'), 'exclude': lambda f: f is None }})
    r"""Destination IP range of the route."""  
    dest_port_ranges: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destPortRanges'), 'exclude': lambda f: f is None }})
    r"""Destination port ranges of the route. Policy based routes only."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name of a Compute Engine route."""  
    instance_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instanceTags'), 'exclude': lambda f: f is None }})
    r"""Instance tags of the route."""  
    network_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkUri'), 'exclude': lambda f: f is None }})
    r"""URI of a Compute Engine network."""  
    next_hop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextHop'), 'exclude': lambda f: f is None }})
    r"""Next hop of the route."""  
    next_hop_type: Optional[RouteInfoNextHopTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextHopType'), 'exclude': lambda f: f is None }})
    r"""Type of next hop."""  
    priority: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""Priority of the route."""  
    protocols: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocols'), 'exclude': lambda f: f is None }})
    r"""Protocols of the route. Policy based routes only."""  
    route_type: Optional[RouteInfoRouteTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routeType'), 'exclude': lambda f: f is None }})
    r"""Type of route."""  
    src_ip_range: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcIpRange'), 'exclude': lambda f: f is None }})
    r"""Source IP address range of the route. Policy based routes only."""  
    src_port_ranges: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('srcPortRanges'), 'exclude': lambda f: f is None }})
    r"""Source port ranges of the route. Policy based routes only."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI."""  
    