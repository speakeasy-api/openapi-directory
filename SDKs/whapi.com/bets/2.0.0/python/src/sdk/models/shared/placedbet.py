"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import placedbetleg as shared_placedbetleg
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlacedBet:
    
    estimated_returns: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('estimatedReturns') }})
    r"""The estimated value of the returns if the bet is successful. Note: when an estimated return isn’t available, as in the case of a bet placed on a horse at SP (starting price) where the actual price is unknown when the bet is placed, ‘NOT_AVAILABLE’ will appear in the response field."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The unique identifier of the bet"""  
    settled: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('settled') }})
    r"""Whether the bet is settled"""  
    stake: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stake') }})
    r"""The bet stake, which represents the total value of the bet. For example: £ 12.34"""  
    status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the bet. Can be one of the following: A - Active, S - suspended, C - Cashed Out"""  
    trans_date_time: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transDateTime') }})
    r"""The time the bet was placed"""  
    type_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeCode') }})
    r"""The bet type code of the bet. For example: TBL (Treble)"""  
    type_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('typeName') }})
    r"""The name of the bet type. For example: Double"""  
    winnings: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('winnings') }})
    r"""Actual value of the returns from this bet"""  
    cashin_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cashinValue'), 'exclude': lambda f: f is None }})
    r"""The cash in value of the bet. For example £0.88. When no value is given or no value is present, no cash in is available"""  
    free_bet_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('freeBetValue'), 'exclude': lambda f: f is None }})
    r"""If a free bet token is used for the bet, this element represents the value"""  
    legs: Optional[list[shared_placedbetleg.PlacedBetLeg]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legs'), 'exclude': lambda f: f is None }})  
    num_lines: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numLines'), 'exclude': lambda f: f is None }})
    r"""Number of lines of bets"""  
    num_selections: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numSelections'), 'exclude': lambda f: f is None }})
    r"""Number of selections that the bet is made of"""  
    receipt: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt'), 'exclude': lambda f: f is None }})
    r"""The unique identifier of the receipt for the bet"""  
    stake_per_line: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stakePerLine'), 'exclude': lambda f: f is None }})
    r"""The individual stake on each line of the bet. For example: £ 6.17"""  
    