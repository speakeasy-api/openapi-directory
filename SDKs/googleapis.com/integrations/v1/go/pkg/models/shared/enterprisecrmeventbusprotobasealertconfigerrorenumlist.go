// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum string

const (
	EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnumDefaultInclusive EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum = "DEFAULT_INCLUSIVE"
	EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnumExclusive        EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum = "EXCLUSIVE"
)

func (e EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum) ToPointer() *EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum {
	return &e
}

func (e *EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT_INCLUSIVE":
		fallthrough
	case "EXCLUSIVE":
		*e = EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum: %v", v)
	}
}

// EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList - List of error enums for alerts.
type EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumList struct {
	EnumStrings []string                                                              `json:"enumStrings,omitempty"`
	FilterType  *EnterpriseCrmEventbusProtoBaseAlertConfigErrorEnumListFilterTypeEnum `json:"filterType,omitempty"`
}
