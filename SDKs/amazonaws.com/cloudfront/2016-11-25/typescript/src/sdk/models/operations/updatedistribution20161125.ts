/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * A distribution configuration.
 */
export class UpdateDistribution20161125RequestBodyDistributionConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  aliases?: shared.Aliases;

  @SpeakeasyMetadata()
  cacheBehaviors?: shared.CacheBehaviors;

  @SpeakeasyMetadata()
  callerReference?: string;

  @SpeakeasyMetadata()
  comment?: string;

  @SpeakeasyMetadata()
  customErrorResponses?: shared.CustomErrorResponses;

  @SpeakeasyMetadata()
  defaultCacheBehavior?: shared.DefaultCacheBehavior;

  @SpeakeasyMetadata()
  defaultRootObject?: string;

  @SpeakeasyMetadata()
  enabled?: boolean;

  @SpeakeasyMetadata()
  httpVersion?: shared.HttpVersionEnum;

  @SpeakeasyMetadata()
  isIpv6Enabled?: boolean;

  @SpeakeasyMetadata()
  logging?: shared.LoggingConfig;

  @SpeakeasyMetadata()
  origins?: shared.Origins;

  @SpeakeasyMetadata()
  priceClass?: shared.PriceClassEnum;

  /**
   * A complex type that identifies ways in which you want to restrict distribution of your content.
   */
  @SpeakeasyMetadata()
  restrictions?: shared.Restrictions;

  /**
   * <p>A complex type that specifies the following:</p> <ul> <li> <p>Which SSL/TLS certificate to use when viewers request objects using HTTPS</p> </li> <li> <p>Whether you want CloudFront to use dedicated IP addresses or SNI when you're using alternate domain names in your object names</p> </li> <li> <p>The minimum protocol version that you want CloudFront to use when communicating with viewers</p> </li> </ul> <p>For more information, see <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html">Using an HTTPS Connection to Access Your Objects</a> in the <i>Amazon Amazon CloudFront Developer Guide</i>.</p>
   */
  @SpeakeasyMetadata()
  viewerCertificate?: shared.ViewerCertificate;

  @SpeakeasyMetadata()
  webACLId?: string;
}

export class UpdateDistribution20161125RequestBody extends SpeakeasyBase {
  /**
   * A distribution configuration.
   */
  @SpeakeasyMetadata()
  distributionConfig: UpdateDistribution20161125RequestBodyDistributionConfig;
}

export class UpdateDistribution20161125Request extends SpeakeasyBase {
  /**
   * The distribution's id.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=Id" })
  id: string;

  /**
   * The value of the <code>ETag</code> header that you received when retrieving the distribution's configuration. For example: <code>E2QWRUHAPOMQZL</code>.
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Match",
  })
  ifMatch?: string;

  @SpeakeasyMetadata({ data: "request, media_type=text/xml" })
  requestBody: Uint8Array;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateDistribution20161125Response extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
