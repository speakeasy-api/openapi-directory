// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type APIKeyUsageResponseCodeEnum string

const (
	APIKeyUsageResponseCodeEnumTwoThousand APIKeyUsageResponseCodeEnum = "2000"
)

func (e *APIKeyUsageResponseCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2000":
		*e = APIKeyUsageResponseCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyUsageResponseCodeEnum: %s", s)
	}
}

type APIKeyUsageResponseMessageEnum string

const (
	APIKeyUsageResponseMessageEnumSuccess APIKeyUsageResponseMessageEnum = "Success"
)

func (e *APIKeyUsageResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Success":
		*e = APIKeyUsageResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for APIKeyUsageResponseMessageEnum: %s", s)
	}
}

// APIKeyUsageResponse - Success
type APIKeyUsageResponse struct {
	Code    APIKeyUsageResponseCodeEnum    `json:"code"`
	Message APIKeyUsageResponseMessageEnum `json:"message"`
	Result  KeyUsageResult                 `json:"result"`
}
