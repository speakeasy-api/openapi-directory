/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * H264CodecSettings - H264 codec settings.
 */
public class H264CodecSettings {
    /**
     * Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowOpenGop")
    public Boolean allowOpenGop;
    public H264CodecSettings withAllowOpenGop(Boolean allowOpenGop) {
        this.allowOpenGop = allowOpenGop;
        return this;
    }
    
    /**
     * Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aqStrength")
    public Double aqStrength;
    public H264CodecSettings withAqStrength(Double aqStrength) {
        this.aqStrength = aqStrength;
        return this;
    }
    
    /**
     * The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than `VideoStream.gop_frame_count` if set. The default is 0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bFrameCount")
    public Integer bFrameCount;
    public H264CodecSettings withBFrameCount(Integer bFrameCount) {
        this.bFrameCount = bFrameCount;
        return this;
    }
    
    /**
     * Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bPyramid")
    public Boolean bPyramid;
    public H264CodecSettings withBPyramid(Boolean bPyramid) {
        this.bPyramid = bPyramid;
        return this;
    }
    
    /**
     * Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrateBps")
    public Integer bitrateBps;
    public H264CodecSettings withBitrateBps(Integer bitrateBps) {
        this.bitrateBps = bitrateBps;
        return this;
    }
    
    /**
     * Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crfLevel")
    public Integer crfLevel;
    public H264CodecSettings withCrfLevel(Integer crfLevel) {
        this.crfLevel = crfLevel;
        return this;
    }
    
    /**
     * Use two-pass encoding strategy to achieve better video quality. `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableTwoPass")
    public Boolean enableTwoPass;
    public H264CodecSettings withEnableTwoPass(Boolean enableTwoPass) {
        this.enableTwoPass = enableTwoPass;
        return this;
    }
    
    /**
     * The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entropyCoder")
    public String entropyCoder;
    public H264CodecSettings withEntropyCoder(String entropyCoder) {
        this.entropyCoder = entropyCoder;
        return this;
    }
    
    /**
     * Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120. Will default to the input frame rate if larger than the input frame rate. The API will generate an output FPS that is divisible by the input FPS, and smaller or equal to the target FPS. See [Calculating frame rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for more information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameRate")
    public Double frameRate;
    public H264CodecSettings withFrameRate(Double frameRate) {
        this.frameRate = frameRate;
        return this;
    }
    
    /**
     * Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gopDuration")
    public String gopDuration;
    public H264CodecSettings withGopDuration(String gopDuration) {
        this.gopDuration = gopDuration;
        return this;
    }
    
    /**
     * Select the GOP size based on the specified frame count. Must be greater than zero.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gopFrameCount")
    public Integer gopFrameCount;
    public H264CodecSettings withGopFrameCount(Integer gopFrameCount) {
        this.gopFrameCount = gopFrameCount;
        return this;
    }
    
    /**
     * The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("heightPixels")
    public Integer heightPixels;
    public H264CodecSettings withHeightPixels(Integer heightPixels) {
        this.heightPixels = heightPixels;
        return this;
    }
    
    /**
     * Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pixelFormat")
    public String pixelFormat;
    public H264CodecSettings withPixelFormat(String pixelFormat) {
        this.pixelFormat = pixelFormat;
        return this;
    }
    
    /**
     * Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preset")
    public String preset;
    public H264CodecSettings withPreset(String preset) {
        this.preset = preset;
        return this;
    }
    
    /**
     * Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    public String profile;
    public H264CodecSettings withProfile(String profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * Specify the `rate_control_mode`. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rateControlMode")
    public String rateControlMode;
    public H264CodecSettings withRateControlMode(String rateControlMode) {
        this.rateControlMode = rateControlMode;
        return this;
    }
    
    /**
     * Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tune")
    public String tune;
    public H264CodecSettings withTune(String tune) {
        this.tune = tune;
        return this;
    }
    
    /**
     * Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of `VideoStream.vbv_size_bits`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vbvFullnessBits")
    public Integer vbvFullnessBits;
    public H264CodecSettings withVbvFullnessBits(Integer vbvFullnessBits) {
        this.vbvFullnessBits = vbvFullnessBits;
        return this;
    }
    
    /**
     * Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vbvSizeBits")
    public Integer vbvSizeBits;
    public H264CodecSettings withVbvSizeBits(Integer vbvSizeBits) {
        this.vbvSizeBits = vbvSizeBits;
        return this;
    }
    
    /**
     * The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("widthPixels")
    public Integer widthPixels;
    public H264CodecSettings withWidthPixels(Integer widthPixels) {
        this.widthPixels = widthPixels;
        return this;
    }
    
}
