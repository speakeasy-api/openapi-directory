// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartMatchmakingXAmzTargetEnum
type StartMatchmakingXAmzTargetEnum string

const (
	StartMatchmakingXAmzTargetEnumGameLiftStartMatchmaking StartMatchmakingXAmzTargetEnum = "GameLift.StartMatchmaking"
)

func (e *StartMatchmakingXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GameLift.StartMatchmaking":
		*e = StartMatchmakingXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartMatchmakingXAmzTargetEnum: %s", s)
	}
}

type StartMatchmakingHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartMatchmakingXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartMatchmakingRequest struct {
	Headers StartMatchmakingHeaders
	Request shared.StartMatchmakingInput `request:"mediaType=application/json"`
}

type StartMatchmakingResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	StartMatchmakingOutput *shared.StartMatchmakingOutput
	StatusCode             int
	RawResponse            *http.Response
	// UnsupportedRegionException
	UnsupportedRegionException interface{}
}
