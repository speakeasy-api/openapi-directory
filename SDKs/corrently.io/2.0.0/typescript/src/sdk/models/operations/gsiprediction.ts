/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GsiPredictionRequest extends SpeakeasyBase {
  /**
   * Any valid Stromkonto account (address).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Zipcode (Postleitzahl) of a city in Germany.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=zip" })
  zip?: string;
}

/**
 * Standarized location info sourced for prediction
 */
export class GsiPrediction200ApplicationJSONLocation extends SpeakeasyBase {
  /**
   * Pretty Print city name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city?: string;

  /**
   * Zipcode (Postleitzahl)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zip" })
  zip?: string;
}

/**
 * Indicates number of hours a device should run
 */
export class GsiPrediction200ApplicationJSONMatrixH0 extends SpeakeasyBase {
  /**
   * device should run in 1 hour
   */
  @SpeakeasyMetadata()
  @Expose({ name: "avg_1" })
  avg1?: string;

  /**
   * device should run in 2 hours
   */
  @SpeakeasyMetadata()
  @Expose({ name: "avg_2" })
  avg2?: string;

  /**
   * device should run in 3 hour
   */
  @SpeakeasyMetadata()
  @Expose({ name: "avg_3" })
  avg3?: string;
}

/**
 * Device switching recommendation.
 */
export class GsiPrediction200ApplicationJSONMatrix extends SpeakeasyBase {
  /**
   * Indicates number of hours a device should run
   */
  @SpeakeasyMetadata()
  @Expose({ name: "h0" })
  @Type(() => GsiPrediction200ApplicationJSONMatrixH0)
  h0?: GsiPrediction200ApplicationJSONMatrixH0;
}

/**
 * Success
 */
export class GsiPrediction200ApplicationJSON extends SpeakeasyBase {
  /**
   * Prediction for the upcomming hours
   */
  @SpeakeasyMetadata({ elemType: shared.ForecastItem })
  @Expose({ name: "forecast" })
  @Type(() => shared.ForecastItem)
  forecast?: shared.ForecastItem[];

  /**
   * Standarized location info sourced for prediction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => GsiPrediction200ApplicationJSONLocation)
  location?: GsiPrediction200ApplicationJSONLocation;

  /**
   * Device switching recommendation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matrix" })
  @Type(() => GsiPrediction200ApplicationJSONMatrix)
  matrix?: GsiPrediction200ApplicationJSONMatrix;
}

export class GsiPredictionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  gsiPrediction200ApplicationJSONObject?: GsiPrediction200ApplicationJSON;
}
