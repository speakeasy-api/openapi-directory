// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateScheduledAuditPathParams struct {
	// The name you want to give to the scheduled audit. (Max. 128 chars)
	ScheduledAuditName string `pathParam:"style=simple,explode=false,name=scheduledAuditName"`
}

type CreateScheduledAuditHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateScheduledAuditRequestBodyDayOfWeekEnum - The day of the week on which the scheduled audit takes place, either <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the <code>frequency</code> parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
type CreateScheduledAuditRequestBodyDayOfWeekEnum string

const (
	CreateScheduledAuditRequestBodyDayOfWeekEnumSun CreateScheduledAuditRequestBodyDayOfWeekEnum = "SUN"
	CreateScheduledAuditRequestBodyDayOfWeekEnumMon CreateScheduledAuditRequestBodyDayOfWeekEnum = "MON"
	CreateScheduledAuditRequestBodyDayOfWeekEnumTue CreateScheduledAuditRequestBodyDayOfWeekEnum = "TUE"
	CreateScheduledAuditRequestBodyDayOfWeekEnumWed CreateScheduledAuditRequestBodyDayOfWeekEnum = "WED"
	CreateScheduledAuditRequestBodyDayOfWeekEnumThu CreateScheduledAuditRequestBodyDayOfWeekEnum = "THU"
	CreateScheduledAuditRequestBodyDayOfWeekEnumFri CreateScheduledAuditRequestBodyDayOfWeekEnum = "FRI"
	CreateScheduledAuditRequestBodyDayOfWeekEnumSat CreateScheduledAuditRequestBodyDayOfWeekEnum = "SAT"
)

func (e *CreateScheduledAuditRequestBodyDayOfWeekEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SUN":
		fallthrough
	case "MON":
		fallthrough
	case "TUE":
		fallthrough
	case "WED":
		fallthrough
	case "THU":
		fallthrough
	case "FRI":
		fallthrough
	case "SAT":
		*e = CreateScheduledAuditRequestBodyDayOfWeekEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduledAuditRequestBodyDayOfWeekEnum: %s", s)
	}
}

// CreateScheduledAuditRequestBodyFrequencyEnum - How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code> or <code>MONTHLY</code>. The start time of each audit is determined by the system.
type CreateScheduledAuditRequestBodyFrequencyEnum string

const (
	CreateScheduledAuditRequestBodyFrequencyEnumDaily    CreateScheduledAuditRequestBodyFrequencyEnum = "DAILY"
	CreateScheduledAuditRequestBodyFrequencyEnumWeekly   CreateScheduledAuditRequestBodyFrequencyEnum = "WEEKLY"
	CreateScheduledAuditRequestBodyFrequencyEnumBiweekly CreateScheduledAuditRequestBodyFrequencyEnum = "BIWEEKLY"
	CreateScheduledAuditRequestBodyFrequencyEnumMonthly  CreateScheduledAuditRequestBodyFrequencyEnum = "MONTHLY"
)

func (e *CreateScheduledAuditRequestBodyFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DAILY":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "BIWEEKLY":
		fallthrough
	case "MONTHLY":
		*e = CreateScheduledAuditRequestBodyFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateScheduledAuditRequestBodyFrequencyEnum: %s", s)
	}
}

type CreateScheduledAuditRequestBody struct {
	// The day of the month on which the scheduled audit takes place. This can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to <code>MONTHLY</code>. If days 29 to 31 are specified, and the month doesn't have that many days, the audit takes place on the <code>LAST</code> day of the month.
	DayOfMonth *string `json:"dayOfMonth,omitempty"`
	// The day of the week on which the scheduled audit takes place, either <code>SUN</code>, <code>MON</code>, <code>TUE</code>, <code>WED</code>, <code>THU</code>, <code>FRI</code>, or <code>SAT</code>. This field is required if the <code>frequency</code> parameter is set to <code>WEEKLY</code> or <code>BIWEEKLY</code>.
	DayOfWeek *CreateScheduledAuditRequestBodyDayOfWeekEnum `json:"dayOfWeek,omitempty"`
	// How often the scheduled audit takes place, either <code>DAILY</code>, <code>WEEKLY</code>, <code>BIWEEKLY</code> or <code>MONTHLY</code>. The start time of each audit is determined by the system.
	Frequency CreateScheduledAuditRequestBodyFrequencyEnum `json:"frequency"`
	// Metadata that can be used to manage the scheduled audit.
	Tags []shared.Tag `json:"tags,omitempty"`
	// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use <code>DescribeAccountAuditConfiguration</code> to see the list of all checks, including those that are enabled or use <code>UpdateAccountAuditConfiguration</code> to select which checks are enabled.)
	TargetCheckNames []string `json:"targetCheckNames"`
}

type CreateScheduledAuditRequest struct {
	PathParams CreateScheduledAuditPathParams
	Headers    CreateScheduledAuditHeaders
	Request    CreateScheduledAuditRequestBody `request:"mediaType=application/json"`
}

type CreateScheduledAuditResponse struct {
	ContentType string
	// Success
	CreateScheduledAuditResponse *shared.CreateScheduledAuditResponse
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
