/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ApiApp } from "./apiapp";
import { User } from "./user";
import { Expose, Type } from "class-transformer";

/**
 * The token type:
 *
 * @remarks
 *
 * Option descriptions:
 *  * `bearer` - The token is of the `bearer` type.
 *
 */
export enum AuthTokenTypeEnum {
  Bearer = "bearer",
}

/**
 * The authorization code was exchanged.
 */
export class Auth extends SpeakeasyBase {
  /**
   * The access token string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "access_token" })
  accessToken: string;

  /**
   * The API application associated with the token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app" })
  @Type(() => ApiApp)
  app: ApiApp;

  /**
   * The date and time that the token expires.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expires_on" })
  expiresOn?: string;

  /**
   * The refresh token string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refresh_token" })
  refreshToken?: string;

  /**
   * The scope or scopes that the token supports.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scope" })
  scope: string;

  /**
   * The token type:
   *
   * @remarks
   *
   * Option descriptions:
   *  * `bearer` - The token is of the `bearer` type.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "token_type" })
  tokenType: AuthTokenTypeEnum;

  /**
   * The user associated with the token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => User)
  user?: User;
}
