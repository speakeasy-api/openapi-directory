// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type BookingPricingmatrixRequestBody struct {
	// **date** for which to retrieve pricing data  (must be in the future) (**note**: this is an optional parameter for normal products; if the date is *not* provided then the nearest available date is determined)
	BookingDate *string `json:"bookingDate,omitempty"`
	// **currency code** of the currency in which to display pricing information
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **unique alphanumeric identifier** of the product for which to retrieve the pricing matrix
	ProductCode *string `json:"productCode,omitempty"`
	// **alphanumeric identifier** of the product tour grade for which to retrieve the pricing matrix
	TourGradeCode *string `json:"tourGradeCode,omitempty"`
}

type BookingPricingmatrixRequest struct {
	// Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
	//
	AcceptLanguage string                           `header:"style=simple,explode=false,name=Accept-Language"`
	RequestBody    *BookingPricingmatrixRequestBody `request:"mediaType=application/json"`
}

type BookingPricingmatrix200ApplicationJSONDataAgeBandPricesPrices struct {
	// **currency code** for the currency in which pricing is displayed
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// **numeric merchant net rate** for *this* age band
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPrice *float64 `json:"merchantNetPrice,omitempty"`
	// **currency-formatted merchant net rate** for *this* age band
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	MerchantNetPriceFormatted *string `json:"merchantNetPriceFormatted,omitempty"`
	// **minimum number of travelers** that this pricing schedule can be applied to; e.g., '3' means that the price is for a group of three people or more
	MinNoOfTravellersRequiredForPrice *int64 `json:"minNoOfTravellersRequiredForPrice,omitempty"`
	// **numeric suggested retail price** for *this* age band
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	Price *float64 `json:"price,omitempty"`
	// **currency-formatted suggested retail price** for *this* age band and the suggested sell price
	// - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
	//
	PriceFormatted *string `json:"priceFormatted,omitempty"`
	// **sort order** for *this* pricing object
	SortOrder *string `json:"sortOrder,omitempty"`
}

type BookingPricingmatrix200ApplicationJSONDataAgeBandPrices struct {
	// **unique numeric identifier** for the age band
	// - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
	//
	BandID *int64 `json:"bandId,omitempty"`
	// **maximum number of travelers** that this pricing schedule can be applied to
	// - use this field to specify the largest group size you are interested in making a booking for
	//
	MaximumCountRequired *int64 `json:"maximumCountRequired,omitempty"`
	// **minimum number of travelers** that this pricing schedule can be applied to
	// - use this field to specify the smallest group size you are interested in making a booking for
	//
	MinimumCountRequired *int64 `json:"minimumCountRequired,omitempty"`
	// **array** of prices available for *this* age band (based on the min and max count required)
	Prices []BookingPricingmatrix200ApplicationJSONDataAgeBandPricesPrices `json:"prices,omitempty"`
	// **sort order** for *this* age band
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

type BookingPricingmatrix200ApplicationJSONData struct {
	// **array** of age band pricing objects
	AgeBandPrices []BookingPricingmatrix200ApplicationJSONDataAgeBandPrices `json:"ageBandPrices,omitempty"`
	// **date** for which to retrieve pricing information
	BookingDate *string `json:"bookingDate,omitempty"`
	// **unit** in which pricing is calculated (currently, only 'per person' is supported)
	// - see [Understanding the pricingUnit field](#section/Using-the-API/Understanding-the-pricingUnit-field) for more information
	//
	PricingUnit *string `json:"pricingUnit,omitempty"`
	// **sort order** for *this* response object
	SortOrder *int64 `json:"sortOrder,omitempty"`
}

// BookingPricingmatrix200ApplicationJSON - Success
type BookingPricingmatrix200ApplicationJSON struct {
	Data []BookingPricingmatrix200ApplicationJSONData `json:"data,omitempty"`
	// **timestamp** of *this* response
	DateStamp *string `json:"dateStamp,omitempty"`
	// **array** of error codes pertaining to *this* error
	// - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
	//
	ErrorCodes []string `json:"errorCodes,omitempty"`
	// **array** of error message strings
	ErrorMessage []interface{} `json:"errorMessage,omitempty"`
	// **array** of error message strings in plain text
	ErrorMessageText *string `json:"errorMessageText,omitempty"`
	// **name** of *this* type of error
	ErrorName *string `json:"errorName,omitempty"`
	// **reference number** of *this* error
	ErrorReference *string `json:"errorReference,omitempty"`
	// **code** specifying the type of error
	ErrorType *string `json:"errorType,omitempty"`
	// ignore (Viator only)
	ExtraInfo map[string]interface{} `json:"extraInfo,omitempty"`
	// ignore (Viator only)
	ExtraObject map[string]interface{} `json:"extraObject,omitempty"`
	// **boolean indicator** of *this* request's outcome
	// - `true`: the request was successful with no errors
	// - `false`: an error was encountered
	//
	Success *bool `json:"success,omitempty"`
	// **number** of results available for *this* service
	//
	TotalCount *int64 `json:"totalCount,omitempty"`
	// **unique numeric id** of the server that processed *this* request
	Vmid *string `json:"vmid,omitempty"`
}

type BookingPricingmatrixResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	BookingPricingmatrix200ApplicationJSONObject *BookingPricingmatrix200ApplicationJSON
}
