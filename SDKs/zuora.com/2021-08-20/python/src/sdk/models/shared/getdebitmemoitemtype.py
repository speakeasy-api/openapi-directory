"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import getdmtaxitemtype as shared_getdmtaxitemtype
from ..shared import getdmtaxitemtypenew as shared_getdmtaxitemtypenew
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETDebitMemoItemTypeFinanceInformation:
    r"""Container for the finance information related to the debit memo item."""
    
    deferred_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the deferred revenue, such as Monthly Recurring Liability."""  
    deferred_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deferredRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the deferred revenue accounting code, such as Deferred Revenue."""  
    recognized_revenue_accounting_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCode'), 'exclude': lambda f: f is None }})
    r"""The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges."""  
    recognized_revenue_accounting_code_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recognizedRevenueAccountingCodeType'), 'exclude': lambda f: f is None }})
    r"""The type of the recognized revenue accounting code, such as Sales Revenue or Sales Discount."""  
    revenue_recognition_rule_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueRecognitionRuleName'), 'exclude': lambda f: f is None }})
    r"""The name of the revenue recognition rule governing the revenue schedule."""  
    revenue_schedule_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revenueScheduleNumber'), 'exclude': lambda f: f is None }})
    r"""The revenue schedule number. The revenue schedule number is always prefixed with \\"RS\\", for example, RS-00000001."""  
    
class GETDebitMemoItemTypeSourceItemTypeEnum(str, Enum):
    r"""The type of the source item."""
    SUBSCRIPTION_COMPONENT = 'SubscriptionComponent'
    INVOICE_DETAIL = 'InvoiceDetail'
    PRODUCT_RATE_PLAN_CHARGE = 'ProductRatePlanCharge'

class GETDebitMemoItemTypeTaxModeEnum(str, Enum):
    r"""The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax."""
    TAX_EXCLUSIVE = 'TaxExclusive'
    TAX_INCLUSIVE = 'TaxInclusive'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETDebitMemoItemTypeTaxationItems:
    r"""Container for the taxation items of the debit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later.
    """
    
    data: Optional[list[shared_getdmtaxitemtypenew.GETDMTaxItemTypeNew]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""List of taxation items."""  
    next_page: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPage'), 'exclude': lambda f: f is None }})
    r"""URL to retrieve the next page of the response if it exists; otherwise absent."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETDebitMemoItemType:
    r"""Container for custom fields of a Debit Memo Item object."""
    
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The amount of the debit memo item. For tax-inclusive debit memo items, the amount indicates the debit memo item amount including tax. For tax-exclusive debit memo items, the amount indicates the debit memo item amount excluding tax."""  
    amount_without_tax: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountWithoutTax'), 'exclude': lambda f: f is None }})
    r"""The debit memo item amount excluding tax."""  
    balance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('balance'), 'exclude': lambda f: f is None }})
    r"""The balance of the debit memo item."""  
    be_applied_amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beAppliedAmount'), 'exclude': lambda f: f is None }})
    r"""The applied amount of the debit memo item."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Comments about the debit memo item.
    
    **Note**: This field is not available if you set the `zuora-version` request header to `257.0` or later.
    """  
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the debit memo item."""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the debit memo item was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description about the debit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `257.0` or later.
    """  
    finance_information: Optional[GETDebitMemoItemTypeFinanceInformation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financeInformation'), 'exclude': lambda f: f is None }})
    r"""Container for the finance information related to the debit memo item."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the debit memo item."""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units for the debit memo item."""  
    service_end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceEndDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The end date of the service period associated with this debit memo item. Service ends one second before the date specified in this field."""  
    service_start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceStartDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The start date of the service period associated with this debit memo item. If the associated charge is a one-time fee, this date is the date of that charge."""  
    sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sku'), 'exclude': lambda f: f is None }})
    r"""The SKU for the product associated with the debit memo item."""  
    sku_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skuName'), 'exclude': lambda f: f is None }})
    r"""The name of the SKU."""  
    source_item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceItemId'), 'exclude': lambda f: f is None }})
    r"""The ID of the source item."""  
    source_item_type: Optional[GETDebitMemoItemTypeSourceItemTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceItemType'), 'exclude': lambda f: f is None }})
    r"""The type of the source item."""  
    subscription_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriptionId'), 'exclude': lambda f: f is None }})
    r"""The ID of the subscription associated with the debit memo item."""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""Returns `true` if the request was processed successfully."""  
    taxation_items: Optional[GETDebitMemoItemTypeTaxationItems] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxationItems'), 'exclude': lambda f: f is None }})
    r"""Container for the taxation items of the debit memo item.
    
    **Note**: This field is only available if you set the `zuora-version` request header to `239.0` or later.
    """  
    tax_items: Optional[list[shared_getdmtaxitemtype.GETDMTaxItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxItems'), 'exclude': lambda f: f is None }})
    r"""Container for the taxation items of the debit memo item..
    
    **Note**: This field is not available if you set the `zuora-version` request header to `239.0` or later.
    """  
    tax_mode: Optional[GETDebitMemoItemTypeTaxModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxMode'), 'exclude': lambda f: f is None }})
    r"""The tax mode of the debit memo item, indicating whether the amount of the debit memo item includes tax."""  
    unit_of_measure: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitOfMeasure'), 'exclude': lambda f: f is None }})
    r"""The units to measure usage."""  
    unit_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unitPrice'), 'exclude': lambda f: f is None }})
    r"""The per-unit price of the debit memo item."""  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who last updated the debit memo item."""  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date and time when the debit memo item was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10."""  
    