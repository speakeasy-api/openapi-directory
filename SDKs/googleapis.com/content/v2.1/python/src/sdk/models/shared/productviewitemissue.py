"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import productviewitemissueitemissueseverity as shared_productviewitemissueitemissueseverity
from ..shared import productviewitemissueitemissuetype as shared_productviewitemissueitemissuetype
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ProductViewItemIssueResolutionEnum(str, Enum):
    r"""Item issue resolution."""
    UNKNOWN = 'UNKNOWN'
    MERCHANT_ACTION = 'MERCHANT_ACTION'
    PENDING_PROCESSING = 'PENDING_PROCESSING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProductViewItemIssue:
    r"""Item issue associated with the product."""
    
    issue_type: Optional[shared_productviewitemissueitemissuetype.ProductViewItemIssueItemIssueType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issueType'), 'exclude': lambda f: f is None }})
    r"""Type of the item issue."""  
    resolution: Optional[ProductViewItemIssueResolutionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resolution'), 'exclude': lambda f: f is None }})
    r"""Item issue resolution."""  
    severity: Optional[shared_productviewitemissueitemissueseverity.ProductViewItemIssueItemIssueSeverity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Severity of an issue per destination in a region, and aggregated severity."""  
    