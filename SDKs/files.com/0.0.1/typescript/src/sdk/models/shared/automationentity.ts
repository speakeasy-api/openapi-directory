/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

/**
 * Automation type
 */
export enum AutomationEntityAutomationEnum {
  CreateFolder = "create_folder",
  RequestFile = "request_file",
  RequestMove = "request_move",
  CopyNewestFile = "copy_newest_file",
  DeleteFile = "delete_file",
  CopyFile = "copy_file",
  MoveFile = "move_file",
  As2Send = "as2_send",
  RunSync = "run_sync",
}

/**
 * How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
 */
export enum AutomationEntityTriggerEnum {
  Realtime = "realtime",
  Daily = "daily",
  CustomSchedule = "custom_schedule",
  Webhook = "webhook",
  Email = "email",
  Action = "action",
}

/**
 * List Automations
 */
export class AutomationEntity extends SpeakeasyBase {
  /**
   * Automation type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "automation" })
  automation?: AutomationEntityAutomationEnum;

  /**
   * Indicates if the automation has been deleted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deleted" })
  deleted?: boolean;

  /**
   * Description for the this Automation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_replace_from" })
  destinationReplaceFrom?: string;

  /**
   * If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_replace_to" })
  destinationReplaceTo?: string;

  /**
   * Destination Path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinations" })
  destinations?: string[];

  /**
   * If true, this automation will not run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disabled" })
  disabled?: boolean;

  /**
   * IDs of Groups for the Automation (i.e. who to Request File from)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "group_ids" })
  groupIds?: number[];

  /**
   * Automation ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  /**
   * If trigger is `daily`, this specifies how often to run this automation.  One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval?: string;

  /**
   * Time when automation was last modified. Does not change for name or description updates.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_modified_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedAt?: Date;

  /**
   * Name for this automation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Path on which this Automation runs.  Supports globs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: string;

  /**
   * If trigger is `custom_schedule`, Custom schedule description for when the automation should be run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  schedule?: Record<string, any>;

  /**
   * Source Path
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  source?: string;

  /**
   * IDs of remote sync folder behaviors to run by this Automation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sync_ids" })
  syncIds?: number[];

  /**
   * How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trigger" })
  trigger?: AutomationEntityTriggerEnum;

  /**
   * If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trigger_actions" })
  triggerActions?: string[];

  /**
   * User ID of the Automation's creator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: number;

  /**
   * IDs of Users for the Automation (i.e. who to Request File from)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_ids" })
  userIds?: number[];

  /**
   * A Hash of attributes specific to the automation type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: Record<string, any>;

  /**
   * If trigger is `webhook`, this is the URL of the webhook to trigger the Automation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "webhook_url" })
  webhookUrl?: string;
}
