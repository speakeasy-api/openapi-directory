/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { JoinColumn } from "./joincolumn";
import { JoinTypeEnum } from "./jointypeenum";
import { Expose, Type } from "class-transformer";

/**
 * Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.
 */
export class Join extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: JoinColumn })
  @Expose({ name: "Columns" })
  @Type(() => JoinColumn)
  columns: JoinColumn[];

  @SpeakeasyMetadata()
  @Expose({ name: "Inputs" })
  inputs: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "JoinType" })
  joinType: JoinTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "Name" })
  name: string;
}
