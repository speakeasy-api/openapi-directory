"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class PromotionsAndTaxes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def archive_promotion(self, request: operations.ArchivePromotionRequest) -> operations.ArchivePromotionResponse:
        r"""Archive Promotion or Tax
        Archives a Promotion or Tax by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ArchivePromotionRequest, base_url, '/api/rnb/pvt/archive/calculatorConfiguration/{idCalculatorConfiguration}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ArchivePromotionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def create_or_update_calculator_configuration(self, request: operations.CreateOrUpdateCalculatorConfigurationRequest) -> operations.CreateOrUpdateCalculatorConfigurationResponse:
        r"""Create or Update Promotion or Tax
        Creates or updates a specific Promotion by its Promotion ID or a specific Tax by its Tax ID.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/calculatorconfiguration'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateOrUpdateCalculatorConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateOrUpdateCalculatorConfiguration200ApplicationJSON])
                res.create_or_update_calculator_configuration_200_application_json_object = out

        return res

    def get_all_benefits(self, request: operations.GetAllBenefitsRequest) -> operations.GetAllBenefitsResponse:
        r"""Get All Promotions
        Retrieves all promotions from an account. 
        
        > 📘 Onboarding guide 
        >
        > Check the new [Promotions onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/promotions-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about the Promotions and is organized by focusing on the developer's journey.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/benefits/calculatorconfiguration'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllBenefitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllBenefits200ApplicationJSON])
                res.get_all_benefits_200_application_json_object = out

        return res

    def get_all_taxes(self, request: operations.GetAllTaxesRequest) -> operations.GetAllTaxesResponse:
        r"""Get All Taxes
        Retrieves all taxes from an account.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/taxes/calculatorconfiguration'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllTaxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetAllTaxes200ApplicationJSON])
                res.get_all_taxes_200_application_json_object = out

        return res

    def get_archived_promotions(self, request: operations.GetArchivedPromotionsRequest) -> operations.GetArchivedPromotionsResponse:
        r"""List Archived Promotions
        Lists all archived promotions.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/archive/benefits/calculatorConfiguration'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArchivedPromotionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetArchivedPromotions200ApplicationJSON])
                res.get_archived_promotions_200_application_json_object = out

        return res

    def get_archived_taxes(self, request: operations.GetArchivedTaxesRequest) -> operations.GetArchivedTaxesResponse:
        r"""List Archived Taxes
        Lists all archived taxes.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/archive/taxes/calculatorConfiguration'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetArchivedTaxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetArchivedTaxes200ApplicationJSON])
                res.get_archived_taxes_200_application_json_object = out

        return res

    def get_calculator_configuration_by_id(self, request: operations.GetCalculatorConfigurationByIDRequest) -> operations.GetCalculatorConfigurationByIDResponse:
        r"""Get Promotion or Tax by ID
        Retrieves a specific promotion by its Promotion ID or a specific tax by its Tax ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCalculatorConfigurationByIDRequest, base_url, '/api/rnb/pvt/calculatorconfiguration/{idCalculatorConfiguration}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCalculatorConfigurationByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'Promotion'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'Tax'):
                res.body = http_res.content

        return res

    def unarchive_promotion(self, request: operations.UnarchivePromotionRequest) -> operations.UnarchivePromotionResponse:
        r"""Unarchive Promotion or Tax
        Unarchives a Promotion or Tax by its ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnarchivePromotionRequest, base_url, '/api/rnb/pvt/unarchive/calculatorConfiguration/{idCalculatorConfiguration}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnarchivePromotionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_api_rnb_pvt_import_calculator_configuration(self, request: operations.PostAPIRnbPvtImportCalculatorConfigurationRequest) -> operations.PostAPIRnbPvtImportCalculatorConfigurationResponse:
        r"""Create Multiple SKU Promotion
        Creates a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect. 
        > ⚠️ 
        >
        > The limit of SKUs on a Multiple Effects promotion is 400.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/rnb/pvt/import/calculatorConfiguration'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAPIRnbPvtImportCalculatorConfigurationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def put_api_rnb_pvt_import_calculator_configuration_promotion_id_(self, request: operations.PutAPIRnbPvtImportCalculatorConfigurationPromotionIDRequest) -> operations.PutAPIRnbPvtImportCalculatorConfigurationPromotionIDResponse:
        r"""Update Multiple SKU Promotion
        Updates information from a Multiple SKU Promotion. This scenario allows to create a single promotion for multiples SKUs with the Percentage Effect.  
        > ⚠️ 
        >
        > The limit of SKUs on a Multiple Effects promotion is 400.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutAPIRnbPvtImportCalculatorConfigurationPromotionIDRequest, base_url, '/api/rnb/pvt/import/calculatorConfiguration/{promotionId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutAPIRnbPvtImportCalculatorConfigurationPromotionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    