// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NetworkAddressAssignmentEnum - Whether DHCP is used to assign addresses.
type NetworkAddressAssignmentEnum string

const (
	NetworkAddressAssignmentEnumAddressAssignmentUnspecified NetworkAddressAssignmentEnum = "ADDRESS_ASSIGNMENT_UNSPECIFIED"
	NetworkAddressAssignmentEnumAddressAssignmentStatic      NetworkAddressAssignmentEnum = "ADDRESS_ASSIGNMENT_STATIC"
	NetworkAddressAssignmentEnumAddressAssignmentDhcp        NetworkAddressAssignmentEnum = "ADDRESS_ASSIGNMENT_DHCP"
)

func (e NetworkAddressAssignmentEnum) ToPointer() *NetworkAddressAssignmentEnum {
	return &e
}

func (e *NetworkAddressAssignmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADDRESS_ASSIGNMENT_UNSPECIFIED":
		fallthrough
	case "ADDRESS_ASSIGNMENT_STATIC":
		fallthrough
	case "ADDRESS_ASSIGNMENT_DHCP":
		*e = NetworkAddressAssignmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NetworkAddressAssignmentEnum: %v", v)
	}
}

// NetworkAddress - Details of network address.
type NetworkAddress struct {
	// Whether DHCP is used to assign addresses.
	Assignment *NetworkAddressAssignmentEnum `json:"assignment,omitempty"`
	// Broadcast address.
	Bcast *string `json:"bcast,omitempty"`
	// Fully qualified domain name.
	Fqdn *string `json:"fqdn,omitempty"`
	// Assigned or configured IP Address.
	IPAddress *string `json:"ipAddress,omitempty"`
	// Subnet mask.
	SubnetMask *string `json:"subnetMask,omitempty"`
}
