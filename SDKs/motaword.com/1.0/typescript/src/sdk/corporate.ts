/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Corporate {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * View available permissions
   *
   * @remarks
   * View a list of available permissions for your corporate account. They are used when assigning permissions to your corporate users.
   */
  getAvailableCorporatePermissions(
    config?: AxiosRequestConfig
  ): Promise<operations.GetAvailableCorporatePermissionsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate/permissions";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAvailableCorporatePermissionsResponse =
        new operations.GetAvailableCorporatePermissionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permissionList = utils.objectToClass(
              httpRes?.data,
              shared.PermissionList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
   *
   * @remarks
   * Get a list of available permissions for this corporate account. They are used when assigning permissions to corporate users.
   */
  getAvailableCorporatePermissionsById(
    req: operations.GetAvailableCorporatePermissionsByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAvailableCorporatePermissionsByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAvailableCorporatePermissionsByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/corporates/{corporateId}/permissions",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAvailableCorporatePermissionsByIdResponse =
        new operations.GetAvailableCorporatePermissionsByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.permissionList = utils.objectToClass(
              httpRes?.data,
              shared.PermissionList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View your corporate account
   *
   * @remarks
   * View the details of the corporate account that your user account belongs to.
   */
  getCorporate(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateResponse =
        new operations.GetCorporateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.corporateAccount = utils.objectToClass(
              httpRes?.data,
              shared.CorporateAccount
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get details of this corporate account
   *
   * @remarks
   * Get details of this corporate account
   */
  getCorporateById(
    req: operations.GetCorporateByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCorporateByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/corporates/{corporateId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateByIdResponse =
        new operations.GetCorporateByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.corporateAccount = utils.objectToClass(
              httpRes?.data,
              shared.CorporateAccount
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View user groups
   *
   * @remarks
   * View a list of user groups under my corporate account. User groups are a part of our RBAC implementation and can be used to configure complex permission scenarios.
   */
  getCorporateUserGroups(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateUserGroupsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate/user-groups";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateUserGroupsResponse =
        new operations.GetCorporateUserGroupsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userGroupList = utils.objectToClass(
              httpRes?.data,
              shared.UserGroupList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of user groups for this corporate account
   *
   * @remarks
   * Get a list of user groups for this corporate account
   */
  getCorporateUserGroupsById(
    req: operations.GetCorporateUserGroupsByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateUserGroupsByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCorporateUserGroupsByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/corporates/{corporateId}/user-groups",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateUserGroupsByIdResponse =
        new operations.GetCorporateUserGroupsByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userGroupList = utils.objectToClass(
              httpRes?.data,
              shared.UserGroupList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View users
   *
   * @remarks
   * View a list of users under your corporate account. This endpoint will only return information if your user account is permitted to view corporate account users, configured by your administrator.
   */
  getCorporateUsers(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateUsersResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate/users";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateUsersResponse =
        new operations.GetCorporateUsersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userList = utils.objectToClass(httpRes?.data, shared.UserList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of users for this corporate account
   *
   * @remarks
   * Get a list of users for this corporate account
   */
  getCorporateUsersById(
    req: operations.GetCorporateUsersByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporateUsersByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetCorporateUsersByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/corporates/{corporateId}/users",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporateUsersByIdResponse =
        new operations.GetCorporateUsersByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userList = utils.objectToClass(httpRes?.data, shared.UserList);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get a list of corporate accounts
   *
   * @remarks
   * Get a list of corporate accounts
   */
  getCorporatesList(
    config?: AxiosRequestConfig
  ): Promise<operations.GetCorporatesListResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporates/all";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetCorporatesListResponse =
        new operations.GetCorporatesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.corporateAccounts = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.corporateAccounts = utils.objectToClass(
              httpRes?.data,
              shared.CorporateAccount,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update a user
   *
   * @remarks
   * Create or update a user under your corporate account. This endpoint requires permissions for corporate user management, configured by your administrator.
   */
  saveCorporateUser(
    req: shared.UserUpdateContent,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveCorporateUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UserUpdateContent(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate/users";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveCorporateUserResponse =
        new operations.SaveCorporateUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.user = utils.objectToClass(httpRes?.data, shared.User);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update a corporate user group
   *
   * @remarks
   * Create or update a corporate user group
   */
  saveCorporateUserGroup(
    req: shared.UserGroup,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveCorporateUserGroupResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.UserGroup(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/corporate/user-groups";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveCorporateUserGroupResponse =
        new operations.SaveCorporateUserGroupResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userGroup = utils.objectToClass(
              httpRes?.data,
              shared.UserGroup
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create or update a corporate user group for this corporate account
   *
   * @remarks
   * Create or update a corporate user group for this corporate account
   */
  saveCorporateUserGroupById(
    req: operations.SaveCorporateUserGroupByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SaveCorporateUserGroupByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SaveCorporateUserGroupByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/corporates/{corporateId}/user-groups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "userGroup",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SaveCorporateUserGroupByIdResponse =
        new operations.SaveCorporateUserGroupByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.userGroup = utils.objectToClass(
              httpRes?.data,
              shared.UserGroup
            );
          }
          break;
      }

      return res;
    });
  }
}
