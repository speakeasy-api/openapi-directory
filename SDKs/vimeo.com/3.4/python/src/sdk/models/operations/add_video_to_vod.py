"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import legacy_error as shared_legacy_error
from ..shared import on_demand_video as shared_on_demand_video
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AddVideoToVodSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddVideoToVodRequestBodyBuyPrice:
    
    aud: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AUD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in AUD."""  
    cad: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CAD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in CAD."""  
    chf: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CHF'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in CHF."""  
    dkk: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DKK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in DKK."""  
    eur: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EUR'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in EUR."""  
    gbp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GBP'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in GBP."""  
    jpy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JPY'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in JPY."""  
    krw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KRW'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in KRW."""  
    nok: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NOK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in NOK."""  
    pln: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PLN'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in PLN."""  
    sek: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SEK'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in SEK."""  
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The purchase price of this video in USD. *Required if `buy.active` is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddVideoToVodRequestBodyBuy:
    
    price: Optional[AddVideoToVodRequestBodyBuyPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddVideoToVodRequestBodyRentPrice:
    
    aud: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AUD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in AUD."""  
    cad: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CAD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in CAD."""  
    chf: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CHF'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in CHF."""  
    dkk: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DKK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in DKK."""  
    eur: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EUR'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in EUR."""  
    gbp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GBP'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in GBP."""  
    jpy: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JPY'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in JPY."""  
    krw: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KRW'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in KRW."""  
    nok: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NOK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in NOK."""  
    pln: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PLN'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in PLN."""  
    sek: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SEK'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in SEK."""  
    usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('USD'), 'exclude': lambda f: f is None }})
    r"""The rental price of this video in USD. *Required if `rent.active` is true."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddVideoToVodRequestBodyRent:
    
    price: Optional[AddVideoToVodRequestBodyRentPrice] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})  
    
class AddVideoToVodRequestBodyTypeEnum(str, Enum):
    r"""The type of video that you are adding to the On Demand page."""
    EXTRA = 'extra'
    MAIN = 'main'
    TRAILER = 'trailer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AddVideoToVodRequestBody:
    
    type: AddVideoToVodRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of video that you are adding to the On Demand page."""  
    buy: Optional[AddVideoToVodRequestBodyBuy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buy'), 'exclude': lambda f: f is None }})  
    position: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})
    r"""The position of this video in the On Demand collection."""  
    release_year: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('release_year'), 'exclude': lambda f: f is None }})
    r"""The video release year."""  
    rent: Optional[AddVideoToVodRequestBodyRent] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rent'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AddVideoToVodRequest:
    
    ondemand_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'ondemand_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the On Demand."""  
    request_body: AddVideoToVodRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/vnd.vimeo.ondemand.video+json' }})  
    video_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'video_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the video."""  
    

@dataclasses.dataclass
class AddVideoToVodResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""You can't add the video to this On Demand page."""  
    on_demand_video: Optional[shared_on_demand_video.OnDemandVideo] = dataclasses.field(default=None)
    r"""The video was added."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    