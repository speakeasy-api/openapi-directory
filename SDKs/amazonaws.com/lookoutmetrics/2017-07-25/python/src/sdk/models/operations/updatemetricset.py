"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import appflowconfig as shared_appflowconfig
from ..shared import athenasourceconfig as shared_athenasourceconfig
from ..shared import cloudwatchconfig as shared_cloudwatchconfig
from ..shared import metric as shared_metric
from ..shared import metricsetdimensionfilter as shared_metricsetdimensionfilter
from ..shared import rdssourceconfig as shared_rdssourceconfig
from ..shared import redshiftsourceconfig as shared_redshiftsourceconfig
from ..shared import s3sourceconfig as shared_s3sourceconfig
from ..shared import updatemetricsetresponse as shared_updatemetricsetresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateMetricSetRequestBodyMetricSetFrequencyEnum(str, Enum):
    r"""The dataset's interval."""
    P1_D = 'P1D'
    PT1_H = 'PT1H'
    PT10_M = 'PT10M'
    PT5_M = 'PT5M'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMetricSetRequestBodyMetricSource:
    r"""Contains information about source data used to generate metrics."""
    
    app_flow_config: Optional[shared_appflowconfig.AppFlowConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AppFlowConfig'), 'exclude': lambda f: f is None }})  
    athena_source_config: Optional[shared_athenasourceconfig.AthenaSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AthenaSourceConfig'), 'exclude': lambda f: f is None }})  
    cloud_watch_config: Optional[shared_cloudwatchconfig.CloudWatchConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchConfig'), 'exclude': lambda f: f is None }})  
    rds_source_config: Optional[shared_rdssourceconfig.RDSSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RDSSourceConfig'), 'exclude': lambda f: f is None }})  
    redshift_source_config: Optional[shared_redshiftsourceconfig.RedshiftSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RedshiftSourceConfig'), 'exclude': lambda f: f is None }})  
    s3_source_config: Optional[shared_s3sourceconfig.S3SourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3SourceConfig'), 'exclude': lambda f: f is None }})
    r"""Contains information about the configuration of the S3 bucket that contains source files."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMetricSetRequestBodyTimestampColumn:
    r"""Contains information about the column used to track time in a source data file."""
    
    column_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ColumnFormat'), 'exclude': lambda f: f is None }})  
    column_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ColumnName'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateMetricSetRequestBody:
    
    metric_set_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSetArn') }})
    r"""The ARN of the dataset to update."""  
    dimension_filter_list: Optional[list[shared_metricsetdimensionfilter.MetricSetDimensionFilter]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DimensionFilterList'), 'exclude': lambda f: f is None }})
    r"""Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation."""  
    dimension_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DimensionList'), 'exclude': lambda f: f is None }})
    r"""The dimension list."""  
    metric_list: Optional[list[shared_metric.Metric]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricList'), 'exclude': lambda f: f is None }})
    r"""The metric list."""  
    metric_set_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSetDescription'), 'exclude': lambda f: f is None }})
    r"""The dataset's description."""  
    metric_set_frequency: Optional[UpdateMetricSetRequestBodyMetricSetFrequencyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSetFrequency'), 'exclude': lambda f: f is None }})
    r"""The dataset's interval."""  
    metric_source: Optional[UpdateMetricSetRequestBodyMetricSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MetricSource'), 'exclude': lambda f: f is None }})
    r"""Contains information about source data used to generate metrics."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Offset'), 'exclude': lambda f: f is None }})
    r"""After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources."""  
    timestamp_column: Optional[UpdateMetricSetRequestBodyTimestampColumn] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimestampColumn'), 'exclude': lambda f: f is None }})
    r"""Contains information about the column used to track time in a source data file."""  
    

@dataclasses.dataclass
class UpdateMetricSetRequest:
    
    request_body: UpdateMetricSetRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateMetricSetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    update_metric_set_response: Optional[shared_updatemetricsetresponse.UpdateMetricSetResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    