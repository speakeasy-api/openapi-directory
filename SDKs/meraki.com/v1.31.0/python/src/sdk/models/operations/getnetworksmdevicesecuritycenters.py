"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkSmDeviceSecurityCentersRequest:
    
    device_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deviceId', 'style': 'simple', 'explode': False }})  
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkSmDeviceSecurityCenters200ApplicationJSON:
    
    anti_virus_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('antiVirusName'), 'exclude': lambda f: f is None }})
    r"""The name of the Antivirus."""  
    fire_wall_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fireWallName'), 'exclude': lambda f: f is None }})
    r"""The name of the Firewall."""  
    has_anti_virus: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasAntiVirus'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device has Antivirus."""  
    has_fire_wall_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasFireWallInstalled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device has a Firewall installed."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Meraki identifier for the security center record."""  
    is_auto_login_disabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isAutoLoginDisabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device has auto login disabled."""  
    is_disk_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDiskEncrypted'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device has disk encryption."""  
    is_fire_wall_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isFireWallEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device has a Firewall enabled."""  
    is_rooted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isRooted'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating if the device is rooted."""  
    running_procs: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runningProcs'), 'exclude': lambda f: f is None }})
    r"""A comma seperated list of procs running on the device."""  
    

@dataclasses.dataclass
class GetNetworkSmDeviceSecurityCentersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_sm_device_security_centers_200_application_json_objects: Optional[list[GetNetworkSmDeviceSecurityCenters200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    