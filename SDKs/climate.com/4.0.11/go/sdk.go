// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://platform.climate.com/",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - **Last Modified**: Wed Jan  4 12:47:29 UTC 2023
//
// All endpoints are only accessible via HTTPS.
//
// * All API endpoints are located at `https://platform.climate.com` (e.g.
// `https://platform.climate.com/v4/fields`).
//
// * The authorization token endpoint is located at
// `https://api.climate.com/api/oauth/token`.
//
// ## Troubleshooting
//
// `X-Http-Request-Id` response header will be returned on every call,
// successful or not. If you experience an issue with our api and need
// to contact technical support, please supply the value of the `X-Http-Request-Id`
// header along with an approximate time of when the request was made.
//
// ## Request Limits
//
// When you’re onboarded to Climate’s API platform, your `x-api-key` is assigned a custom usage plan. Usage plans are unique to each partner and have the following key attributes:
//
// 1. Throttling information
//   - burstLimit: Maximum rate limit over a period ranging from 1 second to a few seconds
//   - rateLimit: A steady-state rate limit
//
// 2. Quota information
//   - Limit: The maximum number of requests that can be made in a given month
//
// When the request rate threshold is exceeded, a `429` response code is returned. Optionally, the [`Retry-After`](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.37) header may be returned:
//
// Following are examples of rate limit errors:
//
// 1. Rate limit exceeded:
//
// <br>HTTP/1.1 429
// <br>Content-Type: application/json
// <br>Content-Length: 32
//
//	{"message":"Too Many Requests"}
//
// 2. Quota exhausted:
// <br>HTTP/1.1 429
// <br>Content-Type: application/json
// <br>Content-Length: 29
//
//	{"message":"Limit Exceeded"}
//
// ## Pagination
//
// Pagination is performed via headers. Any request which returns a `"results"`
// array may be paginated. The following figure shows how query results are laid out with
// X-Limit=4 and no filter applied.
//
// <img style="width:70%;height:auto;" src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/paging.png">
//
// * If there are no results, a response code of `304` will be returned.
//
// * If the response is the last set of results, a response code of `200` or
// `206` will be returned.
//
// * If there are more results, a response code of `206` will be returned.
//
// * If `X-Next-Token` is provided in the request headers but the token has
// expired, a response code of `409` will be returned. This is only applicable
// for some endpoints; see specific endpoint documentation below.
//
// #### X-Limit
//
// The page size can be controlled with the `X-Limit` header. Valid values are
// `1-100` and defaults to `100`.
//
// #### X-Next-Token
//
// If the results are paginated, a response header of `X-Next-Token` will be
// returned. Use the associated value in the subsequent request (via the `X-Next-Token`
// request header) to retrieve the next page. The following sequence diagram shows how to
// use `X-Next-Token` to fetch all the records.
//
// <img src="https://s3-us-west-2.amazonaws.com/climate-com/images/svg_upload_tests/x-next-token.svg">
//
// ## Chunked Uploads
//
// Uploads larger than `5MiB` (`5242880 bytes`) must be done in `5MiB` chunks
// (with the exception of the final chunk). Each chunk request MUST contain a
// `Content-Range` header specifying the portion of the upload, and a `Content-Type`
// header specifying binary content type (`application/octet-stream`). Range
// uploads must be contiguous. The maximum upload size is capped at `500MiB` (`524288000 bytes`).
//
// ## Chunked Downloads
//
// Downloads larger than `5MiB` (`5242880 bytes`) must be done in `1-5MiB`
// chunks (with the exception of the final chunk, which may be less than `1MiB`).
// Each chunk request MUST contain a `Range` header specifying the requested portion of the download,
// and an `Accept` header specifying binary and json content types  (`application/octet-stream,application/json`)
// or all content types (`*/*`).
//
// ## Drivers
//
// If you need drivers to process agronomic data, download the ADAPT plugin below. We only support the plugin in the Windows environment, minimum is Windows 7 SP1.
//
// For asPlanted, asHarvested and asApplied data:
// * [ADAPT Plugin](https://dev.fieldview.com/drivers/ClimateADAPTPlugin_latest.exe)
// <br>Release notes can be found [here](https://dev.fieldview.com/drivers/adapt-release-notes.txt).
// <br>Download and use of the ADAPT plugin means that you agree to the EULA for use of the ADAPT plugin.
// <br>Please review the [EULA](https://dev.fieldview.com/EULA/ADAPT%20Plugin%20EULA-06-19.pdf) (last updated on June 6th, 2019) before download and use of the ADAPT plugin.
// <br>For more information, please refer to:
//   - [ADAPT Resources](https://adaptframework.org/)
//   - [ADAPT Overview](https://aggateway.atlassian.net/wiki/spaces/ADM/overview)
//   - [ADAPT FAQ](https://aggateway.atlassian.net/wiki/spaces/ADM/pages/165942474/ADAPT+Frequently-Asked+Questions+FAQ)
//   - [ADAPT Videos](https://adaptframework.org/adapt-videos/)
//
// ## Sample Test Data
//
// Sample agronomic data:
// * [asPlanted and asHarvested data](https://dev.fieldview.com/sample-agronomic-data/Planting_Harvesting_data_04_18_2018_21_46_18.zip)
// * [asApplied data set 1](https://dev.fieldview.com/sample-agronomic-data/as-applied-data1.zip)
// * [asApplied data set 2](https://dev.fieldview.com/sample-agronomic-data/as-applied-data2.zip)
// <br>To upload the sample data to your account, please follow the instructions in this [link](https://support.climate.com/kt#/kA02A000000AaxzSAC/en_US).
//
// Sample soil data:
// * [Sample soil data](https://dev.fieldview.com/sample-soil-data/soil-sample.xml)
// ---
type SDK struct {
	// Boundaries - Field Boundary data endpoints.
	Boundaries *boundaries
	// Exports - General data export endpoints.
	Exports *exports
	// FarmOrganizations - Farm organization data endpoints.
	FarmOrganizations *farmOrganizations
	// Fields - Field data endpoints.
	Fields *fields
	// Layers - General data retrieval endpoints.
	Layers *layers
	// Operations - Operation data endpoints.
	Operations *operationsT
	// ResourceOwners - Resource Owner data endpoints.
	ResourceOwners *resourceOwners
	// Uploads - General data upload endpoints.
	Uploads *uploads

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Boundaries = newBoundaries(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Exports = newExports(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.FarmOrganizations = newFarmOrganizations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Fields = newFields(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Layers = newLayers(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Operations = newOperations(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.ResourceOwners = newResourceOwners(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Uploads = newUploads(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
