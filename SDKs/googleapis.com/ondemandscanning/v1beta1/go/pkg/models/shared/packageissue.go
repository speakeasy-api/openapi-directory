// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PackageIssueEffectiveSeverityEnum - Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
type PackageIssueEffectiveSeverityEnum string

const (
	PackageIssueEffectiveSeverityEnumSeverityUnspecified PackageIssueEffectiveSeverityEnum = "SEVERITY_UNSPECIFIED"
	PackageIssueEffectiveSeverityEnumMinimal             PackageIssueEffectiveSeverityEnum = "MINIMAL"
	PackageIssueEffectiveSeverityEnumLow                 PackageIssueEffectiveSeverityEnum = "LOW"
	PackageIssueEffectiveSeverityEnumMedium              PackageIssueEffectiveSeverityEnum = "MEDIUM"
	PackageIssueEffectiveSeverityEnumHigh                PackageIssueEffectiveSeverityEnum = "HIGH"
	PackageIssueEffectiveSeverityEnumCritical            PackageIssueEffectiveSeverityEnum = "CRITICAL"
)

func (e PackageIssueEffectiveSeverityEnum) ToPointer() *PackageIssueEffectiveSeverityEnum {
	return &e
}

func (e *PackageIssueEffectiveSeverityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SEVERITY_UNSPECIFIED":
		fallthrough
	case "MINIMAL":
		fallthrough
	case "LOW":
		fallthrough
	case "MEDIUM":
		fallthrough
	case "HIGH":
		fallthrough
	case "CRITICAL":
		*e = PackageIssueEffectiveSeverityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PackageIssueEffectiveSeverityEnum: %v", v)
	}
}

// PackageIssue - A detail for a distro and package this vulnerability occurrence was found in and its associated fix (if one is available).
type PackageIssue struct {
	// Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in.
	AffectedCpeURI *string `json:"affectedCpeUri,omitempty"`
	// Required. The package this vulnerability was found in.
	AffectedPackage *string `json:"affectedPackage,omitempty"`
	// Version contains structured information about the version of a package.
	AffectedVersion *Version `json:"affectedVersion,omitempty"`
	// Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.
	EffectiveSeverity *PackageIssueEffectiveSeverityEnum `json:"effectiveSeverity,omitempty"`
	// The location at which this package was found.
	FileLocation []GrafeasV1FileLocation `json:"fileLocation,omitempty"`
	// Output only. Whether a fix is available for this package.
	FixAvailable *bool `json:"fixAvailable,omitempty"`
	// The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri.
	FixedCpeURI *string `json:"fixedCpeUri,omitempty"`
	// The package this vulnerability was fixed in. It is possible for this to be different from the affected_package.
	FixedPackage *string `json:"fixedPackage,omitempty"`
	// Version contains structured information about the version of a package.
	FixedVersion *Version `json:"fixedVersion,omitempty"`
	// The type of package (e.g. OS, MAVEN, GO).
	PackageType *string `json:"packageType,omitempty"`
}
