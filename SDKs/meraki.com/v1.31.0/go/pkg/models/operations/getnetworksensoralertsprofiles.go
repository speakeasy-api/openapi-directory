// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetNetworkSensorAlertsProfilesRequest struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum - If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnumAbove GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum = "above"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnumBelow GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum = "below"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "above":
		fallthrough
	case "below":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum - Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumZero                    GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "0"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumSixty                   GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "60"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumOneHundredAndTwenty     GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "120"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumOneHundredAndEighty     GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "180"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumTwoHundredAndForty      GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "240"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumThreeHundred            GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "300"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumSixHundred              GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "600"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumNineHundred             GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "900"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumOneThousandEightHundred GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "1800"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnumThreeThousandSixHundred GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum = "3600"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "60":
		fallthrough
	case "120":
		fallthrough
	case "180":
		fallthrough
	case "240":
		fallthrough
	case "300":
		fallthrough
	case "600":
		fallthrough
	case "900":
		fallthrough
	case "1800":
		fallthrough
	case "3600":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor - Door open threshold. 'open' must be provided and set to true.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor struct {
	// Alerting threshold for a door open event. Must be set to true.
	Open bool `json:"open"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum - Alerting threshold as a qualitative humidity level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity - Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity struct {
	// Alerting threshold as a qualitative humidity level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold in %RH.
	RelativePercentage *int64 `json:"relativePercentage,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum - Alerting threshold as a qualitative indoor air quality level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality - Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality struct {
	// Alerting threshold as a qualitative indoor air quality level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQualityQualityEnum `json:"quality,omitempty"`
	// Alerting threshold as indoor air quality score.
	Score *int64 `json:"score,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum - Alerting threshold as a qualitative ambient noise level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient - Ambient noise threshold. One of 'level' or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient struct {
	// Alerting threshold as adjusted decibels.
	Level *int64 `json:"level,omitempty"`
	// Alerting threshold as a qualitative ambient noise level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbientQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise - Noise threshold. 'ambient' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise struct {
	// Ambient noise threshold. One of 'level' or 'quality' must be provided.
	Ambient GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoiseAmbient `json:"ambient"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum - Alerting threshold as a qualitative PM2.5 level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 - PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 struct {
	// Alerting threshold as PM2.5 parts per million.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative PM2.5 level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25QualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum - Alerting threshold as a qualitative temperature level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature - Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature struct {
	// Alerting threshold in degrees Celsius.
	Celsius *float32 `json:"celsius,omitempty"`
	// Alerting threshold in degrees Fahrenheit.
	Fahrenheit *float32 `json:"fahrenheit,omitempty"`
	// Alerting threshold as a qualitative temperature level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperatureQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum - Alerting threshold as a qualitative TVOC level.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum string

const (
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnumFair       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = "fair"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnumGood       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = "good"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnumInadequate GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = "inadequate"
	GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnumPoor       GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum = "poor"
)

func (e *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "fair":
		fallthrough
	case "good":
		fallthrough
	case "inadequate":
		fallthrough
	case "poor":
		*e = GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum: %s", s)
	}
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc - TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc struct {
	// Alerting threshold as TVOC micrograms per cubic meter.
	Concentration *int64 `json:"concentration,omitempty"`
	// Alerting threshold as a qualitative TVOC level.
	Quality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvocQualityEnum `json:"quality,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater - Water detection threshold. 'present' must be provided and set to true.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater struct {
	// Alerting threshold for a water detection event. Must be set to true.
	Present bool `json:"present"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold - Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
type GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold struct {
	// Door open threshold. 'open' must be provided and set to true.
	Door *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdDoor `json:"door,omitempty"`
	// Humidity threshold. One of 'relativePercentage' or 'quality' must be provided.
	Humidity *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdHumidity `json:"humidity,omitempty"`
	// Indoor air quality score threshold. One of 'score' or 'quality' must be provided.
	IndoorAirQuality *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdIndoorAirQuality `json:"indoorAirQuality,omitempty"`
	// Noise threshold. 'ambient' must be provided.
	Noise *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdNoise `json:"noise,omitempty"`
	// PM2.5 concentration threshold. One of 'concentration' or 'quality' must be provided.
	Pm25 *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdPm25 `json:"pm25,omitempty"`
	// Temperature threshold. One of 'celsius', 'fahrenheit', or 'quality' must be provided.
	Temperature *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTemperature `json:"temperature,omitempty"`
	// TVOC concentration threshold. One of 'concentration' or 'quality' must be provided.
	Tvoc *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdTvoc `json:"tvoc,omitempty"`
	// Water detection threshold. 'present' must be provided and set to true.
	Water *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThresholdWater `json:"water,omitempty"`
}

type GetNetworkSensorAlertsProfiles200ApplicationJSONConditions struct {
	// If 'above', an alert will be sent when a sensor reads above the threshold. If 'below', an alert will be sent when a sensor reads below the threshold. Only applicable for temperature and humidity thresholds.
	Direction *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDirectionEnum `json:"direction,omitempty"`
	// Length of time in seconds that the triggering state must persist before an alert is sent. Available options are 0 seconds, 1 minute, 2 minutes, 3 minutes, 4 minutes, 5 minutes, 10 minutes, 15 minutes, 30 minutes, and 1 hour. Default is 0.
	Duration *GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsDurationEnum `json:"duration,omitempty"`
	// The type of sensor metric that will be monitored for changes. Available metrics are door, humidity, indoorAirQuality, noise, pm25, temperature, tvoc, and water.
	Metric string `json:"metric"`
	// Threshold for sensor readings that will cause an alert to be sent. This object should contain a single property key matching the condition's 'metric' value.
	Threshold GetNetworkSensorAlertsProfiles200ApplicationJSONConditionsThreshold `json:"threshold"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients - List of recipients that will recieve the alert.
type GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients struct {
	// A list of emails that will receive information about the alert.
	Emails []string `json:"emails,omitempty"`
	// A list of webhook endpoint IDs that will receive information about the alert.
	HTTPServerIds []string `json:"httpServerIds,omitempty"`
	// A list of SMS numbers that will receive information about the alert.
	SmsNumbers []string `json:"smsNumbers,omitempty"`
}

// GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule - The sensor schedule to use with the alert profile.
type GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule struct {
	// ID of the sensor schedule to use with the alert profile. If not defined, the alert profile will be active at all times.
	ID *string `json:"id,omitempty"`
	// Name of the sensor schedule to use with the alert profile.
	Name *string `json:"name,omitempty"`
}

type GetNetworkSensorAlertsProfiles200ApplicationJSON struct {
	// List of conditions that will cause the profile to send an alert.
	Conditions []GetNetworkSensorAlertsProfiles200ApplicationJSONConditions `json:"conditions"`
	// Name of the sensor alert profile.
	Name *string `json:"name,omitempty"`
	// ID of the sensor alert profile.
	ProfileID *string `json:"profileId,omitempty"`
	// List of recipients that will recieve the alert.
	Recipients *GetNetworkSensorAlertsProfiles200ApplicationJSONRecipients `json:"recipients,omitempty"`
	// The sensor schedule to use with the alert profile.
	Schedule *GetNetworkSensorAlertsProfiles200ApplicationJSONSchedule `json:"schedule,omitempty"`
	// List of device serials assigned to this sensor alert profile.
	Serials []string `json:"serials,omitempty"`
}

type GetNetworkSensorAlertsProfilesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetNetworkSensorAlertsProfiles200ApplicationJSONObjects []GetNetworkSensorAlertsProfiles200ApplicationJSON
}
