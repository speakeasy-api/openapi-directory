"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesBikePointOccupancy:
    r"""Bike point occupancy"""
    
    bikes_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bikesCount'), 'exclude': lambda f: f is None }})
    r"""Total bike counts"""  
    e_bikes_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eBikesCount'), 'exclude': lambda f: f is None }})
    r"""Total ebikes count"""  
    empty_docks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emptyDocks'), 'exclude': lambda f: f is None }})
    r"""Empty docks"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Id of the bike point such as BikePoints_1"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name / Common name of the bike point"""  
    standard_bikes_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standardBikesCount'), 'exclude': lambda f: f is None }})
    r"""Total standard bikes count"""  
    total_docks: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalDocks'), 'exclude': lambda f: f is None }})
    r"""Total docks available"""  
    