// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ClcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type ClcerRequestBodyCertificateParameters struct {
	// ApplicationNumber
	Udf1 string `json:"UDF1"`
}

// ClcerRequestBodyFormatEnum - The format of the certificate in response.
type ClcerRequestBodyFormatEnum string

const (
	ClcerRequestBodyFormatEnumPdf ClcerRequestBodyFormatEnum = "pdf"
)

func (e *ClcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = ClcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ClcerRequestBodyFormatEnum: %s", s)
	}
}

// ClcerRequestBody - Request format
type ClcerRequestBody struct {
	CertificateParameters *ClcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format ClcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Clcer504ApplicationJSONErrorEnum string

const (
	Clcer504ApplicationJSONErrorEnumGatewayTimeout Clcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Clcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Clcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer504ApplicationJSONErrorDescriptionEnum string

const (
	Clcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Clcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Clcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Clcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer504ApplicationJSON - Gateway timeout
type Clcer504ApplicationJSON struct {
	Error            *Clcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer503ApplicationJSONErrorEnum string

const (
	Clcer503ApplicationJSONErrorEnumServiceUnavailable Clcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Clcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Clcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer503ApplicationJSONErrorDescriptionEnum string

const (
	Clcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Clcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Clcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Clcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer503ApplicationJSON - Service unavailable
type Clcer503ApplicationJSON struct {
	Error            *Clcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer502ApplicationJSONErrorEnum string

const (
	Clcer502ApplicationJSONErrorEnumBadGatewy Clcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Clcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Clcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer502ApplicationJSONErrorDescriptionEnum string

const (
	Clcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Clcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Clcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Clcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer502ApplicationJSON - Bad gateway
type Clcer502ApplicationJSON struct {
	Error            *Clcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer500ApplicationJSONErrorEnum string

const (
	Clcer500ApplicationJSONErrorEnumInternalServerError Clcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Clcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Clcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer500ApplicationJSONErrorDescriptionEnum string

const (
	Clcer500ApplicationJSONErrorDescriptionEnumInternalServerError Clcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Clcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Clcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer500ApplicationJSON - Internal server error
type Clcer500ApplicationJSON struct {
	Error            *Clcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer404ApplicationJSONErrorEnum string

const (
	Clcer404ApplicationJSONErrorEnumRecordNotFound Clcer404ApplicationJSONErrorEnum = "record_not_found"
	Clcer404ApplicationJSONErrorEnumURLNotFound    Clcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Clcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Clcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer404ApplicationJSONErrorDescriptionEnum string

const (
	Clcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Clcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Clcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Clcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Clcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Clcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer404ApplicationJSON - No record found
type Clcer404ApplicationJSON struct {
	Error            *Clcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer401ApplicationJSONErrorEnum string

const (
	Clcer401ApplicationJSONErrorEnumInvalidAuthentication Clcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Clcer401ApplicationJSONErrorEnumInvalidAuthorization  Clcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Clcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Clcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer401ApplicationJSONErrorDescriptionEnum string

const (
	Clcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Clcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Clcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Clcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Clcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Clcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer401ApplicationJSON - Unauthorized access
type Clcer401ApplicationJSON struct {
	Error            *Clcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Clcer400ApplicationJSONErrorEnum string

const (
	Clcer400ApplicationJSONErrorEnumMissingParameter Clcer400ApplicationJSONErrorEnum = "missing_parameter"
	Clcer400ApplicationJSONErrorEnumInvalidParameter Clcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Clcer400ApplicationJSONErrorEnumInvalidFormat    Clcer400ApplicationJSONErrorEnum = "invalid_format"
	Clcer400ApplicationJSONErrorEnumInvalidTxnid     Clcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Clcer400ApplicationJSONErrorEnumInvalidConsentid Clcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Clcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Clcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Clcer400ApplicationJSONErrorDescriptionEnum string

const (
	Clcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Clcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Clcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Clcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Clcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Clcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Clcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Clcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Clcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Clcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Clcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Clcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Clcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Clcer400ApplicationJSON - Bad request
type Clcer400ApplicationJSON struct {
	Error            *Clcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Clcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type ClcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Clcer400ApplicationJSONObject *Clcer400ApplicationJSON
	// Unauthorized access
	Clcer401ApplicationJSONObject *Clcer401ApplicationJSON
	// No record found
	Clcer404ApplicationJSONObject *Clcer404ApplicationJSON
	// Internal server error
	Clcer500ApplicationJSONObject *Clcer500ApplicationJSON
	// Bad gateway
	Clcer502ApplicationJSONObject *Clcer502ApplicationJSON
	// Service unavailable
	Clcer503ApplicationJSONObject *Clcer503ApplicationJSON
	// Gateway timeout
	Clcer504ApplicationJSONObject *Clcer504ApplicationJSON
}
