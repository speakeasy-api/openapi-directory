/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WorkflowRun - An invocation of a workflow
 */
public class WorkflowRun {
    /**
     * The URL to the artifacts for the workflow run.
     */
    @JsonProperty("artifacts_url")
    public String artifactsUrl;

    public WorkflowRun withArtifactsUrl(String artifactsUrl) {
        this.artifactsUrl = artifactsUrl;
        return this;
    }
    
    /**
     * The URL to cancel the workflow run.
     */
    @JsonProperty("cancel_url")
    public String cancelUrl;

    public WorkflowRun withCancelUrl(String cancelUrl) {
        this.cancelUrl = cancelUrl;
        return this;
    }
    
    /**
     * The ID of the associated check suite.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_suite_id")
    public Long checkSuiteId;

    public WorkflowRun withCheckSuiteId(Long checkSuiteId) {
        this.checkSuiteId = checkSuiteId;
        return this;
    }
    
    /**
     * The node ID of the associated check suite.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_suite_node_id")
    public String checkSuiteNodeId;

    public WorkflowRun withCheckSuiteNodeId(String checkSuiteNodeId) {
        this.checkSuiteNodeId = checkSuiteNodeId;
        return this;
    }
    
    /**
     * The URL to the associated check suite.
     */
    @JsonProperty("check_suite_url")
    public String checkSuiteUrl;

    public WorkflowRun withCheckSuiteUrl(String checkSuiteUrl) {
        this.checkSuiteUrl = checkSuiteUrl;
        return this;
    }
    
    @JsonProperty("conclusion")
    public String conclusion;

    public WorkflowRun withConclusion(String conclusion) {
        this.conclusion = conclusion;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public WorkflowRun withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("event")
    public String event;

    public WorkflowRun withEvent(String event) {
        this.event = event;
        return this;
    }
    
    @JsonProperty("head_branch")
    public String headBranch;

    public WorkflowRun withHeadBranch(String headBranch) {
        this.headBranch = headBranch;
        return this;
    }
    
    /**
     * Simple Commit
     */
    @JsonProperty("head_commit")
    public NullableSimpleCommit headCommit;

    public WorkflowRun withHeadCommit(NullableSimpleCommit headCommit) {
        this.headCommit = headCommit;
        return this;
    }
    
    /**
     * Minimal Repository
     */
    @JsonProperty("head_repository")
    public MinimalRepository headRepository;

    public WorkflowRun withHeadRepository(MinimalRepository headRepository) {
        this.headRepository = headRepository;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("head_repository_id")
    public Long headRepositoryId;

    public WorkflowRun withHeadRepositoryId(Long headRepositoryId) {
        this.headRepositoryId = headRepositoryId;
        return this;
    }
    
    /**
     * The SHA of the head commit that points to the version of the workflow being run.
     */
    @JsonProperty("head_sha")
    public String headSha;

    public WorkflowRun withHeadSha(String headSha) {
        this.headSha = headSha;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;

    public WorkflowRun withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    /**
     * The ID of the workflow run.
     */
    @JsonProperty("id")
    public Long id;

    public WorkflowRun withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * The URL to the jobs for the workflow run.
     */
    @JsonProperty("jobs_url")
    public String jobsUrl;

    public WorkflowRun withJobsUrl(String jobsUrl) {
        this.jobsUrl = jobsUrl;
        return this;
    }
    
    /**
     * The URL to download the logs for the workflow run.
     */
    @JsonProperty("logs_url")
    public String logsUrl;

    public WorkflowRun withLogsUrl(String logsUrl) {
        this.logsUrl = logsUrl;
        return this;
    }
    
    /**
     * The name of the workflow run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public WorkflowRun withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;

    public WorkflowRun withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * The URL to the previous attempted run of this workflow, if one exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previous_attempt_url")
    public String previousAttemptUrl;

    public WorkflowRun withPreviousAttemptUrl(String previousAttemptUrl) {
        this.previousAttemptUrl = previousAttemptUrl;
        return this;
    }
    
    @JsonProperty("pull_requests")
    public PullRequestMinimal[] pullRequests;

    public WorkflowRun withPullRequests(PullRequestMinimal[] pullRequests) {
        this.pullRequests = pullRequests;
        return this;
    }
    
    /**
     * Minimal Repository
     */
    @JsonProperty("repository")
    public MinimalRepository repository;

    public WorkflowRun withRepository(MinimalRepository repository) {
        this.repository = repository;
        return this;
    }
    
    /**
     * The URL to rerun the workflow run.
     */
    @JsonProperty("rerun_url")
    public String rerunUrl;

    public WorkflowRun withRerunUrl(String rerunUrl) {
        this.rerunUrl = rerunUrl;
        return this;
    }
    
    /**
     * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_attempt")
    public Long runAttempt;

    public WorkflowRun withRunAttempt(Long runAttempt) {
        this.runAttempt = runAttempt;
        return this;
    }
    
    /**
     * The auto incrementing run number for the workflow run.
     */
    @JsonProperty("run_number")
    public Long runNumber;

    public WorkflowRun withRunNumber(Long runNumber) {
        this.runNumber = runNumber;
        return this;
    }
    
    /**
     * The start time of the latest run. Resets on re-run.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("run_started_at")
    public OffsetDateTime runStartedAt;

    public WorkflowRun withRunStartedAt(OffsetDateTime runStartedAt) {
        this.runStartedAt = runStartedAt;
        return this;
    }
    
    @JsonProperty("status")
    public String status;

    public WorkflowRun withStatus(String status) {
        this.status = status;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public WorkflowRun withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * The URL to the workflow run.
     */
    @JsonProperty("url")
    public String url;

    public WorkflowRun withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * The ID of the parent workflow.
     */
    @JsonProperty("workflow_id")
    public Long workflowId;

    public WorkflowRun withWorkflowId(Long workflowId) {
        this.workflowId = workflowId;
        return this;
    }
    
    /**
     * The URL to the workflow.
     */
    @JsonProperty("workflow_url")
    public String workflowUrl;

    public WorkflowRun withWorkflowUrl(String workflowUrl) {
        this.workflowUrl = workflowUrl;
        return this;
    }
    
    public WorkflowRun(@JsonProperty("artifacts_url") String artifactsUrl, @JsonProperty("cancel_url") String cancelUrl, @JsonProperty("check_suite_url") String checkSuiteUrl, @JsonProperty("conclusion") String conclusion, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("event") String event, @JsonProperty("head_branch") String headBranch, @JsonProperty("head_commit") NullableSimpleCommit headCommit, @JsonProperty("head_repository") MinimalRepository headRepository, @JsonProperty("head_sha") String headSha, @JsonProperty("html_url") String htmlUrl, @JsonProperty("id") Long id, @JsonProperty("jobs_url") String jobsUrl, @JsonProperty("logs_url") String logsUrl, @JsonProperty("node_id") String nodeId, @JsonProperty("pull_requests") PullRequestMinimal[] pullRequests, @JsonProperty("repository") MinimalRepository repository, @JsonProperty("rerun_url") String rerunUrl, @JsonProperty("run_number") Long runNumber, @JsonProperty("status") String status, @JsonProperty("updated_at") OffsetDateTime updatedAt, @JsonProperty("url") String url, @JsonProperty("workflow_id") Long workflowId, @JsonProperty("workflow_url") String workflowUrl) {
        this.artifactsUrl = artifactsUrl;
        this.cancelUrl = cancelUrl;
        this.checkSuiteUrl = checkSuiteUrl;
        this.conclusion = conclusion;
        this.createdAt = createdAt;
        this.event = event;
        this.headBranch = headBranch;
        this.headCommit = headCommit;
        this.headRepository = headRepository;
        this.headSha = headSha;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.jobsUrl = jobsUrl;
        this.logsUrl = logsUrl;
        this.nodeId = nodeId;
        this.pullRequests = pullRequests;
        this.repository = repository;
        this.rerunUrl = rerunUrl;
        this.runNumber = runNumber;
        this.status = status;
        this.updatedAt = updatedAt;
        this.url = url;
        this.workflowId = workflowId;
        this.workflowUrl = workflowUrl;
  }
}
