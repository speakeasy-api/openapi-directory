/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProfileTokenRequest - The profile id and optional pin with required token scope.
 */
public class ProfileTokenRequest {
    /**
     * If you specify a cookie type then a content filter cookie will be returned
     * along with the token(s). This is only intended for web based clients which
     * need to pass the cookies to a server to render a page based on the user's
     * content filters e.g subscription code.
     * 
     * If type `Session` the cookie will be session based.
     * If type `Persistent` the cookie will have a medium term lifespan.
     * If undefined no cookies will be set.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cookieType")
    public ProfileTokenRequestCookieTypeEnum cookieType;

    public ProfileTokenRequest withCookieType(ProfileTokenRequestCookieTypeEnum cookieType) {
        this.cookieType = cookieType;
        return this;
    }
    
    /**
     * The pin associated with this profile, if any.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pin")
    public String pin;

    public ProfileTokenRequest withPin(String pin) {
        this.pin = pin;
        return this;
    }
    
    /**
     * The id of the profile the token should grant access rights to.
     */
    @JsonProperty("profileId")
    public String profileId;

    public ProfileTokenRequest withProfileId(String profileId) {
        this.profileId = profileId;
        return this;
    }
    
    /**
     * The scope(s) of the token(s) required.
     */
    @JsonProperty("scopes")
    public ProfileTokenRequestScopesEnum[] scopes;

    public ProfileTokenRequest withScopes(ProfileTokenRequestScopesEnum[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    public ProfileTokenRequest(@JsonProperty("profileId") String profileId, @JsonProperty("scopes") ProfileTokenRequestScopesEnum[] scopes) {
        this.profileId = profileId;
        this.scopes = scopes;
  }
}
