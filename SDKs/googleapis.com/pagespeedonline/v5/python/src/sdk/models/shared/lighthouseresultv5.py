"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import categories as shared_categories
from ..shared import categorygroupv5 as shared_categorygroupv5
from ..shared import configsettings as shared_configsettings
from ..shared import environment as shared_environment
from ..shared import i18n as shared_i18n
from ..shared import lhrentity as shared_lhrentity
from ..shared import lighthouseauditresultv5 as shared_lighthouseauditresultv5
from ..shared import runtimeerror as shared_runtimeerror
from ..shared import stackpack as shared_stackpack
from ..shared import timing as shared_timing
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LighthouseResultV5:
    r"""The Lighthouse result object."""
    
    audits: Optional[dict[str, shared_lighthouseauditresultv5.LighthouseAuditResultV5]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audits'), 'exclude': lambda f: f is None }})
    r"""Map of audits in the LHR."""  
    categories: Optional[shared_categories.Categories] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""The categories in a Lighthouse run."""  
    category_groups: Optional[dict[str, shared_categorygroupv5.CategoryGroupV5]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categoryGroups'), 'exclude': lambda f: f is None }})
    r"""Map of category groups in the LHR."""  
    config_settings: Optional[shared_configsettings.ConfigSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configSettings'), 'exclude': lambda f: f is None }})
    r"""Message containing the configuration settings for the Lighthouse run."""  
    entities: Optional[list[shared_lhrentity.LhrEntity]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entities'), 'exclude': lambda f: f is None }})
    r"""Entity classification data."""  
    environment: Optional[shared_environment.Environment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('environment'), 'exclude': lambda f: f is None }})
    r"""Message containing environment configuration for a Lighthouse run."""  
    fetch_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fetchTime'), 'exclude': lambda f: f is None }})
    r"""The time that this run was fetched."""  
    final_displayed_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalDisplayedUrl'), 'exclude': lambda f: f is None }})
    r"""URL displayed on the page after Lighthouse finishes."""  
    final_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalUrl'), 'exclude': lambda f: f is None }})
    r"""The final resolved url that was audited."""  
    full_page_screenshot: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fullPageScreenshot'), 'exclude': lambda f: f is None }})
    r"""Screenshot data of the full page, along with node rects relevant to the audit results."""  
    i18n: Optional[shared_i18n.I18n] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i18n'), 'exclude': lambda f: f is None }})
    r"""Message containing the i18n data for the LHR - Version 1."""  
    lighthouse_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lighthouseVersion'), 'exclude': lambda f: f is None }})
    r"""The lighthouse version that was used to generate this LHR."""  
    main_document_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mainDocumentUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the main document request of the final navigation."""  
    requested_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestedUrl'), 'exclude': lambda f: f is None }})
    r"""The original requested url."""  
    runtime_error: Optional[shared_runtimeerror.RuntimeErrorT] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runtimeError'), 'exclude': lambda f: f is None }})
    r"""Message containing a runtime error config."""  
    run_warnings: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runWarnings'), 'exclude': lambda f: f is None }})
    r"""List of all run warnings in the LHR. Will always output to at least `[]`."""  
    stack_packs: Optional[list[shared_stackpack.StackPack]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stackPacks'), 'exclude': lambda f: f is None }})
    r"""The Stack Pack advice strings."""  
    timing: Optional[shared_timing.Timing] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timing'), 'exclude': lambda f: f is None }})
    r"""Message containing the performance timing data for the Lighthouse run."""  
    user_agent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userAgent'), 'exclude': lambda f: f is None }})
    r"""The user agent that was used to run this LHR."""  
    