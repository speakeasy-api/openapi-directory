"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DataAPI:
    r"""Exposes endpoints for reading and writing documents in OPA. For an explanation of the different types of documents, see [the OPA document model](https://www.openpolicyagent.org/docs/latest/philosophy/#the-opa-document-model)"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_document(self, request: operations.DeleteDocumentRequest) -> operations.DeleteDocumentResponse:
        r"""Delete a document
        This API endpoint deletes an existing document from the server
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDocumentRequest, base_url, '/v1/data/{path}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFour])
                res.four_hundred_and_four = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out

        return res

    def get_document(self, request: operations.GetDocumentRequest) -> operations.GetDocumentResponse:
        r"""Get a document
        This API endpoint returns the document specified by `path`.
        
        The server will return a *bad request* (400) response if either:
        - The query requires an input document and you do not provide it
        - You provide the input document but the query has already defined it.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentRequest, base_url, '/v1/data/{path}', request)
        
        query_params = utils.get_query_params(operations.GetDocumentRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDocument200ApplicationJSON])
                res.get_document_200_application_json_object = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out

        return res

    def get_document_with_path(self, request: operations.GetDocumentWithPathRequest) -> operations.GetDocumentWithPathResponse:
        r"""Get a document (with input)
        The server will return a *bad request* (400) response if either:
        - The query requires an input document and you do not provide it
        - You provided an input document but the query has already defined it.
        
        If `path` indexes into an array, the server will attempt to convert the array index to an integer. If the path element cannot be converted to an integer, a *not found* response (404) will be returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentWithPathRequest, base_url, '/v1/data/{path}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetDocumentWithPathRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentWithPathResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDocumentWithPath200ApplicationJSON])
                res.get_document_with_path_200_application_json_object = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out

        return res

    def get_document_with_web_hook(self, request: operations.GetDocumentWithWebHookRequest) -> operations.GetDocumentWithWebHookResponse:
        r"""Get a document (with webhook)
        The example given here assumes you have created a policy (with `PUT /v1/policies/{path}`), such as:
        
          ```yaml
          package opa.examples
          import input.example.flag
          allow_request { flag == true }
          ```
        
        The server will return a *not found* (404) response if the requested document is missing or undefined.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDocumentWithWebHookRequest, base_url, '/v0/data/{path}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.GetDocumentWithWebHookRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDocumentWithWebHookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetDocumentWithWebHook200ApplicationJSON])
                res.get_document_with_web_hook_200_application_json_object = out
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFour])
                res.four_hundred_and_four = out

        return res

    def patch_document(self, request: operations.PatchDocumentRequest) -> operations.PatchDocumentResponse:
        r"""Update a document
        This API endpoint updates an existing document on the server by describing the changes required (using [JSON patch operations](http://jsonpatch.com/))
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchDocumentRequest, base_url, '/v1/data/{path}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFour])
                res.four_hundred_and_four = out

        return res

    def put_document(self, request: operations.PutDocumentRequest) -> operations.PutDocumentResponse:
        r"""Create or overwrite a document
        If the path does not refer to an existing document (for example *us-west/servers*), the server will attempt to create all the necessary containing documents.
        
        This behavior is similar to the Unix command [mkdir -p](https://en.wikipedia.org/wiki/Mkdir#Options).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDocumentRequest, base_url, '/v1/data/{path}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 304]:
            pass
        elif http_res.status_code in [400, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundred])
                res.four_hundred = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FourHundredAndFour])
                res.four_hundred_and_four = out

        return res

    