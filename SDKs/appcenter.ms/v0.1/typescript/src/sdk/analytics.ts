/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Analytics {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns whether audience definition exists.
   */
  analyticsAudienceNameExists(
    req: operations.AnalyticsAudienceNameExistsRequest,
    security: operations.AnalyticsAudienceNameExistsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsAudienceNameExistsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsAudienceNameExistsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsAudienceNameExistsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "head",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsAudienceNameExistsResponse =
        new operations.AnalyticsAudienceNameExistsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsAudienceNameExistsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsAudienceNameExistsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Percentage of crash-free device by day in the time range based on the selected versions. Api will return -1 if crash devices is greater than active devices.
   */
  analyticsCrashFreeDevicePercentages(
    req: operations.AnalyticsCrashFreeDevicePercentagesRequest,
    security: operations.AnalyticsCrashFreeDevicePercentagesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashFreeDevicePercentagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashFreeDevicePercentagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCrashFreeDevicePercentagesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashFreeDevicePercentagesResponse =
        new operations.AnalyticsCrashFreeDevicePercentagesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashFreeDevicePercentages200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashFreeDevicePercentages200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashFreeDevicePercentagesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashFreeDevicePercentagesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Available for UWP apps only.
   *
   * @remarks
   * Count of crashes by day in the time range of the selected crash group with selected version. Available for UWP apps only.
   */
  analyticsCrashGroupCounts(
    req: operations.AnalyticsCrashGroupCountsRequest,
    security: operations.AnalyticsCrashGroupCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashGroupCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashGroupCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCrashGroupCountsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashGroupCountsResponse =
        new operations.AnalyticsCrashGroupCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupCounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupCounts200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupCountsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupCountsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Available for UWP apps only.
   *
   * @remarks
   * Top models of the selected crash group with selected version. Available for UWP apps only.
   */
  analyticsCrashGroupModelCounts(
    req: operations.AnalyticsCrashGroupModelCountsRequest,
    security: operations.AnalyticsCrashGroupModelCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashGroupModelCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashGroupModelCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCrashGroupModelCountsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashGroupModelCountsResponse =
        new operations.AnalyticsCrashGroupModelCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupModelCounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupModelCounts200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupModelCountsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupModelCountsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Available for UWP apps only.
   *
   * @remarks
   * Top OSes of the selected crash group with selected version. Available for UWP apps only.
   */
  analyticsCrashGroupOperatingSystemCounts(
    req: operations.AnalyticsCrashGroupOperatingSystemCountsRequest,
    security: operations.AnalyticsCrashGroupOperatingSystemCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashGroupOperatingSystemCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashGroupOperatingSystemCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AnalyticsCrashGroupOperatingSystemCountsSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashGroupOperatingSystemCountsResponse =
        new operations.AnalyticsCrashGroupOperatingSystemCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupOperatingSystemCounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupOperatingSystemCounts200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupOperatingSystemCountsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupOperatingSystemCountsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Available for UWP apps only.
   *
   * @remarks
   * Overall crashes and affected users count of the selected crash group with selected version. Available for UWP apps only.
   */
  analyticsCrashGroupTotals(
    req: operations.AnalyticsCrashGroupTotalsRequest,
    security: operations.AnalyticsCrashGroupTotalsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashGroupTotalsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashGroupTotalsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCrashGroupTotalsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashGroupTotalsResponse =
        new operations.AnalyticsCrashGroupTotalsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupTotals200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupTotals200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupTotalsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupTotalsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Overall crashes and affected users count of the selected crash groups with selected versions.
   */
  analyticsCrashGroupsTotals(
    req: operations.AnalyticsCrashGroupsTotalsRequest,
    security: operations.AnalyticsCrashGroupsTotalsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCrashGroupsTotalsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCrashGroupsTotalsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCrashGroupsTotalsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCrashGroupsTotalsResponse =
        new operations.AnalyticsCrashGroupsTotalsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupsTotals200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.analyticsCrashGroupsTotals200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupsTotals200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCrashGroupsTotalsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCrashGroupsTotalsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates or updates audience definition.
   */
  analyticsCreateOrUpdateAudience(
    req: operations.AnalyticsCreateOrUpdateAudienceRequest,
    security: operations.AnalyticsCreateOrUpdateAudienceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsCreateOrUpdateAudienceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsCreateOrUpdateAudienceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsCreateOrUpdateAudienceSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsCreateOrUpdateAudienceResponse =
        new operations.AnalyticsCreateOrUpdateAudienceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCreateOrUpdateAudience200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCreateOrUpdateAudience200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsCreateOrUpdateAudienceDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsCreateOrUpdateAudienceDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes audience definition.
   */
  analyticsDeleteAudience(
    req: operations.AnalyticsDeleteAudienceRequest,
    security: operations.AnalyticsDeleteAudienceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsDeleteAudienceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsDeleteAudienceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsDeleteAudienceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsDeleteAudienceResponse =
        new operations.AnalyticsDeleteAudienceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 404].includes(httpRes?.status):
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsDeleteAudienceDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsDeleteAudienceDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Count of total downloads for the provided distribution releases.
   */
  analyticsDistributionReleaseCounts(
    req: operations.AnalyticsDistributionReleaseCountsRequest,
    security: operations.AnalyticsDistributionReleaseCountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsDistributionReleaseCountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsDistributionReleaseCountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/distribution/release_counts",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsDistributionReleaseCountsSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsDistributionReleaseCountsResponse =
        new operations.AnalyticsDistributionReleaseCountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsDistributionReleaseCounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsDistributionReleaseCounts200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsDistributionReleaseCountsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsDistributionReleaseCountsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Event properties.
   */
  analyticsEventProperties(
    req: operations.AnalyticsEventPropertiesRequest,
    security: operations.AnalyticsEventPropertiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsEventPropertiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsEventPropertiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsEventPropertiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsEventPropertiesResponse =
        new operations.AnalyticsEventPropertiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsEventProperties200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsEventProperties200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsEventPropertiesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsEventPropertiesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the set of Events with the specified event names.
   */
  analyticsEventsDelete(
    req: operations.AnalyticsEventsDeleteRequest,
    security: operations.AnalyticsEventsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsEventsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsEventsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsEventsDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsEventsDeleteResponse =
        new operations.AnalyticsEventsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsEventsDeleteDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsEventsDeleteDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete the set of Events with the specified event names.
   */
  analyticsEventsDeleteLogs(
    req: operations.AnalyticsEventsDeleteLogsRequest,
    security: operations.AnalyticsEventsDeleteLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsEventsDeleteLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsEventsDeleteLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsEventsDeleteLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsEventsDeleteLogsResponse =
        new operations.AnalyticsEventsDeleteLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsEventsDeleteLogsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsEventsDeleteLogsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
   */
  analyticsGenericLogFlow(
    req: operations.AnalyticsGenericLogFlowRequest,
    security: operations.AnalyticsGenericLogFlowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsGenericLogFlowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsGenericLogFlowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/generic_log_flow",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsGenericLogFlowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsGenericLogFlowResponse =
        new operations.AnalyticsGenericLogFlowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsGenericLogFlow200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsGenericLogFlow200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsGenericLogFlowDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsGenericLogFlowDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets audience definition.
   */
  analyticsGetAudience(
    req: operations.AnalyticsGetAudienceRequest,
    security: operations.AnalyticsGetAudienceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsGetAudienceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsGetAudienceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/{audience_name}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsGetAudienceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsGetAudienceResponse =
        new operations.AnalyticsGetAudienceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsGetAudience200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsGetAudience200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsGetAudienceDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsGetAudienceDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of audiences.
   */
  analyticsListAudiences(
    req: operations.AnalyticsListAudiencesRequest,
    security: operations.AnalyticsListAudiencesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsListAudiencesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsListAudiencesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsListAudiencesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsListAudiencesResponse =
        new operations.AnalyticsListAudiencesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListAudiences200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListAudiences200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListAudiencesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListAudiencesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of custom properties.
   */
  analyticsListCustomProperties(
    req: operations.AnalyticsListCustomPropertiesRequest,
    security: operations.AnalyticsListCustomPropertiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsListCustomPropertiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsListCustomPropertiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/custom_properties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsListCustomPropertiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsListCustomPropertiesResponse =
        new operations.AnalyticsListCustomPropertiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListCustomProperties200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListCustomProperties200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListCustomPropertiesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListCustomPropertiesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of device properties.
   */
  analyticsListDeviceProperties(
    req: operations.AnalyticsListDevicePropertiesRequest,
    security: operations.AnalyticsListDevicePropertiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsListDevicePropertiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsListDevicePropertiesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsListDevicePropertiesSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsListDevicePropertiesResponse =
        new operations.AnalyticsListDevicePropertiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListDeviceProperties200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListDeviceProperties200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListDevicePropertiesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListDevicePropertiesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get list of device property values.
   */
  analyticsListDevicePropertyValues(
    req: operations.AnalyticsListDevicePropertyValuesRequest,
    security: operations.AnalyticsListDevicePropertyValuesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsListDevicePropertyValuesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsListDevicePropertyValuesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/metadata/device_properties/{property_name}/values",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsListDevicePropertyValuesSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsListDevicePropertyValuesResponse =
        new operations.AnalyticsListDevicePropertyValuesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListDevicePropertyValues200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListDevicePropertyValues200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsListDevicePropertyValuesDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsListDevicePropertyValuesDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Logs received between the specified start time and the current time. The API will return a maximum of 100 logs per call.
   */
  analyticsLogFlow(
    req: operations.AnalyticsLogFlowRequest,
    security: operations.AnalyticsLogFlowSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsLogFlowResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsLogFlowRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/log_flow",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsLogFlowSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsLogFlowResponse =
        new operations.AnalyticsLogFlowResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsLogFlow200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.AnalyticsLogFlow200ApplicationJSON
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsLogFlowDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsLogFlowDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Tests audience definition.
   */
  analyticsTestAudience(
    req: operations.AnalyticsTestAudienceRequest,
    security: operations.AnalyticsTestAudienceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AnalyticsTestAudienceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AnalyticsTestAudienceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/analytics/audiences/definition/test",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AnalyticsTestAudienceSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AnalyticsTestAudienceResponse =
        new operations.AnalyticsTestAudienceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsTestAudience200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsTestAudience200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.analyticsTestAudienceDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.AnalyticsTestAudienceDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * **Warning, this operation is not reversible.**
   *
   * A successful call to this API will permanently stop ingesting any logs received via SDK by app_id, and cannot be restored. We advise caution when using this API, it is designed to permanently disable an app_id.
   *
   */
  appBlockLogs(
    req: operations.AppBlockLogsRequest,
    security: operations.AppBlockLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppBlockLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppBlockLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppBlockLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppBlockLogsResponse =
        new operations.AppBlockLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appBlockLogs200ApplicationJSONStringString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get session logs by crash ID
   */
  crashesListSessionLogs(
    req: operations.CrashesListSessionLogsRequest,
    security: operations.CrashesListSessionLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CrashesListSessionLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CrashesListSessionLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/crashes/{crash_id}/session_logs",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CrashesListSessionLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CrashesListSessionLogsResponse =
        new operations.CrashesListSessionLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.crashesListSessionLogs200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CrashesListSessionLogs200ApplicationJSON
              );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.crashesListSessionLogsDefaultApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CrashesListSessionLogsDefaultApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * **Warning, this operation is not reversible.**
   *
   *  A successful call to this API will permanently stop ingesting any logs received via SDK for the given installation ID, and cannot be restored. We advise caution when using this API, it is designed to permanently disable collection from a specific installation of the app on a device, usually following the request from a user.
   *
   */
  devicesBlockLogs(
    req: operations.DevicesBlockLogsRequest,
    security: operations.DevicesBlockLogsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DevicesBlockLogsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DevicesBlockLogsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v0.1/apps/{owner_name}/{app_name}/devices/block_logs/{install_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DevicesBlockLogsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DevicesBlockLogsResponse =
        new operations.DevicesBlockLogsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.devicesBlockLogs200ApplicationJSONStringString = JSON.stringify(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }
}
