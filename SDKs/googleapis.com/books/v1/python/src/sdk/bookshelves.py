"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Bookshelves:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def books_bookshelves_get(self, request: operations.BooksBookshelvesGetRequest, security: operations.BooksBookshelvesGetSecurity) -> operations.BooksBookshelvesGetResponse:
        r"""Retrieves metadata for a specific bookshelf for the specified user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksBookshelvesGetRequest, base_url, '/books/v1/users/{userId}/bookshelves/{shelf}', request)
        
        query_params = utils.get_query_params(operations.BooksBookshelvesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksBookshelvesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bookshelf])
                res.bookshelf = out

        return res

    def books_bookshelves_list(self, request: operations.BooksBookshelvesListRequest, security: operations.BooksBookshelvesListSecurity) -> operations.BooksBookshelvesListResponse:
        r"""Retrieves a list of public bookshelves for the specified user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksBookshelvesListRequest, base_url, '/books/v1/users/{userId}/bookshelves', request)
        
        query_params = utils.get_query_params(operations.BooksBookshelvesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksBookshelvesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bookshelves])
                res.bookshelves = out

        return res

    def books_bookshelves_volumes_list(self, request: operations.BooksBookshelvesVolumesListRequest, security: operations.BooksBookshelvesVolumesListSecurity) -> operations.BooksBookshelvesVolumesListResponse:
        r"""Retrieves volumes in a specific bookshelf for the specified user."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BooksBookshelvesVolumesListRequest, base_url, '/books/v1/users/{userId}/bookshelves/{shelf}/volumes', request)
        
        query_params = utils.get_query_params(operations.BooksBookshelvesVolumesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BooksBookshelvesVolumesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Volumes])
                res.volumes = out

        return res

    