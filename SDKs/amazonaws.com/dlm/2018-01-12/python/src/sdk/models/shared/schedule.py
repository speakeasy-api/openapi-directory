"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import archiverule as shared_archiverule
from ..shared import createrule as shared_createrule
from ..shared import crossregioncopyrule as shared_crossregioncopyrule
from ..shared import deprecaterule as shared_deprecaterule
from ..shared import fastrestorerule as shared_fastrestorerule
from ..shared import retainrule as shared_retainrule
from ..shared import sharerule as shared_sharerule
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Schedule:
    r"""<b>[Snapshot and AMI policies only]</b> Specifies a schedule for a snapshot or AMI lifecycle policy."""
    
    archive_rule: Optional[shared_archiverule.ArchiveRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ArchiveRule'), 'exclude': lambda f: f is None }})  
    copy_tags: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTags'), 'exclude': lambda f: f is None }})  
    create_rule: Optional[shared_createrule.CreateRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateRule'), 'exclude': lambda f: f is None }})  
    cross_region_copy_rules: Optional[list[shared_crossregioncopyrule.CrossRegionCopyRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrossRegionCopyRules'), 'exclude': lambda f: f is None }})  
    deprecate_rule: Optional[shared_deprecaterule.DeprecateRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeprecateRule'), 'exclude': lambda f: f is None }})  
    fast_restore_rule: Optional[shared_fastrestorerule.FastRestoreRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FastRestoreRule'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    retain_rule: Optional[shared_retainrule.RetainRule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetainRule'), 'exclude': lambda f: f is None }})  
    share_rules: Optional[list[shared_sharerule.ShareRule]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShareRules'), 'exclude': lambda f: f is None }})  
    tags_to_add: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TagsToAdd'), 'exclude': lambda f: f is None }})  
    variable_tags: Optional[list[shared_tag.Tag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VariableTags'), 'exclude': lambda f: f is None }})  
    