<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tags 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove tags from transaction
     * 
     * Disassociates one or more tags from a specific transaction. Tags that are
     * not associated are silently ignored. An HTTP `204` is returned on
     * success. The associated tags, along with this request URL, are also
     * exposed via the `tags` relationship on the transaction resource returned
     * from `/transactions/{id}`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsResponse
     */
	public function deleteTransactionsTransactionIdRelationshipsTags(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactions/{transactionId}/relationships/tags', \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTransactionTagsRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTransactionsTransactionIdRelationshipsTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List tags
     * 
     * Retrieve a list of all tags currently in use. The returned list is
     * [paginated](#pagination) and can be scrolled by following the `next`
     * and `prev` links where present. Results are ordered lexicographically.
     * The `transactions` relationship for each tag exposes a link
     * to get the transactions with the given tag.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse
     */
	public function getTags(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/tags');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTagsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add tags to transaction
     * 
     * Associates one or more tags with a specific transaction. No more than 6
     * tags may be present on any single transaction. Duplicate tags are
     * silently ignored. An HTTP `204` is returned on success. The associated
     * tags, along with this request URL, are also exposed via the `tags`
     * relationship on the transaction resource returned from
     * `/transactions/{id}`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsResponse
     */
	public function postTransactionsTransactionIdRelationshipsTags(
        \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transactions/{transactionId}/relationships/tags', \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateTransactionTagsRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTransactionsTransactionIdRelationshipsTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}