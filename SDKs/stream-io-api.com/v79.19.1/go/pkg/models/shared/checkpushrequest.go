// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CheckPushRequestTypeOfPushProviderEnum - Push provider type
type CheckPushRequestTypeOfPushProviderEnum string

const (
	CheckPushRequestTypeOfPushProviderEnumFirebase CheckPushRequestTypeOfPushProviderEnum = "firebase"
	CheckPushRequestTypeOfPushProviderEnumApn      CheckPushRequestTypeOfPushProviderEnum = "apn"
	CheckPushRequestTypeOfPushProviderEnumHuawei   CheckPushRequestTypeOfPushProviderEnum = "huawei"
	CheckPushRequestTypeOfPushProviderEnumXiaomi   CheckPushRequestTypeOfPushProviderEnum = "xiaomi"
)

func (e *CheckPushRequestTypeOfPushProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "firebase":
		fallthrough
	case "apn":
		fallthrough
	case "huawei":
		fallthrough
	case "xiaomi":
		*e = CheckPushRequestTypeOfPushProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckPushRequestTypeOfPushProviderEnum: %s", s)
	}
}

type CheckPushRequest struct {
	// Push message template for APN
	ApnTemplate *string `json:"apn_template,omitempty"`
	// Push message data template for Firebase
	FirebaseDataTemplate *string `json:"firebase_data_template,omitempty"`
	// Push message template for Firebase
	FirebaseTemplate *string `json:"firebase_template,omitempty"`
	// Message ID to send push notification for
	MessageID *string `json:"message_id,omitempty"`
	// Name of push provider
	PushProviderName *string `json:"push_provider_name,omitempty"`
	// Push provider type
	PushProviderType *CheckPushRequestTypeOfPushProviderEnum `json:"push_provider_type,omitempty"`
	// Don't require existing devices to render templates
	SkipDevices *bool `json:"skip_devices,omitempty"`
	// Represents chat user
	User   map[string]interface{} `json:"user,omitempty"`
	UserID *string                `json:"user_id,omitempty"`
}
