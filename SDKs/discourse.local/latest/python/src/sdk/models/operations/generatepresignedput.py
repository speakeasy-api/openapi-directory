"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneratePresignedPutRequestBodyMetadata:
    
    sha1_checksum: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sha1-checksum'), 'exclude': lambda f: f is None }})
    r"""The SHA1 checksum of the upload binary blob. Optionally
    be provided and serves as an additional security check when
    later processing the file in complete-external-upload endpoint.
    """  
    
class GeneratePresignedPutRequestBodyTypeEnum(str, Enum):
    AVATAR = 'avatar'
    PROFILE_BACKGROUND = 'profile_background'
    CARD_BACKGROUND = 'card_background'
    CUSTOM_EMOJI = 'custom_emoji'
    COMPOSER = 'composer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneratePresignedPutRequestBody:
    
    file_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_name') }})  
    file_size: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_size') }})
    r"""File size should be represented in bytes."""  
    type: GeneratePresignedPutRequestBodyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    metadata: Optional[GeneratePresignedPutRequestBodyMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GeneratePresignedPut200ApplicationJSON:
    r"""external upload initialized"""
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""The path of the temporary file on the external storage
    service.
    """  
    unique_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_identifier'), 'exclude': lambda f: f is None }})
    r"""A unique string that identifies the external upload.
    This must be stored and then sent in the /complete-external-upload
    endpoint to complete the direct upload.
    """  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""A presigned PUT URL which must be used to upload
    the file binary blob to.
    """  
    

@dataclasses.dataclass
class GeneratePresignedPutResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    generate_presigned_put_200_application_json_object: Optional[GeneratePresignedPut200ApplicationJSON] = dataclasses.field(default=None)
    r"""external upload initialized"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    