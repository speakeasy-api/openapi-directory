// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TaxSettingsResponseTaxationModeEnum string

const (
	TaxSettingsResponseTaxationModeEnumExclusive TaxSettingsResponseTaxationModeEnum = "EXCLUSIVE"
	TaxSettingsResponseTaxationModeEnumInclusive TaxSettingsResponseTaxationModeEnum = "INCLUSIVE"
)

func (e *TaxSettingsResponseTaxationModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EXCLUSIVE":
		fallthrough
	case "INCLUSIVE":
		*e = TaxSettingsResponseTaxationModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxSettingsResponseTaxationModeEnum: %s", s)
	}
}

type TaxSettingsResponseTaxationTypeEnum string

const (
	TaxSettingsResponseTaxationTypeEnumNone     TaxSettingsResponseTaxationTypeEnum = "NONE"
	TaxSettingsResponseTaxationTypeEnumSalesTax TaxSettingsResponseTaxationTypeEnum = "SALES_TAX"
	TaxSettingsResponseTaxationTypeEnumVat      TaxSettingsResponseTaxationTypeEnum = "VAT"
)

func (e *TaxSettingsResponseTaxationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NONE":
		fallthrough
	case "SALES_TAX":
		fallthrough
	case "VAT":
		*e = TaxSettingsResponseTaxationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TaxSettingsResponseTaxationTypeEnum: %s", s)
	}
}

// TaxSettingsResponse - Tax settings
type TaxSettingsResponse struct {
	OrganizationUUID *string                              `json:"organizationUuid,omitempty"`
	TaxationMode     *TaxSettingsResponseTaxationModeEnum `json:"taxationMode,omitempty"`
	TaxationType     *TaxSettingsResponseTaxationTypeEnum `json:"taxationType,omitempty"`
}
