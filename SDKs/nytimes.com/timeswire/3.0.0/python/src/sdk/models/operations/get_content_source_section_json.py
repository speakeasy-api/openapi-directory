"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import article as shared_article
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetContentSourceSectionJSONSourceEnum(str, Enum):
    r"""Limits the set of items by originating source
    
    all = items from both The New York Times and The International New York Times
    nyt = New York Times items only
    iht = International New York Times items only
    """
    ALL = 'all'
    NYT = 'nyt'
    IHT = 'iht'


@dataclasses.dataclass
class GetContentSourceSectionJSONRequest:
    
    section: str = dataclasses.field(metadata={'path_param': { 'field_name': 'section', 'style': 'simple', 'explode': False }})
    r"""Limits the set of items by one or more sections
    all | One or more section names, separated by semicolons
    
     To get all sections, specify all. To get a particular section or sections, use the section names returned by this request:
     http://api.nytimes.com/svc/news/v3/content/section-list.json
    """  
    source: GetContentSourceSectionJSONSourceEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'source', 'style': 'simple', 'explode': False }})
    r"""Limits the set of items by originating source
    
    all = items from both The New York Times and The International New York Times
    nyt = New York Times items only
    iht = International New York Times items only
    """  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the number of results, between 1 and 20"""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Sets the starting point of the result set"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetContentSourceSectionJSON200ApplicationJSON:
    r"""An array of Articles"""
    
    copyright: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('copyright'), 'exclude': lambda f: f is None }})  
    num_results: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('num_results'), 'exclude': lambda f: f is None }})  
    results: Optional[list[shared_article.Article]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetContentSourceSectionJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_content_source_section_json_200_application_json_object: Optional[GetContentSourceSectionJSON200ApplicationJSON] = dataclasses.field(default=None)
    r"""An array of Articles"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    