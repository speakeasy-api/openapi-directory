"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateSiteRackPhysicalPropertiesResponse = exports.UpdateSiteRackPhysicalPropertiesRequest = exports.UpdateSiteRackPhysicalPropertiesRequestBody = exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var shared = __importStar(require("../shared"));
var class_transformer_1 = require("class-transformer");
/**
 * The type of fiber that you will use to attach the Outpost to your network.
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum["SingleMode"] = "SINGLE_MODE";
    UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum["MultiMode"] = "MULTI_MODE";
})(UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyFiberOpticCableTypeEnum = {}));
/**
 * The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs.
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum["NoLimit"] = "NO_LIMIT";
    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum["Max1400Lbs"] = "MAX_1400_LBS";
    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum["Max1600Lbs"] = "MAX_1600_LBS";
    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum["Max1800Lbs"] = "MAX_1800_LBS";
    UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum["Max2000Lbs"] = "MAX_2000_LBS";
})(UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyMaximumSupportedWeightLbsEnum = {}));
/**
 * <p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic10GbaseSr"] = "OPTIC_10GBASE_SR";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic10GbaseIr"] = "OPTIC_10GBASE_IR";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic10GbaseLr"] = "OPTIC_10GBASE_LR";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic40GbaseSr"] = "OPTIC_40GBASE_SR";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic40GbaseEsr"] = "OPTIC_40GBASE_ESR";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic40GbaseIr4Lr4L"] = "OPTIC_40GBASE_IR4_LR4L";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic40GbaseLr4"] = "OPTIC_40GBASE_LR4";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic100GbaseSr4"] = "OPTIC_100GBASE_SR4";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic100GbaseCwdm4"] = "OPTIC_100GBASE_CWDM4";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic100GbaseLr4"] = "OPTIC_100GBASE_LR4";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic100GPsm4Msa"] = "OPTIC_100G_PSM4_MSA";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic1000BaseLx"] = "OPTIC_1000BASE_LX";
    UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum["Optic1000BaseSx"] = "OPTIC_1000BASE_SX";
})(UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyOpticalStandardEnum = {}));
/**
 * <p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum["L630P"] = "L6_30P";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum["Iec309"] = "IEC309";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum["Ah530P7W"] = "AH530P7W";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum["Ah532P6W"] = "AH532P6W";
})(UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerConnectorEnum = {}));
/**
 * The power draw, in kVA, available at the hardware placement position for the rack.
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum["Power5Kva"] = "POWER_5_KVA";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum["Power10Kva"] = "POWER_10_KVA";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum["Power15Kva"] = "POWER_15_KVA";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum["Power30Kva"] = "POWER_30_KVA";
})(UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerDrawKvaEnum = {}));
/**
 * Indicates whether the power feed comes above or below the rack.
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum["AboveRack"] = "ABOVE_RACK";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum["BelowRack"] = "BELOW_RACK";
})(UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerFeedDropEnum = {}));
/**
 * <p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum["SinglePhase"] = "SINGLE_PHASE";
    UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum["ThreePhase"] = "THREE_PHASE";
})(UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyPowerPhaseEnum = {}));
/**
 * <p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount1"] = "UPLINK_COUNT_1";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount2"] = "UPLINK_COUNT_2";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount3"] = "UPLINK_COUNT_3";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount4"] = "UPLINK_COUNT_4";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount5"] = "UPLINK_COUNT_5";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount6"] = "UPLINK_COUNT_6";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount7"] = "UPLINK_COUNT_7";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount8"] = "UPLINK_COUNT_8";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount12"] = "UPLINK_COUNT_12";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum["UplinkCount16"] = "UPLINK_COUNT_16";
})(UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkCountEnum = {}));
/**
 * The uplink speed the rack should support for the connection to the Region.
 */
var UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum;
(function (UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum) {
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum["Uplink1G"] = "UPLINK_1G";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum["Uplink10G"] = "UPLINK_10G";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum["Uplink40G"] = "UPLINK_40G";
    UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum["Uplink100G"] = "UPLINK_100G";
})(UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum || (exports.UpdateSiteRackPhysicalPropertiesRequestBodyUplinkGbpsEnum = {}));
var UpdateSiteRackPhysicalPropertiesRequestBody = /** @class */ (function (_super) {
    __extends(UpdateSiteRackPhysicalPropertiesRequestBody, _super);
    function UpdateSiteRackPhysicalPropertiesRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "FiberOpticCableType" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "fiberOpticCableType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "MaximumSupportedWeightLbs" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "maximumSupportedWeightLbs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "OpticalStandard" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "opticalStandard", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PowerConnector" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "powerConnector", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PowerDrawKva" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "powerDrawKva", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PowerFeedDrop" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "powerFeedDrop", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "PowerPhase" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "powerPhase", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "UplinkCount" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "uplinkCount", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "UplinkGbps" }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequestBody.prototype, "uplinkGbps", void 0);
    return UpdateSiteRackPhysicalPropertiesRequestBody;
}(utils_1.SpeakeasyBase));
exports.UpdateSiteRackPhysicalPropertiesRequestBody = UpdateSiteRackPhysicalPropertiesRequestBody;
var UpdateSiteRackPhysicalPropertiesRequest = /** @class */ (function (_super) {
    __extends(UpdateSiteRackPhysicalPropertiesRequest, _super);
    function UpdateSiteRackPhysicalPropertiesRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "request, media_type=application/json" }),
        __metadata("design:type", UpdateSiteRackPhysicalPropertiesRequestBody)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "requestBody", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=SiteId",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "siteId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzAlgorithm", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzContentSha256", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Credential",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzCredential", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Date",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzSecurityToken", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-Signature",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzSignature", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
        }),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesRequest.prototype, "xAmzSignedHeaders", void 0);
    return UpdateSiteRackPhysicalPropertiesRequest;
}(utils_1.SpeakeasyBase));
exports.UpdateSiteRackPhysicalPropertiesRequest = UpdateSiteRackPhysicalPropertiesRequest;
var UpdateSiteRackPhysicalPropertiesResponse = /** @class */ (function (_super) {
    __extends(UpdateSiteRackPhysicalPropertiesResponse, _super);
    function UpdateSiteRackPhysicalPropertiesResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "accessDeniedException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "conflictException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "internalServerException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "notFoundException", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", shared.UpdateSiteRackPhysicalPropertiesOutput)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "updateSiteRackPhysicalPropertiesOutput", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], UpdateSiteRackPhysicalPropertiesResponse.prototype, "validationException", void 0);
    return UpdateSiteRackPhysicalPropertiesResponse;
}(utils_1.SpeakeasyBase));
exports.UpdateSiteRackPhysicalPropertiesResponse = UpdateSiteRackPhysicalPropertiesResponse;
