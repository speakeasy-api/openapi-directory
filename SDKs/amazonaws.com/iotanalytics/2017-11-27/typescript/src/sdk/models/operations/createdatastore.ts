/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  Contains information about the partition dimensions in a data store.
 */
export class CreateDatastoreRequestBodyDatastorePartitions extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.DatastorePartition })
  @Expose({ name: "partitions" })
  @Type(() => shared.DatastorePartition)
  partitions?: shared.DatastorePartition[];
}

/**
 * Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created.
 */
export class CreateDatastoreRequestBodyDatastoreStorage extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "customerManagedS3" })
  @Type(() => shared.CustomerManagedDatastoreS3Storage)
  customerManagedS3?: shared.CustomerManagedDatastoreS3Storage;

  @SpeakeasyMetadata()
  @Expose({ name: "iotSiteWiseMultiLayerStorage" })
  @Type(() => shared.DatastoreIotSiteWiseMultiLayerStorage)
  iotSiteWiseMultiLayerStorage?: shared.DatastoreIotSiteWiseMultiLayerStorage;

  @SpeakeasyMetadata()
  @Expose({ name: "serviceManagedS3" })
  serviceManagedS3?: Record<string, any>;
}

/**
 * <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
 */
export class CreateDatastoreRequestBodyFileFormatConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "jsonConfiguration" })
  jsonConfiguration?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "parquetConfiguration" })
  @Type(() => shared.ParquetConfiguration)
  parquetConfiguration?: shared.ParquetConfiguration;
}

/**
 * How long, in days, message data is kept.
 */
export class CreateDatastoreRequestBodyRetentionPeriod extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "numberOfDays" })
  numberOfDays?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unlimited" })
  unlimited?: boolean;
}

export class CreateDatastoreRequestBody extends SpeakeasyBase {
  /**
   * The name of the data store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datastoreName" })
  datastoreName: string;

  /**
   *  Contains information about the partition dimensions in a data store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datastorePartitions" })
  @Type(() => CreateDatastoreRequestBodyDatastorePartitions)
  datastorePartitions?: CreateDatastoreRequestBodyDatastorePartitions;

  /**
   * Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datastoreStorage" })
  @Type(() => CreateDatastoreRequestBodyDatastoreStorage)
  datastoreStorage?: CreateDatastoreRequestBodyDatastoreStorage;

  /**
   * <p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href="https://parquet.apache.org/">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fileFormatConfiguration" })
  @Type(() => CreateDatastoreRequestBodyFileFormatConfiguration)
  fileFormatConfiguration?: CreateDatastoreRequestBodyFileFormatConfiguration;

  /**
   * How long, in days, message data is kept.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => CreateDatastoreRequestBodyRetentionPeriod)
  retentionPeriod?: CreateDatastoreRequestBodyRetentionPeriod;

  /**
   * Metadata which can be used to manage the data store.
   */
  @SpeakeasyMetadata({ elemType: shared.Tag })
  @Expose({ name: "tags" })
  @Type(() => shared.Tag)
  tags?: shared.Tag[];
}

export class CreateDatastoreRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateDatastoreRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateDatastoreResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createDatastoreResponse?: shared.CreateDatastoreResponse;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: any;

  /**
   * InvalidRequestException
   */
  @SpeakeasyMetadata()
  invalidRequestException?: any;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ResourceAlreadyExistsException
   */
  @SpeakeasyMetadata()
  resourceAlreadyExistsException?: any;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;
}
