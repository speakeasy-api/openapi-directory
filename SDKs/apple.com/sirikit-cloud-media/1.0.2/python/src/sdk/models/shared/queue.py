"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import content as shared_content
from ..shared import playmediacontrol as shared_playmediacontrol
from ..shared import queueinsertpointer as shared_queueinsertpointer
from ..shared import queueplaypointer as shared_queueplaypointer
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Queue:
    
    content: list[shared_content.Content] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})  
    identifier: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('identifier') }})  
    version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})  
    content_items_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentItemsCount'), 'exclude': lambda f: f is None }})  
    controls: Optional[dict[str, shared_playmediacontrol.PlayMediaControl]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('controls'), 'exclude': lambda f: f is None }})  
    insert_pointer: Optional[shared_queueinsertpointer.QueueInsertPointer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('insertPointer'), 'exclude': lambda f: f is None }})  
    next_content_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextContentUrl'), 'exclude': lambda f: f is None }})  
    play_pointer: Optional[shared_queueplaypointer.QueuePlayPointer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playPointer'), 'exclude': lambda f: f is None }})  
    preroll_seconds: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prerollSeconds'), 'exclude': lambda f: f is None }})  
    previous_content_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previousContentUrl'), 'exclude': lambda f: f is None }})  
    skips_remaining: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipsRemaining'), 'exclude': lambda f: f is None }})  
    