/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProvisioningConfig - A provisioning configuration.
 */
public class ProvisioningConfig {
    /**
     * Output only. URI to Cloud Console UI view of this provisioning config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloudConsoleUri")
    public String cloudConsoleUri;

    public ProvisioningConfig withCloudConsoleUri(String cloudConsoleUri) {
        this.cloudConsoleUri = cloudConsoleUri;
        return this;
    }
    
    /**
     * Optional. The user-defined identifier of the provisioning config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customId")
    public String customId;

    public ProvisioningConfig withCustomId(String customId) {
        this.customId = customId;
        return this;
    }
    
    /**
     * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public ProvisioningConfig withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * A service account to enable customers to access instance credentials upon handover.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("handoverServiceAccount")
    public String handoverServiceAccount;

    public ProvisioningConfig withHandoverServiceAccount(String handoverServiceAccount) {
        this.handoverServiceAccount = handoverServiceAccount;
        return this;
    }
    
    /**
     * Instances to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instances")
    public InstanceConfig[] instances;

    public ProvisioningConfig withInstances(InstanceConfig[] instances) {
        this.instances = instances;
        return this;
    }
    
    /**
     * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;

    public ProvisioningConfig withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * Output only. The system-generated name of the provisioning config. This follows the UUID format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ProvisioningConfig withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Networks to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networks")
    public NetworkConfig[] networks;

    public ProvisioningConfig withNetworks(NetworkConfig[] networks) {
        this.networks = networks;
        return this;
    }
    
    /**
     * Output only. State of ProvisioningConfig.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public ProvisioningConfigStateEnum state;

    public ProvisioningConfig withState(ProvisioningConfigStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * Optional status messages associated with the FAILED state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;

    public ProvisioningConfig withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
    /**
     * A generated ticket id to track provisioning request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticketId")
    public String ticketId;

    public ProvisioningConfig withTicketId(String ticketId) {
        this.ticketId = ticketId;
        return this;
    }
    
    /**
     * Output only. Last update timestamp.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updateTime")
    public String updateTime;

    public ProvisioningConfig withUpdateTime(String updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    /**
     * Volumes to be created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volumes")
    public VolumeConfig[] volumes;

    public ProvisioningConfig withVolumes(VolumeConfig[] volumes) {
        this.volumes = volumes;
        return this;
    }
    
    /**
     * If true, VPC SC is enabled for the cluster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vpcScEnabled")
    public Boolean vpcScEnabled;

    public ProvisioningConfig withVpcScEnabled(Boolean vpcScEnabled) {
        this.vpcScEnabled = vpcScEnabled;
        return this;
    }
    
    public ProvisioningConfig(){}
}
