// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDescribeSuggestersActionEnum
type GETDescribeSuggestersActionEnum string

const (
	GETDescribeSuggestersActionEnumDescribeSuggesters GETDescribeSuggestersActionEnum = "DescribeSuggesters"
)

func (e *GETDescribeSuggestersActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribeSuggesters":
		*e = GETDescribeSuggestersActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSuggestersActionEnum: %s", s)
	}
}

// GETDescribeSuggestersVersionEnum
type GETDescribeSuggestersVersionEnum string

const (
	GETDescribeSuggestersVersionEnumTwoThousandAndThirteen0101 GETDescribeSuggestersVersionEnum = "2013-01-01"
)

func (e *GETDescribeSuggestersVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2013-01-01":
		*e = GETDescribeSuggestersVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDescribeSuggestersVersionEnum: %s", s)
	}
}

type GETDescribeSuggestersQueryParams struct {
	Action GETDescribeSuggestersActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Whether to display the deployed configuration (<code>true</code>) or include any pending changes (<code>false</code>). Defaults to <code>false</code>.
	Deployed *bool `queryParam:"style=form,explode=true,name=Deployed"`
	// The name of the domain you want to describe.
	DomainName string `queryParam:"style=form,explode=true,name=DomainName"`
	// The suggesters you want to describe.
	SuggesterNames []string                         `queryParam:"style=form,explode=true,name=SuggesterNames"`
	Version        GETDescribeSuggestersVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETDescribeSuggestersHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDescribeSuggestersRequest struct {
	QueryParams GETDescribeSuggestersQueryParams
	Headers     GETDescribeSuggestersHeaders
}

type GETDescribeSuggestersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
