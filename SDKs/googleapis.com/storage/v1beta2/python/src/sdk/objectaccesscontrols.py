"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ObjectAccessControls:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def storage_object_access_controls_delete(self, request: operations.StorageObjectAccessControlsDeleteRequest, security: operations.StorageObjectAccessControlsDeleteSecurity) -> operations.StorageObjectAccessControlsDeleteResponse:
        r"""Permanently deletes the ACL entry for the specified entity on the specified object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsDeleteRequest, base_url, '/b/{bucket}/o/{object}/acl/{entity}', request)
        
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def storage_object_access_controls_get(self, request: operations.StorageObjectAccessControlsGetRequest, security: operations.StorageObjectAccessControlsGetSecurity) -> operations.StorageObjectAccessControlsGetResponse:
        r"""Returns the ACL entry for the specified entity on the specified object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsGetRequest, base_url, '/b/{bucket}/o/{object}/acl/{entity}', request)
        
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_object_access_controls_insert(self, request: operations.StorageObjectAccessControlsInsertRequest, security: operations.StorageObjectAccessControlsInsertSecurity) -> operations.StorageObjectAccessControlsInsertResponse:
        r"""Creates a new ACL entry on the specified object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsInsertRequest, base_url, '/b/{bucket}/o/{object}/acl', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_object_access_controls_list(self, request: operations.StorageObjectAccessControlsListRequest, security: operations.StorageObjectAccessControlsListSecurity) -> operations.StorageObjectAccessControlsListResponse:
        r"""Retrieves ACL entries on the specified object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsListRequest, base_url, '/b/{bucket}/o/{object}/acl', request)
        
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControls])
                res.object_access_controls = out

        return res

    def storage_object_access_controls_patch(self, request: operations.StorageObjectAccessControlsPatchRequest, security: operations.StorageObjectAccessControlsPatchSecurity) -> operations.StorageObjectAccessControlsPatchResponse:
        r"""Updates an ACL entry on the specified object. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsPatchRequest, base_url, '/b/{bucket}/o/{object}/acl/{entity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    def storage_object_access_controls_update(self, request: operations.StorageObjectAccessControlsUpdateRequest, security: operations.StorageObjectAccessControlsUpdateSecurity) -> operations.StorageObjectAccessControlsUpdateResponse:
        r"""Updates an ACL entry on the specified object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.StorageObjectAccessControlsUpdateRequest, base_url, '/b/{bucket}/o/{object}/acl/{entity}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "object_access_control", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.StorageObjectAccessControlsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.StorageObjectAccessControlsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ObjectAccessControl])
                res.object_access_control = out

        return res

    