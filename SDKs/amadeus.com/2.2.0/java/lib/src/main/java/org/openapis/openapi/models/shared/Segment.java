/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Segment - defining a flight segment; including both operating and marketing details when applicable
 */
public class Segment {
    /**
     * information related to the aircraft
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aircraft")
    public AircraftEquipment aircraft;
    public Segment withAircraft(AircraftEquipment aircraft) {
        this.aircraft = aircraft;
        return this;
    }
    
    /**
     * departure or arrival information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("arrival")
    public FlightEndPoint arrival;
    public Segment withArrival(FlightEndPoint arrival) {
        this.arrival = arrival;
        return this;
    }
    
    /**
     * When the flight has a marketing or/and operating airline that is identified as blacklisted by the European Commission. 
     * 
     * To improve travel safety, the European Commission regularly updates the list of the banned carriers from operating in Europe. It allows any Travel Agency located in the European Union to easily identify and hide any travel recommendation based on some unsafe airlines. 
     * The [list of the banned airlines](https://ec.europa.eu/transport/sites/transport/files/air-safety-list_en.pdf) is published in the Official Journal of the European Union, where they are included as annexes A and B to the Commission Regulation. The blacklist of an airline can concern all its flights or some specific aircraft types pertaining to the airline   
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blacklistedInEU")
    public Boolean blacklistedInEU;
    public Segment withBlacklistedInEU(Boolean blacklistedInEU) {
        this.blacklistedInEU = blacklistedInEU;
        return this;
    }
    
    /**
     * providing the airline / carrier code
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrierCode")
    public String carrierCode;
    public Segment withCarrierCode(String carrierCode) {
        this.carrierCode = carrierCode;
        return this;
    }
    
    /**
     * Co2 informations
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("co2Emissions")
    public Co2Emission[] co2Emissions;
    public Segment withCo2Emissions(Co2Emission[] co2Emissions) {
        this.co2Emissions = co2Emissions;
        return this;
    }
    
    /**
     * departure or arrival information
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departure")
    public FlightEndPoint departure;
    public Segment withDeparture(FlightEndPoint departure) {
        this.departure = departure;
        return this;
    }
    
    /**
     * stop duration in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) PnYnMnDTnHnMnS format, e.g. PT2H10M
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public Segment withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * Id of the segment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Segment withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * the flight number as assigned by the carrier
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public Segment withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Number of stops
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfStops")
    public Long numberOfStops;
    public Segment withNumberOfStops(Long numberOfStops) {
        this.numberOfStops = numberOfStops;
        return this;
    }
    
    /**
     * information about the operating flight
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operating")
    public OperatingFlight operating;
    public Segment withOperating(OperatingFlight operating) {
        this.operating = operating;
        return this;
    }
    
    /**
     * information regarding the different stops composing the flight segment. E.g. technical stop, change of gauge...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stops")
    public FlightStop[] stops;
    public Segment withStops(FlightStop[] stops) {
        this.stops = stops;
        return this;
    }
    
}
