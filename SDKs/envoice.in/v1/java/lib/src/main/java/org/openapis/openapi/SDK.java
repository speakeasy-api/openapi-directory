/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/80638214aa04722c9203)
 * &lt;span style='margin-left: 0.5em;'&gt;or&lt;/span&gt;
 * &lt;a href='https://documenter.getpostman.com/view/3559821/TVeqcn2L' class='openapi-button' _ngcontent-c6&gt;View Postman docs&lt;/a&gt;
 * 
 * # Quickstart
 * 
 * Visit [github](https://github.com/EmitKnowledge/Envoice) to view the quickstart tutorial.
 * 
 * &lt;div class='postman-tutorial'&gt;
 * 
 * # Tutorial for running the API in postman
 * 
 * Click on ""Run in Postman"" button
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 1](/Assets/images/api/postman-tutorial/postman-tutorial-1.png)
 * 
 *  --- 
 * 
 * A new page will open.
 * Click the ""Postman for windows"" to run postman as a desktop app.
 * Make sure you have already [installed](https://www.getpostman.com/docs/postman/launching_postman/installation_and_updates) Postman.
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 2](/Assets/images/api/postman-tutorial/postman-tutorial-2.png)
 * 
 *  --- 
 * 
 * In chrome an alert might show up to set a default app for opening postman links. Click on ""Open Postman"".
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 3](/Assets/images/api/postman-tutorial/postman-tutorial-3.png)
 * 
 *  --- 
 * 
 * The OpenAPI specification will be imported in Postman as a new collection named ""Envoice api""
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 4](/Assets/images/api/postman-tutorial/postman-tutorial-4.png)
 * 
 *  --- 
 * 
 * When testing be sure to check and modify the environment variables to suit your api key and secret. The domain is set to envoice's endpoint so you don't really need to change that.  
 * &lt;sub&gt;\*Eye button in top right corner &lt;/sub&gt;
 * &lt;br /&gt;&lt;br /&gt; 
 * ![postman - tutorial - 5](/Assets/images/api/postman-tutorial/postman-tutorial-5.png)
 * &lt;br /&gt;&lt;br /&gt; 
 * ![postman - tutorial - 6](/Assets/images/api/postman-tutorial/postman-tutorial-6.png)
 * 
 *  --- 
 * 
 * You don't need to change the values of the header parameters, because they will be replaced automatically when you send a request with real values from the environment configured in the previous step.
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 7](/Assets/images/api/postman-tutorial/postman-tutorial-7.png)
 * 
 *  --- 
 * 
 * Modify the example data to suit your needs and send a request.
 * &lt;br /&gt;&lt;br /&gt;
 * ![postman - tutorial - 8](/Assets/images/api/postman-tutorial/postman-tutorial-8.png)
 * &lt;/div&gt;
 * 
 * # Webhooks
 * 
 * Webhooks allow you to build or set up Envoice Apps which subscribe to invoice activities. 
 * When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL. 
 * Webhooks can be used to update an external invoice data storage.
 * 
 * In order to use webhooks visit [this link](/account/settings#api-tab) and add upto 10 webhook urls that will return status `200` in order to signal that the webhook is working.
 * All nonworking webhooks will be ignored after a certain period of time and several retry attempts.
 * If after several attempts the webhook starts to work, we will send you all activities, both past and present, in chronological order.
 * 
 * The payload of the webhook is in format:
 * ```
 * {
 *     Signature: ""sha256 string"",
 *     Timestamp: ""YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"",
 *     Activity: {
 *         Message: "string",
 *         Link: "share url",
 *         Type: int,        
 *         InvoiceNumber: "string",
 *         InvoiceId: int,        
 *         OrderNumber: "string",
 *         OrderId: int,
 *         Id: int,
 *         CreatedOn: "YYYY-MM-DDTHH:mm:ss.FFFFFFFZ"
 *     }
 * }
 * ```            
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://www.envoice.in",
	};
  	
    public Client client;
    public Estimation estimation;
    public General general;
    public Invoice invoice;
    public Order order;
    public Payment payment;
    public PaymentLink paymentLink;
    public Product product;
    public Tax tax;
    public WorkType workType;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.client = new Client(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.estimation = new Estimation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.general = new General(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.invoice = new Invoice(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.order = new Order(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.payment = new Payment(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.paymentLink = new PaymentLink(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.product = new Product(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tax = new Tax(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.workType = new WorkType(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}