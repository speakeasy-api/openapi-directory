"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class WritablePowerFeedPhaseEnum(str, Enum):
    SINGLE_PHASE = 'single-phase'
    THREE_PHASE = 'three-phase'

class WritablePowerFeedStatusEnum(str, Enum):
    OFFLINE = 'offline'
    ACTIVE = 'active'
    PLANNED = 'planned'
    FAILED = 'failed'

class WritablePowerFeedSupplyEnum(str, Enum):
    AC = 'ac'
    DC = 'dc'

class WritablePowerFeedTypeEnum(str, Enum):
    PRIMARY = 'primary'
    REDUNDANT = 'redundant'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WritablePowerFeedInput:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    power_panel: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('power_panel') }})  
    amperage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amperage'), 'exclude': lambda f: f is None }})  
    comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comments'), 'exclude': lambda f: f is None }})  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})  
    max_utilization: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_utilization'), 'exclude': lambda f: f is None }})
    r"""Maximum permissible draw (percentage)"""  
    phase: Optional[WritablePowerFeedPhaseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('phase'), 'exclude': lambda f: f is None }})  
    rack: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rack'), 'exclude': lambda f: f is None }})  
    status: Optional[WritablePowerFeedStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    supply: Optional[WritablePowerFeedSupplyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supply'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[WritablePowerFeedTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    voltage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voltage'), 'exclude': lambda f: f is None }})  
    