/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Accounts } from "./accounts";
import { AnalysisCategories } from "./analysiscategories";
import { BankAccounts } from "./bankaccounts";
import { BookTranTypes } from "./booktrantypes";
import { CashPayments } from "./cashpayments";
import { CashReceipts } from "./cashreceipts";
import { CategoryTypes } from "./categorytypes";
import { CompanySettings } from "./companysettings";
import { CompanySetupConfig } from "./companysetupconfig";
import { Customers } from "./customers";
import { Email } from "./email";
import { OwnerTypeGroups } from "./ownertypegroups";
import { OwnerTypes } from "./ownertypes";
import { Payments } from "./payments";
import { Products } from "./products";
import { ProductTypes } from "./producttypes";
import { Purchases } from "./purchases";
import { Quote } from "./quote";
import { Sales } from "./sales";
import { SalesCreditNotes } from "./salescreditnotes";
import { SalesEntries } from "./salesentries";
import { SalesInvoices } from "./salesinvoices";
import { SalesRep } from "./salesrep";
import { Suppliers } from "./suppliers";
import { UserDefinedFields } from "./userdefinedfields";
import { VatAnalysisTypes } from "./vatanalysistypes";
import { VatCategories } from "./vatcategories";
import { VatRates } from "./vatrates";
import { VatTypes } from "./vattypes";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://app.bigredcloud.com/api"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 *
 * @remarks
 * <div style='line-height: 30px;'>
 *     <strong>Welcome to the Big Red Cloud API</strong><br/>
 *     This API enables programmatic access to Big Red Cloud data.<br/>
 *     We have used Swagger to auto generate the API documentation on this page, and it also enables direct interaction with the API in this page. <br/>
 *     To get started, you will require an API Key - check out our guide at <a target='_blank' href='https://www.bigredcloud.com/support/generating-api-key-guide/'>https://www.bigredcloud.com/support/generating-api-key-guide/</a> for information on how to get one. <br/>
 *     Use the  'Enter API Key' button below to enter your API key and start interacting with your Big Red Cloud data right on this page. <br/>
 *     The API key will be stored in your browsers local storage for convenience, but you will be able to delete it at any time if you wish. <br/>
 *     For additional information on the API, check out our support article at <a target='_blank' href='https://www.bigredcloud.com/support/api/'>https://www.bigredcloud.com/support/api/</a><br/>
 * </div>
 */
export class SDK {
  public accounts: Accounts;
  public analysisCategories: AnalysisCategories;
  public bankAccounts: BankAccounts;
  public bookTranTypes: BookTranTypes;
  public cashPayments: CashPayments;
  public cashReceipts: CashReceipts;
  public categoryTypes: CategoryTypes;
  public companySettings: CompanySettings;
  public companySetupConfig: CompanySetupConfig;
  public customers: Customers;
  public email: Email;
  public ownerTypeGroups: OwnerTypeGroups;
  public ownerTypes: OwnerTypes;
  public payments: Payments;
  public productTypes: ProductTypes;
  public products: Products;
  public purchases: Purchases;
  public quote: Quote;
  public sales: Sales;
  public salesCreditNotes: SalesCreditNotes;
  public salesEntries: SalesEntries;
  public salesInvoices: SalesInvoices;
  public salesRep: SalesRep;
  public suppliers: Suppliers;
  public userDefinedFields: UserDefinedFields;
  public vatAnalysisTypes: VatAnalysisTypes;
  public vatCategories: VatCategories;
  public vatRates: VatRates;
  public vatTypes: VatTypes;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.accounts = new Accounts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.analysisCategories = new AnalysisCategories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bankAccounts = new BankAccounts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.bookTranTypes = new BookTranTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cashPayments = new CashPayments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.cashReceipts = new CashReceipts(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.categoryTypes = new CategoryTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.companySettings = new CompanySettings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.companySetupConfig = new CompanySetupConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.customers = new Customers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.email = new Email(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ownerTypeGroups = new OwnerTypeGroups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.ownerTypes = new OwnerTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.payments = new Payments(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.productTypes = new ProductTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.products = new Products(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.purchases = new Purchases(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.quote = new Quote(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.sales = new Sales(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.salesCreditNotes = new SalesCreditNotes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.salesEntries = new SalesEntries(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.salesInvoices = new SalesInvoices(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.salesRep = new SalesRep(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.suppliers = new Suppliers(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.userDefinedFields = new UserDefinedFields(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vatAnalysisTypes = new VatAnalysisTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vatCategories = new VatCategories(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vatRates = new VatRates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.vatTypes = new VatTypes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
