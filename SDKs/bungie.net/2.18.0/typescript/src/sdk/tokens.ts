/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * tokens
 */
export class Tokens {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Apply a partner offer to the targeted user. This endpoint does not claim a new offer, but any already claimed offers will be applied to the game if not already.
   */
  tokensApplyMissingPartnerOffersWithoutClaim(
    req: operations.TokensApplyMissingPartnerOffersWithoutClaimRequest,
    security: operations.TokensApplyMissingPartnerOffersWithoutClaimSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TokensApplyMissingPartnerOffersWithoutClaimResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokensApplyMissingPartnerOffersWithoutClaimRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Tokens/Partner/ApplyMissingOffers/{partnerApplicationId}/{targetBnetMembershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.TokensApplyMissingPartnerOffersWithoutClaimSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensApplyMissingPartnerOffersWithoutClaimResponse =
        new operations.TokensApplyMissingPartnerOffersWithoutClaimResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Claim a partner offer as the authenticated user.
   */
  tokensClaimPartnerOffer(
    config?: AxiosRequestConfig
  ): Promise<operations.TokensClaimPartnerOfferResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Tokens/Partner/ClaimOffer/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensClaimPartnerOfferResponse =
        new operations.TokensClaimPartnerOfferResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Twitch Drops self-repair function - scans twitch for drops not marked as fulfilled and resyncs them.
   */
  tokensForceDropsRepair(
    config?: AxiosRequestConfig
  ): Promise<operations.TokensForceDropsRepairResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Tokens/Partner/ForceDropsRepair/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensForceDropsRepairResponse =
        new operations.TokensForceDropsRepairResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the bungie rewards for the targeted user when a platform membership Id and Type are used.
   */
  tokensGetBungieRewardsForPlatformUser(
    req: operations.TokensGetBungieRewardsForPlatformUserRequest,
    security: operations.TokensGetBungieRewardsForPlatformUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TokensGetBungieRewardsForPlatformUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokensGetBungieRewardsForPlatformUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Tokens/Rewards/GetRewardsForPlatformUser/{membershipId}/{membershipType}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TokensGetBungieRewardsForPlatformUserSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensGetBungieRewardsForPlatformUserResponse =
        new operations.TokensGetBungieRewardsForPlatformUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the bungie rewards for the targeted user.
   */
  tokensGetBungieRewardsForUser(
    req: operations.TokensGetBungieRewardsForUserRequest,
    security: operations.TokensGetBungieRewardsForUserSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TokensGetBungieRewardsForUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokensGetBungieRewardsForUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Tokens/Rewards/GetRewardsForUser/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TokensGetBungieRewardsForUserSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensGetBungieRewardsForUserResponse =
        new operations.TokensGetBungieRewardsForUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of the current bungie rewards
   */
  tokensGetBungieRewardsList(
    config?: AxiosRequestConfig
  ): Promise<operations.TokensGetBungieRewardsListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Tokens/Rewards/BungieRewards/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensGetBungieRewardsListResponse =
        new operations.TokensGetBungieRewardsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the partner sku and offer history of the targeted user. Elevated permissions are required to see users that are not yourself.
   */
  tokensGetPartnerOfferSkuHistory(
    req: operations.TokensGetPartnerOfferSkuHistoryRequest,
    security: operations.TokensGetPartnerOfferSkuHistorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TokensGetPartnerOfferSkuHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokensGetPartnerOfferSkuHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Tokens/Partner/History/{partnerApplicationId}/{targetBnetMembershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TokensGetPartnerOfferSkuHistorySecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensGetPartnerOfferSkuHistoryResponse =
        new operations.TokensGetPartnerOfferSkuHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the partner rewards history of the targeted user, both partner offers and Twitch drops.
   */
  tokensGetPartnerRewardHistory(
    req: operations.TokensGetPartnerRewardHistoryRequest,
    security: operations.TokensGetPartnerRewardHistorySecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TokensGetPartnerRewardHistoryResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TokensGetPartnerRewardHistoryRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Tokens/Partner/History/{targetBnetMembershipId}/Application/{partnerApplicationId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TokensGetPartnerRewardHistorySecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TokensGetPartnerRewardHistoryResponse =
        new operations.TokensGetPartnerRewardHistoryResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
