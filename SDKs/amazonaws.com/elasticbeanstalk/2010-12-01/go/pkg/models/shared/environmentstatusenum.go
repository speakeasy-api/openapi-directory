// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EnvironmentStatusEnum string

const (
	EnvironmentStatusEnumAborting    EnvironmentStatusEnum = "Aborting"
	EnvironmentStatusEnumLaunching   EnvironmentStatusEnum = "Launching"
	EnvironmentStatusEnumUpdating    EnvironmentStatusEnum = "Updating"
	EnvironmentStatusEnumLinkingFrom EnvironmentStatusEnum = "LinkingFrom"
	EnvironmentStatusEnumLinkingTo   EnvironmentStatusEnum = "LinkingTo"
	EnvironmentStatusEnumReady       EnvironmentStatusEnum = "Ready"
	EnvironmentStatusEnumTerminating EnvironmentStatusEnum = "Terminating"
	EnvironmentStatusEnumTerminated  EnvironmentStatusEnum = "Terminated"
)

func (e *EnvironmentStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Aborting":
		fallthrough
	case "Launching":
		fallthrough
	case "Updating":
		fallthrough
	case "LinkingFrom":
		fallthrough
	case "LinkingTo":
		fallthrough
	case "Ready":
		fallthrough
	case "Terminating":
		fallthrough
	case "Terminated":
		*e = EnvironmentStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentStatusEnum: %s", s)
	}
}
