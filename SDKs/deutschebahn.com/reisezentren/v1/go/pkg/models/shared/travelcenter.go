// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TravelCenterOpeningTimes - Opening times of the travel center, ordered by week day
type TravelCenterOpeningTimes struct {
	Fri []string `json:"fri,omitempty"`
	Mon []string `json:"mon,omitempty"`
	Sat []string `json:"sat,omitempty"`
	Sun []string `json:"sun,omitempty"`
	Thu []string `json:"thu,omitempty"`
	Tue []string `json:"tue,omitempty"`
	Wed []string `json:"wed,omitempty"`
}

// TravelCenterTypeEnum - Type of travel center
type TravelCenterTypeEnum string

const (
	TravelCenterTypeEnumReisezentrum   TravelCenterTypeEnum = "Reisezentrum"
	TravelCenterTypeEnumMobilityCenter TravelCenterTypeEnum = "Mobility Center"
)

func (e TravelCenterTypeEnum) ToPointer() *TravelCenterTypeEnum {
	return &e
}

func (e *TravelCenterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Reisezentrum":
		fallthrough
	case "Mobility Center":
		*e = TravelCenterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TravelCenterTypeEnum: %v", v)
	}
}

// TravelCenter - A station was found
type TravelCenter struct {
	// Street address of travel center
	Address *string `json:"address,omitempty"`
	// City of travel center
	City *string `json:"city,omitempty"`
	// Identifying number
	ID *int64 `json:"id,omitempty"`
	// Latitude of travel center location
	Lat *float64 `json:"lat,omitempty"`
	// Longitude of travel center location
	Lon *float64 `json:"lon,omitempty"`
	// Name of travel center
	Name *string `json:"name,omitempty"`
	// Opening times of the travel center, ordered by week day
	OpeningTimes *TravelCenterOpeningTimes `json:"openingTimes,omitempty"`
	// Post code of travel center
	PostCode *string `json:"postCode,omitempty"`
	// Type of travel center
	Type *TravelCenterTypeEnum `json:"type,omitempty"`
}
