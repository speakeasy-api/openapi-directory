"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListingNestExtraAttributes:
    
    dealer_added_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealer_added_f'), 'exclude': lambda f: f is None }})
    r"""List of dealer added features available with the car"""  
    electronics_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electronics_f'), 'exclude': lambda f: f is None }})
    r"""List of electronic features available with the car"""  
    exterior_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exterior_f'), 'exclude': lambda f: f is None }})
    r"""List of exterior features available with the car"""  
    features: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('features'), 'exclude': lambda f: f is None }})
    r"""List of Features available with the car"""  
    interior_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interior_f'), 'exclude': lambda f: f is None }})
    r"""List of interior features available with the car"""  
    options: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Installed Options of the car"""  
    safety_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('safety_f'), 'exclude': lambda f: f is None }})
    r"""List of safety features available with the car"""  
    seller_comments: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_comments'), 'exclude': lambda f: f is None }})
    r"""Seller comments for the car"""  
    standard_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('standard_f'), 'exclude': lambda f: f is None }})
    r"""List of standard features available with the car"""  
    technical_f: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('technical_f'), 'exclude': lambda f: f is None }})
    r"""List of technical features available with the car"""  
    