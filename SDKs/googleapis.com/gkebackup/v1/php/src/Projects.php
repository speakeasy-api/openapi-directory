<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Backup for the given BackupPlan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateResponse
     */
	public function gkebackupProjectsLocationsBackupPlansBackupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Backups for a given BackupPlan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListResponse
     */
	public function gkebackupProjectsLocationsBackupPlansBackupsList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backups', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBackupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBackupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the VolumeBackups for a given Backup.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListResponse
     */
	public function gkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/volumeBackups', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansBackupsVolumeBackupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVolumeBackupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVolumeBackupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new BackupPlan in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateResponse
     */
	public function gkebackupProjectsLocationsBackupPlansCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backupPlans', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "backupPlanInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists BackupPlans in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListResponse
     */
	public function gkebackupProjectsLocationsBackupPlansList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/backupPlans', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsBackupPlansListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listBackupPlansResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListBackupPlansResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsResponse
     */
	public function gkebackupProjectsLocationsDeleteOperations(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsDeleteOperationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListResponse
     */
	public function gkebackupProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelResponse
     */
	public function gkebackupProjectsLocationsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListResponse
     */
	public function gkebackupProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new RestorePlan in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateResponse
     */
	public function gkebackupProjectsLocationsRestorePlansCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/restorePlans', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restorePlanInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists RestorePlans in a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListResponse
     */
	public function gkebackupProjectsLocationsRestorePlansList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/restorePlans', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRestorePlansResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRestorePlansResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Restore for the given RestorePlan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresCreate(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/restores', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restoreInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes an existing Restore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresDelete(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the Restores for a given RestorePlan.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/restores', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRestoresResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRestoresResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Restore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresPatch(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "restoreInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the details of a single VolumeRestore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGet(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->volumeRestore = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VolumeRestore', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the VolumeRestores for a given Restore.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresList(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/volumeRestores', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVolumeRestoresResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVolumeRestoresResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsResponse
     */
	public function gkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GkebackupProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}