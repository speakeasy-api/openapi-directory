"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import awseksclusterloggingdetails as shared_awseksclusterloggingdetails
from ..shared import awseksclusterresourcesvpcconfigdetails as shared_awseksclusterresourcesvpcconfigdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEksClusterDetails:
    r"""Provides details about an Amazon EKS cluster."""
    
    arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn'), 'exclude': lambda f: f is None }})  
    certificate_authority_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CertificateAuthorityData'), 'exclude': lambda f: f is None }})  
    cluster_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClusterStatus'), 'exclude': lambda f: f is None }})  
    endpoint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Endpoint'), 'exclude': lambda f: f is None }})  
    logging: Optional[shared_awseksclusterloggingdetails.AwsEksClusterLoggingDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Logging'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    resources_vpc_config: Optional[shared_awseksclusterresourcesvpcconfigdetails.AwsEksClusterResourcesVpcConfigDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ResourcesVpcConfig'), 'exclude': lambda f: f is None }})  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})  
    