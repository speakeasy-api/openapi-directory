/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The association information for an Elastic IP address (IPv4) associated with the network interface.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceAssociation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allocationId?: string;

  @SpeakeasyMetadata()
  associationId?: string;

  @SpeakeasyMetadata()
  carrierIp?: string;

  @SpeakeasyMetadata()
  customerOwnedIp?: string;

  @SpeakeasyMetadata()
  ipOwnerId?: string;

  @SpeakeasyMetadata()
  publicDnsName?: string;

  @SpeakeasyMetadata()
  publicIp?: string;
}

/**
 * ENA Express configuration for UDP network traffic.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceAttachmentEnaSrdSpecificationEnaSrdUdpSpecification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enaSrdUdpEnabled?: boolean;
}

/**
 * Configures ENA Express for the network interface that this action attaches to the instance.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceAttachmentEnaSrdSpecification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  enaSrdEnabled?: boolean;

  @SpeakeasyMetadata()
  enaSrdUdpSpecification?: CreateNetworkInterfaceResultNetworkInterfaceAttachmentEnaSrdSpecificationEnaSrdUdpSpecification;
}

/**
 * The attachment state.
 */
export enum CreateNetworkInterfaceResultNetworkInterfaceAttachmentStatusEnum {
  Attaching = "attaching",
  Attached = "attached",
  Detaching = "detaching",
  Detached = "detached",
}

/**
 * The network interface attachment.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceAttachment extends SpeakeasyBase {
  @SpeakeasyMetadata()
  attachTime?: Date;

  @SpeakeasyMetadata()
  attachmentId?: string;

  @SpeakeasyMetadata()
  deleteOnTermination?: boolean;

  @SpeakeasyMetadata()
  deviceIndex?: number;

  @SpeakeasyMetadata()
  enaSrdSpecification?: CreateNetworkInterfaceResultNetworkInterfaceAttachmentEnaSrdSpecification;

  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  instanceOwnerId?: string;

  @SpeakeasyMetadata()
  networkCardIndex?: number;

  @SpeakeasyMetadata()
  status?: CreateNetworkInterfaceResultNetworkInterfaceAttachmentStatusEnum;
}

/**
 * Describes a security group.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceGroups extends SpeakeasyBase {
  @SpeakeasyMetadata()
  groupId?: string;

  @SpeakeasyMetadata()
  groupName?: string;
}

/**
 * The type of network interface.
 */
export enum CreateNetworkInterfaceResultNetworkInterfaceInterfaceTypeEnum {
  Interface = "interface",
  NatGateway = "natGateway",
  Efa = "efa",
  Trunk = "trunk",
  LoadBalancer = "load_balancer",
  NetworkLoadBalancer = "network_load_balancer",
  VpcEndpoint = "vpc_endpoint",
  Branch = "branch",
  TransitGateway = "transit_gateway",
  Lambda = "lambda",
  Quicksight = "quicksight",
  GlobalAcceleratorManaged = "global_accelerator_managed",
  ApiGatewayManaged = "api_gateway_managed",
  GatewayLoadBalancer = "gateway_load_balancer",
  GatewayLoadBalancerEndpoint = "gateway_load_balancer_endpoint",
  IotRulesManaged = "iot_rules_managed",
  AwsCodestarConnectionsManaged = "aws_codestar_connections_managed",
}

/**
 * Describes an IPv4 prefix.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceIpv4Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv4Prefix?: string;
}

/**
 * Describes an IPv6 address associated with a network interface.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceIpv6Addresses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Address?: string;
}

/**
 * Describes the IPv6 prefix.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceIpv6Prefixes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  ipv6Prefix?: string;
}

/**
 * The association information for an Elastic IP address (IPv4) associated with the network interface.
 */
export class CreateNetworkInterfaceResultNetworkInterfacePrivateIpAddressesAssociation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allocationId?: string;

  @SpeakeasyMetadata()
  associationId?: string;

  @SpeakeasyMetadata()
  carrierIp?: string;

  @SpeakeasyMetadata()
  customerOwnedIp?: string;

  @SpeakeasyMetadata()
  ipOwnerId?: string;

  @SpeakeasyMetadata()
  publicDnsName?: string;

  @SpeakeasyMetadata()
  publicIp?: string;
}

/**
 * Describes the private IPv4 address of a network interface.
 */
export class CreateNetworkInterfaceResultNetworkInterfacePrivateIpAddresses extends SpeakeasyBase {
  @SpeakeasyMetadata()
  association?: CreateNetworkInterfaceResultNetworkInterfacePrivateIpAddressesAssociation;

  @SpeakeasyMetadata()
  primary?: boolean;

  @SpeakeasyMetadata()
  privateDnsName?: string;

  @SpeakeasyMetadata()
  privateIpAddress?: string;
}

/**
 * The status of the network interface.
 */
export enum CreateNetworkInterfaceResultNetworkInterfaceStatusEnum {
  Available = "available",
  Associated = "associated",
  Attaching = "attaching",
  InUse = "in-use",
  Detaching = "detaching",
}

/**
 * Describes a tag.
 */
export class CreateNetworkInterfaceResultNetworkInterfaceTagSet extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the network interface.
 */
export class CreateNetworkInterfaceResultNetworkInterface extends SpeakeasyBase {
  @SpeakeasyMetadata()
  association?: CreateNetworkInterfaceResultNetworkInterfaceAssociation;

  @SpeakeasyMetadata()
  attachment?: CreateNetworkInterfaceResultNetworkInterfaceAttachment;

  @SpeakeasyMetadata()
  availabilityZone?: string;

  @SpeakeasyMetadata()
  denyAllIgwTraffic?: boolean;

  @SpeakeasyMetadata()
  description?: string;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfaceGroups,
  })
  groups?: CreateNetworkInterfaceResultNetworkInterfaceGroups[];

  @SpeakeasyMetadata()
  interfaceType?: CreateNetworkInterfaceResultNetworkInterfaceInterfaceTypeEnum;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfaceIpv4Prefixes,
  })
  ipv4Prefixes?: CreateNetworkInterfaceResultNetworkInterfaceIpv4Prefixes[];

  @SpeakeasyMetadata()
  ipv6Address?: string;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfaceIpv6Addresses,
  })
  ipv6Addresses?: CreateNetworkInterfaceResultNetworkInterfaceIpv6Addresses[];

  @SpeakeasyMetadata()
  ipv6Native?: boolean;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfaceIpv6Prefixes,
  })
  ipv6Prefixes?: CreateNetworkInterfaceResultNetworkInterfaceIpv6Prefixes[];

  @SpeakeasyMetadata()
  macAddress?: string;

  @SpeakeasyMetadata()
  networkInterfaceId?: string;

  @SpeakeasyMetadata()
  outpostArn?: string;

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata()
  privateDnsName?: string;

  @SpeakeasyMetadata()
  privateIpAddress?: string;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfacePrivateIpAddresses,
  })
  privateIpAddresses?: CreateNetworkInterfaceResultNetworkInterfacePrivateIpAddresses[];

  @SpeakeasyMetadata()
  requesterId?: string;

  @SpeakeasyMetadata()
  requesterManaged?: boolean;

  @SpeakeasyMetadata()
  sourceDestCheck?: boolean;

  @SpeakeasyMetadata()
  status?: CreateNetworkInterfaceResultNetworkInterfaceStatusEnum;

  @SpeakeasyMetadata()
  subnetId?: string;

  @SpeakeasyMetadata({
    elemType: CreateNetworkInterfaceResultNetworkInterfaceTagSet,
  })
  tagSet?: CreateNetworkInterfaceResultNetworkInterfaceTagSet[];

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Success
 */
export class CreateNetworkInterfaceResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  clientToken?: string;

  @SpeakeasyMetadata()
  networkInterface?: CreateNetworkInterfaceResultNetworkInterface;
}
