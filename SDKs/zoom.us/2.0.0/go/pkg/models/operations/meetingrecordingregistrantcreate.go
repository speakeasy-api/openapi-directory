// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type MeetingRecordingRegistrantCreateSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type MeetingRecordingRegistrantCreatePathParams struct {
	// The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
	//
	// While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
	MeetingID int64 `pathParam:"style=simple,explode=false,name=meetingId"`
}

// MeetingRecordingRegistrantCreateApplicationJSONCustomQuestions - Custom Question.
type MeetingRecordingRegistrantCreateApplicationJSONCustomQuestions struct {
	Title *string `json:"title,omitempty"`
	Value *string `json:"value,omitempty"`
}

// MeetingRecordingRegistrantCreateApplicationJSON - Registrant base object.
type MeetingRecordingRegistrantCreateApplicationJSON struct {
	// Registrant's address.
	Address *string `json:"address,omitempty"`
	// Registrant's city.
	City *string `json:"city,omitempty"`
	// A field that allows registrants to provide any questions or comments that they might have.
	Comments *string `json:"comments,omitempty"`
	// Registrant's country. The value of this field must be in two-letter abbreviated form and must match the ID field provided in the [Countries](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries) table.
	Country *string `json:"country,omitempty"`
	// Custom questions.
	CustomQuestions []MeetingRecordingRegistrantCreateApplicationJSONCustomQuestions `json:"custom_questions,omitempty"`
	// A valid email address of the registrant.
	Email string `json:"email"`
	// Registrant's first name.
	FirstName string `json:"first_name"`
	// Registrant's Industry.
	Industry *string `json:"industry,omitempty"`
	// Registrant's job title.
	JobTitle *string `json:"job_title,omitempty"`
	// Registrant's last name.
	LastName *string `json:"last_name,omitempty"`
	// Number of Employees:<br>`1-20`<br>`21-50`<br>`51-100`<br>`101-500`<br>`500-1,000`<br>`1,001-5,000`<br>`5,001-10,000`<br>`More than 10,000`
	NoOfEmployees *string `json:"no_of_employees,omitempty"`
	// Registrant's Organization.
	Org *string `json:"org,omitempty"`
	// Registrant's Phone number.
	Phone *string `json:"phone,omitempty"`
	// This field can be included to gauge interest of webinar attendees towards buying your product or service.
	//
	// Purchasing Time Frame:<br>`Within a month`<br>`1-3 months`<br>`4-6 months`<br>`More than 6 months`<br>`No timeframe`
	PurchasingTimeFrame *string `json:"purchasing_time_frame,omitempty"`
	// Role in Purchase Process:<br>`Decision Maker`<br>`Evaluator/Recommender`<br>`Influencer`<br>`Not involved`
	RoleInPurchaseProcess *string `json:"role_in_purchase_process,omitempty"`
	// Registrant's State/Province.
	State *string `json:"state,omitempty"`
	// Registrant's Zip/Postal Code.
	Zip *string `json:"zip,omitempty"`
}

type MeetingRecordingRegistrantCreateRequest struct {
	PathParams MeetingRecordingRegistrantCreatePathParams
	Request    MeetingRecordingRegistrantCreateApplicationJSON `request:"mediaType=application/json"`
	Security   MeetingRecordingRegistrantCreateSecurity
}

// MeetingRecordingRegistrantCreate201ApplicationXML - **HTTP Status Code:** `201` <br>
// Registration submitted.
type MeetingRecordingRegistrantCreate201ApplicationXML struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64
	// Registrant ID
	RegistrantID *string
	// Share URL for the on-demand recording. This includes the “tk” token for the registrant. This is similar to the token that Zoom returns in the URL response to join a registered meeting, for example: `url?tk=xxxx`. Except while the meeting registration token can be used to join the meeting, this token can only be used to watch the recording.
	ShareURL *string
	// Meeting Topic
	Topic *string
}

// MeetingRecordingRegistrantCreate201ApplicationJSON - **HTTP Status Code:** `201` <br>
// Registration submitted.
type MeetingRecordingRegistrantCreate201ApplicationJSON struct {
	// [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
	ID *int64 `json:"id,omitempty"`
	// Registrant ID
	RegistrantID *string `json:"registrant_id,omitempty"`
	// Share URL for the on-demand recording. This includes the “tk” token for the registrant. This is similar to the token that Zoom returns in the URL response to join a registered meeting, for example: `url?tk=xxxx`. Except while the meeting registration token can be used to join the meeting, this token can only be used to watch the recording.
	ShareURL *string `json:"share_url,omitempty"`
	// Meeting Topic
	Topic *string `json:"topic,omitempty"`
}

type MeetingRecordingRegistrantCreateResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `201` <br>
	// Registration submitted.
	MeetingRecordingRegistrantCreate201ApplicationJSONObject *MeetingRecordingRegistrantCreate201ApplicationJSON
}
