// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type MeteringGetQueryParams struct {
	// Account/Address (Stromkonto) to retrieve reading for.
	Account *string `queryParam:"style=form,explode=true,name=account"`
}

type MeteringGetRequest struct {
	QueryParams MeteringGetQueryParams
}

// MeteringGet200ApplicationJSON - Success
type MeteringGet200ApplicationJSON struct {
	// Reading as provided as input in Wh
	One80 *int64 `json:"1.8.0,omitempty"`
	// Green energy calculated using Green Power Index (GrünstromIndex) in Wh
	One81 *int64 `json:"1.8.1,omitempty"`
	// Grey energy calculated using Green Power Index (GrünstromIndex) in Wh
	One82 *int64 `json:"1.8.2,omitempty"`
	// Time this reading got imported into consensus (e.q. signed timestamp).
	ProcessingTime *int64 `json:"_processingTime,omitempty"`
	// Stromkonto/Metering address allocated (this is not the MELOID!)
	Account *string `json:"account,omitempty"`
	// CO2 Emission of metered energy in a green energy mix (e.q. Ökostromtarif)
	Co2GOekostrom *int64 `json:"co2_g_oekostrom,omitempty"`
	// CO2 Emission of metered energy in a standard mix
	Co2GStandard *int64 `json:"co2_g_standard,omitempty"`
	// Update credits this meter has. Gets refilled automtically to prevent too frequent updates
	Credits interface{} `json:"credits,omitempty"`
	// API Consensus time this reading was fully received
	TimeStamp *int64 `json:"timeStamp,omitempty"`
	// Time to Live for this reader. If no update is provided it gets decommissioned.
	TTL *int64 `json:"ttl,omitempty"`
}

type MeteringGetResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	MeteringGet200ApplicationJSONObject *MeteringGet200ApplicationJSON
}
