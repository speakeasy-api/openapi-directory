"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Networks:
    r"""Networks is a private networks feature. These Networks are optional and they coexist with the public network that every Server has by default.
    
    They allow Servers to talk to each other over a dedicated network interface using private IP addresses not available publicly.
    
    The IP addresses are allocated and managed via the API, they must conform to [RFC1918](https://tools.ietf.org/html/rfc1918#section-3) standard. IPs and network interfaces defined under Networks do not provide public internet connectivity, you will need to use the already existing public network interface for that.
    
    Each network has a user selected `ip_range` which defines all available IP addresses which can be used for Subnets within the Network.
    
    To assign individual IPs to Servers you will need to create Network Subnets, described below.
    
    Currently Networks support IPv4 only.
    
    ### Subnets
    Subnets divide the `ip_range` from the parent Network object into multiple Subnetworks that you can use for different specific purposes.
    
    For each subnet you need to specify its own `ip_range` which must be contained within the parent Network’s `ip_range`. Additionally each subnet must belong to one of the available Network Zones described below. Subnets can not have overlapping IP ranges.
    
    Currently there are three types of subnet:
    * type `cloud` is used to connect cloud Resources into your Network.
    * type `server` was used to connect only cloud Servers into your Network. This type is deprecated and is replaced by type cloud.
    * type `vswitch` allows you to connect [Dedicated Server vSwitch](https://docs.hetzner.com/robot/dedicated-server/network/vswitch) - and all Dedicated Servers attached to it - into your Network
    
    Subnets of type `vswitch` must set a `vswitch_id` which is the ID of the existing vSwitch in Hetzner Robot that should be coupled.
    
    ### Network Zones
    Network Zones are groups of Locations which have special high-speed network connections between them. The [Location object](https://docs.hetzner.cloud/#locations-get-a-location) contains the `network_zone` property each Location belongs to. Currently these network zones exist:
    
    |Network Zone|Contains Locations|
    |------------|------------------|
    |eu-central  | nbg1, fsn1, hel1 |
    |us-east     | ash              |
    
    ### IP address management
    When a cloud Server is attached to a network without the user specifying an IP it automatically gets an IP address assigned from a subnet of type `server` in the same network zone. If you specify the optional `ip` parameter when attaching then we will try to assign that IP. Keep in mind that the Server’s location must be covered by the Subnet’s Network Zone if you specify an IP, or that at least one Subnet with the zone covering Server’s location must exist.
    
    A cloud Server can also have more than one IP address in a Network by specifying aliases. For details see the [attach to network action](https://docs.hetzner.cloud/#server-actions-attach-a-server-to-a-network).
    
    The following IP addresses are reserved in networks and can not be used:
      * the first IP of the network `ip_range` as it will be used as a default gateway for the private Network interface.
      * `172.31.1.1` as it is being used as default gateway for our public Network interfaces.
    
    ### Coupling Dedicated Servers
    
    By using subnets of type `vswitch` you can couple the Cloud Networks with an existing [Dedicated Server vSwitch](https://docs.hetzner.com/robot/dedicated-server/network/vswitch) and enable dedicated and cloud servers to
    talk to each other over the Network.
    In order for this to work the dedicated servers may only use IPs from the subnet and must have a special network configuration. Please refer to [FAQ](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch). vSwitch Layer 2 features are not supported.
    
    ### Routes
    Networks also support the notion of routes which are automatically applied to private traffic. A route makes sure that all packets for a given `destination` IP prefix will be sent to the address specified in its `gateway`.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_networks_id_(self, request: operations.DeleteNetworksIDRequest) -> operations.DeleteNetworksIDResponse:
        r"""Delete a Network
        Deletes a network. If there are Servers attached they will be detached in the background.
        
        Note: if the network object changes during the request, the response will be a “conflict” error.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNetworksIDRequest, base_url, '/networks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNetworksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_networks(self, request: operations.GetNetworksRequest) -> operations.GetNetworksResponse:
        r"""Get all Networks
        Gets all existing networks that you have available.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/networks'
        
        query_params = utils.get_query_params(operations.GetNetworksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworks200ApplicationJSON])
                res.get_networks_200_application_json_object = out

        return res

    def get_networks_id_(self, request: operations.GetNetworksIDRequest) -> operations.GetNetworksIDResponse:
        r"""Get a Network
        Gets a specific network object.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNetworksIDRequest, base_url, '/networks/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNetworksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetNetworksID200ApplicationJSON])
                res.get_networks_id_200_application_json_object = out

        return res

    def post_networks(self, request: operations.PostNetworksCreateNetworkRequest) -> operations.PostNetworksResponse:
        r"""Create a Network
        Creates a network with the specified `ip_range`.
        
        You may specify one or more `subnets`. You can also add more Subnets later by using the [add subnet action](https://docs.hetzner.cloud/#network-actions-add-a-subnet-to-a-network). If you do not specify an `ip_range` in the subnet we will automatically pick the first available /24 range for you.
        
        You may specify one or more routes in `routes`. You can also add more routes later by using the [add route action](https://docs.hetzner.cloud/#network-actions-add-a-route-to-a-network).
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/networks'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNetworksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostNetworks201ApplicationJSON])
                res.post_networks_201_application_json_object = out

        return res

    def put_networks_id_(self, request: operations.PutNetworksIDRequest) -> operations.PutNetworksIDResponse:
        r"""Update a Network
        Updates the network properties.
        
        Note that when updating labels, the network’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.
        
        Note: if the network object changes during the request, the response will be a “conflict” error.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutNetworksIDRequest, base_url, '/networks/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutNetworksIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PutNetworksID200ApplicationJSON])
                res.put_networks_id_200_application_json_object = out

        return res

    