"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetPotPaymentsSecurity:
    
    api_secret_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'x-api-key' }})  
    

@dataclasses.dataclass
class GetPotPaymentsRequest:
    
    pot_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'pot_id', 'style': 'simple', 'explode': False }})
    r"""Pot Id"""  
    x_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'x-api-key', 'style': 'simple', 'explode': False }})
    r"""ApiSecretKey"""  
    page_number: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_number', 'style': 'form', 'explode': True }})
    r"""Page number for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    page_size: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""Page size for the query. This end-point has paginations capabilities. This value should be a positive integer value. If this is not provided, both page_size and page_number will be defaulted to 1000 and 1. Results are sorted decending order of the created date & time."""  
    payment_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'payment_type', 'style': 'form', 'explode': True }})
    r"""Payment type of the payment to be retrieved from the API (electronic_fund_transfer, card)"""  
    purpose: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'purpose', 'style': 'form', 'explode': True }})
    r"""Purpose of the payment to be retrieved from the API (cash, invest)"""  
    service_provider: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'service_provider', 'style': 'form', 'explode': True }})
    r"""Service provider of the payment to be retrieved from the API (truelayer, stripe, none)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments500ApplicationJSON:
    r"""System error. Retry later. If the error persist, contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments429ApplicationJSON:
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments404ApplicationJSON:
    r"""The specified resource was not found"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments403ApplicationJSON:
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments401ApplicationJSON:
    r"""You do not have permissions to access this resource."""
    
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Human readable description of the error"""  
    error_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error_code'), 'exclude': lambda f: f is None }})
    r"""Optional error code"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions:
    
    investment_product_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_product_id') }})  
    quantity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25)."""  
    
class GetPotPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum(str, Enum):
    CARD = 'card'
    ELECTRONIC_FUND_TRANSFER = 'electronic_fund_transfer'

class GetPotPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum(str, Enum):
    CASH = 'cash'
    INVEST = 'invest'

class GetPotPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum(str, Enum):
    STRIPE = 'stripe'
    TRUELAYER = 'truelayer'
    NONE = 'none'

class GetPotPayments200ApplicationJSONRootTypeForPaymentsStatusEnum(str, Enum):
    r"""Status of the payment
    
    - `pending_confirmation`: Payment is pending approvals and confirmation
    - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
    - `succeeded`: Payment is successful. Cash is cleaned in account. 
    - `cancelled`: Payment cancelled, and any held funds have been returned. 
    - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
    """
    PENDING_CONFIRMATION = 'pending_confirmation'
    PROCESSING = 'processing'
    SUCCEEDED = 'succeeded'
    CANCELLED = 'cancelled'
    FAILED = 'failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments200ApplicationJSONRootTypeForPayments:
    
    amount: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})  
    payment_type: GetPotPayments200ApplicationJSONRootTypeForPaymentsPaymentTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type') }})  
    purpose: GetPotPayments200ApplicationJSONRootTypeForPaymentsPurposeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('purpose') }})  
    service_provider: GetPotPayments200ApplicationJSONRootTypeForPaymentsServiceProviderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('service_provider') }})  
    status: GetPotPayments200ApplicationJSONRootTypeForPaymentsStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the payment
    
    - `pending_confirmation`: Payment is pending approvals and confirmation
    - `processing`: Payment is confirmed, and being processed. Depending on the payment method, this may be instantaneous (e.g. card) or take multiple days (e.g. cheque) 
    - `succeeded`: Payment is successful. Cash is cleaned in account. 
    - `cancelled`: Payment cancelled, and any held funds have been returned. 
    - `failed`: Payment failed due to insufficient funds, invalid card details, network issues etc.
    """  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})  
    investment_instructions: Optional[list[GetPotPayments200ApplicationJSONRootTypeForPaymentsInvestmentInstructions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('investment_instructions'), 'exclude': lambda f: f is None }})
    r"""mandatory only if purpose:\\"invest\\" and pot does not have a portfolio template attached (e.g. An execution-only or direct-to-consumer wealth manager)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPotPayments200ApplicationJSON:
    r"""success"""
    
    next_page_available: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_available') }})
    r"""This indicates the availability of the next page"""  
    payments: list[GetPotPayments200ApplicationJSONRootTypeForPayments] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payments') }})  
    pot_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pot_id') }})  
    

@dataclasses.dataclass
class GetPotPaymentsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_pot_payments_200_application_json_object: Optional[GetPotPayments200ApplicationJSON] = dataclasses.field(default=None)
    r"""success"""  
    get_pot_payments_401_application_json_object: Optional[GetPotPayments401ApplicationJSON] = dataclasses.field(default=None)
    r"""You do not have permissions to access this resource."""  
    get_pot_payments_403_application_json_object: Optional[GetPotPayments403ApplicationJSON] = dataclasses.field(default=None)
    r"""Your authentication information is missing or invalid. Please check the keys are properly set and its correct"""  
    get_pot_payments_404_application_json_object: Optional[GetPotPayments404ApplicationJSON] = dataclasses.field(default=None)
    r"""The specified resource was not found"""  
    get_pot_payments_429_application_json_object: Optional[GetPotPayments429ApplicationJSON] = dataclasses.field(default=None)
    r"""You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support"""  
    get_pot_payments_500_application_json_object: Optional[GetPotPayments500ApplicationJSON] = dataclasses.field(default=None)
    r"""System error. Retry later. If the error persist, contact WOS support"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    