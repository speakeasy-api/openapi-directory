/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ParagraphElement - A ParagraphElement describes content within a Paragraph.
 */
public class ParagraphElement {
    /**
     * A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autoText")
    public AutoText autoText;

    public ParagraphElement withAutoText(AutoText autoText) {
        this.autoText = autoText;
        return this;
    }
    
    /**
     * A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columnBreak")
    public ColumnBreak columnBreak;

    public ParagraphElement withColumnBreak(ColumnBreak columnBreak) {
        this.columnBreak = columnBreak;
        return this;
    }
    
    /**
     * The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endIndex")
    public Integer endIndex;

    public ParagraphElement withEndIndex(Integer endIndex) {
        this.endIndex = endIndex;
        return this;
    }
    
    /**
     * A ParagraphElement representing an equation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("equation")
    public Equation equation;

    public ParagraphElement withEquation(Equation equation) {
        this.equation = equation;
        return this;
    }
    
    /**
     * A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("footnoteReference")
    public FootnoteReference footnoteReference;

    public ParagraphElement withFootnoteReference(FootnoteReference footnoteReference) {
        this.footnoteReference = footnoteReference;
        return this;
    }
    
    /**
     * A ParagraphElement representing a horizontal line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("horizontalRule")
    public HorizontalRule horizontalRule;

    public ParagraphElement withHorizontalRule(HorizontalRule horizontalRule) {
        this.horizontalRule = horizontalRule;
        return this;
    }
    
    /**
     * A ParagraphElement that contains an InlineObject.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inlineObjectElement")
    public InlineObjectElement inlineObjectElement;

    public ParagraphElement withInlineObjectElement(InlineObjectElement inlineObjectElement) {
        this.inlineObjectElement = inlineObjectElement;
        return this;
    }
    
    /**
     * A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageBreak")
    public PageBreak pageBreak;

    public ParagraphElement withPageBreak(PageBreak pageBreak) {
        this.pageBreak = pageBreak;
        return this;
    }
    
    /**
     * A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("person")
    public Person person;

    public ParagraphElement withPerson(Person person) {
        this.person = person;
        return this;
    }
    
    /**
     * A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("richLink")
    public RichLink richLink;

    public ParagraphElement withRichLink(RichLink richLink) {
        this.richLink = richLink;
        return this;
    }
    
    /**
     * The zero-based start index of this paragraph element, in UTF-16 code units.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startIndex")
    public Integer startIndex;

    public ParagraphElement withStartIndex(Integer startIndex) {
        this.startIndex = startIndex;
        return this;
    }
    
    /**
     * A ParagraphElement that represents a run of text that all has the same styling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("textRun")
    public TextRun textRun;

    public ParagraphElement withTextRun(TextRun textRun) {
        this.textRun = textRun;
        return this;
    }
    
    public ParagraphElement(){}
}
