"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .dispatch_green_energy_distribution_api_ import DispatchGreenEnergyDistributionAPI
from .easee import Easee
from .greenpowerindex_grunstromindex_ import GreenPowerIndexGrunstromIndex
from .metering_decorator_ import MeteringDecorator
from .ocpp import Ocpp
from .openmeter import OpenMETER
from .smarthome import SmartHome
from .strom_quittung import StromQuittung
from .stromkonto_ledger_ import StromkontoLedger
from .tariff_price_api_ import TariffPriceAPI
from .tse import Tse
from .wim_wechselprozesse_im_messwesen_strom_status_api_ import WiMWechselprozesseImMesswesenStromStatusAPI

SERVERS = [
    "https://api.corrently.io/v2.0",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""*Corrently - from italian corrente, which is energy*
    # Introduction
    The Corrently ecosystem gets maintained by [STROMDAO GmbH](https://www.stromdao.de/) to support green energy services for prosumers, grid operators, regulators, integrators or any other party with an emerging need of consensus driven management.
    As the [energy product Corrently](https://www.corrently.de/) got first launched in Germany parts of this documentation provide simple translations for better understanding.
    [Released SKDs for Download](https://github.com/energychain/corrently-api/releases)
    """
    dispatch_green_energy_distribution_api: DispatchGreenEnergyDistributionAPI
    r"""Provides latest dispatch information of green energy at a specific location in Germany (Herkunft/GrünstromMix). It allows to do schedule management (Fahrplanmanagement) of green energy generation facilities, demand and resilience management for grid operators. The public version (OpenAPI) is always post fact. If you are interessted in pre fact (forecast) data, you might get in contact with STROMDAO GmbH."""
    green_power_index_grunstrom_index: GreenPowerIndexGrunstromIndex
    r"""Green Power Index (GrünstromIndex), an AI based service to forecast energy sources in the grid (regionale Stromherkunft).
    Further Details and sample implementation is available at [gruenstromindex.de](https://www.gruenstromindex.de/).
    """
    metering_decorator: MeteringDecorator
    r"""Allows to virtualy act as an Meter Point Operator by decorating meter readings with GreenPowerIndex (GrünstromIndex) handles. In principal this service decorates meter [OBIS Code](https://de.wikipedia.org/wiki/OBIS-Kennzahlen) 1.8.0 values to 1.8.1 and 1.8.2 according to the local and actual GSI value. A signature gets applied to the reading and all three OBIS values get hashed into the Energychain for consensus (e.q. creating balancing groups). CO2 footprint of a meter gets provided (as of first reading pushed).This works in conjunction with German Smart Meter Gateways (as of March 2020)."""
    ocpp: Ocpp
    r"""Alternative access to Corrently OCPP Data (hosted cloud backend)."""
    open_meter: OpenMETER
    r"""Alternative access to OpenMeter Data."""
    smart_home: SmartHome
    r"""Helper services and endpoints for smarthome and home automation systems."""
    strom_quittung: StromQuittung
    r"""Self-Service to create a full receipt (Quittung) for energy delivery in case of submetering. Please refer to [Strom-Quittung](http://strom-quittung.de) for a sample usage."""
    stromkonto_ledger: StromkontoLedger
    r"""Managing accounts and balances for market partners (eq. households, grid operators, traders,..) Stromkonto is based on distributed ledger technology (AKA Blockchain). Instead of using the REST Api to access any energy ledger, you might act as a blockchain node and use the published ABI definitions to get the same results and/or run transactions directly."""
    tse: Tse
    r"""Technische Sicherheitseinrichtung - use in context of strom-quittungen to get digitaly signed receipts."""
    tariff_price_api: TariffPriceAPI
    r"""Tariff information for the German market region. Provides base price and energy price information for private households (Standardlastprofil H0, SLP H0 Tarifinformation)."""
    wi_m_wechselprozesse_im_messwesen_strom_status_api: WiMWechselprozesseImMesswesenStromStatusAPI
    r"""Access to status information of an existing metering change and allocation process."""
    easee: Easee
    r"""Alternative access to EASEE.cloud Data."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.dispatch_green_energy_distribution_api = DispatchGreenEnergyDistributionAPI(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.green_power_index_grunstrom_index = GreenPowerIndexGrunstromIndex(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.metering_decorator = MeteringDecorator(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.ocpp = Ocpp(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.open_meter = OpenMETER(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.smart_home = SmartHome(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.strom_quittung = StromQuittung(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.stromkonto_ledger = StromkontoLedger(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tse = Tse(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.tariff_price_api = TariffPriceAPI(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.wi_m_wechselprozesse_im_messwesen_strom_status_api = WiMWechselprozesseImMesswesenStromStatusAPI(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.easee = Easee(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    