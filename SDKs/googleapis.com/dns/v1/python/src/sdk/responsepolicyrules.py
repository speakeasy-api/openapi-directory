"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ResponsePolicyRules:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dns_response_policy_rules_create(self, request: operations.DNSResponsePolicyRulesCreateRequest, security: operations.DNSResponsePolicyRulesCreateSecurity) -> operations.DNSResponsePolicyRulesCreateResponse:
        r"""Creates a new Response Policy Rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesCreateRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy_rule", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicyRule])
                res.response_policy_rule = out

        return res

    def dns_response_policy_rules_delete(self, request: operations.DNSResponsePolicyRulesDeleteRequest, security: operations.DNSResponsePolicyRulesDeleteSecurity) -> operations.DNSResponsePolicyRulesDeleteResponse:
        r"""Deletes a previously created Response Policy Rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesDeleteRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dns_response_policy_rules_get(self, request: operations.DNSResponsePolicyRulesGetRequest, security: operations.DNSResponsePolicyRulesGetSecurity) -> operations.DNSResponsePolicyRulesGetResponse:
        r"""Fetches the representation of an existing Response Policy Rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesGetRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicyRule])
                res.response_policy_rule = out

        return res

    def dns_response_policy_rules_list(self, request: operations.DNSResponsePolicyRulesListRequest, security: operations.DNSResponsePolicyRulesListSecurity) -> operations.DNSResponsePolicyRulesListResponse:
        r"""Enumerates all Response Policy Rules associated with a project."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesListRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules', request)
        
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicyRulesListResponse])
                res.response_policy_rules_list_response = out

        return res

    def dns_response_policy_rules_patch(self, request: operations.DNSResponsePolicyRulesPatchRequest, security: operations.DNSResponsePolicyRulesPatchSecurity) -> operations.DNSResponsePolicyRulesPatchResponse:
        r"""Applies a partial update to an existing Response Policy Rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesPatchRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy_rule1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicyRulesPatchResponse])
                res.response_policy_rules_patch_response = out

        return res

    def dns_response_policy_rules_update(self, request: operations.DNSResponsePolicyRulesUpdateRequest, security: operations.DNSResponsePolicyRulesUpdateSecurity) -> operations.DNSResponsePolicyRulesUpdateResponse:
        r"""Updates an existing Response Policy Rule."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DNSResponsePolicyRulesUpdateRequest, base_url, '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "response_policy_rule1", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DNSResponsePolicyRulesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DNSResponsePolicyRulesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResponsePolicyRulesUpdateResponse])
                res.response_policy_rules_update_response = out

        return res

    