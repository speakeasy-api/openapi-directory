// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetAccountingSecurity struct {
	FdcAuth shared.SchemeFdcAuth `security:"scheme,type=oauth2"`
}

type GetAccountingHydrateEnum string

const (
	GetAccountingHydrateEnumItems GetAccountingHydrateEnum = "items"
)

func (e *GetAccountingHydrateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "items":
		*e = GetAccountingHydrateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccountingHydrateEnum: %s", s)
	}
}

type GetAccountingQueryParams struct {
	// Orders invoice date. Date-time in ISO 8601 format for selecting orders after, or at, the specified time
	FromDate string `queryParam:"style=form,explode=true,name=fromDate"`
	// Adds additional information to the response, uses a CSV format for multiple values.
	Hydrate []GetAccountingHydrateEnum `queryParam:"style=form,explode=true,name=hydrate"`
	// The numbers of items to return
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// A CSV of FDC order id, '123' or '1,2,3'
	OrderIds []int64 `queryParam:"style=form,explode=true,name=orderIds"`
	// A multiplier of the number of items (limit parameter) to skip before returning results
	Page *int64 `queryParam:"style=form,explode=true,name=page"`
	// Orders invoice date. Date-time in ISO 8601 format for selecting orders before, or at, the specified time
	ToDate string `queryParam:"style=form,explode=true,name=toDate"`
	// A CSV of warehouse id, '123' or '1,2,3'
	WarehouseIds []int64 `queryParam:"style=form,explode=false,name=warehouseIds"`
}

type GetAccountingRequest struct {
	QueryParams GetAccountingQueryParams
	Security    GetAccountingSecurity
}

type GetAccountingAccountingArrayV2AccountingV2Fees struct {
	Box         *float32 `json:"box,omitempty"`
	Envelope    *float32 `json:"envelope,omitempty"`
	Fulfillment *float32 `json:"fulfillment,omitempty"`
	Insert      *float32 `json:"insert,omitempty"`
	Kitting     *float32 `json:"kitting,omitempty"`
	Picking     *float32 `json:"picking,omitempty"`
	Postage     *float32 `json:"postage,omitempty"`
	Print       *float32 `json:"print,omitempty"`
	Total       *float32 `json:"total,omitempty"`
}

type GetAccountingAccountingArrayV2AccountingV2Items struct {
	ID        *int64  `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Quantity  *int64  `json:"quantity,omitempty"`
	WmsItemID *string `json:"wmsItemId,omitempty"`
}

type GetAccountingAccountingArrayV2AccountingV2Merchant struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the merchant
	Name *string `json:"name,omitempty"`
}

type GetAccountingAccountingArrayV2AccountingV2Order struct {
	// FDC order id
	ID *int64 `json:"id,omitempty"`
	// Date of the order when it was recorded by accounting.
	InvoiceDate *types.Date `json:"invoiceDate,omitempty"`
	// Merchant order id
	MerchantOrderID *int64 `json:"merchantOrderId,omitempty"`
	// Date of the order when it was initially received.
	RecordedDate *types.Date `json:"recordedDate,omitempty"`
}

type GetAccountingAccountingArrayV2AccountingV2Warehouse struct {
	ID *int64 `json:"id,omitempty"`
	// Name of the merchant
	ShortName *string `json:"shortName,omitempty"`
}

type GetAccountingAccountingArrayV2AccountingV2 struct {
	Fees *GetAccountingAccountingArrayV2AccountingV2Fees `json:"fees,omitempty"`
	// Total number of items accounted for
	ItemCount *int64                                               `json:"itemCount,omitempty"`
	Items     []GetAccountingAccountingArrayV2AccountingV2Items    `json:"items,omitempty"`
	Merchant  *GetAccountingAccountingArrayV2AccountingV2Merchant  `json:"merchant,omitempty"`
	Order     *GetAccountingAccountingArrayV2AccountingV2Order     `json:"order,omitempty"`
	Warehouse *GetAccountingAccountingArrayV2AccountingV2Warehouse `json:"warehouse,omitempty"`
}

type GetAccountingAccountingArrayV2MetaPaginationV2 struct {
	// Count of records returned in response, this will be equal to or less then the limit parameter
	Count *int64 `json:"count,omitempty"`
	// Current page of the response, this will match the page parameter
	CurrentPage *int64 `json:"currentPage,omitempty"`
	// Total number of records available to request
	Total *int64 `json:"total,omitempty"`
	// Total number of pages available to request
	TotalPages *int64 `json:"totalPages,omitempty"`
}

type GetAccountingAccountingArrayV2Meta struct {
	Pagination *GetAccountingAccountingArrayV2MetaPaginationV2 `json:"pagination,omitempty"`
}

// GetAccountingAccountingArrayV2 - Accounting
type GetAccountingAccountingArrayV2 struct {
	Data []GetAccountingAccountingArrayV2AccountingV2 `json:"data,omitempty"`
	Meta *GetAccountingAccountingArrayV2Meta          `json:"meta,omitempty"`
}

type GetAccountingResponse struct {
	// Accounting
	AccountingArrayV2 *GetAccountingAccountingArrayV2
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
