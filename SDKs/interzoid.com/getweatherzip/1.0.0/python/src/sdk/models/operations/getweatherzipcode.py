"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetweatherzipcodeRequest:
    
    license: str = dataclasses.field(metadata={'query_param': { 'field_name': 'license', 'style': 'form', 'explode': True }})
    r"""Your Interzoid license API key. Register at www.interzoid.com/register"""  
    zip: str = dataclasses.field(metadata={'query_param': { 'field_name': 'zip', 'style': 'form', 'explode': True }})
    r"""Zip code for weather information"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Getweatherzipcode200ApplicationJSON:
    r"""Current weather information for zip code"""
    
    city: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('City'), 'exclude': lambda f: f is None }})  
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Code'), 'exclude': lambda f: f is None }})  
    credits: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Credits'), 'exclude': lambda f: f is None }})  
    relative_humidity: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RelativeHumidity'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    temp_c: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TempC'), 'exclude': lambda f: f is None }})  
    temp_f: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TempF'), 'exclude': lambda f: f is None }})  
    visibility_miles: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VisibilityMiles'), 'exclude': lambda f: f is None }})  
    weather: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Weather'), 'exclude': lambda f: f is None }})  
    wind_dir: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindDir'), 'exclude': lambda f: f is None }})  
    wind_mph: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WindMPH'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetweatherzipcodeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    getweatherzipcode_200_application_json_object: Optional[Getweatherzipcode200ApplicationJSON] = dataclasses.field(default=None)
    r"""Current weather information for zip code"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    