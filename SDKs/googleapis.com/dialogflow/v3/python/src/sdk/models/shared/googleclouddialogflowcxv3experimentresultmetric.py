"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddialogflowcxv3experimentresultconfidenceinterval as shared_googleclouddialogflowcxv3experimentresultconfidenceinterval
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDialogflowCxV3ExperimentResultMetricCountTypeEnum(str, Enum):
    r"""Count-based metric type. Only one of type or count_type is specified in each Metric."""
    COUNT_TYPE_UNSPECIFIED = 'COUNT_TYPE_UNSPECIFIED'
    TOTAL_NO_MATCH_COUNT = 'TOTAL_NO_MATCH_COUNT'
    TOTAL_TURN_COUNT = 'TOTAL_TURN_COUNT'
    AVERAGE_TURN_COUNT = 'AVERAGE_TURN_COUNT'

class GoogleCloudDialogflowCxV3ExperimentResultMetricTypeEnum(str, Enum):
    r"""Ratio-based metric type. Only one of type or count_type is specified in each Metric."""
    METRIC_UNSPECIFIED = 'METRIC_UNSPECIFIED'
    CONTAINED_SESSION_NO_CALLBACK_RATE = 'CONTAINED_SESSION_NO_CALLBACK_RATE'
    LIVE_AGENT_HANDOFF_RATE = 'LIVE_AGENT_HANDOFF_RATE'
    CALLBACK_SESSION_RATE = 'CALLBACK_SESSION_RATE'
    ABANDONED_SESSION_RATE = 'ABANDONED_SESSION_RATE'
    SESSION_END_RATE = 'SESSION_END_RATE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowCxV3ExperimentResultMetric:
    r"""Metric and corresponding confidence intervals."""
    
    confidence_interval: Optional[shared_googleclouddialogflowcxv3experimentresultconfidenceinterval.GoogleCloudDialogflowCxV3ExperimentResultConfidenceInterval] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidenceInterval'), 'exclude': lambda f: f is None }})
    r"""A confidence interval is a range of possible values for the experiment objective you are trying to measure."""  
    count: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Count value of a metric."""  
    count_type: Optional[GoogleCloudDialogflowCxV3ExperimentResultMetricCountTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countType'), 'exclude': lambda f: f is None }})
    r"""Count-based metric type. Only one of type or count_type is specified in each Metric."""  
    ratio: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratio'), 'exclude': lambda f: f is None }})
    r"""Ratio value of a metric."""  
    type: Optional[GoogleCloudDialogflowCxV3ExperimentResultMetricTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Ratio-based metric type. Only one of type or count_type is specified in each Metric."""  
    