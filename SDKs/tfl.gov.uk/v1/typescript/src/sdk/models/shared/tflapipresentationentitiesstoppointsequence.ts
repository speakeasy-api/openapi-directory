/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TflApiPresentationEntitiesMatchedStop } from "./tflapipresentationentitiesmatchedstop";
import { Expose, Type } from "class-transformer";

export enum TflApiPresentationEntitiesStopPointSequenceServiceTypeEnum {
  Regular = "Regular",
  Night = "Night",
}

export class TflApiPresentationEntitiesStopPointSequence extends SpeakeasyBase {
  /**
   * The id of this branch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branchId" })
  branchId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lineId" })
  lineId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lineName" })
  lineName?: string;

  /**
   * The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be
   *
   * @remarks
   *             identical in the case of a looped route e.g. the Circle line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextBranchIds" })
  nextBranchIds?: number[];

  /**
   * The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be
   *
   * @remarks
   *             identical in the case of a looped route e.g. the Circle line.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prevBranchIds" })
  prevBranchIds?: number[];

  @SpeakeasyMetadata()
  @Expose({ name: "serviceType" })
  serviceType?: TflApiPresentationEntitiesStopPointSequenceServiceTypeEnum;

  @SpeakeasyMetadata({ elemType: TflApiPresentationEntitiesMatchedStop })
  @Expose({ name: "stopPoint" })
  @Type(() => TflApiPresentationEntitiesMatchedStop)
  stopPoint?: TflApiPresentationEntitiesMatchedStop[];
}
