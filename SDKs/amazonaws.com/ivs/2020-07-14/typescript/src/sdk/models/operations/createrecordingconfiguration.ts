/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A complex type that describes a location where recorded videos will be stored. Each member represents a type of destination configuration. For recording, you define one and only one type of destination configuration.
 */
export class CreateRecordingConfigurationRequestBodyDestinationConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "s3" })
  @Type(() => shared.S3DestinationConfiguration)
  s3?: shared.S3DestinationConfiguration;
}

/**
 * An object representing a configuration of thumbnails for recorded video.
 */
export class CreateRecordingConfigurationRequestBodyThumbnailConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "recordingMode" })
  recordingMode?: shared.RecordingModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "targetIntervalSeconds" })
  targetIntervalSeconds?: number;
}

export class CreateRecordingConfigurationRequestBody extends SpeakeasyBase {
  /**
   * A complex type that describes a location where recorded videos will be stored. Each member represents a type of destination configuration. For recording, you define one and only one type of destination configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationConfiguration" })
  @Type(() => CreateRecordingConfigurationRequestBodyDestinationConfiguration)
  destinationConfiguration: CreateRecordingConfigurationRequestBodyDestinationConfiguration;

  /**
   * Recording-configuration name. The value does not need to be unique.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * If a broadcast disconnects and then reconnects within the specified interval, the multiple streams will be considered a single broadcast and merged together. Default: 0.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recordingReconnectWindowSeconds" })
  recordingReconnectWindowSeconds?: number;

  /**
   * Array of 1-50 maps, each of the form <code>string:string (key:value)</code>. See <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services Resources</a> for more information, including restrictions that apply to tags and "Tag naming limits and requirements"; Amazon IVS has no service-specific constraints beyond what is documented there.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  /**
   * An object representing a configuration of thumbnails for recorded video.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumbnailConfiguration" })
  @Type(() => CreateRecordingConfigurationRequestBodyThumbnailConfiguration)
  thumbnailConfiguration?: CreateRecordingConfigurationRequestBodyThumbnailConfiguration;
}

export class CreateRecordingConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateRecordingConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateRecordingConfigurationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createRecordingConfigurationResponse?: shared.CreateRecordingConfigurationResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * PendingVerification
   */
  @SpeakeasyMetadata()
  pendingVerification?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
