"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import exchangeconfig as shared_exchangeconfig
from ..shared import partneradserverconfig as shared_partneradserverconfig
from ..shared import partnerdataaccessconfig as shared_partnerdataaccessconfig
from ..shared import partnergeneralconfig as shared_partnergeneralconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PartnerEntityStatusEnum(str, Enum):
    r"""Output only. The status of the partner."""
    ENTITY_STATUS_UNSPECIFIED = 'ENTITY_STATUS_UNSPECIFIED'
    ENTITY_STATUS_ACTIVE = 'ENTITY_STATUS_ACTIVE'
    ENTITY_STATUS_ARCHIVED = 'ENTITY_STATUS_ARCHIVED'
    ENTITY_STATUS_DRAFT = 'ENTITY_STATUS_DRAFT'
    ENTITY_STATUS_PAUSED = 'ENTITY_STATUS_PAUSED'
    ENTITY_STATUS_SCHEDULED_FOR_DELETION = 'ENTITY_STATUS_SCHEDULED_FOR_DELETION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Partner:
    r"""A single partner in Display & Video 360 (DV360)."""
    
    ad_server_config: Optional[shared_partneradserverconfig.PartnerAdServerConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adServerConfig'), 'exclude': lambda f: f is None }})
    r"""Ad server related settings of a partner."""  
    data_access_config: Optional[shared_partnerdataaccessconfig.PartnerDataAccessConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataAccessConfig'), 'exclude': lambda f: f is None }})
    r"""Settings that control how partner related data may be accessed."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes."""  
    entity_status: Optional[PartnerEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entityStatus'), 'exclude': lambda f: f is None }})
    r"""Output only. The status of the partner."""  
    exchange_config: Optional[shared_exchangeconfig.ExchangeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeConfig'), 'exclude': lambda f: f is None }})
    r"""Settings that control which exchanges are enabled for a partner."""  
    general_config: Optional[shared_partnergeneralconfig.PartnerGeneralConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('generalConfig'), 'exclude': lambda f: f is None }})
    r"""General settings of a partner."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the partner."""  
    partner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('partnerId'), 'exclude': lambda f: f is None }})
    r"""Output only. The unique ID of the partner. Assigned by the system."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the partner was last updated. Assigned by the system."""  
    