// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type AnalyticsEventPropertiesSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type AnalyticsEventPropertiesRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The id of the event.
	EventName string `pathParam:"style=simple,explode=false,name=event_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum - The status code return by the API. It can be 400 or 403 or 500.
type AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum int64

const (
	AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnumFourHundred         AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum = 400
	AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnumFourHundredAndThree AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum = 403
	AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnumFiveHundred         AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum = 500
)

func (e AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum) ToPointer() *AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 403:
		fallthrough
	case 500:
		*e = AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type AnalyticsEventPropertiesDefaultApplicationJSONError struct {
	// The status code return by the API. It can be 400 or 403 or 500.
	Code *AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum `json:"code,omitempty"`
	// The reason for the request failed.
	Message *string `json:"message,omitempty"`
}

// AnalyticsEventPropertiesDefaultApplicationJSON - Error
type AnalyticsEventPropertiesDefaultApplicationJSON struct {
	Error *AnalyticsEventPropertiesDefaultApplicationJSONError `json:"error,omitempty"`
}

// AnalyticsEventProperties200ApplicationJSON - Event properties during the time range.
type AnalyticsEventProperties200ApplicationJSON struct {
	EventProperties []string `json:"event_properties,omitempty"`
}

type AnalyticsEventPropertiesResponse struct {
	// Event properties.
	AnalyticsEventProperties200ApplicationJSONObject *AnalyticsEventProperties200ApplicationJSON
	// Error code with reason.
	AnalyticsEventPropertiesDefaultApplicationJSONObject *AnalyticsEventPropertiesDefaultApplicationJSON
	ContentType                                          string
	StatusCode                                           int
	RawResponse                                          *http.Response
}
