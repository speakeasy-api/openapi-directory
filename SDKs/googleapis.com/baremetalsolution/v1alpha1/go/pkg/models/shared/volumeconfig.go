// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VolumeConfigProtocolEnum - Volume protocol.
type VolumeConfigProtocolEnum string

const (
	VolumeConfigProtocolEnumProtocolUnspecified VolumeConfigProtocolEnum = "PROTOCOL_UNSPECIFIED"
	VolumeConfigProtocolEnumProtocolFc          VolumeConfigProtocolEnum = "PROTOCOL_FC"
	VolumeConfigProtocolEnumProtocolNfs         VolumeConfigProtocolEnum = "PROTOCOL_NFS"
)

func (e VolumeConfigProtocolEnum) ToPointer() *VolumeConfigProtocolEnum {
	return &e
}

func (e *VolumeConfigProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PROTOCOL_UNSPECIFIED":
		fallthrough
	case "PROTOCOL_FC":
		fallthrough
	case "PROTOCOL_NFS":
		*e = VolumeConfigProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeConfigProtocolEnum: %v", v)
	}
}

// VolumeConfigTypeEnum - The type of this Volume.
type VolumeConfigTypeEnum string

const (
	VolumeConfigTypeEnumTypeUnspecified VolumeConfigTypeEnum = "TYPE_UNSPECIFIED"
	VolumeConfigTypeEnumFlash           VolumeConfigTypeEnum = "FLASH"
	VolumeConfigTypeEnumDisk            VolumeConfigTypeEnum = "DISK"
)

func (e VolumeConfigTypeEnum) ToPointer() *VolumeConfigTypeEnum {
	return &e
}

func (e *VolumeConfigTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "TYPE_UNSPECIFIED":
		fallthrough
	case "FLASH":
		fallthrough
	case "DISK":
		*e = VolumeConfigTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VolumeConfigTypeEnum: %v", v)
	}
}

// VolumeConfig - Configuration parameters for a new volume.
type VolumeConfig struct {
	// A transient unique identifier to identify a volume within an ProvisioningConfig request.
	ID *string `json:"id,omitempty"`
	// Location where to deploy the volume.
	Location *string `json:"location,omitempty"`
	// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
	LunRanges []LunRange `json:"lunRanges,omitempty"`
	// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
	MachineIds []string `json:"machineIds,omitempty"`
	// NFS exports. Set only when protocol is PROTOCOL_NFS.
	NfsExports []NfsExport `json:"nfsExports,omitempty"`
	// Volume protocol.
	Protocol *VolumeConfigProtocolEnum `json:"protocol,omitempty"`
	// The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.
	SizeGb *int `json:"sizeGb,omitempty"`
	// Whether snapshots should be enabled.
	SnapshotsEnabled *bool `json:"snapshotsEnabled,omitempty"`
	// The type of this Volume.
	Type *VolumeConfigTypeEnum `json:"type,omitempty"`
	// User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
	UserNote *string `json:"userNote,omitempty"`
}
