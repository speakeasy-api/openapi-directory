"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotesExport:
    r"""User settings in sub-objects, each for different purposes."""
    
    folder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folderName'), 'exclude': lambda f: f is None }})  
    is_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEnabled'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotificationMatchMyInterests:
    
    opted_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opted_state'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotificationMoreFromAuthors:
    
    opted_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opted_state'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotificationMoreFromSeries:
    
    opted_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opted_state'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotificationPriceDrop:
    
    opted_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opted_state'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotificationRewardExpirations:
    
    opted_state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opted_state'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UsersettingsNotification:
    
    match_my_interests: Optional[UsersettingsNotificationMatchMyInterests] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchMyInterests'), 'exclude': lambda f: f is None }})  
    more_from_authors: Optional[UsersettingsNotificationMoreFromAuthors] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moreFromAuthors'), 'exclude': lambda f: f is None }})  
    more_from_series: Optional[UsersettingsNotificationMoreFromSeries] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moreFromSeries'), 'exclude': lambda f: f is None }})  
    price_drop: Optional[UsersettingsNotificationPriceDrop] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceDrop'), 'exclude': lambda f: f is None }})  
    reward_expirations: Optional[UsersettingsNotificationRewardExpirations] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewardExpirations'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Usersettings:
    r"""Successful response"""
    
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource type."""  
    notes_export: Optional[UsersettingsNotesExport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notesExport'), 'exclude': lambda f: f is None }})
    r"""User settings in sub-objects, each for different purposes."""  
    notification: Optional[UsersettingsNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notification'), 'exclude': lambda f: f is None }})  
    