"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import choicequestion as shared_choicequestion
from ..shared import datequestion as shared_datequestion
from ..shared import fileuploadquestion as shared_fileuploadquestion
from ..shared import grading as shared_grading
from ..shared import rowquestion as shared_rowquestion
from ..shared import scalequestion as shared_scalequestion
from ..shared import textquestion as shared_textquestion
from ..shared import timequestion as shared_timequestion
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Question:
    r"""Any question. The specific type of question is known by its `kind`."""
    
    choice_question: Optional[shared_choicequestion.ChoiceQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('choiceQuestion'), 'exclude': lambda f: f is None }})
    r"""A radio/checkbox/dropdown question."""  
    date_question: Optional[shared_datequestion.DateQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateQuestion'), 'exclude': lambda f: f is None }})
    r"""A date question. Date questions default to just month + day."""  
    file_upload_question: Optional[shared_fileuploadquestion.FileUploadQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileUploadQuestion'), 'exclude': lambda f: f is None }})
    r"""A file upload question. The API currently does not support creating file upload questions."""  
    grading: Optional[shared_grading.Grading] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grading'), 'exclude': lambda f: f is None }})
    r"""Grading for a single question"""  
    question_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionId'), 'exclude': lambda f: f is None }})
    r"""Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Whether the question must be answered in order for a respondent to submit their response."""  
    row_question: Optional[shared_rowquestion.RowQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowQuestion'), 'exclude': lambda f: f is None }})
    r"""Configuration for a question that is part of a question group."""  
    scale_question: Optional[shared_scalequestion.ScaleQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaleQuestion'), 'exclude': lambda f: f is None }})
    r"""A scale question. The user has a range of numeric values to choose from."""  
    text_question: Optional[shared_textquestion.TextQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textQuestion'), 'exclude': lambda f: f is None }})
    r"""A text-based question."""  
    time_question: Optional[shared_timequestion.TimeQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeQuestion'), 'exclude': lambda f: f is None }})
    r"""A time question."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class QuestionInput:
    r"""Any question. The specific type of question is known by its `kind`."""
    
    choice_question: Optional[shared_choicequestion.ChoiceQuestionInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('choiceQuestion'), 'exclude': lambda f: f is None }})
    r"""A radio/checkbox/dropdown question."""  
    date_question: Optional[shared_datequestion.DateQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateQuestion'), 'exclude': lambda f: f is None }})
    r"""A date question. Date questions default to just month + day."""  
    file_upload_question: Optional[shared_fileuploadquestion.FileUploadQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileUploadQuestion'), 'exclude': lambda f: f is None }})
    r"""A file upload question. The API currently does not support creating file upload questions."""  
    grading: Optional[shared_grading.Grading] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('grading'), 'exclude': lambda f: f is None }})
    r"""Grading for a single question"""  
    question_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questionId'), 'exclude': lambda f: f is None }})
    r"""Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""Whether the question must be answered in order for a respondent to submit their response."""  
    row_question: Optional[shared_rowquestion.RowQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rowQuestion'), 'exclude': lambda f: f is None }})
    r"""Configuration for a question that is part of a question group."""  
    scale_question: Optional[shared_scalequestion.ScaleQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scaleQuestion'), 'exclude': lambda f: f is None }})
    r"""A scale question. The user has a range of numeric values to choose from."""  
    text_question: Optional[shared_textquestion.TextQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textQuestion'), 'exclude': lambda f: f is None }})
    r"""A text-based question."""  
    time_question: Optional[shared_timequestion.TimeQuestion] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeQuestion'), 'exclude': lambda f: f is None }})
    r"""A time question."""  
    