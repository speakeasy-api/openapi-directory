"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBodyAssets:
    
    asset_prices: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetPrices') }})
    r"""assetPrices[t] is the price of the asset at the time t"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBodyConstraints:
    
    assets_groups: Optional[list[list[int]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsGroups'), 'exclude': lambda f: f is None }})  
    assets_groups_matrix: Optional[list[list[float]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsGroupsMatrix'), 'exclude': lambda f: f is None }})
    r"""assetsGroupsMatrix[k][i] is the weight of the asset i in the group of assets k; exclusive with assetsGroups"""  
    maximum_assets_groups_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsGroupsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsGroupsWeights[k] is the maximum weight of the assets group k in the portfolio, in percentage between 0 and 1 if assetsGroups is provided"""  
    maximum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage"""  
    maximum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure"""  
    minimum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage"""  
    minimum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBody:
    
    assets: list[PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBodyAssets] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})  
    risk_free_rate: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('riskFreeRate') }})
    r"""The risk free rate"""  
    constraints: Optional[PostPortfolioOptimizationMaximumUlcerPerformanceIndexRequestBodyConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON:
    r"""OK"""
    
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclasses.dataclass
class PostPortfolioOptimizationMaximumUlcerPerformanceIndexResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_optimization_maximum_ulcer_performance_index_200_application_json_object: Optional[PostPortfolioOptimizationMaximumUlcerPerformanceIndex200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    