/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Members {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete a member
   */
  deleteWorkspaceSlugMembersMemberSlug(
    req: operations.DeleteWorkspaceSlugMembersMemberSlugRequest,
    security: operations.DeleteWorkspaceSlugMembersMemberSlugSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteWorkspaceSlugMembersMemberSlugResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteWorkspaceSlugMembersMemberSlugRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteWorkspaceSlugMembersMemberSlugSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteWorkspaceSlugMembersMemberSlugResponse =
        new operations.DeleteWorkspaceSlugMembersMemberSlugResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Remove identity from a member
   */
  deleteWorkspaceSlugMembersMemberSlugIdentities(
    req: operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest,
    security: operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/identities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse =
        new operations.DeleteWorkspaceSlugMembersMemberSlugIdentitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List members in a workspace
   */
  getWorkspaceSlugMembers(
    req: operations.GetWorkspaceSlugMembersRequest,
    security: operations.GetWorkspaceSlugMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWorkspaceSlugMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugMembersResponse =
        new operations.GetWorkspaceSlugMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Find a member by an identity
   *
   * @remarks
   * Provide a source and one of username/uid/email params to return a member with that identity, if one exists. Common values for source include github, twitter, and email.
   */
  getWorkspaceSlugMembersFind(
    req: operations.GetWorkspaceSlugMembersFindRequest,
    security: operations.GetWorkspaceSlugMembersFindSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugMembersFindResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugMembersFindRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/find",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWorkspaceSlugMembersFindSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugMembersFindResponse =
        new operations.GetWorkspaceSlugMembersFindResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 404].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a member
   */
  getWorkspaceSlugMembersMemberSlug(
    req: operations.GetWorkspaceSlugMembersMemberSlugRequest,
    security: operations.GetWorkspaceSlugMembersMemberSlugSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugMembersMemberSlugResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetWorkspaceSlugMembersMemberSlugRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetWorkspaceSlugMembersMemberSlugSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugMembersMemberSlugResponse =
        new operations.GetWorkspaceSlugMembersMemberSlugResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * List members in an organization
   */
  getWorkspaceSlugOrganizationsOrganizationIdMembers(
    req: operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest,
    security: operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/organizations/{organization_id}/members",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse =
        new operations.GetWorkspaceSlugOrganizationsOrganizationIdMembersResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Create or update a member
   *
   * @remarks
   * This method is useful when you know a member's identity in another system and want to create or update the corresponding Orbit member. Identities can be specified in the identity object or member attributes like member.github. If no member exists, a new member will be created and linked to any provided identities.
   */
  postWorkspaceSlugMembers(
    req: operations.PostWorkspaceSlugMembersRequest,
    security: operations.PostWorkspaceSlugMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWorkspaceSlugMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWorkspaceSlugMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "memberAndIdentity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostWorkspaceSlugMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWorkspaceSlugMembersResponse =
        new operations.PostWorkspaceSlugMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Add identity to a member
   */
  postWorkspaceSlugMembersMemberSlugIdentities(
    req: operations.PostWorkspaceSlugMembersMemberSlugIdentitiesRequest,
    security: operations.PostWorkspaceSlugMembersMemberSlugIdentitiesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostWorkspaceSlugMembersMemberSlugIdentitiesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostWorkspaceSlugMembersMemberSlugIdentitiesRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}/identities",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "identity",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PostWorkspaceSlugMembersMemberSlugIdentitiesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostWorkspaceSlugMembersMemberSlugIdentitiesResponse =
        new operations.PostWorkspaceSlugMembersMemberSlugIdentitiesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [201, 403, 422].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a member
   */
  putWorkspaceSlugMembersMemberSlug(
    req: operations.PutWorkspaceSlugMembersMemberSlugRequest,
    security: operations.PutWorkspaceSlugMembersMemberSlugSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutWorkspaceSlugMembersMemberSlugResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutWorkspaceSlugMembersMemberSlugRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{workspace_slug}/members/{member_slug}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "member",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PutWorkspaceSlugMembersMemberSlugSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutWorkspaceSlugMembersMemberSlugResponse =
        new operations.PutWorkspaceSlugMembersMemberSlugResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [204, 403].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
