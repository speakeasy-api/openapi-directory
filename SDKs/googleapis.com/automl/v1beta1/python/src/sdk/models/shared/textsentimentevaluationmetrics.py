"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import confusionmatrix as shared_confusionmatrix
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TextSentimentEvaluationMetrics:
    r"""Model evaluation metrics for text sentiment problems."""
    
    annotation_spec_id: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationSpecId'), 'exclude': lambda f: f is None }})
    r"""Output only. The annotation spec ids used for this evaluation. Deprecated ."""  
    confusion_matrix: Optional[shared_confusionmatrix.ConfusionMatrix] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confusionMatrix'), 'exclude': lambda f: f is None }})
    r"""Confusion matrix of the model running the classification."""  
    f1_score: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('f1Score'), 'exclude': lambda f: f is None }})
    r"""Output only. The harmonic mean of recall and precision."""  
    linear_kappa: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linearKappa'), 'exclude': lambda f: f is None }})
    r"""Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec."""  
    mean_absolute_error: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meanAbsoluteError'), 'exclude': lambda f: f is None }})
    r"""Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec."""  
    mean_squared_error: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meanSquaredError'), 'exclude': lambda f: f is None }})
    r"""Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec."""  
    precision: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision'), 'exclude': lambda f: f is None }})
    r"""Output only. Precision."""  
    quadratic_kappa: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quadraticKappa'), 'exclude': lambda f: f is None }})
    r"""Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec."""  
    recall: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recall'), 'exclude': lambda f: f is None }})
    r"""Output only. Recall."""  
    