"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tfl_api_presentation_entities_lineservicetype as shared_tfl_api_presentation_entities_lineservicetype
from typing import Optional


@dataclasses.dataclass
class StopPointGetServiceTypesRequest:
    
    id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""The Naptan id of the stop"""  
    line_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lineIds', 'style': 'form', 'explode': True }})
    r"""The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)"""  
    modes: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modes', 'style': 'form', 'explode': True }})
    r"""The modes which the lines are relevant to (all if empty)"""  
    

@dataclasses.dataclass
class StopPointGetServiceTypesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    tfl_api_presentation_entities_line_service_types: Optional[list[shared_tfl_api_presentation_entities_lineservicetype.TflAPIPresentationEntitiesLineServiceType]] = dataclasses.field(default=None)
    r"""OK"""  
    