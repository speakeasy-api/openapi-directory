<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ContainersGroupsNameOrIdGetDetails - OK. A detailed list of information about a container group is retrieved.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ContainersGroupsNameOrIdGetDetails
{
    /**
     * If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node. 
     * 
     * @var ?string $antiAffinity
     */
	#[\JMS\Serializer\Annotation\SerializedName('Anti-affinity')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $antiAffinity = null;
    
    /**
     * Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.
     * 
     * @var ?string $autorecovery
     */
	#[\JMS\Serializer\Annotation\SerializedName('Autorecovery')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $autorecovery = null;
    
    /**
     * Current IBM Containers availability zone on Openstack. 
     * 
     * @var ?string $availabilityZone
     */
	#[\JMS\Serializer\Annotation\SerializedName('AvailabilityZone')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $availabilityZone = null;
    
    /**
     * The Docker command that was specified to be run when the container instances are started. 
     * 
     * @var ?array<string> $cmd
     */
	#[\JMS\Serializer\Annotation\SerializedName('Cmd')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $cmd = null;
    
    /**
     * Timestamp when the container group was created.
     * 
     * @var ?string $creationTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('Creation_time')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $creationTime = null;
    
    /**
     * The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.
     * 
     * @var ?array<string> $env
     */
	#[\JMS\Serializer\Annotation\SerializedName('Env')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $env = null;
    
    /**
     * Unique identifier representing a specific container group.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('Id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * The unique ID of the container image your container group instances are based on.
     * 
     * @var ?string $image
     */
	#[\JMS\Serializer\Annotation\SerializedName('Image')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $image = null;
    
    /**
     * The full path to the container image in your private Bluemix repository.
     * 
     * @var ?string $imageName
     */
	#[\JMS\Serializer\Annotation\SerializedName('ImageName')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $imageName = null;
    
    /**
     * The size of each container instance that runs in the container group in MegaByte.
     * 
     * @var ?int $memory
     */
	#[\JMS\Serializer\Annotation\SerializedName('Memory')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $memory = null;
    
    /**
     * The name of the container group.
     * 
     * @var ?string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('Name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $name = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('NumberInstances')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContainersGroupsNameOrIdGetDetailsNumberInstances')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContainersGroupsNameOrIdGetDetailsNumberInstances $numberInstances = null;
    
    /**
     * The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. 
     * 
     * @var ?int $port
     */
	#[\JMS\Serializer\Annotation\SerializedName('Port')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $port = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('Route_Status')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ContainersGroupsNameOrIdGetDetailsRouteStatus')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ContainersGroupsNameOrIdGetDetailsRouteStatus $routeStatus = null;
    
    /**
     * The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.
     * 
     * @var ?array<string> $routes
     */
	#[\JMS\Serializer\Annotation\SerializedName('Routes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $routes = null;
    
    /**
     * The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)
     * 
     * @var ?string $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('Status')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $status = null;
    
    /**
     * Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.
     * 
     * @var ?string $updatedTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('UpdatedTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedTime = null;
    
    /**
     * List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.
     * 
     * @var ?array<string> $volumes
     */
	#[\JMS\Serializer\Annotation\SerializedName('Volumes')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $volumes = null;
    
	public function __construct()
	{
		$this->antiAffinity = null;
		$this->autorecovery = null;
		$this->availabilityZone = null;
		$this->cmd = null;
		$this->creationTime = null;
		$this->env = null;
		$this->id = null;
		$this->image = null;
		$this->imageName = null;
		$this->memory = null;
		$this->name = null;
		$this->numberInstances = null;
		$this->port = null;
		$this->routeStatus = null;
		$this->routes = null;
		$this->status = null;
		$this->updatedTime = null;
		$this->volumes = null;
	}
}
