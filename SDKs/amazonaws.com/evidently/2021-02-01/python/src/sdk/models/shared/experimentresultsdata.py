"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import experimentresultresponsetype_enum as shared_experimentresultresponsetype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExperimentResultsData:
    r"""A structure that contains experiment results for one metric that is monitored in the experiment."""
    
    metric_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metricName'), 'exclude': lambda f: f is None }})  
    result_stat: Optional[shared_experimentresultresponsetype_enum.ExperimentResultResponseTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resultStat'), 'exclude': lambda f: f is None }})  
    treatment_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('treatmentName'), 'exclude': lambda f: f is None }})  
    values: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('values'), 'exclude': lambda f: f is None }})  
    