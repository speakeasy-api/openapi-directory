<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SwitchT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a switch to a stack
     * 
     * Add a switch to a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse
     */
	public function addNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/add', \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches
     * 
     * Clone port-level and some switch-level configuration settings from a source switch to one or more target switches. Cloned settings include: Aggregation Groups, Power Settings, Multicast Settings, MTU Configuration, STP Bridge priority, Port Mirroring
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
     */
	public function cloneOrganizationSwitchDevices(
        \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/switch/devices/clone', \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CloneOrganizationSwitchDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cloneOrganizationSwitchDevices200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 interface for a switch
     * 
     * Create a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse
     */
	public function createDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceSwitchRoutingInterface201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingInterface201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 static route for a switch
     * 
     * Create a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse
     */
	public function createDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createDeviceSwitchRoutingStaticRoute201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an access policy for a switch network
     * 
     * Create an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse
     */
	public function createNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchAccessPolicy201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchAccessPolicy201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * 
     * Add a server to be trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer201ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a link aggregation group
     * 
     * Create a link aggregation group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse
     */
	public function createNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchLinkAggregation201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a switch port schedule
     * 
     * Add a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse
     */
	public function createNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchPortSchedule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a quality of service rule
     * 
     * Add a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
     */
	public function createNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchQosRule201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a multicast rendezvous point
     * 
     * Create a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function createNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchRoutingMulticastRendezvousPoint201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a stack
     * 
     * Create a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse
     */
	public function createNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStack201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 interface for a switch stack
     * 
     * Create a layer 3 interface for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse
     */
	public function createNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStackRoutingInterface201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a layer 3 static route for a switch stack
     * 
     * Create a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function createNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createNetworkSwitchStackRoutingStaticRoute201ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cycle a set of switch ports
     * 
     * Cycle a set of switch ports
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse
     */
	public function cycleDeviceSwitchPorts(
        \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/cycle', \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CycleDeviceSwitchPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cycleDeviceSwitchPorts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 interface from the switch
     * 
     * Delete a layer 3 interface from the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse
     */
	public function deleteDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 static route for a switch
     * 
     * Delete a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse
     */
	public function deleteDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an access policy for a switch network
     * 
     * Delete an access policy for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse
     */
	public function deleteNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * 
     * Remove a server from being trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function deleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Split a link aggregation group into separate ports
     * 
     * Split a link aggregation group into separate ports
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse
     */
	public function deleteNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a switch port schedule
     * 
     * Delete a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse
     */
	public function deleteNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules/{portScheduleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a quality of service rule
     * 
     * Delete a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
     */
	public function deleteNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a multicast rendezvous point
     * 
     * Delete a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function deleteNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a stack
     * 
     * Delete a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse
     */
	public function deleteNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 interface from a switch stack
     * 
     * Delete a layer 3 interface from a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse
     */
	public function deleteNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a layer 3 static route for a switch stack
     * 
     * Delete a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function deleteNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Return a switch port
     * 
     * Return a switch port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse
     */
	public function getDeviceSwitchPort(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch ports for a switch
     * 
     * List the switch ports for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse
     */
	public function getDeviceSwitchPorts(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the status for all the ports of a switch
     * 
     * Return the status for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
     */
	public function getDeviceSwitchPortsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatuses200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatuses200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the packet counters for all the ports of a switch
     * 
     * Return the packet counters for all the ports of a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
     */
	public function getDeviceSwitchPortsStatusesPackets(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/statuses/packets', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchPortsStatusesPacketsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchPortsStatusesPackets200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface for a switch
     * 
     * Return a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse
     */
	public function getDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterface200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface DHCP configuration for a switch
     * 
     * Return a layer 3 interface DHCP configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse
     */
	public function getDeviceSwitchRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 interfaces for a switch
     * 
     * List layer 3 interfaces for a switch. Those for a stack may be found under switch stack routing.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse
     */
	public function getDeviceSwitchRoutingInterfaces(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingInterfaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingInterfaces200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 static route for a switch
     * 
     * Return a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse
     */
	public function getDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 static routes for a switch
     * 
     * List layer 3 static routes for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse
     */
	public function getDeviceSwitchRoutingStaticRoutes(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchRoutingStaticRoutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchRoutingStaticRoutes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return warm spare configuration for a switch
     * 
     * Return warm spare configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
     */
	public function getDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the access control lists for a MS network
     * 
     * Return the access control lists for a MS network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse
     */
	public function getNetworkSwitchAccessControlLists(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessControlLists', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessControlLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessControlLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the access policies for a switch network
     * 
     * List the access policies for a switch network. Only returns access policies with 'my RADIUS server' as authentication method
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse
     */
	public function getNetworkSwitchAccessPolicies(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPoliciesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessPolicies200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicies200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a specific access policy for a switch network
     * 
     * Return a specific access policy for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse
     */
	public function getNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAccessPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAccessPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the switch alternate management interface for the network
     * 
     * Return the switch alternate management interface for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse
     */
	public function getNetworkSwitchAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the DHCP server settings
     * 
     * Return the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse
     */
	public function getNetworkSwitchDhcpServerPolicy(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the list of servers trusted by Dynamic ARP Inspection on this network
     * 
     * Return the list of servers trusted by Dynamic ARP Inspection on this network. These are also known as whitelisted snoop entries
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse
     */
	public function getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionTrustedServers200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * 
     * Return the devices that have a Dynamic ARP Inspection warning and their warnings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse
     */
	public function getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/warnings/byDevice', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpServerPolicyArpInspectionWarningsByDevice200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * 
     * Return the network's DHCPv4 servers seen within the selected timeframe (default 1 day)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse
     */
	public function getNetworkSwitchDhcpV4ServersSeen(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcp/v4/servers/seen', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDhcpV4ServersSeen200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDhcpV4ServersSeen200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the DSCP to CoS mappings
     * 
     * Return the DSCP to CoS mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse
     */
	public function getNetworkSwitchDscpToCosMappings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dscpToCosMappings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchDscpToCosMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchDscpToCosMappings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List link aggregation groups
     * 
     * List link aggregation groups
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse
     */
	public function getNetworkSwitchLinkAggregations(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchLinkAggregationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchLinkAggregations200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the MTU configuration
     * 
     * Return the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse
     */
	public function getNetworkSwitchMtu(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/mtu', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List switch port schedules
     * 
     * List switch port schedules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse
     */
	public function getNetworkSwitchPortSchedules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchPortSchedulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchPortSchedules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a quality of service rule
     * 
     * Return a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
     */
	public function getNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List quality of service rules
     * 
     * List quality of service rules
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
     */
	public function getNetworkSwitchQosRules(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRules200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * Return the quality of service rule IDs by order in which they will be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
     */
	public function getNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return multicast settings for a network
     * 
     * Return multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse
     */
	public function getNetworkSwitchRoutingMulticast(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a multicast rendezvous point
     * 
     * Return a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function getNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticastRendezvousPoint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List multicast rendezvous points
     * 
     * List multicast rendezvous points
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse
     */
	public function getNetworkSwitchRoutingMulticastRendezvousPoints(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingMulticastRendezvousPointsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingMulticastRendezvousPoints200ApplicationJSONArrays = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<array<string, mixed>>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return layer 3 OSPF routing configuration
     * 
     * Return layer 3 OSPF routing configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse
     */
	public function getNetworkSwitchRoutingOspf(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/ospf', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchRoutingOspfResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchRoutingOspf200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the switch network settings
     * 
     * Returns the switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
     */
	public function getNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show a switch stack
     * 
     * Show a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse
     */
	public function getNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStack200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface from a switch stack
     * 
     * Return a layer 3 interface from a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse
     */
	public function getNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 interface DHCP configuration for a switch stack
     * 
     * Return a layer 3 interface DHCP configuration for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse
     */
	public function getNetworkSwitchStackRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 interfaces for a switch stack
     * 
     * List layer 3 interfaces for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse
     */
	public function getNetworkSwitchStackRoutingInterfaces(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingInterfacesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingInterfaces200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a layer 3 static route for a switch stack
     * 
     * Return a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function getNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List layer 3 static routes for a switch stack
     * 
     * List layer 3 static routes for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse
     */
	public function getNetworkSwitchStackRoutingStaticRoutes(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStackRoutingStaticRoutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStackRoutingStaticRoutes200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch stacks in a network
     * 
     * List the switch stacks in a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse
     */
	public function getNetworkSwitchStacks(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStacksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStacks200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<array<string, mixed>>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return the storm control configuration for a switch network
     * 
     * Return the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse
     */
	public function getNetworkSwitchStormControl(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stormControl', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStormControl200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns STP settings
     * 
     * Returns STP settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse
     */
	public function getNetworkSwitchStp(
        \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stp', \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetNetworkSwitchStpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getNetworkSwitchStp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return a switch profile port
     * 
     * Return a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return all the ports of a switch profile
     * 
     * Return all the ports of a switch profile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
     */
	public function getOrganizationConfigTemplateSwitchProfilePorts(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilePorts200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switch profiles for your switch template configuration
     * 
     * List the switch profiles for your switch template configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
     */
	public function getOrganizationConfigTemplateSwitchProfiles(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfilesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationConfigTemplateSwitchProfiles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetOrganizationConfigTemplateSwitchProfiles200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the switchports in an organization by switch
     * 
     * List the switchports in an organization by switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse
     */
	public function getOrganizationSwitchPortsBySwitch(
        \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/switch/ports/bySwitch', \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOrganizationSwitchPortsBySwitch200ApplicationJSONObjects = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Operations\GetOrganizationSwitchPortsBySwitch200ApplicationJSON>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a switch from a stack
     * 
     * Remove a switch from a stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse
     */
	public function removeNetworkSwitchStack(
        \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/remove', \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveNetworkSwitchStackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeNetworkSwitchStack200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch port
     * 
     * Update a switch port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse
     */
	public function updateDeviceSwitchPort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchPort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchPort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface for a switch
     * 
     * Update a layer 3 interface for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse
     */
	public function updateDeviceSwitchRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterface200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface DHCP configuration for a switch
     * 
     * Update a layer 3 interface DHCP configuration for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse
     */
	public function updateDeviceSwitchRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 static route for a switch
     * 
     * Update a layer 3 static route for a switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse
     */
	public function updateDeviceSwitchRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update warm spare configuration for a switch
     * 
     * Update warm spare configuration for a switch. The spare will use the same L3 configuration as the primary. Note that this will irreversibly destroy any existing L3 configuration on the spare.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
     */
	public function updateDeviceSwitchWarmSpare(
        \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/devices/{serial}/switch/warmSpare', \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateDeviceSwitchWarmSpareResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateDeviceSwitchWarmSpare200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the access control lists for a MS network
     * 
     * Update the access control lists for a MS network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse
     */
	public function updateNetworkSwitchAccessControlLists(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessControlLists', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAccessControlLists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessControlLists200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an access policy for a switch network
     * 
     * Update an access policy for a switch network. If you would like to enable Meraki Authentication, set radiusServers to empty array.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse
     */
	public function updateNetworkSwitchAccessPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/accessPolicies/{accessPolicyNumber}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAccessPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAccessPolicy200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the switch alternate management interface for the network
     * 
     * Update the switch alternate management interface for the network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse
     */
	public function updateNetworkSwitchAlternateManagementInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/alternateManagementInterface', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchAlternateManagementInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchAlternateManagementInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the DHCP server settings
     * 
     * Update the DHCP server settings. Blocked/allowed servers are only applied when default policy is allow/block, respectively
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse
     */
	public function updateNetworkSwitchDhcpServerPolicy(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDhcpServerPolicy200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * 
     * Update a server that is trusted by Dynamic ARP Inspection on this network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
     */
	public function updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dhcpServerPolicy/arpInspection/trustedServers/{trustedServerId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDhcpServerPolicyArpInspectionTrustedServer200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the DSCP to CoS mappings
     * 
     * Update the DSCP to CoS mappings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse
     */
	public function updateNetworkSwitchDscpToCosMappings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/dscpToCosMappings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchDscpToCosMappingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchDscpToCosMappings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a link aggregation group
     * 
     * Update a link aggregation group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse
     */
	public function updateNetworkSwitchLinkAggregation(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/linkAggregations/{linkAggregationId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchLinkAggregationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchLinkAggregation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the MTU configuration
     * 
     * Update the MTU configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse
     */
	public function updateNetworkSwitchMtu(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/mtu', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchMtuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchMtu200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch port schedule
     * 
     * Update a switch port schedule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse
     */
	public function updateNetworkSwitchPortSchedule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/portSchedules/{portScheduleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchPortScheduleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchPortSchedule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a quality of service rule
     * 
     * Update a quality of service rule
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
     */
	public function updateNetworkSwitchQosRule(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/{qosRuleId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRule200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the order in which the rules should be processed by the switch
     * 
     * Update the order in which the rules should be processed by the switch
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
     */
	public function updateNetworkSwitchQosRulesOrder(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/qosRules/order', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchQosRulesOrderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchQosRulesOrder200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update multicast settings for a network
     * 
     * Update multicast settings for a network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse
     */
	public function updateNetworkSwitchRoutingMulticast(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingMulticast200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a multicast rendezvous point
     * 
     * Update a multicast rendezvous point
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse
     */
	public function updateNetworkSwitchRoutingMulticastRendezvousPoint(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/multicast/rendezvousPoints/{rendezvousPointId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingMulticastRendezvousPointResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingMulticastRendezvousPoint200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update layer 3 OSPF routing configuration
     * 
     * Update layer 3 OSPF routing configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse
     */
	public function updateNetworkSwitchRoutingOspf(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/routing/ospf', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchRoutingOspfResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchRoutingOspf200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update switch network settings
     * 
     * Update switch network settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
     */
	public function updateNetworkSwitchSettings(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/settings', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchSettings200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface for a switch stack
     * 
     * Update a layer 3 interface for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse
     */
	public function updateNetworkSwitchStackRoutingInterface(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingInterface200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 interface DHCP configuration for a switch stack
     * 
     * Update a layer 3 interface DHCP configuration for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse
     */
	public function updateNetworkSwitchStackRoutingInterfaceDhcp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/interfaces/{interfaceId}/dhcp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingInterfaceDhcpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingInterfaceDhcp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a layer 3 static route for a switch stack
     * 
     * Update a layer 3 static route for a switch stack
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse
     */
	public function updateNetworkSwitchStackRoutingStaticRoute(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stacks/{switchStackId}/routing/staticRoutes/{staticRouteId}', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStackRoutingStaticRouteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStackRoutingStaticRoute200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the storm control configuration for a switch network
     * 
     * Update the storm control configuration for a switch network
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse
     */
	public function updateNetworkSwitchStormControl(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stormControl', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStormControlResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStormControl200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates STP settings
     * 
     * Updates STP settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse
     */
	public function updateNetworkSwitchStp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/networks/{networkId}/switch/stp', \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateNetworkSwitchStpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateNetworkSwitchStp200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a switch profile port
     * 
     * Update a switch profile port
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
     */
	public function updateOrganizationConfigTemplateSwitchProfilePort(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/organizations/{organizationId}/configTemplates/{configTemplateId}/switch/profiles/{profileId}/ports/{portId}', \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePortResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\UpdateOrganizationConfigTemplateSwitchProfilePort200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}