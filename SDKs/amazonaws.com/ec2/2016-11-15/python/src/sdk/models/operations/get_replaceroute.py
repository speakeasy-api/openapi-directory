"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETReplaceRouteActionEnum(str, Enum):
    REPLACE_ROUTE = 'ReplaceRoute'

class GETReplaceRouteVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETReplaceRouteRequest:
    
    action: GETReplaceRouteActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    route_table_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'RouteTableId', 'style': 'form', 'explode': True }})
    r"""The ID of the route table."""  
    version: GETReplaceRouteVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    carrier_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CarrierGatewayId', 'style': 'form', 'explode': True }})
    r"""[IPv4 traffic only] The ID of a carrier gateway."""  
    core_network_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'CoreNetworkArn', 'style': 'form', 'explode': True }})
    r"""The Amazon Resource Name (ARN) of the core network."""  
    destination_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationCidrBlock', 'style': 'form', 'explode': True }})
    r"""The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table."""  
    destination_ipv6_cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationIpv6CidrBlock', 'style': 'form', 'explode': True }})
    r"""The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table."""  
    destination_prefix_list_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DestinationPrefixListId', 'style': 'form', 'explode': True }})
    r"""The ID of the prefix list for the route."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DryRun', 'style': 'form', 'explode': True }})
    r"""Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."""  
    egress_only_internet_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'EgressOnlyInternetGatewayId', 'style': 'form', 'explode': True }})
    r"""[IPv6 traffic only] The ID of an egress-only internet gateway."""  
    gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'GatewayId', 'style': 'form', 'explode': True }})
    r"""The ID of an internet gateway or virtual private gateway."""  
    instance_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'InstanceId', 'style': 'form', 'explode': True }})
    r"""The ID of a NAT instance in your VPC."""  
    local_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LocalGatewayId', 'style': 'form', 'explode': True }})
    r"""The ID of the local gateway."""  
    local_target: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LocalTarget', 'style': 'form', 'explode': True }})
    r"""Specifies whether to reset the local route to its default target (<code>local</code>)."""  
    nat_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NatGatewayId', 'style': 'form', 'explode': True }})
    r"""[IPv4 traffic only] The ID of a NAT gateway."""  
    network_interface_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NetworkInterfaceId', 'style': 'form', 'explode': True }})
    r"""The ID of a network interface."""  
    transit_gateway_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'TransitGatewayId', 'style': 'form', 'explode': True }})
    r"""The ID of a transit gateway."""  
    vpc_endpoint_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpcEndpointId', 'style': 'form', 'explode': True }})
    r"""The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only."""  
    vpc_peering_connection_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'VpcPeeringConnectionId', 'style': 'form', 'explode': True }})
    r"""The ID of a VPC peering connection."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETReplaceRouteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    