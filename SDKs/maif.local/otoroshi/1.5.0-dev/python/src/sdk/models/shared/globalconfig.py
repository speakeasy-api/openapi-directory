"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import auth0config as shared_auth0config
from ..shared import cleversettings as shared_cleversettings
from ..shared import elasticconfig as shared_elasticconfig
from ..shared import ipfiltering as shared_ipfiltering
from ..shared import mailersettings as shared_mailersettings
from ..shared import webhook as shared_webhook
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlobalConfig:
    r"""The global config object of Otoroshi, used to customize settings of the current Otoroshi instance"""
    
    alerts_emails: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertsEmails') }})
    r"""Email addresses that will receive all Otoroshi alert events"""  
    alerts_webhooks: list[shared_webhook.Webhook] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('alertsWebhooks') }})
    r"""Webhook that will receive all Otoroshi alert events"""  
    analytics_webhooks: list[shared_webhook.Webhook] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('analyticsWebhooks') }})
    r"""Webhook that will receive all internal Otoroshi events"""  
    api_read_only: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiReadOnly') }})
    r"""If enabled, Admin API won't be able to write/update/delete entities"""  
    auto_link_to_default_group: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoLinkToDefaultGroup') }})
    r"""If not defined, every new service descriptor will be added to the default group"""  
    endless_ip_addresses: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endlessIpAddresses') }})
    r"""IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"""  
    ip_filtering: shared_ipfiltering.IPFiltering = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipFiltering') }})
    r"""The filtering configuration block for a service of globally."""  
    limit_concurrent_requests: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('limitConcurrentRequests') }})
    r"""If enabled, Otoroshi will reject new request if too much at the same time"""  
    max_concurrent_requests: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxConcurrentRequests') }})
    r"""The number of authorized request processed at the same time"""  
    per_ip_throttling_quota: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('perIpThrottlingQuota') }})
    r"""Authorized number of calls per second globally per IP address, measured on 10 seconds"""  
    stream_entity_only: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamEntityOnly') }})
    r"""HTTP will be streamed only. Doesn't work with old browsers"""  
    throttling_quota: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('throttlingQuota') }})
    r"""Authorized number of calls per second globally, measured on 10 seconds"""  
    u2f_login_only: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('u2fLoginOnly') }})
    r"""If enabled, login to backoffice through Auth0 will be disabled"""  
    use_circuit_breakers: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCircuitBreakers') }})
    r"""If enabled, services will be authorized to use circuit breakers"""  
    backoffice_auth0_config: Optional[shared_auth0config.Auth0Config] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backofficeAuth0Config'), 'exclude': lambda f: f is None }})
    r"""Configuration for Auth0 domain"""  
    clever_settings: Optional[shared_cleversettings.CleverSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cleverSettings'), 'exclude': lambda f: f is None }})
    r"""Configuration for CleverCloud client"""  
    elastic_reads_config: Optional[shared_elasticconfig.ElasticConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elasticReadsConfig'), 'exclude': lambda f: f is None }})
    r"""The configuration for elastic access"""  
    elastic_writes_configs: Optional[list[shared_elasticconfig.ElasticConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elasticWritesConfigs'), 'exclude': lambda f: f is None }})
    r"""Configs. for Elastic writes"""  
    lines: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lines'), 'exclude': lambda f: f is None }})
    r"""Possibles lines for Otoroshi"""  
    mailer_settings: Optional[shared_mailersettings.MailerSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailerSettings'), 'exclude': lambda f: f is None }})
    r"""Configuration for mailgun api client"""  
    max_http10_response_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxHttp10ResponseSize'), 'exclude': lambda f: f is None }})
    r"""The max size in bytes of an HTTP 1.0 response"""  
    max_logs_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxLogsSize'), 'exclude': lambda f: f is None }})
    r"""Number of events kept locally"""  
    middle_fingers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('middleFingers'), 'exclude': lambda f: f is None }})
    r"""Use middle finger emoji as a response character for endless HTTP responses"""  
    private_apps_auth0_config: Optional[shared_auth0config.Auth0Config] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateAppsAuth0Config'), 'exclude': lambda f: f is None }})
    r"""Configuration for Auth0 domain"""  
    