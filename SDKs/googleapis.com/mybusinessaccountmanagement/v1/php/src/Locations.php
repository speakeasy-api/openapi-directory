<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Locations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateResponse
     */
	public function mybusinessaccountmanagementLocationsAdminsCreate(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/admins', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adminInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->admin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Admin', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes the specified admin as a manager of the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteResponse
     */
	public function mybusinessaccountmanagementLocationsAdminsDelete(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the admins for the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListResponse
     */
	public function mybusinessaccountmanagementLocationsAdminsList(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/admins', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationAdminsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationAdminsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the Admin for the specified location. Only the AdminRole of the Admin can be updated.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchResponse
     */
	public function mybusinessaccountmanagementLocationsAdminsPatch(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "adminInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsAdminsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->admin = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Admin', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferResponse
     */
	public function mybusinessaccountmanagementLocationsTransfer(
        \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:transfer', \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferLocationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MybusinessaccountmanagementLocationsTransferResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}