"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Scrobbling:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_scrobble_shows_show_id_(self, request: operations.GetScrobbleShowsShowIDRequest) -> operations.GetScrobbleShowsShowIDResponse:
        r"""List watched and acquired episodes for a show
        This endpoint can be used by all users, even without premium
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetScrobbleShowsShowIDRequest, base_url, '/scrobble/shows/{show_id}', request)
        
        query_params = utils.get_query_params(operations.GetScrobbleShowsShowIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetScrobbleShowsShowIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MarkedEpisode]])
                res.marked_episodes = out

        return res

    def post_scrobble_episodes(self, request: list[operations.PostScrobbleEpisodesRequestBody]) -> operations.PostScrobbleEpisodesResponse:
        r"""Mark episodes as acquired or watched based on their IDs
        This endpoint can be used by all users, even without premium
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scrobble/episodes'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostScrobbleEpisodesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 207, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BulkResponse]])
                res.bulk_response = out

        return res

    def post_scrobble_shows(self, request: operations.PostScrobbleShowsRequest) -> operations.PostScrobbleShowsResponse:
        r"""Mark episodes within a show as acquired or watched based on their attributes
        To specify a show, supply either `tvmaze_id`, `thetvdb_id` or `imdb_id`. To specify an episode, supply either both `season` and `episode`, or `airdate`.
        
        This endpoint can be used by all users, even without premium.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/scrobble/shows'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PostScrobbleShowsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostScrobbleShowsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 207, 422]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BulkResponse]])
                res.bulk_response = out

        return res

    def put_scrobble_episodes_episode_id_(self, request: operations.PutScrobbleEpisodesEpisodeIDRequest) -> operations.PutScrobbleEpisodesEpisodeIDResponse:
        r"""Mark an episode as acquired or watched based on its ID
        This endpoint can be used by all users, even without premium
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutScrobbleEpisodesEpisodeIDRequest, base_url, '/scrobble/episodes/{episode_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "marked_episode_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutScrobbleEpisodesEpisodeIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MarkedEpisode])
                res.marked_episode = out
        elif http_res.status_code in [404, 422]:
            pass

        return res

    