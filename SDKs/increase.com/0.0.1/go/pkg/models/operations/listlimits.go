// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListLimitsQueryParams struct {
	Cursor  *string `queryParam:"style=form,explode=true,name=cursor"`
	Limit   *int64  `queryParam:"style=form,explode=true,name=limit"`
	ModelID *string `queryParam:"style=form,explode=true,name=model_id"`
	Status  *string `queryParam:"style=form,explode=true,name=status"`
}

type ListLimitsRequest struct {
	QueryParams ListLimitsQueryParams
}

type ListLimitsDefaultApplicationJSON13StatusEnum string

const (
	ListLimitsDefaultApplicationJSON13StatusEnumFourHundredAndTwentyNine ListLimitsDefaultApplicationJSON13StatusEnum = "429"
)

func (e *ListLimitsDefaultApplicationJSON13StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "429":
		*e = ListLimitsDefaultApplicationJSON13StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON13StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON13TypeEnum string

const (
	ListLimitsDefaultApplicationJSON13TypeEnumRateLimitedError ListLimitsDefaultApplicationJSON13TypeEnum = "rate_limited_error"
)

func (e *ListLimitsDefaultApplicationJSON13TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "rate_limited_error":
		*e = ListLimitsDefaultApplicationJSON13TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON13TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON13 struct {
	Detail     string                                       `json:"detail"`
	RetryAfter *int64                                       `json:"retry_after,omitempty"`
	Status     ListLimitsDefaultApplicationJSON13StatusEnum `json:"status"`
	Title      string                                       `json:"title"`
	Type       ListLimitsDefaultApplicationJSON13TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON12StatusEnum string

const (
	ListLimitsDefaultApplicationJSON12StatusEnumFourHundredAndThree ListLimitsDefaultApplicationJSON12StatusEnum = "403"
)

func (e *ListLimitsDefaultApplicationJSON12StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListLimitsDefaultApplicationJSON12StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON12StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON12TypeEnum string

const (
	ListLimitsDefaultApplicationJSON12TypeEnumPrivateFeatureError ListLimitsDefaultApplicationJSON12TypeEnum = "private_feature_error"
)

func (e *ListLimitsDefaultApplicationJSON12TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private_feature_error":
		*e = ListLimitsDefaultApplicationJSON12TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON12TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON12 struct {
	Detail string                                       `json:"detail"`
	Status ListLimitsDefaultApplicationJSON12StatusEnum `json:"status"`
	Title  string                                       `json:"title"`
	Type   ListLimitsDefaultApplicationJSON12TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON11StatusEnum string

const (
	ListLimitsDefaultApplicationJSON11StatusEnumFourHundredAndFour ListLimitsDefaultApplicationJSON11StatusEnum = "404"
)

func (e *ListLimitsDefaultApplicationJSON11StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListLimitsDefaultApplicationJSON11StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON11StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON11TypeEnum string

const (
	ListLimitsDefaultApplicationJSON11TypeEnumObjectNotFoundError ListLimitsDefaultApplicationJSON11TypeEnum = "object_not_found_error"
)

func (e *ListLimitsDefaultApplicationJSON11TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "object_not_found_error":
		*e = ListLimitsDefaultApplicationJSON11TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON11TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON11 struct {
	Detail string                                       `json:"detail"`
	Status ListLimitsDefaultApplicationJSON11StatusEnum `json:"status"`
	Title  string                                       `json:"title"`
	Type   ListLimitsDefaultApplicationJSON11TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON10StatusEnum string

const (
	ListLimitsDefaultApplicationJSON10StatusEnumFourHundred ListLimitsDefaultApplicationJSON10StatusEnum = "400"
)

func (e *ListLimitsDefaultApplicationJSON10StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListLimitsDefaultApplicationJSON10StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON10StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON10TypeEnum string

const (
	ListLimitsDefaultApplicationJSON10TypeEnumMalformedRequestError ListLimitsDefaultApplicationJSON10TypeEnum = "malformed_request_error"
)

func (e *ListLimitsDefaultApplicationJSON10TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "malformed_request_error":
		*e = ListLimitsDefaultApplicationJSON10TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON10TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON10 struct {
	Detail string                                       `json:"detail"`
	Status ListLimitsDefaultApplicationJSON10StatusEnum `json:"status"`
	Title  string                                       `json:"title"`
	Type   ListLimitsDefaultApplicationJSON10TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON9StatusEnum string

const (
	ListLimitsDefaultApplicationJSON9StatusEnumFourHundred ListLimitsDefaultApplicationJSON9StatusEnum = "400"
)

func (e *ListLimitsDefaultApplicationJSON9StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "400":
		*e = ListLimitsDefaultApplicationJSON9StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON9StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON9TypeEnum string

const (
	ListLimitsDefaultApplicationJSON9TypeEnumInvalidParametersError ListLimitsDefaultApplicationJSON9TypeEnum = "invalid_parameters_error"
)

func (e *ListLimitsDefaultApplicationJSON9TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_parameters_error":
		*e = ListLimitsDefaultApplicationJSON9TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON9TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON9 struct {
	Detail string `json:"detail"`
	// All errors related to parsing the request parameters.
	Errors []map[string]interface{}                    `json:"errors,omitempty"`
	Status ListLimitsDefaultApplicationJSON9StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON9TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON8StatusEnum string

const (
	ListLimitsDefaultApplicationJSON8StatusEnumFourHundredAndNine ListLimitsDefaultApplicationJSON8StatusEnum = "409"
)

func (e *ListLimitsDefaultApplicationJSON8StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListLimitsDefaultApplicationJSON8StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON8StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON8TypeEnum string

const (
	ListLimitsDefaultApplicationJSON8TypeEnumInvalidOperationError ListLimitsDefaultApplicationJSON8TypeEnum = "invalid_operation_error"
)

func (e *ListLimitsDefaultApplicationJSON8TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_operation_error":
		*e = ListLimitsDefaultApplicationJSON8TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON8TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON8 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON8StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON8TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON7StatusEnum string

const (
	ListLimitsDefaultApplicationJSON7StatusEnumFourHundredAndOne ListLimitsDefaultApplicationJSON7StatusEnum = "401"
)

func (e *ListLimitsDefaultApplicationJSON7StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "401":
		*e = ListLimitsDefaultApplicationJSON7StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON7StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON7TypeEnum string

const (
	ListLimitsDefaultApplicationJSON7TypeEnumInvalidAPIKeyError ListLimitsDefaultApplicationJSON7TypeEnum = "invalid_api_key_error"
)

func (e *ListLimitsDefaultApplicationJSON7TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_api_key_error":
		*e = ListLimitsDefaultApplicationJSON7TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON7TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON7 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON7StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON7TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON6StatusEnum string

const (
	ListLimitsDefaultApplicationJSON6StatusEnumFiveHundred ListLimitsDefaultApplicationJSON6StatusEnum = "500"
)

func (e *ListLimitsDefaultApplicationJSON6StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "500":
		*e = ListLimitsDefaultApplicationJSON6StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON6StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON6TypeEnum string

const (
	ListLimitsDefaultApplicationJSON6TypeEnumInternalServerError ListLimitsDefaultApplicationJSON6TypeEnum = "internal_server_error"
)

func (e *ListLimitsDefaultApplicationJSON6TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = ListLimitsDefaultApplicationJSON6TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON6TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON6 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON6StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON6TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON5StatusEnum string

const (
	ListLimitsDefaultApplicationJSON5StatusEnumFourHundredAndThree ListLimitsDefaultApplicationJSON5StatusEnum = "403"
)

func (e *ListLimitsDefaultApplicationJSON5StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListLimitsDefaultApplicationJSON5StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON5StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON5TypeEnum string

const (
	ListLimitsDefaultApplicationJSON5TypeEnumInsufficientPermissionsError ListLimitsDefaultApplicationJSON5TypeEnum = "insufficient_permissions_error"
)

func (e *ListLimitsDefaultApplicationJSON5TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "insufficient_permissions_error":
		*e = ListLimitsDefaultApplicationJSON5TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON5TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON5 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON5StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON5TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON4StatusEnum string

const (
	ListLimitsDefaultApplicationJSON4StatusEnumFourHundredAndTwentyTwo ListLimitsDefaultApplicationJSON4StatusEnum = "422"
)

func (e *ListLimitsDefaultApplicationJSON4StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "422":
		*e = ListLimitsDefaultApplicationJSON4StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON4StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON4TypeEnum string

const (
	ListLimitsDefaultApplicationJSON4TypeEnumIdempotencyUnprocessableError ListLimitsDefaultApplicationJSON4TypeEnum = "idempotency_unprocessable_error"
)

func (e *ListLimitsDefaultApplicationJSON4TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_unprocessable_error":
		*e = ListLimitsDefaultApplicationJSON4TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON4TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON4 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON4StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON4TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON3StatusEnum string

const (
	ListLimitsDefaultApplicationJSON3StatusEnumFourHundredAndNine ListLimitsDefaultApplicationJSON3StatusEnum = "409"
)

func (e *ListLimitsDefaultApplicationJSON3StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "409":
		*e = ListLimitsDefaultApplicationJSON3StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON3StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON3TypeEnum string

const (
	ListLimitsDefaultApplicationJSON3TypeEnumIdempotencyConflictError ListLimitsDefaultApplicationJSON3TypeEnum = "idempotency_conflict_error"
)

func (e *ListLimitsDefaultApplicationJSON3TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "idempotency_conflict_error":
		*e = ListLimitsDefaultApplicationJSON3TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON3TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON3 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON3StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON3TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON2StatusEnum string

const (
	ListLimitsDefaultApplicationJSON2StatusEnumFourHundredAndThree ListLimitsDefaultApplicationJSON2StatusEnum = "403"
)

func (e *ListLimitsDefaultApplicationJSON2StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "403":
		*e = ListLimitsDefaultApplicationJSON2StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON2StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON2TypeEnum string

const (
	ListLimitsDefaultApplicationJSON2TypeEnumEnvironmentMismatchError ListLimitsDefaultApplicationJSON2TypeEnum = "environment_mismatch_error"
)

func (e *ListLimitsDefaultApplicationJSON2TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "environment_mismatch_error":
		*e = ListLimitsDefaultApplicationJSON2TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON2TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON2 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON2StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON2TypeEnum   `json:"type"`
}

type ListLimitsDefaultApplicationJSON1StatusEnum string

const (
	ListLimitsDefaultApplicationJSON1StatusEnumFourHundredAndFour ListLimitsDefaultApplicationJSON1StatusEnum = "404"
)

func (e *ListLimitsDefaultApplicationJSON1StatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "404":
		*e = ListLimitsDefaultApplicationJSON1StatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON1StatusEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON1TypeEnum string

const (
	ListLimitsDefaultApplicationJSON1TypeEnumAPIMethodNotFoundError ListLimitsDefaultApplicationJSON1TypeEnum = "api_method_not_found_error"
)

func (e *ListLimitsDefaultApplicationJSON1TypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "api_method_not_found_error":
		*e = ListLimitsDefaultApplicationJSON1TypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListLimitsDefaultApplicationJSON1TypeEnum: %s", s)
	}
}

type ListLimitsDefaultApplicationJSON1 struct {
	Detail string                                      `json:"detail"`
	Status ListLimitsDefaultApplicationJSON1StatusEnum `json:"status"`
	Title  string                                      `json:"title"`
	Type   ListLimitsDefaultApplicationJSON1TypeEnum   `json:"type"`
}

type ListLimitsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Error
	Error interface{}
	// Limit List
	LimitList *shared.LimitList
}
