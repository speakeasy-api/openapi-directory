// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SingularConnectorOperatorEnum string

const (
	SingularConnectorOperatorEnumProjection          SingularConnectorOperatorEnum = "PROJECTION"
	SingularConnectorOperatorEnumEqualTo             SingularConnectorOperatorEnum = "EQUAL_TO"
	SingularConnectorOperatorEnumAddition            SingularConnectorOperatorEnum = "ADDITION"
	SingularConnectorOperatorEnumMultiplication      SingularConnectorOperatorEnum = "MULTIPLICATION"
	SingularConnectorOperatorEnumDivision            SingularConnectorOperatorEnum = "DIVISION"
	SingularConnectorOperatorEnumSubtraction         SingularConnectorOperatorEnum = "SUBTRACTION"
	SingularConnectorOperatorEnumMaskAll             SingularConnectorOperatorEnum = "MASK_ALL"
	SingularConnectorOperatorEnumMaskFirstN          SingularConnectorOperatorEnum = "MASK_FIRST_N"
	SingularConnectorOperatorEnumMaskLastN           SingularConnectorOperatorEnum = "MASK_LAST_N"
	SingularConnectorOperatorEnumValidateNonNull     SingularConnectorOperatorEnum = "VALIDATE_NON_NULL"
	SingularConnectorOperatorEnumValidateNonZero     SingularConnectorOperatorEnum = "VALIDATE_NON_ZERO"
	SingularConnectorOperatorEnumValidateNonNegative SingularConnectorOperatorEnum = "VALIDATE_NON_NEGATIVE"
	SingularConnectorOperatorEnumValidateNumeric     SingularConnectorOperatorEnum = "VALIDATE_NUMERIC"
	SingularConnectorOperatorEnumNoOp                SingularConnectorOperatorEnum = "NO_OP"
)

func (e *SingularConnectorOperatorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROJECTION":
		fallthrough
	case "EQUAL_TO":
		fallthrough
	case "ADDITION":
		fallthrough
	case "MULTIPLICATION":
		fallthrough
	case "DIVISION":
		fallthrough
	case "SUBTRACTION":
		fallthrough
	case "MASK_ALL":
		fallthrough
	case "MASK_FIRST_N":
		fallthrough
	case "MASK_LAST_N":
		fallthrough
	case "VALIDATE_NON_NULL":
		fallthrough
	case "VALIDATE_NON_ZERO":
		fallthrough
	case "VALIDATE_NON_NEGATIVE":
		fallthrough
	case "VALIDATE_NUMERIC":
		fallthrough
	case "NO_OP":
		*e = SingularConnectorOperatorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SingularConnectorOperatorEnum: %s", s)
	}
}
