"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import versionedpackage as shared_versionedpackage
from ..shared import windowsapplication as shared_windowsapplication
from ..shared import windowsquickfixengineeringpackage as shared_windowsquickfixengineeringpackage
from ..shared import windowsupdatepackage as shared_windowsupdatepackage
from ..shared import zypperpatch as shared_zypperpatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoftwarePackage:
    r"""Software package information of the operating system."""
    
    apt_package: Optional[shared_versionedpackage.VersionedPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aptPackage'), 'exclude': lambda f: f is None }})
    r"""Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers."""  
    cos_package: Optional[shared_versionedpackage.VersionedPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cosPackage'), 'exclude': lambda f: f is None }})
    r"""Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers."""  
    googet_package: Optional[shared_versionedpackage.VersionedPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googetPackage'), 'exclude': lambda f: f is None }})
    r"""Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers."""  
    qfe_package: Optional[shared_windowsquickfixengineeringpackage.WindowsQuickFixEngineeringPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qfePackage'), 'exclude': lambda f: f is None }})
    r"""Information related to a Quick Fix Engineering package. Fields are taken from Windows QuickFixEngineering Interface and match the source names: https://docs.microsoft.com/en-us/windows/win32/cimwin32prov/win32-quickfixengineering"""  
    windows_application: Optional[shared_windowsapplication.WindowsApplication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('windowsApplication'), 'exclude': lambda f: f is None }})
    r"""Contains information about a Windows application that is retrieved from the Windows Registry. For more information about these fields, see: https://docs.microsoft.com/en-us/windows/win32/msi/uninstall-registry-key"""  
    wua_package: Optional[shared_windowsupdatepackage.WindowsUpdatePackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wuaPackage'), 'exclude': lambda f: f is None }})
    r"""Details related to a Windows Update package. Field data and names are taken from Windows Update API IUpdate Interface: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Descriptive fields like title, and description are localized based on the locale of the VM being updated."""  
    yum_package: Optional[shared_versionedpackage.VersionedPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yumPackage'), 'exclude': lambda f: f is None }})
    r"""Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers."""  
    zypper_package: Optional[shared_versionedpackage.VersionedPackage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zypperPackage'), 'exclude': lambda f: f is None }})
    r"""Information related to the a standard versioned package. This includes package info for APT, Yum, Zypper, and Googet package managers."""  
    zypper_patch: Optional[shared_zypperpatch.ZypperPatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('zypperPatch'), 'exclude': lambda f: f is None }})
    r"""Details related to a Zypper Patch."""  
    