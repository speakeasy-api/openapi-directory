// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"
)

// GETEnableImageDeprecationActionEnum
type GETEnableImageDeprecationActionEnum string

const (
	GETEnableImageDeprecationActionEnumEnableImageDeprecation GETEnableImageDeprecationActionEnum = "EnableImageDeprecation"
)

func (e *GETEnableImageDeprecationActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EnableImageDeprecation":
		*e = GETEnableImageDeprecationActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableImageDeprecationActionEnum: %s", s)
	}
}

// GETEnableImageDeprecationVersionEnum
type GETEnableImageDeprecationVersionEnum string

const (
	GETEnableImageDeprecationVersionEnumTwoThousandAndSixteen1115 GETEnableImageDeprecationVersionEnum = "2016-11-15"
)

func (e *GETEnableImageDeprecationVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETEnableImageDeprecationVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableImageDeprecationVersionEnum: %s", s)
	}
}

type GETEnableImageDeprecationQueryParams struct {
	Action GETEnableImageDeprecationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The date and time to deprecate the AMI, in UTC, in the following format: <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z. If you specify a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.</p> <p>You canâ€™t specify a date in the past. The upper limit for <code>DeprecateAt</code> is 10 years from now, except for public AMIs, where the upper limit is 2 years from the creation date.</p>
	DeprecateAt time.Time `queryParam:"style=form,explode=true,name=DeprecateAt"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the AMI.
	ImageID string                               `queryParam:"style=form,explode=true,name=ImageId"`
	Version GETEnableImageDeprecationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETEnableImageDeprecationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETEnableImageDeprecationRequest struct {
	QueryParams GETEnableImageDeprecationQueryParams
	Headers     GETEnableImageDeprecationHeaders
}

type GETEnableImageDeprecationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
