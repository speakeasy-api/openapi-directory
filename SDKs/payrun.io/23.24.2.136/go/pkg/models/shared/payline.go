// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// PayLinePayLinePayCodeTypeEnum - The pay lines' pay code type
type PayLinePayLinePayCodeTypeEnum string

const (
	PayLinePayLinePayCodeTypeEnumNotSet    PayLinePayLinePayCodeTypeEnum = "NotSet"
	PayLinePayLinePayCodeTypeEnumPayment   PayLinePayLinePayCodeTypeEnum = "Payment"
	PayLinePayLinePayCodeTypeEnumDeduction PayLinePayLinePayCodeTypeEnum = "Deduction"
)

func (e PayLinePayLinePayCodeTypeEnum) ToPointer() *PayLinePayLinePayCodeTypeEnum {
	return &e
}

func (e *PayLinePayLinePayCodeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NotSet":
		fallthrough
	case "Payment":
		fallthrough
	case "Deduction":
		*e = PayLinePayLinePayCodeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PayLinePayLinePayCodeTypeEnum: %v", v)
	}
}

type PayLinePayLine struct {
	// The pay lines' calculator
	Calculator *string `json:"Calculator,omitempty"`
	// The pay lines' description
	Description *string `json:"Description,omitempty"`
	// The pay lines' generated
	Generated *time.Time `json:"Generated,omitempty"`
	// The pay lines' pay code
	PayCode *string `json:"PayCode,omitempty"`
	// The pay lines' pay code type
	PayCodeType *PayLinePayLinePayCodeTypeEnum `json:"PayCodeType,omitempty"`
	// The pay lines' pay run sequence
	PayRunSequence *int `json:"PayRunSequence,omitempty"`
	// The pay lines' payment date
	PaymentDate *types.Date `json:"PaymentDate,omitempty"`
	// The pay lines' tax period
	TaxPeriod *int `json:"TaxPeriod,omitempty"`
	// The pay lines' tax year
	TaxYear *int `json:"TaxYear,omitempty"`
	// The pay lines' value
	Value *float64 `json:"Value,omitempty"`
}

// PayLine - The pay line object.
type PayLine struct {
	PayLine *PayLinePayLine `json:"PayLine,omitempty"`
}
