/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class PepOrderSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=user_key",
  })
  userKey: string;
}

/**
 * Optional parameters to enhance search
 */
export class PepOrderRequestBody extends SpeakeasyBase {
  /**
   * Optional parameter for declaring alias names when doing a person search (seperated by commas)
   */
  @SpeakeasyMetadata({ data: "form, name=Aliases" })
  aliases?: string;

  /**
   * Optional name of Country to assist in identifying matches based upon location/geography.
   */
  @SpeakeasyMetadata({ data: "form, name=Country" })
  country?: string;

  /**
   * Optional parameter for date of birth name when doing a person search
   */
  @SpeakeasyMetadata({ data: "form, name=DOB" })
  dob?: string;

  /**
   * Optional parameter for last name when doing a person search
   */
  @SpeakeasyMetadata({ data: "form, name=FamilyName" })
  familyName?: string;

  /**
   * Optional parameter for restricting search when doing a person search (seperated by commas)
   */
  @SpeakeasyMetadata({ data: "form, name=Filters" })
  filters?: string;

  /**
   * Optional parameter for first name when doing a person search
   */
  @SpeakeasyMetadata({ data: "form, name=GivenName" })
  givenName?: string;

  /**
   * Optional Legal Entity Identifier for additional business identifier verification.
   */
  @SpeakeasyMetadata({ data: "form, name=LEI" })
  lei?: string;

  /**
   * Optional name of City or Locale to assist in identifying matches based upon location/geography.
   */
  @SpeakeasyMetadata({ data: "form, name=Locale" })
  locale?: string;

  /**
   * Optional parameter for selecting only specific media lists. By default all lists are queried
   */
  @SpeakeasyMetadata({ data: "form, name=Medialists" })
  medialists?: string;

  /**
   * Optional parameter for middle name when doing a person search
   */
  @SpeakeasyMetadata({ data: "form, name=MiddleName" })
  middleName?: string;

  /**
   * If this Pep Sanction Check should be continuesly monitored.
   */
  @SpeakeasyMetadata({ data: "form, name=Monitoring" })
  monitoring?: boolean;

  /**
   * Optional parameter for selecting only specific pep lists. By default all lists are queried
   */
  @SpeakeasyMetadata({ data: "form, name=Peplists" })
  peplists?: string;

  /**
   * Optional name of Region or State to assist in identifying matches based upon location/geography.
   */
  @SpeakeasyMetadata({ data: "form, name=Region" })
  region?: string;

  /**
   * Optional parameter for enabling SmartMatch to retrieve more results
   */
  @SpeakeasyMetadata({ data: "form, name=SmartMatch" })
  smartMatch?: boolean;

  /**
   * Optional parameter for selecting only specific watch lists. By default all lists are queried
   */
  @SpeakeasyMetadata({ data: "form, name=Watchlists" })
  watchlists?: string;

  /**
   * If Monitoring is enabled this parameter is required. This is where updates will be sent to
   */
  @SpeakeasyMetadata({ data: "form, name=Webhook" })
  webhook?: string;
}

/**
 * Type (Business or Person) of the requested Pep Sanction Check
 */
export enum PepOrderTypeEnum {
  Unknown = "",
  B = "B",
  P = "P",
}

export class PepOrderRequest extends SpeakeasyBase {
  /**
   * Optional parameters to enhance search
   */
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: PepOrderRequestBody;

  /**
   * Search string for the Pep Sanction Check
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=search",
  })
  search: string;

  /**
   * Type (Business or Person) of the requested Pep Sanction Check
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=type",
  })
  type: PepOrderTypeEnum;
}

/**
 * Detailed information about the error
 */
export class PepOrderDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: number;

  @SpeakeasyMetadata()
  @Expose({ name: "fault" })
  fault?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tag" })
  tag: string;
}

/**
 * Product details
 */
export class PepOrder200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "availability" })
  availability: string;

  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: string;

  @SpeakeasyMetadata()
  @Expose({ name: "countryCode" })
  countryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hasOptions" })
  hasOptions: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "options" })
  options: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "price" })
  price: number;

  @SpeakeasyMetadata()
  @Expose({ name: "provider" })
  provider: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sku" })
  sku: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class PepOrderResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Product details
   */
  @SpeakeasyMetadata()
  pepOrder200ApplicationJSONObject?: PepOrder200ApplicationJSON;

  /**
   * Detailed information about the error
   */
  @SpeakeasyMetadata()
  pepOrderDefaultApplicationJSONObject?: PepOrderDefaultApplicationJSON;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
