// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DailyFantasyScoringFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type DailyFantasyScoringFormatEnum string

const (
	DailyFantasyScoringFormatEnumXML  DailyFantasyScoringFormatEnum = "XML"
	DailyFantasyScoringFormatEnumJSON DailyFantasyScoringFormatEnum = "JSON"
)

func (e DailyFantasyScoringFormatEnum) ToPointer() *DailyFantasyScoringFormatEnum {
	return &e
}

func (e *DailyFantasyScoringFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "XML":
		fallthrough
	case "JSON":
		*e = DailyFantasyScoringFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DailyFantasyScoringFormatEnum: %v", v)
	}
}

type DailyFantasyScoringRequest struct {
	// The date of the contest for which you're pulling players
	//           <code>2014-SEP-21</code>,
	//           <code>2014-NOV-15</code>, etc
	Date string `pathParam:"style=simple,explode=false,name=date"`
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format DailyFantasyScoringFormatEnum `pathParam:"style=simple,explode=false,name=format"`
}

type DailyFantasyScoringResponse struct {
	ContentType          string
	DailyFantasyScorings []shared.DailyFantasyScoring
	StatusCode           int
	RawResponse          *http.Response
}
