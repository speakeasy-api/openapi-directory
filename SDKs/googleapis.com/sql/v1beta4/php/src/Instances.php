<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Instances 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaResponse
     */
	public function sqlInstancesAddServerCa(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesAddServerCaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneResponse
     */
	public function sqlInstancesClone(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/clone', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesCloneRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesCloneResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteResponse
     */
	public function sqlInstancesDelete(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterResponse
     */
	public function sqlInstancesDemoteMaster(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesDemoteMasterRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesDemoteMasterResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportResponse
     */
	public function sqlInstancesExport(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/export', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesExportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverResponse
     */
	public function sqlInstancesFailover(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/failover', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesFailoverRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesFailoverResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a resource containing information about a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetResponse
     */
	public function sqlInstancesGet(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->databaseInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DatabaseInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportResponse
     */
	public function sqlInstancesImport(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/import', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesImportRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertResponse
     */
	public function sqlInstancesInsert(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "databaseInstanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists instances under a given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListResponse
     */
	public function sqlInstancesList(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instancesListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstancesListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasResponse
     */
	public function sqlInstancesListServerCas(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesListServerCasResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instancesListServerCasResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstancesListServerCasResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Partially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchResponse
     */
	public function sqlInstancesPatch(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "databaseInstanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaResponse
     */
	public function sqlInstancesPromoteReplica(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesPromoteReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes all client certificates and generates a new server SSL certificate for the instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigResponse
     */
	public function sqlInstancesResetSslConfig(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesResetSslConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restarts a Cloud SQL instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartResponse
     */
	public function sqlInstancesRestart(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/restart', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupResponse
     */
	public function sqlInstancesRestoreBackup(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesRestoreBackupRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRestoreBackupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaResponse
     */
	public function sqlInstancesRotateServerCa(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesRotateServerCaRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesRotateServerCaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts the replication in the read replica instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaResponse
     */
	public function sqlInstancesStartReplica(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStartReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops the replication in the read replica instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaResponse
     */
	public function sqlInstancesStopReplica(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesStopReplicaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Truncate MySQL general and slow query log tables MySQL only.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogResponse
     */
	public function sqlInstancesTruncateLog(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "instancesTruncateLogRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesTruncateLogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateResponse
     */
	public function sqlInstancesUpdate(
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sql/v1beta4/projects/{project}/instances/{instance}', \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "databaseInstanceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SqlInstancesUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}