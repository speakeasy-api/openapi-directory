"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import replicationpendingmodifiedvalues as shared_replicationpendingmodifiedvalues
from ..shared import replicationsubnetgroup as shared_replicationsubnetgroup
from ..shared import vpcsecuritygroupmembership as shared_vpcsecuritygroupmembership
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationInstance:
    r"""Provides information that defines a replication instance."""
    
    allocated_storage: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AllocatedStorage'), 'exclude': lambda f: f is None }})  
    auto_minor_version_upgrade: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoMinorVersionUpgrade'), 'exclude': lambda f: f is None }})  
    availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AvailabilityZone'), 'exclude': lambda f: f is None }})  
    dns_name_servers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DnsNameServers'), 'exclude': lambda f: f is None }})  
    engine_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EngineVersion'), 'exclude': lambda f: f is None }})  
    free_until: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FreeUntil'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    instance_create_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCreateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    kms_key_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KmsKeyId'), 'exclude': lambda f: f is None }})  
    multi_az: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MultiAZ'), 'exclude': lambda f: f is None }})  
    network_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NetworkType'), 'exclude': lambda f: f is None }})  
    pending_modified_values: Optional[shared_replicationpendingmodifiedvalues.ReplicationPendingModifiedValues] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PendingModifiedValues'), 'exclude': lambda f: f is None }})  
    preferred_maintenance_window: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreferredMaintenanceWindow'), 'exclude': lambda f: f is None }})  
    publicly_accessible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PubliclyAccessible'), 'exclude': lambda f: f is None }})  
    replication_instance_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstanceArn'), 'exclude': lambda f: f is None }})  
    replication_instance_class: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstanceClass'), 'exclude': lambda f: f is None }})  
    replication_instance_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstanceIdentifier'), 'exclude': lambda f: f is None }})  
    replication_instance_ipv6_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstanceIpv6Addresses'), 'exclude': lambda f: f is None }})  
    replication_instance_private_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstancePrivateIpAddress'), 'exclude': lambda f: f is None }})  
    replication_instance_private_ip_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstancePrivateIpAddresses'), 'exclude': lambda f: f is None }})  
    replication_instance_public_ip_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstancePublicIpAddress'), 'exclude': lambda f: f is None }})  
    replication_instance_public_ip_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstancePublicIpAddresses'), 'exclude': lambda f: f is None }})  
    replication_instance_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationInstanceStatus'), 'exclude': lambda f: f is None }})  
    replication_subnet_group: Optional[shared_replicationsubnetgroup.ReplicationSubnetGroup] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReplicationSubnetGroup'), 'exclude': lambda f: f is None }})  
    secondary_availability_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecondaryAvailabilityZone'), 'exclude': lambda f: f is None }})  
    vpc_security_groups: Optional[list[shared_vpcsecuritygroupmembership.VpcSecurityGroupMembership]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcSecurityGroups'), 'exclude': lambda f: f is None }})  
    