"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ErrorHandlerErrorCodeEnum(str, Enum):
    r"""Error condition this handler applies to."""
    ERROR_CODE_UNSPECIFIED = 'ERROR_CODE_UNSPECIFIED'
    ERROR_CODE_DEFAULT = 'ERROR_CODE_DEFAULT'
    ERROR_CODE_OVER_QUOTA = 'ERROR_CODE_OVER_QUOTA'
    ERROR_CODE_DOS_API_DENIAL = 'ERROR_CODE_DOS_API_DENIAL'
    ERROR_CODE_TIMEOUT = 'ERROR_CODE_TIMEOUT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ErrorHandler:
    r"""Custom static error page to be served when an error occurs."""
    
    error_code: Optional[ErrorHandlerErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})
    r"""Error condition this handler applies to."""  
    mime_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mimeType'), 'exclude': lambda f: f is None }})
    r"""MIME type of file. Defaults to text/html."""  
    static_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('staticFile'), 'exclude': lambda f: f is None }})
    r"""Static file content to be served for this error."""  
    