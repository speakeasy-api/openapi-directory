// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ForwardInfoTargetEnum - Target type where this packet is forwarded to.
type ForwardInfoTargetEnum string

const (
	ForwardInfoTargetEnumTargetUnspecified          ForwardInfoTargetEnum = "TARGET_UNSPECIFIED"
	ForwardInfoTargetEnumPeeringVpc                 ForwardInfoTargetEnum = "PEERING_VPC"
	ForwardInfoTargetEnumVpnGateway                 ForwardInfoTargetEnum = "VPN_GATEWAY"
	ForwardInfoTargetEnumInterconnect               ForwardInfoTargetEnum = "INTERCONNECT"
	ForwardInfoTargetEnumGkeMaster                  ForwardInfoTargetEnum = "GKE_MASTER"
	ForwardInfoTargetEnumImportedCustomRouteNextHop ForwardInfoTargetEnum = "IMPORTED_CUSTOM_ROUTE_NEXT_HOP"
	ForwardInfoTargetEnumCloudSQLInstance           ForwardInfoTargetEnum = "CLOUD_SQL_INSTANCE"
	ForwardInfoTargetEnumAnotherProject             ForwardInfoTargetEnum = "ANOTHER_PROJECT"
)

func (e *ForwardInfoTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "TARGET_UNSPECIFIED":
		fallthrough
	case "PEERING_VPC":
		fallthrough
	case "VPN_GATEWAY":
		fallthrough
	case "INTERCONNECT":
		fallthrough
	case "GKE_MASTER":
		fallthrough
	case "IMPORTED_CUSTOM_ROUTE_NEXT_HOP":
		fallthrough
	case "CLOUD_SQL_INSTANCE":
		fallthrough
	case "ANOTHER_PROJECT":
		*e = ForwardInfoTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ForwardInfoTargetEnum: %s", s)
	}
}

// ForwardInfo - Details of the final state "forward" and associated resource.
type ForwardInfo struct {
	// URI of the resource that the packet is forwarded to.
	ResourceURI *string `json:"resourceUri,omitempty"`
	// Target type where this packet is forwarded to.
	Target *ForwardInfoTargetEnum `json:"target,omitempty"`
}
