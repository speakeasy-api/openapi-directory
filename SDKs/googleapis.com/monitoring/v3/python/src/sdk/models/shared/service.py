"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appengine as shared_appengine
from ..shared import basicservice as shared_basicservice
from ..shared import cloudendpoints as shared_cloudendpoints
from ..shared import cloudrun as shared_cloudrun
from ..shared import clusteristio as shared_clusteristio
from ..shared import gkenamespace as shared_gkenamespace
from ..shared import gkeservice as shared_gkeservice
from ..shared import gkeworkload as shared_gkeworkload
from ..shared import istiocanonicalservice as shared_istiocanonicalservice
from ..shared import meshistio as shared_meshistio
from ..shared import telemetry as shared_telemetry
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Service:
    r"""A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible."""
    
    app_engine: Optional[shared_appengine.AppEngine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appEngine'), 'exclude': lambda f: f is None }})
    r"""App Engine service. Learn more at https://cloud.google.com/appengine."""  
    basic_service: Optional[shared_basicservice.BasicService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicService'), 'exclude': lambda f: f is None }})
    r"""A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli)."""  
    cloud_endpoints: Optional[shared_cloudendpoints.CloudEndpoints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudEndpoints'), 'exclude': lambda f: f is None }})
    r"""Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints."""  
    cloud_run: Optional[shared_cloudrun.CloudRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudRun'), 'exclude': lambda f: f is None }})
    r"""Cloud Run service. Learn more at https://cloud.google.com/run."""  
    cluster_istio: Optional[shared_clusteristio.ClusterIstio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterIstio'), 'exclude': lambda f: f is None }})
    r"""Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type."""  
    custom: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom'), 'exclude': lambda f: f is None }})
    r"""Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name used for UI elements listing this Service."""  
    gke_namespace: Optional[shared_gkenamespace.GkeNamespace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeNamespace'), 'exclude': lambda f: f is None }})
    r"""GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod)."""  
    gke_service: Optional[shared_gkeservice.GkeService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeService'), 'exclude': lambda f: f is None }})
    r"""GKE Service. The \\"service\\" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service)."""  
    gke_workload: Optional[shared_gkeworkload.GkeWorkload] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeWorkload'), 'exclude': lambda f: f is None }})
    r"""A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod)."""  
    istio_canonical_service: Optional[shared_istiocanonicalservice.IstioCanonicalService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('istioCanonicalService'), 'exclude': lambda f: f is None }})
    r"""Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type."""  
    mesh_istio: Optional[shared_meshistio.MeshIstio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meshIstio'), 'exclude': lambda f: f is None }})
    r"""Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]"""  
    telemetry: Optional[shared_telemetry.Telemetry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telemetry'), 'exclude': lambda f: f is None }})
    r"""Configuration for how to query telemetry on a Service."""  
    user_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLabels'), 'exclude': lambda f: f is None }})
    r"""Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceInput:
    r"""A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible."""
    
    app_engine: Optional[shared_appengine.AppEngine] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appEngine'), 'exclude': lambda f: f is None }})
    r"""App Engine service. Learn more at https://cloud.google.com/appengine."""  
    basic_service: Optional[shared_basicservice.BasicService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basicService'), 'exclude': lambda f: f is None }})
    r"""A well-known service type, defined by its service type and service labels. Documentation and examples here (https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/api-structures#basic-svc-w-basic-sli)."""  
    cloud_endpoints: Optional[shared_cloudendpoints.CloudEndpoints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudEndpoints'), 'exclude': lambda f: f is None }})
    r"""Cloud Endpoints service. Learn more at https://cloud.google.com/endpoints."""  
    cloud_run: Optional[shared_cloudrun.CloudRun] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudRun'), 'exclude': lambda f: f is None }})
    r"""Cloud Run service. Learn more at https://cloud.google.com/run."""  
    cluster_istio: Optional[shared_clusteristio.ClusterIstio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusterIstio'), 'exclude': lambda f: f is None }})
    r"""Istio service scoped to a single Kubernetes cluster. Learn more at https://istio.io. Clusters running OSS Istio will have their services ingested as this type."""  
    custom: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom'), 'exclude': lambda f: f is None }})
    r"""Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Name used for UI elements listing this Service."""  
    gke_namespace: Optional[shared_gkenamespace.GkeNamespaceInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeNamespace'), 'exclude': lambda f: f is None }})
    r"""GKE Namespace. The field names correspond to the resource metadata labels on monitored resources that fall under a namespace (for example, k8s_container or k8s_pod)."""  
    gke_service: Optional[shared_gkeservice.GkeServiceInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeService'), 'exclude': lambda f: f is None }})
    r"""GKE Service. The \\"service\\" here represents a Kubernetes service object (https://kubernetes.io/docs/concepts/services-networking/service). The field names correspond to the resource labels on k8s_service monitored resources (https://cloud.google.com/monitoring/api/resources#tag_k8s_service)."""  
    gke_workload: Optional[shared_gkeworkload.GkeWorkloadInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gkeWorkload'), 'exclude': lambda f: f is None }})
    r"""A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod)."""  
    istio_canonical_service: Optional[shared_istiocanonicalservice.IstioCanonicalService] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('istioCanonicalService'), 'exclude': lambda f: f is None }})
    r"""Canonical service scoped to an Istio mesh. Anthos clusters running ASM >= 1.6.8 will have their services ingested as this type."""  
    mesh_istio: Optional[shared_meshistio.MeshIstio] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meshIstio'), 'exclude': lambda f: f is None }})
    r"""Istio service scoped to an Istio mesh. Anthos clusters running ASM < 1.6.8 will have their services ingested as this type."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]"""  
    telemetry: Optional[shared_telemetry.Telemetry] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('telemetry'), 'exclude': lambda f: f is None }})
    r"""Configuration for how to query telemetry on a Service."""  
    user_labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLabels'), 'exclude': lambda f: f is None }})
    r"""Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value."""  
    