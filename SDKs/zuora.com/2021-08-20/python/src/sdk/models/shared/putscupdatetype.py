"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chargemodelconfigurationtype as shared_chargemodelconfigurationtype
from ..shared import posttiertype as shared_posttiertype
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PUTScUpdateType:
    r"""Container for custom fields of a Rate Plan Charge object."""
    
    rate_plan_charge_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ratePlanChargeId') }})
    r"""ID of a rate-plan charge for this subscription."""  
    billing_period_alignment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billingPeriodAlignment'), 'exclude': lambda f: f is None }})
    r"""Aligns charges within the same subscription if multiple charges begin on different dates.
    
    Values:
    
    * `AlignToCharge`
    * `AlignToSubscriptionStart`
    * `AlignToTermStart`
    
    Available for the following charge types:
    
    * Recurring
    * Usage-based
    """  
    charge_model_configuration: Optional[shared_chargemodelconfigurationtype.ChargeModelConfigurationType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('chargeModelConfiguration'), 'exclude': lambda f: f is None }})
    r"""Container for charge model configuration data.
    
    **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
    """  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the charge."""  
    included_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('includedUnits'), 'exclude': lambda f: f is None }})
    r"""Specifies the number of units in the base set of units for this charge. Must be >=0.
    
    Available for the following charge types for the Overage charge model:
    
    * `Recurring`
    * `Usage-based`
    """  
    overage_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overagePrice'), 'exclude': lambda f: f is None }})
    r"""Price for units over the allowed amount.
    
    Available for the following charge type for the Overage and Tiered with Overage charge models:
    
    * Usage-based
    """  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Price for units in the subscription rate plan.
    
    Supports all charge types for the Flat Fee and Per Unit charge models
    """  
    price_change_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceChangeOption'), 'exclude': lambda f: f is None }})
    r"""Applies an automatic price change when a termed subscription is renewed. The Billing Admin setting **Enable Automatic Price Change When Subscriptions are Renewed?** must be set to Yes to use this field.
    
    Values:
    
    * `NoChange` (default)
    * `SpecificPercentageValue`
    * `UseLatestProductCatalogPricing`
    
    Available for the following charge types:
    
    * Recurring
    * Usage-based
    
    Not available for the Fixed-Amount Discount charge model.
    """  
    price_increase_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceIncreasePercentage'), 'exclude': lambda f: f is None }})
    r"""Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.
    
    Decimal between `-100` and `100`.
    
    Available for the following charge types:
    
    * Recurring
    * Usage-based
    
    Not available for the Fixed-Amount Discount charge model.
    """  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quantity'), 'exclude': lambda f: f is None }})
    r"""Quantity of units; must be greater than zero."""  
    tiers: Optional[list[shared_posttiertype.POSTTierType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tiers'), 'exclude': lambda f: f is None }})
    r"""Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:
    
    * One-time
    * Recurring
    * Usage-based
    """  
    trigger_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to USD.
    
    `triggerDate` cannot be updated for the following using the REST update subscription call:
    
    * One-time charge type
    * Discount-Fixed Amount charge model
    * Discount-Percentage charge model
    """  
    trigger_event: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerEvent'), 'exclude': lambda f: f is None }})
    r"""Specifies when to start billing the customer for the charge.
    
    Values:
    
    * `UCE`
    * `USA`
    * `UCA`
    * `USD`
    
    This is the date when charge changes in the REST request become effective.
    
    `triggerEvent` cannot be updated for the following using the REST update subscription call:
    
    * One-time charge type
    * Discount-Fixed Amount charge model
    * Discount-Percentage charge model
    """  
    