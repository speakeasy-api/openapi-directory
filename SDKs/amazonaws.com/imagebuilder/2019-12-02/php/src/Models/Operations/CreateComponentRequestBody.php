<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class CreateComponentRequestBody
{
    /**
     * The change description of the component. Describes what change has been made in this version, or what makes this version different from other versions of this component.
     * 
     * @var ?string $changeDescription
     */
	#[\JMS\Serializer\Annotation\SerializedName('changeDescription')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $changeDescription = null;
    
    /**
     * The idempotency token of the component.
     * 
     * @var string $clientToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientToken')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $clientToken;
    
    /**
     * Component <code>data</code> contains inline YAML document content for the component. Alternatively, you can specify the <code>uri</code> of a YAML document file stored in Amazon S3. However, you cannot specify both properties.
     * 
     * @var ?string $data
     */
	#[\JMS\Serializer\Annotation\SerializedName('data')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $data = null;
    
    /**
     * Describes the contents of the component.
     * 
     * @var ?string $description
     */
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $description = null;
    
    /**
     * The ID of the KMS key that is used to encrypt this component.
     * 
     * @var ?string $kmsKeyId
     */
	#[\JMS\Serializer\Annotation\SerializedName('kmsKeyId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kmsKeyId = null;
    
    /**
     * The name of the component.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * The operating system platform of the component.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\CreateComponentRequestBodyPlatformEnum $platform
     */
	#[\JMS\Serializer\Annotation\SerializedName('platform')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\CreateComponentRequestBodyPlatformEnum>')]
    public CreateComponentRequestBodyPlatformEnum $platform;
    
    /**
     * <p>The semantic version of the component. This version follows the semantic version syntax.</p> <note> <p>The semantic version has four nodes: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;/&lt;build&gt;. You can assign values for the first three, and can filter on all of them.</p> <p> <b>Assignment:</b> For the first three nodes you can assign any positive integer value, including zero, with an upper limit of 2^30-1, or 1073741823 for each node. Image Builder automatically assigns the build number to the fourth node.</p> <p> <b>Patterns:</b> You can use any numeric pattern that adheres to the assignment requirements for the nodes that you can assign. For example, you might choose a software version pattern, such as 1.0.0, or a date, such as 2021.01.01.</p> </note>
     * 
     * @var string $semanticVersion
     */
	#[\JMS\Serializer\Annotation\SerializedName('semanticVersion')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $semanticVersion;
    
    /**
     * The operating system (OS) version supported by the component. If the OS information is available, a prefix match is performed against the base image OS version during image recipe creation.
     * 
     * @var ?array<string> $supportedOsVersions
     */
	#[\JMS\Serializer\Annotation\SerializedName('supportedOsVersions')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $supportedOsVersions = null;
    
    /**
     * The tags that apply to the component.
     * 
     * @var ?array<string, string> $tags
     */
	#[\JMS\Serializer\Annotation\SerializedName('tags')]
    #[\JMS\Serializer\Annotation\Type('array<string, string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $tags = null;
    
    /**
     * <p>The <code>uri</code> of a YAML component document file. This must be an S3 URL (<code>s3://bucket/key</code>), and the requester must have permission to access the S3 bucket it points to. If you use Amazon S3, you can specify component content up to your service quota.</p> <p>Alternatively, you can specify the YAML document inline, using the component <code>data</code> property. You cannot specify both properties.</p>
     * 
     * @var ?string $uri
     */
	#[\JMS\Serializer\Annotation\SerializedName('uri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $uri = null;
    
	public function __construct()
	{
		$this->changeDescription = null;
		$this->clientToken = "";
		$this->data = null;
		$this->description = null;
		$this->kmsKeyId = null;
		$this->name = "";
		$this->platform = \OpenAPI\OpenAPI\Models\Operations\CreateComponentRequestBodyPlatformEnum::WINDOWS;
		$this->semanticVersion = "";
		$this->supportedOsVersions = null;
		$this->tags = null;
		$this->uri = null;
	}
}
