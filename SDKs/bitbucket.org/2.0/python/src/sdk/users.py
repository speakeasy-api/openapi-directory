"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Users:
    r"""The users resource allows you to access public information
    associated with a user account. Most resources in the users
    endpoint have been deprecated in favor of workspaces.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_user(self) -> operations.GetUserResponse:
        r"""Get current user
        Returns the currently logged in user.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.account = out
        elif http_res.status_code == 401:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_user_emails(self) -> operations.GetUserEmailsResponse:
        r"""List email addresses for current user
        Returns all the authenticated user's email addresses. Both
        confirmed and unconfirmed.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/user/emails'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEmailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_user_emails_email_(self, request: operations.GetUserEmailsEmailRequest, security: operations.GetUserEmailsEmailSecurity) -> operations.GetUserEmailsEmailResponse:
        r"""Get an email address for current user
        Returns details about a specific one of the authenticated user's
        email addresses.
        
        Details describe whether the address has been confirmed by the user and
        whether it is the user's primary address or not.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserEmailsEmailRequest, base_url, '/user/emails/{email}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserEmailsEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    def get_users_selected_user_(self, request: operations.GetUsersSelectedUserRequest, security: operations.GetUsersSelectedUserSecurity) -> operations.GetUsersSelectedUserResponse:
        r"""Get a user
        Gets the public information associated with a user account.
        
        If the user's profile is private, `location`, `website` and
        `created_on` elements are omitted.
        
        Note that the user object returned by this operation is changing significantly, due to privacy changes.
        See the [announcement](https://developer.atlassian.com/cloud/bitbucket/bitbucket-api-changes-gdpr/#changes-to-bitbucket-user-objects) for details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUsersSelectedUserRequest, base_url, '/users/{selected_user}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUsersSelectedUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.account = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.error = out

        return res

    