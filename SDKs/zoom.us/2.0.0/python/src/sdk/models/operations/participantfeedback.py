"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ParticipantFeedbackTypeEnum(str, Enum):
    r"""Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
    
    If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
    """
    PAST = 'past'
    PAST_ONE = 'pastOne'
    LIVE = 'live'


@dataclasses.dataclass
class ParticipantFeedbackRequest:
    
    meeting_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID or the meeting UUID.  If a meeting ID is provided in the request instead of a UUID, the response will be for the latest meeting instance.
    
    If a UUID starts with \"/\" or contains \"//\" (example: \"/ajXp112QmuoKj4854875==\\"), you must **double encode** the UUID before making an API request.
    """  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    type: Optional[ParticipantFeedbackTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Specify a value to get the response for the corresponding meeting type. The value of this field can be one of the following:<br> <br>`past` - Meeting that already occurred in the specified date range.<br>`pastOne` - Past meetings that were attended by only one user. <br>`live` - Live meetings.<br><br>
    
    If you do not provide this field, the default value will be `live` and thus, the API will only query responses for live meetings.
    """  
    
class ParticipantFeedback200ApplicationXMLParticipantsQualityEnum(str, Enum):
    r"""Feedback submitted by the participant.
    
    * `GOOD`: Thumbs up.
    * `NOT GOOD`: Thumbs down.
    """
    GOOD = 'GOOD'
    NOT_GOOD = 'NOT GOOD'


@dataclasses.dataclass
class ParticipantFeedback200ApplicationXMLParticipants:
    
    date_time: Optional[datetime] = dataclasses.field(default=None)
    r"""Date and time at which the feedback was submitted."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""Email address of the participant."""  
    quality: Optional[ParticipantFeedback200ApplicationXMLParticipantsQualityEnum] = dataclasses.field(default=None)
    r"""Feedback submitted by the participant.
    
    * `GOOD`: Thumbs up.
    * `NOT GOOD`: Thumbs down.
    """  
    user_id: Optional[str] = dataclasses.field(default=None)
    r"""User ID of the participant."""  
    

@dataclasses.dataclass
class ParticipantFeedback200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>"""
    
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    participants: Optional[list[ParticipantFeedback200ApplicationXMLParticipants]] = dataclasses.field(default=None)  
    
class ParticipantFeedback200ApplicationJSONParticipantsQualityEnum(str, Enum):
    r"""Feedback submitted by the participant.
    
    * `GOOD`: Thumbs up.
    * `NOT GOOD`: Thumbs down.
    """
    GOOD = 'GOOD'
    NOT_GOOD = 'NOT GOOD'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParticipantFeedback200ApplicationJSONParticipants:
    
    date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time at which the feedback was submitted."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""Email address of the participant."""  
    quality: Optional[ParticipantFeedback200ApplicationJSONParticipantsQualityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Feedback submitted by the participant.
    
    * `GOOD`: Thumbs up.
    * `NOT GOOD`: Thumbs down.
    """  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID of the participant."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParticipantFeedback200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>"""
    
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    participants: Optional[list[ParticipantFeedback200ApplicationJSONParticipants]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('participants'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ParticipantFeedbackResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    participant_feedback_200_application_json_object: Optional[ParticipantFeedback200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    