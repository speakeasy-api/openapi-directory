"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import itemdetail as shared_itemdetail
from ..shared import itemlist as shared_itemlist
from ..shared import pageentry as shared_pageentry
from ..shared import pagemetadata as shared_pagemetadata
from ..shared import theme as shared_theme
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Page:
    r"""The page requested."""
    
    entries: list[shared_pageentry.PageEntry] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('entries') }})
    r"""Entries of a page"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier for the page."""  
    is_static: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isStatic') }})
    r"""True if this page is static and doesn't have any dynamic content to load.
    
    Static pages don't need to go back to the page endpoint to load page content
    instead the page summary loaded with the sitemap should be enough to determine
    the page template type and render based on this.
    """  
    is_system_page: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSystemPage') }})
    r"""True if this page is a system page type.
    
    **DEPRECATED** This property doesn't have any real use in client applications
    anymore so shouldn't be used. It especially shouldn't be used to determine if
    a page is static or not. Use the `isStatic` property instead.
    """  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Unique path for the page."""  
    template: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template') }})
    r"""Identifier for of the page template to render this page."""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Title of the page."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customFields'), 'exclude': lambda f: f is None }})
    r"""A map of custom fields defined by a curator for a page."""  
    item: Optional[shared_itemdetail.ItemDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('item'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""Key used to lookup a known page."""  
    list_: Optional[shared_itemlist.ItemList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('list'), 'exclude': lambda f: f is None }})
    r"""A pageable list of items."""  
    metadata: Optional[shared_pagemetadata.PageMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Metadata associated with a page. Primarily intended for SEO usage."""  
    themes: Optional[list[shared_theme.Theme]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('themes'), 'exclude': lambda f: f is None }})  
    