"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import datasourcetype_enum as shared_datasourcetype_enum
from ..shared import dynamodbdatasourceconfig as shared_dynamodbdatasourceconfig
from ..shared import elasticsearchdatasourceconfig as shared_elasticsearchdatasourceconfig
from ..shared import eventbridgedatasourceconfig as shared_eventbridgedatasourceconfig
from ..shared import httpdatasourceconfig as shared_httpdatasourceconfig
from ..shared import lambdadatasourceconfig as shared_lambdadatasourceconfig
from ..shared import opensearchservicedatasourceconfig as shared_opensearchservicedatasourceconfig
from ..shared import relationaldatabasedatasourceconfig as shared_relationaldatabasedatasourceconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DataSource:
    r"""Describes a data source."""
    
    data_source_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataSourceArn'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    dynamodb_config: Optional[shared_dynamodbdatasourceconfig.DynamodbDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dynamodbConfig'), 'exclude': lambda f: f is None }})  
    elasticsearch_config: Optional[shared_elasticsearchdatasourceconfig.ElasticsearchDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elasticsearchConfig'), 'exclude': lambda f: f is None }})  
    event_bridge_config: Optional[shared_eventbridgedatasourceconfig.EventBridgeDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventBridgeConfig'), 'exclude': lambda f: f is None }})  
    http_config: Optional[shared_httpdatasourceconfig.HTTPDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpConfig'), 'exclude': lambda f: f is None }})  
    lambda_config: Optional[shared_lambdadatasourceconfig.LambdaDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lambdaConfig'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    open_search_service_config: Optional[shared_opensearchservicedatasourceconfig.OpenSearchServiceDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('openSearchServiceConfig'), 'exclude': lambda f: f is None }})  
    relational_database_config: Optional[shared_relationaldatabasedatasourceconfig.RelationalDatabaseDataSourceConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationalDatabaseConfig'), 'exclude': lambda f: f is None }})  
    service_role_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRoleArn'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_datasourcetype_enum.DataSourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    