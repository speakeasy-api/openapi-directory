<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class AddressRequests 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * deleteAddress
     * 
     * Deletes an existing ethereum address. Be careful when using this function.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
     */
	public function deleteAddress(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deleteAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deleteAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * exportAddress
     * 
     * Returns all ethereum addresses created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAddressResponse
     */
	public function exportAddress(
        \OpenAPI\OpenAPI\Models\Operations\ExportAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/exportAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "exportAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->exportAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExportAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * importAddress
     * 
     * Returns all ethereum addresses created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ImportAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportAddressResponse
     */
	public function importAddress(
        \OpenAPI\OpenAPI\Models\Operations\ImportAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/importAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAddresses
     * 
     * Returns all ethereum addresses created with an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAddressesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAddressesResponse
     */
	public function listAddresses(
        \OpenAPI\OpenAPI\Models\Operations\ListAddressesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAddressesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/listAddresses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAddressesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAddresses = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAddresses', 'json');
            }
        }

        return $response;
    }
	
    /**
     * newAddress
     * 
     * Generates a new ethereum addresses you can use to send or receive funds. Do not lose the password! We can't restore access to an address if you lose it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NewAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\NewAddressResponse
     */
	public function newAddress(
        \OpenAPI\OpenAPI\Models\Operations\NewAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\NewAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/newAddress');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "newAddressRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NewAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\NewAddress', 'json');
            }
        }

        return $response;
    }
}