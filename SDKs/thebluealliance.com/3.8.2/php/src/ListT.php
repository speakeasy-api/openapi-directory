<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ListT 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Gets a list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
     */
	public function getDistrictEvents(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of event keys for events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
     */
	public function getDistrictEventsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictEventsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
     */
	public function getDistrictEventsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/events/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictEventsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of team district rankings for the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
     */
	public function getDistrictRankings(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/rankings', \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictRankingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->districtRankings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DistrictRanking>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
     */
	public function getDistrictTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
     */
	public function getDistrictTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getDistrictTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in events in the given district.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
     */
	public function getDistrictTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/district/{district_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistrictTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
     */
	public function getEventTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` keys that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
     */
	public function getEventTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of `Team` objects that competed in the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
     */
	public function getEventTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for teams competing at the given event.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
     */
	public function getEventTeamsStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/event/{event_key}/teams/statuses', \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventTeamsStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventTeamsStatuses200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of events in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse
     */
	public function getEventsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->events = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Event>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of event keys in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse
     */
	public function getEventsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}/keys', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEventsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a short-form list of events in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse
     */
	public function getEventsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/events/{year}/simple', \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetEventsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->eventSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EventSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a key-value list of the event statuses for events this team has competed at in the given year.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
     */
	public function getTeamEventsStatusesByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/team/{team_key}/events/{year}/statuses', \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamEventsStatusesByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamEventsStatusesByYear200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, OpenAPI\OpenAPI\Models\Shared\TeamEventStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse
     */
	public function getTeams(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}', \OpenAPI\OpenAPI\Models\Operations\GetTeamsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse
     */
	public function getTeamsByYear(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teams = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Team>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list Team Keys that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse
     */
	public function getTeamsByYearKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamsByYearKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse
     */
	public function getTeamsByYearSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{year}/{page_num}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsByYearSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse
     */
	public function getTeamsKeys(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}/keys', \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTeamsKeys200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse
     */
	public function getTeamsSimple(
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/teams/{page_num}/simple', \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTeamsSimpleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->teamSimples = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\TeamSimple>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 304 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}