"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DealerAPI:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dealer_search(self, request: operations.DealerSearchRequest) -> operations.DealerSearchResponse:
        r"""Find car dealers around
        The dealers API returns a list of dealers around a given point and radius.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dealers/car'
        
        query_params = utils.get_query_params(operations.DealerSearchRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DealerSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DealersResponse])
                res.dealers_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealer(self, request: operations.GetDealerRequest) -> operations.GetDealerResponse:
        r"""Dealer by id
        Get a particular dealer's information by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDealerRequest, base_url, '/dealer/car/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDealerRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dealer])
                res.dealer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealer_car_uk_id_(self, request: operations.GetDealerCarUkIDRequest) -> operations.GetDealerCarUkIDResponse:
        r"""Dealer by id
        Get a particular dealer's information by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDealerCarUkIDRequest, base_url, '/dealer/car/uk/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDealerCarUkIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealerCarUkIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dealer])
                res.dealer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealer_heavy_equipment_id_(self, request: operations.GetDealerHeavyEquipmentIDRequest) -> operations.GetDealerHeavyEquipmentIDResponse:
        r"""Dealer by id
        Get a particular dealer's information by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDealerHeavyEquipmentIDRequest, base_url, '/dealer/heavy-equipment/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDealerHeavyEquipmentIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealerHeavyEquipmentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dealer])
                res.dealer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealer_motorcycle_id_(self, request: operations.GetDealerMotorcycleIDRequest) -> operations.GetDealerMotorcycleIDResponse:
        r"""Dealer by id
        Get a particular dealer's information by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDealerMotorcycleIDRequest, base_url, '/dealer/motorcycle/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDealerMotorcycleIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealerMotorcycleIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dealer])
                res.dealer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealer_rv_id_(self, request: operations.GetDealerRvIDRequest) -> operations.GetDealerRvIDResponse:
        r"""Dealer by id
        Get a particular dealer's information by its id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDealerRvIDRequest, base_url, '/dealer/rv/{id}', request)
        
        query_params = utils.get_query_params(operations.GetDealerRvIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealerRvIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Dealer])
                res.dealer = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealers_car_uk(self, request: operations.GetDealersCarUkRequest) -> operations.GetDealersCarUkResponse:
        r"""Find car dealers around
        The dealers API returns a list of dealers around a given point and radius.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dealers/car/uk'
        
        query_params = utils.get_query_params(operations.GetDealersCarUkRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealersCarUkResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DealersResponse])
                res.dealers_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealers_heavy_equipment(self, request: operations.GetDealersHeavyEquipmentRequest) -> operations.GetDealersHeavyEquipmentResponse:
        r"""Find car dealers around
        The dealers API returns a list of dealers around a given point and radius.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dealers/heavy-equipment'
        
        query_params = utils.get_query_params(operations.GetDealersHeavyEquipmentRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealersHeavyEquipmentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DealersResponse])
                res.dealers_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealers_motorcycle(self, request: operations.GetDealersMotorcycleRequest) -> operations.GetDealersMotorcycleResponse:
        r"""Find car dealers around
        The dealers API returns a list of dealers around a given point and radius.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dealers/motorcycle'
        
        query_params = utils.get_query_params(operations.GetDealersMotorcycleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealersMotorcycleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DealersResponse])
                res.dealers_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_dealers_rv(self, request: operations.GetDealersRvRequest) -> operations.GetDealersRvResponse:
        r"""Find car dealers around
        The dealers API returns a list of dealers around a given point and radius.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/dealers/rv'
        
        query_params = utils.get_query_params(operations.GetDealersRvRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDealersRvResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DealersResponse])
                res.dealers_response = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    