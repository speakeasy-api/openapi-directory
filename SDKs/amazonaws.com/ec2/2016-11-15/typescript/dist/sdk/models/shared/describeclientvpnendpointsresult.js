"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DescribeClientVpnEndpointsResult = exports.DescribeClientVpnEndpointsResultClientVpnEndpoints = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsTags = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsStatus = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The target network type.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum["Vpc"] = "vpc";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworksNetworkTypeEnum = {}));
/**
 * Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks.prototype, "networkId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks.prototype, "networkType", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks = DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks;
/**
 * Information about the Active Directory, if applicable.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory.prototype, "directoryId", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory = DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory;
/**
 * Information about the IAM SAML identity provider, if applicable.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication.prototype, "samlProviderArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication.prototype, "selfServiceSamlProviderArn", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication = DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication;
/**
 * Information about the authentication certificates, if applicable.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication.prototype, "clientRootCertificateChain", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication = DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication;
/**
 * The authentication type used.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum["CertificateAuthentication"] = "certificate-authentication";
    DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum["DirectoryServiceAuthentication"] = "directory-service-authentication";
    DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum["FederatedAuthentication"] = "federated-authentication";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsTypeEnum = {}));
/**
 * Describes the authentication methods used by a Client VPN endpoint. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/client-authentication.html">Authentication</a> in the <i>Client VPN Administrator Guide</i>.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsActiveDirectory)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions.prototype, "activeDirectory", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsFederatedAuthentication)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions.prototype, "federatedAuthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptionsMutualAuthentication)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions.prototype, "mutualAuthentication", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions.prototype, "type", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions = DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions;
/**
 * The status code.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum["Applying"] = "applying";
    DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum["Applied"] = "applied";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatusCodeEnum = {}));
/**
 * The status of any updates to the client connect options.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus.prototype, "message", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus = DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus;
/**
 * The options for managing connection authorization for new client connections.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions.prototype, "enabled", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions.prototype, "lambdaFunctionArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptionsStatus)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions.prototype, "status", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions = DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions;
/**
 * Options for enabling a customizable text banner that will be displayed on Amazon Web Services provided clients when a VPN session is established.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions.prototype, "bannerText", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions.prototype, "enabled", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions = DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions;
/**
 * Information about the client connection logging options for the Client VPN endpoint.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions.prototype, "cloudwatchLogGroup", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions.prototype, "cloudwatchLogStream", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions.prototype, "enabled", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions = DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions;
/**
 * <p>The state of the Client VPN endpoint. Possible states include:</p> <ul> <li> <p> <code>pending-associate</code> - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>available</code> - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.</p> </li> <li> <p> <code>deleting</code> - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>deleted</code> - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.</p> </li> </ul>
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum["PendingAssociate"] = "pending-associate";
    DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum["Available"] = "available";
    DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum["Deleting"] = "deleting";
    DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum["Deleted"] = "deleted";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsStatusCodeEnum = {}));
/**
 * The current state of the Client VPN endpoint.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsStatus = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsStatus, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsStatus.prototype, "code", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsStatus.prototype, "message", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsStatus;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsStatus = DescribeClientVpnEndpointsResultClientVpnEndpointsStatus;
/**
 * Describes a tag.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsTags = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpointsTags, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpointsTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpointsTags.prototype, "value", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpointsTags;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpointsTags = DescribeClientVpnEndpointsResultClientVpnEndpointsTags;
/**
 * The transport protocol used by the Client VPN endpoint.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum["Tcp"] = "tcp";
    DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum["Udp"] = "udp";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsTransportProtocolEnum = {}));
/**
 * The protocol used by the VPN session.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum;
(function (DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum) {
    DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum["Openvpn"] = "openvpn";
})(DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum = exports.DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum || (exports.DescribeClientVpnEndpointsResultClientVpnEndpointsVpnProtocolEnum = {}));
/**
 * Describes a Client VPN endpoint.
 */
var DescribeClientVpnEndpointsResultClientVpnEndpoints = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResultClientVpnEndpoints, _super);
    function DescribeClientVpnEndpointsResultClientVpnEndpoints() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeClientVpnEndpointsResultClientVpnEndpointsAssociatedTargetNetworks,
        }),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "associatedTargetNetworks", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeClientVpnEndpointsResultClientVpnEndpointsAuthenticationOptions,
        }),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "authenticationOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "clientCidrBlock", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsClientConnectOptions)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "clientConnectOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsClientLoginBannerOptions)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "clientLoginBannerOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "clientVpnEndpointId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsConnectionLogOptions)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "connectionLogOptions", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "creationTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "deletionTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "dnsName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "dnsServers", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "securityGroupIds", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "selfServicePortalUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "serverCertificateArn", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "sessionTimeoutHours", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Boolean)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "splitTunnel", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", DescribeClientVpnEndpointsResultClientVpnEndpointsStatus)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeClientVpnEndpointsResultClientVpnEndpointsTags,
        }),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "transportProtocol", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "vpcId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "vpnPort", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResultClientVpnEndpoints.prototype, "vpnProtocol", void 0);
    return DescribeClientVpnEndpointsResultClientVpnEndpoints;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResultClientVpnEndpoints = DescribeClientVpnEndpointsResultClientVpnEndpoints;
/**
 * Success
 */
var DescribeClientVpnEndpointsResult = /** @class */ (function (_super) {
    __extends(DescribeClientVpnEndpointsResult, _super);
    function DescribeClientVpnEndpointsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: DescribeClientVpnEndpointsResultClientVpnEndpoints,
        }),
        __metadata("design:type", Array)
    ], DescribeClientVpnEndpointsResult.prototype, "clientVpnEndpoints", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], DescribeClientVpnEndpointsResult.prototype, "nextToken", void 0);
    return DescribeClientVpnEndpointsResult;
}(utils_1.SpeakeasyBase));
exports.DescribeClientVpnEndpointsResult = DescribeClientVpnEndpointsResult;
