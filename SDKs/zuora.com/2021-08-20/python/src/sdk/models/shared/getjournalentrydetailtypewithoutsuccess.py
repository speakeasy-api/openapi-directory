"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import getjournalentryitemtype as shared_getjournalentryitemtype
from ..shared import getjournalentrysegmenttype as shared_getjournalentrysegmenttype
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class GETJournalEntryDetailTypeWithoutSuccessStatusEnum(str, Enum):
    r"""Status of journal entry."""
    CREATED = 'Created'
    CANCELLED = 'Cancelled'

class GETJournalEntryDetailTypeWithoutSuccessTransferredToAccountingEnum(str, Enum):
    r"""Status shows whether the journal entry has been transferred to an accounting system."""
    NO = 'No'
    PROCESSING = 'Processing'
    YES = 'Yes'
    ERROR = 'Error'
    IGNORE = 'Ignore'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GETJournalEntryDetailTypeWithoutSuccess:
    r"""Container for custom fields of a Journal Entry object."""
    
    accounting_period_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountingPeriodName'), 'exclude': lambda f: f is None }})
    r"""Name of the accounting period that the journal entry belongs to."""  
    aggregate_currency: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aggregateCurrency'), 'exclude': lambda f: f is None }})
    r"""Returns true if the journal entry is aggregating currencies. That is, if the journal entry was created when the `Aggregate transactions with different currencies during a JournalRun` setting was configured to \\"Yes\\". Otherwise, returns `false`."""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency'), 'exclude': lambda f: f is None }})
    r"""Currency used."""  
    home_currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('homeCurrency'), 'exclude': lambda f: f is None }})
    r"""Home currency used."""  
    journal_entry_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journalEntryDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of the journal entry."""  
    journal_entry_items: Optional[list[shared_getjournalentryitemtype.GETJournalEntryItemType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journalEntryItems'), 'exclude': lambda f: f is None }})
    r"""Key name that represents the list of journal entry items."""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""Additional information about this record.
    Character limit: 2,000
    """  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Journal entry number in the format JE-00000001."""  
    segments: Optional[list[shared_getjournalentrysegmenttype.GETJournalEntrySegmentType]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segments'), 'exclude': lambda f: f is None }})
    r"""List of segments that apply to the summary journal entry."""  
    status: Optional[GETJournalEntryDetailTypeWithoutSuccessStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of journal entry."""  
    time_period_end: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timePeriodEnd'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date of time period included in the journal entry."""  
    time_period_start: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timePeriodStart'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date of time period included in the journal entry."""  
    transaction_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionType'), 'exclude': lambda f: f is None }})
    r"""Transaction type of the transactions included in the summary journal entry."""  
    transfer_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date and time that transferredToAccounting was changed to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`."""  
    transferred_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferredBy'), 'exclude': lambda f: f is None }})
    r"""User ID of the person who changed transferredToAccounting to `Yes`. This field is returned only when transferredToAccounting is `Yes`. Otherwise, this field is `null`."""  
    transferred_to_accounting: Optional[GETJournalEntryDetailTypeWithoutSuccessTransferredToAccountingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transferredToAccounting'), 'exclude': lambda f: f is None }})
    r"""Status shows whether the journal entry has been transferred to an accounting system."""  
    