<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - A router of public health data from multiple senders and receivers
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://cdcgov.local',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Delete an organization (and the associated receivers and senders)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameResponse
     */
	public function deleteSettingsOrganizationsOrganizationName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}', \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Delete a receiver
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
     */
	public function deleteSettingsOrganizationsOrganizationNameReceiversReceiverName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/receivers/{receiverName}', \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receiver = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Receiver', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Delete a sender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse
     */
	public function deleteSettingsOrganizationsOrganizationNameSendersSenderName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/senders/{senderName}', \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sender = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Sender', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * The settings for all organizations of the system. Must have admin access.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsResponse
     */
	public function getSettingsOrganizations(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organizations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Organization>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A single organization settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameResponse
     */
	public function getSettingsOrganizationsOrganizationName(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}', \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }

        return $response;
    }
	
    /**
     * A list of receivers and their current settings
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversResponse
     */
	public function getSettingsOrganizationsOrganizationNameReceivers(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/receivers', \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receivers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Receiver>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * The settings of a single of receiver
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
     */
	public function getSettingsOrganizationsOrganizationNameReceiversReceiverName(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/receivers/{receiverName}', \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receiver = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Receiver', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * A list of senders
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersResponse
     */
	public function getSettingsOrganizationsOrganizationNameSenders(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/senders', \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->senders = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Sender>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * The settings of a single of sender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse
     */
	public function getSettingsOrganizationsOrganizationNameSendersSenderName(
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/senders/{senderName}', \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sender = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Sender', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Retrived the last modified for all settings of the system. Must have admin access.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\HeadSettingsOrganizationsResponse
     */
	public function headSettingsOrganizations(
    ): \OpenAPI\OpenAPI\Models\Operations\HeadSettingsOrganizationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('HEAD', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\HeadSettingsOrganizationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Post a report to the data hub
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostReportsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostReportsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostReportsResponse
     */
	public function postReports(
        \OpenAPI\OpenAPI\Models\Operations\PostReportsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostReportsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostReportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "string");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostReportsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostReportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
        }

        return $response;
    }
	
    /**
     * Create or update the direct settings associated with an organization
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameResponse
     */
	public function putSettingsOrganizationsOrganizationName(
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}', \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "organizationInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->organization = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Organization', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update a single reciever
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
     */
	public function putSettingsOrganizationsOrganizationNameReceiversReceiverName(
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/receivers/{receiverName}', \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "receiverInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->receiver = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Receiver', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Update a single sender
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse
     */
	public function putSettingsOrganizationsOrganizationNameSendersSenderName(
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/settings/organizations/{organizationName}/senders/{senderName}', \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "senderInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->senders = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Sender>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
}