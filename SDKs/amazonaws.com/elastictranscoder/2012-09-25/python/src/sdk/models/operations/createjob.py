"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import captions as shared_captions
from ..shared import clip as shared_clip
from ..shared import createjoboutput as shared_createjoboutput
from ..shared import createjobplaylist as shared_createjobplaylist
from ..shared import createjobresponse as shared_createjobresponse
from ..shared import detectedproperties as shared_detectedproperties
from ..shared import encryption as shared_encryption
from ..shared import inputcaptions as shared_inputcaptions
from ..shared import jobalbumart as shared_jobalbumart
from ..shared import jobinput as shared_jobinput
from ..shared import jobwatermark as shared_jobwatermark
from ..shared import timespan as shared_timespan
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyInput:
    r"""Information about the file that you're transcoding."""
    
    aspect_ratio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AspectRatio'), 'exclude': lambda f: f is None }})  
    container: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Container'), 'exclude': lambda f: f is None }})  
    detected_properties: Optional[shared_detectedproperties.DetectedProperties] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DetectedProperties'), 'exclude': lambda f: f is None }})  
    encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encryption'), 'exclude': lambda f: f is None }})  
    frame_rate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FrameRate'), 'exclude': lambda f: f is None }})  
    input_captions: Optional[shared_inputcaptions.InputCaptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InputCaptions'), 'exclude': lambda f: f is None }})  
    interlaced: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Interlaced'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key'), 'exclude': lambda f: f is None }})  
    resolution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Resolution'), 'exclude': lambda f: f is None }})  
    time_span: Optional[shared_timespan.TimeSpan] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeSpan'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBodyOutput:
    r"""The <code>CreateJobOutput</code> structure."""
    
    album_art: Optional[shared_jobalbumart.JobAlbumArt] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlbumArt'), 'exclude': lambda f: f is None }})  
    captions: Optional[shared_captions.Captions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Captions'), 'exclude': lambda f: f is None }})  
    composition: Optional[list[shared_clip.Clip]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Composition'), 'exclude': lambda f: f is None }})  
    encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Encryption'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key'), 'exclude': lambda f: f is None }})  
    preset_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PresetId'), 'exclude': lambda f: f is None }})  
    rotate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Rotate'), 'exclude': lambda f: f is None }})  
    segment_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SegmentDuration'), 'exclude': lambda f: f is None }})  
    thumbnail_encryption: Optional[shared_encryption.Encryption] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThumbnailEncryption'), 'exclude': lambda f: f is None }})  
    thumbnail_pattern: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ThumbnailPattern'), 'exclude': lambda f: f is None }})  
    watermarks: Optional[list[shared_jobwatermark.JobWatermark]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Watermarks'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateJobRequestBody:
    
    pipeline_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PipelineId') }})
    r"""The <code>Id</code> of the pipeline that you want Elastic Transcoder to use for transcoding. The pipeline determines several settings, including the Amazon S3 bucket from which Elastic Transcoder gets the files to transcode and the bucket into which Elastic Transcoder puts the transcoded files."""  
    input: Optional[CreateJobRequestBodyInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Input'), 'exclude': lambda f: f is None }})
    r"""Information about the file that you're transcoding."""  
    inputs: Optional[list[shared_jobinput.JobInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inputs'), 'exclude': lambda f: f is None }})
    r"""A section of the request body that provides information about the files that are being transcoded."""  
    output: Optional[CreateJobRequestBodyOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Output'), 'exclude': lambda f: f is None }})
    r"""The <code>CreateJobOutput</code> structure."""  
    output_key_prefix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputKeyPrefix'), 'exclude': lambda f: f is None }})
    r"""The value, if any, that you want Elastic Transcoder to prepend to the names of all files that this job creates, including output files, thumbnails, and playlists."""  
    outputs: Optional[list[shared_createjoboutput.CreateJobOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outputs'), 'exclude': lambda f: f is None }})
    r"""A section of the request body that provides information about the transcoded (target) files. We recommend that you use the <code>Outputs</code> syntax instead of the <code>Output</code> syntax."""  
    playlists: Optional[list[shared_createjobplaylist.CreateJobPlaylist]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Playlists'), 'exclude': lambda f: f is None }})
    r"""<p>If you specify a preset in <code>PresetId</code> for which the value of <code>Container</code> is fmp4 (Fragmented MP4) or ts (MPEG-TS), Playlists contains information about the master playlists that you want Elastic Transcoder to create.</p> <p>The maximum number of master playlists in a job is 30.</p>"""  
    user_metadata: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserMetadata'), 'exclude': lambda f: f is None }})
    r"""User-defined metadata that you want to associate with an Elastic Transcoder job. You specify metadata in <code>key/value</code> pairs, and you can add up to 10 <code>key/value</code> pairs per job. Elastic Transcoder does not guarantee that <code>key/value</code> pairs are returned in the same order in which you specify them."""  
    

@dataclasses.dataclass
class CreateJobRequest:
    
    request_body: CreateJobRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateJobResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    create_job_response: Optional[shared_createjobresponse.CreateJobResponse] = dataclasses.field(default=None)
    r"""Success"""  
    incompatible_version_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IncompatibleVersionException"""  
    internal_service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServiceException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    