// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

// InterestPaymentSimulationResultTransactionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
type InterestPaymentSimulationResultTransactionCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionCurrencyEnumCad InterestPaymentSimulationResultTransactionCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionCurrencyEnumChf InterestPaymentSimulationResultTransactionCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionCurrencyEnumEur InterestPaymentSimulationResultTransactionCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionCurrencyEnumGbp InterestPaymentSimulationResultTransactionCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionCurrencyEnumJpy InterestPaymentSimulationResultTransactionCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionCurrencyEnumUsd InterestPaymentSimulationResultTransactionCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionRouteTypeEnum - The type of the route this Transaction came through.
type InterestPaymentSimulationResultTransactionRouteTypeEnum string

const (
	InterestPaymentSimulationResultTransactionRouteTypeEnumAccountNumber InterestPaymentSimulationResultTransactionRouteTypeEnum = "account_number"
	InterestPaymentSimulationResultTransactionRouteTypeEnumCard          InterestPaymentSimulationResultTransactionRouteTypeEnum = "card"
)

func (e InterestPaymentSimulationResultTransactionRouteTypeEnum) ToPointer() *InterestPaymentSimulationResultTransactionRouteTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionRouteTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_number":
		fallthrough
	case "card":
		*e = InterestPaymentSimulationResultTransactionRouteTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionRouteTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
type InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntention - A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
type InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntention struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum `json:"currency"`
	// The description you chose to give the transfer.
	Description string `json:"description"`
	// The identifier of the Account to where the Account Transfer was sent.
	DestinationAccountID string `json:"destination_account_id"`
	// The identifier of the Account from where the Account Transfer was sent.
	SourceAccountID string `json:"source_account_id"`
	// The identifier of the Account Transfer that led to this Pending Transaction.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversion - A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
type InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversion struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the File containing an image of the returned check.
	FileID string `json:"file_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversionReturn - A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
type InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversionReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// Why the transfer was returned.
	ReturnReasonCode string `json:"return_reason_code"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHTransferIntention - A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
type InterestPaymentSimulationResultTransactionTransactionSourceACHTransferIntention struct {
	AccountNumber string `json:"account_number"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount              int64  `json:"amount"`
	RoutingNumber       string `json:"routing_number"`
	StatementDescriptor string `json:"statement_descriptor"`
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHTransferRejection - A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
type InterestPaymentSimulationResultTransactionTransactionSourceACHTransferRejection struct {
	// The identifier of the ACH Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum - Why the ACH Transfer was returned.
type InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInsufficientFund                                          InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "insufficient_fund"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNoAccount                                                 InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "no_account"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountClosed                                             InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_closed"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAccountNumberStructure                             InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_account_number_structure"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAccountFrozenEntryReturnedPerOfacInstruction              InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "account_frozen_entry_returned_per_ofac_instruction"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCreditEntryRefusedByReceiver                              InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "credit_entry_refused_by_receiver"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUnauthorizedDebitToConsumerAccountUsingCorporateSecCode   InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "unauthorized_debit_to_consumer_account_using_corporate_sec_code"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCorporateCustomerAdvisedNotAuthorized                     InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "corporate_customer_advised_not_authorized"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumPaymentStopped                                            InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "payment_stopped"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumNonTransactionAccount                                     InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "non_transaction_account"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumUncollectedFunds                                          InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "uncollected_funds"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumRoutingNumberCheckDigitError                              InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "routing_number_check_digit_error"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumCustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "customer_advised_unauthorized_improper_ineligible_or_incomplete"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAmountFieldError                                          InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "amount_field_error"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAuthorizationRevokedByCustomer                            InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "authorization_revoked_by_customer"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumInvalidAchRoutingNumber                                   InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "invalid_ach_routing_number"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumFileRecordEditCriteria                                    InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "file_record_edit_criteria"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumEnrInvalidIndividualName                                  InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "enr_invalid_individual_name"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumReturnedPerOdfiRequest                                    InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "returned_per_odfi_request"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumAddendaError                                              InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "addenda_error"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumLimitedParticipationDfi                                   InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "limited_participation_dfi"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumIncorrectlyCodedOutboundInternationalPayment              InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "incorrectly_coded_outbound_international_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnumOther                                                     InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum = "other"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "insufficient_fund":
		fallthrough
	case "no_account":
		fallthrough
	case "account_closed":
		fallthrough
	case "invalid_account_number_structure":
		fallthrough
	case "account_frozen_entry_returned_per_ofac_instruction":
		fallthrough
	case "credit_entry_refused_by_receiver":
		fallthrough
	case "unauthorized_debit_to_consumer_account_using_corporate_sec_code":
		fallthrough
	case "corporate_customer_advised_not_authorized":
		fallthrough
	case "payment_stopped":
		fallthrough
	case "non_transaction_account":
		fallthrough
	case "uncollected_funds":
		fallthrough
	case "routing_number_check_digit_error":
		fallthrough
	case "customer_advised_unauthorized_improper_ineligible_or_incomplete":
		fallthrough
	case "amount_field_error":
		fallthrough
	case "authorization_revoked_by_customer":
		fallthrough
	case "invalid_ach_routing_number":
		fallthrough
	case "file_record_edit_criteria":
		fallthrough
	case "enr_invalid_individual_name":
		fallthrough
	case "returned_per_odfi_request":
		fallthrough
	case "addenda_error":
		fallthrough
	case "limited_participation_dfi":
		fallthrough
	case "incorrectly_coded_outbound_international_payment":
		fallthrough
	case "other":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturn - A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
type InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturn struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// Why the ACH Transfer was returned.
	ReturnReasonCode InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum `json:"return_reason_code"`
	// The identifier of the Tranasaction associated with this return.
	TransactionID string `json:"transaction_id"`
	// The identifier of the ACH Transfer associated with this return.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardDisputeAcceptance - A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardDisputeAcceptance struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
	AcceptedAt time.Time `json:"accepted_at"`
	// The identifier of the Card Dispute that was accepted.
	CardDisputeID string `json:"card_dispute_id"`
	// The identifier of the Transaction that was created to return the disputed funds to your account.
	TransactionID string `json:"transaction_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum - A constant representing the object's type. For this resource it will always be `card_refund`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnumCardRefund InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum = "card_refund"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_refund":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardRefund - A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardRefund struct {
	// The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier for the Transaction this refunds, if any.
	CardSettlementTransactionID string `json:"card_settlement_transaction_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum `json:"currency"`
	// The Card Refund identifier.
	ID string `json:"id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The 4-digit MCC describing the merchant's business.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The name of the merchant.
	MerchantName string `json:"merchant_name"`
	// The state the merchant resides in.
	MerchantState string `json:"merchant_state"`
	// A constant representing the object's type. For this resource it will always be `card_refund`.
	Type InterestPaymentSimulationResultTransactionTransactionSourceCardRefundTypeEnum `json:"type"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePayment - A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePaymentCurrencyEnum `json:"currency"`
	// The end of the period for which this transaction paid interest.
	PeriodEnd time.Time `json:"period_end"`
	// The start of the period for which this transaction paid interest.
	PeriodStart time.Time `json:"period_start"`
	// The account the card belonged to.
	TransactedOnAccountID string `json:"transacted_on_account_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
type InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefund - A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
type InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefund struct {
	// The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
	Currency             InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                      `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                      `json:"merchant_category_code"`
	MerchantCity         string                                                                                      `json:"merchant_city"`
	MerchantCountry      string                                                                                      `json:"merchant_country"`
	MerchantDescriptor   string                                                                                      `json:"merchant_descriptor"`
	MerchantState        string                                                                                      `json:"merchant_state"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
type InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlement - A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
type InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlement struct {
	// The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
	Currency             InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum `json:"currency"`
	MerchantAcceptorID   string                                                                                          `json:"merchant_acceptor_id"`
	MerchantCategoryCode string                                                                                          `json:"merchant_category_code"`
	MerchantCity         string                                                                                          `json:"merchant_city"`
	MerchantCountry      string                                                                                          `json:"merchant_country"`
	MerchantDescriptor   string                                                                                          `json:"merchant_descriptor"`
	MerchantState        string                                                                                          `json:"merchant_state"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum - A constant representing the object's type. For this resource it will always be `card_settlement`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnumCardSettlement InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum = "card_settlement"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "card_settlement":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCardSettlement - A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
type InterestPaymentSimulationResultTransactionTransactionSourceCardSettlement struct {
	// The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The Card Authorization that was created prior to this Card Settlement, if on exists.
	CardAuthorization string `json:"card_authorization"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum `json:"currency"`
	// The Card Settlement identifier.
	ID string `json:"id"`
	// The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
	MerchantAcceptorID string `json:"merchant_acceptor_id"`
	// The 4-digit MCC describing the merchant's business.
	MerchantCategoryCode string `json:"merchant_category_code"`
	// The city the merchant resides in.
	MerchantCity string `json:"merchant_city"`
	// The country the merchant resides in.
	MerchantCountry string `json:"merchant_country"`
	// The name of the merchant.
	MerchantName string `json:"merchant_name"`
	// The state the merchant resides in.
	MerchantState string `json:"merchant_state"`
	// The identifier of the Pending Transaction associated with this Transaction.
	PendingTransactionID string `json:"pending_transaction_id"`
	// The amount in the minor unit of the transaction's presentment currency.
	PresentmentAmount int64 `json:"presentment_amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
	PresentmentCurrency string `json:"presentment_currency"`
	// A constant representing the object's type. For this resource it will always be `card_settlement`.
	Type InterestPaymentSimulationResultTransactionTransactionSourceCardSettlementTypeEnum `json:"type"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum - The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAccountTransferIntention                    InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "account_transfer_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAchCheckConversionReturn                    InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "ach_check_conversion_return"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAchCheckConversion                          InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "ach_check_conversion"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAchTransferIntention                        InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAchTransferRejection                        InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_rejection"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumAchTransferReturn                           InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "ach_transfer_return"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardDisputeAcceptance                       InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_dispute_acceptance"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardRefund                                  InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_refund"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardSettlement                              InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_settlement"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardRevenuePayment                          InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_revenue_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckDepositAcceptance                      InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_deposit_acceptance"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckDepositReturn                          InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_deposit_return"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferIntention                      InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferReturn                         InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_return"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferRejection                      InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_rejection"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCheckTransferStopPaymentRequest             InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "check_transfer_stop_payment_request"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumDisputeResolution                           InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "dispute_resolution"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumEmpyrealCashDeposit                         InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "empyreal_cash_deposit"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumFeePayment                                  InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "fee_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundAchTransfer                          InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_ach_transfer"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundAchTransferReturnIntention           InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_ach_transfer_return_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundCheck                                InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_check"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundInternationalAchTransfer             InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_international_ach_transfer"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundRealTimePaymentsTransferConfirmation InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_real_time_payments_transfer_confirmation"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundWireDrawdownPaymentReversal          InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment_reversal"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundWireDrawdownPayment                  InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_drawdown_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundWireReversal                         InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_reversal"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInboundWireTransfer                         InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "inbound_wire_transfer"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInterestPayment                             InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "interest_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInternalGeneralLedgerTransaction            InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "internal_general_ledger_transaction"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumInternalSource                              InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "internal_source"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardRouteRefund                             InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_route_refund"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumCardRouteSettlement                         InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "card_route_settlement"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumRealTimePaymentsTransferAcknowledgement     InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "real_time_payments_transfer_acknowledgement"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumSampleFunds                                 InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "sample_funds"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumWireDrawdownPaymentIntention                InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumWireDrawdownPaymentRejection                InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "wire_drawdown_payment_rejection"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumWireTransferIntention                       InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "wire_transfer_intention"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumWireTransferRejection                       InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "wire_transfer_rejection"
	InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnumOther                                       InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum = "other"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account_transfer_intention":
		fallthrough
	case "ach_check_conversion_return":
		fallthrough
	case "ach_check_conversion":
		fallthrough
	case "ach_transfer_intention":
		fallthrough
	case "ach_transfer_rejection":
		fallthrough
	case "ach_transfer_return":
		fallthrough
	case "card_dispute_acceptance":
		fallthrough
	case "card_refund":
		fallthrough
	case "card_settlement":
		fallthrough
	case "card_revenue_payment":
		fallthrough
	case "check_deposit_acceptance":
		fallthrough
	case "check_deposit_return":
		fallthrough
	case "check_transfer_intention":
		fallthrough
	case "check_transfer_return":
		fallthrough
	case "check_transfer_rejection":
		fallthrough
	case "check_transfer_stop_payment_request":
		fallthrough
	case "dispute_resolution":
		fallthrough
	case "empyreal_cash_deposit":
		fallthrough
	case "fee_payment":
		fallthrough
	case "inbound_ach_transfer":
		fallthrough
	case "inbound_ach_transfer_return_intention":
		fallthrough
	case "inbound_check":
		fallthrough
	case "inbound_international_ach_transfer":
		fallthrough
	case "inbound_real_time_payments_transfer_confirmation":
		fallthrough
	case "inbound_wire_drawdown_payment_reversal":
		fallthrough
	case "inbound_wire_drawdown_payment":
		fallthrough
	case "inbound_wire_reversal":
		fallthrough
	case "inbound_wire_transfer":
		fallthrough
	case "interest_payment":
		fallthrough
	case "internal_general_ledger_transaction":
		fallthrough
	case "internal_source":
		fallthrough
	case "card_route_refund":
		fallthrough
	case "card_route_settlement":
		fallthrough
	case "real_time_payments_transfer_acknowledgement":
		fallthrough
	case "sample_funds":
		fallthrough
	case "wire_drawdown_payment_intention":
		fallthrough
	case "wire_drawdown_payment_rejection":
		fallthrough
	case "wire_transfer_intention":
		fallthrough
	case "wire_transfer_rejection":
		fallthrough
	case "other":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptance - A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptance struct {
	// The account number printed on the check.
	AccountNumber string `json:"account_number"`
	// The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// An additional line of metadata printed on the check. This typically includes the check number for business checks.
	AuxiliaryOnUs string `json:"auxiliary_on_us"`
	// The ID of the Check Deposit that was accepted.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum `json:"currency"`
	// The routing number printed on the check.
	RoutingNumber string `json:"routing_number"`
	// The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
	SerialNumber string `json:"serial_number"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum: %v", v)
	}
}

type InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumAchConversionNotSupported InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "ach_conversion_not_supported"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumClosedAccount             InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "closed_account"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumDuplicateSubmission       InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "duplicate_submission"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumInsufficientFunds         InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "insufficient_funds"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumNoAccount                 InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "no_account"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumNotAuthorized             InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "not_authorized"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumStaleDated                InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stale_dated"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumStopPayment               InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "stop_payment"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnknownReason             InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unknown_reason"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnmatchedDetails          InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unmatched_details"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnumUnreadableImage           InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum = "unreadable_image"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ach_conversion_not_supported":
		fallthrough
	case "closed_account":
		fallthrough
	case "duplicate_submission":
		fallthrough
	case "insufficient_funds":
		fallthrough
	case "no_account":
		fallthrough
	case "not_authorized":
		fallthrough
	case "stale_dated":
		fallthrough
	case "stop_payment":
		fallthrough
	case "unknown_reason":
		fallthrough
	case "unmatched_details":
		fallthrough
	case "unreadable_image":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturn - A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturn struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The identifier of the Check Deposit that was returned.
	CheckDepositID string `json:"check_deposit_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency     InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum     `json:"currency"`
	ReturnReason InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum `json:"return_reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the transaction that reversed the original check deposit transaction.
	TransactionID string `json:"transaction_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntention - A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntention struct {
	// The city of the check's destination.
	AddressCity string `json:"address_city"`
	// The street address of the check's destination.
	AddressLine1 string `json:"address_line1"`
	// The second line of the address of the check's destination.
	AddressLine2 string `json:"address_line2"`
	// The state of the check's destination.
	AddressState string `json:"address_state"`
	// The postal code of the check's destination.
	AddressZip string `json:"address_zip"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum `json:"currency"`
	// The name that will be printed on the check.
	RecipientName string `json:"recipient_name"`
	// The identifier of the Check Transfer with which this is associated.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferRejection - A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferRejection struct {
	// The identifier of the Check Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum - The reason why the check was returned.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnumMailDeliveryFailure InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum = "mail_delivery_failure"
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnumRefusedByRecipient  InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum = "refused_by_recipient"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mail_delivery_failure":
		fallthrough
	case "refused_by_recipient":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturn - A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturn struct {
	// If available, a document with additional information about the return.
	FileID string `json:"file_id"`
	// The reason why the check was returned.
	Reason InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturnReasonEnum `json:"reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the Transaction that was created to credit you for the returned check.
	TransactionID string `json:"transaction_id"`
	// The identifier of the returned Check Transfer.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnumCheckTransferStopPaymentRequest InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum = "check_transfer_stop_payment_request"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check_transfer_stop_payment_request":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest - A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest struct {
	// The time the stop-payment was requested.
	RequestedAt time.Time `json:"requested_at"`
	// The transaction ID of the corresponding credit transaction.
	TransactionID string `json:"transaction_id"`
	// The ID of the check transfer that was stopped.
	TransferID string `json:"transfer_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
	Type InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum `json:"type"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolution - A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
type InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolution struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum `json:"currency"`
	// The identifier of the Transaction that was disputed.
	DisputedTransactionID string `json:"disputed_transaction_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceEmpyrealCashDeposit - A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
type InterestPaymentSimulationResultTransactionTransactionSourceEmpyrealCashDeposit struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount      int64     `json:"amount"`
	BagID       string    `json:"bag_id"`
	DepositDate time.Time `json:"deposit_date"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceFeePayment - A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
type InterestPaymentSimulationResultTransactionTransactionSourceFeePayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceFeePaymentCurrencyEnum `json:"currency"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundACHTransfer - A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	OriginatorCompanyDescriptiveDate   string `json:"originator_company_descriptive_date"`
	OriginatorCompanyDiscretionaryData string `json:"originator_company_discretionary_data"`
	OriginatorCompanyEntryDescription  string `json:"originator_company_entry_description"`
	OriginatorCompanyID                string `json:"originator_company_id"`
	OriginatorCompanyName              string `json:"originator_company_name"`
	ReceiverIDNumber                   string `json:"receiver_id_number"`
	ReceiverName                       string `json:"receiver_name"`
	TraceNumber                        string `json:"trace_number"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundCheck - A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundCheck struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                int64  `json:"amount"`
	CheckFrontImageFileID string `json:"check_front_image_file_id"`
	CheckNumber           string `json:"check_number"`
	CheckRearImageFileID  string `json:"check_rear_image_file_id"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum `json:"currency"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer - A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer struct {
	// The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
	Amount                                                 int64  `json:"amount"`
	DestinationCountryCode                                 string `json:"destination_country_code"`
	DestinationCurrencyCode                                string `json:"destination_currency_code"`
	ForeignExchangeIndicator                               string `json:"foreign_exchange_indicator"`
	ForeignExchangeReference                               string `json:"foreign_exchange_reference"`
	ForeignExchangeReferenceIndicator                      string `json:"foreign_exchange_reference_indicator"`
	ForeignPaymentAmount                                   int64  `json:"foreign_payment_amount"`
	ForeignTraceNumber                                     string `json:"foreign_trace_number"`
	InternationalTransactionTypeCode                       string `json:"international_transaction_type_code"`
	OriginatingCurrencyCode                                string `json:"originating_currency_code"`
	OriginatingDepositoryFinancialInstitutionBranchCountry string `json:"originating_depository_financial_institution_branch_country"`
	OriginatingDepositoryFinancialInstitutionID            string `json:"originating_depository_financial_institution_id"`
	OriginatingDepositoryFinancialInstitutionIDQualifier   string `json:"originating_depository_financial_institution_id_qualifier"`
	OriginatingDepositoryFinancialInstitutionName          string `json:"originating_depository_financial_institution_name"`
	OriginatorCity                                         string `json:"originator_city"`
	OriginatorCompanyEntryDescription                      string `json:"originator_company_entry_description"`
	OriginatorCountry                                      string `json:"originator_country"`
	OriginatorIdentification                               string `json:"originator_identification"`
	OriginatorName                                         string `json:"originator_name"`
	OriginatorPostalCode                                   string `json:"originator_postal_code"`
	OriginatorStateOrProvince                              string `json:"originator_state_or_province"`
	OriginatorStreetAddress                                string `json:"originator_street_address"`
	PaymentRelatedInformation                              string `json:"payment_related_information"`
	PaymentRelatedInformation2                             string `json:"payment_related_information2"`
	ReceiverCity                                           string `json:"receiver_city"`
	ReceiverCountry                                        string `json:"receiver_country"`
	ReceiverIdentificationNumber                           string `json:"receiver_identification_number"`
	ReceiverPostalCode                                     string `json:"receiver_postal_code"`
	ReceiverStateOrProvince                                string `json:"receiver_state_or_province"`
	ReceiverStreetAddress                                  string `json:"receiver_street_address"`
	ReceivingCompanyOrIndividualName                       string `json:"receiving_company_or_individual_name"`
	ReceivingDepositoryFinancialInstitutionCountry         string `json:"receiving_depository_financial_institution_country"`
	ReceivingDepositoryFinancialInstitutionID              string `json:"receiving_depository_financial_institution_id"`
	ReceivingDepositoryFinancialInstitutionIDQualifier     string `json:"receiving_depository_financial_institution_id_qualifier"`
	ReceivingDepositoryFinancialInstitutionName            string `json:"receiving_depository_financial_institution_name"`
	TraceNumber                                            string `json:"trace_number"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation - A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation struct {
	// The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The name the sender of the transfer specified as the recipient of the transfer.
	CreditorName string `json:"creditor_name"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum `json:"currency"`
	// The account number of the account that sent the transfer.
	DebtorAccountNumber string `json:"debtor_account_number"`
	// The name provided by the sender of the transfer.
	DebtorName string `json:"debtor_name"`
	// The routing number of the account that sent the transfer.
	DebtorRoutingNumber string `json:"debtor_routing_number"`
	// Additional information included with the transfer.
	RemittanceInformation string `json:"remittance_information"`
	// The Real Time Payments network identification of the transfer
	TransactionIdentification string `json:"transaction_identification"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment - A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                             int64  `json:"amount"`
	BeneficiaryAddressLine1            string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2            string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3            string `json:"beneficiary_address_line3"`
	BeneficiaryName                    string `json:"beneficiary_name"`
	BeneficiaryReference               string `json:"beneficiary_reference"`
	Description                        string `json:"description"`
	InputMessageAccountabilityData     string `json:"input_message_accountability_data"`
	OriginatorAddressLine1             string `json:"originator_address_line1"`
	OriginatorAddressLine2             string `json:"originator_address_line2"`
	OriginatorAddressLine3             string `json:"originator_address_line3"`
	OriginatorName                     string `json:"originator_name"`
	OriginatorToBeneficiaryInformation string `json:"originator_to_beneficiary_information"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal - A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundWireReversal - A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundWireReversal struct {
	// The amount that was reversed.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the reversal was created.
	CreatedAt time.Time `json:"created_at"`
	// The description on the reversal message from Fedwire.
	Description string `json:"description"`
	// Additional financial institution information included in the wire reversal.
	FinancialInstitutionToFinancialInstitutionInformation string `json:"financial_institution_to_financial_institution_information"`
	// The Fedwire cycle date for the wire reversal.
	InputCycleDate types.Date `json:"input_cycle_date"`
	// The Fedwire transaction identifier.
	InputMessageAccountabilityData string `json:"input_message_accountability_data"`
	// The Fedwire sequence number.
	InputSequenceNumber string `json:"input_sequence_number"`
	// The Fedwire input source identifier.
	InputSource string `json:"input_source"`
	// The Fedwire cycle date for the wire transfer that was reversed.
	PreviousMessageInputCycleDate types.Date `json:"previous_message_input_cycle_date"`
	// The Fedwire transaction identifier for the wire transfer that was reversed.
	PreviousMessageInputMessageAccountabilityData string `json:"previous_message_input_message_accountability_data"`
	// The Fedwire sequence number for the wire transfer that was reversed.
	PreviousMessageInputSequenceNumber string `json:"previous_message_input_sequence_number"`
	// The Fedwire input source identifier for the wire transfer that was reversed.
	PreviousMessageInputSource string `json:"previous_message_input_source"`
	// Information included in the wire reversal for the receiving financial institution.
	ReceiverFinancialInstitutionInformation string `json:"receiver_financial_institution_information"`
	// The ID for the Transaction associated with the transfer reversal.
	TransactionID string `json:"transaction_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInboundWireTransfer - A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
type InterestPaymentSimulationResultTransactionTransactionSourceInboundWireTransfer struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount                                  int64  `json:"amount"`
	BeneficiaryAddressLine1                 string `json:"beneficiary_address_line1"`
	BeneficiaryAddressLine2                 string `json:"beneficiary_address_line2"`
	BeneficiaryAddressLine3                 string `json:"beneficiary_address_line3"`
	BeneficiaryName                         string `json:"beneficiary_name"`
	BeneficiaryReference                    string `json:"beneficiary_reference"`
	Description                             string `json:"description"`
	InputMessageAccountabilityData          string `json:"input_message_accountability_data"`
	OriginatorAddressLine1                  string `json:"originator_address_line1"`
	OriginatorAddressLine2                  string `json:"originator_address_line2"`
	OriginatorAddressLine3                  string `json:"originator_address_line3"`
	OriginatorName                          string `json:"originator_name"`
	OriginatorToBeneficiaryInformation      string `json:"originator_to_beneficiary_information"`
	OriginatorToBeneficiaryInformationLine1 string `json:"originator_to_beneficiary_information_line1"`
	OriginatorToBeneficiaryInformationLine2 string `json:"originator_to_beneficiary_information_line2"`
	OriginatorToBeneficiaryInformationLine3 string `json:"originator_to_beneficiary_information_line3"`
	OriginatorToBeneficiaryInformationLine4 string `json:"originator_to_beneficiary_information_line4"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceInterestPayment - A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
type InterestPaymentSimulationResultTransactionTransactionSourceInterestPayment struct {
	// The account on which the interest was accrued.
	AccruedOnAccountID string `json:"accrued_on_account_id"`
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum `json:"currency"`
	// The end of the period for which this transaction paid interest.
	PeriodEnd time.Time `json:"period_end"`
	// The start of the period for which this transaction paid interest.
	PeriodStart time.Time `json:"period_start"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
type InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumCad InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "CAD"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumChf InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "CHF"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumEur InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "EUR"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumGbp InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "GBP"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumJpy InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "JPY"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnumUsd InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum = "USD"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum: %v", v)
	}
}

type InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum string

const (
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumBankMigration      InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "bank_migration"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumCashback           InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "cashback"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumEmpyrealAdjustment InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "empyreal_adjustment"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumError              InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "error"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumErrorCorrection    InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "error_correction"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumFees               InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "fees"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumInterest           InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "interest"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumSampleFunds        InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "sample_funds"
	InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnumSampleFundsReturn  InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum = "sample_funds_return"
)

func (e InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum) ToPointer() *InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bank_migration":
		fallthrough
	case "cashback":
		fallthrough
	case "empyreal_adjustment":
		fallthrough
	case "error":
		fallthrough
	case "error_correction":
		fallthrough
	case "fees":
		fallthrough
	case "interest":
		fallthrough
	case "sample_funds":
		fallthrough
	case "sample_funds_return":
		*e = InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransactionTransactionSourceInternalSource - A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
type InterestPaymentSimulationResultTransactionTransactionSourceInternalSource struct {
	// The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
	Currency InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum `json:"currency"`
	Reason   InterestPaymentSimulationResultTransactionTransactionSourceInternalSourceReasonEnum   `json:"reason"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceRealTimePaymentsTransferAcknowledgement - A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
type InterestPaymentSimulationResultTransactionTransactionSourceRealTimePaymentsTransferAcknowledgement struct {
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The destination account number.
	DestinationAccountNumber string `json:"destination_account_number"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	DestinationRoutingNumber string `json:"destination_routing_number"`
	// Unstructured information that will show on the recipient's bank statement.
	RemittanceInformation string `json:"remittance_information"`
	// The identifier of the Real Time Payments Transfer that led to this Transaction.
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceSampleFunds - A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
type InterestPaymentSimulationResultTransactionTransactionSourceSampleFunds struct {
	// Where the sample funds came from.
	Originator string `json:"originator"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention - A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
type InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention struct {
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount             int64  `json:"amount"`
	MessageToRecipient string `json:"message_to_recipient"`
	RoutingNumber      string `json:"routing_number"`
	TransferID         string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection - A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
type InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection struct {
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceWireTransferIntention - A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
type InterestPaymentSimulationResultTransactionTransactionSourceWireTransferIntention struct {
	// The destination account number.
	AccountNumber string `json:"account_number"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// The message that will show on the recipient's bank statement.
	MessageToRecipient string `json:"message_to_recipient"`
	// The American Bankers' Association (ABA) Routing Transit Number (RTN).
	RoutingNumber string `json:"routing_number"`
	TransferID    string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSourceWireTransferRejection - A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
type InterestPaymentSimulationResultTransactionTransactionSourceWireTransferRejection struct {
	TransferID string `json:"transfer_id"`
}

// InterestPaymentSimulationResultTransactionTransactionSource - This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
type InterestPaymentSimulationResultTransactionTransactionSource struct {
	// A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
	AccountTransferIntention InterestPaymentSimulationResultTransactionTransactionSourceAccountTransferIntention `json:"account_transfer_intention"`
	// A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
	AchCheckConversion InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversion `json:"ach_check_conversion"`
	// A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
	AchCheckConversionReturn InterestPaymentSimulationResultTransactionTransactionSourceACHCheckConversionReturn `json:"ach_check_conversion_return"`
	// A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
	AchTransferIntention InterestPaymentSimulationResultTransactionTransactionSourceACHTransferIntention `json:"ach_transfer_intention"`
	// A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
	AchTransferRejection InterestPaymentSimulationResultTransactionTransactionSourceACHTransferRejection `json:"ach_transfer_rejection"`
	// A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
	AchTransferReturn InterestPaymentSimulationResultTransactionTransactionSourceACHTransferReturn `json:"ach_transfer_return"`
	// A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
	CardDisputeAcceptance InterestPaymentSimulationResultTransactionTransactionSourceCardDisputeAcceptance `json:"card_dispute_acceptance"`
	// A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
	CardRefund InterestPaymentSimulationResultTransactionTransactionSourceCardRefund `json:"card_refund"`
	// A Card Revenue Payment object. This field will be present in the JSON response if and only if `category` is equal to `card_revenue_payment`.
	CardRevenuePayment InterestPaymentSimulationResultTransactionTransactionSourceCardRevenuePayment `json:"card_revenue_payment"`
	// A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
	CardRouteRefund InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardRefund `json:"card_route_refund"`
	// A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
	CardRouteSettlement InterestPaymentSimulationResultTransactionTransactionSourceDeprecatedCardSettlement `json:"card_route_settlement"`
	// A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
	CardSettlement InterestPaymentSimulationResultTransactionTransactionSourceCardSettlement `json:"card_settlement"`
	// The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Category InterestPaymentSimulationResultTransactionTransactionSourceCategoryEnum `json:"category"`
	// A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
	CheckDepositAcceptance InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositAcceptance `json:"check_deposit_acceptance"`
	// A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
	CheckDepositReturn InterestPaymentSimulationResultTransactionTransactionSourceCheckDepositReturn `json:"check_deposit_return"`
	// A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
	CheckTransferIntention InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferIntention `json:"check_transfer_intention"`
	// A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
	CheckTransferRejection InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferRejection `json:"check_transfer_rejection"`
	// A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
	CheckTransferReturn InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferReturn `json:"check_transfer_return"`
	// A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
	CheckTransferStopPaymentRequest InterestPaymentSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest `json:"check_transfer_stop_payment_request"`
	// A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
	DisputeResolution InterestPaymentSimulationResultTransactionTransactionSourceDisputeResolution `json:"dispute_resolution"`
	// A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
	EmpyrealCashDeposit InterestPaymentSimulationResultTransactionTransactionSourceEmpyrealCashDeposit `json:"empyreal_cash_deposit"`
	// A Fee Payment object. This field will be present in the JSON response if and only if `category` is equal to `fee_payment`.
	FeePayment InterestPaymentSimulationResultTransactionTransactionSourceFeePayment `json:"fee_payment"`
	// A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
	InboundAchTransfer InterestPaymentSimulationResultTransactionTransactionSourceInboundACHTransfer `json:"inbound_ach_transfer"`
	// A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
	InboundCheck InterestPaymentSimulationResultTransactionTransactionSourceInboundCheck `json:"inbound_check"`
	// A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
	InboundInternationalAchTransfer InterestPaymentSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer `json:"inbound_international_ach_transfer"`
	// A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
	InboundRealTimePaymentsTransferConfirmation InterestPaymentSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation `json:"inbound_real_time_payments_transfer_confirmation"`
	// A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
	InboundWireDrawdownPayment InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment `json:"inbound_wire_drawdown_payment"`
	// A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
	InboundWireDrawdownPaymentReversal InterestPaymentSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal `json:"inbound_wire_drawdown_payment_reversal"`
	// A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
	InboundWireReversal InterestPaymentSimulationResultTransactionTransactionSourceInboundWireReversal `json:"inbound_wire_reversal"`
	// A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
	InboundWireTransfer InterestPaymentSimulationResultTransactionTransactionSourceInboundWireTransfer `json:"inbound_wire_transfer"`
	// A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
	InterestPayment InterestPaymentSimulationResultTransactionTransactionSourceInterestPayment `json:"interest_payment"`
	// A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
	InternalSource InterestPaymentSimulationResultTransactionTransactionSourceInternalSource `json:"internal_source"`
	// A Real Time Payments Transfer Acknowledgement object. This field will be present in the JSON response if and only if `category` is equal to `real_time_payments_transfer_acknowledgement`.
	RealTimePaymentsTransferAcknowledgement InterestPaymentSimulationResultTransactionTransactionSourceRealTimePaymentsTransferAcknowledgement `json:"real_time_payments_transfer_acknowledgement"`
	// A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
	SampleFunds InterestPaymentSimulationResultTransactionTransactionSourceSampleFunds `json:"sample_funds"`
	// A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
	WireDrawdownPaymentIntention InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention `json:"wire_drawdown_payment_intention"`
	// A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
	WireDrawdownPaymentRejection InterestPaymentSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection `json:"wire_drawdown_payment_rejection"`
	// A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
	WireTransferIntention InterestPaymentSimulationResultTransactionTransactionSourceWireTransferIntention `json:"wire_transfer_intention"`
	// A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
	WireTransferRejection InterestPaymentSimulationResultTransactionTransactionSourceWireTransferRejection `json:"wire_transfer_rejection"`
}

// InterestPaymentSimulationResultTransactionTypeEnum - A constant representing the object's type. For this resource it will always be `transaction`.
type InterestPaymentSimulationResultTransactionTypeEnum string

const (
	InterestPaymentSimulationResultTransactionTypeEnumTransaction InterestPaymentSimulationResultTransactionTypeEnum = "transaction"
)

func (e InterestPaymentSimulationResultTransactionTypeEnum) ToPointer() *InterestPaymentSimulationResultTransactionTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTransactionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transaction":
		*e = InterestPaymentSimulationResultTransactionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTransactionTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResultTransaction - This will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: interest_payment`.
type InterestPaymentSimulationResultTransaction struct {
	// The identifier for the Account the Transaction belongs to.
	AccountID string `json:"account_id"`
	// The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
	Amount int64 `json:"amount"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
	Currency InterestPaymentSimulationResultTransactionCurrencyEnum `json:"currency"`
	// For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
	Description string `json:"description"`
	// The Transaction identifier.
	ID string `json:"id"`
	// The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
	RouteID string `json:"route_id"`
	// The type of the route this Transaction came through.
	RouteType InterestPaymentSimulationResultTransactionRouteTypeEnum `json:"route_type"`
	// This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
	Source InterestPaymentSimulationResultTransactionTransactionSource `json:"source"`
	// A constant representing the object's type. For this resource it will always be `transaction`.
	Type InterestPaymentSimulationResultTransactionTypeEnum `json:"type"`
}

// InterestPaymentSimulationResultTypeEnum - A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.
type InterestPaymentSimulationResultTypeEnum string

const (
	InterestPaymentSimulationResultTypeEnumInterestPaymentSimulationResult InterestPaymentSimulationResultTypeEnum = "interest_payment_simulation_result"
)

func (e InterestPaymentSimulationResultTypeEnum) ToPointer() *InterestPaymentSimulationResultTypeEnum {
	return &e
}

func (e *InterestPaymentSimulationResultTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "interest_payment_simulation_result":
		*e = InterestPaymentSimulationResultTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InterestPaymentSimulationResultTypeEnum: %v", v)
	}
}

// InterestPaymentSimulationResult - The results of an Interest Payment simulation.
type InterestPaymentSimulationResult struct {
	// This will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: interest_payment`.
	Transaction InterestPaymentSimulationResultTransaction `json:"transaction"`
	// A constant representing the object's type. For this resource it will always be `interest_payment_simulation_result`.
	Type InterestPaymentSimulationResultTypeEnum `json:"type"`
}
