"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import appcontext as shared_appcontext
from ..shared import auctioncontext as shared_auctioncontext
from ..shared import locationcontext as shared_locationcontext
from ..shared import platformcontext as shared_platformcontext
from ..shared import securitycontext as shared_securitycontext
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServingContextAllEnum(str, Enum):
    r"""Matches all contexts."""
    SIMPLE_CONTEXT = 'SIMPLE_CONTEXT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServingContext:
    r"""The serving context for this restriction."""
    
    all: Optional[ServingContextAllEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('all'), 'exclude': lambda f: f is None }})
    r"""Matches all contexts."""  
    app_type: Optional[shared_appcontext.AppContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appType'), 'exclude': lambda f: f is None }})
    r"""Output only. The app type the restriction applies to for mobile device."""  
    auction_type: Optional[shared_auctioncontext.AuctionContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auctionType'), 'exclude': lambda f: f is None }})
    r"""Output only. The auction type the restriction applies to."""  
    location: Optional[shared_locationcontext.LocationContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""Output only. The Geo criteria the restriction applies to."""  
    platform: Optional[shared_platformcontext.PlatformContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('platform'), 'exclude': lambda f: f is None }})
    r"""Output only. The type of platform the restriction applies to."""  
    security_type: Optional[shared_securitycontext.SecurityContext] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('securityType'), 'exclude': lambda f: f is None }})
    r"""Output only. A security context."""  
    