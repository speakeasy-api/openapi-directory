// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateEnvironmentEc2XAmzTargetEnum
type CreateEnvironmentEc2XAmzTargetEnum string

const (
	CreateEnvironmentEc2XAmzTargetEnumAwsCloud9WorkspaceManagementServiceCreateEnvironmentEc2 CreateEnvironmentEc2XAmzTargetEnum = "AWSCloud9WorkspaceManagementService.CreateEnvironmentEC2"
)

func (e *CreateEnvironmentEc2XAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSCloud9WorkspaceManagementService.CreateEnvironmentEC2":
		*e = CreateEnvironmentEc2XAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEnvironmentEc2XAmzTargetEnum: %s", s)
	}
}

type CreateEnvironmentEc2Headers struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateEnvironmentEc2XAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateEnvironmentEc2Request struct {
	Headers CreateEnvironmentEc2Headers
	Request shared.CreateEnvironmentEc2Request `request:"mediaType=application/json"`
}

type CreateEnvironmentEc2Response struct {
	// BadRequestException
	BadRequestException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateEnvironmentEc2Result *shared.CreateEnvironmentEc2Result
	// ForbiddenException
	ForbiddenException interface{}
	// InternalServerErrorException
	InternalServerErrorException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
