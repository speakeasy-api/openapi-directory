/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Returnpolicyonline {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a new return policy.
   */
  contentReturnpolicyonlineCreate(
    req: operations.ContentReturnpolicyonlineCreateRequest,
    security: operations.ContentReturnpolicyonlineCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnpolicyonlineCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnpolicyonlineCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnpolicyonline",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "returnPolicyOnlineInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnpolicyonlineCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnpolicyonlineCreateResponse =
        new operations.ContentReturnpolicyonlineCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnPolicyOnline = utils.objectToClass(
              httpRes?.data,
              shared.ReturnPolicyOnline
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes an existing return policy.
   */
  contentReturnpolicyonlineDelete(
    req: operations.ContentReturnpolicyonlineDeleteRequest,
    security: operations.ContentReturnpolicyonlineDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnpolicyonlineDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnpolicyonlineDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnpolicyonline/{returnPolicyId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnpolicyonlineDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnpolicyonlineDeleteResponse =
        new operations.ContentReturnpolicyonlineDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets an existing return policy.
   */
  contentReturnpolicyonlineGet(
    req: operations.ContentReturnpolicyonlineGetRequest,
    security: operations.ContentReturnpolicyonlineGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnpolicyonlineGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnpolicyonlineGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnpolicyonline/{returnPolicyId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnpolicyonlineGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnpolicyonlineGetResponse =
        new operations.ContentReturnpolicyonlineGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnPolicyOnline = utils.objectToClass(
              httpRes?.data,
              shared.ReturnPolicyOnline
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all existing return policies.
   */
  contentReturnpolicyonlineList(
    req: operations.ContentReturnpolicyonlineListRequest,
    security: operations.ContentReturnpolicyonlineListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnpolicyonlineListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnpolicyonlineListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnpolicyonline",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnpolicyonlineListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnpolicyonlineListResponse =
        new operations.ContentReturnpolicyonlineListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listReturnPolicyOnlineResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListReturnPolicyOnlineResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing return policy.
   */
  contentReturnpolicyonlinePatch(
    req: operations.ContentReturnpolicyonlinePatchRequest,
    security: operations.ContentReturnpolicyonlinePatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnpolicyonlinePatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnpolicyonlinePatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnpolicyonline/{returnPolicyId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "returnPolicyOnlineInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnpolicyonlinePatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnpolicyonlinePatchResponse =
        new operations.ContentReturnpolicyonlinePatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnPolicyOnline = utils.objectToClass(
              httpRes?.data,
              shared.ReturnPolicyOnline
            );
          }
          break;
      }

      return res;
    });
  }
}
