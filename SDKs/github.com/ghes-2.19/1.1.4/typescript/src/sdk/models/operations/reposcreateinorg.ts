/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
 *
 * @remarks
 * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
 */
export enum ReposCreateInOrgRequestBodyVisibilityEnum {
  Public = "public",
  Private = "private",
  Visibility = "visibility",
  Internal = "internal",
}

export class ReposCreateInOrgRequestBody extends SpeakeasyBase {
  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_merge_commit" })
  allowMergeCommit?: boolean;

  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_rebase_merge" })
  allowRebaseMerge?: boolean;

  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allow_squash_merge" })
  allowSquashMerge?: boolean;

  /**
   * Pass `true` to create an initial commit with empty README.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_init" })
  autoInit?: boolean;

  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete_branch_on_merge" })
  deleteBranchOnMerge?: boolean;

  /**
   * A short description of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gitignore_template" })
  gitignoreTemplate?: string;

  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_issues" })
  hasIssues?: boolean;

  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_projects" })
  hasProjects?: boolean;

  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_wiki" })
  hasWiki?: boolean;

  /**
   * A URL with more information about the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "homepage" })
  homepage?: string;

  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_template" })
  isTemplate?: boolean;

  /**
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "license_template" })
  licenseTemplate?: string;

  /**
   * The name of the repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Whether the repository is private.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "private" })
  private?: boolean;

  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "team_id" })
  teamId?: number;

  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
   *
   * @remarks
   * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visibility" })
  visibility?: ReposCreateInOrgRequestBodyVisibilityEnum;
}

export class ReposCreateInOrgRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ReposCreateInOrgRequestBody;

  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=org" })
  org: string;
}

export class ReposCreateInOrgResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Forbidden
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  repository?: shared.Repository;

  /**
   * Validation failed
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
