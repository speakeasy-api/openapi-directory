/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ComponentResponse } from "./componentresponse";
import { Status } from "./status";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class GetEntityResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn: string;

  @SpeakeasyMetadata({ elemType: ComponentResponse })
  @Expose({ name: "components" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ComponentResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ComponentResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  components?: Record<string, ComponentResponse>;

  @SpeakeasyMetadata()
  @Expose({ name: "creationDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationDateTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "entityId" })
  entityId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "entityName" })
  entityName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "hasChildEntities" })
  hasChildEntities: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "parentEntityId" })
  parentEntityId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => Status)
  status: Status;

  @SpeakeasyMetadata()
  @Expose({ name: "syncSource" })
  syncSource?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updateDateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updateDateTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "workspaceId" })
  workspaceId: string;
}
