"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var clusterapi_1 = require("./clusterapi");
var geocodingapi_1 = require("./geocodingapi");
var isochroneapi_1 = require("./isochroneapi");
var mapmatchingapi_1 = require("./mapmatchingapi");
var matrixapi_1 = require("./matrixapi");
var shared = __importStar(require("./models/shared"));
var routeoptimizationapi_1 = require("./routeoptimizationapi");
var routingapi_1 = require("./routingapi");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://graphhopper.com/api/1"];
/**
 *
 * @remarks
 * With the [GraphHopper Directions API](https://www.graphhopper.com/products/) you can integrate A-to-B route planning, turn-by-turn navigation,
 * route optimization, isochrone calculations and other tools in your application.
 *
 * The GraphHopper Directions API consists of the following RESTful web services:
 *
 *  * [Routing API](#tag/Routing-API),
 *  * [Route Optimization API](#tag/Route-Optimization-API),
 *  * [Isochrone API](#tag/Isochrone-API),
 *  * [Map Matching API](#tag/Map-Matching-API),
 *  * [Matrix API](#tag/Matrix-API),
 *  * [Geocoding API](#tag/Geocoding-API) and
 *  * [Cluster API](#tag/Cluster-API).
 *
 * # Explore our APIs
 *
 * ## Get started
 *
 * 1. [Sign up for GraphHopper](https://support.graphhopper.com/a/solutions/articles/44001976025)
 * 2. [Create an API key](https://support.graphhopper.com/a/solutions/articles/44001976027)
 *
 * Each API part has its own documentation. Jump to the desired API part and learn about the API through the given examples and tutorials.
 *
 * In addition, for each API there are specific sample requests that you can send via Insomnia or Postman to see what the requests and responses look like.
 *
 * ## Insomnia
 *
 * To explore our APIs with [Insomnia](https://insomnia.rest/), follow these steps:
 *
 * 1. Open Insomnia and Import [our workspace](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/GraphHopper-Direction-API-Insomnia.json).
 * 2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your workspace: Manage Environments -> Base Environment -> `"api_key": your API key`
 * 3. Start exploring
 *
 * ![Insomnia](./img/insomnia.png)
 *
 * ## Postman
 *
 * To explore our APIs with [Postman](https://www.getpostman.com/), follow these steps:
 *
 * 1. Import our [request collections](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_collection.json) as well as our [environment file](https://raw.githubusercontent.com/graphhopper/directions-api-doc/master/web/restclients/graphhopper_directions_api.postman_environment.json).
 * 2. Specify [your API key](https://graphhopper.com/dashboard/#/register) in your environment: `"api_key": your API key`
 * 3. Start exploring
 *
 * ![Postman](./img/postman.png)
 *
 * ## API Client Libraries
 *
 * To speed up development and make coding easier, we offer the following client libraries:
 *
 *  * [JavaScript client](https://github.com/graphhopper/directions-api-js-client) - try the [live examples](https://graphhopper.com/api/1/examples/)
 *  * [Others](https://github.com/graphhopper/directions-api-clients) like C#, Ruby, PHP, Python, ... automatically created for the Route Optimization API
 *
 * ### Bandwidth reduction
 *
 * If you create your own client, make sure it supports http/2 and gzipped responses for best speed.
 *
 * If you use the Matrix, the Route Optimization API or the Cluster API and want to solve large problems, we recommend you to reduce bandwidth
 * by [compressing your POST request](https://gist.github.com/karussell/82851e303ea7b3459b2dea01f18949f4)
 * and specifying the header as follows: `Content-Encoding: gzip`. This will also avoid the HTTP 413 error "Request Entity Too Large".
 *
 * ## Contact Us
 *
 * If you have problems or questions, please read the following information:
 *
 * - [FAQ](https://graphhopper.com/api/1/docs/FAQ/)
 * - [Public forum](https://discuss.graphhopper.com/c/directions-api)
 * - [Contact us](https://www.graphhopper.com/contact-form/)
 * - [GraphHopper Status Page](https://status.graphhopper.com/)
 *
 * To stay informed about the latest developments, you can
 *
 * - follow us on [twitter](https://twitter.com/graphhopper/),
 * - read [our blog](https://graphhopper.com/blog/),
 * - watch [our documentation repository](https://github.com/graphhopper/directions-api-doc),
 * - sign up for our newsletter or
 * - [our forum](https://discuss.graphhopper.com/c/directions-api).
 *
 * Select the channel you like the most.
 *
 *
 * # Map Data and Routing Profiles
 *
 * Currently, our main data source is [OpenStreetMap](https://www.openstreetmap.org). We also integrated other network data providers.
 * This chapter gives an overview about the options you have.
 *
 * ## OpenStreetMap
 *
 * #### Geographical Coverage
 *
 * [OpenStreetMap](https://www.openstreetmap.org) covers the whole world. If you want to see for yourself if we can provide data suitable for your region,
 * please visit [GraphHopper Maps](https://graphhopper.com/maps/).
 * You can edit and modify OpenStreetMap data if you find that important information is missing, e.g. a weight limit for a bridge.
 * [Here](https://wiki.openstreetmap.org/wiki/Beginners%27_guide) is a beginner's guide that shows how to add data. If you have edited data, we usually consider your data after 1 week at the latest.
 *
 * #### Supported Vehicle Profiles
 *
 * The Routing, Matrix and Route Optimization APIs support the following vehicle profiles:
 *
 * Name       | Description           | Restrictions              | Icon
 * -----------|:----------------------|:--------------------------|:---------------------------------------------------------
 * car        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)
 * small_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck image](https://graphhopper.com/maps/img/small_truck.png)
 * truck      | Truck like a MAN or Mercedes-Benz Actros | height=3.7m, width=2.6+0.5m, length=12m, weight=13000 + 13000 kg, hgv=yes, 3 Axes | ![truck image](https://graphhopper.com/maps/img/truck.png)
 * scooter    | Moped mode | Fast inner city, often used for food delivery, is able to ignore certain bollards, maximum speed of roughly 50km/h | ![scooter image](https://graphhopper.com/maps/img/scooter.png)
 * foot       | Pedestrian or walking without dangerous [SAC-scales](https://wiki.openstreetmap.org/wiki/Key:sac_scale) | foot access         | ![foot image](https://graphhopper.com/maps/img/foot.png)
 * hike       | Pedestrian or walking with priority for more beautiful hiking tours and potentially a bit longer than `foot`. Walking duration is influenced by elevation differences.  | foot access         | ![hike image](https://graphhopper.com/maps/img/hike.png)
 * bike       | Trekking bike avoiding hills | bike access  | ![bike image](https://graphhopper.com/maps/img/bike.png)
 * mtb        | Mountainbike          | bike access         | ![Mountainbike image](https://graphhopper.com/maps/img/mtb.png)
 * racingbike| Bike preferring roads | bike access         | ![racingbike image](https://graphhopper.com/maps/img/racingbike.png)
 *
 * Please note:
 *
 *  * all motor vehicles (`car`, `small_truck`, `truck` and `scooter`) support turn restrictions via `turn_costs=true`
 *  * the free package supports only the vehicle profiles `car`, `bike` or `foot`
 *  * up to 2 different vehicle profiles can be used in a single optimization request. The number of vehicles is unaffected and depends on your subscription.
 *  * we offer custom vehicle profiles with different properties, different speed profiles or different access options. To find out more about custom profiles, please [contact us](https://www.graphhopper.com/contact-form/).
 *  * a sophisticated `motorcycle` profile is available up on request. It is powered by the [Kurviger](https://kurviger.de/en) Routing API and favors curves and slopes while avoiding cities and highways.
 *
 * ## TomTom
 *
 * If you want to include traffic, you can purchase the TomTom Add-on.
 * This Add-on only uses TomTom's road network and historical traffic information.
 * Live traffic is not yet considered. If you are interested to learn how we consider traffic information, we recommend that you read [this article](https://www.graphhopper.com/blog/2017/11/06/time-dependent-optimization/).
 *
 * Please note the following:
 *
 *  * Currently we only offer this for our [Route Optimization API](#tag/Route-Optimization-API).
 *  * In addition to our terms, you need to accept TomTom's [End User License Aggreement](https://www.graphhopper.com/tomtom-end-user-license-agreement/).
 *  * We do *not* use TomTom's web services. We only use their data with our software.
 *
 * [Contact us](https://www.graphhopper.com/contact-form/) for more details.
 *
 * #### Geographical Coverage
 *
 * We offer
 *
 * - Europe including Russia
 * - North, Central and South America
 * - Saudi Arabia
 * - United Arab Emirates
 * - South Africa
 * - Australia
 *
 * #### Supported Vehicle Profiles
 *
 * Name       | Description           | Restrictions              | Icon
 * -----------|:----------------------|:--------------------------|:---------------------------------------------------------
 * car        | Car mode              | car access                | ![car image](https://graphhopper.com/maps/img/car.png)
 * small_truck| Small truck like a Mercedes Sprinter, Ford Transit or Iveco Daily | height=2.7m, width=2+0.4m, length=5.5m, weight=2080+1400 kg | ![small truck image](https://graphhopper.com/maps/img/small_truck.png)
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.clusterAPI = new clusterapi_1.ClusterAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.geocodingAPI = new geocodingapi_1.GeocodingAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.isochroneAPI = new isochroneapi_1.IsochroneAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.mapMatchingAPI = new mapmatchingapi_1.MapMatchingAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.matrixAPI = new matrixapi_1.MatrixAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routeOptimizationAPI = new routeoptimizationapi_1.RouteOptimizationAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routingAPI = new routingapi_1.RoutingAPI(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
