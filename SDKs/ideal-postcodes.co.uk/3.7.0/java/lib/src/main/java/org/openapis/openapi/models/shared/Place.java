/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Place - Represents a geographical place
 */
public class Place {
    /**
     *   3 letter country code (ISO 3166-1)
     * 
     */
    @JsonProperty("country_iso")
    public String countryIso;
    public Place withCountryIso(String countryIso) {
        this.countryIso = countryIso;
        return this;
    }
    
    /**
     * Indicates the provenance of a place.
     * 
     *   - `geonames` GeoNames place
     */
    @JsonProperty("dataset")
    public PlaceDatasetEnum dataset;
    public Place withDataset(PlaceDatasetEnum dataset) {
        this.dataset = dataset;
        return this;
    }
    
    /**
     * Longer form description of the place.
     * 
     */
    @JsonProperty("descriptive_name")
    public String descriptiveName;
    public Place withDescriptiveName(String descriptiveName) {
        this.descriptiveName = descriptiveName;
        return this;
    }
    
    /**
     * Global unique internally generated identifier for a place
     */
    @JsonProperty("id")
    public String id;
    public Place withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Language represented by 2 letter ISO Code (639-1)
     * 
     */
    @JsonProperty("language")
    public LanguageEnum language;
    public Place withLanguage(LanguageEnum language) {
        this.language = language;
        return this;
    }
    
    /**
     * The latitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. `51.5083983`.
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("latitude")
    public Object latitude;
    public Place withLatitude(Object latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * The longitude of the postcode (WGS84/ETRS89).
     * 
     * Can be a positive or negative decimal. E.g. -0.1283983
     * 
     * Returns an empty string if no location data is available. 
     */
    @JsonProperty("longitude")
    public Object longitude;
    public Place withLongitude(Object longitude) {
        this.longitude = longitude;
        return this;
    }
    
    /**
     * Place name
     * 
     */
    @JsonProperty("name")
    public String name;
    public Place withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Native representation of a place
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("native")
    public Object native_;
    public Place withNative(Object native_) {
        this.native_ = native_;
        return this;
    }
    
}
