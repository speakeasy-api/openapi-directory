"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class UsersAddonAccountsListRequest:
    
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the addon provider."""  
    user_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'user_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the user."""  
    

@dataclasses.dataclass
class UsersAddonAccountsListAddonAccountAttributes:
    r"""The properties of the addon account entity."""
    
    display_name: str = dataclasses.field()
    r"""The user's display name on the third-party service"""  
    provider: str = dataclasses.field()
    r"""The short name of the third-party service"""  
    profile_url: Optional[str] = dataclasses.field(default=None)
    r"""The link to user's profile on third-party service"""  
    

@dataclasses.dataclass
class UsersAddonAccountsListAddonAccountLinks:
    r"""URLs to alternative representations of the addon account entity."""
    
    self_: Optional[str] = dataclasses.field(default=None)
    r"""The canonical api endpoint of this addon account"""  
    

@dataclasses.dataclass
class UsersAddonAccountsListAddonAccount:
    
    attributes: UsersAddonAccountsListAddonAccountAttributes = dataclasses.field()
    r"""The properties of the addon account entity."""  
    id: str = dataclasses.field()
    r"""The unique identifier of the addon account entity."""  
    links: UsersAddonAccountsListAddonAccountLinks = dataclasses.field()
    r"""URLs to alternative representations of the addon account entity."""  
    type: str = dataclasses.field()
    r"""The type identifier of the addon account entity (`external_accounts`)."""  
    

@dataclasses.dataclass
class UsersAddonAccountsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    