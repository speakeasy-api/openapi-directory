"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import debtoraccountwrite as shared_debtoraccountwrite
from ..shared import instructedamount as shared_instructedamount
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaymentReadPaymentProductEnum(str, Enum):
    r"""Payment product"""
    T2_P = 'T2P'
    SCT = 'SCT'
    ISCT = 'ISCT'
    CBCT = 'CBCT'

class PaymentReadPaymentStatusEnum(str, Enum):
    r"""Payment end to end identification"""
    INIT = 'INIT'
    ERRE = 'ERRE'
    ERRS = 'ERRS'
    ACCC = 'ACCC'
    ACCP = 'ACCP'
    ACSC = 'ACSC'
    ACSP = 'ACSP'
    ACTC = 'ACTC'
    ACWC = 'ACWC'
    ACWP = 'ACWP'
    RCVD = 'RCVD'
    PDNG = 'PDNG'
    RJCT = 'RJCT'
    CANC = 'CANC'
    ACFC = 'ACFC'
    PATC = 'PATC'
    PART = 'PART'

class PaymentReadPaymentTypeEnum(str, Enum):
    r"""Payment Type"""
    SINGLE_PAYMENT = 'single-payment'
    BULK_PAYMENT = 'bulk-payment'
    PERIODIC_PAYMENT = 'periodic-payment'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentRead:
    r"""PaymentReadSerializer."""
    
    creditor_account: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creditor_account') }})
    r"""Registered creditor account"""  
    debtor_account: shared_debtoraccountwrite.DebtorAccountWrite = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('debtor_account') }})
    r"""Debtor account write serializer."""  
    instructed_amount: shared_instructedamount.InstructedAmount = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructed_amount') }})
    r"""Instructed amount"""  
    redirect: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirect') }})
    r"""Redirect URL to your application after payment is done"""  
    custom_payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_payment_id'), 'exclude': lambda f: f is None }})
    r"""Payment Custom Payment ID"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Payment description"""  
    payment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_id'), 'exclude': lambda f: f is None }})
    r"""Payment ID"""  
    payment_product: Optional[PaymentReadPaymentProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_product'), 'exclude': lambda f: f is None }})
    r"""Payment product"""  
    payment_status: Optional[PaymentReadPaymentStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_status'), 'exclude': lambda f: f is None }})
    r"""Payment end to end identification"""  
    payment_type: Optional[PaymentReadPaymentTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payment_type'), 'exclude': lambda f: f is None }})
    r"""Payment Type"""  
    