"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EndpointSeverityEnum(str, Enum):
    r"""Required. Lowest threat severity that this endpoint will alert on."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    INFORMATIONAL = 'INFORMATIONAL'
    LOW = 'LOW'
    MEDIUM = 'MEDIUM'
    HIGH = 'HIGH'
    CRITICAL = 'CRITICAL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EndpointInput:
    r"""Endpoint describes a single IDS endpoint. It defines a forwarding rule to which packets can be sent for IDS inspection."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User-provided description of the endpoint"""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""The labels of the endpoint."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Required. The fully qualified URL of the network to which the IDS Endpoint is attached."""  
    severity: Optional[EndpointSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Required. Lowest threat severity that this endpoint will alert on."""  
    threat_exceptions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threatExceptions'), 'exclude': lambda f: f is None }})
    r"""List of threat IDs to be excepted from generating alerts."""  
    traffic_logs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trafficLogs'), 'exclude': lambda f: f is None }})
    r"""Whether the endpoint should report traffic logs in addition to threat logs."""  
    
class EndpointStateEnum(str, Enum):
    r"""Output only. Current state of the endpoint."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Endpoint:
    r"""Endpoint describes a single IDS endpoint. It defines a forwarding rule to which packets can be sent for IDS inspection."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The create time timestamp."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""User-provided description of the endpoint"""  
    endpoint_forwarding_rule: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointForwardingRule'), 'exclude': lambda f: f is None }})
    r"""Output only. The fully qualified URL of the endpoint's ILB Forwarding Rule."""  
    endpoint_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpointIp'), 'exclude': lambda f: f is None }})
    r"""Output only. The IP address of the IDS Endpoint's ILB."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""The labels of the endpoint."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the endpoint."""  
    network: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Required. The fully qualified URL of the network to which the IDS Endpoint is attached."""  
    severity: Optional[EndpointSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""Required. Lowest threat severity that this endpoint will alert on."""  
    state: Optional[EndpointStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. Current state of the endpoint."""  
    threat_exceptions: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('threatExceptions'), 'exclude': lambda f: f is None }})
    r"""List of threat IDs to be excepted from generating alerts."""  
    traffic_logs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trafficLogs'), 'exclude': lambda f: f is None }})
    r"""Whether the endpoint should report traffic logs in addition to threat logs."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The update time timestamp."""  
    