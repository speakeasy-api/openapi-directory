"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import tag as shared_tag
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TagResourceRequestBody:
    
    resource_share_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceShareArn') }})
    r"""Specifies the <a href=\\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\\">Amazon Resoure Name (ARN)</a> of the resource share that you want to add tags to."""  
    tags: list[shared_tag.Tag] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""A list of one or more tag key and value pairs. The tag key must be present and not be an empty string. The tag value must be present but can be an empty string."""  
    

@dataclasses.dataclass
class TagResourceRequest:
    
    request_body: TagResourceRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class TagResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    malformed_arn_exception: Optional[Any] = dataclasses.field(default=None)
    r"""MalformedArnException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_arn_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceArnNotFoundException"""  
    server_internal_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServerInternalException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    tag_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagLimitExceededException"""  
    tag_policy_violation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TagPolicyViolationException"""  
    tag_resource_response: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Success"""  
    unknown_resource_exception: Optional[Any] = dataclasses.field(default=None)
    r"""UnknownResourceException"""  
    