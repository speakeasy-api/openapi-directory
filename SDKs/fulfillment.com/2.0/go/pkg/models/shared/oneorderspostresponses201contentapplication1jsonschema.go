// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2ActionRequiredBy - Responsibility for resolving this issue
type OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2ActionRequiredBy struct {
	ID *int64 `json:"id,omitempty"`
	// Human readable description of responsible party to resolve the issue
	Name *string `json:"name,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2Stage struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2State struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2 struct {
	// Responsibility for resolving this issue
	ActionRequiredBy *OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2ActionRequiredBy `json:"actionRequiredBy,omitempty"`
	// Code, see [status codes](#section/Getting-Started/Status-Codes)
	Code       string  `json:"code"`
	Detail     *string `json:"detail,omitempty"`
	DetailCode string  `json:"detailCode"`
	// Depricated, use code instead
	ID *int64 `json:"id,omitempty"`
	// Depricated, does this status event close the order
	IsClosed *bool `json:"isClosed,omitempty"`
	// Depricated, use stage/state instead
	Name *string `json:"name,omitempty"`
	// Depricated
	Reason *string                                                                              `json:"reason,omitempty"`
	Stage  OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2Stage `json:"stage"`
	State  OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2State `json:"state"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2 struct {
	CreatedBy *OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy `json:"createdBy,omitempty"`
	// DateTime of Status Event
	Date *time.Time `json:"date,omitempty"`
	ID   int64      `json:"id"`
	// Explanation for status
	Reason *string                                                                          `json:"reason,omitempty"`
	Status *OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2StatusTypeV2 `json:"status,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaMerchantV2 struct {
	ID int64 `json:"id"`
	// Merchant Company Name
	Name string `json:"name"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaConsigneeV2IsoCountryV2 struct {
	ID *int64 `json:"id,omitempty"`
	// Two character ISO code
	Iso2 *string `json:"iso2,omitempty"`
	// Country Name
	Name *string `json:"name,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaConsigneeV2 struct {
	Address1 string  `json:"address1"`
	Address2 *string `json:"address2,omitempty"`
	// City
	AddressLocality string `json:"addressLocality"`
	// Province / State
	AddressRegion string  `json:"addressRegion"`
	CompanyName   *string `json:"companyName,omitempty"`
	// Ideally provide the two character ISO code
	Country   string                                                                         `json:"country"`
	Email     *string                                                                        `json:"email,omitempty"`
	FirstName string                                                                         `json:"firstName"`
	ID        int64                                                                          `json:"id"`
	Iso       *OneordersPostResponses201ContentApplication1jsonSchemaConsigneeV2IsoCountryV2 `json:"iso,omitempty"`
	LastName  string                                                                         `json:"lastName"`
	Phone     *string                                                                        `json:"phone,omitempty"`
	// Postal Code / Zip
	PostalCode string                                                                                        `json:"postalCode"`
	UpdatedAt  *time.Time                                                                                    `json:"updatedAt,omitempty"`
	UpdatedBy  *OnereturnsGetResponses200ContentApplication1jsonSchemaPropertiesDataItemsPropertiesUpdatedBy `json:"updatedBy,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaParentOrder struct {
	// Reference to parent `id` if order was grouped
	ID *int64 `json:"id,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaTrackingNumberV2CarrierSimpleV2 struct {
	ID int64 `json:"id"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaTrackingNumberV2 struct {
	// The computer readable alternative to the human readable
	BarcodeScanValue *string                                                                                `json:"barcodeScanValue,omitempty"`
	Carrier          *OneordersPostResponses201ContentApplication1jsonSchemaTrackingNumberV2CarrierSimpleV2 `json:"carrier,omitempty"`
	// The human readable tracking number recipients (consignee) expect
	Value *string `json:"value,omitempty"`
}

type OneordersPostResponses201ContentApplication1jsonSchemaWarehouseV2 struct {
	ID int64 `json:"id"`
}

// OneordersPostResponses201ContentApplication1jsonSchema - Standard Order Response or a Hydrated Response
type OneordersPostResponses201ContentApplication1jsonSchema struct {
	CurrentStatus OneordersPostResponses201ContentApplication1jsonSchemaStatusEventV2 `json:"currentStatus"`
	// DateTime order departed an FDC warehouse
	DepartDate *time.Time `json:"departDate,omitempty"`
	// DateTime order was dispatched for fulfillment by FDC
	DispatchDate *time.Time `json:"dispatchDate,omitempty"`
	// FDC ID for this order
	ID       int64                                                            `json:"id"`
	Merchant OneordersPostResponses201ContentApplication1jsonSchemaMerchantV2 `json:"merchant"`
	// Merchant provided ID
	MerchantOrderID string `json:"merchantOrderId"`
	// Requested ship method
	MerchantShippingMethod string                                                             `json:"merchantShippingMethod"`
	OriginalConsignee      OneordersPostResponses201ContentApplication1jsonSchemaConsigneeV2  `json:"originalConsignee"`
	ParentOrder            *OneordersPostResponses201ContentApplication1jsonSchemaParentOrder `json:"parentOrder,omitempty"`
	// Merchant provided PO#
	PurchaseOrderNum *string `json:"purchaseOrderNum,omitempty"`
	// DateTime order was recorded by FDC
	RecordedOn         time.Time                                                                         `json:"recordedOn"`
	TrackingNumbers    []OneordersPostResponses201ContentApplication1jsonSchemaTrackingNumberV2          `json:"trackingNumbers,omitempty"`
	ValidatedConsignee OneordersPostResponses201ContentApplication1jsonSchemaPropertiesOriginalConsignee `json:"validatedConsignee"`
	Warehouse          *OneordersPostResponses201ContentApplication1jsonSchemaWarehouseV2                `json:"warehouse,omitempty"`
}
