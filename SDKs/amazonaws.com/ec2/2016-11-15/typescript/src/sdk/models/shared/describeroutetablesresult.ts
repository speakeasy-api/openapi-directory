/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The state of the association.
 */
export enum DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum {
  Associating = "associating",
  Associated = "associated",
  Disassociating = "disassociating",
  Disassociated = "disassociated",
  Failed = "failed",
}

/**
 * The state of the association.
 */
export class DescribeRouteTablesResultRouteTablesAssociationsAssociationState extends SpeakeasyBase {
  @SpeakeasyMetadata()
  state?: DescribeRouteTablesResultRouteTablesAssociationsAssociationStateStateEnum;

  @SpeakeasyMetadata()
  statusMessage?: string;
}

/**
 * Describes an association between a route table and a subnet or gateway.
 */
export class DescribeRouteTablesResultRouteTablesAssociations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  associationState?: DescribeRouteTablesResultRouteTablesAssociationsAssociationState;

  @SpeakeasyMetadata()
  gatewayId?: string;

  @SpeakeasyMetadata()
  main?: boolean;

  @SpeakeasyMetadata()
  routeTableAssociationId?: string;

  @SpeakeasyMetadata()
  routeTableId?: string;

  @SpeakeasyMetadata()
  subnetId?: string;
}

/**
 * Describes a virtual private gateway propagating route.
 */
export class DescribeRouteTablesResultRouteTablesPropagatingVgws extends SpeakeasyBase {
  @SpeakeasyMetadata()
  gatewayId?: string;
}

/**
 * <p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul>
 */
export enum DescribeRouteTablesResultRouteTablesRoutesOriginEnum {
  CreateRouteTable = "CreateRouteTable",
  CreateRoute = "CreateRoute",
  EnableVgwRoutePropagation = "EnableVgwRoutePropagation",
}

/**
 * The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
 */
export enum DescribeRouteTablesResultRouteTablesRoutesStateEnum {
  Active = "active",
  Blackhole = "blackhole",
}

/**
 * Describes a route in a route table.
 */
export class DescribeRouteTablesResultRouteTablesRoutes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  carrierGatewayId?: string;

  @SpeakeasyMetadata()
  coreNetworkArn?: string;

  @SpeakeasyMetadata()
  destinationCidrBlock?: string;

  @SpeakeasyMetadata()
  destinationIpv6CidrBlock?: string;

  @SpeakeasyMetadata()
  destinationPrefixListId?: string;

  @SpeakeasyMetadata()
  egressOnlyInternetGatewayId?: string;

  @SpeakeasyMetadata()
  gatewayId?: string;

  @SpeakeasyMetadata()
  instanceId?: string;

  @SpeakeasyMetadata()
  instanceOwnerId?: string;

  @SpeakeasyMetadata()
  localGatewayId?: string;

  @SpeakeasyMetadata()
  natGatewayId?: string;

  @SpeakeasyMetadata()
  networkInterfaceId?: string;

  @SpeakeasyMetadata()
  origin?: DescribeRouteTablesResultRouteTablesRoutesOriginEnum;

  @SpeakeasyMetadata()
  state?: DescribeRouteTablesResultRouteTablesRoutesStateEnum;

  @SpeakeasyMetadata()
  transitGatewayId?: string;

  @SpeakeasyMetadata()
  vpcPeeringConnectionId?: string;
}

/**
 * Describes a tag.
 */
export class DescribeRouteTablesResultRouteTablesTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Describes a route table.
 */
export class DescribeRouteTablesResultRouteTables extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: DescribeRouteTablesResultRouteTablesAssociations,
  })
  associations?: DescribeRouteTablesResultRouteTablesAssociations[];

  @SpeakeasyMetadata()
  ownerId?: string;

  @SpeakeasyMetadata({
    elemType: DescribeRouteTablesResultRouteTablesPropagatingVgws,
  })
  propagatingVgws?: DescribeRouteTablesResultRouteTablesPropagatingVgws[];

  @SpeakeasyMetadata()
  routeTableId?: string;

  @SpeakeasyMetadata({ elemType: DescribeRouteTablesResultRouteTablesRoutes })
  routes?: DescribeRouteTablesResultRouteTablesRoutes[];

  @SpeakeasyMetadata({ elemType: DescribeRouteTablesResultRouteTablesTags })
  tags?: DescribeRouteTablesResultRouteTablesTags[];

  @SpeakeasyMetadata()
  vpcId?: string;
}

/**
 * Contains the output of DescribeRouteTables.
 */
export class DescribeRouteTablesResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  nextToken?: string;

  @SpeakeasyMetadata({ elemType: DescribeRouteTablesResultRouteTables })
  routeTables?: DescribeRouteTablesResultRouteTables[];
}
