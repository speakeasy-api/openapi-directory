"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProxyGetProductRatePlanChargeTier:
    
    created_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the Zuora user who created the ProductRatePlanChargeTier object. **Character limit**: 32 **Values**: automatically generated"""  
    created_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the ProductRatePlanChargeTier object was created. **Character limit**: 29 **Values**: automatically generated"""  
    currency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Currency'), 'exclude': lambda f: f is None }})
    r"""The code corresponding to the currency for the tier's price. **Character limit**: 3 **Values**: a valid currency code"""  
    ending_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EndingUnit'), 'exclude': lambda f: f is None }})
    r"""The end number of a range of units for the tier. **Character limit**: 16 **Values**: any positive decimal value"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})
    r"""Object identifier."""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.
    **Character limit**: 16 **Values**: a valid currency value
    """  
    price_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PriceFormat'), 'exclude': lambda f: f is None }})
    r"""Indicates if pricing is a flat fee or is per unit. This field is for tiered and volume pricing models only. **Character limit**: 8 **Values**: `FlatFee`, `PerUnit` **Note:** The values `Flat Fee` and `Per Unit` (with spaces) is valid for create or update calls."""  
    starting_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StartingUnit'), 'exclude': lambda f: f is None }})
    r"""The starting number of a range of units for the tier.
    **Character limit**: 16 **Values**: any positive decimal value
    """  
    tier: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Tier'), 'exclude': lambda f: f is None }})
    r"""A unique number that identifies the tier that the price applies to.
    **Character limit**: 20 **Values**: automatically generated
    """  
    updated_by_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedById'), 'exclude': lambda f: f is None }})
    r"""The ID of the user who last updated the product rate plan charge tier.
    **Character limit**: 32 **Values**: automatically generated
    """  
    updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date when the product rate plan charge tier was last updated.
    **Character limit**: 29 **Values**: automatically generated
    """  
    