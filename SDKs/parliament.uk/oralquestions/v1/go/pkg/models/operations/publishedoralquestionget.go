// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// PublishedOralQuestionGetParametersQuestionTypeEnum - Oral Questions where the question type is the selected type, substantive or topical.
type PublishedOralQuestionGetParametersQuestionTypeEnum string

const (
	PublishedOralQuestionGetParametersQuestionTypeEnumSubstantive PublishedOralQuestionGetParametersQuestionTypeEnum = "Substantive"
	PublishedOralQuestionGetParametersQuestionTypeEnumTopical     PublishedOralQuestionGetParametersQuestionTypeEnum = "Topical"
)

func (e PublishedOralQuestionGetParametersQuestionTypeEnum) ToPointer() *PublishedOralQuestionGetParametersQuestionTypeEnum {
	return &e
}

func (e *PublishedOralQuestionGetParametersQuestionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Substantive":
		fallthrough
	case "Topical":
		*e = PublishedOralQuestionGetParametersQuestionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PublishedOralQuestionGetParametersQuestionTypeEnum: %v", v)
	}
}

type PublishedOralQuestionGetRequest struct {
	// Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.
	ParametersAnsweringBodyIds []int `queryParam:"style=form,explode=true,name=parameters.answeringBodyIds"`
	// Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.
	ParametersAnsweringDateEnd *time.Time `queryParam:"style=form,explode=true,name=parameters.answeringDateEnd"`
	// Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.
	ParametersAnsweringDateStart *time.Time `queryParam:"style=form,explode=true,name=parameters.answeringDateStart"`
	// The ID of the member asking the question. Lists of member IDs for each house are available <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons" target="_blank">Commons</a> and <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords" target="_blank">Lords</a>.
	ParametersAskingMemberIds []int `queryParam:"style=form,explode=true,name=parameters.askingMemberIds"`
	// Oral Questions where the question is within the question time with the ID provided
	ParametersOralQuestionTimeID *int `queryParam:"style=form,explode=true,name=parameters.oralQuestionTimeId"`
	// Oral Questions where the question type is the selected type, substantive or topical.
	ParametersQuestionType *PublishedOralQuestionGetParametersQuestionTypeEnum `queryParam:"style=form,explode=true,name=parameters.questionType"`
	// The number of records to skip from the first, default is 0.
	ParametersSkip *int `queryParam:"style=form,explode=true,name=parameters.skip"`
	// The number of records to return, default is 25, maximum is 100.
	ParametersTake *int `queryParam:"style=form,explode=true,name=parameters.take"`
	// The UIN for the question - note that UINs reset at the start of each Parliamentary session.
	ParametersUINs []int `queryParam:"style=form,explode=true,name=parameters.uINs"`
}

type PublishedOralQuestionGetResponse struct {
	// OK
	APIResponseListPublishedWrittenQuestion *shared.APIResponseListPublishedWrittenQuestion
	// BadRequest
	APIResponseObject *shared.APIResponseObject
	Body              []byte
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
