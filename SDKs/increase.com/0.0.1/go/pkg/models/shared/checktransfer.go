// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CheckTransferTransferApproval - If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
type CheckTransferTransferApproval struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.
	ApprovedAt time.Time `json:"approved_at"`
	// If the Transfer was approved by a user in the dashboard, the email address of that user.
	ApprovedBy string `json:"approved_by"`
}

// CheckTransferTransferCancellation - If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
type CheckTransferTransferCancellation struct {
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.
	CanceledAt time.Time `json:"canceled_at"`
	// If the Transfer was canceled by a user in the dashboard, the email address of that user.
	CanceledBy string `json:"canceled_by"`
}

// CheckTransferCurrencyEnum - The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
type CheckTransferCurrencyEnum string

const (
	CheckTransferCurrencyEnumCad CheckTransferCurrencyEnum = "CAD"
	CheckTransferCurrencyEnumChf CheckTransferCurrencyEnum = "CHF"
	CheckTransferCurrencyEnumEur CheckTransferCurrencyEnum = "EUR"
	CheckTransferCurrencyEnumGbp CheckTransferCurrencyEnum = "GBP"
	CheckTransferCurrencyEnumJpy CheckTransferCurrencyEnum = "JPY"
	CheckTransferCurrencyEnumUsd CheckTransferCurrencyEnum = "USD"
)

func (e CheckTransferCurrencyEnum) ToPointer() *CheckTransferCurrencyEnum {
	return &e
}

func (e *CheckTransferCurrencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CAD":
		fallthrough
	case "CHF":
		fallthrough
	case "EUR":
		fallthrough
	case "GBP":
		fallthrough
	case "JPY":
		fallthrough
	case "USD":
		*e = CheckTransferCurrencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferCurrencyEnum: %v", v)
	}
}

// CheckTransferCheckTransferDepositTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
type CheckTransferCheckTransferDepositTypeEnum string

const (
	CheckTransferCheckTransferDepositTypeEnumCheckTransferDeposit CheckTransferCheckTransferDepositTypeEnum = "check_transfer_deposit"
)

func (e CheckTransferCheckTransferDepositTypeEnum) ToPointer() *CheckTransferCheckTransferDepositTypeEnum {
	return &e
}

func (e *CheckTransferCheckTransferDepositTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check_transfer_deposit":
		*e = CheckTransferCheckTransferDepositTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferCheckTransferDepositTypeEnum: %v", v)
	}
}

// CheckTransferCheckTransferDeposit - After a check transfer is deposited, this will contain supplemental details.
type CheckTransferCheckTransferDeposit struct {
	// The ID for the File containing the image of the rear of the check.
	BackImageFileID string `json:"back_image_file_id"`
	// When the check was deposited.
	DepositedAt time.Time `json:"deposited_at"`
	// The ID for the File containing the image of the front of the check.
	FrontImageFileID string `json:"front_image_file_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.
	Type CheckTransferCheckTransferDepositTypeEnum `json:"type"`
}

// CheckTransferReturnAddress - The return address to be printed on the check.
type CheckTransferReturnAddress struct {
	// The city of the address.
	City string `json:"city"`
	// The first line of the address.
	Line1 string `json:"line1"`
	// The second line of the address.
	Line2 string `json:"line2"`
	// The name of the address.
	Name string `json:"name"`
	// The US state of the address.
	State string `json:"state"`
	// The postal code of the address.
	Zip string `json:"zip"`
}

// CheckTransferCheckTransferReturnReasonEnum - The reason why the check was returned.
type CheckTransferCheckTransferReturnReasonEnum string

const (
	CheckTransferCheckTransferReturnReasonEnumMailDeliveryFailure CheckTransferCheckTransferReturnReasonEnum = "mail_delivery_failure"
	CheckTransferCheckTransferReturnReasonEnumRefusedByRecipient  CheckTransferCheckTransferReturnReasonEnum = "refused_by_recipient"
)

func (e CheckTransferCheckTransferReturnReasonEnum) ToPointer() *CheckTransferCheckTransferReturnReasonEnum {
	return &e
}

func (e *CheckTransferCheckTransferReturnReasonEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "mail_delivery_failure":
		fallthrough
	case "refused_by_recipient":
		*e = CheckTransferCheckTransferReturnReasonEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferCheckTransferReturnReasonEnum: %v", v)
	}
}

// CheckTransferCheckTransferReturn - After a check transfer is returned, this will contain supplemental details. A check transfer is returned when the receiver mails a never deposited check back to the bank printed on the check.
type CheckTransferCheckTransferReturn struct {
	// If available, a document with additional information about the return.
	FileID string `json:"file_id"`
	// The reason why the check was returned.
	Reason CheckTransferCheckTransferReturnReasonEnum `json:"reason"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was returned.
	ReturnedAt time.Time `json:"returned_at"`
	// The identifier of the Transaction that was created to credit you for the returned check.
	TransactionID string `json:"transaction_id"`
	// The identifier of the returned Check Transfer.
	TransferID string `json:"transfer_id"`
}

// CheckTransferStatusEnum - The lifecycle status of the transfer.
type CheckTransferStatusEnum string

const (
	CheckTransferStatusEnumPendingApproval   CheckTransferStatusEnum = "pending_approval"
	CheckTransferStatusEnumPendingSubmission CheckTransferStatusEnum = "pending_submission"
	CheckTransferStatusEnumSubmitted         CheckTransferStatusEnum = "submitted"
	CheckTransferStatusEnumPendingMailing    CheckTransferStatusEnum = "pending_mailing"
	CheckTransferStatusEnumMailed            CheckTransferStatusEnum = "mailed"
	CheckTransferStatusEnumCanceled          CheckTransferStatusEnum = "canceled"
	CheckTransferStatusEnumDeposited         CheckTransferStatusEnum = "deposited"
	CheckTransferStatusEnumStopped           CheckTransferStatusEnum = "stopped"
	CheckTransferStatusEnumReturned          CheckTransferStatusEnum = "returned"
	CheckTransferStatusEnumRejected          CheckTransferStatusEnum = "rejected"
	CheckTransferStatusEnumRequiresAttention CheckTransferStatusEnum = "requires_attention"
)

func (e CheckTransferStatusEnum) ToPointer() *CheckTransferStatusEnum {
	return &e
}

func (e *CheckTransferStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending_approval":
		fallthrough
	case "pending_submission":
		fallthrough
	case "submitted":
		fallthrough
	case "pending_mailing":
		fallthrough
	case "mailed":
		fallthrough
	case "canceled":
		fallthrough
	case "deposited":
		fallthrough
	case "stopped":
		fallthrough
	case "returned":
		fallthrough
	case "rejected":
		fallthrough
	case "requires_attention":
		*e = CheckTransferStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferStatusEnum: %v", v)
	}
}

// CheckTransferCheckTransferStopPaymentRequestTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
type CheckTransferCheckTransferStopPaymentRequestTypeEnum string

const (
	CheckTransferCheckTransferStopPaymentRequestTypeEnumCheckTransferStopPaymentRequest CheckTransferCheckTransferStopPaymentRequestTypeEnum = "check_transfer_stop_payment_request"
)

func (e CheckTransferCheckTransferStopPaymentRequestTypeEnum) ToPointer() *CheckTransferCheckTransferStopPaymentRequestTypeEnum {
	return &e
}

func (e *CheckTransferCheckTransferStopPaymentRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check_transfer_stop_payment_request":
		*e = CheckTransferCheckTransferStopPaymentRequestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferCheckTransferStopPaymentRequestTypeEnum: %v", v)
	}
}

// CheckTransferCheckTransferStopPaymentRequest - After a stop-payment is requested on the check, this will contain supplemental details.
type CheckTransferCheckTransferStopPaymentRequest struct {
	// The time the stop-payment was requested.
	RequestedAt time.Time `json:"requested_at"`
	// The transaction ID of the corresponding credit transaction.
	TransactionID string `json:"transaction_id"`
	// The ID of the check transfer that was stopped.
	TransferID string `json:"transfer_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
	Type CheckTransferCheckTransferStopPaymentRequestTypeEnum `json:"type"`
}

// CheckTransferCheckTransferSubmission - After the transfer is submitted, this will contain supplemental details.
type CheckTransferCheckTransferSubmission struct {
	// The identitying number of the check.
	CheckNumber string `json:"check_number"`
	// When this check transfer was submitted to our check printer.
	SubmittedAt time.Time `json:"submitted_at"`
}

// CheckTransferTypeEnum - A constant representing the object's type. For this resource it will always be `check_transfer`.
type CheckTransferTypeEnum string

const (
	CheckTransferTypeEnumCheckTransfer CheckTransferTypeEnum = "check_transfer"
)

func (e CheckTransferTypeEnum) ToPointer() *CheckTransferTypeEnum {
	return &e
}

func (e *CheckTransferTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "check_transfer":
		*e = CheckTransferTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTransferTypeEnum: %v", v)
	}
}

// CheckTransfer - Check Transfers move funds from your Increase account by mailing a physical check.
type CheckTransfer struct {
	// The identifier of the Account from which funds will be transferred.
	AccountID string `json:"account_id"`
	// The city of the check's destination.
	AddressCity string `json:"address_city"`
	// The street address of the check's destination.
	AddressLine1 string `json:"address_line1"`
	// The second line of the address of the check's destination.
	AddressLine2 string `json:"address_line2"`
	// The state of the check's destination.
	AddressState string `json:"address_state"`
	// The postal code of the check's destination.
	AddressZip string `json:"address_zip"`
	// The transfer amount in USD cents.
	Amount int64 `json:"amount"`
	// If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
	Approval CheckTransferTransferApproval `json:"approval"`
	// If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
	Cancellation CheckTransferTransferCancellation `json:"cancellation"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
	CreatedAt time.Time `json:"created_at"`
	// The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
	Currency CheckTransferCurrencyEnum `json:"currency"`
	// After a check transfer is deposited, this will contain supplemental details.
	Deposit CheckTransferCheckTransferDeposit `json:"deposit"`
	// The Check transfer's identifier.
	ID string `json:"id"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.
	MailedAt time.Time `json:"mailed_at"`
	// The descriptor that will be printed on the memo field on the check.
	Message string `json:"message"`
	// The descriptor that will be printed on the letter included with the check.
	Note string `json:"note"`
	// The name that will be printed on the check.
	RecipientName string `json:"recipient_name"`
	// The return address to be printed on the check.
	ReturnAddress CheckTransferReturnAddress `json:"return_address"`
	// After a check transfer is returned, this will contain supplemental details. A check transfer is returned when the receiver mails a never deposited check back to the bank printed on the check.
	ReturnDetails CheckTransferCheckTransferReturn `json:"return_details"`
	// The lifecycle status of the transfer.
	Status CheckTransferStatusEnum `json:"status"`
	// After a stop-payment is requested on the check, this will contain supplemental details.
	StopPaymentRequest CheckTransferCheckTransferStopPaymentRequest `json:"stop_payment_request"`
	// After the transfer is submitted, this will contain supplemental details.
	Submission CheckTransferCheckTransferSubmission `json:"submission"`
	// The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.
	SubmittedAt time.Time `json:"submitted_at"`
	// The ID for the transaction caused by the transfer.
	TransactionID string `json:"transaction_id"`
	// A constant representing the object's type. For this resource it will always be `check_transfer`.
	Type CheckTransferTypeEnum `json:"type"`
}
