// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetTracksSecurity struct {
	AuthHeader shared.SchemeAuthHeader `security:"scheme,type=apiKey,subtype=header"`
	ClientID   shared.SchemeClientID   `security:"scheme,type=apiKey,subtype=query"`
}

type GetTracksQueryParams struct {
	// Filters content by level of access the user (logged in or anonymous) has to the track. The result list will include only tracks with the specified access. Include all options if you'd like to see all possible tracks. See `Track#access` schema for more details.
	//
	Access []shared.AccessEnum `queryParam:"style=form,explode=false,name=access"`
	// Return tracks with a specified bpm[from], bpm[to]
	Bpm *shared.Bpm `queryParam:"style=deepObject,explode=true,name=bpm"`
	// (yyyy-mm-dd hh:mm:ss) return tracks created within the specified dates
	CreatedAt *shared.CreatedAt `queryParam:"style=deepObject,explode=true,name=created_at"`
	// Return tracks within a specified duration range
	Duration *shared.Duration `queryParam:"style=deepObject,explode=true,name=duration"`
	// A comma separated list of genres
	Genres *string `queryParam:"style=form,explode=true,name=genres"`
	// A comma separated list of track ids to filter on
	Ids *string `queryParam:"style=form,explode=true,name=ids"`
	// Number of results to return in the collection.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Returns paginated collection of items (recommended, returning a list without pagination is deprecated and should not be used)
	LinkedPartitioning *bool `queryParam:"style=form,explode=true,name=linked_partitioning"`
	// Offset of first result. Deprecated, use `linked_partitioning` instead.
	Offset *int64 `queryParam:"style=form,explode=true,name=offset"`
	// search
	Q string `queryParam:"style=form,explode=true,name=q"`
	// A comma separated list of tags
	Tags *string `queryParam:"style=form,explode=true,name=tags"`
}

type GetTracksRequest struct {
	QueryParams GetTracksQueryParams
	Security    GetTracksSecurity
}

type GetTracks200ApplicationJSONType string

const (
	GetTracks200ApplicationJSONTypeTracks       GetTracks200ApplicationJSONType = "Tracks"
	GetTracks200ApplicationJSONTypeArrayOfTrack GetTracks200ApplicationJSONType = "arrayOfTrack"
)

type GetTracks200ApplicationJSON struct {
	Tracks       *shared.Tracks
	ArrayOfTrack []shared.Track

	Type GetTracks200ApplicationJSONType
}

func CreateGetTracks200ApplicationJSONTracks(tracks shared.Tracks) GetTracks200ApplicationJSON {
	typ := GetTracks200ApplicationJSONTypeTracks

	return GetTracks200ApplicationJSON{
		Tracks: &tracks,
		Type:   typ,
	}
}

func CreateGetTracks200ApplicationJSONArrayOfTrack(arrayOfTrack []shared.Track) GetTracks200ApplicationJSON {
	typ := GetTracks200ApplicationJSONTypeArrayOfTrack

	return GetTracks200ApplicationJSON{
		ArrayOfTrack: arrayOfTrack,
		Type:         typ,
	}
}

func (u *GetTracks200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	tracks := new(shared.Tracks)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&tracks); err == nil {
		u.Tracks = tracks
		u.Type = GetTracks200ApplicationJSONTypeTracks
		return nil
	}

	arrayOfTrack := []shared.Track{}
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&arrayOfTrack); err == nil {
		u.ArrayOfTrack = arrayOfTrack
		u.Type = GetTracks200ApplicationJSONTypeArrayOfTrack
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetTracks200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Tracks != nil {
		return json.Marshal(u.Tracks)
	}

	if u.ArrayOfTrack != nil {
		return json.Marshal(u.ArrayOfTrack)
	}

	return nil, nil
}

type GetTracksResponse struct {
	ContentType string
	// Bad Request
	Error       *shared.Error
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetTracks200ApplicationJSONOneOf *GetTracks200ApplicationJSON
}
