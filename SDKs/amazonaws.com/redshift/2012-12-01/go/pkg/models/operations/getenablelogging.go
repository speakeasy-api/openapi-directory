// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETEnableLoggingActionEnum
type GETEnableLoggingActionEnum string

const (
	GETEnableLoggingActionEnumEnableLogging GETEnableLoggingActionEnum = "EnableLogging"
)

func (e *GETEnableLoggingActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EnableLogging":
		*e = GETEnableLoggingActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableLoggingActionEnum: %s", s)
	}
}

// GETEnableLoggingLogDestinationTypeEnum - The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.
type GETEnableLoggingLogDestinationTypeEnum string

const (
	GETEnableLoggingLogDestinationTypeEnumS3         GETEnableLoggingLogDestinationTypeEnum = "s3"
	GETEnableLoggingLogDestinationTypeEnumCloudwatch GETEnableLoggingLogDestinationTypeEnum = "cloudwatch"
)

func (e *GETEnableLoggingLogDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "s3":
		fallthrough
	case "cloudwatch":
		*e = GETEnableLoggingLogDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableLoggingLogDestinationTypeEnum: %s", s)
	}
}

// GETEnableLoggingVersionEnum
type GETEnableLoggingVersionEnum string

const (
	GETEnableLoggingVersionEnumTwoThousandAndTwelve1201 GETEnableLoggingVersionEnum = "2012-12-01"
)

func (e *GETEnableLoggingVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2012-12-01":
		*e = GETEnableLoggingVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETEnableLoggingVersionEnum: %s", s)
	}
}

type GETEnableLoggingQueryParams struct {
	Action GETEnableLoggingActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The name of an existing S3 bucket where the log files are to be stored.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the same region as the cluster</p> </li> <li> <p>The cluster must have read bucket and put object permissions</p> </li> </ul>
	BucketName *string `queryParam:"style=form,explode=true,name=BucketName"`
	// <p>The identifier of the cluster on which logging is to be started.</p> <p>Example: <code>examplecluster</code> </p>
	ClusterIdentifier string `queryParam:"style=form,explode=true,name=ClusterIdentifier"`
	// The log destination type. An enum with possible values of <code>s3</code> and <code>cloudwatch</code>.
	LogDestinationType *GETEnableLoggingLogDestinationTypeEnum `queryParam:"style=form,explode=true,name=LogDestinationType"`
	// The collection of exported log types. Possible values are <code>connectionlog</code>, <code>useractivitylog</code>, and <code>userlog</code>.
	LogExports []string `queryParam:"style=form,explode=true,name=LogExports"`
	// <p>The prefix applied to the log file names.</p> <p>Constraints:</p> <ul> <li> <p>Cannot exceed 512 characters</p> </li> <li> <p>Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are: </p> <ul> <li> <p>x00 to x20</p> </li> <li> <p>x22</p> </li> <li> <p>x27</p> </li> <li> <p>x5c</p> </li> <li> <p>x7f or larger</p> </li> </ul> </li> </ul>
	S3KeyPrefix *string                     `queryParam:"style=form,explode=true,name=S3KeyPrefix"`
	Version     GETEnableLoggingVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETEnableLoggingHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETEnableLoggingRequest struct {
	QueryParams GETEnableLoggingQueryParams
	Headers     GETEnableLoggingHeaders
}

type GETEnableLoggingResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
