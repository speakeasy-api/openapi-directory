"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import modelinput as shared_modelinput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModelPackageContainerDefinition:
    r"""Describes the Docker container for the model package."""
    
    image: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Image') }})  
    container_hostname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContainerHostname'), 'exclude': lambda f: f is None }})  
    environment: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    framework: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Framework'), 'exclude': lambda f: f is None }})  
    framework_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FrameworkVersion'), 'exclude': lambda f: f is None }})  
    image_digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageDigest'), 'exclude': lambda f: f is None }})  
    model_data_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelDataUrl'), 'exclude': lambda f: f is None }})  
    model_input: Optional[shared_modelinput.ModelInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelInput'), 'exclude': lambda f: f is None }})  
    nearest_model_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NearestModelName'), 'exclude': lambda f: f is None }})  
    product_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductId'), 'exclude': lambda f: f is None }})  
    