// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FleetMetricUnitEnum string

const (
	FleetMetricUnitEnumSeconds         FleetMetricUnitEnum = "Seconds"
	FleetMetricUnitEnumMicroseconds    FleetMetricUnitEnum = "Microseconds"
	FleetMetricUnitEnumMilliseconds    FleetMetricUnitEnum = "Milliseconds"
	FleetMetricUnitEnumBytes           FleetMetricUnitEnum = "Bytes"
	FleetMetricUnitEnumKilobytes       FleetMetricUnitEnum = "Kilobytes"
	FleetMetricUnitEnumMegabytes       FleetMetricUnitEnum = "Megabytes"
	FleetMetricUnitEnumGigabytes       FleetMetricUnitEnum = "Gigabytes"
	FleetMetricUnitEnumTerabytes       FleetMetricUnitEnum = "Terabytes"
	FleetMetricUnitEnumBits            FleetMetricUnitEnum = "Bits"
	FleetMetricUnitEnumKilobits        FleetMetricUnitEnum = "Kilobits"
	FleetMetricUnitEnumMegabits        FleetMetricUnitEnum = "Megabits"
	FleetMetricUnitEnumGigabits        FleetMetricUnitEnum = "Gigabits"
	FleetMetricUnitEnumTerabits        FleetMetricUnitEnum = "Terabits"
	FleetMetricUnitEnumPercent         FleetMetricUnitEnum = "Percent"
	FleetMetricUnitEnumCount           FleetMetricUnitEnum = "Count"
	FleetMetricUnitEnumBytesSecond     FleetMetricUnitEnum = "Bytes/Second"
	FleetMetricUnitEnumKilobytesSecond FleetMetricUnitEnum = "Kilobytes/Second"
	FleetMetricUnitEnumMegabytesSecond FleetMetricUnitEnum = "Megabytes/Second"
	FleetMetricUnitEnumGigabytesSecond FleetMetricUnitEnum = "Gigabytes/Second"
	FleetMetricUnitEnumTerabytesSecond FleetMetricUnitEnum = "Terabytes/Second"
	FleetMetricUnitEnumBitsSecond      FleetMetricUnitEnum = "Bits/Second"
	FleetMetricUnitEnumKilobitsSecond  FleetMetricUnitEnum = "Kilobits/Second"
	FleetMetricUnitEnumMegabitsSecond  FleetMetricUnitEnum = "Megabits/Second"
	FleetMetricUnitEnumGigabitsSecond  FleetMetricUnitEnum = "Gigabits/Second"
	FleetMetricUnitEnumTerabitsSecond  FleetMetricUnitEnum = "Terabits/Second"
	FleetMetricUnitEnumCountSecond     FleetMetricUnitEnum = "Count/Second"
	FleetMetricUnitEnumNone            FleetMetricUnitEnum = "None"
)

func (e *FleetMetricUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Seconds":
		fallthrough
	case "Microseconds":
		fallthrough
	case "Milliseconds":
		fallthrough
	case "Bytes":
		fallthrough
	case "Kilobytes":
		fallthrough
	case "Megabytes":
		fallthrough
	case "Gigabytes":
		fallthrough
	case "Terabytes":
		fallthrough
	case "Bits":
		fallthrough
	case "Kilobits":
		fallthrough
	case "Megabits":
		fallthrough
	case "Gigabits":
		fallthrough
	case "Terabits":
		fallthrough
	case "Percent":
		fallthrough
	case "Count":
		fallthrough
	case "Bytes/Second":
		fallthrough
	case "Kilobytes/Second":
		fallthrough
	case "Megabytes/Second":
		fallthrough
	case "Gigabytes/Second":
		fallthrough
	case "Terabytes/Second":
		fallthrough
	case "Bits/Second":
		fallthrough
	case "Kilobits/Second":
		fallthrough
	case "Megabits/Second":
		fallthrough
	case "Gigabits/Second":
		fallthrough
	case "Terabits/Second":
		fallthrough
	case "Count/Second":
		fallthrough
	case "None":
		*e = FleetMetricUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FleetMetricUnitEnum: %s", s)
	}
}
