// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/types"
)

type DashboardIMSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type DashboardIMRequest struct {
	// Start date in 'yyyy-mm-dd' format. The date range defined by the "from" and "to" parameters should only be one month as the report includes only one month worth of data at once.
	From types.Date `queryParam:"style=form,explode=true,name=from"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// End date.
	To types.Date `queryParam:"style=form,explode=true,name=to"`
}

type DashboardIM200ApplicationXMLUsers struct {
	// Total number of instant meeting calls received by the user.
	CallsReceive *int64
	// Total number of instant meeting calls made by the user.
	CallsSend *int64
	// User email.
	Email *string
	// Total number of emojis received by the user.
	EmojiReceive *int64
	// Total number of emojis sent by the user.
	EmojiSend *int64
	// Total number of files received by the user.
	FilesReceive *int64
	// Total number of files sent by the user.
	FilesSend *int64
	// Total number of messages received by the user in channels.
	GroupReceive *int64
	// Total number of messages sent by the user in channels.
	GroupSend *int64
	// Total number of images received by the user.
	ImagesReceive *int64
	// Total number of images sent by the user.
	ImagesSend *int64
	// Total number of messages received by the user.
	TotalReceive *int64
	// Total number of messages sent by the user.
	TotalSend *int64
	// User ID.
	UserID *string
	// User display name.
	UserName *string
	// Total number of video files received by the user.
	VideosReceive *int64
	// Total number of video files sent by the user.
	VideosSend *int64
	// Total number of voice files received by the user.
	VoiceReceive *int64
	// Total number of voice files sent by the user.
	VoiceSend *int64
}

// DashboardIM200ApplicationXML - Pagination object.
type DashboardIM200ApplicationXML struct {
	// Start date for this report.
	From *types.Date
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// End date for this report.
	To *types.Date
	// The number of all records available across pages.
	TotalRecords *int64
	Users        []DashboardIM200ApplicationXMLUsers
}

type DashboardIM200ApplicationJSONUsers struct {
	// Total number of instant meeting calls received by the user.
	CallsReceive *int64 `json:"calls_receive,omitempty"`
	// Total number of instant meeting calls made by the user.
	CallsSend *int64 `json:"calls_send,omitempty"`
	// User email.
	Email *string `json:"email,omitempty"`
	// Total number of emojis received by the user.
	EmojiReceive *int64 `json:"emoji_receive,omitempty"`
	// Total number of emojis sent by the user.
	EmojiSend *int64 `json:"emoji_send,omitempty"`
	// Total number of files received by the user.
	FilesReceive *int64 `json:"files_receive,omitempty"`
	// Total number of files sent by the user.
	FilesSend *int64 `json:"files_send,omitempty"`
	// Total number of messages received by the user in channels.
	GroupReceive *int64 `json:"group_receive,omitempty"`
	// Total number of messages sent by the user in channels.
	GroupSend *int64 `json:"group_send,omitempty"`
	// Total number of images received by the user.
	ImagesReceive *int64 `json:"images_receive,omitempty"`
	// Total number of images sent by the user.
	ImagesSend *int64 `json:"images_send,omitempty"`
	// Total number of messages received by the user.
	TotalReceive *int64 `json:"total_receive,omitempty"`
	// Total number of messages sent by the user.
	TotalSend *int64 `json:"total_send,omitempty"`
	// User ID.
	UserID *string `json:"user_id,omitempty"`
	// User display name.
	UserName *string `json:"user_name,omitempty"`
	// Total number of video files received by the user.
	VideosReceive *int64 `json:"videos_receive,omitempty"`
	// Total number of video files sent by the user.
	VideosSend *int64 `json:"videos_send,omitempty"`
	// Total number of voice files received by the user.
	VoiceReceive *int64 `json:"voice_receive,omitempty"`
	// Total number of voice files sent by the user.
	VoiceSend *int64 `json:"voice_send,omitempty"`
}

// DashboardIM200ApplicationJSON - Pagination object.
type DashboardIM200ApplicationJSON struct {
	// Start date for this report.
	From *types.Date `json:"from,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// End date for this report.
	To *types.Date `json:"to,omitempty"`
	// The number of all records available across pages.
	TotalRecords *int64                               `json:"total_records,omitempty"`
	Users        []DashboardIM200ApplicationJSONUsers `json:"users,omitempty"`
}

type DashboardIMResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// IM details returned.<br>
	// Only available for paid accounts that have enabled the dashboard feature.
	DashboardIM200ApplicationJSONObject *DashboardIM200ApplicationJSON
}
