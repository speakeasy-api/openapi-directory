<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Notes 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateResponse
     */
	public function keepNotesCreate(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/notes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "noteInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->note = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Note', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a note. Caller must have the `OWNER` role on the note to delete. Deleting a note removes the resource immediately and cannot be undone. Any collaborators will lose access to the note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteResponse
     */
	public function keepNotesDelete(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetResponse
     */
	public function keepNotesGet(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->note = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Note', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists notes. Every list call returns a page of results with `page_size` as the upper bound of returned items. A `page_size` of zero allows the server to choose the upper bound. The ListNotesResponse contains at most `page_size` entries. If there are more things left to list, it provides a `next_page_token` value. (Page tokens are opaque values.) To get the next page of results, copy the result's `next_page_token` into the next request's `page_token`. Repeat until the `next_page_token` returned with a page of results is empty. ListNotes return consistent results in the face of concurrent changes, or signals that it cannot with an ABORTED error.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesListResponse
     */
	public function keepNotesList(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/notes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNotesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListNotesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates one or more permissions on the note. Only permissions with the `WRITER` role may be created. If adding any permission fails, then the entire request fails and no changes are made.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateResponse
     */
	public function keepNotesPermissionsBatchCreate(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/permissions:batchCreate', \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchCreatePermissionsRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchCreatePermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchCreatePermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes one or more permissions on the note. The specified entities will immediately lose access. A permission with the `OWNER` role can't be removed. If removing a permission fails, then the entire request fails and no changes are made. Returns a 400 bad request error if a specified permission does not exist on the note.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteResponse
     */
	public function keepNotesPermissionsBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/permissions:batchDelete', \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchDeletePermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\KeepNotesPermissionsBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}