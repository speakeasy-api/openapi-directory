<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Billing 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get GitHub Actions billing for an organization
     * 
     * Gets the summary of the free and paid GitHub Actions minutes used.
     * 
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgResponse
     * @see https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization
     */
	public function billingGetGithubActionsBillingOrg(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/settings/billing/actions', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActionsBillingUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Actions billing for a user
     * 
     * Gets the summary of the free and paid GitHub Actions minutes used.
     * 
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserResponse
     * @see https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user
     */
	public function billingGetGithubActionsBillingUser(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/settings/billing/actions', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubActionsBillingUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ActionsBillingUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Packages billing for an organization
     * 
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgResponse
     * @see https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization
     */
	public function billingGetGithubPackagesBillingOrg(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/settings/billing/packages', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->packagesBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PackagesBillingUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get GitHub Packages billing for a user
     * 
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserResponse
     * @see https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user
     */
	public function billingGetGithubPackagesBillingUser(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/settings/billing/packages', \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetGithubPackagesBillingUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->packagesBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PackagesBillingUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get shared storage billing for an organization
     * 
     * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `repo` or `admin:org` scope.
     * https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgResponse
     * @see https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization
     */
	public function billingGetSharedStorageBillingOrg(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orgs/{org}/settings/billing/shared-storage', \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingOrgResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->combinedBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CombinedBillingUsage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get shared storage billing for a user
     * 
     * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
     * 
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     * 
     * Access tokens must have the `user` scope.
     * https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user - API method documentation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserResponse
     * @see https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user
     */
	public function billingGetSharedStorageBillingUser(
        \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{username}/settings/billing/shared-storage', \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BillingGetSharedStorageBillingUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->combinedBillingUsage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CombinedBillingUsage', 'json');
            }
        }

        return $response;
    }
}