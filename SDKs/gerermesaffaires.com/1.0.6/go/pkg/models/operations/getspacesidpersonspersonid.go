// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetSpacesIDPersonsPersonIDPathParams struct {
	// Id of the space
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the person to get or memberId
	PersonID string `pathParam:"style=simple,explode=false,name=personId"`
}

type GetSpacesIDPersonsPersonIDRequest struct {
	PathParams GetSpacesIDPersonsPersonIDPathParams
}

type GetSpacesIDPersonsPersonID200ApplicationJSONAddress struct {
	City       *string `json:"City,omitempty"`
	Complement *string `json:"Complement,omitempty"`
	Country    *string `json:"Country,omitempty"`
	Street     *string `json:"Street,omitempty"`
	ZipCode    *string `json:"ZipCode,omitempty"`
}

type GetSpacesIDPersonsPersonID200ApplicationJSONBirth struct {
	Date  *int64  `json:"Date,omitempty"`
	Place *string `json:"Place,omitempty"`
}

type GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum string

const (
	GetSpacesIDPersonsPersonID200ApplicationJSONSexEnumMale   GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum = "male"
	GetSpacesIDPersonsPersonID200ApplicationJSONSexEnumFemale GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum = "female"
)

func (e *GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "male":
		fallthrough
	case "female":
		*e = GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum: %s", s)
	}
}

type GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum string

const (
	GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnumTrue  GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum = "true"
	GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnumFalse GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum = "false"
)

func (e *GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "true":
		fallthrough
	case "false":
		*e = GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum: %s", s)
	}
}

// GetSpacesIDPersonsPersonID200ApplicationJSON - A person
type GetSpacesIDPersonsPersonID200ApplicationJSON struct {
	Address          *GetSpacesIDPersonsPersonID200ApplicationJSONAddress       `json:"Address,omitempty"`
	ArchivalDate     *string                                                    `json:"ArchivalDate,omitempty"`
	Birth            *GetSpacesIDPersonsPersonID200ApplicationJSONBirth         `json:"Birth,omitempty"`
	Comment          *string                                                    `json:"Comment,omitempty"`
	Email            *string                                                    `json:"Email,omitempty"`
	FirstName        *string                                                    `json:"FirstName,omitempty"`
	Function         []string                                                   `json:"Function,omitempty"`
	ID               *string                                                    `json:"Id,omitempty"`
	MemberID         *string                                                    `json:"MemberId,omitempty"`
	Mobile           *string                                                    `json:"Mobile,omitempty"`
	ModificationDate *string                                                    `json:"ModificationDate,omitempty"`
	Name             *string                                                    `json:"Name,omitempty"`
	Sex              *GetSpacesIDPersonsPersonID200ApplicationJSONSexEnum       `json:"Sex,omitempty"`
	Validated        *GetSpacesIDPersonsPersonID200ApplicationJSONValidatedEnum `json:"Validated,omitempty"`
}

type GetSpacesIDPersonsPersonIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A person
	GetSpacesIDPersonsPersonID200ApplicationJSONObject *GetSpacesIDPersonsPersonID200ApplicationJSON
}
