"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import wmxsitemapcontent as shared_wmxsitemapcontent
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WmxSitemap:
    r"""Contains detailed information about a specific URL submitted as a sitemap."""
    
    contents: Optional[list[shared_wmxsitemapcontent.WmxSitemapContent]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contents'), 'exclude': lambda f: f is None }})
    r"""The various content types in the sitemap."""  
    errors: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly."""  
    is_pending: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPending'), 'exclude': lambda f: f is None }})
    r"""If true, the sitemap has not been processed."""  
    is_sitemaps_index: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isSitemapsIndex'), 'exclude': lambda f: f is None }})
    r"""If true, the sitemap is a collection of sitemaps."""  
    last_downloaded: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastDownloaded'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date & time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd)."""  
    last_submitted: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSubmitted'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date & time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd)."""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""The url of the sitemap."""  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the sitemap. For example: rssFeed."""  
    warnings: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps."""  
    