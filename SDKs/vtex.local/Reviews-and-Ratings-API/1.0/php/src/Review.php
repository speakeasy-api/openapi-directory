<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Review 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete Multiple Reviews
     * 
     * Deletes multiple reviews at once.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMultipleReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMultipleReviewsResponse
     */
	public function deleteMultipleReviews(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMultipleReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMultipleReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMultipleReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteMultipleReviews200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete Review
     * 
     * Deletes an existing review.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteReviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteReviewResponse
     */
	public function deleteReview(
        \OpenAPI\OpenAPI\Models\Operations\DeleteReviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteReviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/review/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\DeleteReviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteReviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteReview200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Review
     * 
     * Updates the information of a review.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditReviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditReviewResponse
     */
	public function editReview(
        \OpenAPI\OpenAPI\Models\Operations\EditReviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditReviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/review/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\EditReviewRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditReviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->editReview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\EditReview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Review by Review ID
     * 
     * Retrieves information of a product review by its ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdResponse
     */
	public function getReviewbyReviewId(
        \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/review/{reviewId}', \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getReviewbyReviewId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetReviewbyReviewId200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of Reviews
     * 
     * Retrieves a list of reviews.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsResponse
     */
	public function getalistofReviews(
        \OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetalistofReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getalistofReviews200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetalistofReviews200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create Multiple Reviews
     * 
     * Creates multiple reviews.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveMultipleReviewsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveMultipleReviewsResponse
     */
	public function saveMultipleReviews(
        \OpenAPI\OpenAPI\Models\Operations\SaveMultipleReviewsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveMultipleReviewsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reviews');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveMultipleReviewsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->saveMultipleReviews200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Review
     * 
     * Creates a single review
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SaveReviewRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SaveReviewResponse
     */
	public function saveReview(
        \OpenAPI\OpenAPI\Models\Operations\SaveReviewRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SaveReviewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/review');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "saveReviewRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SaveReviewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->saveReview200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\SaveReview200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}