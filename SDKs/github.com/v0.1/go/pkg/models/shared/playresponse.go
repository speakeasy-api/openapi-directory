// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PlayResponseMessageEnum - Response message
type PlayResponseMessageEnum string

const (
	PlayResponseMessageEnumPlayExecuted                          PlayResponseMessageEnum = "Play Executed"
	PlayResponseMessageEnumCallUUIDParameterMissing              PlayResponseMessageEnum = "CallUUID Parameter Missing"
	PlayResponseMessageEnumSoundsParameterMissing                PlayResponseMessageEnum = "Sounds Parameter Missing"
	PlayResponseMessageEnumLegsParameterIsInvalid                PlayResponseMessageEnum = "Legs Parameter is Invalid"
	PlayResponseMessageEnumLengthParameterMustBeAPositiveInteger PlayResponseMessageEnum = "Length Parameter must be a positive integer"
	PlayResponseMessageEnumSoundsParameterIsInvalid              PlayResponseMessageEnum = "Sounds Parameter is Invalid"
	PlayResponseMessageEnumPlayFailedCallNotFound                PlayResponseMessageEnum = "Play Failed -- Call not found"
	PlayResponseMessageEnumPlayFailed                            PlayResponseMessageEnum = "Play Failed"
)

func (e *PlayResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Play Executed":
		fallthrough
	case "CallUUID Parameter Missing":
		fallthrough
	case "Sounds Parameter Missing":
		fallthrough
	case "Legs Parameter is Invalid":
		fallthrough
	case "Length Parameter must be a positive integer":
		fallthrough
	case "Sounds Parameter is Invalid":
		fallthrough
	case "Play Failed -- Call not found":
		fallthrough
	case "Play Failed":
		*e = PlayResponseMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PlayResponseMessageEnum: %s", s)
	}
}

// PlayResponse - Response
type PlayResponse struct {
	// Response message
	Message PlayResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
