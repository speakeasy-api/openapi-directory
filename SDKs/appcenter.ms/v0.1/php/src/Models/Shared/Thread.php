<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Thread - a thread representation
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Thread
{
    /**
     * True if this thread crashed
     * 
     * @var ?bool $crashed
     */
	#[\JMS\Serializer\Annotation\SerializedName('crashed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $crashed = null;
    
    /**
     * a exception
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Exception $exception
     */
	#[\JMS\Serializer\Annotation\SerializedName('exception')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Exception')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Exception $exception = null;
    
    /**
     * frames of that thread
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\ThreadFrames> $frames
     */
	#[\JMS\Serializer\Annotation\SerializedName('frames')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\ThreadFrames>')]
    public array $frames;
    
    /**
     * SDK/Platform this thread is beeing generated from
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ThreadPlatformEnum $platform
     */
	#[\JMS\Serializer\Annotation\SerializedName('platform')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ThreadPlatformEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ThreadPlatformEnum $platform = null;
    
    /**
     * Shows if a thread is relevant or not. Is false if all frames are non relevant, otherwise true
     * 
     * @var ?bool $relevant
     */
	#[\JMS\Serializer\Annotation\SerializedName('relevant')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $relevant = null;
    
    /**
     * name of the thread
     * 
     * @var string $title
     */
	#[\JMS\Serializer\Annotation\SerializedName('title')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $title;
    
	public function __construct()
	{
		$this->crashed = null;
		$this->exception = null;
		$this->frames = [];
		$this->platform = null;
		$this->relevant = null;
		$this->title = "";
	}
}
