"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ClaimIntoOrganizationRequestBodyLicensesModeEnum(str, Enum):
    r"""Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled."""
    ADD_DEVICES = 'addDevices'
    RENEW = 'renew'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClaimIntoOrganizationRequestBodyLicenses:
    
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    r"""The key of the license"""  
    mode: Optional[ClaimIntoOrganizationRequestBodyLicensesModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})
    r"""Either 'renew' or 'addDevices'. 'addDevices' will increase the license limit, while 'renew' will extend the amount of time until expiration. Defaults to 'addDevices'. All licenses must be claimed with the same mode, and at most one renewal can be claimed at a time. This parameter is legacy and does not apply to organizations with per-device licensing enabled."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClaimIntoOrganizationRequestBody:
    
    licenses: Optional[list[ClaimIntoOrganizationRequestBodyLicenses]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('licenses'), 'exclude': lambda f: f is None }})
    r"""The licenses that should be claimed"""  
    orders: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('orders'), 'exclude': lambda f: f is None }})
    r"""The numbers of the orders that should be claimed"""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serials'), 'exclude': lambda f: f is None }})
    r"""The serials of the devices that should be claimed"""  
    

@dataclasses.dataclass
class ClaimIntoOrganizationRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[ClaimIntoOrganizationRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class ClaimIntoOrganizationResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    claim_into_organization_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    