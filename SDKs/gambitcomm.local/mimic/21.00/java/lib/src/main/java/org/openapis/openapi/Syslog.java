/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Syslog {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Syslog(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Show the agent's SYSLOG argument structure
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetArgsResponse protocolSyslogGetArgs(org.openapis.openapi.models.operations.ProtocolSyslogGetArgsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogGetArgsRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/get/args", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetArgsResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetArgsResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogGetArgs200ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.protocolSyslogGetArgs200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Show the outgoing message's attributes
     * Attribute can be server , sequence , separator , hostname , timestamp
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetAttrResponse protocolSyslogGetAttr(org.openapis.openapi.models.operations.ProtocolSyslogGetAttrRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogGetAttrRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/get/{attr}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetAttrResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetAttrResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogGetAttr200ApplicationJSONString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.protocolSyslogGetAttr200ApplicationJSONString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Show the agent's SYSLOG configuration
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetConfigResponse protocolSyslogGetConfig(org.openapis.openapi.models.operations.ProtocolSyslogGetConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogGetConfigRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/get/config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetConfigResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetConfigResponse(contentType, httpRes.statusCode()) {{
            configSYSLOG = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConfigSYSLOG out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConfigSYSLOG.class);
                res.configSYSLOG = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Show the agent's SYSLOG statistics
     * Statistics of fields indicated in the headers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetStatisticsResponse protocolSyslogGetStatistics(org.openapis.openapi.models.operations.ProtocolSyslogGetStatisticsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogGetStatisticsRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/get/statistics", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetStatisticsResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetStatisticsResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogGetStatistics200ApplicationJSONInt32Integers = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                Integer[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), Integer[].class);
                res.protocolSyslogGetStatistics200ApplicationJSONInt32Integers = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Show the SYSLOG statistics headers
     * The headers of statistics fields
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetStatsHdrResponse protocolSyslogGetStatsHdr() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/mimic/protocol/msg/syslog/get/stats_hdr");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetStatsHdrResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetStatsHdrResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogGetStatsHdr200ApplicationJSONStrings = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                String[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), String[].class);
                res.protocolSyslogGetStatsHdr200ApplicationJSONStrings = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Show the agent's SYSLOG traffic tracing
     * Trace 1 means enabled, 0 means not
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogGetTraceResponse protocolSyslogGetTrace(org.openapis.openapi.models.operations.ProtocolSyslogGetTraceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogGetTraceRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/get/trace", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogGetTraceResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogGetTraceResponse(contentType, httpRes.statusCode()) {{
            configSYSLOG = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ConfigSYSLOG out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ConfigSYSLOG.class);
                res.configSYSLOG = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Set the agent's SYSLOG traffic tracing
     * 1 to enable, 0 to disable
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogSendResponse protocolSyslogSend(org.openapis.openapi.models.operations.ProtocolSyslogSendRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogSendRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/send/{pri}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "syslogMsg", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogSendResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogSendResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogSend200ApplicationJSONString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.protocolSyslogSend200ApplicationJSONString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Set the outgoing message's attributes
     * Attribute can be server , sequence , separator , hostname , timestamp
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogSetAttrResponse protocolSyslogSetAttr(org.openapis.openapi.models.operations.ProtocolSyslogSetAttrRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogSetAttrRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/set/{attr}/{value}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogSetAttrResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogSetAttrResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogSetAttr200ApplicationJSONString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.protocolSyslogSetAttr200ApplicationJSONString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Set the agent's SYSLOG configuration
     * Agent's SYSLOG configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogSetConfigResponse protocolSyslogSetConfig(org.openapis.openapi.models.operations.ProtocolSyslogSetConfigRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogSetConfigRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/set/config/{argument}/{value}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogSetConfigResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogSetConfigResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogSetConfig200ApplicationJSONString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.protocolSyslogSetConfig200ApplicationJSONString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Set the agent's SYSLOG traffic tracing
     * 1 to enable, 0 to disable
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ProtocolSyslogSetTraceResponse protocolSyslogSetTrace(org.openapis.openapi.models.operations.ProtocolSyslogSetTraceRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ProtocolSyslogSetTraceRequest.class, baseUrl, "/mimic/agent/{agentNum}/protocol/msg/syslog/set/trace/{enableOrNot}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ProtocolSyslogSetTraceResponse res = new org.openapis.openapi.models.operations.ProtocolSyslogSetTraceResponse(contentType, httpRes.statusCode()) {{
            protocolSyslogSetTrace200ApplicationJSONString = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                String out = new String(httpRes.body(), StandardCharsets.UTF_8);
                res.protocolSyslogSetTrace200ApplicationJSONString = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }
}