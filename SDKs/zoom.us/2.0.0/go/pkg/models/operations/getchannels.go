// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type GetChannelsSecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type GetChannelsRequest struct {
	// The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records returned from a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Unique identifier of the user.
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type GetChannels200ApplicationXMLChannelsChannelsSettings struct {
	AllowToAddExternalUsers               *int64
	NewMembersCanSeePreviousMessagesFiles *bool
	PostingPermissions                    *int64
}

type GetChannels200ApplicationXMLChannels struct {
	ChannelsSettings *GetChannels200ApplicationXMLChannelsChannelsSettings
	// Channel ID: Unique identifier of the Channel.
	ID *string
	// Name of the channel.
	Name *string
	// Type of the channel. The value can be one of the following:<br>
	// `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
	// `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
	// `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
	// `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
	// `5`: **Public channel**, similar to above, except members can invite members of other accounts.
	Type *int64
}

// GetChannels200ApplicationXML - **Status Code**: `200` <br>
// User's channels returned.
type GetChannels200ApplicationXML struct {
	// Chat Channel object(s).
	Channels []GetChannels200ApplicationXMLChannels
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned with a single API call.
	// Default value: 30.
	PageSize *int64
	// The total number of records found.
	TotalRecords *int64
}

type GetChannels200ApplicationJSONChannelsChannelsSettings struct {
	AllowToAddExternalUsers               *int64 `json:"allow_to_add_external_users,omitempty"`
	NewMembersCanSeePreviousMessagesFiles *bool  `json:"new_members_can_see_previous_messages_files,omitempty"`
	PostingPermissions                    *int64 `json:"posting_permissions,omitempty"`
}

type GetChannels200ApplicationJSONChannels struct {
	ChannelsSettings *GetChannels200ApplicationJSONChannelsChannelsSettings `json:"channels_settings,omitempty"`
	// Channel ID: Unique identifier of the Channel.
	ID *string `json:"id,omitempty"`
	// Name of the channel.
	Name *string `json:"name,omitempty"`
	// Type of the channel. The value can be one of the following:<br>
	// `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
	// `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
	// `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
	// `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
	// `5`: **Public channel**, similar to above, except members can invite members of other accounts.
	Type *int64 `json:"type,omitempty"`
}

// GetChannels200ApplicationJSON - **Status Code**: `200` <br>
// User's channels returned.
type GetChannels200ApplicationJSON struct {
	// Chat Channel object(s).
	Channels []GetChannels200ApplicationJSONChannels `json:"channels,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned with a single API call.
	// Default value: 30.
	PageSize *int64 `json:"page_size,omitempty"`
	// The total number of records found.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type GetChannelsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **Status Code**: `200` <br>
	// User's channels returned.
	GetChannels200ApplicationJSONObject *GetChannels200ApplicationJSON
}
