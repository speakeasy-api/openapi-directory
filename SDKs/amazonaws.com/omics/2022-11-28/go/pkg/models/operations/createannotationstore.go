// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateAnnotationStoreHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

// CreateAnnotationStoreRequestBodyReference - A genome reference.
type CreateAnnotationStoreRequestBodyReference struct {
	ReferenceArn *string `json:"referenceArn,omitempty"`
}

// CreateAnnotationStoreRequestBodySseConfig - Server-side encryption (SSE) settings for a store.
type CreateAnnotationStoreRequestBodySseConfig struct {
	KeyArn *string                    `json:"keyArn,omitempty"`
	Type   *shared.EncryptionTypeEnum `json:"type,omitempty"`
}

// CreateAnnotationStoreRequestBodyStoreFormatEnum - The annotation file format of the store.
type CreateAnnotationStoreRequestBodyStoreFormatEnum string

const (
	CreateAnnotationStoreRequestBodyStoreFormatEnumGff CreateAnnotationStoreRequestBodyStoreFormatEnum = "GFF"
	CreateAnnotationStoreRequestBodyStoreFormatEnumTsv CreateAnnotationStoreRequestBodyStoreFormatEnum = "TSV"
	CreateAnnotationStoreRequestBodyStoreFormatEnumVcf CreateAnnotationStoreRequestBodyStoreFormatEnum = "VCF"
)

func (e *CreateAnnotationStoreRequestBodyStoreFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GFF":
		fallthrough
	case "TSV":
		fallthrough
	case "VCF":
		*e = CreateAnnotationStoreRequestBodyStoreFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAnnotationStoreRequestBodyStoreFormatEnum: %s", s)
	}
}

// CreateAnnotationStoreRequestBodyStoreOptions - Settings for a store.
type CreateAnnotationStoreRequestBodyStoreOptions struct {
	TsvStoreOptions *shared.TsvStoreOptions `json:"tsvStoreOptions,omitempty"`
}

type CreateAnnotationStoreRequestBody struct {
	// A description for the store.
	Description *string `json:"description,omitempty"`
	// A name for the store.
	Name *string `json:"name,omitempty"`
	// A genome reference.
	Reference *CreateAnnotationStoreRequestBodyReference `json:"reference,omitempty"`
	// Server-side encryption (SSE) settings for a store.
	SseConfig *CreateAnnotationStoreRequestBodySseConfig `json:"sseConfig,omitempty"`
	// The annotation file format of the store.
	StoreFormat CreateAnnotationStoreRequestBodyStoreFormatEnum `json:"storeFormat"`
	// Settings for a store.
	StoreOptions *CreateAnnotationStoreRequestBodyStoreOptions `json:"storeOptions,omitempty"`
	// Tags for the store.
	Tags map[string]string `json:"tags,omitempty"`
}

type CreateAnnotationStoreRequest struct {
	Headers CreateAnnotationStoreHeaders
	Request CreateAnnotationStoreRequestBody `request:"mediaType=application/json"`
}

type CreateAnnotationStoreResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// Success
	CreateAnnotationStoreResponse *shared.CreateAnnotationStoreResponse
	// InternalServerException
	InternalServerException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceQuotaExceededException
	ServiceQuotaExceededException interface{}
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
