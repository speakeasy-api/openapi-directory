// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum - The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY".
type UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum string

const (
	UpdateNetworkSwitchQosRuleRequestBodyProtocolEnumAny UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum = "ANY"
	UpdateNetworkSwitchQosRuleRequestBodyProtocolEnumTCP UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum = "TCP"
	UpdateNetworkSwitchQosRuleRequestBodyProtocolEnumUDP UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum = "UDP"
)

func (e UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum) ToPointer() *UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum {
	return &e
}

func (e *UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ANY":
		fallthrough
	case "TCP":
		fallthrough
	case "UDP":
		*e = UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum: %v", v)
	}
}

type UpdateNetworkSwitchQosRuleRequestBody struct {
	// DSCP tag that should be assigned to incoming packet. Set this to -1 to trust incoming DSCP. Default value is 0.
	Dscp *int64 `json:"dscp,omitempty"`
	// The destination port of the incoming packet. Applicable only if protocol is TCP or UDP.
	DstPort *int64 `json:"dstPort,omitempty"`
	// The destination port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	DstPortRange *string `json:"dstPortRange,omitempty"`
	// The protocol of the incoming packet. Can be one of "ANY", "TCP" or "UDP". Default value is "ANY".
	Protocol *UpdateNetworkSwitchQosRuleRequestBodyProtocolEnum `json:"protocol,omitempty"`
	// The source port of the incoming packet. Applicable only if protocol is TCP or UDP.
	SrcPort *int64 `json:"srcPort,omitempty"`
	// The source port range of the incoming packet. Applicable only if protocol is set to TCP or UDP. Example: 70-80
	SrcPortRange *string `json:"srcPortRange,omitempty"`
	// The VLAN of the incoming packet. A null value will match any VLAN.
	Vlan *int64 `json:"vlan,omitempty"`
}

type UpdateNetworkSwitchQosRuleRequest struct {
	RequestBody *UpdateNetworkSwitchQosRuleRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                 `pathParam:"style=simple,explode=false,name=networkId"`
	QosRuleID   string                                 `pathParam:"style=simple,explode=false,name=qosRuleId"`
}

type UpdateNetworkSwitchQosRuleResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkSwitchQosRule200ApplicationJSONObject map[string]interface{}
}
