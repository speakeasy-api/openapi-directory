"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Labor:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_break_type(self, request: shared.CreateBreakTypeRequest, security: operations.CreateBreakTypeSecurity) -> operations.CreateBreakTypeResponse:
        r"""CreateBreakType
        Creates a new `BreakType`.
        
        A `BreakType` is a template for creating `Break` objects.
        You must provide the following values in your request to this
        endpoint:
        
        - `location_id`
        - `break_name`
        - `expected_duration`
        - `is_paid`
        
        You can only have three `BreakType` instances per location. If you attempt to add a fourth
        `BreakType` for a location, an `INVALID_REQUEST_ERROR` \"Exceeded limit of 3 breaks per location.\"
        is returned.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/break-types'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateBreakTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateBreakTypeResponse])
                res.create_break_type_response = out

        return res

    def create_shift(self, request: shared.CreateShiftRequest, security: operations.CreateShiftSecurity) -> operations.CreateShiftResponse:
        r"""CreateShift
        Creates a new `Shift`.
        
        A `Shift` represents a complete workday for a single employee.
        You must provide the following values in your request to this
        endpoint:
        
        - `location_id`
        - `employee_id`
        - `start_at`
        
        An attempt to create a new `Shift` can result in a `BAD_REQUEST` error when:
        - The `status` of the new `Shift` is `OPEN` and the employee has another
        shift with an `OPEN` status.
        - The `start_at` date is in the future.
        - The `start_at` or `end_at` date overlaps another shift for the same employee.
        - The `Break` instances are set in the request and a break `start_at`
        is before the `Shift.start_at`, a break `end_at` is after
        the `Shift.end_at`, or both.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/shifts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateShiftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateShiftResponse])
                res.create_shift_response = out

        return res

    def delete_break_type(self, request: operations.DeleteBreakTypeRequest, security: operations.DeleteBreakTypeSecurity) -> operations.DeleteBreakTypeResponse:
        r"""DeleteBreakType
        Deletes an existing `BreakType`.
        
        A `BreakType` can be deleted even if it is referenced from a `Shift`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBreakTypeRequest, base_url, '/v2/labor/break-types/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBreakTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteBreakTypeResponse])
                res.delete_break_type_response = out

        return res

    def delete_shift(self, request: operations.DeleteShiftRequest, security: operations.DeleteShiftSecurity) -> operations.DeleteShiftResponse:
        r"""DeleteShift
        Deletes a `Shift`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteShiftRequest, base_url, '/v2/labor/shifts/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteShiftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DeleteShiftResponse])
                res.delete_shift_response = out

        return res

    def get_break_type(self, request: operations.GetBreakTypeRequest, security: operations.GetBreakTypeSecurity) -> operations.GetBreakTypeResponse:
        r"""GetBreakType
        Returns a single `BreakType` specified by `id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBreakTypeRequest, base_url, '/v2/labor/break-types/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBreakTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetBreakTypeResponse])
                res.get_break_type_response = out

        return res

    def get_employee_wage(self, request: operations.GetEmployeeWageRequest, security: operations.GetEmployeeWageSecurity) -> operations.GetEmployeeWageResponse:
        r"""GetEmployeeWage
        Returns a single `EmployeeWage` specified by `id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEmployeeWageRequest, base_url, '/v2/labor/employee-wages/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEmployeeWageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetEmployeeWageResponse])
                res.get_employee_wage_response = out

        return res

    def get_shift(self, request: operations.GetShiftRequest, security: operations.GetShiftSecurity) -> operations.GetShiftResponse:
        r"""GetShift
        Returns a single `Shift` specified by `id`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShiftRequest, base_url, '/v2/labor/shifts/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShiftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetShiftResponse])
                res.get_shift_response = out

        return res

    def get_team_member_wage(self, request: operations.GetTeamMemberWageRequest, security: operations.GetTeamMemberWageSecurity) -> operations.GetTeamMemberWageResponse:
        r"""GetTeamMemberWage
        Returns a single `TeamMemberWage` specified by `id `.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTeamMemberWageRequest, base_url, '/v2/labor/team-member-wages/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTeamMemberWageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTeamMemberWageResponse])
                res.get_team_member_wage_response = out

        return res

    def list_break_types(self, request: operations.ListBreakTypesRequest, security: operations.ListBreakTypesSecurity) -> operations.ListBreakTypesResponse:
        r"""ListBreakTypes
        Returns a paginated list of `BreakType` instances for a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/break-types'
        
        query_params = utils.get_query_params(operations.ListBreakTypesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListBreakTypesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBreakTypesResponse])
                res.list_break_types_response = out

        return res

    def list_employee_wages(self, request: operations.ListEmployeeWagesRequest, security: operations.ListEmployeeWagesSecurity) -> operations.ListEmployeeWagesResponse:
        r"""ListEmployeeWages
        Returns a paginated list of `EmployeeWage` instances for a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/employee-wages'
        
        query_params = utils.get_query_params(operations.ListEmployeeWagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListEmployeeWagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListEmployeeWagesResponse])
                res.list_employee_wages_response = out

        return res

    def list_team_member_wages(self, request: operations.ListTeamMemberWagesRequest, security: operations.ListTeamMemberWagesSecurity) -> operations.ListTeamMemberWagesResponse:
        r"""ListTeamMemberWages
        Returns a paginated list of `TeamMemberWage` instances for a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/team-member-wages'
        
        query_params = utils.get_query_params(operations.ListTeamMemberWagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTeamMemberWagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTeamMemberWagesResponse])
                res.list_team_member_wages_response = out

        return res

    def list_workweek_configs(self, request: operations.ListWorkweekConfigsRequest, security: operations.ListWorkweekConfigsSecurity) -> operations.ListWorkweekConfigsResponse:
        r"""ListWorkweekConfigs
        Returns a list of `WorkweekConfig` instances for a business.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/workweek-configs'
        
        query_params = utils.get_query_params(operations.ListWorkweekConfigsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWorkweekConfigsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListWorkweekConfigsResponse])
                res.list_workweek_configs_response = out

        return res

    def search_shifts(self, request: shared.SearchShiftsRequest, security: operations.SearchShiftsSecurity) -> operations.SearchShiftsResponse:
        r"""SearchShifts
        Returns a paginated list of `Shift` records for a business.
        The list to be returned can be filtered by:
        - Location IDs.
        - Employee IDs.
        - Shift status (`OPEN` and `CLOSED`).
        - Shift start.
        - Shift end.
        - Workday details.
        
        The list can be sorted by:
        - `start_at`.
        - `end_at`.
        - `created_at`.
        - `updated_at`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/labor/shifts/search'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchShiftsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SearchShiftsResponse])
                res.search_shifts_response = out

        return res

    def update_break_type(self, request: operations.UpdateBreakTypeRequest, security: operations.UpdateBreakTypeSecurity) -> operations.UpdateBreakTypeResponse:
        r"""UpdateBreakType
        Updates an existing `BreakType`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateBreakTypeRequest, base_url, '/v2/labor/break-types/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_break_type_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateBreakTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateBreakTypeResponse])
                res.update_break_type_response = out

        return res

    def update_shift(self, request: operations.UpdateShiftRequest, security: operations.UpdateShiftSecurity) -> operations.UpdateShiftResponse:
        r"""UpdateShift
        Updates an existing `Shift`.
        
        When adding a `Break` to a `Shift`, any earlier `Break` instances in the `Shift` have
        the `end_at` property set to a valid RFC-3339 datetime string.
        
        When closing a `Shift`, all `Break` instances in the `Shift` must be complete with `end_at`
        set on each `Break`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateShiftRequest, base_url, '/v2/labor/shifts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_shift_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateShiftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateShiftResponse])
                res.update_shift_response = out

        return res

    def update_workweek_config(self, request: operations.UpdateWorkweekConfigRequest, security: operations.UpdateWorkweekConfigSecurity) -> operations.UpdateWorkweekConfigResponse:
        r"""UpdateWorkweekConfig
        Updates a `WorkweekConfig`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateWorkweekConfigRequest, base_url, '/v2/labor/workweek-configs/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_workweek_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWorkweekConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UpdateWorkweekConfigResponse])
                res.update_workweek_config_response = out

        return res

    