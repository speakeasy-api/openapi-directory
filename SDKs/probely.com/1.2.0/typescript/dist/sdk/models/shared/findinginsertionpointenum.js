"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindingInsertionPointEnum = void 0;
/**
 * An insertion point is the place in the HTTP request where the
 *
 * @remarks
 * malicious payload is injected to exploit the vulnerability.
 *   * cookie - Payload injected into the value of an HTTP cookie
 *   * header - Payload injected into the header of an HTTP request
 *   * parameter - Payload injected into the value of a query string
 *   parameter
 *   * arbitrary_url_param - Payload injected into the value of an
 *   arbitrarily added query string parameter
 *   * url_filename - Payload injected into the URL filename part
 *   * url_folder - Payload injected into the URL folder part
 *   * multipart_parameter - Payload is inserted into the value of a
 *   parameter attribute within a multi-part message body (such as
 *   the name of an uploaded file).
 *   * <empty> - No payload to inject.
 *
 */
var FindingInsertionPointEnum;
(function (FindingInsertionPointEnum) {
    FindingInsertionPointEnum["Cookie"] = "cookie";
    FindingInsertionPointEnum["Header"] = "header";
    FindingInsertionPointEnum["Parameter"] = "parameter";
    FindingInsertionPointEnum["ArbitraryUrlParamName"] = "arbitrary_url_param_name";
    FindingInsertionPointEnum["UrlPathFolder"] = "url_path_folder";
    FindingInsertionPointEnum["Unknown"] = "";
})(FindingInsertionPointEnum = exports.FindingInsertionPointEnum || (exports.FindingInsertionPointEnum = {}));
