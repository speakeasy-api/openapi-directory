/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ReleasesListLatestSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class ReleasesListLatestRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;
}

/**
 * Build information for the release
 *
 * @remarks
 *
 */
export class ReleasesListLatest200ApplicationJSONBuild extends SpeakeasyBase {
  /**
   * The branch name of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branch_name" })
  branchName?: string;

  /**
   * The commit hash of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_hash" })
  commitHash?: string;

  /**
   * The commit message of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_message" })
  commitMessage?: string;
}

/**
 * OBSOLETE. Will be removed in next version. The destination type.<br>
 *
 * @remarks
 * <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
 * <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
 *
 */
export enum ReleasesListLatest200ApplicationJSONDestinationTypeEnum {
  Group = "group",
  Store = "store",
  Tester = "tester",
}

/**
 * Destination can be either store or group.
 */
export enum ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum {
  Group = "group",
  Store = "store",
  Tester = "tester",
}

/**
 * type of the distribution store currently stores type can be intune, googleplay or windows.
 */
export enum ReleasesListLatest200ApplicationJSONDestinationsTypeEnum {
  Intune = "intune",
  Googleplay = "googleplay",
  Apple = "apple",
  None = "none",
}

/**
 * A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
 */
export class ReleasesListLatest200ApplicationJSONDestinations extends SpeakeasyBase {
  /**
   * Destination can be either store or group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_type" })
  destinationType?: ReleasesListLatest200ApplicationJSONDestinationsDestinationTypeEnum;

  /**
   * Display name for the group or tester
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * ID identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Is the containing release the latest one in this distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_latest" })
  isLatest?: boolean;

  /**
   * A name identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * publishing status of the release in the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishing_status" })
  publishingStatus?: string;

  /**
   * type of the distribution store currently stores type can be intune, googleplay or windows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ReleasesListLatest200ApplicationJSONDestinationsTypeEnum;
}

export class ReleasesListLatest200ApplicationJSONDistributionGroups extends SpeakeasyBase {
  /**
   * ID identifying a unique distribution group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Is the containing release the latest one in this distribution group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_latest" })
  isLatest?: boolean;

  /**
   * A name identifying a unique distribution group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * type of the distribution store currently stores type can be intune, googleplay or windows.
 */
export enum ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum {
  Intune = "intune",
  Googleplay = "googleplay",
  Apple = "apple",
  None = "none",
}

export class ReleasesListLatest200ApplicationJSONDistributionStores extends SpeakeasyBase {
  /**
   * ID identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Is the containing release the latest one in this distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_latest" })
  isLatest?: boolean;

  /**
   * A name identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * publishing status of the release in the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishing_status" })
  publishingStatus?: string;

  /**
   * type of the distribution store currently stores type can be intune, googleplay or windows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ReleasesListLatest200ApplicationJSONDistributionStoresTypeEnum;
}

/**
 * The release's origin
 */
export enum ReleasesListLatest200ApplicationJSONOriginEnum {
  Hockeyapp = "hockeyapp",
  Appcenter = "appcenter",
}

/**
 * Basic information on a release
 */
export class ReleasesListLatest200ApplicationJSON extends SpeakeasyBase {
  /**
   * Build information for the release
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build" })
  @Type(() => ReleasesListLatest200ApplicationJSONBuild)
  build?: ReleasesListLatest200ApplicationJSONBuild;

  /**
   * OBSOLETE. Will be removed in next version. The destination type.<br>
   *
   * @remarks
   * <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
   * <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_type" })
  destinationType?: ReleasesListLatest200ApplicationJSONDestinationTypeEnum;

  /**
   * A list of distribution groups or stores.
   */
  @SpeakeasyMetadata({
    elemType: ReleasesListLatest200ApplicationJSONDestinations,
  })
  @Expose({ name: "destinations" })
  @Type(() => ReleasesListLatest200ApplicationJSONDestinations)
  destinations?: ReleasesListLatest200ApplicationJSONDestinations[];

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
   */
  @SpeakeasyMetadata({
    elemType: ReleasesListLatest200ApplicationJSONDistributionGroups,
  })
  @Expose({ name: "distribution_groups" })
  @Type(() => ReleasesListLatest200ApplicationJSONDistributionGroups)
  distributionGroups?: ReleasesListLatest200ApplicationJSONDistributionGroups[];

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
   */
  @SpeakeasyMetadata({
    elemType: ReleasesListLatest200ApplicationJSONDistributionStores,
  })
  @Expose({ name: "distribution_stores" })
  @Type(() => ReleasesListLatest200ApplicationJSONDistributionStores)
  distributionStores?: ReleasesListLatest200ApplicationJSONDistributionStores[];

  /**
   * This value determines the whether a release currently is enabled or disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * The file extension of the main (user-uploaded) package file.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_extension" })
  fileExtension?: string;

  /**
   * ID identifying this unique release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * This value determines if a release is external or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_external_build" })
  isExternalBuild?: boolean;

  /**
   * The release's origin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: ReleasesListLatest200ApplicationJSONOriginEnum;

  /**
   * The release's short version.<br>
   *
   * @remarks
   * For iOS: CFBundleShortVersionString from info.plist.<br>
   * For Android: android:versionName from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "short_version" })
  shortVersion: string;

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploaded_at" })
  uploadedAt: string;

  /**
   * The release's version.<br>
   *
   * @remarks
   * For iOS: CFBundleVersion from info.plist.<br>
   * For Android: android:versionCode from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version: string;
}

export class ReleasesListLatestResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata({ elemType: ReleasesListLatest200ApplicationJSON })
  releasesListLatest200ApplicationJSONObjects?: ReleasesListLatest200ApplicationJSON[];
}
