"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Filings:
    r"""All official records and reports filed by or delivered to the FEC.
    
     Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_candidate_candidate_id_filings_(self, request: operations.GetCandidateCandidateIDFilingsRequest) -> operations.GetCandidateCandidateIDFilingsResponse:
        r"""All official records and reports filed by or delivered to the FEC.
        
        Note: because the filings data includes many records, counts for large
        result sets are approximate; you will want to page through the records until no records are returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCandidateCandidateIDFilingsRequest, base_url, '/candidate/{candidate_id}/filings/', request)
        
        query_params = utils.get_query_params(operations.GetCandidateCandidateIDFilingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCandidateCandidateIDFilingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilingsPage])
                res.filings_page = out

        return res

    def get_committee_committee_id_filings_(self, request: operations.GetCommitteeCommitteeIDFilingsRequest) -> operations.GetCommitteeCommitteeIDFilingsResponse:
        r"""All official records and reports filed by or delivered to the FEC.
        
        Note: because the filings data includes many records, counts for large
        result sets are approximate; you will want to page through the records until no records are returned.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCommitteeCommitteeIDFilingsRequest, base_url, '/committee/{committee_id}/filings/', request)
        
        query_params = utils.get_query_params(operations.GetCommitteeCommitteeIDFilingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCommitteeCommitteeIDFilingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilingsPage])
                res.filings_page = out

        return res

    def get_filings_(self, request: operations.GetFilingsRequest) -> operations.GetFilingsResponse:
        r"""All official records and reports filed by or delivered to the FEC.
        
        Note: because the filings data includes many records, counts for large
        result sets are approximate; you will want to page through the records until no records are returned.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/filings/'
        
        query_params = utils.get_query_params(operations.GetFilingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilingsPage])
                res.filings_page = out

        return res

    def get_operations_log_(self, request: operations.GetOperationsLogRequest) -> operations.GetOperationsLogResponse:
        r"""The Operations log contains details of each report loaded into the database. It is primarily
        used as status check to determine when all of the data processes, from initial entry through
        review are complete.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/operations-log/'
        
        query_params = utils.get_query_params(operations.GetOperationsLogRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOperationsLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OperationsLogPage])
                res.operations_log_page = out

        return res

    