<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class DomesticPayments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create Domestic Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonResponse
     */
	public function createDomesticPaymentConsentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomesticConsent4", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawResponse
     */
	public function createDomesticPaymentConsentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payment-consents');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentConsentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonResponse
     */
	public function createDomesticPaymentsJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "obWriteDomestic2", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Create Domestic Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawResponse
     */
	public function createDomesticPaymentsRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateDomesticPaymentsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406 or $httpResponse->getStatusCode() === 415) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Payment Consents
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdResponse
     */
	public function getDomesticPaymentConsentsConsentId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payment-consents/{ConsentId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticConsentResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticConsentResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Payment Consents Funds Confirmation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationResponse
     */
	public function getDomesticPaymentConsentsConsentIdFundsConfirmation(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payment-consents/{ConsentId}/funds-confirmation', \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentConsentsConsentIdFundsConfirmationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteFundsConfirmationResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteFundsConfirmationResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteFundsConfirmationResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteFundsConfirmationResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Get Domestic Payments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdResponse
     */
	public function getDomesticPaymentsDomesticPaymentId(
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/domestic-payments/{DomesticPaymentId}', \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDomesticPaymentsDomesticPaymentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obWriteDomesticResponse5 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBWriteDomesticResponse5', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/jose+jwe')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->obErrorResponse1 = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OBErrorResponse1', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 405 or $httpResponse->getStatusCode() === 406) {
        }
        else if ($httpResponse->getStatusCode() === 429) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
}