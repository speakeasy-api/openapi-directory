"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def secretmanager_projects_locations_list(self, request: operations.SecretmanagerProjectsLocationsListRequest, security: operations.SecretmanagerProjectsLocationsListSecurity) -> operations.SecretmanagerProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsLocationsListRequest, base_url, '/v1beta1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def secretmanager_projects_secrets_add_version(self, request: operations.SecretmanagerProjectsSecretsAddVersionRequest, security: operations.SecretmanagerProjectsSecretsAddVersionSecurity) -> operations.SecretmanagerProjectsSecretsAddVersionResponse:
        r"""Creates a new SecretVersion containing secret data and attaches it to an existing Secret."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsAddVersionRequest, base_url, '/v1beta1/{parent}:addVersion', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_secret_version_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsAddVersionRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsAddVersionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretVersion])
                res.secret_version = out

        return res

    def secretmanager_projects_secrets_create(self, request: operations.SecretmanagerProjectsSecretsCreateRequest, security: operations.SecretmanagerProjectsSecretsCreateSecurity) -> operations.SecretmanagerProjectsSecretsCreateResponse:
        r"""Creates a new Secret containing no SecretVersions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsCreateRequest, base_url, '/v1beta1/{parent}/secrets', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "secret_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Secret])
                res.secret = out

        return res

    def secretmanager_projects_secrets_delete(self, request: operations.SecretmanagerProjectsSecretsDeleteRequest, security: operations.SecretmanagerProjectsSecretsDeleteSecurity) -> operations.SecretmanagerProjectsSecretsDeleteResponse:
        r"""Deletes a Secret."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def secretmanager_projects_secrets_get_iam_policy(self, request: operations.SecretmanagerProjectsSecretsGetIamPolicyRequest, security: operations.SecretmanagerProjectsSecretsGetIamPolicySecurity) -> operations.SecretmanagerProjectsSecretsGetIamPolicyResponse:
        r"""Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def secretmanager_projects_secrets_list(self, request: operations.SecretmanagerProjectsSecretsListRequest, security: operations.SecretmanagerProjectsSecretsListSecurity) -> operations.SecretmanagerProjectsSecretsListResponse:
        r"""Lists Secrets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsListRequest, base_url, '/v1beta1/{parent}/secrets', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSecretsResponse])
                res.list_secrets_response = out

        return res

    def secretmanager_projects_secrets_patch(self, request: operations.SecretmanagerProjectsSecretsPatchRequest, security: operations.SecretmanagerProjectsSecretsPatchSecurity) -> operations.SecretmanagerProjectsSecretsPatchResponse:
        r"""Updates metadata of an existing Secret."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "secret_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Secret])
                res.secret = out

        return res

    def secretmanager_projects_secrets_set_iam_policy(self, request: operations.SecretmanagerProjectsSecretsSetIamPolicyRequest, security: operations.SecretmanagerProjectsSecretsSetIamPolicySecurity) -> operations.SecretmanagerProjectsSecretsSetIamPolicyResponse:
        r"""Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsSetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def secretmanager_projects_secrets_test_iam_permissions(self, request: operations.SecretmanagerProjectsSecretsTestIamPermissionsRequest, security: operations.SecretmanagerProjectsSecretsTestIamPermissionsSecurity) -> operations.SecretmanagerProjectsSecretsTestIamPermissionsResponse:
        r"""Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    def secretmanager_projects_secrets_versions_access(self, request: operations.SecretmanagerProjectsSecretsVersionsAccessRequest, security: operations.SecretmanagerProjectsSecretsVersionsAccessSecurity) -> operations.SecretmanagerProjectsSecretsVersionsAccessResponse:
        r"""Accesses a SecretVersion. This call returns the secret data. `projects/*/secrets/*/versions/latest` is an alias to the `latest` SecretVersion."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsAccessRequest, base_url, '/v1beta1/{name}:access', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsAccessRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsAccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccessSecretVersionResponse])
                res.access_secret_version_response = out

        return res

    def secretmanager_projects_secrets_versions_destroy(self, request: operations.SecretmanagerProjectsSecretsVersionsDestroyRequest, security: operations.SecretmanagerProjectsSecretsVersionsDestroySecurity) -> operations.SecretmanagerProjectsSecretsVersionsDestroyResponse:
        r"""Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsDestroyRequest, base_url, '/v1beta1/{name}:destroy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsDestroyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsDestroyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretVersion])
                res.secret_version = out

        return res

    def secretmanager_projects_secrets_versions_disable(self, request: operations.SecretmanagerProjectsSecretsVersionsDisableRequest, security: operations.SecretmanagerProjectsSecretsVersionsDisableSecurity) -> operations.SecretmanagerProjectsSecretsVersionsDisableResponse:
        r"""Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsDisableRequest, base_url, '/v1beta1/{name}:disable', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsDisableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsDisableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretVersion])
                res.secret_version = out

        return res

    def secretmanager_projects_secrets_versions_enable(self, request: operations.SecretmanagerProjectsSecretsVersionsEnableRequest, security: operations.SecretmanagerProjectsSecretsVersionsEnableSecurity) -> operations.SecretmanagerProjectsSecretsVersionsEnableResponse:
        r"""Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsEnableRequest, base_url, '/v1beta1/{name}:enable', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsEnableRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsEnableResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretVersion])
                res.secret_version = out

        return res

    def secretmanager_projects_secrets_versions_get(self, request: operations.SecretmanagerProjectsSecretsVersionsGetRequest, security: operations.SecretmanagerProjectsSecretsVersionsGetSecurity) -> operations.SecretmanagerProjectsSecretsVersionsGetResponse:
        r"""Gets metadata for a SecretVersion. `projects/*/secrets/*/versions/latest` is an alias to the `latest` SecretVersion."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SecretVersion])
                res.secret_version = out

        return res

    def secretmanager_projects_secrets_versions_list(self, request: operations.SecretmanagerProjectsSecretsVersionsListRequest, security: operations.SecretmanagerProjectsSecretsVersionsListSecurity) -> operations.SecretmanagerProjectsSecretsVersionsListResponse:
        r"""Lists SecretVersions. This call does not return secret data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretmanagerProjectsSecretsVersionsListRequest, base_url, '/v1beta1/{parent}/versions', request)
        
        query_params = utils.get_query_params(operations.SecretmanagerProjectsSecretsVersionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretmanagerProjectsSecretsVersionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSecretVersionsResponse])
                res.list_secret_versions_response = out

        return res

    