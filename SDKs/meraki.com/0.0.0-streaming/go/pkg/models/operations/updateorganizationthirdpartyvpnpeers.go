// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum - [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
type UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum string

const (
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnumOne UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum = "1"
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnumTwo UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum = "2"
)

func (e UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum) ToPointer() *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum {
	return &e
}

func (e *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "2":
		*e = UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum: %v", v)
	}
}

type UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum string

const (
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumDefault   UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "default"
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfmd5    UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfmd5"
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfsha1   UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha1"
	UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnumPrfsha256 UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum = "prfsha256"
)

func (e UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum) ToPointer() *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum {
	return &e
}

func (e *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "prfmd5":
		fallthrough
	case "prfsha1":
		fallthrough
	case "prfsha256":
		*e = UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum: %v", v)
	}
}

// UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPolicies - Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
type UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPolicies struct {
	// This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	ChildAuthAlgo []string `json:"childAuthAlgo,omitempty"`
	// This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'
	ChildCipherAlgo []string `json:"childCipherAlgo,omitempty"`
	// The lifetime of the Phase 2 SA in seconds.
	ChildLifetime *int64 `json:"childLifetime,omitempty"`
	// This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'
	ChildPfsGroup []string `json:"childPfsGroup,omitempty"`
	// This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'
	IkeAuthAlgo []string `json:"ikeAuthAlgo,omitempty"`
	// This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'
	IkeCipherAlgo []string `json:"ikeCipherAlgo,omitempty"`
	// This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'
	IkeDiffieHellmanGroup []string `json:"ikeDiffieHellmanGroup,omitempty"`
	// The lifetime of the Phase 1 SA in seconds.
	IkeLifetime *int64 `json:"ikeLifetime,omitempty"`
	// [optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm.
	IkePrfAlgo []UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum `json:"ikePrfAlgo,omitempty"`
}

type UpdateOrganizationThirdPartyVPNPeersRequestBodyPeers struct {
	// [optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted.
	IkeVersion *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum `json:"ikeVersion,omitempty"`
	// Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used.
	IpsecPolicies *UpdateOrganizationThirdPartyVPNPeersRequestBodyPeersIpsecPolicies `json:"ipsecPolicies,omitempty"`
	// One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored.
	IpsecPoliciesPreset *string `json:"ipsecPoliciesPreset,omitempty"`
	// The name of the VPN peer
	Name string `json:"name"`
	// A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all'].
	NetworkTags []string `json:"networkTags,omitempty"`
	// The list of the private subnets of the VPN peer
	PrivateSubnets []string `json:"privateSubnets"`
	// The public IP of the VPN peer
	PublicIP string `json:"publicIp"`
	// [optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN.
	RemoteID *string `json:"remoteId,omitempty"`
	// The shared secret with the VPN peer
	Secret string `json:"secret"`
}

type UpdateOrganizationThirdPartyVPNPeersRequestBody struct {
	// The list of VPN peers
	Peers []UpdateOrganizationThirdPartyVPNPeersRequestBodyPeers `json:"peers"`
}

type UpdateOrganizationThirdPartyVPNPeersRequest struct {
	RequestBody    UpdateOrganizationThirdPartyVPNPeersRequestBody `request:"mediaType=application/json"`
	OrganizationID string                                          `pathParam:"style=simple,explode=false,name=organizationId"`
}

type UpdateOrganizationThirdPartyVPNPeersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateOrganizationThirdPartyVPNPeers200ApplicationJSONObjects []map[string]interface{}
}
