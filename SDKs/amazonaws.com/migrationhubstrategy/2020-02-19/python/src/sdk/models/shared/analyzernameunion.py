"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import binaryanalyzername_enum as shared_binaryanalyzername_enum
from ..shared import runtimeanalyzername_enum as shared_runtimeanalyzername_enum
from ..shared import sourcecodeanalyzername_enum as shared_sourcecodeanalyzername_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyzerNameUnion:
    r"""The combination of the existing analyzers."""
    
    binary_analyzer_name: Optional[shared_binaryanalyzername_enum.BinaryAnalyzerNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binaryAnalyzerName'), 'exclude': lambda f: f is None }})  
    run_time_analyzer_name: Optional[shared_runtimeanalyzername_enum.RunTimeAnalyzerNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('runTimeAnalyzerName'), 'exclude': lambda f: f is None }})  
    source_code_analyzer_name: Optional[shared_sourcecodeanalyzername_enum.SourceCodeAnalyzerNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sourceCodeAnalyzerName'), 'exclude': lambda f: f is None }})  
    