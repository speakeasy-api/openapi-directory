<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Preprocessing 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Convert an image of text into a binarized (light and dark) view
     * 
     * Perform an adaptive binarization algorithm on the input image to prepare it for further OCR operations.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeResponse
     */
	public function preprocessingBinarize(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/binarize');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->preprocessingBinarize200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->preprocessingBinarize200ApplicationXMLByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->preprocessingBinarize200TextJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->preprocessingBinarize200TextXMLByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Convert an image of text into a binary (light and dark) view with ML
     * 
     * Perform an advanced adaptive, Deep Learning-based binarization algorithm on the input image to prepare it for further OCR operations.  Provides enhanced accuracy than adaptive binarization.  Image will be upsampled to 300 DPI if it has a DPI below 300.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedResponse
     */
	public function preprocessingBinarizeAdvanced(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/binarize/advanced');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingBinarizeAdvancedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->preprocessingBinarizeAdvanced200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->preprocessingBinarizeAdvanced200ApplicationXMLByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->preprocessingBinarizeAdvanced200TextJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->preprocessingBinarizeAdvanced200TextXMLByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Get the angle of the page / document / receipt
     * 
     * Analyzes a photo or image of a document and identifies the rotation angle of the page.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleResponse
     */
	public function preprocessingGetPageAngle(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/get-page-angle');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingGetPageAngleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPageAngleResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPageAngleResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getPageAngleResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetPageAngleResult', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Detect and unrotate a document image
     * 
     * Detect and unrotate an image of a document (e.g. that was scanned at an angle).  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateResponse
     */
	public function preprocessingUnrotate(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/unrotate');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->preprocessingUnrotate200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->preprocessingUnrotate200ApplicationXMLByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->preprocessingUnrotate200TextJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->preprocessingUnrotate200TextXMLByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Detect and unrotate a document image (advanced)
     * 
     * Detect and unrotate an image of a document (e.g. that was scanned at an angle) using deep learning.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedResponse
     */
	public function preprocessingUnrotateAdvanced(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/unrotate/advanced');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnrotateAdvancedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->preprocessingUnrotateAdvanced200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->preprocessingUnrotateAdvanced200ApplicationXMLByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->preprocessingUnrotateAdvanced200TextJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->preprocessingUnrotateAdvanced200TextXMLByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Detect and unskew a photo of a document
     * 
     * Detect and unskew a photo of a document (e.g. taken on a cell phone) into a perfectly square image.  Great for document scanning applications; once unskewed, this image is perfect for converting to PDF using the Convert API or optical character recognition using the OCR API.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewResponse
     */
	public function preprocessingUnskew(
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ocr/preprocessing/image/unskew');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PreprocessingUnskewResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->preprocessingUnskew200ApplicationJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/xml')) {
                $response->preprocessingUnskew200ApplicationXMLByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/json')) {
                $response->preprocessingUnskew200TextJSONByteString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/xml')) {
                $response->preprocessingUnskew200TextXMLByteString = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}