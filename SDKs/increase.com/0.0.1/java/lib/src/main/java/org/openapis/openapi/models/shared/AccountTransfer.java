/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * AccountTransfer - Account transfers move funds between your own accounts at Increase.
 */
public class AccountTransfer {
    /**
     * The Account to which the transfer belongs.
     */
    @JsonProperty("account_id")
    public String accountId;
    public AccountTransfer withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
     */
    @JsonProperty("amount")
    public Long amount;
    public AccountTransfer withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.
     */
    @JsonProperty("approval")
    public AccountTransferTransferApproval approval;
    public AccountTransfer withApproval(AccountTransferTransferApproval approval) {
        this.approval = approval;
        return this;
    }
    
    /**
     * If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.
     */
    @JsonProperty("cancellation")
    public AccountTransferTransferCancellation cancellation;
    public AccountTransfer withCancellation(AccountTransferTransferCancellation cancellation) {
        this.cancellation = cancellation;
        return this;
    }
    
    /**
     * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public AccountTransfer withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
     */
    @JsonProperty("currency")
    public AccountTransferCurrencyEnum currency;
    public AccountTransfer withCurrency(AccountTransferCurrencyEnum currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * The description that will show on the transactions.
     */
    @JsonProperty("description")
    public String description;
    public AccountTransfer withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The destination account's identifier.
     */
    @JsonProperty("destination_account_id")
    public String destinationAccountId;
    public AccountTransfer withDestinationAccountId(String destinationAccountId) {
        this.destinationAccountId = destinationAccountId;
        return this;
    }
    
    /**
     * The ID for the transaction receiving the transfer.
     */
    @JsonProperty("destination_transaction_id")
    public String destinationTransactionId;
    public AccountTransfer withDestinationTransactionId(String destinationTransactionId) {
        this.destinationTransactionId = destinationTransactionId;
        return this;
    }
    
    /**
     * The account transfer's identifier.
     */
    @JsonProperty("id")
    public String id;
    public AccountTransfer withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The transfer's network.
     */
    @JsonProperty("network")
    public AccountTransferNetworkEnum network;
    public AccountTransfer withNetwork(AccountTransferNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * The lifecycle status of the transfer.
     */
    @JsonProperty("status")
    public AccountTransferStatusEnum status;
    public AccountTransfer withStatus(AccountTransferStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * If the transfer was created from a template, this will be the template's ID.
     */
    @JsonProperty("template_id")
    public String templateId;
    public AccountTransfer withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }
    
    /**
     * The ID for the transaction funding the transfer.
     */
    @JsonProperty("transaction_id")
    public String transactionId;
    public AccountTransfer withTransactionId(String transactionId) {
        this.transactionId = transactionId;
        return this;
    }
    
    /**
     * A constant representing the object's type. For this resource it will always be `account_transfer`.
     */
    @JsonProperty("type")
    public AccountTransferTypeEnum type;
    public AccountTransfer withType(AccountTransferTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
