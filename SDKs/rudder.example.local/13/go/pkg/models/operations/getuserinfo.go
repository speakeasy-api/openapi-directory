// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetUserInfo200ApplicationJSONActionEnum - The id of the action
type GetUserInfo200ApplicationJSONActionEnum string

const (
	GetUserInfo200ApplicationJSONActionEnumGetUserInfo GetUserInfo200ApplicationJSONActionEnum = "getUserInfo"
)

func (e *GetUserInfo200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getUserInfo":
		*e = GetUserInfo200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserInfo200ApplicationJSONActionEnum: %s", s)
	}
}

type GetUserInfo200ApplicationJSONDataDigestEnum string

const (
	GetUserInfo200ApplicationJSONDataDigestEnumBcrypt GetUserInfo200ApplicationJSONDataDigestEnum = "BCRYPT"
	GetUserInfo200ApplicationJSONDataDigestEnumSha512 GetUserInfo200ApplicationJSONDataDigestEnum = "SHA512"
	GetUserInfo200ApplicationJSONDataDigestEnumSha256 GetUserInfo200ApplicationJSONDataDigestEnum = "SHA256"
	GetUserInfo200ApplicationJSONDataDigestEnumSha1   GetUserInfo200ApplicationJSONDataDigestEnum = "SHA1"
	GetUserInfo200ApplicationJSONDataDigestEnumMd5    GetUserInfo200ApplicationJSONDataDigestEnum = "MD5"
)

func (e *GetUserInfo200ApplicationJSONDataDigestEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BCRYPT":
		fallthrough
	case "SHA512":
		fallthrough
	case "SHA256":
		fallthrough
	case "SHA1":
		fallthrough
	case "MD5":
		*e = GetUserInfo200ApplicationJSONDataDigestEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserInfo200ApplicationJSONDataDigestEnum: %s", s)
	}
}

type GetUserInfo200ApplicationJSONData struct {
	Digest GetUserInfo200ApplicationJSONDataDigestEnum `json:"digest"`
	Users  []shared.Users                              `json:"users"`
}

// GetUserInfo200ApplicationJSONResultEnum - Result of the request
type GetUserInfo200ApplicationJSONResultEnum string

const (
	GetUserInfo200ApplicationJSONResultEnumSuccess GetUserInfo200ApplicationJSONResultEnum = "success"
	GetUserInfo200ApplicationJSONResultEnumError   GetUserInfo200ApplicationJSONResultEnum = "error"
)

func (e *GetUserInfo200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetUserInfo200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetUserInfo200ApplicationJSONResultEnum: %s", s)
	}
}

// GetUserInfo200ApplicationJSON - Users information
type GetUserInfo200ApplicationJSON struct {
	// The id of the action
	Action GetUserInfo200ApplicationJSONActionEnum `json:"action"`
	Data   GetUserInfo200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetUserInfo200ApplicationJSONResultEnum `json:"result"`
}

type GetUserInfoResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Users information
	GetUserInfo200ApplicationJSONObject *GetUserInfo200ApplicationJSON
}
