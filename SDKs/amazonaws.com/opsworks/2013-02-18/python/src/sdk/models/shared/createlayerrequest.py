"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudwatchlogsconfiguration as shared_cloudwatchlogsconfiguration
from ..shared import layertype_enum as shared_layertype_enum
from ..shared import lifecycleeventconfiguration as shared_lifecycleeventconfiguration
from ..shared import recipes as shared_recipes
from ..shared import volumeconfiguration as shared_volumeconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateLayerRequest:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    shortname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Shortname') }})  
    stack_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StackId') }})  
    type: shared_layertype_enum.LayerTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type') }})  
    attributes: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attributes'), 'exclude': lambda f: f is None }})  
    auto_assign_elastic_ips: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoAssignElasticIps'), 'exclude': lambda f: f is None }})  
    auto_assign_public_ips: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutoAssignPublicIps'), 'exclude': lambda f: f is None }})  
    cloud_watch_logs_configuration: Optional[shared_cloudwatchlogsconfiguration.CloudWatchLogsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CloudWatchLogsConfiguration'), 'exclude': lambda f: f is None }})  
    custom_instance_profile_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomInstanceProfileArn'), 'exclude': lambda f: f is None }})  
    custom_json: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomJson'), 'exclude': lambda f: f is None }})  
    custom_recipes: Optional[shared_recipes.Recipes] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomRecipes'), 'exclude': lambda f: f is None }})  
    custom_security_group_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomSecurityGroupIds'), 'exclude': lambda f: f is None }})  
    enable_auto_healing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableAutoHealing'), 'exclude': lambda f: f is None }})  
    install_updates_on_boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstallUpdatesOnBoot'), 'exclude': lambda f: f is None }})  
    lifecycle_event_configuration: Optional[shared_lifecycleeventconfiguration.LifecycleEventConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LifecycleEventConfiguration'), 'exclude': lambda f: f is None }})  
    packages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Packages'), 'exclude': lambda f: f is None }})  
    use_ebs_optimized_instances: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UseEbsOptimizedInstances'), 'exclude': lambda f: f is None }})  
    volume_configurations: Optional[list[shared_volumeconfiguration.VolumeConfiguration]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VolumeConfigurations'), 'exclude': lambda f: f is None }})  
    