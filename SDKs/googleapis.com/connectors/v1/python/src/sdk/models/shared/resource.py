"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ResourceTypeEnum(str, Enum):
    r"""Different types of resource supported."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    GCP_PROJECT = 'GCP_PROJECT'
    GCP_RESOURCE = 'GCP_RESOURCE'
    GCP_SECRETMANAGER_SECRET = 'GCP_SECRETMANAGER_SECRET'
    GCP_SECRETMANAGER_SECRET_VERSION = 'GCP_SECRETMANAGER_SECRET_VERSION'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Resource:
    r"""Resource definition"""
    
    path_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pathTemplate'), 'exclude': lambda f: f is None }})
    r"""Template to uniquely represent a GCP resource in a format IAM expects This is a template that can have references to other values provided in the config variable template."""  
    type: Optional[ResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Different types of resource supported."""  
    