/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * InvoiceDataInvoice - Container for custom fields of an Invoice object.
 * 
 */
public class InvoiceDataInvoice {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public InvoiceDataInvoice withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The amount of the invoice adjustments associated with the invoice. **Character limi**t: 16
     * 
     * 
     * **Values**: a valid currency amount 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AdjustmentAmount")
    public Double adjustmentAmount;
    public InvoiceDataInvoice withAdjustmentAmount(Double adjustmentAmount) {
        this.adjustmentAmount = adjustmentAmount;
        return this;
    }
    
    /**
     *  The sum of all charges and taxes associated with the invoice.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Amount")
    public Double amount;
    public InvoiceDataInvoice withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     *  The sum of all charges associated with the invoice. Taxes are excluded from this value.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AmountWithoutTax")
    public Double amountWithoutTax;
    public InvoiceDataInvoice withAmountWithoutTax(Double amountWithoutTax) {
        this.amountWithoutTax = amountWithoutTax;
        return this;
    }
    
    /**
     *  The remaining balance of the invoice after all payments, adjustments, and refunds are applied.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Balance")
    public Double balance;
    public InvoiceDataInvoice withBalance(Double balance) {
        this.balance = balance;
        return this;
    }
    
    /**
     *  The ID of a Bill Run.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: a BillRun ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("BillRunId")
    public String billRunId;
    public InvoiceDataInvoice withBillRunId(String billRunId) {
        this.billRunId = billRunId;
        return this;
    }
    
    /**
     *  Required 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Body")
    public String body;
    public InvoiceDataInvoice withBody(String body) {
        this.body = body;
        return this;
    }
    
    /**
     *  Additional information related to the invoice that a Zuora user added to the invoice.
     * 
     * 
     * **Character limit**: 255 **Values:** a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comments")
    public String comments;
    public InvoiceDataInvoice withComments(String comments) {
        this.comments = comments;
        return this;
    }
    
    /**
     *  The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public InvoiceDataInvoice withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the invoice was generated.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public InvoiceDataInvoice withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  The currency amount of the adjustment applied to the customer's credit balance.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: a valid currency amount This field is only available if the [Zuora Global Support](http://support.zuora.com/) to enable this feature.
     * 
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreditBalanceAdjustmentAmount")
    public Double creditBalanceAdjustmentAmount;
    public InvoiceDataInvoice withCreditBalanceAdjustmentAmount(Double creditBalanceAdjustmentAmount) {
        this.creditBalanceAdjustmentAmount = creditBalanceAdjustmentAmount;
        return this;
    }
    
    /**
     *  The date by which the payment for this invoice is due.
     * 
     * 
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("DueDate")
    public LocalDate dueDate;
    public InvoiceDataInvoice withDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     *  Specifies whether the invoice includes one-time charges. You can use this field only with the `generate
     * ` call for the Invoice object.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: automatically generated from one of the following: `True` (default), `False` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludesOneTime")
    public Boolean includesOneTime;
    public InvoiceDataInvoice withIncludesOneTime(Boolean includesOneTime) {
        this.includesOneTime = includesOneTime;
        return this;
    }
    
    /**
     *  Specifies whether the invoice includes recurring charges. You can use this field only with the `generate
     * `call for the Invoice object.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: automatically generated from one of the following: `True` (default), `False` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludesRecurring")
    public Boolean includesRecurring;
    public InvoiceDataInvoice withIncludesRecurring(Boolean includesRecurring) {
        this.includesRecurring = includesRecurring;
        return this;
    }
    
    /**
     *  Specifies whether the invoice includes usage charges. You can use this field only with the `generate
     * `call for the Invoice object.
     * 
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: automatically generated from one of the following: `True `(default), `False` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IncludesUsage")
    public Boolean includesUsage;
    public InvoiceDataInvoice withIncludesUsage(Boolean includesUsage) {
        this.includesUsage = includesUsage;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public InvoiceDataInvoice withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public InvoiceDataInvoice withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  Specifies the date on which to generate the invoice.
     * 
     * 
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("InvoiceDate")
    public LocalDate invoiceDate;
    public InvoiceDataInvoice withInvoiceDate(LocalDate invoiceDate) {
        this.invoiceDate = invoiceDate;
        return this;
    }
    
    /**
     *  The unique identification number for the invoice. This number is returned as a string.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("InvoiceNumber")
    public String invoiceNumber;
    public InvoiceDataInvoice withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    
    /**
     *  The date when the invoice was last emailed.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("LastEmailSentDate")
    public OffsetDateTime lastEmailSentDate;
    public InvoiceDataInvoice withLastEmailSentDate(OffsetDateTime lastEmailSentDate) {
        this.lastEmailSentDate = lastEmailSentDate;
        return this;
    }
    
    /**
     *  The amount of payments applied to the invoice.
     * 
     * 
     * **Character limit**: 16 **Value**s: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentAmount")
    public Double paymentAmount;
    public InvoiceDataInvoice withPaymentAmount(Double paymentAmount) {
        this.paymentAmount = paymentAmount;
        return this;
    }
    
    /**
     *  The user ID of the person who moved the invoice to Posted status.
     * 
     * 
     * **Character limit**: 32
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PostedBy")
    public String postedBy;
    public InvoiceDataInvoice withPostedBy(String postedBy) {
        this.postedBy = postedBy;
        return this;
    }
    
    /**
     *  The date when the invoice was posted.
     * **Character limit:** 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("PostedDate")
    public OffsetDateTime postedDate;
    public InvoiceDataInvoice withPostedDate(OffsetDateTime postedDate) {
        this.postedDate = postedDate;
        return this;
    }
    
    /**
     *  Specifies the amount of a refund that was applied against an earlier payment on the invoice.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RefundAmount")
    public Double refundAmount;
    public InvoiceDataInvoice withRefundAmount(Double refundAmount) {
        this.refundAmount = refundAmount;
        return this;
    }
    
    /**
     *  Regenerates a PDF of an invoice that was already generated. Add this field to an `update
     * ` call to regenerate an invoice PDF. Note that when you set the `RegenerateInvoicePDF` field to `true`, you cannot update any other fields in the same `update
     * ` call. Otherwise, you will receive the following `INVALID_VALUE` error: &amp;quot;When field RegenerateInvoicePDF is set to true to regenerate the invoice PDF file, changes on other fields of the invoice are not allowed.&amp;quot;
     * 
     * **Character limit**: 5
     * 
     * 
     * **Values**: `True`, `False` 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RegenerateInvoicePDF")
    public Boolean regenerateInvoicePDF;
    public InvoiceDataInvoice withRegenerateInvoicePDF(Boolean regenerateInvoicePDF) {
        this.regenerateInvoicePDF = regenerateInvoicePDF;
        return this;
    }
    
    /**
     *  The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.
     * 
     * 
     * **Character limit**: 8
     * 
     * 
     * **Values**: one of the following:
     * 
     * -  Draft (default, automatically set upon invoice creation)
     * 
     * -  Posted
     * 
     * -  Canceled
     * 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public InvoiceDataInvoice withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public InvoiceDataInvoice withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     *  This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.
     * 
     * 
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("TargetDate")
    public LocalDate targetDate;
    public InvoiceDataInvoice withTargetDate(LocalDate targetDate) {
        this.targetDate = targetDate;
        return this;
    }
    
    /**
     *  The total amount of the taxes applied to the invoice.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxAmount")
    public Double taxAmount;
    public InvoiceDataInvoice withTaxAmount(Double taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    
    /**
     *  The total amount of the invoice that is exempt from taxation.
     * 
     * 
     * **Character limit**: 16
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TaxExemptAmount")
    public Double taxExemptAmount;
    public InvoiceDataInvoice withTaxExemptAmount(Double taxExemptAmount) {
        this.taxExemptAmount = taxExemptAmount;
        return this;
    }
    
    /**
     *  Specifies whether or not the invoice was transferred to an external accounting system, such as NetSuite.
     * 
     * 
     * **Character limit**: 10
     * 
     * 
     * **Values**: Processing, Yes, Error, Ignore 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransferredToAccounting")
    public String transferredToAccounting;
    public InvoiceDataInvoice withTransferredToAccounting(String transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public InvoiceDataInvoice withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the invoice was last updated.
     * 
     * 
     * **Character limit**: 29
     * 
     * 
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public InvoiceDataInvoice withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
