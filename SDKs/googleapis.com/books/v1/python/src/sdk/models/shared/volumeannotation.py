"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import booksannotationsrange as shared_booksannotationsrange
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VolumeannotationContentRanges:
    r"""The content ranges to identify the selected text."""
    
    cfi_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cfiRange'), 'exclude': lambda f: f is None }})  
    content_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentVersion'), 'exclude': lambda f: f is None }})
    r"""Content version applicable to ranges below."""  
    gb_image_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbImageRange'), 'exclude': lambda f: f is None }})  
    gb_text_range: Optional[shared_booksannotationsrange.BooksAnnotationsRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gbTextRange'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Volumeannotation:
    r"""Successful response"""
    
    annotation_data_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationDataId'), 'exclude': lambda f: f is None }})
    r"""The annotation data id for this volume annotation."""  
    annotation_data_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationDataLink'), 'exclude': lambda f: f is None }})
    r"""Link to get data for this annotation."""  
    annotation_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotationType'), 'exclude': lambda f: f is None }})
    r"""The type of annotation this is."""  
    content_ranges: Optional[VolumeannotationContentRanges] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentRanges'), 'exclude': lambda f: f is None }})
    r"""The content ranges to identify the selected text."""  
    data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""Data for this annotation."""  
    deleted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted'), 'exclude': lambda f: f is None }})
    r"""Indicates that this annotation is deleted."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique id of this volume annotation."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Resource Type"""  
    layer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('layerId'), 'exclude': lambda f: f is None }})
    r"""The Layer this annotation is for."""  
    page_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pageIds'), 'exclude': lambda f: f is None }})
    r"""Pages the annotation spans."""  
    selected_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selectedText'), 'exclude': lambda f: f is None }})
    r"""Excerpt from the volume."""  
    self_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selfLink'), 'exclude': lambda f: f is None }})
    r"""URL to this resource."""  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated'), 'exclude': lambda f: f is None }})
    r"""Timestamp for the last time this anntoation was updated. (RFC 3339 UTC date-time format)."""  
    volume_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volumeId'), 'exclude': lambda f: f is None }})
    r"""The Volume this annotation is for."""  
    