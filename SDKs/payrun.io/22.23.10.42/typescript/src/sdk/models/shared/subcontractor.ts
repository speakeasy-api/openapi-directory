/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The sub contractors' address
 */
export class SubContractorSubContractorAddress extends SpeakeasyBase {
  /**
   * The addresss' line 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address1" })
  address1?: string;

  /**
   * The addresss' line 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address2" })
  address2?: string;

  /**
   * The addresss' line 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address3" })
  address3?: string;

  /**
   * The addresss' line 4
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address4" })
  address4?: string;

  /**
   * The addresss' country
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Country" })
  country?: string;

  /**
   * The addresss' postcode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Postcode" })
  postcode?: string;
}

/**
 * The sub contractors' bank account
 */
export class SubContractorSubContractorBankAccount extends SpeakeasyBase {
  /**
   * The bank accounts' account name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountName" })
  accountName?: string;

  /**
   * The bank accounts' account number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccountNumber" })
  accountNumber?: string;

  /**
   * The bank accounts' branch name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchName" })
  branchName?: string;

  /**
   * The bank accounts' reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Reference" })
  reference?: string;

  /**
   * The bank accounts' sort code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SortCode" })
  sortCode?: string;
}

/**
 * The sub contractors' business type
 */
export enum SubContractorSubContractorBusinessTypeEnum {
  SoleTrader = "SoleTrader",
  Company = "Company",
  Partnership = "Partnership",
  Trust = "Trust",
}

/**
 * The sub contractors' pay frequency
 */
export enum SubContractorSubContractorPayFrequencyEnum {
  Monthly = "Monthly",
  Weekly = "Weekly",
}

/**
 * The sub contractors' payment method
 */
export enum SubContractorSubContractorPaymentMethodEnum {
  NotSet = "NotSet",
  Cash = "Cash",
  Cheque = "Cheque",
  Bacs = "BACS",
  FasterPayments = "FasterPayments",
  Other = "Other",
}

/**
 * The sub contractors' region
 */
export enum SubContractorSubContractorRegionEnum {
  NotSet = "NotSet",
  England = "England",
  Scotland = "Scotland",
  Wales = "Wales",
}

/**
 * The sub contractors' taxation status
 */
export enum SubContractorSubContractorTaxationStatusEnum {
  Unmatched = "Unmatched",
  Net = "Net",
  Gross = "Gross",
}

/**
 * The sub contractors' territory
 */
export enum SubContractorSubContractorTerritoryEnum {
  UnitedKingdom = "UnitedKingdom",
}

export class SubContractorSubContractor extends SpeakeasyBase {
  /**
   * The sub contractors' address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address" })
  @Type(() => SubContractorSubContractorAddress)
  address?: SubContractorSubContractorAddress;

  /**
   * The sub contractors' bank account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BankAccount" })
  @Type(() => SubContractorSubContractorBankAccount)
  bankAccount?: SubContractorSubContractorBankAccount;

  /**
   * The sub contractors' business type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BusinessType" })
  businessType?: SubContractorSubContractorBusinessTypeEnum;

  /**
   * The sub contractors' company name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompanyName" })
  companyName?: string;

  /**
   * The sub contractors' company registration number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CompanyRegistrationNumber" })
  companyRegistrationNumber?: string;

  /**
   * The sub contractors' deactivated
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Deactivated" })
  deactivated?: boolean;

  /**
   * The sub contractors' effective date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "EffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The sub contractors' first name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "FirstName" })
  firstName?: string;

  /**
   * The sub contractors' initials
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Initials" })
  initials?: string;

  /**
   * The sub contractors' last name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LastName" })
  lastName?: string;

  /**
   * The sub contractors' meta data
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetaData" })
  metaData?: Record<string, any>;

  /**
   * The sub contractors' middle name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MiddleName" })
  middleName?: string;

  /**
   * The sub contractors' next revision date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NextRevisionDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  nextRevisionDate?: Date;

  /**
   * The sub contractors' ni number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "NiNumber" })
  niNumber?: string;

  /**
   * The sub contractors' partnership name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PartnershipName" })
  partnershipName?: string;

  /**
   * The sub contractors' partnership unique tax reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PartnershipUniqueTaxReference" })
  partnershipUniqueTaxReference?: string;

  /**
   * The sub contractors' pay frequency
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PayFrequency" })
  payFrequency?: SubContractorSubContractorPayFrequencyEnum;

  /**
   * The sub contractors' payment method
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PaymentMethod" })
  paymentMethod?: SubContractorSubContractorPaymentMethodEnum;

  /**
   * The sub contractors' region
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Region" })
  region?: SubContractorSubContractorRegionEnum;

  /**
   * The sub contractors' revision
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Revision" })
  revision?: number;

  /**
   * The sub contractors' taxation status
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TaxationStatus" })
  taxationStatus?: SubContractorSubContractorTaxationStatusEnum;

  /**
   * The sub contractors' telephone
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Telephone" })
  telephone?: string;

  /**
   * The sub contractors' territory
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Territory" })
  territory?: SubContractorSubContractorTerritoryEnum;

  /**
   * The sub contractors' title
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Title" })
  title?: string;

  /**
   * The sub contractors' trading name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TradingName" })
  tradingName?: string;

  /**
   * The sub contractors' unique tax reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "UniqueTaxReference" })
  uniqueTaxReference?: string;

  /**
   * The sub contractors' vat registered
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VatRegistered" })
  vatRegistered?: boolean;

  /**
   * The sub contractors' vat registration number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VatRegistrationNumber" })
  vatRegistrationNumber?: string;

  /**
   * The sub contractors' verification date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VerificationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  verificationDate?: Date;

  /**
   * The sub contractors' verification number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "VerificationNumber" })
  verificationNumber?: string;

  /**
   * The sub contractors' works number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "WorksNumber" })
  worksNumber?: string;
}

/**
 * The sub contractor object.
 */
export class SubContractor extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "SubContractor" })
  @Type(() => SubContractorSubContractor)
  subContractor?: SubContractorSubContractor;
}
