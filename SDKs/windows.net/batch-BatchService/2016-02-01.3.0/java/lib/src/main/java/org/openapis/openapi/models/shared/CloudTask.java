/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * CloudTask - An Azure Batch task.
 */
public class CloudTask {
    /**
     * A locality hint that can be used by the Batch service to select a compute node on which to start a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("affinityInfo")
    public AffinityInformation affinityInfo;
    public CloudTask withAffinityInfo(AffinityInformation affinityInfo) {
        this.affinityInfo = affinityInfo;
        return this;
    }
    
    /**
     * The command line of the task. For multi-instance tasks, the command line is executed on the primary subtask after all the subtasks have finished executing the coordination command line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commandLine")
    public String commandLine;
    public CloudTask withCommandLine(String commandLine) {
        this.commandLine = commandLine;
        return this;
    }
    
    /**
     * Constraints to apply to the Job Manager task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("constraints")
    public TaskConstraints constraints;
    public CloudTask withConstraints(TaskConstraints constraints) {
        this.constraints = constraints;
        return this;
    }
    
    /**
     * The creation time of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("creationTime")
    public OffsetDateTime creationTime;
    public CloudTask withCreationTime(OffsetDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Specifies any dependencies of a task. Any task that is explicitly specified or within a dependency range must complete before the dependant task will be scheduled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependsOn")
    public TaskDependencies dependsOn;
    public CloudTask withDependsOn(TaskDependencies dependsOn) {
        this.dependsOn = dependsOn;
        return this;
    }
    
    /**
     * A display name for the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;
    public CloudTask withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The ETag of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eTag")
    public String eTag;
    public CloudTask withETag(String eTag) {
        this.eTag = eTag;
        return this;
    }
    
    /**
     * A list of environment variable settings for the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environmentSettings")
    public EnvironmentSetting[] environmentSettings;
    public CloudTask withEnvironmentSettings(EnvironmentSetting[] environmentSettings) {
        this.environmentSettings = environmentSettings;
        return this;
    }
    
    /**
     * Information about the execution of a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("executionInfo")
    public TaskExecutionInformation executionInfo;
    public CloudTask withExecutionInfo(TaskExecutionInformation executionInfo) {
        this.executionInfo = executionInfo;
        return this;
    }
    
    /**
     * A string that uniquely identifies the task within the job. The id can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public CloudTask withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The last modified time of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastModified")
    public OffsetDateTime lastModified;
    public CloudTask withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    /**
     * Settings which specify how to run a multi-instance task. Multi-instance tasks are commonly used to support MPI tasks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiInstanceSettings")
    public MultiInstanceSettings multiInstanceSettings;
    public CloudTask withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings) {
        this.multiInstanceSettings = multiInstanceSettings;
        return this;
    }
    
    /**
     * Information about the compute node on which a task ran.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeInfo")
    public ComputeNodeInformation nodeInfo;
    public CloudTask withNodeInfo(ComputeNodeInformation nodeInfo) {
        this.nodeInfo = nodeInfo;
        return this;
    }
    
    /**
     * The previous state of the task. This property is not set if the task is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousState")
    public CloudTaskPreviousStateEnum previousState;
    public CloudTask withPreviousState(CloudTaskPreviousStateEnum previousState) {
        this.previousState = previousState;
        return this;
    }
    
    /**
     * The time at which the task entered its previous state. This property is not set if the task is in its initial Active state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("previousStateTransitionTime")
    public OffsetDateTime previousStateTransitionTime;
    public CloudTask withPreviousStateTransitionTime(OffsetDateTime previousStateTransitionTime) {
        this.previousStateTransitionTime = previousStateTransitionTime;
        return this;
    }
    
    /**
     * A list of files that the Batch service will download to the compute node before running the command line. For multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary subtask is executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceFiles")
    public ResourceFile[] resourceFiles;
    public CloudTask withResourceFiles(ResourceFile[] resourceFiles) {
        this.resourceFiles = resourceFiles;
        return this;
    }
    
    /**
     * Whether to run the task in elevated mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("runElevated")
    public Boolean runElevated;
    public CloudTask withRunElevated(Boolean runElevated) {
        this.runElevated = runElevated;
        return this;
    }
    
    /**
     * The current state of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public CloudTaskStateEnum state;
    public CloudTask withState(CloudTaskStateEnum state) {
        this.state = state;
        return this;
    }
    
    /**
     * The time at which the task entered its current state.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stateTransitionTime")
    public OffsetDateTime stateTransitionTime;
    public CloudTask withStateTransitionTime(OffsetDateTime stateTransitionTime) {
        this.stateTransitionTime = stateTransitionTime;
        return this;
    }
    
    /**
     * Resource usage statistics for a task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stats")
    public TaskStatistics stats;
    public CloudTask withStats(TaskStatistics stats) {
        this.stats = stats;
        return this;
    }
    
    /**
     * The URL of the task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public CloudTask withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
