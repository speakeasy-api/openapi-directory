// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// VideoV1RecordingStatusCallbackMethodEnum - The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.
type VideoV1RecordingStatusCallbackMethodEnum string

const (
	VideoV1RecordingStatusCallbackMethodEnumHead   VideoV1RecordingStatusCallbackMethodEnum = "HEAD"
	VideoV1RecordingStatusCallbackMethodEnumGet    VideoV1RecordingStatusCallbackMethodEnum = "GET"
	VideoV1RecordingStatusCallbackMethodEnumPost   VideoV1RecordingStatusCallbackMethodEnum = "POST"
	VideoV1RecordingStatusCallbackMethodEnumPatch  VideoV1RecordingStatusCallbackMethodEnum = "PATCH"
	VideoV1RecordingStatusCallbackMethodEnumPut    VideoV1RecordingStatusCallbackMethodEnum = "PUT"
	VideoV1RecordingStatusCallbackMethodEnumDelete VideoV1RecordingStatusCallbackMethodEnum = "DELETE"
)

func (e *VideoV1RecordingStatusCallbackMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HEAD":
		fallthrough
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PATCH":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		*e = VideoV1RecordingStatusCallbackMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoV1RecordingStatusCallbackMethodEnum: %s", s)
	}
}

// VideoV1Recording - OK
type VideoV1Recording struct {
	// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource.
	AccountSid      *string                  `json:"account_sid,omitempty"`
	Codec           *RecordingEnumCodecEnum  `json:"codec,omitempty"`
	ContainerFormat *RecordingEnumFormatEnum `json:"container_format,omitempty"`
	// The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	DateCreated *time.Time `json:"date_created,omitempty"`
	// The duration of the recording in seconds rounded to the nearest second. Sub-second tracks have a `Duration` property of 1 second
	Duration *int64 `json:"duration,omitempty"`
	// A list of SIDs related to the recording. Includes the `room_sid` and `participant_sid`.
	GroupingSids interface{} `json:"grouping_sids,omitempty"`
	// The URLs of related resources.
	Links map[string]interface{} `json:"links,omitempty"`
	// The URL of the media file associated with the recording when stored externally. See [External S3 Recordings](/docs/video/api/external-s3-recordings) for more details.
	MediaExternalLocation *string `json:"media_external_location,omitempty"`
	// The time in milliseconds elapsed between an arbitrary point in time, common to all group rooms, and the moment when the source room of this track started. This information provides a synchronization mechanism for recordings belonging to the same room.
	Offset *int64 `json:"offset,omitempty"`
	// The unique string that we created to identify the Recording resource.
	Sid *string `json:"sid,omitempty"`
	// The size of the recorded track, in bytes.
	Size *int64 `json:"size,omitempty"`
	// The SID of the recording source. For a Room Recording, this value is a `track_sid`.
	SourceSid *string                  `json:"source_sid,omitempty"`
	Status    *RecordingEnumStatusEnum `json:"status,omitempty"`
	// The URL called using the `status_callback_method` to send status information on every recording event.
	StatusCallback *string `json:"status_callback,omitempty"`
	// The HTTP method used to call `status_callback`. Can be: `POST` or `GET`, defaults to `POST`.
	StatusCallbackMethod *VideoV1RecordingStatusCallbackMethodEnum `json:"status_callback_method,omitempty"`
	// The name that was given to the source track of the recording. If no name is given, the `source_sid` is used.
	TrackName *string                `json:"track_name,omitempty"`
	Type      *RecordingEnumTypeEnum `json:"type,omitempty"`
	// The absolute URL of the resource.
	URL *string `json:"url,omitempty"`
}
