"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddatacatalogv1beta1serializedpolicytag as shared_googleclouddatacatalogv1beta1serializedpolicytag
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudDatacatalogV1beta1SerializedTaxonomyActivatedPolicyTypesEnum(str, Enum):
    POLICY_TYPE_UNSPECIFIED = 'POLICY_TYPE_UNSPECIFIED'
    FINE_GRAINED_ACCESS_CONTROL = 'FINE_GRAINED_ACCESS_CONTROL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDatacatalogV1beta1SerializedTaxonomy:
    r"""Message capturing a taxonomy and its policy tag hierarchy as a nested proto. Used for taxonomy import/export and mutation."""
    
    activated_policy_types: Optional[list[GoogleCloudDatacatalogV1beta1SerializedTaxonomyActivatedPolicyTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activatedPolicyTypes'), 'exclude': lambda f: f is None }})
    r"""A list of policy types that are activated for a taxonomy."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the serialized taxonomy. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name of the taxonomy. Max 200 bytes when encoded in UTF-8."""  
    policy_tags: Optional[list[shared_googleclouddatacatalogv1beta1serializedpolicytag.GoogleCloudDatacatalogV1beta1SerializedPolicyTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyTags'), 'exclude': lambda f: f is None }})
    r"""Top level policy tags associated with the taxonomy if any."""  
    