// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetLoadBalancersSortEnum - Can be used multiple times.
type GetLoadBalancersSortEnum string

const (
	GetLoadBalancersSortEnumID          GetLoadBalancersSortEnum = "id"
	GetLoadBalancersSortEnumIDAsc       GetLoadBalancersSortEnum = "id:asc"
	GetLoadBalancersSortEnumIDDesc      GetLoadBalancersSortEnum = "id:desc"
	GetLoadBalancersSortEnumName        GetLoadBalancersSortEnum = "name"
	GetLoadBalancersSortEnumNameAsc     GetLoadBalancersSortEnum = "name:asc"
	GetLoadBalancersSortEnumNameDesc    GetLoadBalancersSortEnum = "name:desc"
	GetLoadBalancersSortEnumCreated     GetLoadBalancersSortEnum = "created"
	GetLoadBalancersSortEnumCreatedAsc  GetLoadBalancersSortEnum = "created:asc"
	GetLoadBalancersSortEnumCreatedDesc GetLoadBalancersSortEnum = "created:desc"
)

func (e *GetLoadBalancersSortEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "id:asc":
		fallthrough
	case "id:desc":
		fallthrough
	case "name":
		fallthrough
	case "name:asc":
		fallthrough
	case "name:desc":
		fallthrough
	case "created":
		fallthrough
	case "created:asc":
		fallthrough
	case "created:desc":
		*e = GetLoadBalancersSortEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancersSortEnum: %s", s)
	}
}

type GetLoadBalancersQueryParams struct {
	// Can be used to filter resources by labels. The response will only contain resources matching the label selector.
	LabelSelector *string `queryParam:"style=form,explode=true,name=label_selector"`
	// Can be used to filter resources by their name. The response will only contain the resources matching the specified name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Can be used multiple times.
	Sort *GetLoadBalancersSortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetLoadBalancersRequest struct {
	QueryParams GetLoadBalancersQueryParams
}

// GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum - Type of the algorithm
type GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum string

const (
	GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnumRoundRobin       GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum = "round_robin"
	GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnumLeastConnections GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum = "least_connections"
)

func (e *GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "round_robin":
		fallthrough
	case "least_connections":
		*e = GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum: %s", s)
	}
}

// GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithm - Algorithm of the Load Balancer
type GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithm struct {
	// Type of the algorithm
	Type GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithmTypeEnum `json:"type"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceHourly - Hourly costs for a Resource in this Location
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceHourly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceMonthly - Monthly costs for a Resource in this Location
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceMonthly struct {
	// Price with VAT added
	Gross string `json:"gross"`
	// Price without VAT
	Net string `json:"net"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePrices struct {
	// Name of the Location the price is for
	Location string `json:"location"`
	// Hourly costs for a Resource in this Location
	PriceHourly GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceHourly `json:"price_hourly"`
	// Monthly costs for a Resource in this Location
	PriceMonthly GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePricesPriceMonthly `json:"price_monthly"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerType struct {
	// Point in time when the Load Balancer type is deprecated (in ISO-8601 format)
	Deprecated string `json:"deprecated"`
	// Description of the Load Balancer type
	Description string `json:"description"`
	// ID of the Load Balancer type
	ID float64 `json:"id"`
	// Number of SSL Certificates that can be assigned to a single Load Balancer
	MaxAssignedCertificates float64 `json:"max_assigned_certificates"`
	// Number of maximum simultaneous open connections
	MaxConnections float64 `json:"max_connections"`
	// Number of services a Load Balancer of this type can have
	MaxServices float64 `json:"max_services"`
	// Number of targets a single Load Balancer can have
	MaxTargets float64 `json:"max_targets"`
	// Unique identifier of the Load Balancer type
	Name string `json:"name"`
	// Prices in different network zones
	Prices []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTypePrices `json:"prices"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersPrivateNet struct {
	IP      *string `json:"ip,omitempty"`
	Network *int64  `json:"network,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersProtection - Protection configuration for the Resource
type GetLoadBalancers200ApplicationJSONLoadBalancersProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv4 - IP address (v4)
type GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv4 struct {
	// Reverse DNS PTR entry for the IPv4 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v4) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv6 - IP address (v6)
type GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv6 struct {
	// Reverse DNS PTR entry for the IPv6 address of this Load Balancer
	DNSPtr *string `json:"dns_ptr,omitempty"`
	// IP address (v6) of this Load Balancer
	IP *string `json:"ip,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersPublicNet - Public network information
type GetLoadBalancers200ApplicationJSONLoadBalancersPublicNet struct {
	// Public Interface enabled or not
	Enabled bool `json:"enabled"`
	// IP address (v4)
	Ipv4 GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv4 `json:"ipv4"`
	// IP address (v6)
	Ipv6 GetLoadBalancers200ApplicationJSONLoadBalancersPublicNetIpv6 `json:"ipv6"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP - Additional configuration for protocol http
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP struct {
	// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
	Domain string `json:"domain"`
	// HTTP path to use for health checks
	Path string `json:"path"`
	// String that must be contained in HTTP response in order to pass the health check
	Response *string `json:"response,omitempty"`
	// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.
	StatusCodes []string `json:"status_codes,omitempty"`
	// Use HTTPS for health check
	TLS *bool `json:"tls,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum - Type of the health check
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum string

const (
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumTCP  GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "tcp"
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnumHTTP GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum = "http"
)

func (e *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		*e = GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum: %s", s)
	}
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheck - Service health check
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheck struct {
	// Additional configuration for protocol http
	HTTP *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckHTTP `json:"http,omitempty"`
	// Time interval in seconds health checks are performed
	Interval int64 `json:"interval"`
	// Port the health check will be performed on
	Port int64 `json:"port"`
	// Type of the health check
	Protocol GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheckProtocolEnum `json:"protocol"`
	// Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again
	Retries int64 `json:"retries"`
	// Time in seconds after an attempt is considered a timeout
	Timeout int64 `json:"timeout"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceHTTP - Configuration option for protocols http and https
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceHTTP struct {
	// IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http"
	Certificates []int64 `json:"certificates,omitempty"`
	// Lifetime of the cookie used for sticky sessions
	CookieLifetime int64 `json:"cookie_lifetime"`
	// Name of the cookie used for sticky sessions
	CookieName string `json:"cookie_name"`
	// Redirect HTTP requests to HTTPS. Only available if protocol is "https". Default `false`
	RedirectHTTP *bool `json:"redirect_http,omitempty"`
	// Use sticky sessions. Only available if protocol is "http" or "https". Default `false`
	StickySessions *bool `json:"sticky_sessions,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum - Protocol of the Load Balancer
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum string

const (
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnumTCP   GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum = "tcp"
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnumHTTP  GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum = "http"
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnumHTTPS GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum = "https"
)

func (e *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tcp":
		fallthrough
	case "http":
		fallthrough
	case "https":
		*e = GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum: %s", s)
	}
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerService struct {
	// Port the Load Balancer will balance to
	DestinationPort int64 `json:"destination_port"`
	// Service health check
	HealthCheck GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceLoadBalancerServiceHealthCheck `json:"health_check"`
	// Configuration option for protocols http and https
	HTTP *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceHTTP `json:"http,omitempty"`
	// Port the Load Balancer listens on
	ListenPort int64 `json:"listen_port"`
	// Protocol of the Load Balancer
	Protocol GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerServiceProtocolEnum `json:"protocol"`
	// Is Proxyprotocol enabled or not
	Proxyprotocol bool `json:"proxyprotocol"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetIP - IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetIP struct {
	// IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch.
	IP string `json:"ip"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLabelSelector - Label selector and a list of selected targets
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLabelSelector struct {
	// Label selector
	Selector string `json:"selector"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLoadBalancerTargetServer - Server where the traffic should be routed through
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLoadBalancerTargetServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargetsHealthStatus struct {
	ListenPort *int64  `json:"listen_port,omitempty"`
	Status     *string `json:"status,omitempty"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargetsServer struct {
	// ID of the Server
	ID int64 `json:"id"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargets struct {
	HealthStatus []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargetsHealthStatus `json:"health_status,omitempty"`
	Server       *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargetsServer        `json:"server,omitempty"`
	Type         *string                                                                                `json:"type,omitempty"`
	UsePrivateIP *bool                                                                                  `json:"use_private_ip,omitempty"`
}

// GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum - Type of the resource
type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum string

const (
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnumServer        GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum = "server"
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnumLabelSelector GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum = "label_selector"
	GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnumIP            GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum = "ip"
)

func (e *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "server":
		fallthrough
	case "label_selector":
		fallthrough
	case "ip":
		*e = GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum: %s", s)
	}
}

type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTarget struct {
	// List of health statuses of the services on this target
	HealthStatus []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetHealthStatus `json:"health_status,omitempty"`
	// IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
	IP *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetIP `json:"ip,omitempty"`
	// Label selector and a list of selected targets
	LabelSelector *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLabelSelector `json:"label_selector,omitempty"`
	// Server where the traffic should be routed through
	Server *GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetLoadBalancerTargetServer `json:"server,omitempty"`
	// List of selected targets
	Targets []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTargets `json:"targets,omitempty"`
	// Type of the resource
	Type GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTargetTypeEnum `json:"type"`
	// Use the private network IP instead of the public IP. Default value is false.
	UsePrivateIP *bool `json:"use_private_ip,omitempty"`
}

type GetLoadBalancers200ApplicationJSONLoadBalancers struct {
	// Algorithm of the Load Balancer
	Algorithm GetLoadBalancers200ApplicationJSONLoadBalancersAlgorithm `json:"algorithm"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Free Traffic for the current billing period in bytes
	IncludedTraffic int64 `json:"included_traffic"`
	// Inbound Traffic for the current billing period in bytes
	IngoingTraffic int64 `json:"ingoing_traffic"`
	// User-defined labels (key-value pairs)
	Labels           map[string]string                                               `json:"labels"`
	LoadBalancerType GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerType `json:"load_balancer_type"`
	Location         GetLoadBalancers200ApplicationJSONLoadBalancersLocation         `json:"location"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Outbound Traffic for the current billing period in bytes
	OutgoingTraffic int64 `json:"outgoing_traffic"`
	// Private networks information
	PrivateNet []GetLoadBalancers200ApplicationJSONLoadBalancersPrivateNet `json:"private_net"`
	// Protection configuration for the Resource
	Protection GetLoadBalancers200ApplicationJSONLoadBalancersProtection `json:"protection"`
	// Public network information
	PublicNet GetLoadBalancers200ApplicationJSONLoadBalancersPublicNet `json:"public_net"`
	// List of services that belong to this Load Balancer
	Services []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerService `json:"services"`
	// List of targets that belong to this Load Balancer
	Targets []GetLoadBalancers200ApplicationJSONLoadBalancersLoadBalancerTarget `json:"targets"`
}

type GetLoadBalancers200ApplicationJSONMetaPagination struct {
	// ID of the last page available. Can be null if the current page is the last one.
	LastPage float64 `json:"last_page"`
	// ID of the next page. Can be null if the current page is the last one.
	NextPage float64 `json:"next_page"`
	// Current page number
	Page float64 `json:"page"`
	// Maximum number of items shown per page in the response
	PerPage float64 `json:"per_page"`
	// ID of the previous page. Can be null if the current page is the first one.
	PreviousPage float64 `json:"previous_page"`
	// The total number of entries that exist in the database for this query. Nullable if unknown.
	TotalEntries float64 `json:"total_entries"`
}

type GetLoadBalancers200ApplicationJSONMeta struct {
	Pagination GetLoadBalancers200ApplicationJSONMetaPagination `json:"pagination"`
}

// GetLoadBalancers200ApplicationJSON - The `load_balancers` key contains a list of Load Balancers
type GetLoadBalancers200ApplicationJSON struct {
	LoadBalancers []GetLoadBalancers200ApplicationJSONLoadBalancers `json:"load_balancers"`
	Meta          *GetLoadBalancers200ApplicationJSONMeta           `json:"meta,omitempty"`
}

type GetLoadBalancersResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `load_balancers` key contains a list of Load Balancers
	GetLoadBalancers200ApplicationJSONObject *GetLoadBalancers200ApplicationJSON
}
