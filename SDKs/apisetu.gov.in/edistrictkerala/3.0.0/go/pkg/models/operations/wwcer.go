// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WwcerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type WwcerRequestBodyCertificateParameters struct {
	// Application Number
	Aplno string `json:"aplno"`
	// Certificate Number
	Certno string `json:"certno"`
	// Security Code
	Sccd string `json:"sccd"`
}

// WwcerRequestBodyFormatEnum - The format of the certificate in response.
type WwcerRequestBodyFormatEnum string

const (
	WwcerRequestBodyFormatEnumPdf WwcerRequestBodyFormatEnum = "pdf"
)

func (e *WwcerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = WwcerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WwcerRequestBodyFormatEnum: %s", s)
	}
}

// WwcerRequestBody - Request format
type WwcerRequestBody struct {
	CertificateParameters *WwcerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format WwcerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Wwcer504ApplicationJSONErrorEnum string

const (
	Wwcer504ApplicationJSONErrorEnumGatewayTimeout Wwcer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Wwcer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Wwcer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer504ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Wwcer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Wwcer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Wwcer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer504ApplicationJSON - Gateway timeout
type Wwcer504ApplicationJSON struct {
	Error            *Wwcer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer503ApplicationJSONErrorEnum string

const (
	Wwcer503ApplicationJSONErrorEnumServiceUnavailable Wwcer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Wwcer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Wwcer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer503ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Wwcer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Wwcer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Wwcer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer503ApplicationJSON - Service unavailable
type Wwcer503ApplicationJSON struct {
	Error            *Wwcer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer502ApplicationJSONErrorEnum string

const (
	Wwcer502ApplicationJSONErrorEnumBadGatewy Wwcer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Wwcer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Wwcer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer502ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Wwcer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Wwcer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Wwcer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer502ApplicationJSON - Bad gateway
type Wwcer502ApplicationJSON struct {
	Error            *Wwcer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer500ApplicationJSONErrorEnum string

const (
	Wwcer500ApplicationJSONErrorEnumInternalServerError Wwcer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Wwcer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Wwcer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer500ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer500ApplicationJSONErrorDescriptionEnumInternalServerError Wwcer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Wwcer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Wwcer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer500ApplicationJSON - Internal server error
type Wwcer500ApplicationJSON struct {
	Error            *Wwcer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer404ApplicationJSONErrorEnum string

const (
	Wwcer404ApplicationJSONErrorEnumRecordNotFound Wwcer404ApplicationJSONErrorEnum = "record_not_found"
	Wwcer404ApplicationJSONErrorEnumURLNotFound    Wwcer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Wwcer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Wwcer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer404ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Wwcer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Wwcer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Wwcer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Wwcer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Wwcer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer404ApplicationJSON - No record found
type Wwcer404ApplicationJSON struct {
	Error            *Wwcer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer401ApplicationJSONErrorEnum string

const (
	Wwcer401ApplicationJSONErrorEnumInvalidAuthentication Wwcer401ApplicationJSONErrorEnum = "invalid_authentication"
	Wwcer401ApplicationJSONErrorEnumInvalidAuthorization  Wwcer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Wwcer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Wwcer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer401ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Wwcer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Wwcer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Wwcer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Wwcer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Wwcer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer401ApplicationJSON - Unauthorized access
type Wwcer401ApplicationJSON struct {
	Error            *Wwcer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wwcer400ApplicationJSONErrorEnum string

const (
	Wwcer400ApplicationJSONErrorEnumMissingParameter Wwcer400ApplicationJSONErrorEnum = "missing_parameter"
	Wwcer400ApplicationJSONErrorEnumInvalidParameter Wwcer400ApplicationJSONErrorEnum = "invalid_parameter"
	Wwcer400ApplicationJSONErrorEnumInvalidFormat    Wwcer400ApplicationJSONErrorEnum = "invalid_format"
	Wwcer400ApplicationJSONErrorEnumInvalidTxnid     Wwcer400ApplicationJSONErrorEnum = "invalid_txnid"
	Wwcer400ApplicationJSONErrorEnumInvalidConsentid Wwcer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Wwcer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Wwcer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Wwcer400ApplicationJSONErrorDescriptionEnum string

const (
	Wwcer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Wwcer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Wwcer400ApplicationJSONErrorDescriptionEnumBadRequest                              Wwcer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Wwcer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Wwcer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Wwcer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Wwcer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Wwcer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Wwcer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Wwcer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Wwcer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wwcer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wwcer400ApplicationJSON - Bad request
type Wwcer400ApplicationJSON struct {
	Error            *Wwcer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wwcer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type WwcerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Wwcer400ApplicationJSONObject *Wwcer400ApplicationJSON
	// Unauthorized access
	Wwcer401ApplicationJSONObject *Wwcer401ApplicationJSON
	// No record found
	Wwcer404ApplicationJSONObject *Wwcer404ApplicationJSON
	// Internal server error
	Wwcer500ApplicationJSONObject *Wwcer500ApplicationJSON
	// Bad gateway
	Wwcer502ApplicationJSONObject *Wwcer502ApplicationJSON
	// Service unavailable
	Wwcer503ApplicationJSONObject *Wwcer503ApplicationJSON
	// Gateway timeout
	Wwcer504ApplicationJSONObject *Wwcer504ApplicationJSON
}
