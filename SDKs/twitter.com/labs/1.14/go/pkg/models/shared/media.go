// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
)

type MediaType string

const (
	MediaTypeAnimatedGif MediaType = "animated_gif"
	MediaTypePhoto       MediaType = "photo"
	MediaTypeVideo       MediaType = "video"
)

type Media struct {
	Photo       *Photo
	Video       *Video
	AnimatedGif *AnimatedGif

	Type MediaType
}

func CreateMediaAnimatedGif(animatedGif AnimatedGif) Media {
	typ := MediaTypeAnimatedGif
	typStr := AnimatedGifTypeEnum(typ)
	animatedGif.Type = typStr

	return Media{
		AnimatedGif: &animatedGif,
		Type:        typ,
	}
}

func CreateMediaPhoto(photo Photo) Media {
	typ := MediaTypePhoto
	typStr := PhotoTypeEnum(typ)
	photo.Type = typStr

	return Media{
		Photo: &photo,
		Type:  typ,
	}
}

func CreateMediaVideo(video Video) Media {
	typ := MediaTypeVideo
	typStr := VideoTypeEnum(typ)
	video.Type = typStr

	return Media{
		Video: &video,
		Type:  typ,
	}
}

func (u *Media) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	type discriminator struct {
		Type string
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Type {
	case "animated_gif":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		animatedGif := new(AnimatedGif)
		if err := d.Decode(&animatedGif); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.AnimatedGif = animatedGif
		u.Type = MediaTypeAnimatedGif
		return nil
	case "photo":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		photo := new(Photo)
		if err := d.Decode(&photo); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Photo = photo
		u.Type = MediaTypePhoto
		return nil
	case "video":
		d = json.NewDecoder(bytes.NewReader(data))
		d.DisallowUnknownFields()
		video := new(Video)
		if err := d.Decode(&video); err != nil {
			return fmt.Errorf("could not unmarshal expected type: %w", err)
		}

		u.Video = video
		u.Type = MediaTypeVideo
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Media) MarshalJSON() ([]byte, error) {
	if u.Photo != nil {
		return json.Marshal(u.Photo)
	}

	if u.Video != nil {
		return json.Marshal(u.Video)
	}

	if u.AnimatedGif != nil {
		return json.Marshal(u.AnimatedGif)
	}

	return nil, nil
}
