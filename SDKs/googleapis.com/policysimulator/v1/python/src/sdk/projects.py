"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def policysimulator_projects_locations_replays_create(self, request: operations.PolicysimulatorProjectsLocationsReplaysCreateRequest, security: operations.PolicysimulatorProjectsLocationsReplaysCreateSecurity) -> operations.PolicysimulatorProjectsLocationsReplaysCreateResponse:
        r"""Creates and starts a Replay using the given ReplayConfig."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicysimulatorProjectsLocationsReplaysCreateRequest, base_url, '/v1/{parent}/replays', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_policysimulator_v1_replay_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PolicysimulatorProjectsLocationsReplaysCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicysimulatorProjectsLocationsReplaysCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningOperation])
                res.google_longrunning_operation = out

        return res

    def policysimulator_projects_locations_replays_operations_list(self, request: operations.PolicysimulatorProjectsLocationsReplaysOperationsListRequest, security: operations.PolicysimulatorProjectsLocationsReplaysOperationsListSecurity) -> operations.PolicysimulatorProjectsLocationsReplaysOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicysimulatorProjectsLocationsReplaysOperationsListRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.PolicysimulatorProjectsLocationsReplaysOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicysimulatorProjectsLocationsReplaysOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleLongrunningListOperationsResponse])
                res.google_longrunning_list_operations_response = out

        return res

    def policysimulator_projects_locations_replays_results_list(self, request: operations.PolicysimulatorProjectsLocationsReplaysResultsListRequest, security: operations.PolicysimulatorProjectsLocationsReplaysResultsListSecurity) -> operations.PolicysimulatorProjectsLocationsReplaysResultsListResponse:
        r"""Lists the results of running a Replay."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PolicysimulatorProjectsLocationsReplaysResultsListRequest, base_url, '/v1/{parent}/results', request)
        
        query_params = utils.get_query_params(operations.PolicysimulatorProjectsLocationsReplaysResultsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PolicysimulatorProjectsLocationsReplaysResultsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudPolicysimulatorV1ListReplayResultsResponse])
                res.google_cloud_policysimulator_v1_list_replay_results_response = out

        return res

    