"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from ..shared import cashpaymentdetails as shared_cashpaymentdetails
from ..shared import externalpaymentdetails as shared_externalpaymentdetails
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreatePaymentRequest:
    r"""Describes a request to create a payment using
    [CreatePayment](https://developer.squareup.com/reference/square_2021-08-18/payments-api/create-payment).
    """
    
    amount_money: shared_money.Money = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount_money') }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    idempotency_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('idempotency_key') }})
    r"""A unique string that identifies this `CreatePayment` request. Keys can be any valid string
    but must be unique for every `CreatePayment` request.
    
    Max: 45 characters
    
    Note: The number of allowed characters might be less than the stated maximum, if multi-byte
    characters are used.
    
    For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
    """  
    source_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source_id') }})
    r"""The ID for the source of funds for this payment. This can be a payment token
    (card nonce) generated by the Square payment form or a card on file made with the 
    Customers API. If recording a payment that the seller 
    received outside of Square, specify either \"CASH\" or \"EXTERNAL\". 
    For more information, see 
    [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
    """  
    accept_partial_authorization: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accept_partial_authorization'), 'exclude': lambda f: f is None }})
    r"""If set to `true` and charging a Square Gift Card, a payment might be returned with
    `amount_money` equal to less than what was requested. For example, a request for $20 when charging
    a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
    to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
    payment. This field cannot be `true` when `autocomplete = true`.
    
    For more information, see
    [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
    
    Default: false
    """  
    app_fee_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_fee_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    autocomplete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autocomplete'), 'exclude': lambda f: f is None }})
    r"""If set to `true`, this payment will be completed when possible. If
    set to `false`, this payment is held in an approved state until either
    explicitly completed (captured) or canceled (voided). For more information, see
    [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
    
    Default: true
    """  
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    buyer_email_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyer_email_address'), 'exclude': lambda f: f is None }})
    r"""The buyer's email address."""  
    cash_details: Optional[shared_cashpaymentdetails.CashPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cash_details'), 'exclude': lambda f: f is None }})
    r"""Stores details about a cash payment. Contains only non-confidential information. For more information, see
    [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
    """  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})
    r"""The [Customer](https://developer.squareup.com/reference/square_2021-08-18/objects/Customer) ID of the customer associated with the payment.
    
    This is required if the `source_id` refers to a card on file created using the Customers API.
    """  
    delay_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('delay_duration'), 'exclude': lambda f: f is None }})
    r"""The duration of time after the payment's creation when Square automatically cancels the
    payment. This automatic cancellation applies only to payments that do not reach a terminal state
    (COMPLETED, CANCELED, or FAILED) before the `delay_duration` time period.
    
    This parameter should be specified as a time duration, in RFC 3339 format, with a minimum value
    of 1 minute.
    
    Note: This feature is only supported for card payments. This parameter can only be set for a delayed
    capture payment (`autocomplete=false`).
    
    Default:
    
    - Card-present payments: \"PT36H\" (36 hours) from the creation time.
    - Card-not-present payments: \"P7D\" (7 days) from the creation time.
    """  
    external_details: Optional[shared_externalpaymentdetails.ExternalPaymentDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_details'), 'exclude': lambda f: f is None }})
    r"""Stores details about an external payment. Contains only non-confidential information.
    For more information, see 
    [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
    """  
    location_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_id'), 'exclude': lambda f: f is None }})
    r"""The location ID to associate with the payment. If not specified, the default location is
    used.
    """  
    note: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('note'), 'exclude': lambda f: f is None }})
    r"""An optional note to be entered by the developer when creating a payment.
    
    Limit 500 characters.
    """  
    order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('order_id'), 'exclude': lambda f: f is None }})
    r"""Associates a previously created order with this payment."""  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""A user-defined ID to associate with the payment.
    
    You can use this field to associate the payment to an entity in an external system 
    (for example, you might specify an order ID that is generated by a third-party shopping cart).
    
    Limit 40 characters.
    """  
    shipping_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipping_address'), 'exclude': lambda f: f is None }})
    r"""Represents a postal address in a country. The address format is based
    on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
    see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
    This format has dedicated fields for four address components: postal code, 
    locality (city), administrative district (state, prefecture, or province), and 
    sublocality (town or village). These components have dedicated fields in the 
    `Address` object because software sometimes behaves differently based on them. 
    For example, sales tax software may charge different amounts of sales tax 
    based on the postal code, and some software is only available in 
    certain states due to compliance reasons.
    
    For the remaining address components, the `Address` type provides the 
    `address_line_1` and `address_line_2` fields for free-form data entry. 
    These fields are free-form because the remaining address components have 
    too many variations around the world and typical software does not parse 
    these components. These fields enable users to enter anything they want. 
    
    Note that, in the current implementation, all other `Address` type fields are blank. 
    These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
    `administrative_district_level_2`, `administrative_district_level_3`, 
    `first_name`, `last_name`, and `organization`. 
    
    When it comes to localization, the seller's language preferences 
    (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
    are ignored for addresses. Even though Square products (such as Square Point of Sale 
    and the Seller Dashboard) mostly use a seller's language preference in 
    communication, when it comes to addresses, they will use English for a US address, 
    Japanese for an address in Japan, and so on.
    """  
    statement_description_identifier: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statement_description_identifier'), 'exclude': lambda f: f is None }})
    r"""Optional additional payment information to include on the customer's card statement
    as part of the statement description. This can be, for example, an invoice number, ticket number,
    or short description that uniquely identifies the purchase.
    
    Note that the `statement_description_identifier` might get truncated on the statement description
    to fit the required information including the Square identifier (SQ *) and name of the
    seller taking the payment.
    """  
    tip_money: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tip_money'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money. `Money` fields can be signed or unsigned.
    Fields that do not explicitly define whether they are signed or unsigned are
    considered unsigned and can only hold positive amounts. For signed fields, the
    sign of the value indicates the purpose of the money transfer. See
    [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts)
    for more information.
    """  
    verification_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verification_token'), 'exclude': lambda f: f is None }})
    r"""An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
    Verification tokens encapsulate customer device information and 3-D Secure
    challenge results to indicate that Square has verified the buyer identity.
    
    For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
    """  
    