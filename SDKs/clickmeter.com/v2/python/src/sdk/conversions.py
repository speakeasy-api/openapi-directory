"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conversions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def conversions_count(self, request: operations.ConversionsCountRequest) -> operations.ConversionsCountResponse:
        r"""Retrieve a count of conversions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions/count'
        
        query_params = utils.get_query_params(operations.ConversionsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_delete(self, request: operations.ConversionsDeleteRequest) -> operations.ConversionsDeleteResponse:
        r"""Delete conversion specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsDeleteRequest, base_url, '/conversions/{conversionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_get(self, request: operations.ConversionsGetRequest) -> operations.ConversionsGetResponse:
        r"""Retrieve a list of conversions"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions'
        
        query_params = utils.get_query_params(operations.ConversionsGetRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_datapoints(self, request: operations.ConversionsGetDatapointsRequest) -> operations.ConversionsGetDatapointsResponse:
        r"""Retrieve a list of datapoints connected to this conversion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsGetDatapointsRequest, base_url, '/conversions/{conversionId}/datapoints', request)
        
        query_params = utils.get_query_params(operations.ConversionsGetDatapointsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetDatapointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entities_response_api_core_responses_entity_uri_system_int64 = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_datapoints_count(self, request: operations.ConversionsGetDatapointsCountRequest) -> operations.ConversionsGetDatapointsCountResponse:
        r"""Retrieve a count of datapoints connected to this conversion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsGetDatapointsCountRequest, base_url, '/conversions/{conversionId}/datapoints/count', request)
        
        query_params = utils.get_query_params(operations.ConversionsGetDatapointsCountRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetDatapointsCountResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesCountResponce])
                res.api_core_responses_count_responce = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_hits(self, request: operations.ConversionsGetHitsRequest) -> operations.ConversionsGetHitsResponse:
        r"""Retrieve the list of events related to this conversion."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsGetHitsRequest, base_url, '/conversions/{conversionId}/hits', request)
        
        query_params = utils.get_query_params(operations.ConversionsGetHitsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetHitsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoClickStreamHitListPage])
                res.api_core_dto_click_stream_hit_list_page = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_statistics_all_list(self, request: operations.ConversionsGetStatisticsAllListRequest) -> operations.ConversionsGetStatisticsAllListResponse:
        r"""Retrieve statistics about this customer for a timeframe related to a subset of conversions grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions/aggregated/list'
        
        query_params = utils.get_query_params(operations.ConversionsGetStatisticsAllListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetStatisticsAllListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_statistics_list(self, request: operations.ConversionsGetStatisticsListRequest) -> operations.ConversionsGetStatisticsListResponse:
        r"""Retrieve statistics about this conversion for a timeframe grouped by some temporal entity (day/week/month)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsGetStatisticsListRequest, base_url, '/conversions/{conversionId}/aggregated/list', request)
        
        query_params = utils.get_query_params(operations.ConversionsGetStatisticsListRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetStatisticsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntitiesResponseAPICoreDtoAggregatedAggregatedResult])
                res.api_core_responses_entities_response_api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_get_statistics_single(self, request: operations.ConversionsGetStatisticsSingleRequest) -> operations.ConversionsGetStatisticsSingleResponse:
        r"""Retrieve statistics about this conversion for a timeframe"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsGetStatisticsSingleRequest, base_url, '/conversions/{conversionId}/aggregated', request)
        
        query_params = utils.get_query_params(operations.ConversionsGetStatisticsSingleRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsGetStatisticsSingleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoAggregatedAggregatedResult])
                res.api_core_dto_aggregated_aggregated_result = out
        elif http_res.status_code in [401, 500]:
            pass

        return res

    def conversions_patch_notes_form(self, request: operations.ConversionsPatchNotesFormRequest) -> operations.ConversionsPatchNotesFormResponse:
        r"""Fast patch the \\"notes\\" field of a conversion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchNotesFormRequest, base_url, '/conversions/{conversionId}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchNotesFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def conversions_patch_notes_json(self, request: operations.ConversionsPatchNotesJSONRequest) -> operations.ConversionsPatchNotesJSONResponse:
        r"""Fast patch the \\"notes\\" field of a conversion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchNotesJSONRequest, base_url, '/conversions/{conversionId}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_generic_text_patch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchNotesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def conversions_patch_notes_raw(self, request: operations.ConversionsPatchNotesRawRequest) -> operations.ConversionsPatchNotesRawResponse:
        r"""Fast patch the \\"notes\\" field of a conversion"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchNotesRawRequest, base_url, '/conversions/{conversionId}/notes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchNotesRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404, 500]:
            pass

        return res

    def conversions_patch_form(self, request: operations.ConversionsPatchFormRequest) -> operations.ConversionsPatchFormResponse:
        r"""Modify the association between a conversion and a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchFormRequest, base_url, '/conversions/{conversionId}/datapoints/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_conversion_patch_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_patch_json(self, request: operations.ConversionsPatchJSONRequest) -> operations.ConversionsPatchJSONResponse:
        r"""Modify the association between a conversion and a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchJSONRequest, base_url, '/conversions/{conversionId}/datapoints/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_conversion_patch_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_patch_raw(self, request: operations.ConversionsPatchRawRequest) -> operations.ConversionsPatchRawResponse:
        r"""Modify the association between a conversion and a datapoint"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPatchRawRequest, base_url, '/conversions/{conversionId}/datapoints/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPatchRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_post_form(self, request: operations.ConversionsPostFormRequest) -> operations.ConversionsPostFormResponse:
        r"""Update conversion specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPostFormRequest, base_url, '/conversions/{conversionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_conversions_conversion", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_post_json(self, request: operations.ConversionsPostJSONRequest) -> operations.ConversionsPostJSONResponse:
        r"""Update conversion specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPostJSONRequest, base_url, '/conversions/{conversionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_dto_conversions_conversion", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_post_raw(self, request: operations.ConversionsPostRawRequest) -> operations.ConversionsPostRawResponse:
        r"""Update conversion specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConversionsPostRawRequest, base_url, '/conversions/{conversionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_put_form(self, request: shared.APICoreDtoConversionsConversion) -> operations.ConversionsPutFormResponse:
        r"""Create a conversion"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPutFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_put_json(self, request: shared.APICoreDtoConversionsConversion) -> operations.ConversionsPutJSONResponse:
        r"""Create a conversion"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPutJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def conversions_put_raw(self, request: bytes) -> operations.ConversionsPutRawResponse:
        r"""Create a conversion"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConversionsPutRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def get_conversions_conversion_id_(self, request: operations.GetConversionsConversionIDRequest) -> operations.GetConversionsConversionIDResponse:
        r"""Retrieve conversion specified by id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetConversionsConversionIDRequest, base_url, '/conversions/{conversionId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetConversionsConversionIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoConversionsConversion])
                res.api_core_dto_conversions_conversion = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreDtoConversionsConversion])
                res.api_core_dto_conversions_conversion = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    def put_conversions_conversion_id_datapoints_batch_patch(self, request: operations.PutConversionsConversionIDDatapointsBatchPatchRequest) -> operations.PutConversionsConversionIDDatapointsBatchPatchResponse:
        r"""Modify the association between a conversion and multiple datapoints"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutConversionsConversionIDDatapointsBatchPatchRequest, base_url, '/conversions/{conversionId}/datapoints/batch/patch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "api_core_requests_patch_body_batch", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutConversionsConversionIDDatapointsBatchPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.APICoreResponsesEntityURISystemInt64])
                res.api_core_responses_entity_uri_system_int64 = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content
        elif http_res.status_code in [401, 404, 500]:
            pass

        return res

    