"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class BalanceAccounts:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_balance_accounts_id(self, request: operations.GetBalanceAccountsIDRequest, security: operations.GetBalanceAccountsIDSecurity) -> operations.GetBalanceAccountsIDResponse:
        r"""Get a balance account
        Returns a balance account and its balances for the default currency and other currencies with a non-zero balance.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBalanceAccountsIDRequest, base_url, '/balanceAccounts/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBalanceAccountsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BalanceAccount])
                res.balance_account = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def get_balance_accounts_id_payment_instruments(self, request: operations.GetBalanceAccountsIDPaymentInstrumentsRequest, security: operations.GetBalanceAccountsIDPaymentInstrumentsSecurity) -> operations.GetBalanceAccountsIDPaymentInstrumentsResponse:
        r"""Get all payment instruments for a balance account
        Returns a paginated list of the payment instruments associated with a balance account. 
        
        To fetch multiple pages, use the query parameters.For example, to limit the page to 3 payment instruments and to skip the first 6, use `/balanceAccounts/{id}/paymentInstruments?limit=3&offset=6`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBalanceAccountsIDPaymentInstrumentsRequest, base_url, '/balanceAccounts/{id}/paymentInstruments', request)
        
        query_params = utils.get_query_params(operations.GetBalanceAccountsIDPaymentInstrumentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBalanceAccountsIDPaymentInstrumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedPaymentInstrumentsResponse])
                res.paginated_payment_instruments_response = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def patch_balance_accounts_id(self, request: operations.PatchBalanceAccountsIDRequest, security: operations.PatchBalanceAccountsIDSecurity) -> operations.PatchBalanceAccountsIDResponse:
        r"""Update a balance account
        Updates a balance account.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchBalanceAccountsIDRequest, base_url, '/balanceAccounts/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "balance_account_update_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchBalanceAccountsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BalanceAccount])
                res.balance_account = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    def post_balance_accounts(self, request: shared.BalanceAccountInfoInput, security: operations.PostBalanceAccountsSecurity) -> operations.PostBalanceAccountsResponse:
        r"""Create a balance account
        Creates a balance account that holds the funds of the associated account holder.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/balanceAccounts'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBalanceAccountsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BalanceAccount])
                res.balance_account = out
        elif http_res.status_code in [400, 401, 403, 422, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RestServiceError])
                res.rest_service_error = out

        return res

    