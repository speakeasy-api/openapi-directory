"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudrecommendationenginev1beta1predictresponsepredictionresult as shared_googlecloudrecommendationenginev1beta1predictresponsepredictionresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudRecommendationengineV1beta1PredictResponse:
    r"""Response message for predict method."""
    
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dryRun'), 'exclude': lambda f: f is None }})
    r"""True if the dryRun property was set in the request."""  
    items_missing_in_catalog: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsMissingInCatalog'), 'exclude': lambda f: f is None }})
    r"""IDs of items in the request that were missing from the catalog."""  
    metadata: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata'), 'exclude': lambda f: f is None }})
    r"""Additional domain specific prediction response metadata."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPageToken'), 'exclude': lambda f: f is None }})
    r"""If empty, the list is complete. If nonempty, the token to pass to the next request's PredictRequest.page_token."""  
    recommendation_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendationToken'), 'exclude': lambda f: f is None }})
    r"""A unique recommendation token. This should be included in the user event logs resulting from this recommendation, which enables accurate attribution of recommendation model performance."""  
    results: Optional[list[shared_googlecloudrecommendationenginev1beta1predictresponsepredictionresult.GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""A list of recommended items. The order represents the ranking (from the most relevant item to the least)."""  
    