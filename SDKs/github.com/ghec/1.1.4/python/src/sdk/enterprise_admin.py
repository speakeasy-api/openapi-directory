"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class EnterpriseAdmin:
    r"""Enterprise Administration"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def announcement_banners_get_announcement_banner_for_enterprise(self, request: operations.AnnouncementBannersGetAnnouncementBannerForEnterpriseRequest) -> operations.AnnouncementBannersGetAnnouncementBannerForEnterpriseResponse:
        r"""Get announcement banner for enterprise
        Gets the announcement banner currently set for the enterprise.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/announcement-banners#get-announcement-banner-for-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnnouncementBannersGetAnnouncementBannerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/announcement', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnnouncementBannersGetAnnouncementBannerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AnnouncementBanner])
                res.announcement_banner = out

        return res

    def announcement_banners_remove_announcement_banner_for_enterprise(self, request: operations.AnnouncementBannersRemoveAnnouncementBannerForEnterpriseRequest) -> operations.AnnouncementBannersRemoveAnnouncementBannerForEnterpriseResponse:
        r"""Remove announcement banner from enterprise
        Removes the announcement banner currently set for the enterprise.
        https://docs.github.com/enterprise-cloud@latest//rest/announcement-banners/enterprises#remove-announcement-banner-from-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnnouncementBannersRemoveAnnouncementBannerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/announcement', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnnouncementBannersRemoveAnnouncementBannerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def announcement_banners_set_announcement_banner_for_enterprise(self, request: operations.AnnouncementBannersSetAnnouncementBannerForEnterpriseRequest) -> operations.AnnouncementBannersSetAnnouncementBannerForEnterpriseResponse:
        r"""Set announcement banner for enterprise
        Sets the announcement banner to display for the enterprise.
        https://docs.github.com/enterprise-cloud@latest//rest/announcement-banners/enterprises#set-announcement-banner-for-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnnouncementBannersSetAnnouncementBannerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/announcement', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "announcement", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnnouncementBannersSetAnnouncementBannerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AnnouncementBanner])
                res.announcement_banner = out

        return res

    def enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResponse:
        r"""Add custom labels to a self-hosted runner for an enterprise
        Add custom labels to a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#add-custom-labels-to-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Add organization access to a self-hosted runner group in an enterprise
        Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_add_self_hosted_runner_to_group_for_enterprise(self, request: operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest) -> operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse:
        r"""Add a self-hosted runner to a group for an enterprise
        Adds a self-hosted runner to a runner group configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise`
        scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminAddSelfHostedRunnerToGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_create_registration_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse:
        r"""Create a registration token for an enterprise
        Returns a token that you can pass to the `config` script. The token expires after one hour.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        
        #### Example using registration token
        
        Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
        
        ```
        ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
        ```
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#create-a-registration-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/registration-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRegistrationTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_remove_token_for_enterprise(self, request: operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest) -> operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse:
        r"""Create a remove token for an enterprise
        Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        
        #### Example using remove token
        
        To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
        endpoint.
        
        ```
        ./config.sh remove --token TOKEN
        ```
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#create-a-remove-token-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateRemoveTokenForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/remove-token', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateRemoveTokenForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AuthenticationToken])
                res.authentication_token = out

        return res

    def enterprise_admin_create_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Create a self-hosted runner group for an enterprise
        Creates a new self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#create-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_delete_self_hosted_runner_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse:
        r"""Delete a self-hosted runner from an enterprise
        Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#delete-self-hosted-runner-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_delete_self_hosted_runner_group_from_enterprise(self, request: operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest) -> operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse:
        r"""Delete a self-hosted runner group from an enterprise
        Deletes a self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#delete-a-self-hosted-runner-group-from-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDeleteSelfHostedRunnerGroupFromEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_disable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Disable a selected organization for GitHub Actions in an enterprise
        Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#disable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminDisableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_enable_selected_organization_github_actions_enterprise(self, request: operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse:
        r"""Enable a selected organization for GitHub Actions in an enterprise
        Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#enable-a-selected-organization-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_get_allowed_actions_enterprise(self, request: operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse:
        r"""Get allowed actions and reusable workflows for an enterprise
        Gets the selected actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#get-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SelectedActions])
                res.selected_actions = out

        return res

    def enterprise_admin_get_audit_log(self, request: operations.EnterpriseAdminGetAuditLogRequest) -> operations.EnterpriseAdminGetAuditLogResponse:
        r"""Get the audit log for an enterprise
        Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `read:audit_log` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetAuditLogRequest, base_url, '/enterprises/{enterprise}/audit-log', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetAuditLogRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetAuditLogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AuditLogEvent]])
                res.audit_log_events = out

        return res

    def enterprise_admin_get_consumed_licenses(self, request: operations.EnterpriseAdminGetConsumedLicensesRequest) -> operations.EnterpriseAdminGetConsumedLicensesResponse:
        r"""List enterprise consumed licenses
        Lists the license consumption information for all users, including those from connected servers, associated with an enterprise.
        To use this endpoint, you must be an enterprise admin, and you must use an access
        token with the `read:enterprise` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/enterprise-admin#list-enterprise-consumed-licenses - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetConsumedLicensesRequest, base_url, '/enterprises/{enterprise}/consumed-licenses', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetConsumedLicensesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetConsumedLicensesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetConsumedLicenses])
                res.get_consumed_licenses = out

        return res

    def enterprise_admin_get_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse:
        r"""Get GitHub Actions permissions for an enterprise
        Gets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#get-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActionsEnterprisePermissions])
                res.actions_enterprise_permissions = out

        return res

    def enterprise_admin_get_license_sync_status(self, request: operations.EnterpriseAdminGetLicenseSyncStatusRequest) -> operations.EnterpriseAdminGetLicenseSyncStatusResponse:
        r"""Get a license sync status
        Gets information about the status of a license sync job for an enterprise.
        To use this endpoint, you must be an enterprise admin, and you must use an access
        token with the `read:enterprise` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/enterprise-admin#get-a-license-sync-status - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetLicenseSyncStatusRequest, base_url, '/enterprises/{enterprise}/license-sync-status', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetLicenseSyncStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetLicenseSyncStatus])
                res.get_license_sync_status = out

        return res

    def enterprise_admin_get_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse:
        r"""Get a self-hosted runner for an enterprise
        Gets a specific self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#get-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Runner])
                res.runner = out

        return res

    def enterprise_admin_get_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Get a self-hosted runner group for an enterprise
        Gets a specific self-hosted runner group for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#get-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def enterprise_admin_get_server_statistics(self, request: operations.EnterpriseAdminGetServerStatisticsRequest) -> operations.EnterpriseAdminGetServerStatisticsResponse:
        r"""Get GitHub Enterprise Server statistics
        Returns aggregate usage metrics for your GitHub Enterprise Server 3.5+ instance for a specified time period up to 365 days.
        
        To use this endpoint, your GitHub Enterprise Server instance must be connected to GitHub Enterprise Cloud using GitHub Connect. You must enable Server Statistics, and for the API request provide your enterprise account name or organization name connected to the GitHub Enterprise Server. For more information, see \"[Enabling Server Statistics for your enterprise](/admin/configuration/configuring-github-connect/enabling-server-statistics-for-your-enterprise)\" in the GitHub Enterprise Server documentation.
        
        You'll need to use a personal access token:
          - If you connected your GitHub Enterprise Server to an enterprise account and enabled Server Statistics, you'll need a personal access token with the `read:enterprise` permission.
          - If you connected your GitHub Enterprise Server to an organization account and enabled Server Statistics, you'll need a personal access token with the `read:org` permission.
        
        For more information on creating a personal access token, see \"[Creating a personal access token](/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).\" 
        https://docs.github.com/enterprise-cloud@latest//rest/reference/enterprise-admin#get-github-enterprise-server-statistics - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminGetServerStatisticsRequest, base_url, '/enterprise-installation/{enterprise_or_org}/server-statistics', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminGetServerStatisticsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminGetServerStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ServerStatistics]])
                res.server_statistics = out

        return res

    def enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResponse:
        r"""List labels for a self-hosted runner for an enterprise
        Lists all labels for a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-labels-for-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListLabelsForSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""List organization access to a self-hosted runner group in an enterprise
        Lists the organizations with access to a self-hosted runner group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise200ApplicationJSON])
                res.enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_runner_applications_for_enterprise(self, request: operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest) -> operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse:
        r"""List runner applications for an enterprise
        Lists binaries for the runner application that you can download and run.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-runner-applications-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListRunnerApplicationsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/downloads', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListRunnerApplicationsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.RunnerApplication]])
                res.runner_applications = out

        return res

    def enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""List selected organizations enabled for GitHub Actions in an enterprise
        Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200ApplicationJSON])
                res.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runner_groups_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse:
        r"""List self-hosted runner groups for an enterprise
        Lists all self-hosted runner groups for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-self-hosted-runner-groups-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnerGroupsForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runner_groups_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse:
        r"""List self-hosted runners for an enterprise
        Lists all self-hosted runners configured for an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-self-hosted-runners-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_list_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""List self-hosted runners in a group for an enterprise
        Lists the self-hosted runners that are in a specific enterprise group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        query_params = utils.get_query_params(operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminListSelfHostedRunnersInGroupForEnterprise200ApplicationJSON])
                res.enterprise_admin_list_self_hosted_runners_in_group_for_enterprise_200_application_json_object = out

        return res

    def enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResponse:
        r"""Remove all custom labels from a self-hosted runner for an enterprise
        Remove all custom labels from a self-hosted runner configured in an
        enterprise. Returns the remaining read-only labels from the runner.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#remove-all-custom-labels-from-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResponse:
        r"""Remove a custom label from a self-hosted runner for an enterprise
        Remove a custom label from a self-hosted runner configured
        in an enterprise. Returns the remaining labels from the runner.
        
        This endpoint returns a `404 Not Found` status if the custom label is not
        present on the runner.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#remove-a-custom-label-from-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Remove organization access to a self-hosted runner group in an enterprise
        Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see \"[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise).\"
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise(self, request: operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest) -> operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse:
        r"""Remove a self-hosted runner from a group for an enterprise
        Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_allowed_actions_enterprise(self, request: operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest) -> operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse:
        r"""Set allowed actions and reusable workflows for an enterprise
        Sets the actions and reusable workflows that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-allowed-actions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetAllowedActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/selected-actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "selected_actions", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetAllowedActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise(self, request: operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest) -> operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResponse:
        r"""Set custom labels for a self-hosted runner for an enterprise
        Remove all previous custom labels and set the new custom labels for a specific
        self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-custom-labels-for-a-self-hosted-runner-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runners/{runner_id}/labels', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterprise200ApplicationJSON])
                res.enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise_200_application_json_object = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationErrorSimple])
                res.validation_error_simple = out

        return res

    def enterprise_admin_set_github_actions_permissions_enterprise(self, request: operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest) -> operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse:
        r"""Set GitHub Actions permissions for an enterprise
        Sets the GitHub Actions permissions policy for organizations and allowed actions and reusable workflows in an enterprise.
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-github-actions-permissions-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetGithubActionsPermissionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise(self, request: operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest) -> operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse:
        r"""Set organization access for a self-hosted runner group in an enterprise
        Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise(self, request: operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest) -> operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse:
        r"""Set selected organizations enabled for GitHub Actions in an enterprise
        Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see \"[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise).\"
        
        You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-selected-organizations-enabled-for-github-actions-in-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/permissions/organizations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_set_self_hosted_runners_in_group_for_enterprise(self, request: operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest) -> operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse:
        r"""Set self-hosted runners in a group for an enterprise
        Replaces the list of self-hosted runners that are part of an enterprise runner group.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def enterprise_admin_update_self_hosted_runner_group_for_enterprise(self, request: operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest) -> operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse:
        r"""Update a self-hosted runner group for an enterprise
        Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
        
        You must authenticate using an access token with the `manage_runners:enterprise` scope to use this endpoint.
        https://docs.github.com/enterprise-cloud@latest//rest/reference/actions#update-a-self-hosted-runner-group-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseRequest, base_url, '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RunnerGroupsEnterprise])
                res.runner_groups_enterprise = out

        return res

    def secret_scanning_get_security_analysis_settings_for_enterprise(self, request: operations.SecretScanningGetSecurityAnalysisSettingsForEnterpriseRequest) -> operations.SecretScanningGetSecurityAnalysisSettingsForEnterpriseResponse:
        r"""Get code security and analysis features for an enterprise
        Gets code security and analysis settings for the specified enterprise.
        To use this endpoint, you must be an administrator of the enterprise, and you must use an access token with the `admin:enterprise` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/enterprise-admin#get-code-security-analysis-features-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningGetSecurityAnalysisSettingsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/code_security_and_analysis', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningGetSecurityAnalysisSettingsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EnterpriseSecurityAnalysisSettings])
                res.enterprise_security_analysis_settings = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def secret_scanning_patch_security_analysis_settings_for_enterprise(self, request: operations.SecretScanningPatchSecurityAnalysisSettingsForEnterpriseRequest) -> operations.SecretScanningPatchSecurityAnalysisSettingsForEnterpriseResponse:
        r"""Update code security and analysis features for an enterprise
        Updates the settings for advanced security, Dependabot alerts, secret scanning, and push protection for new repositories in an enterprise.
        To use this endpoint, you must be an administrator of the enterprise, and you must use an access token with the `admin:enterprise` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/enterprise-admin#update-code-security-and-analysis-features-for-an-enterprise - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningPatchSecurityAnalysisSettingsForEnterpriseRequest, base_url, '/enterprises/{enterprise}/code_security_and_analysis', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningPatchSecurityAnalysisSettingsForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 422]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    def secret_scanning_post_security_product_enablement_for_enterprise(self, request: operations.SecretScanningPostSecurityProductEnablementForEnterpriseRequest) -> operations.SecretScanningPostSecurityProductEnablementForEnterpriseResponse:
        r"""Enable or disable a security feature
        Enables or disables the specified security feature for all repositories in an enterprise.
        
        To use this endpoint, you must be an administrator of the enterprise, and you must use an access token with the `admin:enterprise` scope.
        https://docs.github.com/enterprise-cloud@latest//rest/enterprise-admin#enable-or-disable-a-security-feature - API method documentation
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecretScanningPostSecurityProductEnablementForEnterpriseRequest, base_url, '/enterprises/{enterprise}/{security_product}/{enablement}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecretScanningPostSecurityProductEnablementForEnterpriseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [204, 422]:
            pass
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BasicError])
                res.basic_error = out

        return res

    