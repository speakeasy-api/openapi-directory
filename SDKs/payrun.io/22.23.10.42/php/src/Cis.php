<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Cis 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a CIS instruction
     * 
     * Delete the specified CIS instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionResponse
     */
	public function deleteCisInstruction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete CIS instruction tag
     * 
     * Deletes a tag from the CIS instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagResponse
     */
	public function deleteCisInstructionTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisInstructionTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a CIS line
     * 
     * Delete the specified CIS line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineResponse
     */
	public function deleteCisLine(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete CIS line tag
     * 
     * Deletes a tag from the CIS line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagResponse
     */
	public function deleteCisLineTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an CIS line type
     * 
     * Delete the specified CIS line type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeResponse
     */
	public function deleteCisLineType(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete CIS line type tag
     * 
     * Deletes a tag from the CIS line type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagResponse
     */
	public function deleteCisLineTypeTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisLineTypeTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete the CIS transaction
     * 
     * Deletes the specified CIS transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionResponse
     */
	public function deleteCisTransaction(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCisTransactionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete sub contractor tag
     * 
     * Deletes a tag from the sub contractor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagResponse
     */
	public function deleteSubContractorTag(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSubContractorTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all CIS instruction tags
     * 
     * Gets all the CIS instruction tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsResponse
     */
	public function getAllCisInstructionTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllCisInstructionTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all CIS line tags
     * 
     * Gets all the CIS line tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsResponse
     */
	public function getAllCisLineTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all CIS line type tags
     * 
     * Gets all the CIS line type tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsResponse
     */
	public function getAllCisLineTypeTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineTypes/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllCisLineTypeTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all sub contractor tags
     * 
     * Gets all the sub contractor tags
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsResponse
     */
	public function getAllSubContractorTags(
        \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractors/Tags', \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllSubContractorTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS instruction from sub contractor
     * 
     * Gets the specified CIS instruction from sub contractor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorResponse
     */
	public function getCisInstructionFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS instructions from sub contractor.
     * 
     * Get links to all CIS instructions for the specified sub contractor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorResponse
     */
	public function getCisInstructionsFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS instructions with tag
     * 
     * Gets the CIS instruction with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagResponse
     */
	public function getCisInstructionsWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisInstructionsWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line from sub contractor
     * 
     * Gets the specified CIS line from sub contractor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorResponse
     */
	public function getCisLineFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}', \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLineFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisLine = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisLine', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line type from employer
     * 
     * Gets the specified CIS line type from employer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerResponse
     */
	public function getCisLineTypeFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypeFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisLineType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisLineType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line types from employer.
     * 
     * Get links to all CIS line types for the specified employer.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerResponse
     */
	public function getCisLineTypesFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineTypes', \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line types with tag
     * 
     * Gets the CIS line type with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagResponse
     */
	public function getCisLineTypesWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineTypes/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLineTypesWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS lines from sub contractor.
     * 
     * Get links to all CIS lines for the specified sub contractor.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorResponse
     */
	public function getCisLinesFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines', \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLinesFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS lines with tag
     * 
     * Gets the CIS line with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagResponse
     */
	public function getCisLinesWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLines/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisLinesWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the CIS transaction
     * 
     * Returns the specified CIS transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerResponse
     */
	public function getCisTransactionFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisTransaction/{CisTransactionId}', \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisTransaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisTransaction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all CIS transactions for the employer
     * 
     * Get links for all CIS transactions for the specified employer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerResponse
     */
	public function getCisTransactionsFromEmployer(
        \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisTransactions', \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCisTransactionsFromEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get sub contractors with tag
     * 
     * Gets the sub contractor with the tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagResponse
     */
	public function getSubContractorsWithTag(
        \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractors/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSubContractorsWithTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS instruction tag
     * 
     * Gets the tag from the CIS instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionResponse
     */
	public function getTagFromCisInstruction(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line tag
     * 
     * Gets the tag from the CIS line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineResponse
     */
	public function getTagFromCisLine(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get CIS line type tag
     * 
     * Gets the tag from the CIS line type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeResponse
     */
	public function getTagFromCisLineType(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromCisLineTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get sub contractor tag
     * 
     * Gets the tag from the sub contractor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorResponse
     */
	public function getTagFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get sub contractor revision tag
     * 
     * Gets the tag from the sub contractor revision
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionResponse
     */
	public function getTagFromSubContractorRevision(
        \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagFromSubContractorRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all tags from the CIS instruction
     * 
     * Gets all the tags from the CIS instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionResponse
     */
	public function getTagsFromCisInstruction(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all tags from the CIS line
     * 
     * Gets all the tags from the CIS line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineResponse
     */
	public function getTagsFromCisLine(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all tags from the CIS line type
     * 
     * Gets all the tags from the CIS line type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeResponse
     */
	public function getTagsFromCisLineType(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromCisLineTypeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all tags from the sub contractor
     * 
     * Gets all the tags from the sub contractor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorResponse
     */
	public function getTagsFromSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all sub contractor revision tags
     * 
     * Gets all the tags from the sub contractor revision
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionResponse
     */
	public function getTagsFromSubContractorRevision(
        \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tags/{EffectiveDate}', \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTagsFromSubContractorRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->linkCollection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\LinkCollection', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the CIS instruction
     * 
     * Update an existing CIS instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionResponse
     */
	public function patchCisInstruction(
        \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchCisInstructionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CIS instruction
     * 
     * Create a new CIS instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorResponse
     */
	public function postCisInstructionIntoSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstructions', \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cisInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCisInstructionIntoSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new CIS line type
     * 
     * Create a new CIS line type object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerResponse
     */
	public function postCisLineTypeIntoEmployer(
        \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineTypes', \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cisLineType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostCisLineTypeIntoEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->link = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Link', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the CIS instruction
     * 
     * Insert or update existing CIS instruction object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorResponse
     */
	public function putCisInstructionIntoSubContractor(
        \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}', \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cisInstruction", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionIntoSubContractorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisInstruction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisInstruction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert CIS instruction tag
     * 
     * Inserts a new tag on the CIS instruction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagResponse
     */
	public function putCisInstructionTag(
        \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisInstruction/{CisInstructionId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCisInstructionTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert CIS line tag
     * 
     * Inserts a new tag on the CIS line
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagResponse
     */
	public function putCisLineTag(
        \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/CisLine/{CisLineId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCisLineTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the CIS line type
     * 
     * Updates the existing specified CIS line type object
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerResponse
     */
	public function putCisLineTypeIntoEmployer(
        \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}', \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "cisLineType", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeIntoEmployerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->cisLineType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CisLineType', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert CIS line type tag
     * 
     * Inserts a new tag on the CIS line type
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagResponse
     */
	public function putCisLineTypeTag(
        \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/CisLineType/{CisLineTypeId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCisLineTypeTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Insert sub contractor tag
     * 
     * Inserts a new tag on the sub contractor
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagResponse
     */
	public function putSubContractorTag(
        \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/Employer/{EmployerId}/SubContractor/{SubContractorId}/Tag/{TagId}', \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutSubContractorTagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorModel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorModel', 'json');
            }
        }

        return $response;
    }
}