// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableCircuitTerminationConnectionStatusEnum string

const (
	WritableCircuitTerminationConnectionStatusEnumFalse WritableCircuitTerminationConnectionStatusEnum = "false"
	WritableCircuitTerminationConnectionStatusEnumTrue  WritableCircuitTerminationConnectionStatusEnum = "true"
)

func (e *WritableCircuitTerminationConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = WritableCircuitTerminationConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCircuitTerminationConnectionStatusEnum: %s", s)
	}
}

type WritableCircuitTerminationTerminationEnum string

const (
	WritableCircuitTerminationTerminationEnumA WritableCircuitTerminationTerminationEnum = "A"
	WritableCircuitTerminationTerminationEnumZ WritableCircuitTerminationTerminationEnum = "Z"
)

func (e *WritableCircuitTerminationTerminationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "A":
		fallthrough
	case "Z":
		*e = WritableCircuitTerminationTerminationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableCircuitTerminationTerminationEnum: %s", s)
	}
}

type WritableCircuitTerminationInput struct {
	Cable            *NestedCableInput                               `json:"cable,omitempty"`
	Circuit          int64                                           `json:"circuit"`
	ConnectionStatus *WritableCircuitTerminationConnectionStatusEnum `json:"connection_status,omitempty"`
	Description      *string                                         `json:"description,omitempty"`
	PortSpeed        int64                                           `json:"port_speed"`
	PpInfo           *string                                         `json:"pp_info,omitempty"`
	Site             int64                                           `json:"site"`
	TermSide         WritableCircuitTerminationTerminationEnum       `json:"term_side"`
	// Upstream speed, if different from port speed
	UpstreamSpeed *int64  `json:"upstream_speed,omitempty"`
	XconnectID    *string `json:"xconnect_id,omitempty"`
}
