// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum - Whether the instrument is playing or not
type AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum string

const (
	AudioRenderTimelineSpanInstrumentGroupStatusStatusEnumActive   AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum = "active"
	AudioRenderTimelineSpanInstrumentGroupStatusStatusEnumInactive AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum = "inactive"
)

func (e *AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "inactive":
		*e = AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum: %s", s)
	}
}

// AudioRenderTimelineSpanInstrumentGroupStatus - The status of an instrument at a specific beat
type AudioRenderTimelineSpanInstrumentGroupStatus struct {
	// The beat, relative to the span, at which the status begins
	Beat float64 `json:"beat"`
	// Whether the instrument is playing or not
	Status AudioRenderTimelineSpanInstrumentGroupStatusStatusEnum `json:"status"`
}
