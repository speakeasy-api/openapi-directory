// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListGameServerGroupsQueryParams struct {
	// Pagination limit
	Limit *string `queryParam:"style=form,explode=true,name=Limit"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListGameServerGroupsXAmzTargetEnum
type ListGameServerGroupsXAmzTargetEnum string

const (
	ListGameServerGroupsXAmzTargetEnumGameLiftListGameServerGroups ListGameServerGroupsXAmzTargetEnum = "GameLift.ListGameServerGroups"
)

func (e *ListGameServerGroupsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "GameLift.ListGameServerGroups":
		*e = ListGameServerGroupsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListGameServerGroupsXAmzTargetEnum: %s", s)
	}
}

type ListGameServerGroupsHeaders struct {
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListGameServerGroupsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListGameServerGroupsRequest struct {
	QueryParams ListGameServerGroupsQueryParams
	Headers     ListGameServerGroupsHeaders
	Request     shared.ListGameServerGroupsInput `request:"mediaType=application/json"`
}

type ListGameServerGroupsResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	ListGameServerGroupsOutput *shared.ListGameServerGroupsOutput
	StatusCode                 int
	RawResponse                *http.Response
	// UnauthorizedException
	UnauthorizedException interface{}
}
