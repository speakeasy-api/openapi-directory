"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FolderMenu:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def folder_menu_get(self, request: operations.FolderMenuGetRequest) -> operations.FolderMenuGetResponse:
        r"""Gets the folder menu items (each item might contain child items)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/FolderMenu'
        
        query_params = utils.get_query_params(operations.FolderMenuGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderMenuGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuConfiguration])
                res.folder_menu_configuration = out
            if utils.match_content_type(content_type, 'text/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FolderMenuConfiguration])
                res.folder_menu_configuration = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'text/xml'):
                res.body = http_res.content

        return res

    def folder_menu_post_form(self, request: shared.FolderMenuConfiguration) -> operations.FolderMenuPostFormResponse:
        r"""Creates and updates the folder menu items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/FolderMenu'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderMenuPostFormResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def folder_menu_post_json(self, request: shared.FolderMenuConfiguration) -> operations.FolderMenuPostJSONResponse:
        r"""Creates and updates the folder menu items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/FolderMenu'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderMenuPostJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def folder_menu_post_raw(self, request: bytes) -> operations.FolderMenuPostRawResponse:
        r"""Creates and updates the folder menu items"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/FolderMenu'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FolderMenuPostRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    