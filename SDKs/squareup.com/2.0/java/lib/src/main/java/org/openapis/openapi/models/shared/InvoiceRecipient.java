/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * InvoiceRecipient - Provides customer data that Square uses to deliver an invoice.
 */
public class InvoiceRecipient {
    /**
     * Represents a postal address in a country. The address format is based 
     * on an [open-source library from Google](https://github.com/google/libaddressinput). For more information, 
     * see [AddressValidationMetadata](https://github.com/google/libaddressinput/wiki/AddressValidationMetadata). 
     * This format has dedicated fields for four address components: postal code, 
     * locality (city), administrative district (state, prefecture, or province), and 
     * sublocality (town or village). These components have dedicated fields in the 
     * `Address` object because software sometimes behaves differently based on them. 
     * For example, sales tax software may charge different amounts of sales tax 
     * based on the postal code, and some software is only available in 
     * certain states due to compliance reasons.
     * 
     * For the remaining address components, the `Address` type provides the 
     * `address_line_1` and `address_line_2` fields for free-form data entry. 
     * These fields are free-form because the remaining address components have 
     * too many variations around the world and typical software does not parse 
     * these components. These fields enable users to enter anything they want. 
     * 
     * Note that, in the current implementation, all other `Address` type fields are blank. 
     * These include `address_line_3`, `sublocality_2`, `sublocality_3`, 
     * `administrative_district_level_2`, `administrative_district_level_3`, 
     * `first_name`, `last_name`, and `organization`. 
     * 
     * When it comes to localization, the seller's language preferences 
     * (see [Language preferences](https://developer.squareup.com/docs/locations-api#location-specific-and-seller-level-language-preferences)) 
     * are ignored for addresses. Even though Square products (such as Square Point of Sale 
     * and the Seller Dashboard) mostly use a seller's language preference in 
     * communication, when it comes to addresses, they will use English for a US address, 
     * Japanese for an address in Japan, and so on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    public Address address;
    public InvoiceRecipient withAddress(Address address) {
        this.address = address;
        return this;
    }
    
    /**
     * The name of the recipient's company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    public String companyName;
    public InvoiceRecipient withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }
    
    /**
     * The ID of the customer. This is the customer profile ID that 
     * you provide when creating a draft invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_id")
    public String customerId;
    public InvoiceRecipient withCustomerId(String customerId) {
        this.customerId = customerId;
        return this;
    }
    
    /**
     * The recipient's email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_address")
    public String emailAddress;
    public InvoiceRecipient withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }
    
    /**
     * The recipient's family (that is, last) name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("family_name")
    public String familyName;
    public InvoiceRecipient withFamilyName(String familyName) {
        this.familyName = familyName;
        return this;
    }
    
    /**
     * The recipient's given (that is, first) name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("given_name")
    public String givenName;
    public InvoiceRecipient withGivenName(String givenName) {
        this.givenName = givenName;
        return this;
    }
    
    /**
     * The recipient's phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;
    public InvoiceRecipient withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
}
