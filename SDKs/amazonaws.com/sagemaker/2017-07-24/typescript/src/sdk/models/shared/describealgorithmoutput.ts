/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AlgorithmStatusDetails } from "./algorithmstatusdetails";
import { AlgorithmStatusEnum } from "./algorithmstatusenum";
import { AlgorithmValidationSpecification } from "./algorithmvalidationspecification";
import { InferenceSpecification } from "./inferencespecification";
import { TrainingSpecification } from "./trainingspecification";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeAlgorithmOutput extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AlgorithmArn" })
  algorithmArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AlgorithmDescription" })
  algorithmDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AlgorithmName" })
  algorithmName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "AlgorithmStatus" })
  algorithmStatus: AlgorithmStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "AlgorithmStatusDetails" })
  @Type(() => AlgorithmStatusDetails)
  algorithmStatusDetails: AlgorithmStatusDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "CertifyForMarketplace" })
  certifyForMarketplace?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "InferenceSpecification" })
  @Type(() => InferenceSpecification)
  inferenceSpecification?: InferenceSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "ProductId" })
  productId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TrainingSpecification" })
  @Type(() => TrainingSpecification)
  trainingSpecification: TrainingSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "ValidationSpecification" })
  @Type(() => AlgorithmValidationSpecification)
  validationSpecification?: AlgorithmValidationSpecification;
}
