// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RecurringScheduleFrequencyEnum - Required. The frequency unit of this recurring schedule.
type RecurringScheduleFrequencyEnum string

const (
	RecurringScheduleFrequencyEnumFrequencyUnspecified RecurringScheduleFrequencyEnum = "FREQUENCY_UNSPECIFIED"
	RecurringScheduleFrequencyEnumWeekly               RecurringScheduleFrequencyEnum = "WEEKLY"
	RecurringScheduleFrequencyEnumMonthly              RecurringScheduleFrequencyEnum = "MONTHLY"
	RecurringScheduleFrequencyEnumDaily                RecurringScheduleFrequencyEnum = "DAILY"
)

func (e *RecurringScheduleFrequencyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FREQUENCY_UNSPECIFIED":
		fallthrough
	case "WEEKLY":
		fallthrough
	case "MONTHLY":
		fallthrough
	case "DAILY":
		*e = RecurringScheduleFrequencyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RecurringScheduleFrequencyEnum: %s", s)
	}
}

// RecurringSchedule - Sets the time for recurring patch deployments.
type RecurringSchedule struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime *string `json:"endTime,omitempty"`
	// Required. The frequency unit of this recurring schedule.
	Frequency *RecurringScheduleFrequencyEnum `json:"frequency,omitempty"`
	// Output only. The time the last patch job ran successfully.
	LastExecuteTime *string `json:"lastExecuteTime,omitempty"`
	// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
	Monthly *MonthlySchedule `json:"monthly,omitempty"`
	// Output only. The time the next patch job is scheduled to run.
	NextExecuteTime *string `json:"nextExecuteTime,omitempty"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime *string `json:"startTime,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	TimeOfDay *TimeOfDay `json:"timeOfDay,omitempty"`
	// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	// Represents a weekly schedule.
	Weekly *WeeklySchedule `json:"weekly,omitempty"`
}

// RecurringScheduleInput - Sets the time for recurring patch deployments.
type RecurringScheduleInput struct {
	// Optional. The end time at which a recurring patch deployment schedule is no longer active.
	EndTime *string `json:"endTime,omitempty"`
	// Required. The frequency unit of this recurring schedule.
	Frequency *RecurringScheduleFrequencyEnum `json:"frequency,omitempty"`
	// Represents a monthly schedule. An example of a valid monthly schedule is "on the third Tuesday of the month" or "on the 15th of the month".
	Monthly *MonthlySchedule `json:"monthly,omitempty"`
	// Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.
	StartTime *string `json:"startTime,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	TimeOfDay *TimeOfDay `json:"timeOfDay,omitempty"`
	// Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	// Represents a weekly schedule.
	Weekly *WeeklySchedule `json:"weekly,omitempty"`
}
