"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import characterrules as shared_characterrules
from ..shared import passwordexpiration as shared_passwordexpiration
from ..shared import userinfo as shared_userinfo
from ..shared import userlockout as shared_userlockout
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoginPasswordPolicies:
    r"""Login password policies"""
    
    character_rules: shared_characterrules.CharacterRules = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('characterRules') }})
    r"""Password character rules"""  
    min_length: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minLength') }})
    r"""Minimum number of characters a password must contain"""  
    number_of_archived_passwords: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfArchivedPasswords') }})
    r"""Number of passwords to archive
    
    (must be between `0` and `10`; `0` means that password history is disabled)
    """  
    password_expiration: shared_passwordexpiration.PasswordExpiration = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordExpiration') }})
    r"""Password expiration information"""  
    reject_dictionary_words: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectDictionaryWords') }})
    r"""Determines whether a password must NOT contain word(s) from a dictionary"""  
    reject_keyboard_patterns: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectKeyboardPatterns') }})
    r"""Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)
    
    (min. 4 character pattern)
    """  
    reject_user_info: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rejectUserInfo') }})
    r"""Determines whether a password must NOT contain user info (first name, last name, email, user name)"""  
    updated_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Modification date"""  
    updated_by: shared_userinfo.UserInfo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedBy') }})
    r"""User information"""  
    user_lockout: shared_userlockout.UserLockout = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userLockout') }})
    r"""User lockout information"""  
    