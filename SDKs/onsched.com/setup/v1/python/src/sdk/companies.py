"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Companies:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_setup_v1_companies_domains_id_(self, request: operations.DeleteSetupV1CompaniesDomainsIDRequest) -> operations.DeleteSetupV1CompaniesDomainsIDResponse:
        r"""Delete Company Domain
        <p>Use this endpoint to <b>Delete</b> an OnSchedJs domain from your authorized company. A valid <b>companyDomain id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1CompaniesDomainsIDRequest, base_url, '/setup/v1/companies/domains/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1CompaniesDomainsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyDomainViewModel])
                res.company_domain_view_model = out

        return res

    def delete_setup_v1_companies_email_templates_master(self) -> operations.DeleteSetupV1CompaniesEmailTemplatesMasterResponse:
        r"""Delete Master Template Settings
        <p>Use this endpoint to <b>Delete Custom Master Email Template Settings</b>. Deleting a custom master email template setting will reactivate the original default OnSched template settings.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/email/templates/master'
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1CompaniesEmailTemplatesMasterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MasterEmailTemplateSettingsViewModel])
                res.master_email_template_settings_view_model = out

        return res

    def delete_setup_v1_companies_regions_id_(self, request: operations.DeleteSetupV1CompaniesRegionsIDRequest) -> operations.DeleteSetupV1CompaniesRegionsIDResponse:
        r"""Delete Region
        <p>Use this endpoint to <b>Delete</b> a region object. A valid <b>region id</b> is required. If the region is related to any business locations it won't be deleted. You must first remove any references to region id from the business locations prior to deleting.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1CompaniesRegionsIDRequest, base_url, '/setup/v1/companies/regions/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1CompaniesRegionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionViewModel])
                res.region_view_model = out

        return res

    def get_setup_v1_companies(self) -> operations.GetSetupV1CompaniesResponse:
        r"""Get Company
        <p>Use this endpoint to return the <b>Authorized Company</b> information. The company is the main entity that oversees all business locations defined below it, hierarchically. </p>
        <p>Access to the company credentials gives you access to all business locations defined in the authorized company. Client credentials resolve to a single company and are purposely hidden from this endpoint.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyViewModel])
                res.company_view_model = out

        return res

    def get_setup_v1_companies_domains(self) -> operations.GetSetupV1CompaniesDomainsResponse:
        r"""List Company Domains
        <p>Use this endpoint to return a <b>List of Company Domains</b> for the authorized company. To share the OnSchedJS booking widget on your website or in your application your domain must be listed.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/domains'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyDomainListViewModel])
                res.company_domain_list_view_model = out

        return res

    def get_setup_v1_companies_domains_id_(self, request: operations.GetSetupV1CompaniesDomainsIDRequest) -> operations.GetSetupV1CompaniesDomainsIDResponse:
        r"""Get Company Domain
        <p>Use this endpoint to return a <b>Company Domain</b> object. A valid <b>companyDomain id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CompaniesDomainsIDRequest, base_url, '/setup/v1/companies/domains/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesDomainsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyDomainViewModel])
                res.company_domain_view_model = out

        return res

    def get_setup_v1_companies_email_templates(self) -> operations.GetSetupV1CompaniesEmailTemplatesResponse:
        r"""List Email Templates
        <p>Use this endpoint to return a <b>List of Email Templates</b> that are provided and may be customized. If the template has been customized, the customized property is true. The scope parameter indicates if the email template has been customized at the Business Location level or Company level. This endpoint returns <b>only company level templates</b>, so the scope is always company.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/email/templates'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesEmailTemplatesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EmailTemplateListViewModel])
                res.email_template_list_view_model = out

        return res

    def get_setup_v1_companies_email_templates_master(self) -> operations.GetSetupV1CompaniesEmailTemplatesMasterResponse:
        r"""Get Master Template Settings
        <p>Use this endpoint to return the <b>Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/email/templates/master'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesEmailTemplatesMasterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MasterEmailTemplateSettingsViewModel])
                res.master_email_template_settings_view_model = out

        return res

    def get_setup_v1_companies_email_templates_template_name_(self, request: operations.GetSetupV1CompaniesEmailTemplatesTemplateNameRequest) -> operations.GetSetupV1CompaniesEmailTemplatesTemplateNameResponse:
        r"""Get Email Template
        <p>Use this endpoint to return the requested <b>Email Template</b>. If it wasn't customized the default template is returned. The response content is in html format. A valid emailTemplate <b>name</b> is required. Find template names by using the: <i>GET \u200B/setup\u200B/v1\u200B/companies\u200B/email\u200B/templates</i> endpoint. Note: The master template cannot be accessed here. </p>
        <p>To create custom company email templates, go to the <i>POST \u200B/setup\u200B/v1\u200B/locations\u200B/{id}\u200B/email\u200B/templates</i> endpoint and create a template using the Primary Business Location Id.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CompaniesEmailTemplatesTemplateNameRequest, base_url, '/setup/v1/companies/email/templates/{templateName}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesEmailTemplatesTemplateNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContentResult])
                res.content_result = out

        return res

    def get_setup_v1_companies_regions(self, request: operations.GetSetupV1CompaniesRegionsRequest) -> operations.GetSetupV1CompaniesRegionsResponse:
        r"""List Regions
        <p>Use this endpoint to return a list of <b>Regions</b> in the authorized company. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. </p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/regions'
        
        query_params = utils.get_query_params(operations.GetSetupV1CompaniesRegionsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionListViewModel])
                res.region_list_view_model = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def get_setup_v1_companies_regions_id_(self, request: operations.GetSetupV1CompaniesRegionsIDRequest) -> operations.GetSetupV1CompaniesRegionsIDResponse:
        r"""Get Region
        <p>Use this endpoint to return a <b>Region</b> object. A valid <b>region id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CompaniesRegionsIDRequest, base_url, '/setup/v1/companies/regions/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesRegionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionViewModel])
                res.region_view_model = out

        return res

    def get_setup_v1_companies_timezones_date_(self, request: operations.GetSetupV1CompaniesTimezonesDateRequest) -> operations.GetSetupV1CompaniesTimezonesDateResponse:
        r"""List Time Zones
        <p>Use this endpoint to return a <b>List of timezone names, timezoneIana and tzOffset values</b> calculated for the date requested. Daylight Savings may or may not apply depending on the date specified.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CompaniesTimezonesDateRequest, base_url, '/setup/v1/companies/timezones/{date}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CompaniesTimezonesDateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TimezoneViewModel])
                res.timezone_view_model = out

        return res

    def post_setup_v1_companies(self, request: shared.CompanyInputModel) -> operations.PostSetupV1CompaniesResponse:
        r"""Create Company
        <p>Use this endpoint to <b>Create</b> a new authorized company.</p>
        <p>
          <b>Note: Special API Partner credentials are required to access this endpoint.</b>
        </p>
        <p>The <b>name, registrationEmail, phone, country</b> and <b>timezoneName</b> are required fields. For <b>country</b> use the standard ISO 3166 2-character country code.</p>
        <p>The <b>timezoneName</b> must be expressed as an IANA Timezone e.g., <i>America/New_York</i>.</p>
        <p>For more information: <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Timezone IANA Wiki</a></p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CompaniesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyViewModel])
                res.company_view_model = out

        return res

    def post_setup_v1_companies_domains(self, request: shared.CompanyDomainInputModel) -> operations.PostSetupV1CompaniesDomainsResponse:
        r"""Create Company Domain
        <p>Use this endpoint to <b>Create</b> an OnSchedJs domain for your authorized company. To share the OnSchedJS booking widget on your website or in your application you must add the domain.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/domains'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CompaniesDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyDomainViewModel])
                res.company_domain_view_model = out

        return res

    def post_setup_v1_companies_email_templates_master(self, request: shared.MasterTemplateSettingsInputModel) -> operations.PostSetupV1CompaniesEmailTemplatesMasterResponse:
        r"""Create Master Template Settings
        <p>Use this endpoint to <b>Create Custom Master Email Template Settings</b>. Settings exist for showing or hiding email panels and for changing color schemes. Use the <i>GET \u200B/setup\u200B/v1\u200B/companies\u200B/email\u200B/templates</i> endpoint to display the settings offered. Changes to the Master Template Settings will be reflected in all business locations associated with this company. </p>
        <p>The email template endpoints work a little differently than most. There are no endpoints to update the templates, we use the post endpoint to create a custom template instead. This endpoint creates a new custom Master Template Settings file that will be used instead. If you delete it you are deleting the custom template settings you created and the original default Master Template created by OnSched would be reactivated.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/email/templates/master'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CompaniesEmailTemplatesMasterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MasterEmailTemplateSettingsViewModel])
                res.master_email_template_settings_view_model = out

        return res

    def post_setup_v1_companies_regions(self, request: shared.RegionInputModel) -> operations.PostSetupV1CompaniesRegionsResponse:
        r"""Create Region
        <p>Use this endpoint to <b>Create</b> a region object. Regions can be mapped to business locations. They can be used by the locations endpoints to filter locations by region id.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies/regions'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1CompaniesRegionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionViewModel])
                res.region_view_model = out

        return res

    def put_setup_v1_companies(self, request: shared.CompanyUpdateModel) -> operations.PutSetupV1CompaniesResponse:
        r"""Update Company
        <p>Use this endpoint to <b>Update</b> the authorized company information. Your client credentials resolve to a single company. The timezoneName must be expressed as an IANA Timezone, e.g., <i>America/New_York</i>. </p>
        <p>For more information: <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Timezone IANA Wiki</a></p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/companies'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CompaniesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyViewModel])
                res.company_view_model = out

        return res

    def put_setup_v1_companies_domains_id_(self, request: operations.PutSetupV1CompaniesDomainsIDRequest) -> operations.PutSetupV1CompaniesDomainsIDResponse:
        r"""Update Company Domain
        <p>Use this endpoint to <b>Update</b> an OnSchedJs domain for your authorized company. A valid <b>companyDomain id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1CompaniesDomainsIDRequest, base_url, '/setup/v1/companies/domains/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "company_domain_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CompaniesDomainsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyDomainViewModel])
                res.company_domain_view_model = out

        return res

    def put_setup_v1_companies_regions_id_(self, request: operations.PutSetupV1CompaniesRegionsIDRequest) -> operations.PutSetupV1CompaniesRegionsIDResponse:
        r"""Update Region
        <p>Use this endpoint to <b>Update</b> a region object. A valid <b>region id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1CompaniesRegionsIDRequest, base_url, '/setup/v1/companies/regions/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "region_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1CompaniesRegionsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RegionViewModel])
                res.region_view_model = out

        return res

    