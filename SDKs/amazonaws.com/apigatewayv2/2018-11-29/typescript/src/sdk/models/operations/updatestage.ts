/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Settings for logging access in a stage.
 */
export class UpdateStageRequestBodyAccessLogSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationArn" })
  destinationArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Format" })
  format?: string;
}

/**
 * Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
 */
export enum UpdateStageRequestBodyDefaultRouteSettingsLoggingLevelEnum {
  Error = "ERROR",
  Info = "INFO",
  Off = "OFF",
}

/**
 * Represents a collection of route settings.
 */
export class UpdateStageRequestBodyDefaultRouteSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DataTraceEnabled" })
  dataTraceEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DetailedMetricsEnabled" })
  detailedMetricsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "LoggingLevel" })
  loggingLevel?: UpdateStageRequestBodyDefaultRouteSettingsLoggingLevelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ThrottlingBurstLimit" })
  throttlingBurstLimit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ThrottlingRateLimit" })
  throttlingRateLimit?: number;
}

export class UpdateStageRequestBody extends SpeakeasyBase {
  /**
   * Settings for logging access in a stage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accessLogSettings" })
  @Type(() => UpdateStageRequestBodyAccessLogSettings)
  accessLogSettings?: UpdateStageRequestBodyAccessLogSettings;

  /**
   * Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoDeploy" })
  autoDeploy?: boolean;

  /**
   * The identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientCertificateId" })
  clientCertificateId?: string;

  /**
   * Represents a collection of route settings.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "defaultRouteSettings" })
  @Type(() => UpdateStageRequestBodyDefaultRouteSettings)
  defaultRouteSettings?: UpdateStageRequestBodyDefaultRouteSettings;

  /**
   * The identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deploymentId" })
  deploymentId?: string;

  /**
   * A string with a length between [0-1024].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The route settings map.
   */
  @SpeakeasyMetadata({ elemType: shared.RouteSettings })
  @Expose({ name: "routeSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.RouteSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.RouteSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  routeSettings?: Record<string, shared.RouteSettings>;

  /**
   * The stage variable map.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stageVariables" })
  stageVariables?: Record<string, string>;
}

export class UpdateStageRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateStageRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=stageName",
  })
  stageName: string;
}

export class UpdateStageResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateStageResponse?: shared.UpdateStageResponse;
}
