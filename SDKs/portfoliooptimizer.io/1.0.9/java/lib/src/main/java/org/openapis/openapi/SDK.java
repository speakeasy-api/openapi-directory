/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * Portfolio Optimizer is a [Web API](https://en.wikipedia.org/wiki/Web_API) to analyze and optimize investment portfolios (collection of financial assets such as stocks, bonds, ETFs, crypto-currencies) using modern portfolio theory algorithms (mean-variance, VaR, etc.).
 * 
 * # API General Information
 * 
 *   Portfolio Optimizer is based on [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) for easy integration, uses [JSON](https://en.wikipedia.org/wiki/JSON) for the exchange of data and uses a standard [HTTP verb](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods) (`POST`) to represent the action(s).
 * 
 * Portfolio Optimizer is also as secured as a Web API could be: 
 * * [256-bit HTTPS Encryption](https://en.wikipedia.org/wiki/HTTPS)
 * * No usage of cookies
 * * No usage of personal data  
 * 
 * ## API Headers 
 * The following HTTP header(s) are required when calling Portfolio Optimizer endpoints:
 * * `Content-type: application/json`  
 *   This header specifies that the data provided in input to the endpoint is in JSON format
 * 
 * The following HTTP header(s) are optional when calling Portfolio Optimizer endpoints:
 * * `Content-Encoding: gzip`  
 *   This header indicates that the data provided in input to the endpoint is compressed with gzip.
 * * `X-API-Key: &lt;private API key&gt;`  
 *   This header enables [authenticated users](#auth) to provide their private [API key](#overview--api-key) in order to [benefit from higher API limits](#overview--api-limits)
 * 
 * ## API Key
 * Portfolio Optimizer is free to use, but not free to run.
 * 
 * In order to obtain an API key and benefit from [higher API limits](#overview--api-limits), a *small* participation to Portfolio Optimizer running costs is required.
 * 
 * This participation takes the form of coffee(s), with one coffee = one month of usage.
 * 
 * &lt;p&gt;&lt;a href="https://www.buymeacoffee.com/portfolioopt"&gt;&lt;img alt='Buy a Coffee at buymeacoffee.com' src="https://img.buymeacoffee.com/button-api/?text=Buymeacoffee.com&amp;emoji=&amp;slug=portfolioopt&amp;button_colour=000000&amp;font_colour=ffffff&amp;font_family=Cookie&amp;outline_colour=ffffff&amp;coffee_colour=FFDD00"&gt;&lt;/a&gt;&lt;/p&gt;
 * 
 * 
 * &gt; **Notes:** 
 * &gt; * Please make sure not to expose your API key publicly!
 * 
 * ## API Limits 
 * 
 * Portfolio Optimizer comes with *fairly reasonable* API limits.
 * 
 * For anonymous users:  
 * * The API requests are restricted to a subset of all the available endpoints and/or endpoints features  
 * * The API requests are limited to 1 request per second for all the anonymous users combined, with concurrent requests rejected 
 * * The API requests are limited to 1 second of execution time
 * * The API requests are limited to 20 assets, 250 portfolios, 500 series data points and 5 factors
 * 
 * For authenticated users with an [API key](#overview--api-key):  
 * * The API requests have access to all the available endpoints and endpoints features
 * * The API requests are limited to 10000 requests per 24 hour per API key, with concurrent requests queued
 * * The API requests are limited to 2.5 seconds of execution time
 * * The API requests are limited to 100 assets, 1250 portfolios, 2500 series data points and 25 factors
 * 
 * &gt; **Notes:** 
 * &gt; * It is possible to further relax the API limits, or to disable the API limits alltogether; please [contact the support](https://portfoliooptimizer.io/contact/) for more details.
 * &gt; * Information on the API rate limits are provided in response messages HTTP headers `x-ratelimit-*`:  
 * &gt;   * `x-ratelimit-limit-second`, the limit on the number of API requests per second
 * &gt;   * `x-ratelimit-remaining-second`, the number of remaining API requests in the current second    
 * &gt;   * `x-ratelimit-limit-minute`, the limit on the number of API requests per minute
 * &gt;   * ...
 * 
 * ## API Regions
 * Portfolio Optimizer servers are located in Western Europe.
 * 
 * &gt; **Notes:** 
 * &gt; * It is possible to deploy Portfolio Optimizer in other geographical regions, for example to improve the API latency; please [contact the support](https://portfoliooptimizer.io/contact/) for more details. 
 * 
 * ## API Response Codes       
 * 
 * Standard [HTTP response codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) are used by Portfolio Optimizer to provide details on the status of API requests.
 * 
 * | HTTP Code | Description | Notes |
 * | --------- | ----------- | ----- |
 * | 200 | Request successfully processed | - |
 * | 400 | Request failed to be processed because of incorrect content | The response message body contains information on the incorrect content |
 * | 401 | Request failed to be processed because of invalid API key | - |
 * | 404 | Request failed to be processed because of non existing endpoint | The requested endpoint might exist, but needs to be accessed with another HTTP method (e.g., `POST` instead of `GET`) |
 * | 429 | Request failed to be processed because of API limits violated | The response message HTTP headers `x-ratelimit-*` contain information on the [API limits](#overview--api-limits) |
 * | 500 | Request failed to be processed because of an internal error | Something went wrong on Portfolio Optimizer side, do not hesitate to [report the issue](#overview--support) |
 * | 502 | Request failed to be processed because of a temporary connectivity error | Something went wrong on Portfolio Optimizer side, please check the [API status](#overview--api-status) and do not hesitate to [report the issue](#overview--support) |
 * 
 * ## API Status  
 * 
 * Portfolio Optimizer is monitored 24/7 by [UptimeRobot](https://stats.uptimerobot.com/wgW71SL1AW).
 * 
 * # Support
 * 
 * For any issue or question about Portfolio Optimizer, please do not hesitate to [contact the support](https://portfoliooptimizer.io/contact/).
 * 
 * https://docs.portfoliooptimizer.io/ - External documentation
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.portfoliooptimizer.io/v1",
        "https://eu-west-1.api.portfoliooptimizer.io/v1",
	};
  	
    public AssetsAnalysis assetsAnalysis;
    public AssetsCorrelationMatrix assetsCorrelationMatrix;
    public AssetsCovarianceMatrix assetsCovarianceMatrix;
    public AssetsKurtosis assetsKurtosis;
    public AssetsMonteCarloReturnsSimulation assetsMonteCarloReturnsSimulation;
    public AssetsPrices assetsPrices;
    public AssetsReturns assetsReturns;
    public AssetsReturnsSimulation assetsReturnsSimulation;
    public AssetsSkewness assetsSkewness;
    public AssetsVariance assetsVariance;
    public AssetsVolatility assetsVolatility;
    public Factors factors;
    public PortfolioAnalysis portfolioAnalysis;
    public PortfolioAnalysisConditionalValueAtRisk portfolioAnalysisConditionalValueAtRisk;
    public PortfolioAnalysisSharpeRatio portfolioAnalysisSharpeRatio;
    public PortfolioAnalysisValueAtRisk portfolioAnalysisValueAtRisk;
    public PortfolioConstruction portfolioConstruction;
    public PortfolioOptimization portfolioOptimization;
    public PortfolioOptimizationMeanVariance portfolioOptimizationMeanVariance;
    public PortfolioSimulation portfolioSimulation;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private org.openapis.openapi.models.shared.Security _security;
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		private org.openapis.openapi.models.shared.Security security;
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Configures the SDK to use the provided security details.
		 * @param security The security details to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setSecurity(org.openapis.openapi.models.shared.Security security) {
			this.security = security;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.security, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, org.openapis.openapi.models.shared.Security security, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (security != null) {
			this._security = security;
			this._securityClient = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, this._security);
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
		
		this.assetsAnalysis = new AssetsAnalysis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsCorrelationMatrix = new AssetsCorrelationMatrix(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsCovarianceMatrix = new AssetsCovarianceMatrix(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsKurtosis = new AssetsKurtosis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsMonteCarloReturnsSimulation = new AssetsMonteCarloReturnsSimulation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsPrices = new AssetsPrices(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsReturns = new AssetsReturns(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsReturnsSimulation = new AssetsReturnsSimulation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsSkewness = new AssetsSkewness(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsVariance = new AssetsVariance(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.assetsVolatility = new AssetsVolatility(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.factors = new Factors(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioAnalysis = new PortfolioAnalysis(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioAnalysisConditionalValueAtRisk = new PortfolioAnalysisConditionalValueAtRisk(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioAnalysisSharpeRatio = new PortfolioAnalysisSharpeRatio(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioAnalysisValueAtRisk = new PortfolioAnalysisValueAtRisk(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioConstruction = new PortfolioConstruction(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioOptimization = new PortfolioOptimization(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioOptimizationMeanVariance = new PortfolioOptimizationMeanVariance(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.portfolioSimulation = new PortfolioSimulation(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}