"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import conference_enum_conference_end_reason_enum as shared_conference_enum_conference_end_reason_enum
from ..shared import conference_enum_conference_status_enum as shared_conference_enum_conference_status_enum
from ..shared import conference_enum_processing_state_enum as shared_conference_enum_processing_state_enum
from ..shared import conference_enum_region_enum as shared_conference_enum_region_enum
from ..shared import conference_enum_tag_enum as shared_conference_enum_tag_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InsightsV1Conference:
    r"""OK"""
    
    account_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_sid'), 'exclude': lambda f: f is None }})
    r"""The unique SID identifier of the Account."""  
    conference_sid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conference_sid'), 'exclude': lambda f: f is None }})
    r"""The unique SID identifier of the Conference."""  
    connect_duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connect_duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Duration of the between conference start event and conference end event in seconds."""  
    create_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Conference creation date and time in ISO 8601 format."""  
    detected_issues: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detected_issues'), 'exclude': lambda f: f is None }})
    r"""Potential issues detected by Twilio during the conference."""  
    duration_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration_seconds'), 'exclude': lambda f: f is None }})
    r"""Conference duration in seconds."""  
    end_reason: Optional[shared_conference_enum_conference_end_reason_enum.ConferenceEnumConferenceEndReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_reason'), 'exclude': lambda f: f is None }})  
    end_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Conference end date and time in ISO 8601 format."""  
    ended_by: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ended_by'), 'exclude': lambda f: f is None }})
    r"""Call SID of the participant whose actions ended the conference."""  
    friendly_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('friendly_name'), 'exclude': lambda f: f is None }})
    r"""Custom label for the conference resource, up to 64 characters."""  
    links: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})
    r"""Contains a dictionary of URL links to nested resources of this Conference."""  
    max_concurrent_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_concurrent_participants'), 'exclude': lambda f: f is None }})
    r"""Actual maximum number of concurrent participants in the conference."""  
    max_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_participants'), 'exclude': lambda f: f is None }})
    r"""Maximum number of concurrent participants as specified by the configuration."""  
    mixer_region: Optional[shared_conference_enum_region_enum.ConferenceEnumRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mixer_region'), 'exclude': lambda f: f is None }})  
    mixer_region_requested: Optional[shared_conference_enum_region_enum.ConferenceEnumRegionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mixer_region_requested'), 'exclude': lambda f: f is None }})  
    processing_state: Optional[shared_conference_enum_processing_state_enum.ConferenceEnumProcessingStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('processing_state'), 'exclude': lambda f: f is None }})  
    recording_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean. Indicates whether recording was enabled at the conference mixer."""  
    start_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true."""  
    status: Optional[shared_conference_enum_conference_status_enum.ConferenceEnumConferenceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    tag_info: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag_info'), 'exclude': lambda f: f is None }})
    r"""Object. Contains details about conference tags including severity."""  
    tags: Optional[list[shared_conference_enum_tag_enum.ConferenceEnumTagEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""Tags for detected conference conditions and participant behaviors which may be of interest."""  
    unique_participants: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unique_participants'), 'exclude': lambda f: f is None }})
    r"""Unique conference participants based on caller ID."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    r"""The URL of this resource."""  
    