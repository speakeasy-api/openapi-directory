<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SSHKeys 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create a new SSH Key
     * 
     * Create a new SSH Key for a user. Provide the Public Key as formatted from the ssh-keygen command (openssh format or RFC-4716 format).
     * 
     * If you'd prefer to let us generate your key automatically, you can log in to your account via the web portal and set up new keys via the SSH Keys page. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddSSHKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AddSSHKeyResponse
     */
	public function addSSHKey(
        \OpenAPI\OpenAPI\Models\Operations\AddSSHKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AddSSHKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh-keys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddSSHKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SSHKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an SSH Key
     * 
     * Delete the specified SSH key. This will not delete or deactivate the user tied to the key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyResponse
     */
	public function deleteSSHKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh-keys/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSSHKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get metadata for an SSH Key
     * 
     * Return the information for a single SSH Key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyResponse
     */
	public function getSSHKey(
        \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh-keys/{id}', \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSSHKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SSHKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get metadata for a list of SSH Keys
     * 
     * Returns a list of SSH Keys within the account. Can be filtered for a single user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListResponse
     */
	public function getSSHKeysList(
        \OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ssh-keys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSSHKeysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sshKeyCollectionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SSHKeyCollectionResponse', 'json');
            }
        }

        return $response;
    }
}