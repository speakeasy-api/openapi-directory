"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import naplace as shared_naplace
from ..shared import nathermostat as shared_nathermostat
from ..shared import nayearmonth as shared_nayearmonth
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NAPlug:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_id'), 'exclude': lambda f: f is None }})  
    firmware: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firmware'), 'exclude': lambda f: f is None }})  
    last_bilan: Optional[shared_nayearmonth.NAYearMonth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_bilan'), 'exclude': lambda f: f is None }})  
    last_plug_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_plug_seen'), 'exclude': lambda f: f is None }})  
    last_status_store: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_status_store'), 'exclude': lambda f: f is None }})  
    modules: Optional[list[shared_nathermostat.NAThermostat]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modules'), 'exclude': lambda f: f is None }})  
    place: Optional[shared_naplace.NAPlace] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('place'), 'exclude': lambda f: f is None }})  
    plug_connected_boiler: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('plug_connected_boiler'), 'exclude': lambda f: f is None }})  
    station_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('station_name'), 'exclude': lambda f: f is None }})  
    syncing: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('syncing'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Included in every device or module. It defines the type of the device/module. Its values are among :
    NAMain : for the base station
    NAModule1 : for the outdoor module
    NAModule4 : for the additionnal indoor module
    NAModule3 : for the rain gauge module
    NAPlug : for the thermostat relay/plug
    NATherm1 : for the thermostat module
    """  
    udp_conn: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('udp_conn'), 'exclude': lambda f: f is None }})  
    wifi_status: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifi_status'), 'exclude': lambda f: f is None }})
    r"""It contains the current wifi status. The different thresholds to take into account are
    RSSI_THRESHOLD_0 = 86 bad signal
    RSSI_THRESHOLD_1 = 71 middle quality signal
    RSSI_THRESHOLD_2 = 56 good signal
    """  
    