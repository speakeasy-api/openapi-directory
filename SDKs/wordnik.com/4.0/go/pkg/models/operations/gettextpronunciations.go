// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetTextPronunciationsSourceDictionaryEnum - Get from a single dictionary
type GetTextPronunciationsSourceDictionaryEnum string

const (
	GetTextPronunciationsSourceDictionaryEnumAhd5       GetTextPronunciationsSourceDictionaryEnum = "ahd-5"
	GetTextPronunciationsSourceDictionaryEnumCentury    GetTextPronunciationsSourceDictionaryEnum = "century"
	GetTextPronunciationsSourceDictionaryEnumCmu        GetTextPronunciationsSourceDictionaryEnum = "cmu"
	GetTextPronunciationsSourceDictionaryEnumMacmillan  GetTextPronunciationsSourceDictionaryEnum = "macmillan"
	GetTextPronunciationsSourceDictionaryEnumWiktionary GetTextPronunciationsSourceDictionaryEnum = "wiktionary"
	GetTextPronunciationsSourceDictionaryEnumWebster    GetTextPronunciationsSourceDictionaryEnum = "webster"
	GetTextPronunciationsSourceDictionaryEnumWordnet    GetTextPronunciationsSourceDictionaryEnum = "wordnet"
)

func (e *GetTextPronunciationsSourceDictionaryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ahd-5":
		fallthrough
	case "century":
		fallthrough
	case "cmu":
		fallthrough
	case "macmillan":
		fallthrough
	case "wiktionary":
		fallthrough
	case "webster":
		fallthrough
	case "wordnet":
		*e = GetTextPronunciationsSourceDictionaryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTextPronunciationsSourceDictionaryEnum: %s", s)
	}
}

// GetTextPronunciationsTypeFormatEnum - Text pronunciation type
type GetTextPronunciationsTypeFormatEnum string

const (
	GetTextPronunciationsTypeFormatEnumAhd5             GetTextPronunciationsTypeFormatEnum = "ahd-5"
	GetTextPronunciationsTypeFormatEnumArpabet          GetTextPronunciationsTypeFormatEnum = "arpabet"
	GetTextPronunciationsTypeFormatEnumGcideDiacritical GetTextPronunciationsTypeFormatEnum = "gcide-diacritical"
	GetTextPronunciationsTypeFormatEnumIpa              GetTextPronunciationsTypeFormatEnum = "IPA"
)

func (e *GetTextPronunciationsTypeFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ahd-5":
		fallthrough
	case "arpabet":
		fallthrough
	case "gcide-diacritical":
		fallthrough
	case "IPA":
		*e = GetTextPronunciationsTypeFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTextPronunciationsTypeFormatEnum: %s", s)
	}
}

// GetTextPronunciationsUseCanonicalEnum - If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
type GetTextPronunciationsUseCanonicalEnum string

const (
	GetTextPronunciationsUseCanonicalEnumFalse GetTextPronunciationsUseCanonicalEnum = "false"
	GetTextPronunciationsUseCanonicalEnumTrue  GetTextPronunciationsUseCanonicalEnum = "true"
)

func (e *GetTextPronunciationsUseCanonicalEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = GetTextPronunciationsUseCanonicalEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTextPronunciationsUseCanonicalEnum: %s", s)
	}
}

type GetTextPronunciationsRequest struct {
	// Maximum number of results to return
	Limit *int `queryParam:"style=form,explode=true,name=limit"`
	// Get from a single dictionary
	SourceDictionary *GetTextPronunciationsSourceDictionaryEnum `queryParam:"style=form,explode=true,name=sourceDictionary"`
	// Text pronunciation type
	TypeFormat *GetTextPronunciationsTypeFormatEnum `queryParam:"style=form,explode=true,name=typeFormat"`
	// If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.
	UseCanonical *GetTextPronunciationsUseCanonicalEnum `queryParam:"style=form,explode=true,name=useCanonical"`
	// Word to get pronunciations for
	Word string `pathParam:"style=simple,explode=false,name=word"`
}

type GetTextPronunciationsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
