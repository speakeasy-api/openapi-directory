/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class APIs {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Class XII Passing Certificate
   *
   * @remarks
   * API to verify Class XII Passing Certificate.
   */
  hpcer(
    req: operations.HpcerRequestBody,
    security: operations.HpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hpcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HpcerResponse = new operations.HpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hpcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hpcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class XII Marksheet
   *
   * @remarks
   * API to verify Class XII Marksheet.
   */
  hscer(
    req: operations.HscerRequestBody,
    security: operations.HscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.HscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.HscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/hscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.HscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HscerResponse = new operations.HscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.hscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Hscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Passing Certificate
   *
   * @remarks
   * API to verify Class X Passing Certificate.
   */
  spcer(
    req: operations.SpcerRequestBody,
    security: operations.SpcerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SpcerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SpcerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/spcer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SpcerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SpcerResponse = new operations.SpcerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.spcer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Spcer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Class X Marksheet
   *
   * @remarks
   * API to verify Class X Marksheet.
   */
  sscer(
    req: operations.SscerRequestBody,
    security: operations.SscerSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SscerResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SscerRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/sscer/certificate";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SscerSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SscerResponse = new operations.SscerResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer500ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 502:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer502ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer502ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 503:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer503ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer503ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 504:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sscer504ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Sscer504ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
