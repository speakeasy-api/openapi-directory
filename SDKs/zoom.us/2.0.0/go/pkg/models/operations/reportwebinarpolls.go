// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type ReportWebinarPollsSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type ReportWebinarPollsPathParams struct {
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

type ReportWebinarPollsRequest struct {
	PathParams ReportWebinarPollsPathParams
	Security   ReportWebinarPollsSecurity
}

type ReportWebinarPolls200ApplicationXMLQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time
	// Unique identifier of the poll.
	PollingID *string
	// Asked question.
	Question *string
}

type ReportWebinarPolls200ApplicationXMLQuestions struct {
	// Participant email.
	Email *string
	// Participant display name.<br><br> If the poll was created as an anonymous poll, participant's information will remain anonymous and the value of the `name` field will be "Anonymous Attendee".
	Name *string
	// Array of questions from user.
	QuestionDetails []ReportWebinarPolls200ApplicationXMLQuestionsQuestionDetails
}

// ReportWebinarPolls200ApplicationXML - **HTTP Status Code:** `200`<br>
// Webinar polls report returned.<br>
// Missing webinar subscription plan.<br>
// This is only available for paid account:{accountId}.
type ReportWebinarPolls200ApplicationXML struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64
	// Array of webinar question objects.
	Questions []ReportWebinarPolls200ApplicationXMLQuestions
	// Webinar start time.
	StartTime *time.Time
	// Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string
}

type ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails struct {
	// Given answer.
	Answer *string `json:"answer,omitempty"`
	// Date and time at which the answer to the poll was submitted.
	DateTime *time.Time `json:"date_time,omitempty"`
	// Unique identifier of the poll.
	PollingID *string `json:"polling_id,omitempty"`
	// Asked question.
	Question *string `json:"question,omitempty"`
}

type ReportWebinarPolls200ApplicationJSONQuestions struct {
	// Participant email.
	Email *string `json:"email,omitempty"`
	// Participant display name.<br><br> If the poll was created as an anonymous poll, participant's information will remain anonymous and the value of the `name` field will be "Anonymous Attendee".
	Name *string `json:"name,omitempty"`
	// Array of questions from user.
	QuestionDetails []ReportWebinarPolls200ApplicationJSONQuestionsQuestionDetails `json:"question_details,omitempty"`
}

// ReportWebinarPolls200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Webinar polls report returned.<br>
// Missing webinar subscription plan.<br>
// This is only available for paid account:{accountId}.
type ReportWebinarPolls200ApplicationJSON struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID *int64 `json:"id,omitempty"`
	// Array of webinar question objects.
	Questions []ReportWebinarPolls200ApplicationJSONQuestions `json:"questions,omitempty"`
	// Webinar start time.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Webinar UUID. Each webinar instance will generate its own UUID(i.e., after a Webinar ends, a new UUID will be generated for the next instance of the Webinar). Please double encode your UUID when using it for API calls if the UUID begins with a '/' or contains '//' in it.
	UUID *string `json:"uuid,omitempty"`
}

type ReportWebinarPollsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Webinar polls report returned.<br>
	// Missing webinar subscription plan.<br>
	// This is only available for paid account:{accountId}.
	ReportWebinarPolls200ApplicationJSONObject *ReportWebinarPolls200ApplicationJSON
}
