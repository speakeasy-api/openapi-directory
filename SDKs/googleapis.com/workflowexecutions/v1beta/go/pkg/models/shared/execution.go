// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ExecutionCallLogLevelEnum - The call logging level associated to this execution.
type ExecutionCallLogLevelEnum string

const (
	ExecutionCallLogLevelEnumCallLogLevelUnspecified ExecutionCallLogLevelEnum = "CALL_LOG_LEVEL_UNSPECIFIED"
	ExecutionCallLogLevelEnumLogAllCalls             ExecutionCallLogLevelEnum = "LOG_ALL_CALLS"
	ExecutionCallLogLevelEnumLogErrorsOnly           ExecutionCallLogLevelEnum = "LOG_ERRORS_ONLY"
)

func (e *ExecutionCallLogLevelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CALL_LOG_LEVEL_UNSPECIFIED":
		fallthrough
	case "LOG_ALL_CALLS":
		fallthrough
	case "LOG_ERRORS_ONLY":
		*e = ExecutionCallLogLevelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionCallLogLevelEnum: %s", s)
	}
}

// ExecutionStateEnum - Output only. Current state of the execution.
type ExecutionStateEnum string

const (
	ExecutionStateEnumStateUnspecified ExecutionStateEnum = "STATE_UNSPECIFIED"
	ExecutionStateEnumActive           ExecutionStateEnum = "ACTIVE"
	ExecutionStateEnumSucceeded        ExecutionStateEnum = "SUCCEEDED"
	ExecutionStateEnumFailed           ExecutionStateEnum = "FAILED"
	ExecutionStateEnumCancelled        ExecutionStateEnum = "CANCELLED"
)

func (e *ExecutionStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "SUCCEEDED":
		fallthrough
	case "FAILED":
		fallthrough
	case "CANCELLED":
		*e = ExecutionStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ExecutionStateEnum: %s", s)
	}
}

// Execution - A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).
type Execution struct {
	// Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
	Argument *string `json:"argument,omitempty"`
	// The call logging level associated to this execution.
	CallLogLevel *ExecutionCallLogLevelEnum `json:"callLogLevel,omitempty"`
	// Output only. Marks the end of execution, successful or not.
	EndTime *string `json:"endTime,omitempty"`
	// Error describes why the execution was abnormally terminated.
	Error *Error `json:"error,omitempty"`
	// Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
	Name *string `json:"name,omitempty"`
	// Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.
	Result *string `json:"result,omitempty"`
	// Output only. Marks the beginning of execution.
	StartTime *string `json:"startTime,omitempty"`
	// Output only. Current state of the execution.
	State *ExecutionStateEnum `json:"state,omitempty"`
	// Represents the current status of this execution.
	Status *Status `json:"status,omitempty"`
	// Output only. Revision of the workflow this execution is using.
	WorkflowRevisionID *string `json:"workflowRevisionId,omitempty"`
}

// ExecutionInput - A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).
type ExecutionInput struct {
	// Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
	Argument *string `json:"argument,omitempty"`
	// The call logging level associated to this execution.
	CallLogLevel *ExecutionCallLogLevelEnum `json:"callLogLevel,omitempty"`
	// Error describes why the execution was abnormally terminated.
	Error *Error `json:"error,omitempty"`
	// Represents the current status of this execution.
	Status *Status `json:"status,omitempty"`
}
