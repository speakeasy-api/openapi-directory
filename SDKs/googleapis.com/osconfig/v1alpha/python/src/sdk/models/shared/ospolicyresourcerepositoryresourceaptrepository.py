"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeEnum(str, Enum):
    r"""Required. Type of archive files in this repository."""
    ARCHIVE_TYPE_UNSPECIFIED = 'ARCHIVE_TYPE_UNSPECIFIED'
    DEB = 'DEB'
    DEB_SRC = 'DEB_SRC'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OSPolicyResourceRepositoryResourceAptRepository:
    r"""Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`."""
    
    archive_type: Optional[OSPolicyResourceRepositoryResourceAptRepositoryArchiveTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('archiveType'), 'exclude': lambda f: f is None }})
    r"""Required. Type of archive files in this repository."""  
    components: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('components'), 'exclude': lambda f: f is None }})
    r"""Required. List of components for this repository. Must contain at least one item."""  
    distribution: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distribution'), 'exclude': lambda f: f is None }})
    r"""Required. Distribution of this repository."""  
    gpg_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gpgKey'), 'exclude': lambda f: f is None }})
    r"""URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""Required. URI for this repository."""  
    