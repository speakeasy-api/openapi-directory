"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import finding as shared_finding
from ..shared import findingseverity_enum as shared_findingseverity_enum
from ..shared import findingstate_enum as shared_findingstate_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetTargetsTargetIDFindingsRequest:
    
    target_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'target_id', 'style': 'simple', 'explode': False }})
    r"""Target id"""  
    assignee: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'assignee', 'style': 'form', 'explode': True }})
    r"""Filter by assignee ids"""  
    label: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'label', 'style': 'form', 'explode': True }})
    r"""Filter by finding labels"""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'length', 'style': 'form', 'explode': True }})
    r"""Number of results to return per page"""  
    ordering: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ordering', 'style': 'form', 'explode': True }})
    r"""Which field to use when ordering the results, prefix with `-` to invert ordering."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number within the paginated result set"""  
    scan: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'scan', 'style': 'form', 'explode': True }})
    r"""Filter by scan ids"""  
    search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'search', 'style': 'form', 'explode': True }})
    r"""Search term"""  
    severity: Optional[shared_findingseverity_enum.FindingSeverityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'severity', 'style': 'form', 'explode': True }})
    r"""Filter by finding severity"""  
    state: Optional[shared_findingstate_enum.FindingStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""Filter by finding states"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTargetsTargetIDFindings404ApplicationJSON:
    r"""Not found"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""Not found."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTargetsTargetIDFindings401ApplicationJSON:
    r"""Access token is missing or invalid"""
    
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetTargetsTargetIDFindings200ApplicationJSON:
    r"""Finding list"""
    
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Number of objects in the response."""  
    length: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length'), 'exclude': lambda f: f is None }})
    r"""Number of objects per page."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})
    r"""Current page."""  
    page_total: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_total'), 'exclude': lambda f: f is None }})
    r"""Number of pages."""  
    results: Optional[list[shared_finding.Finding]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    r"""Finding objects."""  
    

@dataclasses.dataclass
class GetTargetsTargetIDFindingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_targets_target_id_findings_200_application_json_object: Optional[GetTargetsTargetIDFindings200ApplicationJSON] = dataclasses.field(default=None)
    r"""Finding list"""  
    get_targets_target_id_findings_401_application_json_object: Optional[GetTargetsTargetIDFindings401ApplicationJSON] = dataclasses.field(default=None)
    r"""Access token is missing or invalid"""  
    get_targets_target_id_findings_404_application_json_object: Optional[GetTargetsTargetIDFindings404ApplicationJSON] = dataclasses.field(default=None)
    r"""Not found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    