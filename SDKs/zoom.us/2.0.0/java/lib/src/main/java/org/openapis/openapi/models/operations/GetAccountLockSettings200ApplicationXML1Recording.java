/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



public class GetAccountLockSettings200ApplicationXML1Recording {
    /**
     * Make cloud recordings accessible to account members only.
     */
    
    public Boolean accountUserAccessRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withAccountUserAccessRecording(Boolean accountUserAccessRecording) {
        this.accountUserAccessRecording = accountUserAccessRecording;
        return this;
    }
    
    /**
     * Allow Zoom to automatically delete recordings permanently after a specified number of days.
     */
    
    public Boolean autoDeleteCmr;
    public GetAccountLockSettings200ApplicationXML1Recording withAutoDeleteCmr(Boolean autoDeleteCmr) {
        this.autoDeleteCmr = autoDeleteCmr;
        return this;
    }
    
    /**
     * Record meetings automatically as they start.
     */
    
    public String autoRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withAutoRecording(String autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Allow hosts to record and save the meeting / webinar in the cloud.
     */
    
    public Boolean cloudRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withCloudRecording(Boolean cloudRecording) {
        this.cloudRecording = cloudRecording;
        return this;
    }
    
    /**
     * Allow anyone with a link to the cloud recording to download.
     */
    
    public Boolean cloudRecordingDownload;
    public GetAccountLockSettings200ApplicationXML1Recording withCloudRecordingDownload(Boolean cloudRecordingDownload) {
        this.cloudRecordingDownload = cloudRecordingDownload;
        return this;
    }
    
    /**
     * Allow the host to delete the recordings. If this option is disabled, the recordings cannot be deleted by the host and only admin can delete them.
     */
    
    public Boolean hostDeleteCloudRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withHostDeleteCloudRecording(Boolean hostDeleteCloudRecording) {
        this.hostDeleteCloudRecording = hostDeleteCloudRecording;
        return this;
    }
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     */
    
    public GetAccountLockSettings200ApplicationXML1RecordingIpAddressAccessControl ipAddressAccessControl;
    public GetAccountLockSettings200ApplicationXML1Recording withIpAddressAccessControl(GetAccountLockSettings200ApplicationXML1RecordingIpAddressAccessControl ipAddressAccessControl) {
        this.ipAddressAccessControl = ipAddressAccessControl;
        return this;
    }
    
    /**
     * Allow hosts and participants to record the meeting to a local file.
     */
    
    public Boolean localRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withLocalRecording(Boolean localRecording) {
        this.localRecording = localRecording;
        return this;
    }
    
    /**
     * If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     * 
     * 
     */
    
    public Boolean preventHostAccessRecording;
    public GetAccountLockSettings200ApplicationXML1Recording withPreventHostAccessRecording(Boolean preventHostAccessRecording) {
        this.preventHostAccessRecording = preventHostAccessRecording;
        return this;
    }
    
    /**
     * Only authenticated users can view cloud recordings
     */
    
    public String recordingAuthentication;
    public GetAccountLockSettings200ApplicationXML1Recording withRecordingAuthentication(String recordingAuthentication) {
        this.recordingAuthentication = recordingAuthentication;
        return this;
    }
    
}
