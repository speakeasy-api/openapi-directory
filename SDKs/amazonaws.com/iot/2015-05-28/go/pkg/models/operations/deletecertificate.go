// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type DeleteCertificatePathParams struct {
	// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
	CertificateID string `pathParam:"style=simple,explode=false,name=certificateId"`
}

type DeleteCertificateQueryParams struct {
	// Forces the deletion of a certificate if it is inactive and is not attached to an IoT thing.
	ForceDelete *bool `queryParam:"style=form,explode=true,name=forceDelete"`
}

type DeleteCertificateHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type DeleteCertificateRequest struct {
	PathParams  DeleteCertificatePathParams
	QueryParams DeleteCertificateQueryParams
	Headers     DeleteCertificateHeaders
}

type DeleteCertificateResponse struct {
	// CertificateStateException
	CertificateStateException interface{}
	ContentType               string
	// DeleteConflictException
	DeleteConflictException interface{}
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceUnavailableException
	ServiceUnavailableException interface{}
	StatusCode                  int
	RawResponse                 *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UnauthorizedException
	UnauthorizedException interface{}
}
