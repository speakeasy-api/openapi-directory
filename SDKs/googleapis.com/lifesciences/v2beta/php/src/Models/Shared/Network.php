<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * Network - VM networking options.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class Network
{
    /**
     * The network name to attach the VM's network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.
     * 
     * @var ?string $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $network = null;
    
    /**
     * If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/* /subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.
     * 
     * @var ?string $subnetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('subnetwork')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subnetwork = null;
    
    /**
     * If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.
     * 
     * @var ?bool $usePrivateAddress
     */
	#[\JMS\Serializer\Annotation\SerializedName('usePrivateAddress')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $usePrivateAddress = null;
    
	public function __construct()
	{
		$this->network = null;
		$this->subnetwork = null;
		$this->usePrivateAddress = null;
	}
}
