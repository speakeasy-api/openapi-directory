"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class DateRangeRelativeDateRangeEnum(str, Enum):
    r"""The date range relative to the date of when the report is run."""
    TODAY = 'TODAY'
    YESTERDAY = 'YESTERDAY'
    WEEK_TO_DATE = 'WEEK_TO_DATE'
    MONTH_TO_DATE = 'MONTH_TO_DATE'
    QUARTER_TO_DATE = 'QUARTER_TO_DATE'
    YEAR_TO_DATE = 'YEAR_TO_DATE'
    PREVIOUS_WEEK = 'PREVIOUS_WEEK'
    PREVIOUS_MONTH = 'PREVIOUS_MONTH'
    PREVIOUS_QUARTER = 'PREVIOUS_QUARTER'
    PREVIOUS_YEAR = 'PREVIOUS_YEAR'
    LAST_7_DAYS = 'LAST_7_DAYS'
    LAST_30_DAYS = 'LAST_30_DAYS'
    LAST_90_DAYS = 'LAST_90_DAYS'
    LAST_365_DAYS = 'LAST_365_DAYS'
    LAST_24_MONTHS = 'LAST_24_MONTHS'
    LAST_14_DAYS = 'LAST_14_DAYS'
    LAST_60_DAYS = 'LAST_60_DAYS'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DateRange:
    r"""Represents a date range."""
    
    end_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""The kind of resource this is, in this case dfareporting#dateRange."""  
    relative_date_range: Optional[DateRangeRelativeDateRangeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relativeDateRange'), 'exclude': lambda f: f is None }})
    r"""The date range relative to the date of when the report is run."""  
    start_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startDate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    