// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCommandInvocationXAmzTargetEnum
type GetCommandInvocationXAmzTargetEnum string

const (
	GetCommandInvocationXAmzTargetEnumAmazonSsmGetCommandInvocation GetCommandInvocationXAmzTargetEnum = "AmazonSSM.GetCommandInvocation"
)

func (e *GetCommandInvocationXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.GetCommandInvocation":
		*e = GetCommandInvocationXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCommandInvocationXAmzTargetEnum: %s", s)
	}
}

type GetCommandInvocationRequest struct {
	GetCommandInvocationRequest shared.GetCommandInvocationRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  GetCommandInvocationXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetCommandInvocationResponse struct {
	ContentType string
	// Success
	GetCommandInvocationResult *shared.GetCommandInvocationResult
	// InternalServerError
	InternalServerError interface{}
	// InvalidCommandId
	InvalidCommandID interface{}
	// InvalidInstanceId
	InvalidInstanceID interface{}
	// InvalidPluginName
	InvalidPluginName interface{}
	// InvocationDoesNotExist
	InvocationDoesNotExist interface{}
	StatusCode             int
	RawResponse            *http.Response
}
