<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Collections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Uploads a collection to your Merchant Center account. If a collection with the same collectionId already exists, this method updates that entry. In each update, the collection is completely replaced by the fields in the body of the update request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateResponse
     */
	public function contentCollectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/collections', \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "collection", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a collection from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteResponse
     */
	public function contentCollectionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/collections/{collectionId}', \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves a collection from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetResponse
     */
	public function contentCollectionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/collections/{collectionId}', \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->collection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Collection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the collections in your Merchant Center account. The response might contain fewer items than specified by page_size. Rely on next_page_token to determine if there are more items to be requested.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListResponse
     */
	public function contentCollectionsList(
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/collections', \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentCollectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCollectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListCollectionsResponse', 'json');
            }
        }

        return $response;
    }
}