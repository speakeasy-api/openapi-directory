"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateAuthorizerResponseAuthorizerTypeEnum(str, Enum):
    r"""The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs)."""
    REQUEST = 'REQUEST'
    JWT = 'JWT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAuthorizerResponseJwtConfiguration:
    r"""Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs."""
    
    audience: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Audience'), 'exclude': lambda f: f is None }})  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Issuer'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAuthorizerResponse:
    r"""Success"""
    
    authorizer_credentials_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerCredentialsArn'), 'exclude': lambda f: f is None }})  
    authorizer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerId'), 'exclude': lambda f: f is None }})  
    authorizer_payload_format_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerPayloadFormatVersion'), 'exclude': lambda f: f is None }})  
    authorizer_result_ttl_in_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerResultTtlInSeconds'), 'exclude': lambda f: f is None }})  
    authorizer_type: Optional[UpdateAuthorizerResponseAuthorizerTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerType'), 'exclude': lambda f: f is None }})  
    authorizer_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthorizerUri'), 'exclude': lambda f: f is None }})  
    enable_simple_responses: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EnableSimpleResponses'), 'exclude': lambda f: f is None }})  
    identity_source: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentitySource'), 'exclude': lambda f: f is None }})  
    identity_validation_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityValidationExpression'), 'exclude': lambda f: f is None }})  
    jwt_configuration: Optional[UpdateAuthorizerResponseJwtConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JwtConfiguration'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    