/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryInput - Represents the input of a &lt;code&gt;Query&lt;/code&gt; operation.
 */
public class QueryInput {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttributesToGet")
    public String[] attributesToGet;

    public QueryInput withAttributesToGet(String[] attributesToGet) {
        this.attributesToGet = attributesToGet;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConditionalOperator")
    public ConditionalOperatorEnum conditionalOperator;

    public QueryInput withConditionalOperator(ConditionalOperatorEnum conditionalOperator) {
        this.conditionalOperator = conditionalOperator;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ConsistentRead")
    public Boolean consistentRead;

    public QueryInput withConsistentRead(Boolean consistentRead) {
        this.consistentRead = consistentRead;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExclusiveStartKey")
    public java.util.Map<String, AttributeValue> exclusiveStartKey;

    public QueryInput withExclusiveStartKey(java.util.Map<String, AttributeValue> exclusiveStartKey) {
        this.exclusiveStartKey = exclusiveStartKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExpressionAttributeNames")
    public java.util.Map<String, String> expressionAttributeNames;

    public QueryInput withExpressionAttributeNames(java.util.Map<String, String> expressionAttributeNames) {
        this.expressionAttributeNames = expressionAttributeNames;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExpressionAttributeValues")
    public java.util.Map<String, AttributeValue> expressionAttributeValues;

    public QueryInput withExpressionAttributeValues(java.util.Map<String, AttributeValue> expressionAttributeValues) {
        this.expressionAttributeValues = expressionAttributeValues;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FilterExpression")
    public String filterExpression;

    public QueryInput withFilterExpression(String filterExpression) {
        this.filterExpression = filterExpression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IndexName")
    public String indexName;

    public QueryInput withIndexName(String indexName) {
        this.indexName = indexName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KeyConditionExpression")
    public String keyConditionExpression;

    public QueryInput withKeyConditionExpression(String keyConditionExpression) {
        this.keyConditionExpression = keyConditionExpression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("KeyConditions")
    public java.util.Map<String, Condition> keyConditions;

    public QueryInput withKeyConditions(java.util.Map<String, Condition> keyConditions) {
        this.keyConditions = keyConditions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Limit")
    public Long limit;

    public QueryInput withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ProjectionExpression")
    public String projectionExpression;

    public QueryInput withProjectionExpression(String projectionExpression) {
        this.projectionExpression = projectionExpression;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("QueryFilter")
    public java.util.Map<String, Condition> queryFilter;

    public QueryInput withQueryFilter(java.util.Map<String, Condition> queryFilter) {
        this.queryFilter = queryFilter;
        return this;
    }
    
    /**
     * &lt;p&gt;Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;INDEXES&lt;/code&gt; - The response includes the aggregate &lt;code&gt;ConsumedCapacity&lt;/code&gt; for the operation, together with &lt;code&gt;ConsumedCapacity&lt;/code&gt; for each table and secondary index that was accessed.&lt;/p&gt; &lt;p&gt;Note that some operations, such as &lt;code&gt;GetItem&lt;/code&gt; and &lt;code&gt;BatchGetItem&lt;/code&gt;, do not access any indexes at all. In these cases, specifying &lt;code&gt;INDEXES&lt;/code&gt; will only return &lt;code&gt;ConsumedCapacity&lt;/code&gt; information for table(s).&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TOTAL&lt;/code&gt; - The response includes only the aggregate &lt;code&gt;ConsumedCapacity&lt;/code&gt; for the operation.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NONE&lt;/code&gt; - No &lt;code&gt;ConsumedCapacity&lt;/code&gt; details are included in the response.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReturnConsumedCapacity")
    public ReturnConsumedCapacityEnum returnConsumedCapacity;

    public QueryInput withReturnConsumedCapacity(ReturnConsumedCapacityEnum returnConsumedCapacity) {
        this.returnConsumedCapacity = returnConsumedCapacity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ScanIndexForward")
    public Boolean scanIndexForward;

    public QueryInput withScanIndexForward(Boolean scanIndexForward) {
        this.scanIndexForward = scanIndexForward;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Select")
    public SelectEnum select;

    public QueryInput withSelect(SelectEnum select) {
        this.select = select;
        return this;
    }
    
    @JsonProperty("TableName")
    public String tableName;

    public QueryInput withTableName(String tableName) {
        this.tableName = tableName;
        return this;
    }
    
    public QueryInput(@JsonProperty("TableName") String tableName) {
        this.tableName = tableName;
  }
}
