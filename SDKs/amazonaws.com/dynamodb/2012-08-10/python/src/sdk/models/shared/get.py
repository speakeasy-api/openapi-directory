"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import attributevalue as shared_attributevalue
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Get:
    r"""Specifies an item and related attribute values to retrieve in a <code>TransactGetItem</code> object."""
    
    key: dict[str, shared_attributevalue.AttributeValue] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Key') }})  
    table_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TableName') }})  
    expression_attribute_names: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExpressionAttributeNames'), 'exclude': lambda f: f is None }})  
    projection_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProjectionExpression'), 'exclude': lambda f: f is None }})  
    