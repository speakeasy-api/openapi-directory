/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * SCIM is a provisioning system that lets you manage users within your identity provider (IdP).
 * For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).
 * 
 */
public class Scim {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Scim(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * List resource types
     * Returns all resource types supported for the SCIM configuration.
     * 
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesResponse getV2Scim20ResourceTypes() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/scim/2.0/ResourceTypes");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesResponse res = new org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesResponse(contentType, httpRes.statusCode()) {{
            getV2Scim20ResourceTypes200ApplicationScimPlusJsonObject = null;
            getV2Scim20ResourceTypes401ApplicationScimPlusJsonObject = null;
            getV2Scim20ResourceTypes500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes200ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes200ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypes200ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes401ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypes401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypes500ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypes500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get a resource type
     * Returns a resource type by name.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesNameResponse getV2Scim20ResourceTypesName(org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesNameRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesNameRequest.class, baseUrl, "/v2/scim/2.0/ResourceTypes/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesNameResponse res = new org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesNameResponse(contentType, httpRes.statusCode()) {{
            scimResourceType = null;
            getV2Scim20ResourceTypesName401ApplicationScimPlusJsonObject = null;
            getV2Scim20ResourceTypesName404ApplicationScimPlusJsonObject = null;
            getV2Scim20ResourceTypesName500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimResourceType out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimResourceType.class);
                res.scimResourceType = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName401ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypesName401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName404ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypesName404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ResourceTypesName500ApplicationScimPlusJson.class);
                res.getV2Scim20ResourceTypesName500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * List schemas
     * Returns all schemas supported for the SCIM configuration.
     * 
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20SchemasResponse getV2Scim20Schemas() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/scim/2.0/Schemas");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20SchemasResponse res = new org.openapis.openapi.models.operations.GetV2Scim20SchemasResponse(contentType, httpRes.statusCode()) {{
            getV2Scim20Schemas200ApplicationScimPlusJsonObject = null;
            getV2Scim20Schemas401ApplicationScimPlusJsonObject = null;
            getV2Scim20Schemas500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Schemas200ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Schemas200ApplicationScimPlusJson.class);
                res.getV2Scim20Schemas200ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Schemas401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Schemas401ApplicationScimPlusJson.class);
                res.getV2Scim20Schemas401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Schemas500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Schemas500ApplicationScimPlusJson.class);
                res.getV2Scim20Schemas500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get a schema
     * Returns a schema by ID.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20SchemasIdResponse getV2Scim20SchemasId(org.openapis.openapi.models.operations.GetV2Scim20SchemasIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetV2Scim20SchemasIdRequest.class, baseUrl, "/v2/scim/2.0/Schemas/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20SchemasIdResponse res = new org.openapis.openapi.models.operations.GetV2Scim20SchemasIdResponse(contentType, httpRes.statusCode()) {{
            scimSchema = null;
            getV2Scim20SchemasId401ApplicationScimPlusJsonObject = null;
            getV2Scim20SchemasId404ApplicationScimPlusJsonObject = null;
            getV2Scim20SchemasId500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimSchema out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimSchema.class);
                res.scimSchema = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20SchemasId401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20SchemasId401ApplicationScimPlusJson.class);
                res.getV2Scim20SchemasId401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20SchemasId404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20SchemasId404ApplicationScimPlusJson.class);
                res.getV2Scim20SchemasId404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20SchemasId500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20SchemasId500ApplicationScimPlusJson.class);
                res.getV2Scim20SchemasId500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get service provider config
     * Returns a service provider config for Docker's configuration.
     * 
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfigResponse getV2Scim20ServiceProviderConfig() throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/scim/2.0/ServiceProviderConfig");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfigResponse res = new org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfigResponse(contentType, httpRes.statusCode()) {{
            scimServiceProviderConfig = null;
            getV2Scim20ServiceProviderConfig401ApplicationScimPlusJsonObject = null;
            getV2Scim20ServiceProviderConfig500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimServiceProviderConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimServiceProviderConfig.class);
                res.scimServiceProviderConfig = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfig401ApplicationScimPlusJson.class);
                res.getV2Scim20ServiceProviderConfig401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20ServiceProviderConfig500ApplicationScimPlusJson.class);
                res.getV2Scim20ServiceProviderConfig500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * List users
     * List users, returns paginated users for an organization. Use `startIndex`
     * and `count` query parameters to receive paginated results.
     * 
     * **Sorting:**&lt;br&gt;
     * Sorting lets you to specify the order of returned resources by specifying
     * a combination of `sortBy` and `sortOrder` query parameters.
     * 
     * The `sortBy` parameter specifies the attribute whose value will be used
     * to order the returned responses. The `sortOrder` parameter defines the
     * order in which the `sortBy` parameter is applied. Allowed values are
     * "ascending" and "descending".
     * 
     * **Filtering:**&lt;br&gt;
     * You can request a subset of resources by specifying the `filter` query
     * parameter containing a filter expression. Attribute names and attribute
     * operators used in filters are case insensitive. The filter parameter
     * must contain at least one valid expression. Each expression must contain
     * an attribute name followed by an attribute operator and an optional
     * value.
     * 
     * Supported operators are listed below.
     * 
     * - `eq` equal
     * - `ne` not equal
     * - `co` contains
     * - `sw` starts with
     * - `and` Logical "and"
     * - `or` Logical "or"
     * - `not` "Not" function
     * - `()` Precedence grouping
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20UsersResponse getV2Scim20Users(org.openapis.openapi.models.operations.GetV2Scim20UsersRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/scim/2.0/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.GetV2Scim20UsersRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20UsersResponse res = new org.openapis.openapi.models.operations.GetV2Scim20UsersResponse(contentType, httpRes.statusCode()) {{
            getV2Scim20Users200ApplicationScimPlusJsonObject = null;
            getV2Scim20Users400ApplicationScimPlusJsonObject = null;
            getV2Scim20Users401ApplicationScimPlusJsonObject = null;
            getV2Scim20Users403ApplicationScimPlusJsonObject = null;
            getV2Scim20Users404ApplicationScimPlusJsonObject = null;
            getV2Scim20Users500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users200ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users200ApplicationScimPlusJson.class);
                res.getV2Scim20Users200ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users400ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users400ApplicationScimPlusJson.class);
                res.getV2Scim20Users400ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users401ApplicationScimPlusJson.class);
                res.getV2Scim20Users401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users403ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users403ApplicationScimPlusJson.class);
                res.getV2Scim20Users403ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users404ApplicationScimPlusJson.class);
                res.getV2Scim20Users404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20Users500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20Users500ApplicationScimPlusJson.class);
                res.getV2Scim20Users500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Get a user
     * Returns a user by ID.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetV2Scim20UsersIdResponse getV2Scim20UsersId(org.openapis.openapi.models.operations.GetV2Scim20UsersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetV2Scim20UsersIdRequest.class, baseUrl, "/v2/scim/2.0/Users/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetV2Scim20UsersIdResponse res = new org.openapis.openapi.models.operations.GetV2Scim20UsersIdResponse(contentType, httpRes.statusCode()) {{
            scimUser = null;
            getV2Scim20UsersId400ApplicationScimPlusJsonObject = null;
            getV2Scim20UsersId401ApplicationScimPlusJsonObject = null;
            getV2Scim20UsersId403ApplicationScimPlusJsonObject = null;
            getV2Scim20UsersId404ApplicationScimPlusJsonObject = null;
            getV2Scim20UsersId500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimUser.class);
                res.scimUser = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20UsersId400ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20UsersId400ApplicationScimPlusJson.class);
                res.getV2Scim20UsersId400ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20UsersId401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20UsersId401ApplicationScimPlusJson.class);
                res.getV2Scim20UsersId401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20UsersId403ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20UsersId403ApplicationScimPlusJson.class);
                res.getV2Scim20UsersId403ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20UsersId404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20UsersId404ApplicationScimPlusJson.class);
                res.getV2Scim20UsersId404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetV2Scim20UsersId500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetV2Scim20UsersId500ApplicationScimPlusJson.class);
                res.getV2Scim20UsersId500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Create user
     * Creates a user. If the user already exists by email, they are assigned
     * to the organization on the "company" team.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostV2Scim20UsersResponse postV2Scim20Users(org.openapis.openapi.models.operations.PostV2Scim20UsersRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v2/scim/2.0/Users");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostV2Scim20UsersResponse res = new org.openapis.openapi.models.operations.PostV2Scim20UsersResponse(contentType, httpRes.statusCode()) {{
            scimUser = null;
            postV2Scim20Users400ApplicationScimPlusJsonObject = null;
            postV2Scim20Users401ApplicationScimPlusJsonObject = null;
            postV2Scim20Users403ApplicationScimPlusJsonObject = null;
            postV2Scim20Users404ApplicationScimPlusJsonObject = null;
            postV2Scim20Users409ApplicationScimPlusJsonObject = null;
            postV2Scim20Users500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimUser.class);
                res.scimUser = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users400ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users400ApplicationScimPlusJson.class);
                res.postV2Scim20Users400ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users401ApplicationScimPlusJson.class);
                res.postV2Scim20Users401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users403ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users403ApplicationScimPlusJson.class);
                res.postV2Scim20Users403ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users404ApplicationScimPlusJson.class);
                res.postV2Scim20Users404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users409ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users409ApplicationScimPlusJson.class);
                res.postV2Scim20Users409ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PostV2Scim20Users500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PostV2Scim20Users500ApplicationScimPlusJson.class);
                res.postV2Scim20Users500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }

    /**
     * Update a user
     * Updates a user. Use this route to change the user's name, activate,
     * and deactivate the user.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutV2Scim20UsersIdResponse putV2Scim20UsersId(org.openapis.openapi.models.operations.PutV2Scim20UsersIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutV2Scim20UsersIdRequest.class, baseUrl, "/v2/scim/2.0/Users/{id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutV2Scim20UsersIdResponse res = new org.openapis.openapi.models.operations.PutV2Scim20UsersIdResponse(contentType, httpRes.statusCode()) {{
            scimUser = null;
            putV2Scim20UsersId400ApplicationScimPlusJsonObject = null;
            putV2Scim20UsersId401ApplicationScimPlusJsonObject = null;
            putV2Scim20UsersId403ApplicationScimPlusJsonObject = null;
            putV2Scim20UsersId404ApplicationScimPlusJsonObject = null;
            putV2Scim20UsersId409ApplicationScimPlusJsonObject = null;
            putV2Scim20UsersId500ApplicationScimPlusJsonObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ScimUser out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ScimUser.class);
                res.scimUser = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId400ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId400ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId400ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 401) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId401ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId401ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId401ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 403) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId403ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId403ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId403ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 404) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId404ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId404ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId404ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 409) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId409ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId409ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId409ApplicationScimPlusJsonObject = out;
            }
        }
        else if (httpRes.statusCode() == 500) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/scim+json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.PutV2Scim20UsersId500ApplicationScimPlusJson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.PutV2Scim20UsersId500ApplicationScimPlusJson.class);
                res.putV2Scim20UsersId500ApplicationScimPlusJsonObject = out;
            }
        }

        return res;
    }
}