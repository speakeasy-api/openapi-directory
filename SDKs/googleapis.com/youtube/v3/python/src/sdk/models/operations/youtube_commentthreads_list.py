"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import commentthreadlistresponse as shared_commentthreadlistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class YoutubeCommentThreadsListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class YoutubeCommentThreadsListModerationStatusEnum(str, Enum):
    r"""Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam."""
    PUBLISHED = 'published'
    HELD_FOR_REVIEW = 'heldForReview'
    LIKELY_SPAM = 'likelySpam'
    REJECTED = 'rejected'

class YoutubeCommentThreadsListOrderEnum(str, Enum):
    ORDER_UNSPECIFIED = 'orderUnspecified'
    TIME = 'time'
    RELEVANCE = 'relevance'

class YoutubeCommentThreadsListTextFormatEnum(str, Enum):
    r"""The requested text format for the returned comments."""
    TEXT_FORMAT_UNSPECIFIED = 'textFormatUnspecified'
    HTML = 'html'
    PLAIN_TEXT = 'plainText'


@dataclasses.dataclass
class YoutubeCommentThreadsListRequest:
    
    part: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'part', 'style': 'form', 'explode': True }})
    r"""The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    all_threads_related_to_channel_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'allThreadsRelatedToChannelId', 'style': 'form', 'explode': True }})
    r"""Returns the comment threads of all videos of the channel and the channel comments as well."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    channel_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'channelId', 'style': 'form', 'explode': True }})
    r"""Returns the comment threads for all the channel comments (ie does not include comments left on videos)."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    id: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'id', 'style': 'form', 'explode': True }})
    r"""Returns the comment threads with the given IDs for Stubby or Apiary."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The *maxResults* parameter specifies the maximum number of items that should be returned in the result set."""  
    moderation_status: Optional[YoutubeCommentThreadsListModerationStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'moderationStatus', 'style': 'form', 'explode': True }})
    r"""Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    order: Optional[YoutubeCommentThreadsListOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'order', 'style': 'form', 'explode': True }})  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageToken', 'style': 'form', 'explode': True }})
    r"""The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    search_terms: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'searchTerms', 'style': 'form', 'explode': True }})
    r"""Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter."""  
    text_format: Optional[YoutubeCommentThreadsListTextFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'textFormat', 'style': 'form', 'explode': True }})
    r"""The requested text format for the returned comments."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    video_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'videoId', 'style': 'form', 'explode': True }})
    r"""Returns the comment threads of the specified video."""  
    

@dataclasses.dataclass
class YoutubeCommentThreadsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    comment_thread_list_response: Optional[shared_commentthreadlistresponse.CommentThreadListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    