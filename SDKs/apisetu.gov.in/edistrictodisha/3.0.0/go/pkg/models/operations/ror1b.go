// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type Ror1bSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type Ror1bRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
	// ApplicationReferenceNo
	Refno string `json:"refno"`
}

// Ror1bRequestBodyFormatEnum - The format of the certificate in response.
type Ror1bRequestBodyFormatEnum string

const (
	Ror1bRequestBodyFormatEnumPdf Ror1bRequestBodyFormatEnum = "pdf"
)

func (e *Ror1bRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = Ror1bRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1bRequestBodyFormatEnum: %s", s)
	}
}

// Ror1bRequestBody - Request format
type Ror1bRequestBody struct {
	CertificateParameters *Ror1bRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format Ror1bRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Ror1bRequest struct {
	// Request format
	Request  *Ror1bRequestBody `request:"mediaType=application/json"`
	Security Ror1bSecurity
}

type Ror1b504ApplicationJSONErrorEnum string

const (
	Ror1b504ApplicationJSONErrorEnumGatewayTimeout Ror1b504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Ror1b504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Ror1b504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b504ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b504ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Ror1b504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Ror1b504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Ror1b504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b504ApplicationJSON - Gateway timeout
type Ror1b504ApplicationJSON struct {
	Error            *Ror1b504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b503ApplicationJSONErrorEnum string

const (
	Ror1b503ApplicationJSONErrorEnumServiceUnavailable Ror1b503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Ror1b503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Ror1b503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b503ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b503ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Ror1b503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Ror1b503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Ror1b503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b503ApplicationJSON - Service unavailable
type Ror1b503ApplicationJSON struct {
	Error            *Ror1b503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b502ApplicationJSONErrorEnum string

const (
	Ror1b502ApplicationJSONErrorEnumBadGatewy Ror1b502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Ror1b502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Ror1b502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b502ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b502ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Ror1b502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Ror1b502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Ror1b502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b502ApplicationJSON - Bad gateway
type Ror1b502ApplicationJSON struct {
	Error            *Ror1b502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b500ApplicationJSONErrorEnum string

const (
	Ror1b500ApplicationJSONErrorEnumInternalServerError Ror1b500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Ror1b500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Ror1b500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b500ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b500ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b500ApplicationJSONErrorDescriptionEnumInternalServerError Ror1b500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Ror1b500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Ror1b500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b500ApplicationJSON - Internal server error
type Ror1b500ApplicationJSON struct {
	Error            *Ror1b500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b404ApplicationJSONErrorEnum string

const (
	Ror1b404ApplicationJSONErrorEnumRecordNotFound Ror1b404ApplicationJSONErrorEnum = "record_not_found"
	Ror1b404ApplicationJSONErrorEnumURLNotFound    Ror1b404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Ror1b404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Ror1b404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b404ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b404ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b404ApplicationJSONErrorDescriptionEnumNoRecordFound               Ror1b404ApplicationJSONErrorDescriptionEnum = "No record found"
	Ror1b404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Ror1b404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Ror1b404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Ror1b404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b404ApplicationJSON - No record found
type Ror1b404ApplicationJSON struct {
	Error            *Ror1b404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b401ApplicationJSONErrorEnum string

const (
	Ror1b401ApplicationJSONErrorEnumInvalidAuthentication Ror1b401ApplicationJSONErrorEnum = "invalid_authentication"
	Ror1b401ApplicationJSONErrorEnumInvalidAuthorization  Ror1b401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Ror1b401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Ror1b401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b401ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b401ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Ror1b401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Ror1b401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Ror1b401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Ror1b401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Ror1b401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b401ApplicationJSON - Unauthorized access
type Ror1b401ApplicationJSON struct {
	Error            *Ror1b401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1b400ApplicationJSONErrorEnum string

const (
	Ror1b400ApplicationJSONErrorEnumMissingParameter Ror1b400ApplicationJSONErrorEnum = "missing_parameter"
	Ror1b400ApplicationJSONErrorEnumInvalidParameter Ror1b400ApplicationJSONErrorEnum = "invalid_parameter"
	Ror1b400ApplicationJSONErrorEnumInvalidFormat    Ror1b400ApplicationJSONErrorEnum = "invalid_format"
	Ror1b400ApplicationJSONErrorEnumInvalidTxnid     Ror1b400ApplicationJSONErrorEnum = "invalid_txnid"
	Ror1b400ApplicationJSONErrorEnumInvalidConsentid Ror1b400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Ror1b400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Ror1b400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b400ApplicationJSONErrorEnum: %s", s)
	}
}

type Ror1b400ApplicationJSONErrorDescriptionEnum string

const (
	Ror1b400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Ror1b400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Ror1b400ApplicationJSONErrorDescriptionEnumBadRequest                              Ror1b400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Ror1b400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Ror1b400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Ror1b400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Ror1b400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Ror1b400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Ror1b400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Ror1b400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Ror1b400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Ror1b400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Ror1b400ApplicationJSON - Bad request
type Ror1b400ApplicationJSON struct {
	Error            *Ror1b400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Ror1b400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Ror1bResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Ror1b400ApplicationJSONObject *Ror1b400ApplicationJSON
	// Unauthorized access
	Ror1b401ApplicationJSONObject *Ror1b401ApplicationJSON
	// No record found
	Ror1b404ApplicationJSONObject *Ror1b404ApplicationJSON
	// Internal server error
	Ror1b500ApplicationJSONObject *Ror1b500ApplicationJSON
	// Bad gateway
	Ror1b502ApplicationJSONObject *Ror1b502ApplicationJSON
	// Service unavailable
	Ror1b503ApplicationJSONObject *Ror1b503ApplicationJSON
	// Gateway timeout
	Ror1b504ApplicationJSONObject *Ror1b504ApplicationJSON
}
