/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Task - Details on a task in a cluster.
 */
public class Task {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public Attachment[] attachments;
    public Task withAttachments(Attachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    public Attribute[] attributes;
    public Task withAttributes(Attribute[] attributes) {
        this.attributes = attributes;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityZone")
    public String availabilityZone;
    public Task withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capacityProviderName")
    public String capacityProviderName;
    public Task withCapacityProviderName(String capacityProviderName) {
        this.capacityProviderName = capacityProviderName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clusterArn")
    public String clusterArn;
    public Task withClusterArn(String clusterArn) {
        this.clusterArn = clusterArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectivity")
    public ConnectivityEnum connectivity;
    public Task withConnectivity(ConnectivityEnum connectivity) {
        this.connectivity = connectivity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("connectivityAt")
    public OffsetDateTime connectivityAt;
    public Task withConnectivityAt(OffsetDateTime connectivityAt) {
        this.connectivityAt = connectivityAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containerInstanceArn")
    public String containerInstanceArn;
    public Task withContainerInstanceArn(String containerInstanceArn) {
        this.containerInstanceArn = containerInstanceArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containers")
    public Container[] containers;
    public Task withContainers(Container[] containers) {
        this.containers = containers;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpu")
    public String cpu;
    public Task withCpu(String cpu) {
        this.cpu = cpu;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public Task withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("desiredStatus")
    public String desiredStatus;
    public Task withDesiredStatus(String desiredStatus) {
        this.desiredStatus = desiredStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableExecuteCommand")
    public Boolean enableExecuteCommand;
    public Task withEnableExecuteCommand(Boolean enableExecuteCommand) {
        this.enableExecuteCommand = enableExecuteCommand;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ephemeralStorage")
    public EphemeralStorage ephemeralStorage;
    public Task withEphemeralStorage(EphemeralStorage ephemeralStorage) {
        this.ephemeralStorage = ephemeralStorage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("executionStoppedAt")
    public OffsetDateTime executionStoppedAt;
    public Task withExecutionStoppedAt(OffsetDateTime executionStoppedAt) {
        this.executionStoppedAt = executionStoppedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    public String group;
    public Task withGroup(String group) {
        this.group = group;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthStatus")
    public HealthStatusEnum healthStatus;
    public Task withHealthStatus(HealthStatusEnum healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inferenceAccelerators")
    public InferenceAccelerator[] inferenceAccelerators;
    public Task withInferenceAccelerators(InferenceAccelerator[] inferenceAccelerators) {
        this.inferenceAccelerators = inferenceAccelerators;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastStatus")
    public String lastStatus;
    public Task withLastStatus(String lastStatus) {
        this.lastStatus = lastStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("launchType")
    public LaunchTypeEnum launchType;
    public Task withLaunchType(LaunchTypeEnum launchType) {
        this.launchType = launchType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("memory")
    public String memory;
    public Task withMemory(String memory) {
        this.memory = memory;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overrides")
    public TaskOverride overrides;
    public Task withOverrides(TaskOverride overrides) {
        this.overrides = overrides;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformFamily")
    public String platformFamily;
    public Task withPlatformFamily(String platformFamily) {
        this.platformFamily = platformFamily;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformVersion")
    public String platformVersion;
    public Task withPlatformVersion(String platformVersion) {
        this.platformVersion = platformVersion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("pullStartedAt")
    public OffsetDateTime pullStartedAt;
    public Task withPullStartedAt(OffsetDateTime pullStartedAt) {
        this.pullStartedAt = pullStartedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("pullStoppedAt")
    public OffsetDateTime pullStoppedAt;
    public Task withPullStoppedAt(OffsetDateTime pullStoppedAt) {
        this.pullStoppedAt = pullStoppedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("startedAt")
    public OffsetDateTime startedAt;
    public Task withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startedBy")
    public String startedBy;
    public Task withStartedBy(String startedBy) {
        this.startedBy = startedBy;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stopCode")
    public TaskStopCodeEnum stopCode;
    public Task withStopCode(TaskStopCodeEnum stopCode) {
        this.stopCode = stopCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stoppedAt")
    public OffsetDateTime stoppedAt;
    public Task withStoppedAt(OffsetDateTime stoppedAt) {
        this.stoppedAt = stoppedAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stoppedReason")
    public String stoppedReason;
    public Task withStoppedReason(String stoppedReason) {
        this.stoppedReason = stoppedReason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("stoppingAt")
    public OffsetDateTime stoppingAt;
    public Task withStoppingAt(OffsetDateTime stoppingAt) {
        this.stoppingAt = stoppingAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public Tag[] tags;
    public Task withTags(Tag[] tags) {
        this.tags = tags;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskArn")
    public String taskArn;
    public Task withTaskArn(String taskArn) {
        this.taskArn = taskArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taskDefinitionArn")
    public String taskDefinitionArn;
    public Task withTaskDefinitionArn(String taskDefinitionArn) {
        this.taskDefinitionArn = taskDefinitionArn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public Task withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
