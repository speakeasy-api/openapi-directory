"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compressiontype_enum as shared_compressiontype_enum
from ..shared import traininginputmode_enum as shared_traininginputmode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChannelSpecification:
    r"""Defines a named input source, called a channel, to be used by an algorithm."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    supported_content_types: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedContentTypes') }})  
    supported_input_modes: list[shared_traininginputmode_enum.TrainingInputModeEnum] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedInputModes') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    is_required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IsRequired'), 'exclude': lambda f: f is None }})  
    supported_compression_types: Optional[list[shared_compressiontype_enum.CompressionTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SupportedCompressionTypes'), 'exclude': lambda f: f is None }})  
    