/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetOwnedNumbersRequest extends SpeakeasyBase {
  /**
   * The Application that you want to return the numbers for.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=application_id",
  })
  applicationId?: string;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=country",
  })
  country?: string;

  /**
   * Set this optional field to `true` to restrict your results to numbers
   *
   * @remarks
   * associated with an Application (any Application). Set to `false` to
   * find all numbers not associated with any Application. Omit the field
   * to avoid filtering on whether or not the number is assigned to an
   * Application.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=has_application",
  })
  hasApplication?: boolean;

  /**
   * Page index
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=index" })
  index?: number;

  /**
   * The number pattern you want to search for. Use in conjunction with `search_pattern`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pattern",
  })
  pattern?: string;

  /**
   * The strategy you want to use for matching:
   *
   * @remarks
   *
   *
   * * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA)
   * * `1` - Search for numbers that contain `pattern`
   * * `2` - Search for numbers that end with `pattern`
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=search_pattern",
  })
  searchPattern?: shared.SearchPatternEnum;

  /**
   * Page size
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=size" })
  size?: number;
}

export class GetOwnedNumbersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  accountUnauthorized?: shared.AccountUnauthorized;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  inboundNumbers?: shared.InboundNumbers;
}
