"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var applications_1 = require("./applications");
var auth_1 = require("./auth");
var classifications_1 = require("./classifications");
var coverageparameters_1 = require("./coverageparameters");
var files_1 = require("./files");
var institutions_1 = require("./institutions");
var shared = __importStar(require("./models/shared"));
var policies_1 = require("./policies");
var producers_1 = require("./producers");
var products_1 = require("./products");
var quotes_1 = require("./quotes");
var riskparameters_1 = require("./riskparameters");
var submissions_1 = require("./submissions");
var welcomeandhealthcheck_1 = require("./welcomeandhealthcheck");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * Sandbox Environment
     */
    "https://sandbox.heraldapi.com",
    /**
     * Production Environment
     */
    "https://production.heraldapi.com",
];
/**
 * HeraldAPI is the API for commercial insurance.
 *
 * @remarks
 *
 * Below are the available endpoints:
 *
 * <b>Welcome & Health Check</b>
 * <br><tt>[GET&nbsp;/](/b3A6ODY5Mzc1MA-)</tt>
 * <hr>
 *
 * <b>Submissions</b>
 * <br><tt>[POST&nbsp;/submissions](/b3A6OTQ1Mjg5Nw-submissions)</tt>
 * <br><tt>[GET&nbsp;&nbsp;/submissions/{submission_id}](/b3A6OTQ1ODY3Mg-submissions-submission-id)</tt>
 * <hr>
 *
 * <b>Quotes</b>
 * <br><tt>[GET&nbsp;/quotes/{quote_id}](/b3A6ODc3NjcwMg-quotes-quote-id)</tt>
 * <hr>
 *
 * <b>Producers</b>
 * <br><tt>[GET&nbsp;/producers](/b3A6ODc3NjcwMQ-producers)</tt>
 * <hr>
 *
 * <b>Products</b>
 * <br><tt>[GET&nbsp;/products](/b3A6ODc3NjcwNg-products)</tt>
 * <hr>
 *
 * <b>Institutions</b>
 * <br><tt>[GET&nbsp;/institutions](/b3A6ODc3NjcwNw-institutions)</tt>
 * <hr>
 *
 * <b>Coverage Parameters</b>
 * <br><tt>[GET&nbsp;/coverage_parameters](/b3A6MTA0MDgyNzc-coverage-parameters)</tt>
 * <hr>
 *
 * <b>Risk Parameters</b>
 * <br><tt>[GET&nbsp;/risk_parameters](/b3A6MTA0MDgyNzg-risk-parameters)</tt>
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.applications = new applications_1.Applications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.auth = new auth_1.Auth(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.classifications = new classifications_1.Classifications(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.coverageParameters = new coverageparameters_1.CoverageParameters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.files = new files_1.Files(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.institutions = new institutions_1.Institutions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.policies = new policies_1.Policies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.producers = new producers_1.Producers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.products = new products_1.Products(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.quotes = new quotes_1.Quotes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.riskParameters = new riskparameters_1.RiskParameters(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.submissions = new submissions_1.Submissions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.welcomeAndHealthCheck = new welcomeandhealthcheck_1.WelcomeAndHealthCheck(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
