"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Mart:
    r"""Perform bulk operations"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_mart_case_associations_resource(self, request: operations.GetMartCaseAssociationsResourceRequest) -> operations.GetMartCaseAssociationsResourceResponse:
        r"""Bulk download of case associations
        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMartCaseAssociationsResourceRequest, base_url, '/mart/case/{object_category}/{taxon}', request)
        
        query_params = utils.get_query_params(operations.GetMartCaseAssociationsResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMartCaseAssociationsResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mart_disease_associations_resource(self, request: operations.GetMartDiseaseAssociationsResourceRequest) -> operations.GetMartDiseaseAssociationsResourceResponse:
        r"""Bulk download of disease associations
        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMartDiseaseAssociationsResourceRequest, base_url, '/mart/disease/{object_category}/{taxon}', request)
        
        query_params = utils.get_query_params(operations.GetMartDiseaseAssociationsResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMartDiseaseAssociationsResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mart_gene_associations_resource(self, request: operations.GetMartGeneAssociationsResourceRequest) -> operations.GetMartGeneAssociationsResourceResponse:
        r"""Bulk download of gene associations
        NOTE: this route has a limiter on it, you may be restricted in the number of downloads per hour. Use carefully.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMartGeneAssociationsResourceRequest, base_url, '/mart/gene/{object_category}/{taxon}', request)
        
        query_params = utils.get_query_params(operations.GetMartGeneAssociationsResourceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMartGeneAssociationsResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mart_ortholog_associations_resource(self, request: operations.GetMartOrthologAssociationsResourceRequest) -> operations.GetMartOrthologAssociationsResourceResponse:
        r"""Bulk download of orthologs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMartOrthologAssociationsResourceRequest, base_url, '/mart/ortholog/{taxon1}/{taxon2}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMartOrthologAssociationsResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_mart_paralog_associations_resource(self, request: operations.GetMartParalogAssociationsResourceRequest) -> operations.GetMartParalogAssociationsResourceResponse:
        r"""Bulk download of paralogs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMartParalogAssociationsResourceRequest, base_url, '/mart/paralog/{taxon1}/{taxon2}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMartParalogAssociationsResourceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    