// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

type GetRebalanceDetailsSecurity struct {
	APISecretKey shared.SchemeAPISecretKey `security:"scheme,type=apiKey,subtype=header"`
}

type GetRebalanceDetailsPathParams struct {
	// Unique identifier of the rebalance request
	RebalanceRequestID string `pathParam:"style=simple,explode=false,name=rebalance_request_id"`
}

type GetRebalanceDetailsHeaders struct {
	// ApiSecretKey
	XAPIKey string `header:"style=simple,explode=false,name=x-api-key"`
}

type GetRebalanceDetailsRequest struct {
	PathParams GetRebalanceDetailsPathParams
	Headers    GetRebalanceDetailsHeaders
	Security   GetRebalanceDetailsSecurity
}

// GetRebalanceDetails500ApplicationJSON - System error. Retry later. If the error persist, contact WOS support
type GetRebalanceDetails500ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails429ApplicationJSON - You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
type GetRebalanceDetails429ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails409ApplicationJSONStatusEnum - Current status of the original request
type GetRebalanceDetails409ApplicationJSONStatusEnum string

const (
	GetRebalanceDetails409ApplicationJSONStatusEnumProcessing GetRebalanceDetails409ApplicationJSONStatusEnum = "PROCESSING"
	GetRebalanceDetails409ApplicationJSONStatusEnumComplete   GetRebalanceDetails409ApplicationJSONStatusEnum = "COMPLETE"
)

func (e *GetRebalanceDetails409ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROCESSING":
		fallthrough
	case "COMPLETE":
		*e = GetRebalanceDetails409ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails409ApplicationJSONStatusEnum: %s", s)
	}
}

// GetRebalanceDetails409ApplicationJSON - Duplicate request
type GetRebalanceDetails409ApplicationJSON struct {
	// Human readable description of the error
	Message string `json:"message"`
	// Stringified original response body if status is `COMPLETE`
	Response map[string]interface{} `json:"response,omitempty"`
	// Current status of the original request
	Status GetRebalanceDetails409ApplicationJSONStatusEnum `json:"status"`
}

// GetRebalanceDetails404ApplicationJSON - The specified resource was not found
type GetRebalanceDetails404ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails403ApplicationJSON - Your authentication information is missing or invalid. Please check the keys are properly set and its correct
type GetRebalanceDetails403ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails401ApplicationJSON - You do not have permissions to access this resource.
type GetRebalanceDetails401ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails400ApplicationJSON - Request is not complete and may have one or more validations errors. Please check the error message and the code
type GetRebalanceDetails400ApplicationJSON struct {
	// Optional error code
	ErrorCode *string `json:"error_code,omitempty"`
	// Human readable description of the error
	Message string `json:"message"`
}

// GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum - Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum string

const (
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumPercentage GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "percentage"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumUnit       GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "unit"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnumValue      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum = "value"
)

func (e *GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "percentage":
		fallthrough
	case "unit":
		fallthrough
	case "value":
		*e = GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum: %s", s)
	}
}

// GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest - Each individual buy side and sell side instruction of the Switch request
type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest struct {
	// Identifier of the investment product sold or bought. If the instruction is to use a cash holding (relevant only for sell instruction) this must be `cash`
	InvestmentProductID string `json:"investment_product_id"`
	// Mode of the instruction. If investment_product_id is `cash` mode can only be set to `value` or `percentage`
	Mode GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequestModeEnum `json:"mode"`
	// value according to the mode. e.g. mode `percentage` and value `10` implies 10%
	Value string `json:"value"`
}

// GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum - Current status of the rebalance on the specific pot_id
type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum string

const (
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumFailed         GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "failed"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumProcessing     GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "processing"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumInitiated      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "initiated"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumSellInProgress GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "sell_in_progress"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumBuyInProgress  GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "buy_in_progress"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnumCompleted      GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum = "completed"
)

func (e *GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "failed":
		fallthrough
	case "processing":
		fallthrough
	case "initiated":
		fallthrough
	case "sell_in_progress":
		fallthrough
	case "buy_in_progress":
		fallthrough
	case "completed":
		*e = GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum: %s", s)
	}
}

// GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum - Side of the transaction
type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum string

const (
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnumBuy  GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum = "buy"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnumSell GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum = "sell"
)

func (e *GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "buy":
		fallthrough
	case "sell":
		*e = GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum: %s", s)
	}
}

type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum string

const (
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnumInstructed GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum = "instructed"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnumPriced     GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum = "priced"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnumSettled    GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum = "settled"
	GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnumRejected   GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum = "rejected"
)

func (e *GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "instructed":
		fallthrough
	case "priced":
		fallthrough
	case "settled":
		fallthrough
	case "rejected":
		*e = GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum: %s", s)
	}
}

type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions struct {
	// Date and time of transaction creation
	CreatedAt time.Time `json:"created_at"`
	// Identifier of investment product that is bought or sold.
	InvestmentProductID string `json:"investment_product_id"`
	// Executed price of the transaction
	Price *string `json:"price,omitempty"`
	// quantity (in units)
	Quantity *string `json:"quantity,omitempty"`
	// Side of the transaction
	Side   GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsSideEnum   `json:"side"`
	Status GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactionsStatusEnum `json:"status"`
	// Unique identifier of the transaction
	TransactionID string `json:"transaction_id"`
	// Monetary value of the transaction
	Value *string `json:"value,omitempty"`
}

// GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest - Each individual pot details on the rebalance request
type GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest struct {
	BuyInstructions []GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest `json:"buy_instructions"`
	// switch instruction ID
	InstructionID string `json:"instruction_id"`
	// Portfolio deviation for the pot
	PortfolioDeviation string `json:"portfolio_deviation"`
	// portfolio_template_id in used by the relevent pot
	PortfolioTemplateID string `json:"portfolio_template_id"`
	// Identifier of pot triggered for rebalance
	PotID string `json:"pot_id"`
	// if the status is rejected then the reason for it.
	Reason           string                                                                                                                   `json:"reason"`
	SellInstructions []GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestEachBuyOrSellInstructionOfTheSwitchRequest `json:"sell_instructions"`
	// Current status of the rebalance on the specific pot_id
	Status GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestStatusEnum `json:"status"`
	// Array with status of all buy and sell transactions.
	Transactions []GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequestTransactions `json:"transactions"`
}

// GetRebalanceDetails200ApplicationJSONStatusEnum - Status of the rebalance instruction
type GetRebalanceDetails200ApplicationJSONStatusEnum string

const (
	GetRebalanceDetails200ApplicationJSONStatusEnumProcessing GetRebalanceDetails200ApplicationJSONStatusEnum = "processing"
	GetRebalanceDetails200ApplicationJSONStatusEnumInProgress GetRebalanceDetails200ApplicationJSONStatusEnum = "in_progress"
	GetRebalanceDetails200ApplicationJSONStatusEnumCompleted  GetRebalanceDetails200ApplicationJSONStatusEnum = "completed"
	GetRebalanceDetails200ApplicationJSONStatusEnumFailed     GetRebalanceDetails200ApplicationJSONStatusEnum = "failed"
)

func (e *GetRebalanceDetails200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "processing":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = GetRebalanceDetails200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRebalanceDetails200ApplicationJSONStatusEnum: %s", s)
	}
}

// GetRebalanceDetails200ApplicationJSON - success
type GetRebalanceDetails200ApplicationJSON struct {
	// Date of the Rebalance created
	CreatedAt string `json:"created_at"`
	// Details of the each pot related to the rebalance instruction
	PotDetails []GetRebalanceDetails200ApplicationJSONEachPotInstructionOfTheRebalanceRequest `json:"pot_details"`
	// Unique identifier of the rebalance instruction
	RebalanceRequestID string `json:"rebalance_request_id"`
	// Status of the rebalance instruction
	Status GetRebalanceDetails200ApplicationJSONStatusEnum `json:"status"`
}

type GetRebalanceDetailsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// success
	GetRebalanceDetails200ApplicationJSONObject *GetRebalanceDetails200ApplicationJSON
	// Request is not complete and may have one or more validations errors. Please check the error message and the code
	GetRebalanceDetails400ApplicationJSONObject *GetRebalanceDetails400ApplicationJSON
	// You do not have permissions to access this resource.
	GetRebalanceDetails401ApplicationJSONObject *GetRebalanceDetails401ApplicationJSON
	// Your authentication information is missing or invalid. Please check the keys are properly set and its correct
	GetRebalanceDetails403ApplicationJSONObject *GetRebalanceDetails403ApplicationJSON
	// The specified resource was not found
	GetRebalanceDetails404ApplicationJSONObject *GetRebalanceDetails404ApplicationJSON
	// Duplicate request
	GetRebalanceDetails409ApplicationJSONObject *GetRebalanceDetails409ApplicationJSON
	// You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
	GetRebalanceDetails429ApplicationJSONObject *GetRebalanceDetails429ApplicationJSON
	// System error. Retry later. If the error persist, contact WOS support
	GetRebalanceDetails500ApplicationJSONObject *GetRebalanceDetails500ApplicationJSON
}
