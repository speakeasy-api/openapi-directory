/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * social
 */
export class Social {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Accepts a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
   */
  socialAcceptFriendRequest(
    req: operations.SocialAcceptFriendRequestRequest,
    security: operations.SocialAcceptFriendRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialAcceptFriendRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialAcceptFriendRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/Friends/Requests/Accept/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SocialAcceptFriendRequestSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialAcceptFriendRequestResponse =
        new operations.SocialAcceptFriendRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Declines a friend relationship with the target user. The user must be on your incoming friend request list, though no error will occur if they are not.
   */
  socialDeclineFriendRequest(
    req: operations.SocialDeclineFriendRequestRequest,
    security: operations.SocialDeclineFriendRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialDeclineFriendRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialDeclineFriendRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/Friends/Requests/Decline/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SocialDeclineFriendRequestSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialDeclineFriendRequestResponse =
        new operations.SocialDeclineFriendRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns your Bungie Friend list
   */
  socialGetFriendList(
    config?: AxiosRequestConfig
  ): Promise<operations.SocialGetFriendListResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/Social/Friends/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialGetFriendListResponse =
        new operations.SocialGetFriendListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns your friend request queue.
   */
  socialGetFriendRequestList(
    config?: AxiosRequestConfig
  ): Promise<operations.SocialGetFriendRequestListResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/Social/Friends/Requests/";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialGetFriendRequestListResponse =
        new operations.SocialGetFriendRequestListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the platform friend of the requested type, with additional information if they have Bungie accounts. Must have a recent login session with said platform.
   */
  socialGetPlatformFriendList(
    req: operations.SocialGetPlatformFriendListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialGetPlatformFriendListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialGetPlatformFriendListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/PlatformFriends/{friendPlatform}/{page}/",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialGetPlatformFriendListResponse =
        new operations.SocialGetPlatformFriendListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Requests a friend relationship with the target user. Any of the target user's linked membership ids are valid inputs.
   */
  socialIssueFriendRequest(
    req: operations.SocialIssueFriendRequestRequest,
    security: operations.SocialIssueFriendRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialIssueFriendRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialIssueFriendRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/Friends/Add/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SocialIssueFriendRequestSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialIssueFriendRequestResponse =
        new operations.SocialIssueFriendRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a friend relationship with the target user. The user must be on your friend list, though no error will occur if they are not.
   */
  socialRemoveFriend(
    req: operations.SocialRemoveFriendRequest,
    security: operations.SocialRemoveFriendSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialRemoveFriendResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialRemoveFriendRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/Friends/Remove/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SocialRemoveFriendSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialRemoveFriendResponse =
        new operations.SocialRemoveFriendResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }

  /**
   * Remove a friend relationship with the target user. The user must be on your outgoing request friend list, though no error will occur if they are not.
   */
  socialRemoveFriendRequest(
    req: operations.SocialRemoveFriendRequestRequest,
    security: operations.SocialRemoveFriendRequestSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SocialRemoveFriendRequestResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SocialRemoveFriendRequestRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/Social/Friends/Requests/Remove/{membershipId}/",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SocialRemoveFriendRequestSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SocialRemoveFriendRequestResponse =
        new operations.SocialRemoveFriendRequestResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `*/*`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
      }

      return res;
    });
  }
}
