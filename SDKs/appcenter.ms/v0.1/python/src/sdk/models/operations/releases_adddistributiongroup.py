"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ReleasesAddDistributionGroupSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesAddDistributionGroupRequestBody:
    r"""The release information."""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique id of the release destination"""  
    mandatory_update: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update'), 'exclude': lambda f: f is None }})
    r"""Flag to mark the release for the provided destinations as mandatory"""  
    notify_testers: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notify_testers'), 'exclude': lambda f: f is None }})
    r"""Flag to enable or disable notifications to testers"""  
    

@dataclasses.dataclass
class ReleasesAddDistributionGroupRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    release_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'release_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the release"""  
    request_body: ReleasesAddDistributionGroupRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""The release information."""  
    
class ReleasesAddDistributionGroup404ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesAddDistributionGroup404ApplicationJSON:
    r"""Release not found"""
    
    code: ReleasesAddDistributionGroup404ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    
class ReleasesAddDistributionGroup400ApplicationJSONCodeEnum(str, Enum):
    BAD_REQUEST = 'BadRequest'
    CONFLICT = 'Conflict'
    NOT_ACCEPTABLE = 'NotAcceptable'
    NOT_FOUND = 'NotFound'
    INTERNAL_SERVER_ERROR = 'InternalServerError'
    UNAUTHORIZED = 'Unauthorized'
    TOO_MANY_REQUESTS = 'TooManyRequests'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesAddDistributionGroup400ApplicationJSON:
    r"""Failure"""
    
    code: ReleasesAddDistributionGroup400ApplicationJSONCodeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReleasesAddDistributionGroup201ApplicationJSON:
    r"""Created"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique id for the release destination"""  
    mandatory_update: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mandatory_update') }})
    r"""Flag to mark the release for the provided destinations as mandatory"""  
    provisioning_status_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provisioning_status_url'), 'exclude': lambda f: f is None }})
    r"""The url to check provisioning status."""  
    

@dataclasses.dataclass
class ReleasesAddDistributionGroupResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    releases_add_distribution_group_201_application_json_object: Optional[ReleasesAddDistributionGroup201ApplicationJSON] = dataclasses.field(default=None)
    r"""Created"""  
    releases_add_distribution_group_400_application_json_object: Optional[ReleasesAddDistributionGroup400ApplicationJSON] = dataclasses.field(default=None)
    r"""Failure"""  
    releases_add_distribution_group_404_application_json_object: Optional[ReleasesAddDistributionGroup404ApplicationJSON] = dataclasses.field(default=None)
    r"""Release not found"""  
    