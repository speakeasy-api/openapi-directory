/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { VocabularyFilterMethodEnum } from "./vocabularyfiltermethodenum";
import { Expose } from "class-transformer";

/**
 * Allows additional optional settings in your request, including channel identification, alternative transcriptions, and speaker partitioning. You can use that to apply custom vocabularies to your transcription job.
 */
export class Settings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ChannelIdentification" })
  channelIdentification?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxAlternatives" })
  maxAlternatives?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "MaxSpeakerLabels" })
  maxSpeakerLabels?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ShowAlternatives" })
  showAlternatives?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ShowSpeakerLabels" })
  showSpeakerLabels?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyFilterMethod" })
  vocabularyFilterMethod?: VocabularyFilterMethodEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyFilterName" })
  vocabularyFilterName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "VocabularyName" })
  vocabularyName?: string;
}
