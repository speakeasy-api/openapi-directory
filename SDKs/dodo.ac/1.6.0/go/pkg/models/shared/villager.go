// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type VillagerAppearancesEnum string

const (
	VillagerAppearancesEnumDnm   VillagerAppearancesEnum = "DNM"
	VillagerAppearancesEnumAc    VillagerAppearancesEnum = "AC"
	VillagerAppearancesEnumEPlus VillagerAppearancesEnum = "E_PLUS"
	VillagerAppearancesEnumWw    VillagerAppearancesEnum = "WW"
	VillagerAppearancesEnumCf    VillagerAppearancesEnum = "CF"
	VillagerAppearancesEnumNl    VillagerAppearancesEnum = "NL"
	VillagerAppearancesEnumWa    VillagerAppearancesEnum = "WA"
	VillagerAppearancesEnumNh    VillagerAppearancesEnum = "NH"
	VillagerAppearancesEnumFilm  VillagerAppearancesEnum = "FILM"
	VillagerAppearancesEnumHhd   VillagerAppearancesEnum = "HHD"
	VillagerAppearancesEnumPc    VillagerAppearancesEnum = "PC"
)

func (e VillagerAppearancesEnum) ToPointer() *VillagerAppearancesEnum {
	return &e
}

func (e *VillagerAppearancesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DNM":
		fallthrough
	case "AC":
		fallthrough
	case "E_PLUS":
		fallthrough
	case "WW":
		fallthrough
	case "CF":
		fallthrough
	case "NL":
		fallthrough
	case "WA":
		fallthrough
	case "NH":
		fallthrough
	case "FILM":
		fallthrough
	case "HHD":
		fallthrough
	case "PC":
		*e = VillagerAppearancesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerAppearancesEnum: %v", v)
	}
}

// VillagerDebutEnum - The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
type VillagerDebutEnum string

const (
	VillagerDebutEnumDnm   VillagerDebutEnum = "DNM"
	VillagerDebutEnumAc    VillagerDebutEnum = "AC"
	VillagerDebutEnumEPlus VillagerDebutEnum = "E_PLUS"
	VillagerDebutEnumWw    VillagerDebutEnum = "WW"
	VillagerDebutEnumCf    VillagerDebutEnum = "CF"
	VillagerDebutEnumNl    VillagerDebutEnum = "NL"
	VillagerDebutEnumWa    VillagerDebutEnum = "WA"
	VillagerDebutEnumNh    VillagerDebutEnum = "NH"
	VillagerDebutEnumFilm  VillagerDebutEnum = "FILM"
	VillagerDebutEnumHhd   VillagerDebutEnum = "HHD"
	VillagerDebutEnumPc    VillagerDebutEnum = "PC"
)

func (e VillagerDebutEnum) ToPointer() *VillagerDebutEnum {
	return &e
}

func (e *VillagerDebutEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DNM":
		fallthrough
	case "AC":
		fallthrough
	case "E_PLUS":
		fallthrough
	case "WW":
		fallthrough
	case "CF":
		fallthrough
	case "NL":
		fallthrough
	case "WA":
		fallthrough
	case "NH":
		fallthrough
	case "FILM":
		fallthrough
	case "HHD":
		fallthrough
	case "PC":
		*e = VillagerDebutEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerDebutEnum: %v", v)
	}
}

// VillagerGenderEnum - Gender of the villager. In *Animal Crossing*, only male and female are used.
type VillagerGenderEnum string

const (
	VillagerGenderEnumMale   VillagerGenderEnum = "Male"
	VillagerGenderEnumFemale VillagerGenderEnum = "Female"
)

func (e VillagerGenderEnum) ToPointer() *VillagerGenderEnum {
	return &e
}

func (e *VillagerGenderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Male":
		fallthrough
	case "Female":
		*e = VillagerGenderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerGenderEnum: %v", v)
	}
}

// VillagerNhDetailsHobbyEnum - The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
type VillagerNhDetailsHobbyEnum string

const (
	VillagerNhDetailsHobbyEnumEducation VillagerNhDetailsHobbyEnum = "Education"
	VillagerNhDetailsHobbyEnumFashion   VillagerNhDetailsHobbyEnum = "Fashion"
	VillagerNhDetailsHobbyEnumFitness   VillagerNhDetailsHobbyEnum = "Fitness"
	VillagerNhDetailsHobbyEnumMusic     VillagerNhDetailsHobbyEnum = "Music"
	VillagerNhDetailsHobbyEnumNature    VillagerNhDetailsHobbyEnum = "Nature"
	VillagerNhDetailsHobbyEnumPlay      VillagerNhDetailsHobbyEnum = "Play"
)

func (e VillagerNhDetailsHobbyEnum) ToPointer() *VillagerNhDetailsHobbyEnum {
	return &e
}

func (e *VillagerNhDetailsHobbyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Education":
		fallthrough
	case "Fashion":
		fallthrough
	case "Fitness":
		fallthrough
	case "Music":
		fallthrough
	case "Nature":
		fallthrough
	case "Play":
		*e = VillagerNhDetailsHobbyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerNhDetailsHobbyEnum: %v", v)
	}
}

// VillagerNhDetailsSubPersonalityEnum - Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
type VillagerNhDetailsSubPersonalityEnum string

const (
	VillagerNhDetailsSubPersonalityEnumA VillagerNhDetailsSubPersonalityEnum = "A"
	VillagerNhDetailsSubPersonalityEnumB VillagerNhDetailsSubPersonalityEnum = "B"
)

func (e VillagerNhDetailsSubPersonalityEnum) ToPointer() *VillagerNhDetailsSubPersonalityEnum {
	return &e
}

func (e *VillagerNhDetailsSubPersonalityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "B":
		*e = VillagerNhDetailsSubPersonalityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerNhDetailsSubPersonalityEnum: %v", v)
	}
}

// VillagerNhDetails - An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
type VillagerNhDetails struct {
	// The default phrase a villager will use when speaking to the player.
	Catchphrase *string `json:"catchphrase,omitempty"`
	// The default clothing that the villager wears.
	Clothing *string `json:"clothing,omitempty"`
	// The variation of the clothing (usually a color).
	ClothingVariation *string `json:"clothing_variation,omitempty"`
	// The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
	FavColors []string `json:"fav_colors,omitempty"`
	// The villager's favorite clothing styles.
	FavStyles []string `json:"fav_styles,omitempty"`
	// The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
	Hobby *VillagerNhDetailsHobbyEnum `json:"hobby,omitempty"`
	// A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
	HouseExteriorURL *string `json:"house_exterior_url,omitempty"`
	// The flooring in the villager's house.
	HouseFlooring *string `json:"house_flooring,omitempty"`
	// A screenshot of the villager's house interior.
	HouseInteriorURL *string `json:"house_interior_url,omitempty"`
	// The music in the villager's house.
	HouseMusic *string `json:"house_music,omitempty"`
	// Any notes about the villager's music. If populated, this is usually "Does not contain a stereo initially", meaning that the villager's house will not play music unless provided with a stereo.
	HouseMusicNote *string `json:"house_music_note,omitempty"`
	// The wallpaper in the villager's house.
	HouseWallpaper *string `json:"house_wallpaper,omitempty"`
	// The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
	IconURL *string `json:"icon_url,omitempty"`
	// Image of the villager from *New Horizons*.
	ImageURL *string `json:"image_url,omitempty"`
	// The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
	PhotoURL *string `json:"photo_url,omitempty"`
	// The villager's quote, as found on the back of their in-game photo.
	Quote *string `json:"quote,omitempty"`
	// Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
	SubPersonality *VillagerNhDetailsSubPersonalityEnum `json:"sub-personality,omitempty"`
}

// VillagerPersonalityEnum - The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
type VillagerPersonalityEnum string

const (
	VillagerPersonalityEnumBigSister VillagerPersonalityEnum = "Big sister"
	VillagerPersonalityEnumCranky    VillagerPersonalityEnum = "Cranky"
	VillagerPersonalityEnumJock      VillagerPersonalityEnum = "Jock"
	VillagerPersonalityEnumLazy      VillagerPersonalityEnum = "Lazy"
	VillagerPersonalityEnumNormal    VillagerPersonalityEnum = "Normal"
	VillagerPersonalityEnumPeppy     VillagerPersonalityEnum = "Peppy"
	VillagerPersonalityEnumSmug      VillagerPersonalityEnum = "Smug"
	VillagerPersonalityEnumSnooty    VillagerPersonalityEnum = "Snooty"
)

func (e VillagerPersonalityEnum) ToPointer() *VillagerPersonalityEnum {
	return &e
}

func (e *VillagerPersonalityEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Big sister":
		fallthrough
	case "Cranky":
		fallthrough
	case "Jock":
		fallthrough
	case "Lazy":
		fallthrough
	case "Normal":
		fallthrough
	case "Peppy":
		fallthrough
	case "Smug":
		fallthrough
	case "Snooty":
		*e = VillagerPersonalityEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerPersonalityEnum: %v", v)
	}
}

// VillagerSignEnum - The villager's astrological star sign.
type VillagerSignEnum string

const (
	VillagerSignEnumAries       VillagerSignEnum = "Aries"
	VillagerSignEnumTaurus      VillagerSignEnum = "Taurus"
	VillagerSignEnumGemini      VillagerSignEnum = "Gemini"
	VillagerSignEnumCancer      VillagerSignEnum = "Cancer"
	VillagerSignEnumLeo         VillagerSignEnum = "Leo"
	VillagerSignEnumVirgo       VillagerSignEnum = "Virgo"
	VillagerSignEnumLibra       VillagerSignEnum = "Libra"
	VillagerSignEnumScorpio     VillagerSignEnum = "Scorpio"
	VillagerSignEnumSagittarius VillagerSignEnum = "Sagittarius"
	VillagerSignEnumCapricorn   VillagerSignEnum = "Capricorn"
	VillagerSignEnumAquarius    VillagerSignEnum = "Aquarius"
	VillagerSignEnumPisces      VillagerSignEnum = "Pisces"
)

func (e VillagerSignEnum) ToPointer() *VillagerSignEnum {
	return &e
}

func (e *VillagerSignEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Aries":
		fallthrough
	case "Taurus":
		fallthrough
	case "Gemini":
		fallthrough
	case "Cancer":
		fallthrough
	case "Leo":
		fallthrough
	case "Virgo":
		fallthrough
	case "Libra":
		fallthrough
	case "Scorpio":
		fallthrough
	case "Sagittarius":
		fallthrough
	case "Capricorn":
		fallthrough
	case "Aquarius":
		fallthrough
	case "Pisces":
		*e = VillagerSignEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerSignEnum: %v", v)
	}
}

// VillagerSpeciesEnum - The villager's species.
type VillagerSpeciesEnum string

const (
	VillagerSpeciesEnumAlligator  VillagerSpeciesEnum = "Alligator"
	VillagerSpeciesEnumAnteater   VillagerSpeciesEnum = "Anteater"
	VillagerSpeciesEnumBear       VillagerSpeciesEnum = "Bear"
	VillagerSpeciesEnumBearCub    VillagerSpeciesEnum = "Bear cub"
	VillagerSpeciesEnumBird       VillagerSpeciesEnum = "Bird"
	VillagerSpeciesEnumBull       VillagerSpeciesEnum = "Bull"
	VillagerSpeciesEnumCat        VillagerSpeciesEnum = "Cat"
	VillagerSpeciesEnumChicken    VillagerSpeciesEnum = "Chicken"
	VillagerSpeciesEnumCow        VillagerSpeciesEnum = "Cow"
	VillagerSpeciesEnumDeer       VillagerSpeciesEnum = "Deer"
	VillagerSpeciesEnumDog        VillagerSpeciesEnum = "Dog"
	VillagerSpeciesEnumDuck       VillagerSpeciesEnum = "Duck"
	VillagerSpeciesEnumEagle      VillagerSpeciesEnum = "Eagle"
	VillagerSpeciesEnumElephant   VillagerSpeciesEnum = "Elephant"
	VillagerSpeciesEnumFrog       VillagerSpeciesEnum = "Frog"
	VillagerSpeciesEnumGoat       VillagerSpeciesEnum = "Goat"
	VillagerSpeciesEnumGorilla    VillagerSpeciesEnum = "Gorilla"
	VillagerSpeciesEnumHamster    VillagerSpeciesEnum = "Hamster"
	VillagerSpeciesEnumHippo      VillagerSpeciesEnum = "Hippo"
	VillagerSpeciesEnumHorse      VillagerSpeciesEnum = "Horse"
	VillagerSpeciesEnumKoala      VillagerSpeciesEnum = "Koala"
	VillagerSpeciesEnumKangaroo   VillagerSpeciesEnum = "Kangaroo"
	VillagerSpeciesEnumLion       VillagerSpeciesEnum = "Lion"
	VillagerSpeciesEnumMonkey     VillagerSpeciesEnum = "Monkey"
	VillagerSpeciesEnumMouse      VillagerSpeciesEnum = "Mouse"
	VillagerSpeciesEnumOctopus    VillagerSpeciesEnum = "Octopus"
	VillagerSpeciesEnumOstrich    VillagerSpeciesEnum = "Ostrich"
	VillagerSpeciesEnumPenguin    VillagerSpeciesEnum = "Penguin"
	VillagerSpeciesEnumPig        VillagerSpeciesEnum = "Pig"
	VillagerSpeciesEnumRabbit     VillagerSpeciesEnum = "Rabbit"
	VillagerSpeciesEnumRhinoceros VillagerSpeciesEnum = "Rhinoceros"
	VillagerSpeciesEnumSheep      VillagerSpeciesEnum = "Sheep"
	VillagerSpeciesEnumSquirrel   VillagerSpeciesEnum = "Squirrel"
	VillagerSpeciesEnumTiger      VillagerSpeciesEnum = "Tiger"
	VillagerSpeciesEnumWolf       VillagerSpeciesEnum = "Wolf"
)

func (e VillagerSpeciesEnum) ToPointer() *VillagerSpeciesEnum {
	return &e
}

func (e *VillagerSpeciesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Alligator":
		fallthrough
	case "Anteater":
		fallthrough
	case "Bear":
		fallthrough
	case "Bear cub":
		fallthrough
	case "Bird":
		fallthrough
	case "Bull":
		fallthrough
	case "Cat":
		fallthrough
	case "Chicken":
		fallthrough
	case "Cow":
		fallthrough
	case "Deer":
		fallthrough
	case "Dog":
		fallthrough
	case "Duck":
		fallthrough
	case "Eagle":
		fallthrough
	case "Elephant":
		fallthrough
	case "Frog":
		fallthrough
	case "Goat":
		fallthrough
	case "Gorilla":
		fallthrough
	case "Hamster":
		fallthrough
	case "Hippo":
		fallthrough
	case "Horse":
		fallthrough
	case "Koala":
		fallthrough
	case "Kangaroo":
		fallthrough
	case "Lion":
		fallthrough
	case "Monkey":
		fallthrough
	case "Mouse":
		fallthrough
	case "Octopus":
		fallthrough
	case "Ostrich":
		fallthrough
	case "Penguin":
		fallthrough
	case "Pig":
		fallthrough
	case "Rabbit":
		fallthrough
	case "Rhinoceros":
		fallthrough
	case "Sheep":
		fallthrough
	case "Squirrel":
		fallthrough
	case "Tiger":
		fallthrough
	case "Wolf":
		*e = VillagerSpeciesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VillagerSpeciesEnum: %v", v)
	}
}

type Villager struct {
	// A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
	AltName *string `json:"alt_name,omitempty"`
	// List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
	Appearances []VillagerAppearancesEnum `json:"appearances,omitempty"`
	// Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
	BirthdayDay *string `json:"birthday_day,omitempty"`
	// Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
	BirthdayMonth *string `json:"birthday_month,omitempty"`
	// The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
	Clothing *string `json:"clothing,omitempty"`
	// The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
	Debut *VillagerDebutEnum `json:"debut,omitempty"`
	// Gender of the villager. In *Animal Crossing*, only male and female are used.
	Gender *VillagerGenderEnum `json:"gender,omitempty"`
	// The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
	ID *string `json:"id,omitempty"`
	// Image of the villager from the latest game the villager appeared in.
	ImageURL *string `json:"image_url,omitempty"`
	// Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
	Islander *bool `json:"islander,omitempty"`
	// Name of the villager.
	Name *string `json:"name,omitempty"`
	// An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
	NhDetails *VillagerNhDetails `json:"nh_details,omitempty"`
	// The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
	Personality *VillagerPersonalityEnum `json:"personality,omitempty"`
	// The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
	Phrase *string `json:"phrase,omitempty"`
	// Any phrases used in previous *Animal Crossing* installations. May be empty.
	PrevPhrases []string `json:"prev_phrases,omitempty"`
	// The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
	Quote *string `json:"quote,omitempty"`
	// The villager's astrological star sign.
	Sign *VillagerSignEnum `json:"sign,omitempty"`
	// The villager's species.
	Species *VillagerSpeciesEnum `json:"species,omitempty"`
	// The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
	TextColor *string `json:"text_color,omitempty"`
	// The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
	TitleColor *string `json:"title_color,omitempty"`
	// Link to the respective Nookipedia article.
	URL *string `json:"url,omitempty"`
}
