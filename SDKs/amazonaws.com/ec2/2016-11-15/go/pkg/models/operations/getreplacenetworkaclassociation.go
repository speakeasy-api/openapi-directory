// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETReplaceNetworkACLAssociationActionEnum
type GETReplaceNetworkACLAssociationActionEnum string

const (
	GETReplaceNetworkACLAssociationActionEnumReplaceNetworkACLAssociation GETReplaceNetworkACLAssociationActionEnum = "ReplaceNetworkAclAssociation"
)

func (e GETReplaceNetworkACLAssociationActionEnum) ToPointer() *GETReplaceNetworkACLAssociationActionEnum {
	return &e
}

func (e *GETReplaceNetworkACLAssociationActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ReplaceNetworkAclAssociation":
		*e = GETReplaceNetworkACLAssociationActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceNetworkACLAssociationActionEnum: %v", v)
	}
}

// GETReplaceNetworkACLAssociationVersionEnum
type GETReplaceNetworkACLAssociationVersionEnum string

const (
	GETReplaceNetworkACLAssociationVersionEnumTwoThousandAndSixteen1115 GETReplaceNetworkACLAssociationVersionEnum = "2016-11-15"
)

func (e GETReplaceNetworkACLAssociationVersionEnum) ToPointer() *GETReplaceNetworkACLAssociationVersionEnum {
	return &e
}

func (e *GETReplaceNetworkACLAssociationVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETReplaceNetworkACLAssociationVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceNetworkACLAssociationVersionEnum: %v", v)
	}
}

type GETReplaceNetworkACLAssociationRequest struct {
	Action GETReplaceNetworkACLAssociationActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The ID of the current association between the original network ACL and the subnet.
	AssociationID string `queryParam:"style=form,explode=true,name=AssociationId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The ID of the new network ACL to associate with the subnet.
	NetworkACLID      string                                     `queryParam:"style=form,explode=true,name=NetworkAclId"`
	Version           GETReplaceNetworkACLAssociationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReplaceNetworkACLAssociationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
