// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyLogo struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum string

const (
	PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnumEnterprise  PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum = "enterprise"
	PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnumCompany     PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum = "company"
	PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnumAssociation PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum = "association"
)

func (e *PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "enterprise":
		fallthrough
	case "company":
		fallthrough
	case "association":
		*e = PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum: %s", s)
	}
}

// PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBody - Space to add (except private)
type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBody struct {
	Logo            *PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyLogo    `json:"Logo,omitempty"`
	Name            *string                                                                                          `json:"Name,omitempty"`
	TemplateSpaceID *string                                                                                          `json:"TemplateSpaceId,omitempty"`
	Type            PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBodyTypeEnum `json:"Type"`
}

type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequest struct {
	// Space to add (except private)
	RequestBody PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequestBody `request:"mediaType=application/json"`
	// Id of the folder customer
	FolderID string `pathParam:"style=simple,explode=false,name=folderId"`
	// Id of the group
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the person customer
	PersonID string `pathParam:"style=simple,explode=false,name=personId"`
	// Id of the company space which contains the customer folder
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpaces201ApplicationJSON - Id of space created
type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpaces201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of space created
	PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpaces201ApplicationJSONObject *PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpaces201ApplicationJSON
}
