"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GetGenericObjectByTypeTypeEnum(str, Enum):
    r"""bioentity type"""
    GENE = 'gene'
    VARIANT = 'variant'
    GENOTYPE = 'genotype'
    PHENOTYPE = 'phenotype'
    DISEASE = 'disease'
    GOTERM = 'goterm'
    PATHWAY = 'pathway'
    ANATOMY = 'anatomy'
    SUBSTANCE = 'substance'
    INDIVIDUAL = 'individual'
    PUBLICATION = 'publication'
    MODEL = 'model'
    CASE = 'case'


@dataclasses.dataclass
class GetGenericObjectByTypeRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""id, e.g. NCBIGene:84570"""  
    type: GetGenericObjectByTypeTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'type', 'style': 'simple', 'explode': False }})
    r"""bioentity type"""  
    direct: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'direct', 'style': 'form', 'explode': True }})
    r"""Set true to only include direct associations, and false to include inferred (via subclass or subclass|part of), default=False"""  
    distinct_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'distinct_counts', 'style': 'form', 'explode': True }})
    r"""Get distinct counts for associations (to be used in conjunction with 'get_association_counts' parameter)"""  
    evidence: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'evidence', 'style': 'form', 'explode': True }})
    r"""Object id, e.g. ECO:0000501 (for IEA; Includes inferred by default) or a specific publication or other supporting object, e.g. ZFIN:ZDB-PUB-060503-2"""  
    exclude_automatic_assertions: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'exclude_automatic_assertions', 'style': 'form', 'explode': True }})
    r"""If true, excludes associations that involve IEAs (ECO:0000501)"""  
    facet: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet', 'style': 'form', 'explode': True }})
    r"""Enable faceting"""  
    facet_fields: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facet_fields', 'style': 'form', 'explode': True }})
    r"""Fields to facet on"""  
    fetch_objects: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fetch_objects', 'style': 'form', 'explode': True }})
    r"""If true, returns a distinct set of association.objects (typically ontology terms). This appears at the top level of the results payload"""  
    get_association_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'get_association_counts', 'style': 'form', 'explode': True }})
    r"""Get association counts"""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""number of rows"""  
    slim: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'slim', 'style': 'form', 'explode': True }})
    r"""Map objects up (slim) to a higher level category. Value can be ontology class ID or subset ID"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""beginning row"""  
    unselect_evidence: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'unselect_evidence', 'style': 'form', 'explode': True }})
    r"""If true, excludes evidence objects in response"""  
    use_compact_associations: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'use_compact_associations', 'style': 'form', 'explode': True }})
    r"""If true, returns results in compact associations format"""  
    

@dataclasses.dataclass
class GetGenericObjectByTypeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    