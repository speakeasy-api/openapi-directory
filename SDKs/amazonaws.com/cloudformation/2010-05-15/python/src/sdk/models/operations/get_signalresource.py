"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETSignalResourceActionEnum(str, Enum):
    SIGNAL_RESOURCE = 'SignalResource'

class GETSignalResourceStatusEnum(str, Enum):
    r"""The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update."""
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'

class GETSignalResourceVersionEnum(str, Enum):
    TWO_THOUSAND_AND_TEN_05_15 = '2010-05-15'


@dataclasses.dataclass
class GETSignalResourceRequest:
    
    action: GETSignalResourceActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    logical_resource_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'LogicalResourceId', 'style': 'form', 'explode': True }})
    r"""The logical ID of the resource that you want to signal. The logical ID is the name of the resource that given in the template."""  
    stack_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'StackName', 'style': 'form', 'explode': True }})
    r"""The stack name or unique stack ID that includes the resource that you want to signal."""  
    status: GETSignalResourceStatusEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Status', 'style': 'form', 'explode': True }})
    r"""The status of the signal, which is either success or failure. A failure signal causes CloudFormation to immediately fail the stack creation or update."""  
    unique_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'UniqueId', 'style': 'form', 'explode': True }})
    r"""A unique ID of the signal. When you signal Amazon EC2 instances or Auto Scaling groups, specify the instance ID that you are signaling as the unique ID. If you send multiple signals to a single resource (such as signaling a wait condition), each signal requires a different unique ID."""  
    version: GETSignalResourceVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETSignalResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    