/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ScimEmail } from "./scimemail";
import { ScimGroup } from "./scimgroup";
import { ScimUserName } from "./scimusername";
import { Expose, Type } from "class-transformer";

export class ScimUserMeta extends SpeakeasyBase {
  /**
   * The creation date for the user as a RFC3339 formatted string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created?: string;

  /**
   * The date the user was last modified as a RFC3339 formatted string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastModified" })
  lastModified?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  location?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "resourceType" })
  resourceType?: string;
}

export class ScimUser extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "active" })
  active?: boolean;

  /**
   * The username in Docker. Also known as the "Docker ID".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  @SpeakeasyMetadata({ elemType: ScimEmail })
  @Expose({ name: "emails" })
  @Type(() => ScimEmail)
  emails?: ScimEmail[];

  @SpeakeasyMetadata({ elemType: ScimGroup })
  @Expose({ name: "groups" })
  @Type(() => ScimGroup)
  groups?: ScimGroup[];

  /**
   * The unique identifier for the user. A v4 UUID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ScimUserMeta)
  meta?: ScimUserMeta;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  @Type(() => ScimUserName)
  name?: ScimUserName;

  @SpeakeasyMetadata()
  @Expose({ name: "schemas" })
  schemas?: string[];

  /**
   * The user's email address. This must be reachable via email.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userName" })
  userName?: string;
}
