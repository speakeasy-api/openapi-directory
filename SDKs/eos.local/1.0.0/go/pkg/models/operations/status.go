// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type StatusRequestBody struct {
	// the endpoint to get the status for, to expressed as either IP address or URL
	Endpoint string `json:"endpoint"`
}

type StatusRequest struct {
	Request *StatusRequestBody `request:"mediaType=application/json"`
}

// Status200ApplicationJSONLastHandshake - Structure holding detailed information about the connection
type Status200ApplicationJSONLastHandshake struct {
	// Agent name
	Agent   *string `json:"agent,omitempty"`
	ChainID *string `json:"chain_id,omitempty"`
	// Generation number
	Generation *int64  `json:"generation,omitempty"`
	HeadID     *string `json:"head_id,omitempty"`
	// Head number
	HeadNum *int64 `json:"head_num,omitempty"`
	// Base58 encoded EOSIO public key
	Key                     *string `json:"key,omitempty"`
	LastIrreversibleBlockID *string `json:"last_irreversible_block_id,omitempty"`
	// Last irreversible block number
	LastIrreversibleBlockNum *int64 `json:"last_irreversible_block_num,omitempty"`
	// Incremental value above a computed base
	NetworkVersion *int64  `json:"network_version,omitempty"`
	NodeID         *string `json:"node_id,omitempty"`
	// Operating system name
	Os *string `json:"os,omitempty"`
	// IP address or URL of the peer
	P2pAddress *string `json:"p2p_address,omitempty"`
	// Base58 encoded EOSIO cryptographic signature
	Sig *string `json:"sig,omitempty"`
	// Date/time string in the format YYYY-MM-DDTHH:MM:SS.sss
	Time  *string `json:"time,omitempty"`
	Token *string `json:"token,omitempty"`
}

// Status200ApplicationJSON - OK
type Status200ApplicationJSON struct {
	// True if the peer is connecting, otherwise false
	Connecting *bool `json:"connecting,omitempty"`
	// Structure holding detailed information about the connection
	LastHandshake *Status200ApplicationJSONLastHandshake `json:"last_handshake,omitempty"`
	// The IP address or URL of the peer
	Peer *string `json:"peer,omitempty"`
	// True if the peer is syncing, otherwise false
	Syncing *bool `json:"syncing,omitempty"`
}

type StatusResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// OK
	Status200ApplicationJSONObject *Status200ApplicationJSON
}
