/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * GETSubscriptionRatePlanChargesType - Container for custom fields of a Rate Plan Charge object.
 * 
 */
public class GETSubscriptionRatePlanChargesType {
    /**
     * Specifies the type of charges a specific discount applies to. 
     * 
     * This field is only used when applied to a discount charge model. If you are not using a discount charge model, the value is null.
     * 
     * Possible values:
     * 
     * * `RECURRING`
     * * `USAGE`
     * * `ONETIMERECURRING`
     * * `ONETIMEUSAGE`
     * * `RECURRINGUSAGE`
     * * `ONETIMERECURRINGUSAGE`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyDiscountTo")
    public String applyDiscountTo;
    public GETSubscriptionRatePlanChargesType withApplyDiscountTo(String applyDiscountTo) {
        this.applyDiscountTo = applyDiscountTo;
        return this;
    }
    
    /**
     * Billing cycle day (BCD), which is when bill runs generate invoices
     * for charges associated with the product rate plan charge or the account.  
     * 
     * Values:
     * 
     * * `DefaultFromCustomer`
     * * `SpecificDayofMonth(#)`
     * * `SubscriptionStartDay`
     * * `ChargeTriggerDay`
     * * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.
     * 
     * In the response data, a day-of-the-month value (`1`-`31`) appears in place of the hash sign above ("#"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingDay")
    public String billingDay;
    public GETSubscriptionRatePlanChargesType withBillingDay(String billingDay) {
        this.billingDay = billingDay;
        return this;
    }
    
    /**
     * Allows billing period to be overridden on the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriod")
    public String billingPeriod;
    public GETSubscriptionRatePlanChargesType withBillingPeriod(String billingPeriod) {
        this.billingPeriod = billingPeriod;
        return this;
    }
    
    /**
     * Possible values:
     * 
     * * `AlignToCharge`
     * * `AlignToSubscriptionStart`
     * * `AlignToTermStart`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingPeriodAlignment")
    public String billingPeriodAlignment;
    public GETSubscriptionRatePlanChargesType withBillingPeriodAlignment(String billingPeriodAlignment) {
        this.billingPeriodAlignment = billingPeriodAlignment;
        return this;
    }
    
    /**
     * The billing timing for the charge. This field is only used if the `ratePlanChargeType` value is `Recurring`.
     * 
     * Possible values are:
     * 
     * * `In Advance`
     * * `In Arrears`
     * 
     * **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billingTiming")
    public String billingTiming;
    public GETSubscriptionRatePlanChargesType withBillingTiming(String billingTiming) {
        this.billingTiming = billingTiming;
        return this;
    }
    
    /**
     * Container for charge model configuration data.
     * 
     * **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. These charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chargeModelConfiguration")
    public ChargeModelConfigurationType chargeModelConfiguration;
    public GETSubscriptionRatePlanChargesType withChargeModelConfiguration(ChargeModelConfigurationType chargeModelConfiguration) {
        this.chargeModelConfiguration = chargeModelConfiguration;
        return this;
    }
    
    /**
     * The date through which a customer has been billed for the charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("chargedThroughDate")
    public LocalDate chargedThroughDate;
    public GETSubscriptionRatePlanChargesType withChargedThroughDate(LocalDate chargedThroughDate) {
        this.chargedThroughDate = chargedThroughDate;
        return this;
    }
    
    /**
     * Currency used by the account. For example, `USD` or `EUR`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public GETSubscriptionRatePlanChargesType withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Description of the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public GETSubscriptionRatePlanChargesType withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The amount of the discount.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    public Double discountAmount;
    public GETSubscriptionRatePlanChargesType withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * Container for the application details about a discount rate plan charge. 
     * 
     * Only discount rate plan charges have values in this field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountApplyDetails")
    public GETDiscountApplyDetailsType[] discountApplyDetails;
    public GETSubscriptionRatePlanChargesType withDiscountApplyDetails(GETDiscountApplyDetailsType[] discountApplyDetails) {
        this.discountApplyDetails = discountApplyDetails;
        return this;
    }
    
    /**
     * The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.
     * 
     * For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountClass")
    public String discountClass;
    public GETSubscriptionRatePlanChargesType withDiscountClass(String discountClass) {
        this.discountClass = discountClass;
        return this;
    }
    
    /**
     * The level of the discount. Values: `RatePlan`, `Subscription`, `Account`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountLevel")
    public String discountLevel;
    public GETSubscriptionRatePlanChargesType withDiscountLevel(String discountLevel) {
        this.discountLevel = discountLevel;
        return this;
    }
    
    /**
     * The amount of the discount as a percentage.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountPercentage")
    public Double discountPercentage;
    public GETSubscriptionRatePlanChargesType withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     * The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dmrc")
    public Double dmrc;
    public GETSubscriptionRatePlanChargesType withDmrc(Double dmrc) {
        this.dmrc = dmrc;
        return this;
    }
    
    /**
     * A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("done")
    public Boolean done;
    public GETSubscriptionRatePlanChargesType withDone(Boolean done) {
        this.done = done;
        return this;
    }
    
    /**
     * After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dtcv")
    public Double dtcv;
    public GETSubscriptionRatePlanChargesType withDtcv(Double dtcv) {
        this.dtcv = dtcv;
        return this;
    }
    
    /**
     * The effective end date of the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("effectiveEndDate")
    public LocalDate effectiveEndDate;
    public GETSubscriptionRatePlanChargesType withEffectiveEndDate(LocalDate effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
        return this;
    }
    
    /**
     * The effective start date of the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("effectiveStartDate")
    public LocalDate effectiveStartDate;
    public GETSubscriptionRatePlanChargesType withEffectiveStartDate(LocalDate effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
        return this;
    }
    
    /**
     * Defines when the charge ends after the charge trigger date.
     * 
     * If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.
     * 
     * Values:
     * 
     * * `Subscription_End`
     * * `Fixed_Period`
     * * `Specific_End_Date`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDateCondition")
    public String endDateCondition;
    public GETSubscriptionRatePlanChargesType withEndDateCondition(String endDateCondition) {
        this.endDateCondition = endDateCondition;
        return this;
    }
    
    /**
     * Rate plan charge ID.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public GETSubscriptionRatePlanChargesType withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Specifies the number of units in the base set of units.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includedUnits")
    public Double includedUnits;
    public GETSubscriptionRatePlanChargesType withIncludedUnits(Double includedUnits) {
        this.includedUnits = includedUnits;
        return this;
    }
    
    /**
     * List price base; possible values are:
     * 
     * * `Per_Billing_Period`
     * * `Per_Month`
     * * `Per_Week`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listPriceBase")
    public String listPriceBase;
    public GETSubscriptionRatePlanChargesType withListPriceBase(String listPriceBase) {
        this.listPriceBase = listPriceBase;
        return this;
    }
    
    /**
     * Charge model; possible values are:
     * 
     * * `FlatFee`
     * * `PerUnit`
     * * `Overage`
     * * `Volume`
     * * `Tiered`
     * * `TieredWithOverage`
     * * `DiscountFixedAmount`
     * * `DiscountPercentage`
     * * `MultiAttributePricing`
     * * `PreratedPerUnit`
     * * `PreratedPricing`
     * * `HighWatermarkVolumePricing`
     * * `HighWatermarkTieredPricing`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public GETSubscriptionRatePlanChargesType withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * Monthly recurring revenue of the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mrr")
    public Double mrr;
    public GETSubscriptionRatePlanChargesType withMrr(Double mrr) {
        this.mrr = mrr;
        return this;
    }
    
    /**
     * Charge name.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public GETSubscriptionRatePlanChargesType withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Charge number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    public String number;
    public GETSubscriptionRatePlanChargesType withNumber(String number) {
        this.number = number;
        return this;
    }
    
    /**
     * Specifies the number of periods to use when calculating charges in an overage smoothing charge model.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberOfPeriods")
    public Long numberOfPeriods;
    public GETSubscriptionRatePlanChargesType withNumberOfPeriods(Long numberOfPeriods) {
        this.numberOfPeriods = numberOfPeriods;
        return this;
    }
    
    /**
     * The original ID of the rate plan charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalChargeId")
    public String originalChargeId;
    public GETSubscriptionRatePlanChargesType withOriginalChargeId(String originalChargeId) {
        this.originalChargeId = originalChargeId;
        return this;
    }
    
    /**
     * Determines when to calculate overage charges.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageCalculationOption")
    public String overageCalculationOption;
    public GETSubscriptionRatePlanChargesType withOverageCalculationOption(String overageCalculationOption) {
        this.overageCalculationOption = overageCalculationOption;
        return this;
    }
    
    /**
     * The price for units over the allowed amount.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overagePrice")
    public Double overagePrice;
    public GETSubscriptionRatePlanChargesType withOveragePrice(Double overagePrice) {
        this.overagePrice = overagePrice;
        return this;
    }
    
    /**
     * Determines whether to credit the customer with unused units of usage.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overageUnusedUnitsCreditOption")
    public String overageUnusedUnitsCreditOption;
    public GETSubscriptionRatePlanChargesType withOverageUnusedUnitsCreditOption(String overageUnusedUnitsCreditOption) {
        this.overageUnusedUnitsCreditOption = overageUnusedUnitsCreditOption;
        return this;
    }
    
    /**
     * The price associated with the rate plan charge expressed as a decimal.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("price")
    public Double price;
    public GETSubscriptionRatePlanChargesType withPrice(Double price) {
        this.price = price;
        return this;
    }
    
    /**
     * When the following is true:
     * 
     * 1. AutomatedPriceChange setting is on
     * 
     * 2. Charge type is not one-time
     * 
     * 3. Charge model is not discount percentage
     * 
     * Then an automatic price change can have a value for when a termed subscription is renewed. 
     * 
     * Values (one of the following):
     * 
     * * `NoChange` (default)
     * * `SpecificPercentageValue`
     * * `UseLatestProductCatalogPricing`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChangeOption")
    public String priceChangeOption;
    public GETSubscriptionRatePlanChargesType withPriceChangeOption(String priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
    /**
     * A planned future price increase amount as a percentage.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceIncreasePercentage")
    public Double priceIncreasePercentage;
    public GETSubscriptionRatePlanChargesType withPriceIncreasePercentage(Double priceIncreasePercentage) {
        this.priceIncreasePercentage = priceIncreasePercentage;
        return this;
    }
    
    /**
     * Concise description of rate plan charge model.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pricingSummary")
    public String pricingSummary;
    public GETSubscriptionRatePlanChargesType withPricingSummary(String pricingSummary) {
        this.pricingSummary = pricingSummary;
        return this;
    }
    
    /**
     * The date until when charges have been processed. When billing in arrears, such as usage, this field value is the the same as the `ChargedThroughDate` value. This date is the earliest date when a charge can be amended.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("processedThroughDate")
    public LocalDate processedThroughDate;
    public GETSubscriptionRatePlanChargesType withProcessedThroughDate(LocalDate processedThroughDate) {
        this.processedThroughDate = processedThroughDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("productRatePlanChargeId")
    public String productRatePlanChargeId;
    public GETSubscriptionRatePlanChargesType withProductRatePlanChargeId(String productRatePlanChargeId) {
        this.productRatePlanChargeId = productRatePlanChargeId;
        return this;
    }
    
    /**
     * The quantity of units, such as the number of authors in a hosted wiki service. Valid for all charge models except for Flat Fee pricing.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Double quantity;
    public GETSubscriptionRatePlanChargesType withQuantity(Double quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * Specifies a rating group based on which usage records are rated.
     * 
     * Possible values:
     * 
     * - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period.
     * - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date. 
     * - `ByUsageRecord`: The rating is based on each usage record.
     * - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`).
     * - `ByGroupId`: The rating is based on all the usages in a custom group.
     * 
     * **Note:** 
     * - The `ByBillingPeriod` value can be applied for all charge models. 
     * - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models. 
     * - The `ByGroupId` value is only available if you have the Active Rating feature enabled.
     * - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingGroup")
    public String ratingGroup;
    public GETSubscriptionRatePlanChargesType withRatingGroup(String ratingGroup) {
        this.ratingGroup = ratingGroup;
        return this;
    }
    
    /**
     * The identifying number of the subscription rate plan segment. Segments are numbered sequentially, starting with 1.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("segment")
    public Long segment;
    public GETSubscriptionRatePlanChargesType withSegment(Long segment) {
        this.segment = segment;
        return this;
    }
    
    /**
     * Specifies when revenue recognition begins. When charge model is `Overage` or `TieredWithOverage`, `smoothingModel` will be one of the following values:
     * 
     * * `ContractEffectiveDate`
     * * `ServiceActivationDate`
     * * `CustomerAcceptanceDate`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smoothingModel")
    public String smoothingModel;
    public GETSubscriptionRatePlanChargesType withSmoothingModel(String smoothingModel) {
        this.smoothingModel = smoothingModel;
        return this;
    }
    
    /**
     * Customizes the number of month or week for the charges billing period. This field is required if you set the value of the `BillingPeriod` field to `Specific_Months` or `Specific_Weeks`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specificBillingPeriod")
    public Long specificBillingPeriod;
    public GETSubscriptionRatePlanChargesType withSpecificBillingPeriod(Long specificBillingPeriod) {
        this.specificBillingPeriod = specificBillingPeriod;
        return this;
    }
    
    /**
     * The specific date on which the charge ends. If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("specificEndDate")
    public LocalDate specificEndDate;
    public GETSubscriptionRatePlanChargesType withSpecificEndDate(LocalDate specificEndDate) {
        this.specificEndDate = specificEndDate;
        return this;
    }
    
    /**
     * The total contract value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tcv")
    public Double tcv;
    public GETSubscriptionRatePlanChargesType withTcv(Double tcv) {
        this.tcv = tcv;
        return this;
    }
    
    /**
     * One or many defined ranges with distinct pricing.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiers")
    public GETTierType[] tiers;
    public GETSubscriptionRatePlanChargesType withTiers(GETTierType[] tiers) {
        this.tiers = tiers;
        return this;
    }
    
    /**
     * The date that the rate plan charge will be triggered.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("triggerDate")
    public LocalDate triggerDate;
    public GETSubscriptionRatePlanChargesType withTriggerDate(LocalDate triggerDate) {
        this.triggerDate = triggerDate;
        return this;
    }
    
    /**
     * The event that will cause the rate plan charge to be triggered.
     * 
     * Possible values: 
     * 
     * * `ContractEffective`
     * * `ServiceActivation`
     * * `CustomerAcceptance`
     * * `SpecificDate`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerEvent")
    public String triggerEvent;
    public GETSubscriptionRatePlanChargesType withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     * Charge type. Possible values are: `OneTime`, `Recurring`, `Usage`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public GETSubscriptionRatePlanChargesType withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Specifies the rate to credit a customer for unused units of usage. This field is applicable only for overage charge models when the 
     * `OverageUnusedUnitsCreditOption` field value is `CreditBySpecificRate`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unusedUnitsCreditRates")
    public Double unusedUnitsCreditRates;
    public GETSubscriptionRatePlanChargesType withUnusedUnitsCreditRates(Double unusedUnitsCreditRates) {
        this.unusedUnitsCreditRates = unusedUnitsCreditRates;
        return this;
    }
    
    /**
     * Specifies the units to measure usage. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uom")
    public String uom;
    public GETSubscriptionRatePlanChargesType withUom(String uom) {
        this.uom = uom;
        return this;
    }
    
    /**
     * Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.
     * 
     * If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriods")
    public String upToPeriods;
    public GETSubscriptionRatePlanChargesType withUpToPeriods(String upToPeriods) {
        this.upToPeriods = upToPeriods;
        return this;
    }
    
    /**
     * The period type used to define when the charge ends. 
     * 
     * Values:
     * 
     * * `Billing_Periods`
     * * `Days`
     * * `Weeks`
     * * `Months`
     * * `Years`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("upToPeriodsType")
    public String upToPeriodsType;
    public GETSubscriptionRatePlanChargesType withUpToPeriodsType(String upToPeriodsType) {
        this.upToPeriodsType = upToPeriodsType;
        return this;
    }
    
    /**
     * Determines how Zuora processes usage records for per-unit usage charges. 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usageRecordRatingOption")
    public String usageRecordRatingOption;
    public GETSubscriptionRatePlanChargesType withUsageRecordRatingOption(String usageRecordRatingOption) {
        this.usageRecordRatingOption = usageRecordRatingOption;
        return this;
    }
    
    /**
     * Rate plan charge revision number.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public Long version;
    public GETSubscriptionRatePlanChargesType withVersion(Long version) {
        this.version = version;
        return this;
    }
    
}
