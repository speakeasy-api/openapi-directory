<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ZoneQueuedResources 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves an aggregated list of all of the queued resources in a project across all zones.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListResponse
     */
	public function computeZoneQueuedResourcesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/queuedResources', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queuedResourcesAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueuedResourcesAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels a QueuedResource. Only a resource in ACCEPTED state may be cancelled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelResponse
     */
	public function computeZoneQueuedResourcesCancel(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/queuedResources/{queuedResource}/cancel', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a QueuedResource. For a QueuedResource in ACCEPTED state, call cancel on the resource before deleting, to make sure no VMs have been provisioned and may require cleaning up. For a QueuedResource in PROVISIONING state the request to delete is registered for execution following the provisioning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteResponse
     */
	public function computeZoneQueuedResourcesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/queuedResources/{queuedResource}', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the specified QueuedResource resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetResponse
     */
	public function computeZoneQueuedResourcesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/queuedResources/{queuedResource}', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queuedResource = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueuedResource', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a QueuedResource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertResponse
     */
	public function computeZoneQueuedResourcesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/queuedResources', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "queuedResource", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of QueuedResource resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListResponse
     */
	public function computeZoneQueuedResourcesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/zones/{zone}/queuedResources', \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeZoneQueuedResourcesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->queuedResourceList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\QueuedResourceList', 'json');
            }
        }

        return $response;
    }
}