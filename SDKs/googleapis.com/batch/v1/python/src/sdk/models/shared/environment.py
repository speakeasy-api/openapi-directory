"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import kmsenvmap as shared_kmsenvmap
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Environment:
    r"""An Environment describes a collection of environment variables to set when executing Tasks."""
    
    encrypted_variables: Optional[shared_kmsenvmap.KMSEnvMap] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encryptedVariables'), 'exclude': lambda f: f is None }})  
    secret_variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretVariables'), 'exclude': lambda f: f is None }})
    r"""A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable."""  
    variables: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('variables'), 'exclude': lambda f: f is None }})
    r"""A map of environment variable names to values."""  
    