// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ActionEntityActionEnum - Type of action
type ActionEntityActionEnum string

const (
	ActionEntityActionEnumCreate            ActionEntityActionEnum = "create"
	ActionEntityActionEnumRead              ActionEntityActionEnum = "read"
	ActionEntityActionEnumUpdate            ActionEntityActionEnum = "update"
	ActionEntityActionEnumDestroy           ActionEntityActionEnum = "destroy"
	ActionEntityActionEnumMove              ActionEntityActionEnum = "move"
	ActionEntityActionEnumLogin             ActionEntityActionEnum = "login"
	ActionEntityActionEnumFailedlogin       ActionEntityActionEnum = "failedlogin"
	ActionEntityActionEnumCopy              ActionEntityActionEnum = "copy"
	ActionEntityActionEnumUserCreate        ActionEntityActionEnum = "user_create"
	ActionEntityActionEnumUserUpdate        ActionEntityActionEnum = "user_update"
	ActionEntityActionEnumUserDestroy       ActionEntityActionEnum = "user_destroy"
	ActionEntityActionEnumGroupCreate       ActionEntityActionEnum = "group_create"
	ActionEntityActionEnumGroupUpdate       ActionEntityActionEnum = "group_update"
	ActionEntityActionEnumGroupDestroy      ActionEntityActionEnum = "group_destroy"
	ActionEntityActionEnumPermissionCreate  ActionEntityActionEnum = "permission_create"
	ActionEntityActionEnumPermissionDestroy ActionEntityActionEnum = "permission_destroy"
	ActionEntityActionEnumAPIKeyCreate      ActionEntityActionEnum = "api_key_create"
	ActionEntityActionEnumAPIKeyUpdate      ActionEntityActionEnum = "api_key_update"
	ActionEntityActionEnumAPIKeyDestroy     ActionEntityActionEnum = "api_key_destroy"
)

func (e *ActionEntityActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "create":
		fallthrough
	case "read":
		fallthrough
	case "update":
		fallthrough
	case "destroy":
		fallthrough
	case "move":
		fallthrough
	case "login":
		fallthrough
	case "failedlogin":
		fallthrough
	case "copy":
		fallthrough
	case "user_create":
		fallthrough
	case "user_update":
		fallthrough
	case "user_destroy":
		fallthrough
	case "group_create":
		fallthrough
	case "group_update":
		fallthrough
	case "group_destroy":
		fallthrough
	case "permission_create":
		fallthrough
	case "permission_destroy":
		fallthrough
	case "api_key_create":
		fallthrough
	case "api_key_update":
		fallthrough
	case "api_key_destroy":
		*e = ActionEntityActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionEntityActionEnum: %s", s)
	}
}

// ActionEntityFailureTypeEnum - Failure type.  If action was a user login or session failure, why did it fail?
type ActionEntityFailureTypeEnum string

const (
	ActionEntityFailureTypeEnumExpiredTrial                      ActionEntityFailureTypeEnum = "expired_trial"
	ActionEntityFailureTypeEnumAccountOverdue                    ActionEntityFailureTypeEnum = "account_overdue"
	ActionEntityFailureTypeEnumLockedOut                         ActionEntityFailureTypeEnum = "locked_out"
	ActionEntityFailureTypeEnumIPMismatch                        ActionEntityFailureTypeEnum = "ip_mismatch"
	ActionEntityFailureTypeEnumPasswordMismatch                  ActionEntityFailureTypeEnum = "password_mismatch"
	ActionEntityFailureTypeEnumSiteMismatch                      ActionEntityFailureTypeEnum = "site_mismatch"
	ActionEntityFailureTypeEnumUsernameNotFound                  ActionEntityFailureTypeEnum = "username_not_found"
	ActionEntityFailureTypeEnumNone                              ActionEntityFailureTypeEnum = "none"
	ActionEntityFailureTypeEnumNoFtpPermission                   ActionEntityFailureTypeEnum = "no_ftp_permission"
	ActionEntityFailureTypeEnumNoWebPermission                   ActionEntityFailureTypeEnum = "no_web_permission"
	ActionEntityFailureTypeEnumNoDirectory                       ActionEntityFailureTypeEnum = "no_directory"
	ActionEntityFailureTypeEnumErrnoEnoent                       ActionEntityFailureTypeEnum = "errno_enoent"
	ActionEntityFailureTypeEnumNoSftpPermission                  ActionEntityFailureTypeEnum = "no_sftp_permission"
	ActionEntityFailureTypeEnumNoDavPermission                   ActionEntityFailureTypeEnum = "no_dav_permission"
	ActionEntityFailureTypeEnumNoRestapiPermission               ActionEntityFailureTypeEnum = "no_restapi_permission"
	ActionEntityFailureTypeEnumKeyMismatch                       ActionEntityFailureTypeEnum = "key_mismatch"
	ActionEntityFailureTypeEnumRegionMismatch                    ActionEntityFailureTypeEnum = "region_mismatch"
	ActionEntityFailureTypeEnumExpiredAccess                     ActionEntityFailureTypeEnum = "expired_access"
	ActionEntityFailureTypeEnumDesktopIPMismatch                 ActionEntityFailureTypeEnum = "desktop_ip_mismatch"
	ActionEntityFailureTypeEnumDesktopAPIKeyNotUsedQuicklyEnough ActionEntityFailureTypeEnum = "desktop_api_key_not_used_quickly_enough"
	ActionEntityFailureTypeEnumDisabled                          ActionEntityFailureTypeEnum = "disabled"
	ActionEntityFailureTypeEnumCountryMismatch                   ActionEntityFailureTypeEnum = "country_mismatch"
)

func (e *ActionEntityFailureTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "expired_trial":
		fallthrough
	case "account_overdue":
		fallthrough
	case "locked_out":
		fallthrough
	case "ip_mismatch":
		fallthrough
	case "password_mismatch":
		fallthrough
	case "site_mismatch":
		fallthrough
	case "username_not_found":
		fallthrough
	case "none":
		fallthrough
	case "no_ftp_permission":
		fallthrough
	case "no_web_permission":
		fallthrough
	case "no_directory":
		fallthrough
	case "errno_enoent":
		fallthrough
	case "no_sftp_permission":
		fallthrough
	case "no_dav_permission":
		fallthrough
	case "no_restapi_permission":
		fallthrough
	case "key_mismatch":
		fallthrough
	case "region_mismatch":
		fallthrough
	case "expired_access":
		fallthrough
	case "desktop_ip_mismatch":
		fallthrough
	case "desktop_api_key_not_used_quickly_enough":
		fallthrough
	case "disabled":
		fallthrough
	case "country_mismatch":
		*e = ActionEntityFailureTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionEntityFailureTypeEnum: %s", s)
	}
}

// ActionEntityInterfaceEnum - Interface on which this action occurred.
type ActionEntityInterfaceEnum string

const (
	ActionEntityInterfaceEnumWeb           ActionEntityInterfaceEnum = "web"
	ActionEntityInterfaceEnumFtp           ActionEntityInterfaceEnum = "ftp"
	ActionEntityInterfaceEnumRobot         ActionEntityInterfaceEnum = "robot"
	ActionEntityInterfaceEnumJsapi         ActionEntityInterfaceEnum = "jsapi"
	ActionEntityInterfaceEnumWebdesktopapi ActionEntityInterfaceEnum = "webdesktopapi"
	ActionEntityInterfaceEnumSftp          ActionEntityInterfaceEnum = "sftp"
	ActionEntityInterfaceEnumDav           ActionEntityInterfaceEnum = "dav"
	ActionEntityInterfaceEnumDesktop       ActionEntityInterfaceEnum = "desktop"
	ActionEntityInterfaceEnumRestapi       ActionEntityInterfaceEnum = "restapi"
	ActionEntityInterfaceEnumScim          ActionEntityInterfaceEnum = "scim"
	ActionEntityInterfaceEnumOffice        ActionEntityInterfaceEnum = "office"
	ActionEntityInterfaceEnumMobile        ActionEntityInterfaceEnum = "mobile"
)

func (e *ActionEntityInterfaceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "web":
		fallthrough
	case "ftp":
		fallthrough
	case "robot":
		fallthrough
	case "jsapi":
		fallthrough
	case "webdesktopapi":
		fallthrough
	case "sftp":
		fallthrough
	case "dav":
		fallthrough
	case "desktop":
		fallthrough
	case "restapi":
		fallthrough
	case "scim":
		fallthrough
	case "office":
		fallthrough
	case "mobile":
		*e = ActionEntityInterfaceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionEntityInterfaceEnum: %s", s)
	}
}

// ActionEntity - List site full action history.
type ActionEntity struct {
	// Type of action
	Action *ActionEntityActionEnum `json:"action,omitempty"`
	// The destination path for this action, if applicable
	Destination *string `json:"destination,omitempty"`
	// Friendly displayed output
	Display *string `json:"display,omitempty"`
	// Failure type.  If action was a user login or session failure, why did it fail?
	FailureType *ActionEntityFailureTypeEnum `json:"failure_type,omitempty"`
	// Action ID
	ID *int `json:"id,omitempty"`
	// Interface on which this action occurred.
	Interface *ActionEntityInterfaceEnum `json:"interface,omitempty"`
	// IP Address that performed this action
	IP *string `json:"ip,omitempty"`
	// Path
	Path *string `json:"path,omitempty"`
	// The source path for this action, if applicable
	Source *string `json:"source,omitempty"`
	// Targets
	Targets []string `json:"targets,omitempty"`
	// User ID
	UserID *int `json:"user_id,omitempty"`
	// Username
	Username *string `json:"username,omitempty"`
	// Action occurrence date/time
	When *time.Time `json:"when,omitempty"`
}
