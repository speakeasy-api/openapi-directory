// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

var ListChallengeServerList = []string{
	"https://verify.twilio.com",
}

type ListChallengeSecurity struct {
	Password string `security:"scheme,type=http,subtype=basic,name=password"`
	Username string `security:"scheme,type=http,subtype=basic,name=username"`
}

type ListChallengeRequest struct {
	// The unique SID identifier of the Factor.
	FactorSid *string `queryParam:"style=form,explode=true,name=FactorSid"`
	// Customer unique identity for the Entity owner of the Challenge. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
	Identity string `pathParam:"style=simple,explode=false,name=Identity"`
	// The desired sort order of the Challenges list. One of `asc` or `desc` for ascending and descending respectively. Defaults to `asc`.
	Order *shared.ChallengeEnumListOrdersEnum `queryParam:"style=form,explode=true,name=Order"`
	// The page index. This value is simply for client state.
	Page *int64 `queryParam:"style=form,explode=true,name=Page"`
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int64 `queryParam:"style=form,explode=true,name=PageSize"`
	// The page token. This is provided by the API.
	PageToken *string `queryParam:"style=form,explode=true,name=PageToken"`
	// The unique SID identifier of the Service.
	ServiceSid string `pathParam:"style=simple,explode=false,name=ServiceSid"`
	// The Status of the Challenges to fetch. One of `pending`, `expired`, `approved` or `denied`.
	Status *shared.ChallengeEnumChallengeStatusesEnum `queryParam:"style=form,explode=true,name=Status"`
}

type ListChallengeListChallengeResponseMeta struct {
	FirstPageURL    *string `json:"first_page_url,omitempty"`
	Key             *string `json:"key,omitempty"`
	NextPageURL     *string `json:"next_page_url,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	PageSize        *int64  `json:"page_size,omitempty"`
	PreviousPageURL *string `json:"previous_page_url,omitempty"`
	URL             *string `json:"url,omitempty"`
}

// ListChallengeListChallengeResponse - OK
type ListChallengeListChallengeResponse struct {
	Challenges []shared.VerifyV2ServiceEntityChallenge `json:"challenges,omitempty"`
	Meta       *ListChallengeListChallengeResponseMeta `json:"meta,omitempty"`
}

type ListChallengeResponse struct {
	ContentType string
	// OK
	ListChallengeResponse *ListChallengeListChallengeResponse
	StatusCode            int
	RawResponse           *http.Response
}
