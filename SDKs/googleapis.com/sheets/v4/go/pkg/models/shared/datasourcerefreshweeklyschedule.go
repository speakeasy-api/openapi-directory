// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type DataSourceRefreshWeeklyScheduleDaysOfWeekEnum string

const (
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumDayOfWeekUnspecified DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "DAY_OF_WEEK_UNSPECIFIED"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumMonday               DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "MONDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumTuesday              DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "TUESDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumWednesday            DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "WEDNESDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumThursday             DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "THURSDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumFriday               DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "FRIDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumSaturday             DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "SATURDAY"
	DataSourceRefreshWeeklyScheduleDaysOfWeekEnumSunday               DataSourceRefreshWeeklyScheduleDaysOfWeekEnum = "SUNDAY"
)

func (e DataSourceRefreshWeeklyScheduleDaysOfWeekEnum) ToPointer() *DataSourceRefreshWeeklyScheduleDaysOfWeekEnum {
	return &e
}

func (e *DataSourceRefreshWeeklyScheduleDaysOfWeekEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DAY_OF_WEEK_UNSPECIFIED":
		fallthrough
	case "MONDAY":
		fallthrough
	case "TUESDAY":
		fallthrough
	case "WEDNESDAY":
		fallthrough
	case "THURSDAY":
		fallthrough
	case "FRIDAY":
		fallthrough
	case "SATURDAY":
		fallthrough
	case "SUNDAY":
		*e = DataSourceRefreshWeeklyScheduleDaysOfWeekEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSourceRefreshWeeklyScheduleDaysOfWeekEnum: %v", v)
	}
}

// DataSourceRefreshWeeklySchedule - A weekly schedule for data to refresh on specific days in a given time interval.
type DataSourceRefreshWeeklySchedule struct {
	// Days of the week to refresh. At least one day must be specified.
	DaysOfWeek []DataSourceRefreshWeeklyScheduleDaysOfWeekEnum `json:"daysOfWeek,omitempty"`
	// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	StartTime *TimeOfDay `json:"startTime,omitempty"`
}
