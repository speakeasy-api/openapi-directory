/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DatasetAction } from "./datasetaction";
import { DatasetContentDeliveryRule } from "./datasetcontentdeliveryrule";
import { DatasetStatusEnum } from "./datasetstatusenum";
import { DatasetTrigger } from "./datasettrigger";
import { LateDataRule } from "./latedatarule";
import { RetentionPeriod } from "./retentionperiod";
import { VersioningConfiguration } from "./versioningconfiguration";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Information about a dataset.
 */
export class Dataset extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: DatasetAction })
  @Expose({ name: "actions" })
  @Type(() => DatasetAction)
  actions?: DatasetAction[];

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata({ elemType: DatasetContentDeliveryRule })
  @Expose({ name: "contentDeliveryRules" })
  @Type(() => DatasetContentDeliveryRule)
  contentDeliveryRules?: DatasetContentDeliveryRule[];

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateTime?: Date;

  @SpeakeasyMetadata({ elemType: LateDataRule })
  @Expose({ name: "lateDataRules" })
  @Type(() => LateDataRule)
  lateDataRules?: LateDataRule[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "retentionPeriod" })
  @Type(() => RetentionPeriod)
  retentionPeriod?: RetentionPeriod;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: DatasetStatusEnum;

  @SpeakeasyMetadata({ elemType: DatasetTrigger })
  @Expose({ name: "triggers" })
  @Type(() => DatasetTrigger)
  triggers?: DatasetTrigger[];

  @SpeakeasyMetadata()
  @Expose({ name: "versioningConfiguration" })
  @Type(() => VersioningConfiguration)
  versioningConfiguration?: VersioningConfiguration;
}
