// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteFilterXAmzTargetEnum
type DeleteFilterXAmzTargetEnum string

const (
	DeleteFilterXAmzTargetEnumAmazonPersonalizeDeleteFilter DeleteFilterXAmzTargetEnum = "AmazonPersonalize.DeleteFilter"
)

func (e DeleteFilterXAmzTargetEnum) ToPointer() *DeleteFilterXAmzTargetEnum {
	return &e
}

func (e *DeleteFilterXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonPersonalize.DeleteFilter":
		*e = DeleteFilterXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteFilterXAmzTargetEnum: %v", v)
	}
}

type DeleteFilterRequest struct {
	DeleteFilterRequest shared.DeleteFilterRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          DeleteFilterXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteFilterResponse struct {
	ContentType string
	// InvalidInputException
	InvalidInputException interface{}
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
