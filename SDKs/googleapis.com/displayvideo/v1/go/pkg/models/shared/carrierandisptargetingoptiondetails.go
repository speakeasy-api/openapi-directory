// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CarrierAndIspTargetingOptionDetailsTypeEnum - Output only. The type indicating if it's carrier or ISP.
type CarrierAndIspTargetingOptionDetailsTypeEnum string

const (
	CarrierAndIspTargetingOptionDetailsTypeEnumCarrierAndIspTypeUnspecified CarrierAndIspTargetingOptionDetailsTypeEnum = "CARRIER_AND_ISP_TYPE_UNSPECIFIED"
	CarrierAndIspTargetingOptionDetailsTypeEnumCarrierAndIspTypeIsp         CarrierAndIspTargetingOptionDetailsTypeEnum = "CARRIER_AND_ISP_TYPE_ISP"
	CarrierAndIspTargetingOptionDetailsTypeEnumCarrierAndIspTypeCarrier     CarrierAndIspTargetingOptionDetailsTypeEnum = "CARRIER_AND_ISP_TYPE_CARRIER"
)

func (e CarrierAndIspTargetingOptionDetailsTypeEnum) ToPointer() *CarrierAndIspTargetingOptionDetailsTypeEnum {
	return &e
}

func (e *CarrierAndIspTargetingOptionDetailsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CARRIER_AND_ISP_TYPE_UNSPECIFIED":
		fallthrough
	case "CARRIER_AND_ISP_TYPE_ISP":
		fallthrough
	case "CARRIER_AND_ISP_TYPE_CARRIER":
		*e = CarrierAndIspTargetingOptionDetailsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CarrierAndIspTargetingOptionDetailsTypeEnum: %v", v)
	}
}

// CarrierAndIspTargetingOptionDetails - Represents a targetable carrier or ISP. This will be populated in the carrier_and_isp_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`.
type CarrierAndIspTargetingOptionDetails struct {
	// Output only. The display name of the carrier or ISP.
	DisplayName *string `json:"displayName,omitempty"`
	// Output only. The type indicating if it's carrier or ISP.
	Type *CarrierAndIspTargetingOptionDetailsTypeEnum `json:"type,omitempty"`
}
