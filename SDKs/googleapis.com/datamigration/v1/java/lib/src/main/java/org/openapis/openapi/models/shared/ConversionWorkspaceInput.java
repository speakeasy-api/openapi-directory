/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConversionWorkspaceInput - The main conversion workspace resource entity.
 */
public class ConversionWorkspaceInput {
    /**
     * The type and version of a source or destination database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destination")
    public DatabaseEngineInfo destination;

    public ConversionWorkspaceInput withDestination(DatabaseEngineInfo destination) {
        this.destination = destination;
        return this;
    }
    
    /**
     * The display name for the workspace.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public ConversionWorkspaceInput withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("globalSettings")
    public java.util.Map<String, String> globalSettings;

    public ConversionWorkspaceInput withGlobalSettings(java.util.Map<String, String> globalSettings) {
        this.globalSettings = globalSettings;
        return this;
    }
    
    /**
     * Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public ConversionWorkspaceInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The type and version of a source or destination database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    public DatabaseEngineInfo source;

    public ConversionWorkspaceInput withSource(DatabaseEngineInfo source) {
        this.source = source;
        return this;
    }
    
    public ConversionWorkspaceInput(){}
}
