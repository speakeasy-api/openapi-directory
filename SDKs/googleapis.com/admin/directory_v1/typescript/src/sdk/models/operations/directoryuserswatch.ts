/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class DirectoryUsersWatchSecurityOption1 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersWatchSecurityOption2 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersWatchSecurityOption3 extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oauth2c: string;
}

export class DirectoryUsersWatchSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "security, option=true" })
  option1?: DirectoryUsersWatchSecurityOption1;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option2?: DirectoryUsersWatchSecurityOption2;

  @SpeakeasyMetadata({ data: "security, option=true" })
  option3?: DirectoryUsersWatchSecurityOption3;
}

/**
 * Events to watch for.
 */
export enum DirectoryUsersWatchEventEnum {
  Add = "add",
  Delete = "delete",
  MakeAdmin = "makeAdmin",
  Undelete = "undelete",
  Update = "update",
}

/**
 * Column to use for sorting results
 */
export enum DirectoryUsersWatchOrderByEnum {
  Email = "email",
  FamilyName = "familyName",
  GivenName = "givenName",
}

/**
 * What subset of fields to fetch for this user.
 */
export enum DirectoryUsersWatchProjectionEnum {
  Basic = "basic",
  Custom = "custom",
  Full = "full",
}

/**
 * Whether to return results in ascending or descending order.
 */
export enum DirectoryUsersWatchSortOrderEnum {
  Ascending = "ASCENDING",
  Descending = "DESCENDING",
}

/**
 * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
 */
export enum DirectoryUsersWatchViewTypeEnum {
  AdminView = "admin_view",
  DomainPublic = "domain_public",
}

export class DirectoryUsersWatchRequest extends SpeakeasyBase {
  /**
   * V1 error format.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=$.xgafv",
  })
  dollarXgafv?: shared.XgafvEnum;

  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  channel?: shared.Channel;

  /**
   * OAuth access token.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=access_token",
  })
  accessToken?: string;

  /**
   * Data format for response.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=alt" })
  alt?: shared.AltEnum;

  /**
   * JSONP
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=callback",
  })
  callback?: string;

  /**
   * Comma-separated list of schema names. All fields from these schemas are fetched. This should only be set when projection=custom.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=customFieldMask",
  })
  customFieldMask?: string;

  /**
   * Immutable ID of the Google Workspace account. In case of multi-domain, to fetch all users for a customer, fill this field instead of domain.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=customer",
  })
  customer?: string;

  /**
   * Name of the domain. Fill this field to get users from only this domain. To return all users in a multi-domain fill customer field instead."
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=domain",
  })
  domain?: string;

  /**
   * Events to watch for.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=event" })
  event?: DirectoryUsersWatchEventEnum;

  /**
   * Selector specifying which fields to include in a partial response.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: string;

  /**
   * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=key" })
  key?: string;

  /**
   * Maximum number of results to return.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * OAuth 2.0 token for the current user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=oauth_token",
  })
  oauthToken?: string;

  /**
   * Column to use for sorting results
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderBy",
  })
  orderBy?: DirectoryUsersWatchOrderByEnum;

  /**
   * Token to specify next page in the list
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=pageToken",
  })
  pageToken?: string;

  /**
   * Returns response with indentations and line breaks.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=prettyPrint",
  })
  prettyPrint?: boolean;

  /**
   * What subset of fields to fetch for this user.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projection",
  })
  projection?: DirectoryUsersWatchProjectionEnum;

  /**
   * Query string search. Should be of the form "". Complete documentation is at https: //developers.google.com/admin-sdk/directory/v1/guides/search-users
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query?: string;

  /**
   * Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=quotaUser",
  })
  quotaUser?: string;

  /**
   * If set to true, retrieves the list of deleted users. (Default: false)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=showDeleted",
  })
  showDeleted?: string;

  /**
   * Whether to return results in ascending or descending order.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sortOrder",
  })
  sortOrder?: DirectoryUsersWatchSortOrderEnum;

  /**
   * Legacy upload protocol for media (e.g. "media", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=uploadType",
  })
  uploadType?: string;

  /**
   * Upload protocol for media (e.g. "raw", "multipart").
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=upload_protocol",
  })
  uploadProtocol?: string;

  /**
   * Whether to fetch the administrator-only or domain-wide public view of the user. For more information, see [Retrieve a user as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=viewType",
  })
  viewType?: DirectoryUsersWatchViewTypeEnum;
}

export class DirectoryUsersWatchResponse extends SpeakeasyBase {
  /**
   * Successful response
   */
  @SpeakeasyMetadata()
  channel?: shared.Channel;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
