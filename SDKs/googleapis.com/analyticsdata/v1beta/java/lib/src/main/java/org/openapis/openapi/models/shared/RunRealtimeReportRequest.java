/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * RunRealtimeReportRequest - The request to generate a realtime report.
 */
public class RunRealtimeReportRequest {
    /**
     * To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensionFilter")
    public FilterExpression dimensionFilter;
    public RunRealtimeReportRequest withDimensionFilter(FilterExpression dimensionFilter) {
        this.dimensionFilter = dimensionFilter;
        return this;
    }
    
    /**
     * The dimensions requested and displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimensions")
    public Dimension[] dimensions;
    public RunRealtimeReportRequest withDimensions(Dimension[] dimensions) {
        this.dimensions = dimensions;
        return this;
    }
    
    /**
     * The number of rows to return. If unspecified, 10,000 rows are returned. The API returns a maximum of 100,000 rows per request, no matter how many you ask for. `limit` must be positive. The API can also return fewer rows than the requested `limit`, if there aren't as many dimension values as the `limit`. For instance, there are fewer than 300 possible values for the dimension `country`, so when reporting on only `country`, you can't get more than 300 rows, even if you set `limit` to a higher value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    public String limit;
    public RunRealtimeReportRequest withLimit(String limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Aggregation of metrics. Aggregated metric values will be shown in rows where the dimension_values are set to "RESERVED_(MetricAggregation)".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricAggregations")
    public RunRealtimeReportRequestMetricAggregationsEnum[] metricAggregations;
    public RunRealtimeReportRequest withMetricAggregations(RunRealtimeReportRequestMetricAggregationsEnum[] metricAggregations) {
        this.metricAggregations = metricAggregations;
        return this;
    }
    
    /**
     * To express dimension or metric filters. The fields in the same FilterExpression need to be either all dimensions or all metrics.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metricFilter")
    public FilterExpression metricFilter;
    public RunRealtimeReportRequest withMetricFilter(FilterExpression metricFilter) {
        this.metricFilter = metricFilter;
        return this;
    }
    
    /**
     * The metrics requested and displayed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metrics")
    public Metric[] metrics;
    public RunRealtimeReportRequest withMetrics(Metric[] metrics) {
        this.metrics = metrics;
        return this;
    }
    
    /**
     * The minute ranges of event data to read. If unspecified, one minute range for the last 30 minutes will be used. If multiple minute ranges are requested, each response row will contain a zero based minute range index. If two minute ranges overlap, the event data for the overlapping minutes is included in the response rows for both minute ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minuteRanges")
    public MinuteRange[] minuteRanges;
    public RunRealtimeReportRequest withMinuteRanges(MinuteRange[] minuteRanges) {
        this.minuteRanges = minuteRanges;
        return this;
    }
    
    /**
     * Specifies how rows are ordered in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderBys")
    public OrderBy[] orderBys;
    public RunRealtimeReportRequest withOrderBys(OrderBy[] orderBys) {
        this.orderBys = orderBys;
        return this;
    }
    
    /**
     * Toggles whether to return the current state of this Analytics Property's Realtime quota. Quota is returned in [PropertyQuota](#PropertyQuota).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("returnPropertyQuota")
    public Boolean returnPropertyQuota;
    public RunRealtimeReportRequest withReturnPropertyQuota(Boolean returnPropertyQuota) {
        this.returnPropertyQuota = returnPropertyQuota;
        return this;
    }
    
}
