/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
 */
export class UpdateSlotTypeRequestBodyCompositeSlotTypeSetting extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: shared.SubSlotTypeComposition })
  @Expose({ name: "subSlots" })
  @Type(() => shared.SubSlotTypeComposition)
  subSlots?: shared.SubSlotTypeComposition[];
}

/**
 * Provides information about the external source of the slot type's definition.
 */
export class UpdateSlotTypeRequestBodyExternalSourceSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "grammarSlotTypeSetting" })
  @Type(() => shared.GrammarSlotTypeSetting)
  grammarSlotTypeSetting?: shared.GrammarSlotTypeSetting;
}

/**
 * Contains settings used by Amazon Lex to select a slot value.
 */
export class UpdateSlotTypeRequestBodyValueSelectionSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "advancedRecognitionSetting" })
  @Type(() => shared.AdvancedRecognitionSetting)
  advancedRecognitionSetting?: shared.AdvancedRecognitionSetting;

  @SpeakeasyMetadata()
  @Expose({ name: "regexFilter" })
  @Type(() => shared.SlotValueRegexFilter)
  regexFilter?: shared.SlotValueRegexFilter;

  @SpeakeasyMetadata()
  @Expose({ name: "resolutionStrategy" })
  resolutionStrategy?: shared.SlotValueResolutionStrategyEnum;
}

export class UpdateSlotTypeRequestBody extends SpeakeasyBase {
  /**
   * A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compositeSlotTypeSetting" })
  @Type(() => UpdateSlotTypeRequestBodyCompositeSlotTypeSetting)
  compositeSlotTypeSetting?: UpdateSlotTypeRequestBodyCompositeSlotTypeSetting;

  /**
   * The new description of the slot type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Provides information about the external source of the slot type's definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "externalSourceSetting" })
  @Type(() => UpdateSlotTypeRequestBodyExternalSourceSetting)
  externalSourceSetting?: UpdateSlotTypeRequestBodyExternalSourceSetting;

  /**
   * The new built-in slot type that should be used as the parent of this slot type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentSlotTypeSignature" })
  parentSlotTypeSignature?: string;

  /**
   * The new name of the slot type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slotTypeName" })
  slotTypeName: string;

  /**
   * A new list of values and their optional synonyms that define the values that the slot type can take.
   */
  @SpeakeasyMetadata({ elemType: shared.SlotTypeValue })
  @Expose({ name: "slotTypeValues" })
  @Type(() => shared.SlotTypeValue)
  slotTypeValues?: shared.SlotTypeValue[];

  /**
   * Contains settings used by Amazon Lex to select a slot value.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueSelectionSetting" })
  @Type(() => UpdateSlotTypeRequestBodyValueSelectionSetting)
  valueSelectionSetting?: UpdateSlotTypeRequestBodyValueSelectionSetting;
}

export class UpdateSlotTypeRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateSlotTypeRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The identifier of the bot that contains the slot type.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botId",
  })
  botId: string;

  /**
   * The version of the bot that contains the slot type. Must be <code>DRAFT</code>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botVersion",
  })
  botVersion: string;

  /**
   * The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=localeId",
  })
  localeId: string;

  /**
   * The unique identifier of the slot type to update.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=slotTypeId",
  })
  slotTypeId: string;
}

export class UpdateSlotTypeResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateSlotTypeResponse?: shared.UpdateSlotTypeResponse;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
