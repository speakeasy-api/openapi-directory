/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Value } from "./value";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A value that Amazon Lex V2 uses to fulfill an intent.
 */
export class Slot extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Slot })
  @Expose({ name: "subSlots" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Slot> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Slot);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  subSlots?: Record<string, Slot>;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  @Type(() => Value)
  value?: Value;

  @SpeakeasyMetadata({ elemType: Slot })
  @Expose({ name: "values" })
  @Type(() => Slot)
  values?: Slot[];
}
