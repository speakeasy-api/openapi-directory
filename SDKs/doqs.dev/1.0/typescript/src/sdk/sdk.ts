/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { Templates } from "./templates";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.doqs.dev/v1"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

export class SDK {
  public templates: Templates;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.templates = new Templates(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }

  /**
   * Create Template
   */
  createTemplateDesignerTemplatesPost(
    req: shared.CreateOrUpdateTemplateRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTemplateDesignerTemplatesPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateOrUpdateTemplateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/designer/templates/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTemplateDesignerTemplatesPostResponse =
        new operations.CreateTemplateDesignerTemplatesPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkDesignerTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkDesignerTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Delete
   */
  deleteDesignerTemplatesIdDelete(
    req: operations.DeleteDesignerTemplatesIdDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteDesignerTemplatesIdDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteDesignerTemplatesIdDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/designer/templates/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteDesignerTemplatesIdDeleteResponse =
        new operations.DeleteDesignerTemplatesIdDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkNoneType = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkNoneType
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Generate Pdf
   */
  generatePdfDesignerTemplatesIdGeneratePost(
    req: operations.GeneratePdfDesignerTemplatesIdGeneratePostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GeneratePdfDesignerTemplatesIdGeneratePostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GeneratePdfDesignerTemplatesIdGeneratePostRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/designer/templates/{id}/generate",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "generatePDFPayload",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GeneratePdfDesignerTemplatesIdGeneratePostResponse =
        new operations.GeneratePdfDesignerTemplatesIdGeneratePostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generatePdfDesignerTemplatesIdGeneratePost200ApplicationJSONAny =
              httpRes?.data;
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Templates
   */
  listTemplatesDesignerTemplatesGet(
    req: operations.ListTemplatesDesignerTemplatesGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTemplatesDesignerTemplatesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTemplatesDesignerTemplatesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/designer/templates/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTemplatesDesignerTemplatesGetResponse =
        new operations.ListTemplatesDesignerTemplatesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkListFillrEntitiesDesignerTemplateDesignerTemplate =
              utils.objectToClass(
                httpRes?.data,
                shared.ResponseOkListFillrEntitiesDesignerTemplateDesignerTemplate
              );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List Templates
   */
  listTemplatesDesignerTemplatesIdGet(
    req: operations.ListTemplatesDesignerTemplatesIdGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ListTemplatesDesignerTemplatesIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListTemplatesDesignerTemplatesIdGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/designer/templates/{id}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListTemplatesDesignerTemplatesIdGetResponse =
        new operations.ListTemplatesDesignerTemplatesIdGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkDesignerTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkDesignerTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Preview
   */
  previewDesignerTemplatesPreviewPost(
    req: shared.PreviewModel,
    config?: AxiosRequestConfig
  ): Promise<operations.PreviewDesignerTemplatesPreviewPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.PreviewModel(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/designer/templates/preview";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PreviewDesignerTemplatesPreviewPostResponse =
        new operations.PreviewDesignerTemplatesPreviewPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkPreviewResponse = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkPreviewResponse
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update Template
   */
  updateTemplateDesignerTemplatesIdPut(
    req: operations.UpdateTemplateDesignerTemplatesIdPutRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTemplateDesignerTemplatesIdPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTemplateDesignerTemplatesIdPutRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/designer/templates/{id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "createOrUpdateTemplateRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTemplateDesignerTemplatesIdPutResponse =
        new operations.UpdateTemplateDesignerTemplatesIdPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseOkDesignerTemplate = utils.objectToClass(
              httpRes?.data,
              shared.ResponseOkDesignerTemplate
            );
          }
          break;
        case (httpRes?.status >= 400 && httpRes?.status < 500) ||
          (httpRes?.status >= 500 && httpRes?.status < 600):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.responseError = utils.objectToClass(
              httpRes?.data,
              shared.ResponseError
            );
          }
          break;
      }

      return res;
    });
  }
}
