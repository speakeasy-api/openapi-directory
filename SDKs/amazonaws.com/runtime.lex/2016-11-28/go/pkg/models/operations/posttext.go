// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type PostTextRequestBody struct {
	// <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
	ActiveContexts []shared.ActiveContext `json:"activeContexts,omitempty"`
	// The text that the user entered (Amazon Lex interprets this text).
	InputText string `json:"inputText"`
	// <p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p>
	RequestAttributes map[string]string `json:"requestAttributes,omitempty"`
	// <p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p>
	SessionAttributes map[string]string `json:"sessionAttributes,omitempty"`
}

type PostTextRequest struct {
	RequestBody       PostTextRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The alias of the Amazon Lex bot.
	BotAlias string `pathParam:"style=simple,explode=false,name=botAlias"`
	// The name of the Amazon Lex bot.
	BotName string `pathParam:"style=simple,explode=false,name=botName"`
	// <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p> <p>To decide the user ID to use for your application, consider the following factors.</p> <ul> <li> <p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p> </li> <li> <p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p> </li> <li> <p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p> </li> <li> <p>A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p> </li> </ul>
	UserID string `pathParam:"style=simple,explode=false,name=userId"`
}

type PostTextResponse struct {
	// BadGatewayException
	BadGatewayException interface{}
	// BadRequestException
	BadRequestException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// DependencyFailedException
	DependencyFailedException interface{}
	// InternalFailureException
	InternalFailureException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// LoopDetectedException
	LoopDetectedException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	PostTextResponse *shared.PostTextResponse
	StatusCode       int
	RawResponse      *http.Response
}
