"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Domains:
    r"""Manage your domains."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def configure_domain(self, request: operations.ConfigureDomainRequest) -> operations.ConfigureDomainResponse:
        r"""Edit domain name renew state
        Allowed if can_toggle_renew is true on the domain detail:<br /><ul><li>If there are no unpaid invoices for the domain name anymore.</li><li>If the renewal won't start within 1 month.</li></ul>
        Allowed if the requesting user has the finance role.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ConfigureDomainRequest, base_url, '/domains/{domainName}/renew', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "edit_domain_will_renew_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ConfigureDomainRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ConfigureDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def edit_name_servers(self, request: operations.EditNameServersRequest) -> operations.EditNameServersResponse:
        r"""Edit domain name servers"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditNameServersRequest, base_url, '/domains/{domainName}/nameservers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "edit_name_servers", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.EditNameServersRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditNameServersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_domain(self, request: operations.GetDomainRequest) -> operations.GetDomainResponse:
        r"""Details of a domain"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDomainRequest, base_url, '/domains/{domainName}', request)
        
        query_params = utils.get_query_params(operations.GetDomainRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDomainResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DomainDetail])
                res.domain_detail = out

        return res

    def get_domains(self, request: operations.GetDomainsRequest) -> operations.GetDomainsResponse:
        r"""Overviews of domains"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/domains'
        
        query_params = utils.get_query_params(operations.GetDomainsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDomainsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Domain]])
                res.domains = out

        return res

    def register(self, request: shared.RegisterDomain) -> operations.RegisterResponse:
        r"""Register a domain
        Registers an available domain.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/domains/registrations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def transfer(self, request: shared.TransferDomain) -> operations.TransferResponse:
        r"""Transfer a domain
        Transfers a domain with a transfer authorization code.<br />Domain names with extension '.ca' are only available for registrants with country code 'CA'.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/domains/transfers'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TransferResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    