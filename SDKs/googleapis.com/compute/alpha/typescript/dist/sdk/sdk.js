"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var acceleratortypes_1 = require("./acceleratortypes");
var addresses_1 = require("./addresses");
var autoscalers_1 = require("./autoscalers");
var backendbuckets_1 = require("./backendbuckets");
var backendservices_1 = require("./backendservices");
var disks_1 = require("./disks");
var disktypes_1 = require("./disktypes");
var externalvpngateways_1 = require("./externalvpngateways");
var firewallpolicies_1 = require("./firewallpolicies");
var firewalls_1 = require("./firewalls");
var forwardingrules_1 = require("./forwardingrules");
var futurereservations_1 = require("./futurereservations");
var globaladdresses_1 = require("./globaladdresses");
var globalforwardingrules_1 = require("./globalforwardingrules");
var globalnetworkendpointgroups_1 = require("./globalnetworkendpointgroups");
var globaloperations_1 = require("./globaloperations");
var globalorganizationoperations_1 = require("./globalorganizationoperations");
var globalpublicdelegatedprefixes_1 = require("./globalpublicdelegatedprefixes");
var healthchecks_1 = require("./healthchecks");
var httphealthchecks_1 = require("./httphealthchecks");
var httpshealthchecks_1 = require("./httpshealthchecks");
var imagefamilyviews_1 = require("./imagefamilyviews");
var images_1 = require("./images");
var instancegroupmanagerresizerequests_1 = require("./instancegroupmanagerresizerequests");
var instancegroupmanagers_1 = require("./instancegroupmanagers");
var instancegroups_1 = require("./instancegroups");
var instances_1 = require("./instances");
var instancesettings_1 = require("./instancesettings");
var instancetemplates_1 = require("./instancetemplates");
var instantsnapshots_1 = require("./instantsnapshots");
var interconnectattachments_1 = require("./interconnectattachments");
var interconnectlocations_1 = require("./interconnectlocations");
var interconnectremotelocations_1 = require("./interconnectremotelocations");
var interconnects_1 = require("./interconnects");
var licensecodes_1 = require("./licensecodes");
var licenses_1 = require("./licenses");
var machineimages_1 = require("./machineimages");
var machinetypes_1 = require("./machinetypes");
var networkattachments_1 = require("./networkattachments");
var networkedgesecurityservices_1 = require("./networkedgesecurityservices");
var networkendpointgroups_1 = require("./networkendpointgroups");
var networkfirewallpolicies_1 = require("./networkfirewallpolicies");
var networks_1 = require("./networks");
var nodegroups_1 = require("./nodegroups");
var nodetemplates_1 = require("./nodetemplates");
var nodetypes_1 = require("./nodetypes");
var organizationsecuritypolicies_1 = require("./organizationsecuritypolicies");
var packetmirrorings_1 = require("./packetmirrorings");
var projects_1 = require("./projects");
var publicadvertisedprefixes_1 = require("./publicadvertisedprefixes");
var publicdelegatedprefixes_1 = require("./publicdelegatedprefixes");
var regionautoscalers_1 = require("./regionautoscalers");
var regionbackendservices_1 = require("./regionbackendservices");
var regioncommitments_1 = require("./regioncommitments");
var regiondisks_1 = require("./regiondisks");
var regiondisktypes_1 = require("./regiondisktypes");
var regionhealthchecks_1 = require("./regionhealthchecks");
var regionhealthcheckservices_1 = require("./regionhealthcheckservices");
var regioninstancegroupmanagers_1 = require("./regioninstancegroupmanagers");
var regioninstancegroups_1 = require("./regioninstancegroups");
var regioninstances_1 = require("./regioninstances");
var regioninstancetemplates_1 = require("./regioninstancetemplates");
var regioninstantsnapshots_1 = require("./regioninstantsnapshots");
var regionnetworkendpointgroups_1 = require("./regionnetworkendpointgroups");
var regionnetworkfirewallpolicies_1 = require("./regionnetworkfirewallpolicies");
var regionnotificationendpoints_1 = require("./regionnotificationendpoints");
var regionoperations_1 = require("./regionoperations");
var regions_1 = require("./regions");
var regionsecuritypolicies_1 = require("./regionsecuritypolicies");
var regionsslcertificates_1 = require("./regionsslcertificates");
var regionsslpolicies_1 = require("./regionsslpolicies");
var regiontargethttpproxies_1 = require("./regiontargethttpproxies");
var regiontargethttpsproxies_1 = require("./regiontargethttpsproxies");
var regiontargettcpproxies_1 = require("./regiontargettcpproxies");
var regionurlmaps_1 = require("./regionurlmaps");
var reservations_1 = require("./reservations");
var resourcepolicies_1 = require("./resourcepolicies");
var routers_1 = require("./routers");
var routes_1 = require("./routes");
var securitypolicies_1 = require("./securitypolicies");
var serviceattachments_1 = require("./serviceattachments");
var snapshots_1 = require("./snapshots");
var sslcertificates_1 = require("./sslcertificates");
var sslpolicies_1 = require("./sslpolicies");
var subnetworks_1 = require("./subnetworks");
var targetgrpcproxies_1 = require("./targetgrpcproxies");
var targethttpproxies_1 = require("./targethttpproxies");
var targethttpsproxies_1 = require("./targethttpsproxies");
var targetinstances_1 = require("./targetinstances");
var targetpools_1 = require("./targetpools");
var targetsslproxies_1 = require("./targetsslproxies");
var targettcpproxies_1 = require("./targettcpproxies");
var targetvpngateways_1 = require("./targetvpngateways");
var urlmaps_1 = require("./urlmaps");
var vpngateways_1 = require("./vpngateways");
var vpntunnels_1 = require("./vpntunnels");
var zoneoperations_1 = require("./zoneoperations");
var zonequeuedresources_1 = require("./zonequeuedresources");
var zones_1 = require("./zones");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://compute.googleapis.com/compute/alpha",
];
/**
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * @see {@link https://cloud.google.com/compute/}
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.acceleratorTypes = new acceleratortypes_1.AcceleratorTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.addresses = new addresses_1.Addresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.autoscalers = new autoscalers_1.Autoscalers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.backendBuckets = new backendbuckets_1.BackendBuckets(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.backendServices = new backendservices_1.BackendServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.diskTypes = new disktypes_1.DiskTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.disks = new disks_1.Disks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.externalVpnGateways = new externalvpngateways_1.ExternalVpnGateways(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firewallPolicies = new firewallpolicies_1.FirewallPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.firewalls = new firewalls_1.Firewalls(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.forwardingRules = new forwardingrules_1.ForwardingRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.futureReservations = new futurereservations_1.FutureReservations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalAddresses = new globaladdresses_1.GlobalAddresses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalForwardingRules = new globalforwardingrules_1.GlobalForwardingRules(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalNetworkEndpointGroups = new globalnetworkendpointgroups_1.GlobalNetworkEndpointGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalOperations = new globaloperations_1.GlobalOperations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalOrganizationOperations = new globalorganizationoperations_1.GlobalOrganizationOperations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.globalPublicDelegatedPrefixes = new globalpublicdelegatedprefixes_1.GlobalPublicDelegatedPrefixes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.healthChecks = new healthchecks_1.HealthChecks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.httpHealthChecks = new httphealthchecks_1.HttpHealthChecks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.httpsHealthChecks = new httpshealthchecks_1.HttpsHealthChecks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.imageFamilyViews = new imagefamilyviews_1.ImageFamilyViews(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.images = new images_1.Images(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instanceGroupManagerResizeRequests =
            new instancegroupmanagerresizerequests_1.InstanceGroupManagerResizeRequests(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instanceGroupManagers = new instancegroupmanagers_1.InstanceGroupManagers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instanceGroups = new instancegroups_1.InstanceGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instanceSettings = new instancesettings_1.InstanceSettings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instanceTemplates = new instancetemplates_1.InstanceTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instances = new instances_1.Instances(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.instantSnapshots = new instantsnapshots_1.InstantSnapshots(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.interconnectAttachments = new interconnectattachments_1.InterconnectAttachments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.interconnectLocations = new interconnectlocations_1.InterconnectLocations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.interconnectRemoteLocations = new interconnectremotelocations_1.InterconnectRemoteLocations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.interconnects = new interconnects_1.Interconnects(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenseCodes = new licensecodes_1.LicenseCodes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.licenses = new licenses_1.Licenses(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.machineImages = new machineimages_1.MachineImages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.machineTypes = new machinetypes_1.MachineTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkAttachments = new networkattachments_1.NetworkAttachments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkEdgeSecurityServices = new networkedgesecurityservices_1.NetworkEdgeSecurityServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkEndpointGroups = new networkendpointgroups_1.NetworkEndpointGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networkFirewallPolicies = new networkfirewallpolicies_1.NetworkFirewallPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.networks = new networks_1.Networks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.nodeGroups = new nodegroups_1.NodeGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.nodeTemplates = new nodetemplates_1.NodeTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.nodeTypes = new nodetypes_1.NodeTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.organizationSecurityPolicies = new organizationsecuritypolicies_1.OrganizationSecurityPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.packetMirrorings = new packetmirrorings_1.PacketMirrorings(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.projects = new projects_1.Projects(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publicAdvertisedPrefixes = new publicadvertisedprefixes_1.PublicAdvertisedPrefixes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.publicDelegatedPrefixes = new publicdelegatedprefixes_1.PublicDelegatedPrefixes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionAutoscalers = new regionautoscalers_1.RegionAutoscalers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionBackendServices = new regionbackendservices_1.RegionBackendServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionCommitments = new regioncommitments_1.RegionCommitments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionDiskTypes = new regiondisktypes_1.RegionDiskTypes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionDisks = new regiondisks_1.RegionDisks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionHealthCheckServices = new regionhealthcheckservices_1.RegionHealthCheckServices(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionHealthChecks = new regionhealthchecks_1.RegionHealthChecks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionInstanceGroupManagers = new regioninstancegroupmanagers_1.RegionInstanceGroupManagers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionInstanceGroups = new regioninstancegroups_1.RegionInstanceGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionInstanceTemplates = new regioninstancetemplates_1.RegionInstanceTemplates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionInstances = new regioninstances_1.RegionInstances(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionInstantSnapshots = new regioninstantsnapshots_1.RegionInstantSnapshots(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionNetworkEndpointGroups = new regionnetworkendpointgroups_1.RegionNetworkEndpointGroups(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionNetworkFirewallPolicies = new regionnetworkfirewallpolicies_1.RegionNetworkFirewallPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionNotificationEndpoints = new regionnotificationendpoints_1.RegionNotificationEndpoints(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionOperations = new regionoperations_1.RegionOperations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionSecurityPolicies = new regionsecuritypolicies_1.RegionSecurityPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionSslCertificates = new regionsslcertificates_1.RegionSslCertificates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionSslPolicies = new regionsslpolicies_1.RegionSslPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionTargetHttpProxies = new regiontargethttpproxies_1.RegionTargetHttpProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionTargetHttpsProxies = new regiontargethttpsproxies_1.RegionTargetHttpsProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionTargetTcpProxies = new regiontargettcpproxies_1.RegionTargetTcpProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regionUrlMaps = new regionurlmaps_1.RegionUrlMaps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.regions = new regions_1.Regions(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.reservations = new reservations_1.Reservations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.resourcePolicies = new resourcepolicies_1.ResourcePolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routers = new routers_1.Routers(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.routes = new routes_1.Routes(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.securityPolicies = new securitypolicies_1.SecurityPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.serviceAttachments = new serviceattachments_1.ServiceAttachments(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.snapshots = new snapshots_1.Snapshots(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sslCertificates = new sslcertificates_1.SslCertificates(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sslPolicies = new sslpolicies_1.SslPolicies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.subnetworks = new subnetworks_1.Subnetworks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetGrpcProxies = new targetgrpcproxies_1.TargetGrpcProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetHttpProxies = new targethttpproxies_1.TargetHttpProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetHttpsProxies = new targethttpsproxies_1.TargetHttpsProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetInstances = new targetinstances_1.TargetInstances(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetPools = new targetpools_1.TargetPools(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetSslProxies = new targetsslproxies_1.TargetSslProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetTcpProxies = new targettcpproxies_1.TargetTcpProxies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.targetVpnGateways = new targetvpngateways_1.TargetVpnGateways(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.urlMaps = new urlmaps_1.UrlMaps(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vpnGateways = new vpngateways_1.VpnGateways(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.vpnTunnels = new vpntunnels_1.VpnTunnels(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.zoneOperations = new zoneoperations_1.ZoneOperations(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.zoneQueuedResources = new zonequeuedresources_1.ZoneQueuedResources(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.zones = new zones_1.Zones(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
