"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleCloudOrgpolicyV2CustomConstraintActionTypeEnum(str, Enum):
    r"""Allow or deny type."""
    ACTION_TYPE_UNSPECIFIED = 'ACTION_TYPE_UNSPECIFIED'
    ALLOW = 'ALLOW'
    DENY = 'DENY'

class GoogleCloudOrgpolicyV2CustomConstraintMethodTypesEnum(str, Enum):
    METHOD_TYPE_UNSPECIFIED = 'METHOD_TYPE_UNSPECIFIED'
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudOrgpolicyV2CustomConstraint:
    r"""A custom constraint defined by customers which can *only* be applied to the given resource types and organization. By creating a custom constraint, customers can apply policies of this custom constraint. *Creating a custom constraint itself does NOT apply any policy enforcement*."""
    
    action_type: Optional[GoogleCloudOrgpolicyV2CustomConstraintActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionType'), 'exclude': lambda f: f is None }})
    r"""Allow or deny type."""  
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Org policy condition/expression. For example: `resource.instanceName.matches(\\"[production|test]_.*_(\d)+\\")'` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Detailed information about this custom policy constraint. The max length of the description is 2000 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""One line display name for the UI. The max length of the display_name is 200 characters."""  
    method_types: Optional[list[GoogleCloudOrgpolicyV2CustomConstraintMethodTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methodTypes'), 'exclude': lambda f: f is None }})
    r"""All the operations being applied for this constraint."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms` The max length is 70 characters and the minimum length is 1. Note that the prefix `organizations/{organization_id}/customConstraints/` is not counted."""  
    resource_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceTypes'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource instance type on which this policy applies. Format will be of the form : \\"/\\" Example: * `compute.googleapis.com/Instance`."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudOrgpolicyV2CustomConstraintInput:
    r"""A custom constraint defined by customers which can *only* be applied to the given resource types and organization. By creating a custom constraint, customers can apply policies of this custom constraint. *Creating a custom constraint itself does NOT apply any policy enforcement*."""
    
    action_type: Optional[GoogleCloudOrgpolicyV2CustomConstraintActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('actionType'), 'exclude': lambda f: f is None }})
    r"""Allow or deny type."""  
    condition: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('condition'), 'exclude': lambda f: f is None }})
    r"""Org policy condition/expression. For example: `resource.instanceName.matches(\\"[production|test]_.*_(\d)+\\")'` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Detailed information about this custom policy constraint. The max length of the description is 2000 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""One line display name for the UI. The max length of the display_name is 200 characters."""  
    method_types: Optional[list[GoogleCloudOrgpolicyV2CustomConstraintMethodTypesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('methodTypes'), 'exclude': lambda f: f is None }})
    r"""All the operations being applied for this constraint."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms` The max length is 70 characters and the minimum length is 1. Note that the prefix `organizations/{organization_id}/customConstraints/` is not counted."""  
    resource_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceTypes'), 'exclude': lambda f: f is None }})
    r"""Immutable. The resource instance type on which this policy applies. Format will be of the form : \\"/\\" Example: * `compute.googleapis.com/Instance`."""  
    