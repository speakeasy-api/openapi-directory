<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reports 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Removes a report.
     * 
     * Removes a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete11Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete11Response
     */
	public function delete11(
        \OpenAPI\OpenAPI\Models\Operations\Delete11Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete11Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{reportId}', \OpenAPI\OpenAPI\Models\Operations\Delete11Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete11Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Duplicates a report.
     * 
     * Duplicates a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Duplicate1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Duplicate1Response
     */
	public function duplicate1(
        \OpenAPI\OpenAPI\Models\Operations\Duplicate1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Duplicate1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{reportId}/duplicate', \OpenAPI\OpenAPI\Models\Operations\Duplicate1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Duplicate1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Exports reports definition to XML.
     * 
     * Exports reports definition to XML.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ExportRequestDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportToXMLResponse
     */
	public function exportToXML(
        \OpenAPI\OpenAPI\Models\Shared\ExportRequestDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportToXMLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/export/xml');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportToXMLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates CSV content for a report.
     * 
     * Generates CSV content for a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenerateCSVRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateCSVResponse
     */
	public function generateCSV(
        \OpenAPI\OpenAPI\Models\Operations\GenerateCSVRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateCSVResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{reportId}/result/csv', \OpenAPI\OpenAPI\Models\Operations\GenerateCSVRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateCSVResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates printer friendly content for a report.
     * 
     * Generates printer friendly content for a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyResponse
     */
	public function generatePrinterFriendly(
        \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{reportId}/result/printerFriendly', \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GeneratePrinterFriendlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reportResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ReportResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports reports definition from XML.
     * 
     * Imports a report definition from an XML using a file token. To obtain the token, you first need to upload a temporary XML file, as specified in the Files section. Note that the name of the imported report must be unique.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ImportRequestDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ImportFromXMLResponse
     */
	public function importFromXML(
        \OpenAPI\OpenAPI\Models\Shared\ImportRequestDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ImportFromXMLResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/import/xml');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ImportFromXMLResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->importResultDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ImportResultDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks report as preferred or not.
     * 
     * Marks report as preferred or not.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SetPreferredRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SetPreferredResponse
     */
	public function setPreferred(
        \OpenAPI\OpenAPI\Models\Operations\SetPreferredRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SetPreferredResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/reports/{reportId}/preferred', \OpenAPI\OpenAPI\Models\Operations\SetPreferredRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "preferredRequestDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SetPreferredResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
}