"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BfdPacket = exports.BfdPacketStateEnum = exports.BfdPacketDiagnosticEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
 */
var BfdPacketDiagnosticEnum;
(function (BfdPacketDiagnosticEnum) {
    BfdPacketDiagnosticEnum["AdministrativelyDown"] = "ADMINISTRATIVELY_DOWN";
    BfdPacketDiagnosticEnum["ConcatenatedPathDown"] = "CONCATENATED_PATH_DOWN";
    BfdPacketDiagnosticEnum["ControlDetectionTimeExpired"] = "CONTROL_DETECTION_TIME_EXPIRED";
    BfdPacketDiagnosticEnum["DiagnosticUnspecified"] = "DIAGNOSTIC_UNSPECIFIED";
    BfdPacketDiagnosticEnum["EchoFunctionFailed"] = "ECHO_FUNCTION_FAILED";
    BfdPacketDiagnosticEnum["ForwardingPlaneReset"] = "FORWARDING_PLANE_RESET";
    BfdPacketDiagnosticEnum["NeighborSignaledSessionDown"] = "NEIGHBOR_SIGNALED_SESSION_DOWN";
    BfdPacketDiagnosticEnum["NoDiagnostic"] = "NO_DIAGNOSTIC";
    BfdPacketDiagnosticEnum["PathDown"] = "PATH_DOWN";
    BfdPacketDiagnosticEnum["ReverseConcatenatedPathDown"] = "REVERSE_CONCATENATED_PATH_DOWN";
})(BfdPacketDiagnosticEnum = exports.BfdPacketDiagnosticEnum || (exports.BfdPacketDiagnosticEnum = {}));
/**
 * The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
 */
var BfdPacketStateEnum;
(function (BfdPacketStateEnum) {
    BfdPacketStateEnum["AdminDown"] = "ADMIN_DOWN";
    BfdPacketStateEnum["Down"] = "DOWN";
    BfdPacketStateEnum["Init"] = "INIT";
    BfdPacketStateEnum["StateUnspecified"] = "STATE_UNSPECIFIED";
    BfdPacketStateEnum["Up"] = "UP";
})(BfdPacketStateEnum = exports.BfdPacketStateEnum || (exports.BfdPacketStateEnum = {}));
var BfdPacket = /** @class */ (function (_super) {
    __extends(BfdPacket, _super);
    function BfdPacket() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "authenticationPresent" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "authenticationPresent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "controlPlaneIndependent" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "controlPlaneIndependent", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "demand" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "demand", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "diagnostic" }),
        __metadata("design:type", String)
    ], BfdPacket.prototype, "diagnostic", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "final" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "final", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "length" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "length", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minEchoRxIntervalMs" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "minEchoRxIntervalMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minRxIntervalMs" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "minRxIntervalMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "minTxIntervalMs" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "minTxIntervalMs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "multiplier" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "multiplier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "multipoint" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "multipoint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "myDiscriminator" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "myDiscriminator", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "poll" }),
        __metadata("design:type", Boolean)
    ], BfdPacket.prototype, "poll", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], BfdPacket.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "version" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "version", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "yourDiscriminator" }),
        __metadata("design:type", Number)
    ], BfdPacket.prototype, "yourDiscriminator", void 0);
    return BfdPacket;
}(utils_1.SpeakeasyBase));
exports.BfdPacket = BfdPacket;
