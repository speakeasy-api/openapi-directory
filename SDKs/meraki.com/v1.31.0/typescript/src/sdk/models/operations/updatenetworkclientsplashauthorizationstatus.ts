/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Splash authorization for SSID 0
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 1
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 10
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 11
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 12
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 13
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 14
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 2
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 3
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 4
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 5
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 6
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 7
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 8
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * Splash authorization for SSID 9
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9 extends SpeakeasyBase {
  /**
   * New authorization status for the SSID (true, false).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAuthorized" })
  isAuthorized?: boolean;
}

/**
 * The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
 */
export class UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids extends SpeakeasyBase {
  /**
   * Splash authorization for SSID 0
   */
  @SpeakeasyMetadata()
  @Expose({ name: "0" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0)
  zero?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids0;

  /**
   * Splash authorization for SSID 1
   */
  @SpeakeasyMetadata()
  @Expose({ name: "1" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1)
  one?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids1;

  /**
   * Splash authorization for SSID 10
   */
  @SpeakeasyMetadata()
  @Expose({ name: "10" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10)
  ten?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids10;

  /**
   * Splash authorization for SSID 11
   */
  @SpeakeasyMetadata()
  @Expose({ name: "11" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11)
  eleven?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids11;

  /**
   * Splash authorization for SSID 12
   */
  @SpeakeasyMetadata()
  @Expose({ name: "12" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12)
  twelve?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids12;

  /**
   * Splash authorization for SSID 13
   */
  @SpeakeasyMetadata()
  @Expose({ name: "13" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13)
  thirteen?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids13;

  /**
   * Splash authorization for SSID 14
   */
  @SpeakeasyMetadata()
  @Expose({ name: "14" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14)
  fourteen?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids14;

  /**
   * Splash authorization for SSID 2
   */
  @SpeakeasyMetadata()
  @Expose({ name: "2" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2)
  two?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids2;

  /**
   * Splash authorization for SSID 3
   */
  @SpeakeasyMetadata()
  @Expose({ name: "3" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3)
  three?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids3;

  /**
   * Splash authorization for SSID 4
   */
  @SpeakeasyMetadata()
  @Expose({ name: "4" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4)
  four?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids4;

  /**
   * Splash authorization for SSID 5
   */
  @SpeakeasyMetadata()
  @Expose({ name: "5" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5)
  five?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids5;

  /**
   * Splash authorization for SSID 6
   */
  @SpeakeasyMetadata()
  @Expose({ name: "6" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6)
  six?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids6;

  /**
   * Splash authorization for SSID 7
   */
  @SpeakeasyMetadata()
  @Expose({ name: "7" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7)
  seven?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids7;

  /**
   * Splash authorization for SSID 8
   */
  @SpeakeasyMetadata()
  @Expose({ name: "8" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8)
  eight?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids8;

  /**
   * Splash authorization for SSID 9
   */
  @SpeakeasyMetadata()
  @Expose({ name: "9" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9)
  nine?: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids9;
}

export class UpdateNetworkClientSplashAuthorizationStatusRequestBody extends SpeakeasyBase {
  /**
   * The target SSIDs. Each SSID must be enabled and must have Click-through splash enabled. For each SSID where isAuthorized is true, the expiration time will automatically be set according to the SSID's splash frequency. Not all networks support configuring all SSIDs
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ssids" })
  @Type(() => UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids)
  ssids: UpdateNetworkClientSplashAuthorizationStatusRequestBodySsids;
}

export class UpdateNetworkClientSplashAuthorizationStatusRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateNetworkClientSplashAuthorizationStatusRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=clientId",
  })
  clientId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=networkId",
  })
  networkId: string;
}

export class UpdateNetworkClientSplashAuthorizationStatusResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateNetworkClientSplashAuthorizationStatus200ApplicationJSONObject?: Record<
    string,
    any
  >;
}
