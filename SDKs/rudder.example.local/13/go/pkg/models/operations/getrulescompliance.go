// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type GetRulesComplianceQueryParams struct {
	// Number of depth level of compliance objects to display (1:rules, 2:directives, 3:components, 4:nodes, 5:values, 6:reports)
	Level *int64 `queryParam:"style=form,explode=true,name=level"`
}

type GetRulesComplianceRequest struct {
	QueryParams GetRulesComplianceQueryParams
}

// GetRulesCompliance200ApplicationJSONActionEnum - The id of the action
type GetRulesCompliance200ApplicationJSONActionEnum string

const (
	GetRulesCompliance200ApplicationJSONActionEnumGetRulesCompliance GetRulesCompliance200ApplicationJSONActionEnum = "getRulesCompliance"
)

func (e *GetRulesCompliance200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getRulesCompliance":
		*e = GetRulesCompliance200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRulesCompliance200ApplicationJSONActionEnum: %s", s)
	}
}

type GetRulesCompliance200ApplicationJSONDataRulesComplianceDetails struct {
	Error                      *float32 `json:"error,omitempty"`
	NoReport                   *float32 `json:"noReport,omitempty"`
	SuccessAlreadyOK           *float32 `json:"successAlreadyOK,omitempty"`
	SuccessNotApplicable       *float32 `json:"successNotApplicable,omitempty"`
	SuccessRepaired            *float32 `json:"successRepaired,omitempty"`
	UnexpectedMissingComponent *float32 `json:"unexpectedMissingComponent,omitempty"`
	UnexpectedUnknownComponent *float32 `json:"unexpectedUnknownComponent,omitempty"`
}

type GetRulesCompliance200ApplicationJSONDataRulesModeEnum string

const (
	GetRulesCompliance200ApplicationJSONDataRulesModeEnumFullCompliance  GetRulesCompliance200ApplicationJSONDataRulesModeEnum = "full-compliance"
	GetRulesCompliance200ApplicationJSONDataRulesModeEnumChangesOnly     GetRulesCompliance200ApplicationJSONDataRulesModeEnum = "changes-only"
	GetRulesCompliance200ApplicationJSONDataRulesModeEnumReportsDisabled GetRulesCompliance200ApplicationJSONDataRulesModeEnum = "reports-disabled"
)

func (e *GetRulesCompliance200ApplicationJSONDataRulesModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full-compliance":
		fallthrough
	case "changes-only":
		fallthrough
	case "reports-disabled":
		*e = GetRulesCompliance200ApplicationJSONDataRulesModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRulesCompliance200ApplicationJSONDataRulesModeEnum: %s", s)
	}
}

type GetRulesCompliance200ApplicationJSONDataRules struct {
	// Rule compliance level
	Compliance        float32                                                        `json:"compliance"`
	ComplianceDetails GetRulesCompliance200ApplicationJSONDataRulesComplianceDetails `json:"complianceDetails"`
	// id of the rule
	ID   string                                                `json:"id"`
	Mode GetRulesCompliance200ApplicationJSONDataRulesModeEnum `json:"mode"`
}

type GetRulesCompliance200ApplicationJSONData struct {
	Rules []GetRulesCompliance200ApplicationJSONDataRules `json:"rules"`
}

// GetRulesCompliance200ApplicationJSONResultEnum - Result of the request
type GetRulesCompliance200ApplicationJSONResultEnum string

const (
	GetRulesCompliance200ApplicationJSONResultEnumSuccess GetRulesCompliance200ApplicationJSONResultEnum = "success"
	GetRulesCompliance200ApplicationJSONResultEnumError   GetRulesCompliance200ApplicationJSONResultEnum = "error"
)

func (e *GetRulesCompliance200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetRulesCompliance200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRulesCompliance200ApplicationJSONResultEnum: %s", s)
	}
}

// GetRulesCompliance200ApplicationJSON - Success
type GetRulesCompliance200ApplicationJSON struct {
	// The id of the action
	Action GetRulesCompliance200ApplicationJSONActionEnum `json:"action"`
	Data   GetRulesCompliance200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetRulesCompliance200ApplicationJSONResultEnum `json:"result"`
}

type GetRulesComplianceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	GetRulesCompliance200ApplicationJSONObject *GetRulesCompliance200ApplicationJSON
}
