/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class CodeScanningUploadSarifRequestBody {
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("checkout_uri")
    public String checkoutUri;
    public CodeScanningUploadSarifRequestBody withCheckoutUri(String checkoutUri) {
        this.checkoutUri = checkoutUri;
        return this;
    }
    
    /**
     * The SHA of the commit to which the analysis you are uploading relates.
     */
    @JsonProperty("commit_sha")
    public String commitSha;
    public CodeScanningUploadSarifRequestBody withCommitSha(String commitSha) {
        this.commitSha = commitSha;
        return this;
    }
    
    /**
     * The full Git reference, formatted as `refs/heads/&lt;branch name&gt;`,
     * `refs/pull/&lt;number&gt;/merge`, or `refs/pull/&lt;number&gt;/head`.
     */
    @JsonProperty("ref")
    public String ref;
    public CodeScanningUploadSarifRequestBody withRef(String ref) {
        this.ref = ref;
        return this;
    }
    
    /**
     * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning)."
     */
    @JsonProperty("sarif")
    public String sarif;
    public CodeScanningUploadSarifRequestBody withSarif(String sarif) {
        this.sarif = sarif;
        return this;
    }
    
    /**
     * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("started_at")
    public OffsetDateTime startedAt;
    public CodeScanningUploadSarifRequestBody withStartedAt(OffsetDateTime startedAt) {
        this.startedAt = startedAt;
        return this;
    }
    
    /**
     * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tool_name")
    public String toolName;
    public CodeScanningUploadSarifRequestBody withToolName(String toolName) {
        this.toolName = toolName;
        return this;
    }
    
}
