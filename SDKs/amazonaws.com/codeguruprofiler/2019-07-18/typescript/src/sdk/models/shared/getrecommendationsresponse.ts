/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Anomaly } from "./anomaly";
import { Recommendation } from "./recommendation";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The structure representing the GetRecommendationsResponse.
 */
export class GetRecommendationsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Anomaly })
  @Expose({ name: "anomalies" })
  @Type(() => Anomaly)
  anomalies: Anomaly[];

  @SpeakeasyMetadata()
  @Expose({ name: "profileEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  profileEndTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "profileStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  profileStartTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "profilingGroupName" })
  profilingGroupName: string;

  @SpeakeasyMetadata({ elemType: Recommendation })
  @Expose({ name: "recommendations" })
  @Type(() => Recommendation)
  recommendations: Recommendation[];
}
