/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class ScopeMappings {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ScopeMappings(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Remove client-level roles from the client\u2019s scope.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse deleteRealmClientScopesIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove a set of realm-level roles from the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse deleteRealmClientScopesIdScopeMappingsRealm(org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientScopesIdScopeMappingsRealmResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove client-level roles from the client\u2019s scope.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse deleteRealmClientsIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Remove a set of realm-level roles from the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsRealmResponse deleteRealmClientsIdScopeMappingsRealm(org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.DeleteRealmClientsIdScopeMappingsRealmResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get all scope mappings for the client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsResponse getRealmClientScopesIdScopeMappings(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsResponse() {{
            mappingsRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MappingsRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MappingsRepresentation.class);
                res.mappingsRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get the roles associated with a client\u2019s scope   Returns roles for the client.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse getRealmClientScopesIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse getRealmClientScopesIdScopeMappingsClientsClientAvailable(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailablePathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/available", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client\u2019s scope.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse getRealmClientScopesIdScopeMappingsClientsClientComposite(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositePathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}/composite", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsClientsClientCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles associated with the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmResponse getRealmClientScopesIdScopeMappingsRealm(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles that are available to attach to this client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse getRealmClientScopesIdScopeMappingsRealmAvailable(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmAvailablePathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/realm/available", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective realm-level roles associated with the client\u2019s scope   What this does is recurse  any composite roles associated with the client\u2019s scope and adds the roles to this lists.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse getRealmClientScopesIdScopeMappingsRealmComposite(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmCompositePathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/realm/composite", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdScopeMappingsRealmCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get all scope mappings for the client
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsResponse getRealmClientsIdScopeMappings(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsResponse() {{
            mappingsRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.MappingsRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.MappingsRepresentation.class);
                res.mappingsRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get the roles associated with a client\u2019s scope   Returns roles for the client.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientResponse getRealmClientsIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * The available client-level roles   Returns the roles for the client that can be associated with the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse getRealmClientsIdScopeMappingsClientsClientAvailable(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientAvailablePathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/clients/{client}/available", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective client roles   Returns the roles for the client that are associated with the client\u2019s scope.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse getRealmClientsIdScopeMappingsClientsClientComposite(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientCompositePathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/clients/{client}/composite", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsClientsClientCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles associated with the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmResponse getRealmClientsIdScopeMappingsRealm(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get realm-level roles that are available to attach to this client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse getRealmClientsIdScopeMappingsRealmAvailable(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmAvailableRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmAvailablePathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/realm/available", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmAvailableResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get effective realm-level roles associated with the client\u2019s scope   What this does is recurse  any composite roles associated with the client\u2019s scope and adds the roles to this lists.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse getRealmClientsIdScopeMappingsRealmComposite(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmCompositeRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmCompositePathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/realm/composite", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdScopeMappingsRealmCompositeResponse() {{
            roleRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.RoleRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.RoleRepresentation[].class);
                res.roleRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Add client-level roles to the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse postRealmClientScopesIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add a set of realm-level roles to the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsRealmResponse postRealmClientScopesIdScopeMappingsRealm(org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/client-scopes/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.PostRealmClientScopesIdScopeMappingsRealmResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add client-level roles to the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsClientsClientResponse postRealmClientsIdScopeMappingsClientsClient(org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsClientsClientRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsClientsClientPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/clients/{client}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsClientsClientResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsClientsClientResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Add a set of realm-level roles to the client\u2019s scope
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsRealmResponse postRealmClientsIdScopeMappingsRealm(org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsRealmRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsRealmPathParams.class, baseUrl, "/{realm}/clients/{id}/scope-mappings/realm", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsRealmResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdScopeMappingsRealmResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }
}