"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Any, Optional


@dataclasses.dataclass
class PutV2MeetingsSettingsIDJSONRequestBody:
    
    allow_booking_on_behalf: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'allow_booking_on_behalf' }})
    r"""Allow other team members to schedule on you behalf."""  
    allow_booking_overtime: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'allow_booking_overtime' }})
    r"""Allow team members to insert available time outside your working hours."""  
    allow_event_overlap: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'allow_event_overlap' }})
    r"""Allow team members to double book events on your calendar."""  
    availability_limit: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'availability_limit' }})
    r"""The number of days out the user allows a prospect to schedule a meeting"""  
    availability_limit_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'availability_limit_enabled' }})
    r"""If Availability Limits have been turned on"""  
    buffer_time_duration: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'buffer_time_duration' }})
    r"""Default buffer duration in minutes set by a user"""  
    calendar_type: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'calendar_type' }})
    r"""Calendar type"""  
    default_meeting_length: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'default_meeting_length' }})
    r"""Default meeting length in minutes set by the user"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'description' }})
    r"""Default description of the meeting"""  
    enable_calendar_sync: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'enable_calendar_sync' }})
    r"""Determines if a user enabled Calendar Sync feature"""  
    enable_dynamic_location: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'enable_dynamic_location' }})
    r"""Determines if location will be filled via third-party service (Zoom, GoToMeeting, etc.)"""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'location' }})
    r"""Default location of the meeting"""  
    primary_calendar_connection_failed: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'primary_calendar_connection_failed' }})
    r"""Determines if the user lost calendar connection"""  
    primary_calendar_id: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'primary_calendar_id' }})
    r"""ID of the primary calendar"""  
    primary_calendar_name: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'primary_calendar_name' }})
    r"""Display name of the primary calendar"""  
    schedule_buffer_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'schedule_buffer_enabled' }})
    r"""Determines if meetings are scheduled with a 15 minute buffer between them"""  
    schedule_delay: Optional[int] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'schedule_delay' }})
    r"""The number of hours in advance a user requires someone to a book a meeting with them"""  
    share_event_detail: Optional[bool] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'share_event_detail' }})
    r"""Allow team members to see the details of events on your calendar."""  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'time_zone' }})
    r"""Time zone for current calendar"""  
    times_available: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'times_available', 'json': True }})
    r"""Times available set by a user that can be used to book meetings"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'title' }})
    r"""Default title of the meeting"""  
    

@dataclasses.dataclass
class PutV2MeetingsSettingsIDJSONRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""MeetingSetting ID"""  
    request_body: Optional[PutV2MeetingsSettingsIDJSONRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    

@dataclasses.dataclass
class PutV2MeetingsSettingsIDJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    