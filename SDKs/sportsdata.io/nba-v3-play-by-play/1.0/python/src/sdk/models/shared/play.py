"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Play:
    
    assisted_by_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssistedByPlayerID'), 'exclude': lambda f: f is None }})  
    away_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayPlayerID'), 'exclude': lambda f: f is None }})  
    away_team_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AwayTeamScore'), 'exclude': lambda f: f is None }})  
    baseline_offset_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BaselineOffsetPercentage'), 'exclude': lambda f: f is None }})  
    blocked_by_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlockedByPlayerID'), 'exclude': lambda f: f is None }})  
    category: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Category'), 'exclude': lambda f: f is None }})  
    coordinates: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Coordinates'), 'exclude': lambda f: f is None }})  
    created: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Created'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    fast_break: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FastBreak'), 'exclude': lambda f: f is None }})  
    home_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomePlayerID'), 'exclude': lambda f: f is None }})  
    home_team_score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeTeamScore'), 'exclude': lambda f: f is None }})  
    opponent: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Opponent'), 'exclude': lambda f: f is None }})  
    opponent_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OpponentID'), 'exclude': lambda f: f is None }})  
    player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayerID'), 'exclude': lambda f: f is None }})  
    play_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PlayID'), 'exclude': lambda f: f is None }})  
    points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Points'), 'exclude': lambda f: f is None }})  
    potential_points: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PotentialPoints'), 'exclude': lambda f: f is None }})  
    quarter_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterID'), 'exclude': lambda f: f is None }})  
    quarter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuarterName'), 'exclude': lambda f: f is None }})  
    receiving_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingPlayerID'), 'exclude': lambda f: f is None }})  
    receiving_team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTeam'), 'exclude': lambda f: f is None }})  
    receiving_team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivingTeamID'), 'exclude': lambda f: f is None }})  
    sequence: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Sequence'), 'exclude': lambda f: f is None }})  
    shot_made: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShotMade'), 'exclude': lambda f: f is None }})  
    sideline_offset_percentage: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SidelineOffsetPercentage'), 'exclude': lambda f: f is None }})  
    side_of_basket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SideOfBasket'), 'exclude': lambda f: f is None }})  
    stolen_by_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StolenByPlayerID'), 'exclude': lambda f: f is None }})  
    substitute_in_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubstituteInPlayerID'), 'exclude': lambda f: f is None }})  
    substitute_out_player_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubstituteOutPlayerID'), 'exclude': lambda f: f is None }})  
    team: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Team'), 'exclude': lambda f: f is None }})  
    team_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TeamID'), 'exclude': lambda f: f is None }})  
    time_remaining_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRemainingMinutes'), 'exclude': lambda f: f is None }})  
    time_remaining_seconds: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeRemainingSeconds'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Type'), 'exclude': lambda f: f is None }})  
    updated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Updated'), 'exclude': lambda f: f is None }})  
    