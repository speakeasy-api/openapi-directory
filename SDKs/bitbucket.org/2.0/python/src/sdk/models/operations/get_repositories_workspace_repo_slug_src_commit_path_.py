"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import paginated_treeentries as shared_paginated_treeentries
from ..shared import security as shared_security
from enum import Enum
from typing import Any, Optional


@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcCommitPathSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    oauth2: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum(str, Enum):
    r"""If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git does not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents."""
    META = 'meta'
    RENDERED = 'rendered'


@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest:
    
    commit: str = dataclasses.field(metadata={'path_param': { 'field_name': 'commit', 'style': 'simple', 'explode': False }})
    r"""The commit's SHA1."""  
    path: str = dataclasses.field(metadata={'path_param': { 'field_name': 'path', 'style': 'simple', 'explode': False }})
    r"""Path to the file."""  
    repo_slug: str = dataclasses.field(metadata={'path_param': { 'field_name': 'repo_slug', 'style': 'simple', 'explode': False }})
    r"""This can either be the repository slug or the UUID of the repository,
    surrounded by curly-braces, for example: `{repository UUID}`.
    """  
    workspace: str = dataclasses.field(metadata={'path_param': { 'field_name': 'workspace', 'style': 'simple', 'explode': False }})
    r"""This can either be the workspace ID (slug) or the workspace UUID
    surrounded by curly-braces, for example: `{workspace UUID}`.
    """  
    format: Optional[GetRepositoriesWorkspaceRepoSlugSrcCommitPathFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git does not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents."""  
    max_depth: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'max_depth', 'style': 'form', 'explode': True }})
    r"""If provided, returns the contents of the repository and its subdirectories recursively until the specified max_depth of nested directories. When omitted, this defaults to 1."""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Optional filter expression as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering)."""  
    sort: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Optional sorting parameter as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results)."""  
    

@dataclasses.dataclass
class GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""If the path or commit in the URL does not exist."""  
    paginated_treeentries: Optional[shared_paginated_treeentries.PaginatedTreeentries] = dataclasses.field(default=None)
    r"""If the path matches a file, then the raw contents of the file are
    returned.  If the `format=meta` query parameter is provided,
    a json document containing the file's meta data is
    returned.  If the `format=rendered` query parameter is provided,
    the contents of the file in HTML-formated rendered markup is returned.
    If the path matches a directory, then a paginated
    list of file and directory entries is returned (if the
    `format=meta` query parameter was provided, then the json document
    containing the directory's meta data is returned.)
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    