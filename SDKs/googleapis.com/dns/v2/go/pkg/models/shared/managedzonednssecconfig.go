// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ManagedZoneDNSSecConfigNonExistenceEnum - Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
type ManagedZoneDNSSecConfigNonExistenceEnum string

const (
	ManagedZoneDNSSecConfigNonExistenceEnumNsec  ManagedZoneDNSSecConfigNonExistenceEnum = "NSEC"
	ManagedZoneDNSSecConfigNonExistenceEnumNsec3 ManagedZoneDNSSecConfigNonExistenceEnum = "NSEC3"
)

func (e *ManagedZoneDNSSecConfigNonExistenceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NSEC":
		fallthrough
	case "NSEC3":
		*e = ManagedZoneDNSSecConfigNonExistenceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedZoneDNSSecConfigNonExistenceEnum: %s", s)
	}
}

// ManagedZoneDNSSecConfigStateEnum - Specifies whether DNSSEC is enabled, and what mode it is in.
type ManagedZoneDNSSecConfigStateEnum string

const (
	ManagedZoneDNSSecConfigStateEnumOff      ManagedZoneDNSSecConfigStateEnum = "OFF"
	ManagedZoneDNSSecConfigStateEnumOn       ManagedZoneDNSSecConfigStateEnum = "ON"
	ManagedZoneDNSSecConfigStateEnumTransfer ManagedZoneDNSSecConfigStateEnum = "TRANSFER"
)

func (e *ManagedZoneDNSSecConfigStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OFF":
		fallthrough
	case "ON":
		fallthrough
	case "TRANSFER":
		*e = ManagedZoneDNSSecConfigStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedZoneDNSSecConfigStateEnum: %s", s)
	}
}

type ManagedZoneDNSSecConfig struct {
	// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
	DefaultKeySpecs []DNSKeySpec `json:"defaultKeySpecs,omitempty"`
	Kind            *string      `json:"kind,omitempty"`
	// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
	NonExistence *ManagedZoneDNSSecConfigNonExistenceEnum `json:"nonExistence,omitempty"`
	// Specifies whether DNSSEC is enabled, and what mode it is in.
	State *ManagedZoneDNSSecConfigStateEnum `json:"state,omitempty"`
}
