"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class ListAvailableContentBlocksRequest:
    
    limit: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""(Optional) Positive Number
    
    Maximum number of content blocks to retrieve, default to 100 if not provided, maximum acceptable value is 1000.
    """  
    modified_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modified_after', 'style': 'form', 'explode': True }})
    r"""(Optional) String in ISO 8601
    
    Retrieve only content blocks updated at or after the given time.
    """  
    modified_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'modified_before', 'style': 'form', 'explode': True }})
    r"""(Optional) String in ISO 8601
    
    Retrieve only content blocks updated at or before the given time.
    """  
    offset: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""(Optional) Positive Number
    
    Number of content blocks to skip before returning rest of the templates that fit the search criteria.
    """  
    

@dataclasses.dataclass
class ListAvailableContentBlocksResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    