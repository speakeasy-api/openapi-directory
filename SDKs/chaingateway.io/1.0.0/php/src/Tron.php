<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tron 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * getAccountResources
     * 
     * getAccountResources
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse
     */
	public function getaccountresources(
        \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/account/{address}/resources', \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetaccountresourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getaccountresources200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getaccountresources200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getBlock
     * 
     * getBlock
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Getblock3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Getblock3Response
     */
	public function getblock3(
        \OpenAPI\OpenAPI\Models\Operations\Getblock3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Getblock3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/blocks/{block}', \OpenAPI\OpenAPI\Models\Operations\Getblock3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getblock3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getblock3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getblock3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getChainParameters
     * 
     * getChainParameters
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse
     */
	public function getchainparameters(
    ): \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/chainparameters');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetchainparametersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getchainparameters200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getchainparameters200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getLastBlockNumber
     * 
     * Get the latest block number
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response
     */
	public function getlastblocknumber3(
    ): \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/blocks/number');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getlastblocknumber3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Getlastblocknumber3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransaction
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response
     */
	public function gettransaction3(
        \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/{transaction}/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransaction3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransaction3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransaction3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTransactionReceipt
     * 
     * You can get your transaction decoded by add /decoded to your api call. If you want to get the transaction encoded, youst remove the /decoded part
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response
     */
	public function gettransactionreceipt3(
        \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/{transaction}/receipt/decoded', \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettransactionreceipt3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettransactionreceipt3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTRC10Balance
     * 
     * getTRC10Balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse
     */
	public function gettrc10balance(
        \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{account}/trc10/{tokenId}', \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettrc10balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettrc10balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettrc10balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTRC20Balance
     * 
     * getTRC20Balance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse
     */
	public function gettrc20balance(
        \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{account}/trc20/{token}', \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gettrc20balanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettrc20balance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettrc20balance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getTronBalance
     * 
     * getTronBalance
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse
     */
	public function gettronbalance(
        \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/balances/{address}', \OpenAPI\OpenAPI\Models\Operations\GettronbalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GettronbalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->gettronbalance200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Gettronbalance200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFailedIPNs
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listfailedipns3Response
     */
	public function listfailedipns3(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listfailedipns3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/webhooks/notifications/failed');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listfailedipns3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listfailedipns3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listfailedipns3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSubscribedAddresses
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses3Response
     */
	public function listsubscribedaddresses3(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listsubscribedaddresses3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listsubscribedaddresses3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * ListTransactionsByAddress
     * 
     * Our API provides an endpoint for retrieving all transactions associated with a particular blockchain address. To use this endpoint, you will need to provide the wallet address as a parameter in the request.
     * 
     * Each page of results returned by this endpoint contains up to 100 entries, and you can use a paginator to navigate through the pages of results.
     * 
     * To use the paginator, you can include parameter in your request: "page" . The "page" parameter specifies which page of results to retrieve,
     * 
     * For example, to retrieve the first 100 transactions associated with a particular blockchain address, you would make a request to the following URL:
     * 
     * ```
     * /addresses//transactions/1
     * 
     * ```
     * 
     * If there are more than 100 transactions associated with the blockchain address, you can retrieve additional pages of results by incrementing the "page" parameter in your request. For example, to retrieve the next 100 transactions, you would make a request to the following URL:
     * 
     * ```
     * /addresses//transactions/2
     * ```
     * 
     * By using the paginator, you can retrieve all transactions associated with a particular blockchain address, regardless of the total number of transactions in the blockchain.
     * 
     * each request tells you the max pages within the Request in the **max_pages** field
     * 
     * `"max_pages": 515`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Response
     */
	public function listtransactionsbyaddress3(
        \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/addresses/{address}/transactions/{page}', \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listtransactionsbyaddress3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Listtransactionsbyaddress3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * newAddress
     * 
     * newAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Newaddress3RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Newaddress3Response
     */
	public function newaddress3(
        \OpenAPI\OpenAPI\Models\Operations\Newaddress3RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Newaddress3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/addresses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Newaddress3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->newaddress3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Newaddress3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * resendFailedIPN
     * 
     * Returns all subscriptions/IPNs created with an account.
     * 
     * @param array<string, mixed> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn3Response
     */
	public function resendfailedipn3(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/webhooks/notifications/failed/62640817eb594da78c7bee00');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Resendfailedipn3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resendfailedipn3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Resendfailedipn3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendTransaction
     * 
     * sendTransaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Sendtransaction3RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtransaction3Response
     */
	public function sendtransaction3(
        \OpenAPI\OpenAPI\Models\Operations\Sendtransaction3RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtransaction3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtransaction3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendtransaction3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Sendtransaction3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendTRC10
     * 
     * sendTRC10
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Sendtrc10RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtrc10Response
     */
	public function sendtrc10(
        \OpenAPI\OpenAPI\Models\Operations\Sendtrc10RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtrc10Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/trc10');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtrc10Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendtrc10200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Sendtrc10200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendTRC20
     * 
     * sendTRC20
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Sendtrc20RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtrc20Response
     */
	public function sendtrc20(
        \OpenAPI\OpenAPI\Models\Operations\Sendtrc20RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtrc20Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/trc20');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtrc20Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->sendtrc20200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Sendtrc20200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * sendTRC721
     * 
     * sendTRC721
     * 
     * @param string $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Sendtrc721Response
     */
	public function sendtrc721(
        string $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Sendtrc721Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/transactions/trc721');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Sendtrc721Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * subscribeAddress
     * 
     * Creates a new subscription/IPN for the given address (and contractaddress). You will receive a notification to the given url every time a deposit is received. Unsubscribe the address before sending tokens/ETH from it or you won't get reliable notifications anymore.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3RequestBody $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3Response
     */
	public function subscribeaddress3(
        \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3RequestBody $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->subscribeaddress3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Subscribeaddress3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unsubscribeAddress
     * 
     * Deletes an existing subscription/IPN for the given address (and contractaddress).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Response
     */
	public function unsubscribeaddress3(
        \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/tron/webhooks/{webhookid}', \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unsubscribeaddress3200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\Unsubscribeaddress3200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}