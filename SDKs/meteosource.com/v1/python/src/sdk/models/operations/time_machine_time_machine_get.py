"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import generalrequesterror as shared_generalrequesterror
from ..shared import httpvalidationerror as shared_httpvalidationerror
from ..shared import timemachine_timemachine as shared_timemachine_timemachine
from datetime import date
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class TimeMachineTimeMachineGetSecurity:
    
    api_key_header: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Key' }})  
    
class TimeMachineTimeMachineGetUnitsUnitsEnum(str, Enum):
    r"""An enumeration."""
    AUTO = 'auto'
    METRIC = 'metric'
    US = 'us'
    UK = 'uk'
    CA = 'ca'


@dataclasses.dataclass
class TimeMachineTimeMachineGetRequest:
    
    date_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'date', 'style': 'form', 'explode': True }})
    r"""The UTC day of the data in the past. Specify in `YYYY-MM-DD` format, e.g. `2021-08-24`."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""Your unique API key. You can either specify it in this parameter, or set it in `X-API-Key` header."""  
    lat: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lat', 'style': 'form', 'explode': True }})
    r"""Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4"""  
    lon: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'lon', 'style': 'form', 'explode': True }})
    r"""Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4"""  
    place_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'place_id', 'style': 'form', 'explode': True }})
    r"""Identifier of a place. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name)."""  
    timezone: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'timezone', 'style': 'form', 'explode': True }})
    r"""Timezone to be used for the date fields. If not specified, local timezone of the location will be used.
    The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used.
    Alternatively you may use the value ``auto`` in which case the local timezone of the location is used.
    The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).
    """  
    units: Optional[TimeMachineTimeMachineGetUnitsUnitsEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'units', 'style': 'form', 'explode': True }})
    r"""Unit system to be used. The available values are:
    
    * `auto`: Select the system automatically, based on the forecast location.
    * `metric`: Metric (SI) units (`°C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).
    * `us`: Imperial units (`°F`, `in/h`, `mph`, `in`, `mi`, `Hg`).
    * `uk`: Same as ``metric``, except that visibility is in `miles` and wind speeds are in `mph`.
    * `ca`: Same as ``metric``, except that wind speeds are in `km/h` and pressure is in `kPa`.
    """  
    

@dataclasses.dataclass
class TimeMachineTimeMachineGetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    general_request_error: Optional[shared_generalrequesterror.GeneralRequestError] = dataclasses.field(default=None)
    r"""Error in passed parameter."""  
    http_validation_error: Optional[shared_httpvalidationerror.HTTPValidationError] = dataclasses.field(default=None)
    r"""Validation Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    time_machine_time_machine: Optional[shared_timemachine_timemachine.TimeMachineTimeMachine] = dataclasses.field(default=None)
    r"""Successful Response"""  
    