/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { ConsumedCapacity } from "./consumedcapacity";
import { KeysAndAttributes } from "./keysandattributes";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Represents the output of a <code>BatchGetItem</code> operation.
 */
export class BatchGetItemOutput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ConsumedCapacity })
  @Expose({ name: "ConsumedCapacity" })
  @Type(() => ConsumedCapacity)
  consumedCapacity?: ConsumedCapacity[];

  @SpeakeasyMetadata({ elemType: AttributeValue, elemDepth: 3 })
  @Expose({ name: "Responses" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Record<string, AttributeValue>[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  responses?: Record<string, Record<string, AttributeValue>[]>;

  @SpeakeasyMetadata({ elemType: KeysAndAttributes })
  @Expose({ name: "UnprocessedKeys" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, KeysAndAttributes> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], KeysAndAttributes);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  unprocessedKeys?: Record<string, KeysAndAttributes>;
}
