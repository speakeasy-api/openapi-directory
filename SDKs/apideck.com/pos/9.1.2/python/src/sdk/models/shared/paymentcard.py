"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PaymentCardCardBrandEnum(str, Enum):
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN)."""
    VISA = 'visa'
    MASTERCARD = 'mastercard'
    AMEX = 'amex'
    DISCOVER = 'discover'
    DISCOVER_DINERS = 'discover-diners'
    JCB = 'jcb'
    CHINA_UNIONPAY = 'china-unionpay'
    SQUARE_GIFT_CARD = 'square-gift-card'
    SQUARE_CAPITAL_CARD = 'square-capital-card'
    INTERAC = 'interac'
    EFTPOS = 'eftpos'
    FELICA = 'felica'
    EBT = 'ebt'
    OTHER = 'other'

class PaymentCardCardTypeEnum(str, Enum):
    CREDIT = 'credit'
    DEBIT = 'debit'
    PREPAID = 'prepaid'
    OTHER = 'other'

class PaymentCardPrepaidTypeEnum(str, Enum):
    NON_PREPAID = 'non-prepaid'
    PREPAID = 'prepaid'
    UNKNOWN = 'unknown'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentCardInput:
    r"""A card's non-confidential details."""
    
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})  
    bin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN)."""  
    card_brand: Optional[PaymentCardCardBrandEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_brand'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN)."""  
    card_type: Optional[PaymentCardCardTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_type'), 'exclude': lambda f: f is None }})  
    cardholder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardholder_name'), 'exclude': lambda f: f is None }})  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a card can be used for payments."""  
    exp_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_month'), 'exclude': lambda f: f is None }})
    r"""The expiration month of the associated card as an integer between 1 and 12."""  
    exp_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_year'), 'exclude': lambda f: f is None }})
    r"""The four-digit year of the card's expiration date."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})  
    last_4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_4'), 'exclude': lambda f: f is None }})  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})  
    prepaid_type: Optional[PaymentCardPrepaidTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaid_type'), 'exclude': lambda f: f is None }})  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PaymentCard:
    r"""A card's non-confidential details."""
    
    billing_address: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_address'), 'exclude': lambda f: f is None }})  
    bin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bin'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN)."""  
    card_brand: Optional[PaymentCardCardBrandEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_brand'), 'exclude': lambda f: f is None }})
    r"""The first six digits of the card number, known as the Bank Identification Number (BIN)."""  
    card_type: Optional[PaymentCardCardTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('card_type'), 'exclude': lambda f: f is None }})  
    cardholder_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardholder_name'), 'exclude': lambda f: f is None }})  
    customer_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_id'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether or not a card can be used for payments."""  
    exp_month: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_month'), 'exclude': lambda f: f is None }})
    r"""The expiration month of the associated card as an integer between 1 and 12."""  
    exp_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exp_year'), 'exclude': lambda f: f is None }})
    r"""The four-digit year of the card's expiration date."""  
    fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fingerprint'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier for an object."""  
    last_4: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_4'), 'exclude': lambda f: f is None }})  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchant_id'), 'exclude': lambda f: f is None }})  
    prepaid_type: Optional[PaymentCardPrepaidTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaid_type'), 'exclude': lambda f: f is None }})  
    reference_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reference_id'), 'exclude': lambda f: f is None }})
    r"""An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system."""  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})  
    