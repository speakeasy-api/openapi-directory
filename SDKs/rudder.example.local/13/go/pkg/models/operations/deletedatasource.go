// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type DeleteDataSourcePathParams struct {
	// Id of the data source
	DatasourceID string `pathParam:"style=simple,explode=false,name=datasourceId"`
}

type DeleteDataSourceRequest struct {
	PathParams DeleteDataSourcePathParams
}

// DeleteDataSource200ApplicationJSONActionEnum - The id of the action
type DeleteDataSource200ApplicationJSONActionEnum string

const (
	DeleteDataSource200ApplicationJSONActionEnumDeleteDataSource DeleteDataSource200ApplicationJSONActionEnum = "deleteDataSource"
)

func (e *DeleteDataSource200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deleteDataSource":
		*e = DeleteDataSource200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteDataSource200ApplicationJSONActionEnum: %s", s)
	}
}

type DeleteDataSource200ApplicationJSONData struct {
	Datasources []shared.Datasource `json:"datasources"`
}

// DeleteDataSource200ApplicationJSONResultEnum - Result of the request
type DeleteDataSource200ApplicationJSONResultEnum string

const (
	DeleteDataSource200ApplicationJSONResultEnumSuccess DeleteDataSource200ApplicationJSONResultEnum = "success"
	DeleteDataSource200ApplicationJSONResultEnumError   DeleteDataSource200ApplicationJSONResultEnum = "error"
)

func (e *DeleteDataSource200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = DeleteDataSource200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteDataSource200ApplicationJSONResultEnum: %s", s)
	}
}

// DeleteDataSource200ApplicationJSON - Data source information
type DeleteDataSource200ApplicationJSON struct {
	// The id of the action
	Action DeleteDataSource200ApplicationJSONActionEnum `json:"action"`
	Data   DeleteDataSource200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result DeleteDataSource200ApplicationJSONResultEnum `json:"result"`
}

type DeleteDataSourceResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Data source information
	DeleteDataSource200ApplicationJSONObject *DeleteDataSource200ApplicationJSON
}
