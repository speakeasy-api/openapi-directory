// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchGetDeploymentsXAmzTargetEnum
type BatchGetDeploymentsXAmzTargetEnum string

const (
	BatchGetDeploymentsXAmzTargetEnumCodeDeploy20141006BatchGetDeployments BatchGetDeploymentsXAmzTargetEnum = "CodeDeploy_20141006.BatchGetDeployments"
)

func (e *BatchGetDeploymentsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.BatchGetDeployments":
		*e = BatchGetDeploymentsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchGetDeploymentsXAmzTargetEnum: %s", s)
	}
}

type BatchGetDeploymentsHeaders struct {
	XAmzAlgorithm     *string                           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        BatchGetDeploymentsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchGetDeploymentsRequest struct {
	Headers BatchGetDeploymentsHeaders
	Request shared.BatchGetDeploymentsInput `request:"mediaType=application/json"`
}

type BatchGetDeploymentsResponse struct {
	// Success
	BatchGetDeploymentsOutput *shared.BatchGetDeploymentsOutput
	// BatchLimitExceededException
	BatchLimitExceededException interface{}
	ContentType                 string
	// DeploymentIdRequiredException
	DeploymentIDRequiredException interface{}
	// InvalidDeploymentIdException
	InvalidDeploymentIDException interface{}
	StatusCode                   int
	RawResponse                  *http.Response
}
