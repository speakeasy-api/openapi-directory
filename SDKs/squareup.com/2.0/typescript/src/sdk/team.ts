/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Team {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * BulkCreateTeamMembers
   *
   * @remarks
   * Creates multiple `TeamMember` objects. The created `TeamMember` objects are returned on successful creates.
   * This process is non-transactional and processes as much of the request as possible. If one of the creates in
   * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
   * contains explicit error information for the failed create.
   *
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-create-team-members).
   */
  bulkCreateTeamMembers(
    req: shared.BulkCreateTeamMembersRequest,
    security: operations.BulkCreateTeamMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BulkCreateTeamMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BulkCreateTeamMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/team-members/bulk-create";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BulkCreateTeamMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BulkCreateTeamMembersResponse =
        new operations.BulkCreateTeamMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkCreateTeamMembersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BulkCreateTeamMembersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * BulkUpdateTeamMembers
   *
   * @remarks
   * Updates multiple `TeamMember` objects. The updated `TeamMember` objects are returned on successful updates.
   * This process is non-transactional and processes as much of the request as possible. If one of the updates in
   * the request cannot be successfully processed, the request is not marked as failed, but the body of the response
   * contains explicit error information for the failed update.
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#bulk-update-team-members).
   */
  bulkUpdateTeamMembers(
    req: shared.BulkUpdateTeamMembersRequest,
    security: operations.BulkUpdateTeamMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.BulkUpdateTeamMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BulkUpdateTeamMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v2/team-members/bulk-update";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.BulkUpdateTeamMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.BulkUpdateTeamMembersResponse =
        new operations.BulkUpdateTeamMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.bulkUpdateTeamMembersResponse = utils.objectToClass(
              httpRes?.data,
              shared.BulkUpdateTeamMembersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * CreateTeamMember
   *
   * @remarks
   * Creates a single `TeamMember` object. The `TeamMember` object is returned on successful creates.
   * You must provide the following values in your request to this endpoint:
   * - `given_name`
   * - `family_name`
   *
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#createteammember).
   */
  createTeamMember(
    req: shared.CreateTeamMemberRequest,
    security: operations.CreateTeamMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateTeamMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.CreateTeamMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/team-members";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateTeamMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateTeamMemberResponse =
        new operations.CreateTeamMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createTeamMemberResponse = utils.objectToClass(
              httpRes?.data,
              shared.CreateTeamMemberResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveTeamMember
   *
   * @remarks
   * Retrieves a `TeamMember` object for the given `TeamMember.id`.
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrieve-a-team-member).
   */
  retrieveTeamMember(
    req: operations.RetrieveTeamMemberRequest,
    security: operations.RetrieveTeamMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveTeamMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveTeamMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/team-members/{team_member_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveTeamMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveTeamMemberResponse =
        new operations.RetrieveTeamMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveTeamMemberResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveTeamMemberResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * RetrieveWageSetting
   *
   * @remarks
   * Retrieves a `WageSetting` object for a team member specified
   * by `TeamMember.id`.
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#retrievewagesetting).
   */
  retrieveWageSetting(
    req: operations.RetrieveWageSettingRequest,
    security: operations.RetrieveWageSettingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RetrieveWageSettingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RetrieveWageSettingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/team-members/{team_member_id}/wage-setting",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.RetrieveWageSettingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RetrieveWageSettingResponse =
        new operations.RetrieveWageSettingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.retrieveWageSettingResponse = utils.objectToClass(
              httpRes?.data,
              shared.RetrieveWageSettingResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SearchTeamMembers
   *
   * @remarks
   * Returns a paginated list of `TeamMember` objects for a business.
   * The list can be filtered by the following:
   * - location IDs
   * - `status`
   */
  searchTeamMembers(
    req: shared.SearchTeamMembersRequest,
    security: operations.SearchTeamMembersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchTeamMembersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SearchTeamMembersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v2/team-members/search";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.SearchTeamMembersSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchTeamMembersResponse =
        new operations.SearchTeamMembersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.searchTeamMembersResponse = utils.objectToClass(
              httpRes?.data,
              shared.SearchTeamMembersResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateTeamMember
   *
   * @remarks
   * Updates a single `TeamMember` object. The `TeamMember` object is returned on successful updates.
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#update-a-team-member).
   */
  updateTeamMember(
    req: operations.UpdateTeamMemberRequest,
    security: operations.UpdateTeamMemberSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateTeamMemberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateTeamMemberRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/team-members/{team_member_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateTeamMemberRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateTeamMemberSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateTeamMemberResponse =
        new operations.UpdateTeamMemberResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateTeamMemberResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateTeamMemberResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * UpdateWageSetting
   *
   * @remarks
   * Creates or updates a `WageSetting` object. The object is created if a
   * `WageSetting` with the specified `team_member_id` does not exist. Otherwise,
   * it fully replaces the `WageSetting` object for the team member.
   * The `WageSetting` is returned on a successful update.
   * Learn about [Troubleshooting the Team API](https://developer.squareup.com/docs/team/troubleshooting#create-or-update-a-wage-setting).
   */
  updateWageSetting(
    req: operations.UpdateWageSettingRequest,
    security: operations.UpdateWageSettingSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateWageSettingResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateWageSettingRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v2/team-members/{team_member_id}/wage-setting",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "updateWageSettingRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateWageSettingSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateWageSettingResponse =
        new operations.UpdateWageSettingResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateWageSettingResponse = utils.objectToClass(
              httpRes?.data,
              shared.UpdateWageSettingResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
