<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionInstanceGroups 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the specified instance group resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetResponse
     */
	public function computeRegionInstanceGroupsGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instanceGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\InstanceGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of instance group resources contained within the specified region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListResponse
     */
	public function computeRegionInstanceGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroups', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesResponse
     */
	public function computeRegionInstanceGroupsListInstances(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupsListInstancesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsListInstancesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->regionInstanceGroupsListInstances = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RegionInstanceGroupsListInstances', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the named ports for the specified regional instance group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsResponse
     */
	public function computeRegionInstanceGroupsSetNamedPorts(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "regionInstanceGroupsSetNamedPortsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionInstanceGroupsSetNamedPortsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}