// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type DistributionGroupsGetForOrgSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type DistributionGroupsGetForOrgRequest struct {
	// The name of the distribution group
	DistributionGroupName string `pathParam:"style=simple,explode=false,name=distribution_group_name"`
	// The organization's name
	OrgName string `pathParam:"style=simple,explode=false,name=org_name"`
}

type DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum string

const (
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumBadRequest          DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumConflict            DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "Conflict"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumNotAcceptable       DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumNotFound            DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "NotFound"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumInternalServerError DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumUnauthorized        DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnumTooManyRequests     DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum) ToPointer() *DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type DistributionGroupsGetForOrgDefaultApplicationJSONError struct {
	Code    DistributionGroupsGetForOrgDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                         `json:"message"`
}

// DistributionGroupsGetForOrgDefaultApplicationJSON - Error
type DistributionGroupsGetForOrgDefaultApplicationJSON struct {
	Error DistributionGroupsGetForOrgDefaultApplicationJSONError `json:"error"`
}

// DistributionGroupsGetForOrg200ApplicationJSONOriginEnum - The creation origin of this distribution group
type DistributionGroupsGetForOrg200ApplicationJSONOriginEnum string

const (
	DistributionGroupsGetForOrg200ApplicationJSONOriginEnumAppcenter DistributionGroupsGetForOrg200ApplicationJSONOriginEnum = "appcenter"
	DistributionGroupsGetForOrg200ApplicationJSONOriginEnumHockeyapp DistributionGroupsGetForOrg200ApplicationJSONOriginEnum = "hockeyapp"
)

func (e DistributionGroupsGetForOrg200ApplicationJSONOriginEnum) ToPointer() *DistributionGroupsGetForOrg200ApplicationJSONOriginEnum {
	return &e
}

func (e *DistributionGroupsGetForOrg200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "appcenter":
		fallthrough
	case "hockeyapp":
		*e = DistributionGroupsGetForOrg200ApplicationJSONOriginEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DistributionGroupsGetForOrg200ApplicationJSONOriginEnum: %v", v)
	}
}

// DistributionGroupsGetForOrg200ApplicationJSON - Success
type DistributionGroupsGetForOrg200ApplicationJSON struct {
	// The name of the distribution group
	DisplayName *string `json:"display_name,omitempty"`
	// The unique ID of the distribution group
	ID string `json:"id"`
	// Whether the distribution group is public
	IsPublic bool `json:"is_public"`
	// The name of the distribution group used in URLs
	Name string `json:"name"`
	// The creation origin of this distribution group
	Origin DistributionGroupsGetForOrg200ApplicationJSONOriginEnum `json:"origin"`
}

type DistributionGroupsGetForOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	DistributionGroupsGetForOrg200ApplicationJSONObject *DistributionGroupsGetForOrg200ApplicationJSON
	// Error
	DistributionGroupsGetForOrgDefaultApplicationJSONObject *DistributionGroupsGetForOrgDefaultApplicationJSON
}
