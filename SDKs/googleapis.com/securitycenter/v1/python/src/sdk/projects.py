"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def securitycenter_projects_assets_group(self, request: operations.SecuritycenterProjectsAssetsGroupRequest, security: operations.SecuritycenterProjectsAssetsGroupSecurity) -> operations.SecuritycenterProjectsAssetsGroupResponse:
        r"""Filters an organization's assets and groups them by their specified properties."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsAssetsGroupRequest, base_url, '/v1/{parent}/assets:group', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_assets_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsAssetsGroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsAssetsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupAssetsResponse])
                res.group_assets_response = out

        return res

    def securitycenter_projects_assets_list(self, request: operations.SecuritycenterProjectsAssetsListRequest, security: operations.SecuritycenterProjectsAssetsListSecurity) -> operations.SecuritycenterProjectsAssetsListResponse:
        r"""Lists an organization's assets."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsAssetsListRequest, base_url, '/v1/{parent}/assets', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsAssetsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsAssetsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAssetsResponse])
                res.list_assets_response = out

        return res

    def securitycenter_projects_big_query_exports_create(self, request: operations.SecuritycenterProjectsBigQueryExportsCreateRequest, security: operations.SecuritycenterProjectsBigQueryExportsCreateSecurity) -> operations.SecuritycenterProjectsBigQueryExportsCreateResponse:
        r"""Creates a BigQuery export."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsBigQueryExportsCreateRequest, base_url, '/v1/{parent}/bigQueryExports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_securitycenter_v1_big_query_export_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsBigQueryExportsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsBigQueryExportsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudSecuritycenterV1BigQueryExport])
                res.google_cloud_securitycenter_v1_big_query_export = out

        return res

    def securitycenter_projects_big_query_exports_list(self, request: operations.SecuritycenterProjectsBigQueryExportsListRequest, security: operations.SecuritycenterProjectsBigQueryExportsListSecurity) -> operations.SecuritycenterProjectsBigQueryExportsListResponse:
        r"""Lists BigQuery exports. Note that when requesting BigQuery exports at a given level all exports under that level are also returned e.g. if requesting BigQuery exports under a folder, then all BigQuery exports immediately under the folder plus the ones created under the projects within the folder are returned."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsBigQueryExportsListRequest, base_url, '/v1/{parent}/bigQueryExports', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsBigQueryExportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsBigQueryExportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListBigQueryExportsResponse])
                res.list_big_query_exports_response = out

        return res

    def securitycenter_projects_findings_bulk_mute(self, request: operations.SecuritycenterProjectsFindingsBulkMuteRequest, security: operations.SecuritycenterProjectsFindingsBulkMuteSecurity) -> operations.SecuritycenterProjectsFindingsBulkMuteResponse:
        r"""Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsFindingsBulkMuteRequest, base_url, '/v1/{parent}/findings:bulkMute', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "bulk_mute_findings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsFindingsBulkMuteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsFindingsBulkMuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def securitycenter_projects_mute_configs_create(self, request: operations.SecuritycenterProjectsMuteConfigsCreateRequest, security: operations.SecuritycenterProjectsMuteConfigsCreateSecurity) -> operations.SecuritycenterProjectsMuteConfigsCreateResponse:
        r"""Creates a mute config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsMuteConfigsCreateRequest, base_url, '/v1/{parent}/muteConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_securitycenter_v1_mute_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsMuteConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsMuteConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudSecuritycenterV1MuteConfig])
                res.google_cloud_securitycenter_v1_mute_config = out

        return res

    def securitycenter_projects_mute_configs_list(self, request: operations.SecuritycenterProjectsMuteConfigsListRequest, security: operations.SecuritycenterProjectsMuteConfigsListSecurity) -> operations.SecuritycenterProjectsMuteConfigsListResponse:
        r"""Lists mute configs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsMuteConfigsListRequest, base_url, '/v1/{parent}/muteConfigs', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsMuteConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsMuteConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListMuteConfigsResponse])
                res.list_mute_configs_response = out

        return res

    def securitycenter_projects_notification_configs_create(self, request: operations.SecuritycenterProjectsNotificationConfigsCreateRequest, security: operations.SecuritycenterProjectsNotificationConfigsCreateSecurity) -> operations.SecuritycenterProjectsNotificationConfigsCreateResponse:
        r"""Creates a notification config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsNotificationConfigsCreateRequest, base_url, '/v1/{parent}/notificationConfigs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "notification_config_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsNotificationConfigsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsNotificationConfigsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotificationConfig])
                res.notification_config = out

        return res

    def securitycenter_projects_notification_configs_delete(self, request: operations.SecuritycenterProjectsNotificationConfigsDeleteRequest, security: operations.SecuritycenterProjectsNotificationConfigsDeleteSecurity) -> operations.SecuritycenterProjectsNotificationConfigsDeleteResponse:
        r"""Deletes a notification config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsNotificationConfigsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsNotificationConfigsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsNotificationConfigsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def securitycenter_projects_notification_configs_get(self, request: operations.SecuritycenterProjectsNotificationConfigsGetRequest, security: operations.SecuritycenterProjectsNotificationConfigsGetSecurity) -> operations.SecuritycenterProjectsNotificationConfigsGetResponse:
        r"""Gets a notification config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsNotificationConfigsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsNotificationConfigsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsNotificationConfigsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotificationConfig])
                res.notification_config = out

        return res

    def securitycenter_projects_notification_configs_list(self, request: operations.SecuritycenterProjectsNotificationConfigsListRequest, security: operations.SecuritycenterProjectsNotificationConfigsListSecurity) -> operations.SecuritycenterProjectsNotificationConfigsListResponse:
        r"""Lists notification configs."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsNotificationConfigsListRequest, base_url, '/v1/{parent}/notificationConfigs', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsNotificationConfigsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsNotificationConfigsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNotificationConfigsResponse])
                res.list_notification_configs_response = out

        return res

    def securitycenter_projects_sources_findings_external_systems_patch(self, request: operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest, security: operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchSecurity) -> operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchResponse:
        r"""Updates external system. This is for a given finding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_cloud_securitycenter_v1_external_system", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesFindingsExternalSystemsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GoogleCloudSecuritycenterV1ExternalSystem])
                res.google_cloud_securitycenter_v1_external_system = out

        return res

    def securitycenter_projects_sources_findings_group(self, request: operations.SecuritycenterProjectsSourcesFindingsGroupRequest, security: operations.SecuritycenterProjectsSourcesFindingsGroupSecurity) -> operations.SecuritycenterProjectsSourcesFindingsGroupResponse:
        r"""Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesFindingsGroupRequest, base_url, '/v1/{parent}/findings:group', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "group_findings_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesFindingsGroupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesFindingsGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupFindingsResponse])
                res.group_findings_response = out

        return res

    def securitycenter_projects_sources_findings_list(self, request: operations.SecuritycenterProjectsSourcesFindingsListRequest, security: operations.SecuritycenterProjectsSourcesFindingsListSecurity) -> operations.SecuritycenterProjectsSourcesFindingsListResponse:
        r"""Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesFindingsListRequest, base_url, '/v1/{parent}/findings', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesFindingsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesFindingsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListFindingsResponse])
                res.list_findings_response = out

        return res

    def securitycenter_projects_sources_findings_set_mute(self, request: operations.SecuritycenterProjectsSourcesFindingsSetMuteRequest, security: operations.SecuritycenterProjectsSourcesFindingsSetMuteSecurity) -> operations.SecuritycenterProjectsSourcesFindingsSetMuteResponse:
        r"""Updates the mute state of a finding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesFindingsSetMuteRequest, base_url, '/v1/{name}:setMute', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_mute_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesFindingsSetMuteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesFindingsSetMuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Finding])
                res.finding = out

        return res

    def securitycenter_projects_sources_findings_set_state(self, request: operations.SecuritycenterProjectsSourcesFindingsSetStateRequest, security: operations.SecuritycenterProjectsSourcesFindingsSetStateSecurity) -> operations.SecuritycenterProjectsSourcesFindingsSetStateResponse:
        r"""Updates the state of a finding."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesFindingsSetStateRequest, base_url, '/v1/{name}:setState', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_finding_state_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesFindingsSetStateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesFindingsSetStateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Finding])
                res.finding = out

        return res

    def securitycenter_projects_sources_list(self, request: operations.SecuritycenterProjectsSourcesListRequest, security: operations.SecuritycenterProjectsSourcesListSecurity) -> operations.SecuritycenterProjectsSourcesListResponse:
        r"""Lists all sources belonging to an organization."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SecuritycenterProjectsSourcesListRequest, base_url, '/v1/{parent}/sources', request)
        
        query_params = utils.get_query_params(operations.SecuritycenterProjectsSourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SecuritycenterProjectsSourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSourcesResponse])
                res.list_sources_response = out

        return res

    