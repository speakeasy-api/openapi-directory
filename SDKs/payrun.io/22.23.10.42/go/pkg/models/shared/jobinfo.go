// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// JobInfoJobInfoErrors - The job infos' errors
type JobInfoJobInfoErrors struct {
	Error []string `json:"Error,omitempty"`
}

// JobInfoJobInfoJobStatusEnum - The job infos' job status
type JobInfoJobInfoJobStatusEnum string

const (
	JobInfoJobInfoJobStatusEnumNew        JobInfoJobInfoJobStatusEnum = "New"
	JobInfoJobInfoJobStatusEnumPending    JobInfoJobInfoJobStatusEnum = "Pending"
	JobInfoJobInfoJobStatusEnumInProgress JobInfoJobInfoJobStatusEnum = "InProgress"
	JobInfoJobInfoJobStatusEnumSuccess    JobInfoJobInfoJobStatusEnum = "Success"
	JobInfoJobInfoJobStatusEnumFailed     JobInfoJobInfoJobStatusEnum = "Failed"
	JobInfoJobInfoJobStatusEnumOnHold     JobInfoJobInfoJobStatusEnum = "OnHold"
)

func (e *JobInfoJobInfoJobStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "New":
		fallthrough
	case "Pending":
		fallthrough
	case "InProgress":
		fallthrough
	case "Success":
		fallthrough
	case "Failed":
		fallthrough
	case "OnHold":
		*e = JobInfoJobInfoJobStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for JobInfoJobInfoJobStatusEnum: %s", s)
	}
}

type JobInfoJobInfo struct {
	// The job infos' created
	Created *time.Time `json:"Created,omitempty"`
	// The job infos' employer key
	EmployerKey *string `json:"EmployerKey,omitempty"`
	// The job infos' errors
	Errors *JobInfoJobInfoErrors `json:"Errors,omitempty"`
	// The job infos' holding date
	HoldingDate *time.Time `json:"HoldingDate,omitempty"`
	// The job infos' job id
	JobID *string `json:"JobId,omitempty"`
	// The job infos' job status
	JobStatus *JobInfoJobInfoJobStatusEnum `json:"JobStatus,omitempty"`
	// The job infos' job type
	JobType *string `json:"JobType,omitempty"`
	// The job infos' last updated
	LastUpdated *time.Time `json:"LastUpdated,omitempty"`
	// The job infos' progress
	Progress *float64 `json:"Progress,omitempty"`
}

// JobInfo - The job info object.
type JobInfo struct {
	JobInfo *JobInfoJobInfo `json:"JobInfo,omitempty"`
}
