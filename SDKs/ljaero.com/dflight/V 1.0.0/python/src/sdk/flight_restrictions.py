"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class FlightRestrictions:
    r"""#### Temporary Flight Restrictions (TFRs) define areas restricting air operations (including drone operations) due to hazardous conditions, special events, or other safety/security reasons.
    All published/active TFRs in specified area will be included in the response. Check the startDateTime and endDateTime properties to determine whether or not the restriction is applicable during your planned time of operation. In case of a TFR in your area of intended operation, you might still be able to fly by obtaining a via waiver through the [Special Governmental Interest (SGI) process](https://www.faa.gov/uas/advanced_operations/emergency_situations).
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def tfr_by_distance_us_v1_restrictions_distance_query_post(self, request: operations.TfrByDistanceUsV1RestrictionsDistanceQueryPostRequest) -> operations.TfrByDistanceUsV1RestrictionsDistanceQueryPostResponse:
        r"""Retrieve flight restrictions applicable within given distance of location.
        Retrieve Flight Restrictions applicable within given distance of a point. Request body parameters are:
        * latitude:  WGS84 latitude coordinate of your selected point, in decimal degrees
        * longitude:  WGS84 longitude coordinate of your selected point, in decimal degrees
        * distance:  distance in meters (max allowed value is 25000)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/restrictions/distance-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "nota_ms_by_distance", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TfrByDistanceUsV1RestrictionsDistanceQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NOTAMsDistanceResponse])
                res.nota_ms_distance_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def tfr_by_poly_us_v1_restrictions_polygon_query_post(self, request: operations.TfrByPolyUsV1RestrictionsPolygonQueryPostRequest) -> operations.TfrByPolyUsV1RestrictionsPolygonQueryPostResponse:
        r"""Retrieve flight restrictions applicable within given area.
        Retrieve Flight Restrictions located within given area. Request body parameters are:
        * poly:  [GeoJSON Polygon](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the area. Max allowed area is 1000 km^2.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/restrictions/polygon-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "nota_ms_by_polygon", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TfrByPolyUsV1RestrictionsPolygonQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NOTAMsPolyResponse])
                res.nota_ms_poly_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    def tfr_by_route_us_v1_restrictions_route_query_post(self, request: operations.TfrByRouteUsV1RestrictionsRouteQueryPostRequest) -> operations.TfrByRouteUsV1RestrictionsRouteQueryPostResponse:
        r"""Retrieve flight restrictions applicable along route.
        Retrieve Flight Restrictions applicable along your route. Request body parameters are:
        * route:  [GeoJSON Linestring](https://www.rfc-editor.org/rfc/rfc7946.html#appendix-A) defining the route. Max allowed length is 50 km.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/us/v1/restrictions/route-query'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "nota_ms_by_route", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TfrByRouteUsV1RestrictionsRouteQueryPostResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NOTAMsRouteResponse])
                res.nota_ms_route_response = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HTTPValidationError])
                res.http_validation_error = out

        return res

    