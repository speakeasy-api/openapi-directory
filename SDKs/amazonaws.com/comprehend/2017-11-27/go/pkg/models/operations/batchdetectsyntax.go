// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BatchDetectSyntaxXAmzTargetEnum
type BatchDetectSyntaxXAmzTargetEnum string

const (
	BatchDetectSyntaxXAmzTargetEnumComprehend20171127BatchDetectSyntax BatchDetectSyntaxXAmzTargetEnum = "Comprehend_20171127.BatchDetectSyntax"
)

func (e BatchDetectSyntaxXAmzTargetEnum) ToPointer() *BatchDetectSyntaxXAmzTargetEnum {
	return &e
}

func (e *BatchDetectSyntaxXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Comprehend_20171127.BatchDetectSyntax":
		*e = BatchDetectSyntaxXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BatchDetectSyntaxXAmzTargetEnum: %v", v)
	}
}

type BatchDetectSyntaxRequest struct {
	BatchDetectSyntaxRequest shared.BatchDetectSyntaxRequest `request:"mediaType=application/json"`
	XAmzAlgorithm            *string                         `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256        *string                         `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential           *string                         `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                 *string                         `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken        *string                         `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature            *string                         `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders        *string                         `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget               BatchDetectSyntaxXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type BatchDetectSyntaxResponse struct {
	// Success
	BatchDetectSyntaxResponse *shared.BatchDetectSyntaxResponse
	// BatchSizeLimitExceededException
	BatchSizeLimitExceededException interface{}
	ContentType                     string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// TextSizeLimitExceededException
	TextSizeLimitExceededException interface{}
	// UnsupportedLanguageException
	UnsupportedLanguageException interface{}
}
