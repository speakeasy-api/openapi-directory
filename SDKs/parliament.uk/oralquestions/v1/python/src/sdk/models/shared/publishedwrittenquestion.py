"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import memberfordate as shared_memberfordate
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PublishedWrittenQuestionQuestionTypeEnum(str, Enum):
    NAMED_DAY = 'NamedDay'
    ORDINARY = 'Ordinary'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublishedWrittenQuestion:
    
    answer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Answer'), 'exclude': lambda f: f is None }})  
    answered_when: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweredWhen'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    answering_body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweringBody'), 'exclude': lambda f: f is None }})  
    answering_body_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweringBodyId'), 'exclude': lambda f: f is None }})  
    answering_minister: Optional[shared_memberfordate.MemberForDate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweringMinister'), 'exclude': lambda f: f is None }})  
    answering_minister_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweringMinisterId'), 'exclude': lambda f: f is None }})  
    answering_minister_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AnsweringMinisterTitle'), 'exclude': lambda f: f is None }})  
    asking_member: Optional[shared_memberfordate.MemberForDate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AskingMember'), 'exclude': lambda f: f is None }})  
    asking_member_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AskingMemberId'), 'exclude': lambda f: f is None }})  
    due_for_answer: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DueForAnswer'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    question_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionText'), 'exclude': lambda f: f is None }})  
    question_type: Optional[PublishedWrittenQuestionQuestionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('QuestionType'), 'exclude': lambda f: f is None }})  
    tabled_when: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TabledWhen'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    uin: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UIN'), 'exclude': lambda f: f is None }})  
    