/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class App {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get the global configuration for an application. Should be called during app statup.
   *
   * This includes things like device and playback rules, classifications,
   * sitemap and subscriptions.
   *
   * You have the option to select specific configuration objects using the 'include'
   * parameter, or if unspecified, getting all configuration.
   *
   */
  getAppConfig(
    req: operations.GetAppConfigRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAppConfigResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAppConfigRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/config";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAppConfigResponse =
        new operations.GetAppConfigResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.appConfig = utils.objectToClass(
              httpRes?.data,
              shared.AppConfig
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a page with the specified id.
   *
   * This is a cut down version for low memory devices.123
   *
   * If targeting the search page you must url encode the search term as a parameter
   * using the `q` key. For example if your browser path looks like `/search?q=the`
   * then what you pass to this endpoint would look like `/itv/page?path=/search%3Fq%3Dthe`.
   *
   */
  getItvPage(
    req: operations.GetItvPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetItvPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetItvPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/itv/page";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetItvPageResponse =
        new operations.GetItvPageResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
        case httpRes?.status == 301:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a page with the specified id.
   *
   * If targeting the search page you must url encode the search term as a parameter
   * using the `q` key. For example if your browser path looks like `/search?q=the`
   * then what you pass to this endpoint would look like `/page?path=/search%3Fq%3Dthe`.
   *
   */
  getPage(
    req: operations.GetPageRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPageResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetPageRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/page";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetPageResponse = new operations.GetPageResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.page = utils.objectToClass(httpRes?.data, shared.Page);
          }
          break;
        case httpRes?.status == 301:
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serviceError = utils.objectToClass(
              httpRes?.data,
              shared.ServiceError
            );
          }
          break;
      }

      return res;
    });
  }
}
