"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FlexV1InsightsSegments:
    r"""OK"""
    
    account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id'), 'exclude': lambda f: f is None }})
    r"""The unique id for the account."""  
    agent_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_id'), 'exclude': lambda f: f is None }})
    r"""The unique id for the agent."""  
    agent_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_link'), 'exclude': lambda f: f is None }})
    r"""The link to the agent conversation."""  
    agent_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_name'), 'exclude': lambda f: f is None }})
    r"""The name of the agent."""  
    agent_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_phone'), 'exclude': lambda f: f is None }})
    r"""The phone number of the agent."""  
    agent_team_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_team_name'), 'exclude': lambda f: f is None }})
    r"""The team name to which agent belongs."""  
    agent_team_name_in_hierarchy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('agent_team_name_in_hierarchy'), 'exclude': lambda f: f is None }})
    r"""he team name to which agent belongs."""  
    assessment_percentage: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessment_percentage'), 'exclude': lambda f: f is None }})
    r"""The percentage scored on the Assessments."""  
    assessment_type: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assessment_type'), 'exclude': lambda f: f is None }})
    r"""The type of the assessment."""  
    customer_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_link'), 'exclude': lambda f: f is None }})
    r"""The link to the customer conversation."""  
    customer_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_name'), 'exclude': lambda f: f is None }})
    r"""The name of the customer."""  
    customer_phone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer_phone'), 'exclude': lambda f: f is None }})
    r"""The phone number of the customer."""  
    date_: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'exclude': lambda f: f is None }})
    r"""The date of the conversation."""  
    external_contact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_contact'), 'exclude': lambda f: f is None }})  
    external_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_id'), 'exclude': lambda f: f is None }})
    r"""The unique id for the conversation."""  
    external_segment_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_segment_link'), 'exclude': lambda f: f is None }})
    r"""The hyperlink to recording of the task event."""  
    external_segment_link_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_segment_link_id'), 'exclude': lambda f: f is None }})
    r"""The uuid for the external_segment_link."""  
    media: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})
    r"""The media identifiers of the conversation."""  
    queue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('queue'), 'exclude': lambda f: f is None }})  
    segment_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment_id'), 'exclude': lambda f: f is None }})
    r"""To unique id of the segment"""  
    segment_recording_offset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segment_recording_offset'), 'exclude': lambda f: f is None }})
    r"""The offset value for the recording."""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    