"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SearchTeamMembersFilter:
    r"""Represents a filter used in a search for `TeamMember` objects. `AND` logic is applied
    between the individual fields, and `OR` logic is applied within list-based fields.
    For example, setting this filter value:
    ```
    filter = (locations_ids = [\"A\", \"B\"], status = ACTIVE)
    ```
    returns only active team members assigned to either location \"A\" or \"B\".
    """
    
    location_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location_ids'), 'exclude': lambda f: f is None }})
    r"""When present, filters by team members assigned to the specified locations.
    When empty, includes team members assigned to any location.
    """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""When present, filters by team members who match the given status.
    When empty, includes team members of all statuses.
    """  
    