<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - Open Source GPS Tracking Platform
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
        /** Demo Server 1 */
		'https://demo.traccar.org/api',
        /** Demo Server 2 */
		'https://demo2.traccar.org/api',
        /** Demo Server 3 */
		'https://demo3.traccar.org/api',
        /** Demo Server 4 */
		'https://demo4.traccar.org/api',
        /** Subscription Server */
		'https://server.traccar.org/api',
        /** Other Server */
		'http://{host}:{port}/api',
	];
  	
    /**
     * Computed attributes management
     * 
     * @var Attributes $$attributes
     */
	public Attributes $attributes;
	
    /**
     * Calendar management
     * 
     * @var Calendars $$calendars
     */
	public Calendars $calendars;
	
    /**
     * Sending commands to devices and stored command management
     * 
     * @var Commands $$commands
     */
	public Commands $commands;
	
    /**
     * Device management
     * 
     * @var Devices $$devices
     */
	public Devices $devices;
	
    /**
     * Drivers management
     * 
     * @var Drivers $$drivers
     */
	public Drivers $drivers;
	
    /**
     * Retrieving event information
     * 
     * @var Events $$events
     */
	public Events $events;
	
    /**
     * Geofence management
     * 
     * @var Geofences $$geofences
     */
	public Geofences $geofences;
	
    /**
     * Group management
     * 
     * @var Groups $$groups
     */
	public Groups $groups;
	
    /**
     * Maintenance management
     * 
     * @var Maintenance $$maintenance
     */
	public Maintenance $maintenance;
	
    /**
     * User notifications management
     * 
     * @var Notifications $$notifications
     */
	public Notifications $notifications;
	
    /**
     * User permissions and other object linking
     * 
     * @var Permissions $$permissions
     */
	public Permissions $permissions;
	
    /**
     * Retrieving raw location information
     * 
     * @var Positions $$positions
     */
	public Positions $positions;
	
    /**
     * Reports generation
     * 
     * @var Reports $$reports
     */
	public Reports $reports;
	
    /**
     * Server information
     * 
     * @var Server $$server
     */
	public Server $server;
	
    /**
     * User session management
     * 
     * @var Session $$session
     */
	public Session $session;
	
    /**
     * Retrieving server statistics
     * 
     * @var Statistics $$statistics
     */
	public Statistics $statistics;
	
    /**
     * User management
     * 
     * @var Users $$users
     */
	public Users $users;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->attributes = new Attributes(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->calendars = new Calendars(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->commands = new Commands(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->devices = new Devices(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->drivers = new Drivers(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->events = new Events(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->geofences = new Geofences(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->groups = new Groups(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->maintenance = new Maintenance(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->notifications = new Notifications(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->permissions = new Permissions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->positions = new Positions(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->reports = new Reports(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->server = new Server(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->session = new Session(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->statistics = new Statistics(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->users = new Users(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
}