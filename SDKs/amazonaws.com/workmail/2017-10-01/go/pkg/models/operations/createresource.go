// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateResourceXAmzTargetEnum
type CreateResourceXAmzTargetEnum string

const (
	CreateResourceXAmzTargetEnumWorkMailServiceCreateResource CreateResourceXAmzTargetEnum = "WorkMailService.CreateResource"
)

func (e CreateResourceXAmzTargetEnum) ToPointer() *CreateResourceXAmzTargetEnum {
	return &e
}

func (e *CreateResourceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WorkMailService.CreateResource":
		*e = CreateResourceXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateResourceXAmzTargetEnum: %v", v)
	}
}

type CreateResourceRequest struct {
	CreateResourceRequest shared.CreateResourceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateResourceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateResourceResponse struct {
	ContentType string
	// Success
	CreateResourceResponse *shared.CreateResourceResponse
	// DirectoryServiceAuthenticationFailedException
	DirectoryServiceAuthenticationFailedException interface{}
	// DirectoryUnavailableException
	DirectoryUnavailableException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NameAvailabilityException
	NameAvailabilityException interface{}
	// OrganizationNotFoundException
	OrganizationNotFoundException interface{}
	// OrganizationStateException
	OrganizationStateException interface{}
	// ReservedNameException
	ReservedNameException interface{}
	StatusCode            int
	RawResponse           *http.Response
}
