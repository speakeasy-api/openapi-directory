"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Comments:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def drive_comments_create(self, request: operations.DriveCommentsCreateRequest, security: operations.DriveCommentsCreateSecurity) -> operations.DriveCommentsCreateResponse:
        r"""Creates a comment on a file."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveCommentsCreateRequest, base_url, '/files/{fileId}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveCommentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveCommentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def drive_comments_delete(self, request: operations.DriveCommentsDeleteRequest, security: operations.DriveCommentsDeleteSecurity) -> operations.DriveCommentsDeleteResponse:
        r"""Deletes a comment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveCommentsDeleteRequest, base_url, '/files/{fileId}/comments/{commentId}', request)
        
        query_params = utils.get_query_params(operations.DriveCommentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveCommentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def drive_comments_get(self, request: operations.DriveCommentsGetRequest, security: operations.DriveCommentsGetSecurity) -> operations.DriveCommentsGetResponse:
        r"""Gets a comment by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveCommentsGetRequest, base_url, '/files/{fileId}/comments/{commentId}', request)
        
        query_params = utils.get_query_params(operations.DriveCommentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveCommentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def drive_comments_list(self, request: operations.DriveCommentsListRequest, security: operations.DriveCommentsListSecurity) -> operations.DriveCommentsListResponse:
        r"""Lists a file's comments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveCommentsListRequest, base_url, '/files/{fileId}/comments', request)
        
        query_params = utils.get_query_params(operations.DriveCommentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveCommentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CommentList])
                res.comment_list = out

        return res

    def drive_comments_update(self, request: operations.DriveCommentsUpdateRequest, security: operations.DriveCommentsUpdateSecurity) -> operations.DriveCommentsUpdateResponse:
        r"""Updates a comment with patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DriveCommentsUpdateRequest, base_url, '/files/{fileId}/comments/{commentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DriveCommentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DriveCommentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    