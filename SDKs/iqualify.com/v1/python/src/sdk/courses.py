"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Courses:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_courses(self) -> operations.GetCoursesResponse:
        r"""Find courses
        Responds with all courses (draft and published.)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/courses'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCoursesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CourseResponse]])
                res.course_responses = out
        elif http_res.status_code in [401, 403]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_courses_content_id_(self, request: operations.GetCoursesContentIDRequest) -> operations.GetCoursesContentIDResponse:
        r"""Find course by contentId
        Responds with a course matching the contentId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCoursesContentIDRequest, base_url, '/courses/{contentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCoursesContentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CourseMetaResponse])
                res.course_meta_response = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_courses_content_id_activations(self, request: operations.GetCoursesContentIDActivationsRequest) -> operations.GetCoursesContentIDActivationsResponse:
        r"""Find activations for a contentId
        Responds with all activations for the contentId provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCoursesContentIDActivationsRequest, base_url, '/courses/{contentId}/activations', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCoursesContentIDActivationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ActivationResponse])
                res.activation_response = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_courses_content_id_permissions(self, request: operations.GetCoursesContentIDPermissionsRequest) -> operations.GetCoursesContentIDPermissionsResponse:
        r"""Find users who have access to the contentId provided
        Responds with users who have access to a specific course by contentId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCoursesContentIDPermissionsRequest, base_url, '/courses/{contentId}/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCoursesContentIDPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UserPermission])
                res.user_permission = out
        elif http_res.status_code in [401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def post_courses_root_content_id_permissions_user_email_(self, request: operations.PostCoursesRootContentIDPermissionsUserEmailRequest) -> operations.PostCoursesRootContentIDPermissionsUserEmailResponse:
        r"""Update course access
        Provide a user with access to a specific course by rootContentId.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostCoursesRootContentIDPermissionsUserEmailRequest, base_url, '/courses/{rootContentId}/permissions/{userEmail}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostCoursesRootContentIDPermissionsUserEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostCoursesRootContentIDPermissionsUserEmail201ApplicationJSON])
                res.post_courses_root_content_id_permissions_user_email_201_application_json_object = out
        elif http_res.status_code in [400, 401, 403, 404]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    