/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NeoVIN - Describes the NeoVIN specification
 */
public class NeoVIN {
    /**
     * Listing of all options and packages with detailed equipment identified that could have been installed on the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_options_details")
    public java.util.Map<String, Object> availableOptionsDetails;
    public NeoVIN withAvailableOptionsDetails(java.util.Map<String, Object> availableOptionsDetails) {
        this.availableOptionsDetails = availableOptionsDetails;
        return this;
    }
    
    /**
     * Body subtype (cab) of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_subtype")
    public String bodySubtype;
    public NeoVIN withBodySubtype(String bodySubtype) {
        this.bodySubtype = bodySubtype;
        return this;
    }
    
    /**
     * Body type of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_type")
    public String bodyType;
    public NeoVIN withBodyType(String bodyType) {
        this.bodyType = bodyType;
        return this;
    }
    
    /**
     * City miles per gallon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city_mpg")
    public Double cityMpg;
    public NeoVIN withCityMpg(Double cityMpg) {
        this.cityMpg = cityMpg;
        return this;
    }
    
    /**
     * Calculated combination of base MSRP with the delivery charges and the installed options MSRP
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("combined_msrp")
    public Double combinedMsrp;
    public NeoVIN withCombinedMsrp(Double combinedMsrp) {
        this.combinedMsrp = combinedMsrp;
        return this;
    }
    
    /**
     * vin first decoded at timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public Long createdAt;
    public NeoVIN withCreatedAt(Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * vin first decoded at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at_date")
    public String createdAtDate;
    public NeoVIN withCreatedAtDate(String createdAtDate) {
        this.createdAtDate = createdAtDate;
        return this;
    }
    
    /**
     * This will represent if previous vin decode values are updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("decode_version")
    public Long decodeVersion;
    public NeoVIN withDecodeVersion(Long decodeVersion) {
        this.decodeVersion = decodeVersion;
        return this;
    }
    
    /**
     * Manufacturer defined delivery charges
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery_charges")
    public Double deliveryCharges;
    public NeoVIN withDeliveryCharges(Double deliveryCharges) {
        this.deliveryCharges = deliveryCharges;
        return this;
    }
    
    /**
     * Number of doors on the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doors")
    public Long doors;
    public NeoVIN withDoors(Long doors) {
        this.doors = doors;
        return this;
    }
    
    /**
     * Identified drivetrain of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("drivetrain")
    public String drivetrain;
    public NeoVIN withDrivetrain(String drivetrain) {
        this.drivetrain = drivetrain;
        return this;
    }
    
    /**
     * Base identification of the number of cylinders and configuration of the installed engine on the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("engine")
    public String engine;
    public NeoVIN withEngine(String engine) {
        this.engine = engine;
        return this;
    }
    
    /**
     * The manufacturer defined option code and name for the exterior color of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exterior_color")
    public java.util.Map<String, Object> exteriorColor;
    public NeoVIN withExteriorColor(java.util.Map<String, Object> exteriorColor) {
        this.exteriorColor = exteriorColor;
        return this;
    }
    
    /**
     * Normalized feature set of equipment identified that have been identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("features")
    public java.util.Map<String, Object> features;
    public NeoVIN withFeatures(java.util.Map<String, Object> features) {
        this.features = features;
        return this;
    }
    
    /**
     * Identified Fuel type of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fuel_type")
    public String fuelType;
    public NeoVIN withFuelType(String fuelType) {
        this.fuelType = fuelType;
        return this;
    }
    
    /**
     * Overall height of the vehicle (in)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    public Double height;
    public NeoVIN withHeight(Double height) {
        this.height = height;
        return this;
    }
    
    /**
     * Highway miles per gallon
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("highway_mpg")
    public Double highwayMpg;
    public NeoVIN withHighwayMpg(Double highwayMpg) {
        this.highwayMpg = highwayMpg;
        return this;
    }
    
    /**
     * Detailed equipment identified as installed on the vehicle, including whether that item was standard to the version of the vehicle or was added as an installed option
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installed_equipment")
    public java.util.Map<String, Object> installedEquipment;
    public NeoVIN withInstalledEquipment(java.util.Map<String, Object> installedEquipment) {
        this.installedEquipment = installedEquipment;
        return this;
    }
    
    /**
     * Listing of all options and packages with detailed equipment identified that have been identified as installed on the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installed_options_details")
    public java.util.Map<String, Object> installedOptionsDetails;
    public NeoVIN withInstalledOptionsDetails(java.util.Map<String, Object> installedOptionsDetails) {
        this.installedOptionsDetails = installedOptionsDetails;
        return this;
    }
    
    /**
     * Calculated combination of the MSRP for the installed options and packages
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("installed_options_msrp")
    public Double installedOptionsMsrp;
    public NeoVIN withInstalledOptionsMsrp(Double installedOptionsMsrp) {
        this.installedOptionsMsrp = installedOptionsMsrp;
        return this;
    }
    
    /**
     * The manufacturer defined option code and name for the interior color of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interior_color")
    public java.util.Map<String, Object> interiorColor;
    public NeoVIN withInteriorColor(java.util.Map<String, Object> interiorColor) {
        this.interiorColor = interiorColor;
        return this;
    }
    
    /**
     * Overall length of the vehicle (in)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length")
    public Double length;
    public NeoVIN withLength(Double length) {
        this.length = length;
        return this;
    }
    
    /**
     * Identification of primary source data used for trim and installed colors and options
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("listing_confidence")
    public String listingConfidence;
    public NeoVIN withListingConfidence(String listingConfidence) {
        this.listingConfidence = listingConfidence;
        return this;
    }
    
    /**
     * Make of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("make")
    public String make;
    public NeoVIN withMake(String make) {
        this.make = make;
        return this;
    }
    
    /**
     * Manufacturer code of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer_code")
    public String manufacturerCode;
    public NeoVIN withManufacturerCode(String manufacturerCode) {
        this.manufacturerCode = manufacturerCode;
        return this;
    }
    
    /**
     * Model of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    public String model;
    public NeoVIN withModel(String model) {
        this.model = model;
        return this;
    }
    
    /**
     * Base MSRP as defined for the defined version of that vehicle with no options installed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("msrp")
    public Double msrp;
    public NeoVIN withMsrp(Double msrp) {
        this.msrp = msrp;
        return this;
    }
    
    /**
     * Option and package codes installed on the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options_packages")
    public String optionsPackages;
    public NeoVIN withOptionsPackages(String optionsPackages) {
        this.optionsPackages = optionsPackages;
        return this;
    }
    
    /**
     * Extracted manufacturer package code related to selection of the vehicle version (where available / applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_code")
    public String packageCode;
    public NeoVIN withPackageCode(String packageCode) {
        this.packageCode = packageCode;
        return this;
    }
    
    /**
     * Extracted manufacturer package code description (where available / applicable)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_description")
    public String packageDescription;
    public NeoVIN withPackageDescription(String packageDescription) {
        this.packageDescription = packageDescription;
        return this;
    }
    
    /**
     * Identified seating capacity of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("seating_capacity")
    public Double seatingCapacity;
    public NeoVIN withSeatingCapacity(Double seatingCapacity) {
        this.seatingCapacity = seatingCapacity;
        return this;
    }
    
    /**
     * Vin prefix identification used in the decoding of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("squish_vin")
    public String squishVin;
    public NeoVIN withSquishVin(String squishVin) {
        this.squishVin = squishVin;
        return this;
    }
    
    /**
     * Identified installed Transmission of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmission")
    public String transmission;
    public NeoVIN withTransmission(String transmission) {
        this.transmission = transmission;
        return this;
    }
    
    /**
     * Identification of confidence related to the selection of the installed transmission
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmission_confidence")
    public String transmissionConfidence;
    public NeoVIN withTransmissionConfidence(String transmissionConfidence) {
        this.transmissionConfidence = transmissionConfidence;
        return this;
    }
    
    /**
     * The description of the installed transmission
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmission_description")
    public String transmissionDescription;
    public NeoVIN withTransmissionDescription(String transmissionDescription) {
        this.transmissionDescription = transmissionDescription;
        return this;
    }
    
    /**
     * Trim of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trim")
    public String trim;
    public NeoVIN withTrim(String trim) {
        this.trim = trim;
        return this;
    }
    
    /**
     * Identification of confidence related to the selection of the trim
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trim_confidence")
    public String trimConfidence;
    public NeoVIN withTrimConfidence(String trimConfidence) {
        this.trimConfidence = trimConfidence;
        return this;
    }
    
    /**
     * vin last decoded at timestamp
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public Long updatedAt;
    public NeoVIN withUpdatedAt(Long updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * vin last decoded at date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at_date")
    public String updatedAtDate;
    public NeoVIN withUpdatedAtDate(String updatedAtDate) {
        this.updatedAtDate = updatedAtDate;
        return this;
    }
    
    /**
     * Version Name of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    public String version;
    public NeoVIN withVersion(String version) {
        this.version = version;
        return this;
    }
    
    /**
     * Identification of confidence related to the selection of the vehicle version
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version_confidence")
    public String versionConfidence;
    public NeoVIN withVersionConfidence(String versionConfidence) {
        this.versionConfidence = versionConfidence;
        return this;
    }
    
    /**
     * 17 char long VIN of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vin")
    public String vin;
    public NeoVIN withVin(String vin) {
        this.vin = vin;
        return this;
    }
    
    /**
     * Gross vehicle weight (lbs)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    public Double weight;
    public NeoVIN withWeight(Double weight) {
        this.weight = weight;
        return this;
    }
    
    /**
     * Overall width of the vehicle (in)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    public Double width;
    public NeoVIN withWidth(Double width) {
        this.width = width;
        return this;
    }
    
    /**
     * Model Year of the vehicle
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    public Long year;
    public NeoVIN withYear(Long year) {
        this.year = year;
        return this;
    }
    
}
