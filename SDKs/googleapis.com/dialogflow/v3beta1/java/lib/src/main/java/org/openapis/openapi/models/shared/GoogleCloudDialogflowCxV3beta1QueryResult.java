/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudDialogflowCxV3beta1QueryResult - Represents the result of a conversational query.
 */
public class GoogleCloudDialogflowCxV3beta1QueryResult {
    /**
     * A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentPage")
    public GoogleCloudDialogflowCxV3beta1Page currentPage;

    public GoogleCloudDialogflowCxV3beta1QueryResult withCurrentPage(GoogleCloudDialogflowCxV3beta1Page currentPage) {
        this.currentPage = currentPage;
        return this;
    }
    
    /**
     * The free-form diagnostic info. For example, this field could contain webhook call latency. The fields of this data can change without notice, so you should not write code that depends on its structure. One of the fields is called "Alternative Matched Intents", which may aid with debugging. The following describes these intent results: - The list is empty if no intent was matched to end-user input. - Only intents that are referenced in the currently active flow are included. - The matched intent is included. - Other intents that could have matched end-user input, but did not match because they are referenced by intent routes that are out of [scope](https://cloud.google.com/dialogflow/cx/docs/concept/handler#scope), are included. - Other intents referenced by intent routes in scope that matched end-user input, but had a lower confidence score.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diagnosticInfo")
    public java.util.Map<String, Object> diagnosticInfo;

    public GoogleCloudDialogflowCxV3beta1QueryResult withDiagnosticInfo(java.util.Map<String, Object> diagnosticInfo) {
        this.diagnosticInfo = diagnosticInfo;
        return this;
    }
    
    /**
     * Represents the input for dtmf event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dtmf")
    public GoogleCloudDialogflowCxV3beta1DtmfInput dtmf;

    public GoogleCloudDialogflowCxV3beta1QueryResult withDtmf(GoogleCloudDialogflowCxV3beta1DtmfInput dtmf) {
        this.dtmf = dtmf;
        return this;
    }
    
    /**
     * An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intent")
    public GoogleCloudDialogflowCxV3beta1Intent intent;

    public GoogleCloudDialogflowCxV3beta1QueryResult withIntent(GoogleCloudDialogflowCxV3beta1Intent intent) {
        this.intent = intent;
        return this;
    }
    
    /**
     * The intent detection confidence. Values range from 0.0 (completely uncertain) to 1.0 (completely certain). This value is for informational purpose only and is only used to help match the best intent within the classification threshold. This value may change for the same end-user expression at any time due to a model retraining or change in implementation. This field is deprecated, please use QueryResult.match instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("intentDetectionConfidence")
    public Float intentDetectionConfidence;

    public GoogleCloudDialogflowCxV3beta1QueryResult withIntentDetectionConfidence(Float intentDetectionConfidence) {
        this.intentDetectionConfidence = intentDetectionConfidence;
        return this;
    }
    
    /**
     * The language that was triggered during intent detection. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;

    public GoogleCloudDialogflowCxV3beta1QueryResult withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * Represents one match result of MatchIntent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("match")
    public GoogleCloudDialogflowCxV3beta1Match match;

    public GoogleCloudDialogflowCxV3beta1QueryResult withMatch(GoogleCloudDialogflowCxV3beta1Match match) {
        this.match = match;
        return this;
    }
    
    /**
     * The collected session parameters. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    public java.util.Map<String, Object> parameters;

    public GoogleCloudDialogflowCxV3beta1QueryResult withParameters(java.util.Map<String, Object> parameters) {
        this.parameters = parameters;
        return this;
    }
    
    /**
     * The list of rich messages returned to the client. Responses vary from simple text messages to more sophisticated, structured payloads used to drive complex logic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseMessages")
    public GoogleCloudDialogflowCxV3beta1ResponseMessage[] responseMessages;

    public GoogleCloudDialogflowCxV3beta1QueryResult withResponseMessages(GoogleCloudDialogflowCxV3beta1ResponseMessage[] responseMessages) {
        this.responseMessages = responseMessages;
        return this;
    }
    
    /**
     * The result of sentiment analysis. Sentiment analysis inspects user input and identifies the prevailing subjective opinion, especially to determine a user's attitude as positive, negative, or neutral.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sentimentAnalysisResult")
    public GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult sentimentAnalysisResult;

    public GoogleCloudDialogflowCxV3beta1QueryResult withSentimentAnalysisResult(GoogleCloudDialogflowCxV3beta1SentimentAnalysisResult sentimentAnalysisResult) {
        this.sentimentAnalysisResult = sentimentAnalysisResult;
        return this;
    }
    
    /**
     * If natural language text was provided as input, this field will contain a copy of the text.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;

    public GoogleCloudDialogflowCxV3beta1QueryResult withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * If natural language speech audio was provided as input, this field will contain the transcript for the audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcript")
    public String transcript;

    public GoogleCloudDialogflowCxV3beta1QueryResult withTranscript(String transcript) {
        this.transcript = transcript;
        return this;
    }
    
    /**
     * If an event was provided as input, this field will contain the name of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerEvent")
    public String triggerEvent;

    public GoogleCloudDialogflowCxV3beta1QueryResult withTriggerEvent(String triggerEvent) {
        this.triggerEvent = triggerEvent;
        return this;
    }
    
    /**
     * If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("triggerIntent")
    public String triggerIntent;

    public GoogleCloudDialogflowCxV3beta1QueryResult withTriggerIntent(String triggerIntent) {
        this.triggerIntent = triggerIntent;
        return this;
    }
    
    /**
     * The list of webhook payload in WebhookResponse.payload, in the order of call sequence. If some webhook call fails or doesn't return any payload, an empty `Struct` would be used instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookPayloads")
    public java.util.Map<String, Object>[] webhookPayloads;

    public GoogleCloudDialogflowCxV3beta1QueryResult withWebhookPayloads(java.util.Map<String, Object>[] webhookPayloads) {
        this.webhookPayloads = webhookPayloads;
        return this;
    }
    
    /**
     * The list of webhook call status in the order of call sequence.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhookStatuses")
    public GoogleRpcStatus[] webhookStatuses;

    public GoogleCloudDialogflowCxV3beta1QueryResult withWebhookStatuses(GoogleRpcStatus[] webhookStatuses) {
        this.webhookStatuses = webhookStatuses;
        return this;
    }
    
    public GoogleCloudDialogflowCxV3beta1QueryResult(){}
}
