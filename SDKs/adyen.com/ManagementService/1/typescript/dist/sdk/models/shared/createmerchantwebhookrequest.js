"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateMerchantWebhookRequest = exports.CreateMerchantWebhookRequestSslVersionEnum = exports.CreateMerchantWebhookRequestNetworkTypeEnum = exports.CreateMerchantWebhookRequestCommunicationFormatEnum = void 0;
var utils_1 = require("../../../internal/utils");
var additionalsettings_1 = require("./additionalsettings");
var class_transformer_1 = require("class-transformer");
/**
 * Format or protocol for receiving webhooks. Possible values:
 *
 * @remarks
 * * **soap**
 * * **http**
 * * **json**
 */
var CreateMerchantWebhookRequestCommunicationFormatEnum;
(function (CreateMerchantWebhookRequestCommunicationFormatEnum) {
    CreateMerchantWebhookRequestCommunicationFormatEnum["Http"] = "http";
    CreateMerchantWebhookRequestCommunicationFormatEnum["Json"] = "json";
    CreateMerchantWebhookRequestCommunicationFormatEnum["Soap"] = "soap";
})(CreateMerchantWebhookRequestCommunicationFormatEnum = exports.CreateMerchantWebhookRequestCommunicationFormatEnum || (exports.CreateMerchantWebhookRequestCommunicationFormatEnum = {}));
/**
 * Network type for Terminal API notification webhooks. Possible values:
 *
 * @remarks
 * * **public**
 * * **local**
 *
 * Default Value: **public**.
 */
var CreateMerchantWebhookRequestNetworkTypeEnum;
(function (CreateMerchantWebhookRequestNetworkTypeEnum) {
    CreateMerchantWebhookRequestNetworkTypeEnum["Local"] = "LOCAL";
    CreateMerchantWebhookRequestNetworkTypeEnum["Public"] = "PUBLIC";
})(CreateMerchantWebhookRequestNetworkTypeEnum = exports.CreateMerchantWebhookRequestNetworkTypeEnum || (exports.CreateMerchantWebhookRequestNetworkTypeEnum = {}));
/**
 * SSL version to access the public webhook URL specified in the `url` field. Possible values:
 *
 * @remarks
 * * **TLSv1.3**
 * * **TLSv1.2**
 * * **HTTP** - Only allowed on Test environment.
 *
 * If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
 */
var CreateMerchantWebhookRequestSslVersionEnum;
(function (CreateMerchantWebhookRequestSslVersionEnum) {
    CreateMerchantWebhookRequestSslVersionEnum["Http"] = "HTTP";
    CreateMerchantWebhookRequestSslVersionEnum["Ssl"] = "SSL";
    CreateMerchantWebhookRequestSslVersionEnum["SSLv3"] = "SSLv3";
    CreateMerchantWebhookRequestSslVersionEnum["Tls"] = "TLS";
    CreateMerchantWebhookRequestSslVersionEnum["TLSv1"] = "TLSv1";
    CreateMerchantWebhookRequestSslVersionEnum["TLSv11"] = "TLSv1.1";
    CreateMerchantWebhookRequestSslVersionEnum["TLSv12"] = "TLSv1.2";
    CreateMerchantWebhookRequestSslVersionEnum["TLSv13"] = "TLSv1.3";
})(CreateMerchantWebhookRequestSslVersionEnum = exports.CreateMerchantWebhookRequestSslVersionEnum || (exports.CreateMerchantWebhookRequestSslVersionEnum = {}));
var CreateMerchantWebhookRequest = /** @class */ (function (_super) {
    __extends(CreateMerchantWebhookRequest, _super);
    function CreateMerchantWebhookRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acceptsExpiredCertificate" }),
        __metadata("design:type", Boolean)
    ], CreateMerchantWebhookRequest.prototype, "acceptsExpiredCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acceptsSelfSignedCertificate" }),
        __metadata("design:type", Boolean)
    ], CreateMerchantWebhookRequest.prototype, "acceptsSelfSignedCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "acceptsUntrustedRootCertificate" }),
        __metadata("design:type", Boolean)
    ], CreateMerchantWebhookRequest.prototype, "acceptsUntrustedRootCertificate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "active" }),
        __metadata("design:type", Boolean)
    ], CreateMerchantWebhookRequest.prototype, "active", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "additionalSettings" }),
        (0, class_transformer_1.Type)(function () { return additionalsettings_1.AdditionalSettings; }),
        __metadata("design:type", additionalsettings_1.AdditionalSettings)
    ], CreateMerchantWebhookRequest.prototype, "additionalSettings", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "communicationFormat" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "communicationFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkType" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "networkType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "password" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "password", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "populateSoapActionHeader" }),
        __metadata("design:type", Boolean)
    ], CreateMerchantWebhookRequest.prototype, "populateSoapActionHeader", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sslVersion" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "sslVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "username" }),
        __metadata("design:type", String)
    ], CreateMerchantWebhookRequest.prototype, "username", void 0);
    return CreateMerchantWebhookRequest;
}(utils_1.SpeakeasyBase));
exports.CreateMerchantWebhookRequest = CreateMerchantWebhookRequest;
