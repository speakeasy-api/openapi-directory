/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class AuditLogsGetAuditLogsQueryParams {
    /**
     * action name one of ["repo.tag.push", ...]. Optional parameter to filter specific audit log actions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=action")
    public String action;
    public AuditLogsGetAuditLogsQueryParams withAction(String action) {
        this.action = action;
        return this;
    }
    
    /**
     * actor name. Optional parameter to filter audit log events to the specific user who triggered the event.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=actor")
    public String actor;
    public AuditLogsGetAuditLogsQueryParams withActor(String actor) {
        this.actor = actor;
        return this;
    }
    
    /**
     * Start of the time window you wish to query audit events for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=from")
    public OffsetDateTime from;
    public AuditLogsGetAuditLogsQueryParams withFrom(OffsetDateTime from) {
        this.from = from;
        return this;
    }
    
    /**
     * name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;
    public AuditLogsGetAuditLogsQueryParams withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * page - specify page number. Page number to get.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    public Integer page;
    public AuditLogsGetAuditLogsQueryParams withPage(Integer page) {
        this.page = page;
        return this;
    }
    
    /**
     * page_size - specify page size. Number of events to return per page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_size")
    public Integer pageSize;
    public AuditLogsGetAuditLogsQueryParams withPageSize(Integer pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * End of the time window you wish to query audit events for.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=to")
    public OffsetDateTime to;
    public AuditLogsGetAuditLogsQueryParams withTo(OffsetDateTime to) {
        this.to = to;
        return this;
    }
    
}
