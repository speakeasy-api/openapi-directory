"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import listingnestmedia as shared_listingnestmedia
from ..shared import nestdealer as shared_nestdealer
from ..shared import ukrvbuild as shared_ukrvbuild
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UKRVBaseListing:
    r"""Base RV listing"""
    
    availability_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability_status'), 'exclude': lambda f: f is None }})
    r"""availability_status of the listing"""  
    build: Optional[shared_ukrvbuild.UKRVBuild] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('build'), 'exclude': lambda f: f is None }})
    r"""Describes the RV specification"""  
    currency_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency_indicator'), 'exclude': lambda f: f is None }})
    r"""currency_indicator of the listing"""  
    dealer: Optional[shared_nestdealer.NestDealer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealer'), 'exclude': lambda f: f is None }})  
    dist: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dist'), 'exclude': lambda f: f is None }})
    r"""Distance of the RV's location from the specified user lcoation"""  
    exterior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exterior_color'), 'exclude': lambda f: f is None }})
    r"""Exterior color of the RV"""  
    first_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped timestamp"""  
    first_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing first seen at first scraped date"""  
    heading: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heading'), 'exclude': lambda f: f is None }})
    r"""Listing title as displayed on the source website"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Unique identifier representing a specific listing from the Marketcheck database"""  
    interior_color: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interior_color'), 'exclude': lambda f: f is None }})
    r"""Interior color of the RV"""  
    inventory_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inventory_type'), 'exclude': lambda f: f is None }})
    r"""Inventory type of RV"""  
    last_seen_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) timestamp"""  
    last_seen_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_seen_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at (most recent) date"""  
    media: Optional[shared_listingnestmedia.ListingNestMedia] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media'), 'exclude': lambda f: f is None }})  
    miles: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miles'), 'exclude': lambda f: f is None }})
    r"""Odometer reading / reported miles usage for the RV"""  
    miles_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('miles_indicator'), 'exclude': lambda f: f is None }})
    r"""miles_indicator of the listing"""  
    mot_expires: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mot_expires'), 'exclude': lambda f: f is None }})
    r"""mot_expires of the listing"""  
    motorhome_build: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('motorhome_build'), 'exclude': lambda f: f is None }})
    r"""motorhome_build of the listing"""  
    msrp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('msrp'), 'exclude': lambda f: f is None }})
    r"""MSRP for the RV"""  
    origin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('origin'), 'exclude': lambda f: f is None }})
    r"""origin of the listing"""  
    price: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""Asking price for the RV"""  
    scraped_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date timestamp"""  
    scraped_at_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scraped_at_date'), 'exclude': lambda f: f is None }})
    r"""Listing last seen at date"""  
    seller_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller_type'), 'exclude': lambda f: f is None }})
    r"""Seller type for the RV"""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""Source domain of the listing"""  
    stock_no: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stock_no'), 'exclude': lambda f: f is None }})
    r"""Stock number of RV in dealers inventory"""  
    vdp_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vdp_url'), 'exclude': lambda f: f is None }})
    r"""Details Page url of the specific RV"""  
    vin: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vin'), 'exclude': lambda f: f is None }})
    r"""VIN for the RV"""  
    