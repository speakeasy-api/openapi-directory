/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter } from "./googleanalyticsadminv1alphaaudiencedimensionormetricfilter";
import { GoogleAnalyticsAdminV1alphaAudienceEventFilter } from "./googleanalyticsadminv1alphaaudienceeventfilter";
import { GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList } from "./googleanalyticsadminv1alphaaudiencefilterexpressionlist";
import { Expose, Type } from "class-transformer";

/**
 * A logical expression of Audience dimension, metric, or event filters.
 */
export class GoogleAnalyticsAdminV1alphaAudienceFilterExpression extends SpeakeasyBase {
  /**
   * A list of Audience filter expressions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "andGroup" })
  @Type(() => GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList)
  andGroup?: GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList;

  /**
   * A specific filter for a single dimension or metric.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dimensionOrMetricFilter" })
  @Type(() => GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter)
  dimensionOrMetricFilter?: GoogleAnalyticsAdminV1alphaAudienceDimensionOrMetricFilter;

  /**
   * A filter that matches events of a single event name. If an event parameter is specified, only the subset of events that match both the single event name and the parameter filter expressions match this event filter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventFilter" })
  @Type(() => GoogleAnalyticsAdminV1alphaAudienceEventFilter)
  eventFilter?: GoogleAnalyticsAdminV1alphaAudienceEventFilter;

  /**
   * A logical expression of Audience dimension, metric, or event filters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notExpression" })
  @Type(() => GoogleAnalyticsAdminV1alphaAudienceFilterExpression)
  notExpression?: GoogleAnalyticsAdminV1alphaAudienceFilterExpression;

  /**
   * A list of Audience filter expressions.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orGroup" })
  @Type(() => GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList)
  orGroup?: GoogleAnalyticsAdminV1alphaAudienceFilterExpressionList;
}
