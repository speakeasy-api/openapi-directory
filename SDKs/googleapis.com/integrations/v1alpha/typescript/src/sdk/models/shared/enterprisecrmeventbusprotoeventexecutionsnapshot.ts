/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { EnterpriseCrmEventbusProtoConditionResult } from "./enterprisecrmeventbusprotoconditionresult";
import { EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata } from "./enterprisecrmeventbusprotoeventexecutionsnapshoteventexecutionsnapshotmetadata";
import { EnterpriseCrmEventbusProtoEventParameters } from "./enterprisecrmeventbusprotoeventparameters";
import { EnterpriseCrmEventbusProtoTaskExecutionDetails } from "./enterprisecrmeventbusprototaskexecutiondetails";
import { Expose, Type } from "class-transformer";

/**
 * Contains the snapshot of the event execution for a given checkpoint. Next available id: 13
 */
export class EnterpriseCrmEventbusProtoEventExecutionSnapshot extends SpeakeasyBase {
  /**
   * Indicates "right after which checkpoint task's execution" this snapshot is taken.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkpointTaskNumber" })
  checkpointTaskNumber?: string;

  /**
   * All of the computed conditions that been calculated.
   */
  @SpeakeasyMetadata({ elemType: EnterpriseCrmEventbusProtoConditionResult })
  @Expose({ name: "conditionResults" })
  @Type(() => EnterpriseCrmEventbusProtoConditionResult)
  conditionResults?: EnterpriseCrmEventbusProtoConditionResult[];

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diffParams" })
  @Type(() => EnterpriseCrmEventbusProtoEventParameters)
  diffParams?: EnterpriseCrmEventbusProtoEventParameters;

  /**
   * Points to the event execution info this snapshot belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventExecutionInfoId" })
  eventExecutionInfoId?: string;

  /**
   * Auto-generated. Used as primary key for EventExecutionSnapshots table.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventExecutionSnapshotId" })
  eventExecutionSnapshotId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "eventExecutionSnapshotMetadata" })
  @Type(
    () =>
      EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata
  )
  eventExecutionSnapshotMetadata?: EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata;

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventParams" })
  @Type(() => EnterpriseCrmEventbusProtoEventParameters)
  eventParams?: EnterpriseCrmEventbusProtoEventParameters;

  /**
   * indicate whether snapshot exceeded maximum size before clean up
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exceedMaxSize" })
  exceedMaxSize?: boolean;

  /**
   * Indicates when this snapshot is taken.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "snapshotTime" })
  snapshotTime?: string;

  /**
   * All of the task execution details at the given point of time.
   */
  @SpeakeasyMetadata({
    elemType: EnterpriseCrmEventbusProtoTaskExecutionDetails,
  })
  @Expose({ name: "taskExecutionDetails" })
  @Type(() => EnterpriseCrmEventbusProtoTaskExecutionDetails)
  taskExecutionDetails?: EnterpriseCrmEventbusProtoTaskExecutionDetails[];

  /**
   * The task name associated with this snapshot. Could be empty.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "taskName" })
  taskName?: string;
}
