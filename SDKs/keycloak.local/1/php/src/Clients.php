<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Clients 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdResponse
     */
	public function deleteRealmClientsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * deleteRealmClientsIdDefaultClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse
     */
	public function deleteRealmClientsIdDefaultClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdDefaultClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Unregister a cluster node from the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeResponse
     */
	public function deleteRealmClientsIdNodesNode(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/nodes/{node}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdNodesNodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * deleteRealmClientsIdOptionalClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse
     */
	public function deleteRealmClientsIdOptionalClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRealmClientsIdOptionalClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Get clients belonging to the realm   Returns a list of clients belonging to the realm
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsResponse
     */
	public function getRealmClients(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get representation of the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdResponse
     */
	public function getRealmClientsId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the client secret
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretResponse
     */
	public function getRealmClientsIdClientSecret(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/client-secret', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdClientSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credentialRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CredentialRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get default client scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesResponse
     */
	public function getRealmClientsIdDefaultClientScopes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/default-client-scopes', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdDefaultClientScopesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientScopeRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientScopeRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create JSON with payload of example access token
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse
     */
	public function getRealmClientsIdEvaluateScopesGenerateExampleAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/evaluate-scopes/generate-example-access-token', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesGenerateExampleAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccessToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersResponse
     */
	public function getRealmClientsIdEvaluateScopesProtocolMappers(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/evaluate-scopes/protocol-mappers', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesProtocolMappersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientScopeEvaluateResourceProtocolMapperEvaluationRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientScopeEvaluateResourceProtocolMapperEvaluationRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse
     */
	public function getRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGranted(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/granted', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get roles, which this client doesn’t have scope for and can’t have them in the accessToken issued for him.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse
     */
	public function getRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGranted(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/evaluate-scopes/scope-mappings/{roleContainerId}/not-granted', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->roleRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\RoleRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getRealmClientsIdInstallationProvidersProviderId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdResponse
     */
	public function getRealmClientsIdInstallationProvidersProviderId(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/installation/providers/{providerId}', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdInstallationProvidersProviderIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsResponse
     */
	public function getRealmClientsIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get application offline session count   Returns a number of offline user sessions associated with this client   {      "count": number  }
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountResponse
     */
	public function getRealmClientsIdOfflineSessionCount(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/offline-session-count', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmClientsIdOfflineSessionCount2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get offline sessions for client   Returns a list of offline user sessions associated with this client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsResponse
     */
	public function getRealmClientsIdOfflineSessions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/offline-sessions', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOfflineSessionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userSessionRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserSessionRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get optional client scopes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesResponse
     */
	public function getRealmClientsIdOptionalClientScopes(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/optional-client-scopes', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdOptionalClientScopesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientScopeRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ClientScopeRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a user dedicated to the service account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserResponse
     */
	public function getRealmClientsIdServiceAccountUser(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/service-account-user', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdServiceAccountUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UserRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get application session count   Returns a number of user sessions associated with this client   {      "count": number  }
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountResponse
     */
	public function getRealmClientsIdSessionCount(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/session-count', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdSessionCountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRealmClientsIdSessionCount2XXApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Test if registered cluster nodes are available   Tests availability by sending 'ping' request to all cluster nodes.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableResponse
     */
	public function getRealmClientsIdTestNodesAvailable(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/test-nodes-available', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdTestNodesAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalRequestResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalRequestResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user sessions for client   Returns a list of user sessions associated with this client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsResponse
     */
	public function getRealmClientsIdUserSessions(
        \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/user-sessions', \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRealmClientsIdUserSessionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->userSessionRepresentations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\UserSessionRepresentation>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new client   Client’s client_id must be unique!
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsResponse
     */
	public function postRealmClients(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Generate a new secret for the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretResponse
     */
	public function postRealmClientsIdClientSecret(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/client-secret', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdClientSecretResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->credentialRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CredentialRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a cluster node with the client   Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle  by sending registration request to Keycloak
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesResponse
     */
	public function postRealmClientsIdNodes(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/nodes', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdNodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Push the client’s revocation policy to its admin URL   If the client has an admin URL, push revocation policy to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationResponse
     */
	public function postRealmClientsIdPushRevocation(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/push-revocation', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdPushRevocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->globalRequestResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GlobalRequestResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generate a new registration access token for the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenResponse
     */
	public function postRealmClientsIdRegistrationAccessToken(
        \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/registration-access-token', \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRealmClientsIdRegistrationAccessTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->clientRepresentation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ClientRepresentation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the client
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdResponse
     */
	public function putRealmClientsId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "clientRepresentation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * putRealmClientsIdDefaultClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdResponse
     */
	public function putRealmClientsIdDefaultClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/default-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdDefaultClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
	
    /**
     * Return object stating whether client Authorization permissions have been initialized or not and a reference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsResponse
     */
	public function putRealmClientsIdManagementPermissions(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/management/permissions', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "managementPermissionReference", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdManagementPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->managementPermissionReference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ManagementPermissionReference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * putRealmClientsIdOptionalClientScopesClientScopeId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdResponse
     */
	public function putRealmClientsIdOptionalClientScopesClientScopeId(
        \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{realm}/clients/{id}/optional-client-scopes/{clientScopeId}', \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutRealmClientsIdOptionalClientScopesClientScopeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }

        return $response;
    }
}