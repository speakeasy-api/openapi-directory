/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class GETAmendmentType extends SpeakeasyBase {
  /**
   * Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoRenew" })
  autoRenew?: boolean;

  /**
   * The rate plan ID on which changes are made. Only the Update or Remove amendment returns a base rate plan ID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "baseRatePlanId" })
  baseRatePlanId?: string;

  /**
   * The ID of the subscription based on which the amendment is created.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "baseSubscriptionId" })
  baseSubscriptionId?: string;

  /**
   * The amendment code.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  /**
   * The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contractEffectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  contractEffectiveDate?: Date;

  /**
   * The length of the period for the current subscription term.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentTerm" })
  currentTerm?: number;

  /**
   * The period type for the current subscription term.
   *
   * @remarks
   * Possible values are:
   *
   * - Month
   * - Year
   * - Day
   * - Week
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currentTermPeriodType" })
  currentTermPeriodType?: string;

  /**
   * The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "customerAcceptanceDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  customerAcceptanceDate?: Date;

  /**
   * Description of the amendment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The ID of the account that the subscription is being transferred to.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationAccountId" })
  destinationAccountId?: string;

  /**
   * The ID of the invoice that the subscription is being transferred to.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destinationInvoiceOwnerId" })
  destinationInvoiceOwnerId?: string;

  /**
   * The date when the amendment changes take effective.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effectiveDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  effectiveDate?: Date;

  /**
   * The amendment ID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The name of the amendment.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The ID of the rate plan charge on which amendment is made. Only the Add or Update amendment returns a new rate plan ID.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newRatePlanId" })
  newRatePlanId?: string;

  /**
   * The ID of the subscription that the amendment changes.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "newSubscriptionId" })
  newSubscriptionId?: string;

  /**
   * Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.
   *
   * @remarks
   * Possible values are:
   *
   * - RENEW_WITH_SPECIFIC_TERM
   * - RENEW_TO_EVERGREEN
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewalSetting" })
  renewalSetting?: string;

  /**
   * The term of renewal for the amended subscription.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewalTerm" })
  renewalTerm?: number;

  /**
   * The period type for the subscription renewal term.
   *
   * @remarks
   * Possible values are:
   *
   * - Month
   * - Year
   * - Day
   * - Week
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewalTermPeriodType" })
  renewalTermPeriodType?: string;

  /**
   * The date when the subscription resumption takes effect, as `yyyy-mm-dd`.
   *
   * @remarks
   *
   * **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resumeDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  resumeDate?: Date;

  /**
   * The date when service is activated, as `yyyy-mm-dd`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serviceActivationDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  serviceActivationDate?: Date;

  /**
   * The date when the Update Product amendment takes effect.
   *
   * @remarks
   * Only for the Update Product amendments if there is already a future-dated Update Product amendment on
   * the subscription.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "specificUpdateDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  specificUpdateDate?: Date;

  /**
   * The status of the amendment.
   *
   * @remarks
   * Possible values are:
   *
   * - Draft
   * - Pending Activation
   * - Pending Acceptance
   * - Completed
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * Returns `true` if the request was processed successfully.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success?: boolean;

  /**
   * The date when the subscription suspension takes effect, as `yyyy-mm-dd`.
   *
   * @remarks
   *
   * **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suspendDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  suspendDate?: Date;

  /**
   * The date when the new terms and conditions take effect.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termStartDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  termStartDate?: Date;

  /**
   * Indicates if the subscription is `TERMED` or `EVERGREEN`.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "termType" })
  termType?: string;

  /**
   * Type of the amendment.
   *
   * @remarks
   * Possible values are:
   *
   * - Cancellation
   * - NewProduct
   * - OwnerTransfer
   * - RemoveProduct
   * - Renewal
   * - UpdateProduct
   * - TermsAndConditions
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
