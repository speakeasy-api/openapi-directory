<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * IdentityServiceOidcConfig - Configuration for OIDC Auth flow.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class IdentityServiceOidcConfig
{
    /**
     * PEM-encoded CA for OIDC provider.
     * 
     * @var ?string $certificateAuthorityData
     */
	#[\JMS\Serializer\Annotation\SerializedName('certificateAuthorityData')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $certificateAuthorityData = null;
    
    /**
     * ID for OIDC client application.
     * 
     * @var ?string $clientId
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientId = null;
    
    /**
     * Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
     * 
     * @var ?string $clientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('clientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $clientSecret = null;
    
    /**
     * Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
     * 
     * @var ?bool $deployCloudConsoleProxy
     */
	#[\JMS\Serializer\Annotation\SerializedName('deployCloudConsoleProxy')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deployCloudConsoleProxy = null;
    
    /**
     * Enable access token.
     * 
     * @var ?bool $enableAccessToken
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableAccessToken')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $enableAccessToken = null;
    
    /**
     * Output only. Encrypted OIDC Client secret
     * 
     * @var ?string $encryptedClientSecret
     */
	#[\JMS\Serializer\Annotation\SerializedName('encryptedClientSecret')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $encryptedClientSecret = null;
    
    /**
     * Comma-separated list of key-value pairs.
     * 
     * @var ?string $extraParams
     */
	#[\JMS\Serializer\Annotation\SerializedName('extraParams')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $extraParams = null;
    
    /**
     * Prefix to prepend to group name.
     * 
     * @var ?string $groupPrefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('groupPrefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $groupPrefix = null;
    
    /**
     * Claim in OIDC ID token that holds group information.
     * 
     * @var ?string $groupsClaim
     */
	#[\JMS\Serializer\Annotation\SerializedName('groupsClaim')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $groupsClaim = null;
    
    /**
     * URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
     * 
     * @var ?string $issuerUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('issuerUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $issuerUri = null;
    
    /**
     * Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
     * 
     * @var ?string $kubectlRedirectUri
     */
	#[\JMS\Serializer\Annotation\SerializedName('kubectlRedirectUri')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $kubectlRedirectUri = null;
    
    /**
     * Comma-separated list of identifiers.
     * 
     * @var ?string $scopes
     */
	#[\JMS\Serializer\Annotation\SerializedName('scopes')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $scopes = null;
    
    /**
     * Claim in OIDC ID token that holds username.
     * 
     * @var ?string $userClaim
     */
	#[\JMS\Serializer\Annotation\SerializedName('userClaim')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userClaim = null;
    
    /**
     * Prefix to prepend to user name.
     * 
     * @var ?string $userPrefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('userPrefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $userPrefix = null;
    
	public function __construct()
	{
		$this->certificateAuthorityData = null;
		$this->clientId = null;
		$this->clientSecret = null;
		$this->deployCloudConsoleProxy = null;
		$this->enableAccessToken = null;
		$this->encryptedClientSecret = null;
		$this->extraParams = null;
		$this->groupPrefix = null;
		$this->groupsClaim = null;
		$this->issuerUri = null;
		$this->kubectlRedirectUri = null;
		$this->scopes = null;
		$this->userClaim = null;
		$this->userPrefix = null;
	}
}
