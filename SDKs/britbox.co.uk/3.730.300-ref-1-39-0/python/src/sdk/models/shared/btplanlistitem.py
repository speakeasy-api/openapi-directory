"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class BtPlanListItemIntervalEnum(str, Enum):
    r"""The type of billing period used."""
    DAY = 'day'
    WEEK = 'week'
    MONTH = 'month'
    YEAR = 'year'
    NONE = 'none'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BtPlanListItem:
    r"""Available plan for current user."""
    
    cta_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ctaText') }})
    r"""The textual description."""  
    currency: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The currency a plan is offered in."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The textual description."""  
    header_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headerText') }})
    r"""The textual description."""  
    hero_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('heroText') }})
    r"""The textual description."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier of a plan."""  
    long_text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('longText') }})
    r"""The textual description."""  
    nickname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nickname') }})
    r"""The title of a plan."""  
    product: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product') }})
    r"""The product of a plan."""  
    trial_period_days: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trialPeriodDays') }})
    r"""How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true."""  
    amount: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})
    r"""The price of a plan. If a free plan then undefined."""  
    ees07_plan_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ees07PlanDescription'), 'exclude': lambda f: f is None }})  
    ees07_plan_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ees07PlanTitle'), 'exclude': lambda f: f is None }})  
    ees07_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ees07Title'), 'exclude': lambda f: f is None }})  
    interval: Optional[BtPlanListItemIntervalEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('interval'), 'exclude': lambda f: f is None }})
    r"""The type of billing period used."""  
    interval_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intervalCount'), 'exclude': lambda f: f is None }})
    r"""Given the `interval` this is how frequently it will run. e.g. every 2 weeks."""  
    no_thanks_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noThanksText'), 'exclude': lambda f: f is None }})  
    switching_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchingText'), 'exclude': lambda f: f is None }})  
    terms_and_conditions_itunes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditionsItunes'), 'exclude': lambda f: f is None }})  
    terms_and_conditions_stripe: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditionsStripe'), 'exclude': lambda f: f is None }})  
    