"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .feature import Feature
from .feature_taxonomy import FeatureTaxonomy
from .name import Name
from .name_authority import NameAuthority
from .search import Search

SERVERS = [
    "https://apps.gov.bc.ca/pub/bcgnws",
    r"""Production"""
    "https://test.apps.gov.bc.ca/pub/bcgnws",
    r"""Test"""
    "https://delivery.apps.gov.bc.ca/pub/bcgnws",
    r"""Delivery"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This REST API provides searchable access to information about geographical names in the province of British Columbia, including name status and details about the corresponding geographic feature.
    
    Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.
    """
    feature: Feature
    feature_taxonomy: FeatureTaxonomy
    name: Name
    name_authority: NameAuthority
    search: Search

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.feature = Feature(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.feature_taxonomy = FeatureTaxonomy(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.name = Name(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.name_authority = NameAuthority(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.search = Search(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    