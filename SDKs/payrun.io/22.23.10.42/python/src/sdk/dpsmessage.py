"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class DpsMessage:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_dps_message(self, request: operations.DeleteDpsMessageRequest) -> operations.DeleteDpsMessageResponse:
        r"""Deletes the DPS message
        Deletes the DPS message
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteDpsMessageRequest, base_url, '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteDpsMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_dps_message_from_employer(self, request: operations.GetDpsMessageFromEmployerRequest) -> operations.GetDpsMessageFromEmployerResponse:
        r"""Gets the DPS message
        Gets the DPS message
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDpsMessageFromEmployerRequest, base_url, '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDpsMessageFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DpsMessage])
                res.dps_message = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_dps_messages_from_employer(self, request: operations.GetDpsMessagesFromEmployerRequest) -> operations.GetDpsMessagesFromEmployerResponse:
        r"""Gets the DPS messages
        Gets the DPS message links
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetDpsMessagesFromEmployerRequest, base_url, '/Employer/{EmployerId}/DpsMessages', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetDpsMessagesFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def patch_dps_message(self, request: operations.PatchDpsMessageRequest) -> operations.PatchDpsMessageResponse:
        r"""Patches the DPS message
        Patches the specified DPS message with the supplied values
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchDpsMessageRequest, base_url, '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PATCH', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchDpsMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DpsMessage])
                res.dps_message = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_dps_message(self, request: operations.PostDpsMessageRequest) -> operations.PostDpsMessageResponse:
        r"""Posta the DPS message
        Insert new DPS message
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostDpsMessageRequest, base_url, '/Employer/{EmployerId}/DpsMessages', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostDpsMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_dps_message(self, request: operations.PutDpsMessageRequest) -> operations.PutDpsMessageResponse:
        r"""Puts the DPS message
        Puts the DPS message
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutDpsMessageRequest, base_url, '/Employer/{EmployerId}/DpsMessage/{DpsMessageId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('PUT', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutDpsMessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DpsMessage])
                res.dps_message = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    