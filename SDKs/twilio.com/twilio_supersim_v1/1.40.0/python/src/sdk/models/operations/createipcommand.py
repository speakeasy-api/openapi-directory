"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ip_command_enum_payload_type_enum as shared_ip_command_enum_payload_type_enum
from ..shared import supersim_v1_ip_command as shared_supersim_v1_ip_command
from enum import Enum
from typing import Optional

CREATE_IP_COMMAND_SERVERS = [
	"https://supersim.twilio.com",
]


@dataclasses.dataclass
class CreateIPCommandSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class CreateIPCommandCreateIPCommandRequestCallbackMethodEnum(str, Enum):
    r"""The HTTP method we should use to call `callback_url`. Can be `GET` or `POST`, and the default is `POST`."""
    HEAD = 'HEAD'
    GET = 'GET'
    POST = 'POST'
    PATCH = 'PATCH'
    PUT = 'PUT'
    DELETE = 'DELETE'


@dataclasses.dataclass
class CreateIPCommandCreateIPCommandRequest:
    
    device_port: int = dataclasses.field(metadata={'form': { 'field_name': 'DevicePort' }})
    r"""The device port to which the IP Command will be sent."""  
    payload: str = dataclasses.field(metadata={'form': { 'field_name': 'Payload' }})
    r"""The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64."""  
    sim: str = dataclasses.field(metadata={'form': { 'field_name': 'Sim' }})
    r"""The `sid` or `unique_name` of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to."""  
    callback_method: Optional[CreateIPCommandCreateIPCommandRequestCallbackMethodEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackMethod' }})
    r"""The HTTP method we should use to call `callback_url`. Can be `GET` or `POST`, and the default is `POST`."""  
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'CallbackUrl' }})
    r"""The URL we should call using the `callback_method` after we have sent the IP Command."""  
    payload_type: Optional[shared_ip_command_enum_payload_type_enum.IPCommandEnumPayloadTypeEnum] = dataclasses.field(default=None, metadata={'form': { 'field_name': 'PayloadType' }})  
    

@dataclasses.dataclass
class CreateIPCommandResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    supersim_v1_ip_command: Optional[shared_supersim_v1_ip_command.SupersimV1IPCommand] = dataclasses.field(default=None)
    r"""Created"""  
    