"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetNetworkClientRequest:
    
    client_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'clientId', 'style': 'simple', 'explode': False }})  
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkClient200ApplicationJSONClientVpnConnections:
    
    connected_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectedAt'), 'exclude': lambda f: f is None }})
    r"""The time the client last connected to the VPN"""  
    disconnected_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disconnectedAt'), 'exclude': lambda f: f is None }})
    r"""The time the client last disconnectd from the VPN"""  
    remote_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteIp'), 'exclude': lambda f: f is None }})
    r"""The IP address of the VPN the client last connected to"""  
    
class GetNetworkClient200ApplicationJSONStatusEnum(str, Enum):
    r"""The connection status of the client"""
    OFFLINE = 'Offline'
    ONLINE = 'Online'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetNetworkClient200ApplicationJSON:
    r"""Successful operation"""
    
    cdp: Optional[list[list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cdp'), 'exclude': lambda f: f is None }})
    r"""The Cisco discover protocol settings for the client"""  
    client_vpn_connections: Optional[list[GetNetworkClient200ApplicationJSONClientVpnConnections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientVpnConnections'), 'exclude': lambda f: f is None }})
    r"""VPN connections associated with the client"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Short description of the client"""  
    first_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstSeen'), 'exclude': lambda f: f is None }})
    r"""Timestamp client was first seen in the network"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the client"""  
    ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""The IP address of the client"""  
    ip6: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip6'), 'exclude': lambda f: f is None }})
    r"""The IPv6 address of the client"""  
    last_seen: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSeen'), 'exclude': lambda f: f is None }})
    r"""Timestamp client was last seen in the network"""  
    lldp: Optional[list[list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lldp'), 'exclude': lambda f: f is None }})
    r"""The link layer discover protocol settings for the client"""  
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""The MAC address of the client"""  
    manufacturer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manufacturer'), 'exclude': lambda f: f is None }})
    r"""Manufacturer of the client"""  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os'), 'exclude': lambda f: f is None }})
    r"""The operating system of the client"""  
    recent_device_mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recentDeviceMac'), 'exclude': lambda f: f is None }})
    r"""The MAC address of the node that the device was last connected to"""  
    sm_installed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smInstalled'), 'exclude': lambda f: f is None }})
    r"""Status of SM for the client"""  
    ssid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ssid'), 'exclude': lambda f: f is None }})
    r"""The name of the SSID that the client is connected to"""  
    status: Optional[GetNetworkClient200ApplicationJSONStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The connection status of the client"""  
    switchport: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('switchport'), 'exclude': lambda f: f is None }})
    r"""The switch port that the client is connected to"""  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""The username of the user of the client"""  
    vlan: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vlan'), 'exclude': lambda f: f is None }})
    r"""The name of the VLAN that the client is connected to"""  
    wireless_capabilities: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wirelessCapabilities'), 'exclude': lambda f: f is None }})
    r"""Wireless capabilities of the client"""  
    

@dataclasses.dataclass
class GetNetworkClientResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_network_client_200_application_json_object: Optional[GetNetworkClient200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    