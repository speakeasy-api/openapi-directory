// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// VirtualMachineDetailsOsFamilyEnum - What family the OS belong to, if known.
type VirtualMachineDetailsOsFamilyEnum string

const (
	VirtualMachineDetailsOsFamilyEnumOsFamilyUnknown VirtualMachineDetailsOsFamilyEnum = "OS_FAMILY_UNKNOWN"
	VirtualMachineDetailsOsFamilyEnumOsFamilyWindows VirtualMachineDetailsOsFamilyEnum = "OS_FAMILY_WINDOWS"
	VirtualMachineDetailsOsFamilyEnumOsFamilyLinux   VirtualMachineDetailsOsFamilyEnum = "OS_FAMILY_LINUX"
	VirtualMachineDetailsOsFamilyEnumOsFamilyUnix    VirtualMachineDetailsOsFamilyEnum = "OS_FAMILY_UNIX"
)

func (e *VirtualMachineDetailsOsFamilyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OS_FAMILY_UNKNOWN":
		fallthrough
	case "OS_FAMILY_WINDOWS":
		fallthrough
	case "OS_FAMILY_LINUX":
		fallthrough
	case "OS_FAMILY_UNIX":
		*e = VirtualMachineDetailsOsFamilyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualMachineDetailsOsFamilyEnum: %s", s)
	}
}

// VirtualMachineDetails - Details of a VirtualMachine.
type VirtualMachineDetails struct {
	// Number of CPU cores in the VirtualMachine. Must be non-negative.
	CoreCount *int `json:"coreCount,omitempty"`
	// VM creation timestamp.
	CreateTime *string `json:"createTime,omitempty"`
	// Information from Guest-level collections.
	GuestOs *GuestOsDetails `json:"guestOs,omitempty"`
	// The amount of memory in the VirtualMachine. Must be non-negative.
	MemoryMb *int `json:"memoryMb,omitempty"`
	// What family the OS belong to, if known.
	OsFamily *VirtualMachineDetailsOsFamilyEnum `json:"osFamily,omitempty"`
	// The name of the operating system running on the VirtualMachine.
	OsName *string `json:"osName,omitempty"`
	// The version of the operating system running on the virtual machine.
	OsVersion *string `json:"osVersion,omitempty"`
	// Information about the platform.
	Platform *PlatformDetails `json:"platform,omitempty"`
	// Power state of VM (poweredOn or poweredOff).
	PowerState *string `json:"powerState,omitempty"`
	// Folder name in vCenter where asset resides.
	VcenterFolder *string `json:"vcenterFolder,omitempty"`
	// vCenter URL used in collection.
	VcenterURL *string `json:"vcenterUrl,omitempty"`
	// vCenter VM ID.
	VcenterVMID *string `json:"vcenterVmId,omitempty"`
	// Details of the VM architecture.
	VMArchitecture *VirtualMachineArchitectureDetails `json:"vmArchitecture,omitempty"`
	// Details of VM disks.
	VMDisks *VirtualMachineDiskDetails `json:"vmDisks,omitempty"`
	// Virtual Machine display name.
	VMName *string `json:"vmName,omitempty"`
	// Details of network adapters and settings.
	VMNetwork *VirtualMachineNetworkDetails `json:"vmNetwork,omitempty"`
	// Virtual Machine unique identifier.
	VMUUID *string `json:"vmUuid,omitempty"`
}
