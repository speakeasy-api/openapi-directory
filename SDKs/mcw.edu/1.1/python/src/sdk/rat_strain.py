"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class RatStrain:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_all_strains_using_get(self) -> operations.GETAllStrainsUsingGETResponse:
        r"""Return all active strains in RGD"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/strains/all'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETAllStrainsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_strain_by_rgd_id_using_get(self, request: operations.GETStrainByRgdIDUsingGETRequest) -> operations.GETStrainByRgdIDUsingGETResponse:
        r"""Return a strain by RGD ID"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETStrainByRgdIDUsingGETRequest, base_url, '/strains/{rgdId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETStrainByRgdIDUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    def get_strains_by_position_using_get(self, request: operations.GETStrainsByPositionUsingGETRequest) -> operations.GETStrainsByPositionUsingGETResponse:
        r"""Return all active strains by position"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETStrainsByPositionUsingGETRequest, base_url, '/strains/{chr}/{start}/{stop}/{mapKey}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETStrainsByPositionUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
        elif http_res.status_code in [401, 403, 404]:
            pass

        return res

    