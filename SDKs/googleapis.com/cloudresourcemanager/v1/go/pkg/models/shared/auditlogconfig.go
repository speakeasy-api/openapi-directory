// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AuditLogConfigLogTypeEnum - The log type that this config enables.
type AuditLogConfigLogTypeEnum string

const (
	AuditLogConfigLogTypeEnumLogTypeUnspecified AuditLogConfigLogTypeEnum = "LOG_TYPE_UNSPECIFIED"
	AuditLogConfigLogTypeEnumAdminRead          AuditLogConfigLogTypeEnum = "ADMIN_READ"
	AuditLogConfigLogTypeEnumDataWrite          AuditLogConfigLogTypeEnum = "DATA_WRITE"
	AuditLogConfigLogTypeEnumDataRead           AuditLogConfigLogTypeEnum = "DATA_READ"
)

func (e *AuditLogConfigLogTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOG_TYPE_UNSPECIFIED":
		fallthrough
	case "ADMIN_READ":
		fallthrough
	case "DATA_WRITE":
		fallthrough
	case "DATA_READ":
		*e = AuditLogConfigLogTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AuditLogConfigLogTypeEnum: %s", s)
	}
}

// AuditLogConfig - Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
type AuditLogConfig struct {
	// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
	ExemptedMembers []string `json:"exemptedMembers,omitempty"`
	// The log type that this config enables.
	LogType *AuditLogConfigLogTypeEnum `json:"logType,omitempty"`
}
