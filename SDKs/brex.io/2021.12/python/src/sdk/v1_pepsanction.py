"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class V1Pepsanction:
    r"""Pep Sanction Check methods"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def pep_monitor_list(self) -> operations.PepMonitorListResponse:
        r"""Retrieves a list of monitor entries
        Retrieve a list of all active Pep Sanction Report monitors for this account
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/pepsanction/monitor/list'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PepMonitorListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.PepMonitorList200ApplicationJSON]])
                res.pep_monitor_list_200_application_json_objects = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepMonitorListDefaultApplicationJSON])
                res.pep_monitor_list_default_application_json_object = out

        return res

    def pep_monitor_unregister(self, request: operations.PepMonitorUnregisterRequest, security: operations.PepMonitorUnregisterSecurity) -> operations.PepMonitorUnregisterResponse:
        r"""Deactive a pep sanction monitor
        Unregister a previously created Pep Sanction Report Monitor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PepMonitorUnregisterRequest, base_url, '/api/v1/pepsanction/monitor/unregister/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PepMonitorUnregisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepMonitorUnregister200ApplicationJSON])
                res.pep_monitor_unregister_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepMonitorUnregisterDefaultApplicationJSON])
                res.pep_monitor_unregister_default_application_json_object = out

        return res

    def pep_monitor_update(self, request: operations.PepMonitorUpdateRequest, security: operations.PepMonitorUpdateSecurity) -> operations.PepMonitorUpdateResponse:
        r"""Update details of active Pep Sanction monitor
        Update the webhook URL of an active Pep Sanction Report Monitor
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PepMonitorUpdateRequest, base_url, '/api/v1/pepsanction/monitor/update/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PepMonitorUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepMonitorUpdate200ApplicationJSON])
                res.pep_monitor_update_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepMonitorUpdateDefaultApplicationJSON])
                res.pep_monitor_update_default_application_json_object = out

        return res

    def pep_order(self, request: operations.PepOrderRequest, security: operations.PepOrderSecurity) -> operations.PepOrderResponse:
        r"""Orders a new Pep Sanction Check Report
        Order a new Pep Sanction Check by providing either a business or person name with some additional optional parameters.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PepOrderRequest, base_url, '/api/v1/pepsanction/order/{type}/{search}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PepOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepOrder200ApplicationJSON])
                res.pep_order_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepOrderDefaultApplicationJSON])
                res.pep_order_default_application_json_object = out

        return res

    def pep_retrieve(self, request: operations.PepRetrieveRequest, security: operations.PepRetrieveSecurity) -> operations.PepRetrieveResponse:
        r"""Returns a json or pdf report
        Retrieve a completed Pep Sanction check structured or in pdf depending on given accept header
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PepRetrieveRequest, base_url, '/api/v1/pepsanction/retrieve/{id}', request)
        
        headers = utils.get_headers(request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PepRetrieveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepRetrieve200ApplicationJSON])
                res.pep_retrieve_200_application_json_object = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PepRetrieveDefaultApplicationJSON])
                res.pep_retrieve_default_application_json_object = out

        return res

    