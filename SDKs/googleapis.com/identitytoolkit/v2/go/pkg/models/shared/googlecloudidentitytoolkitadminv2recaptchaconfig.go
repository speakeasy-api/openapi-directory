// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum - The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
type GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum string

const (
	GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnumRecaptchaProviderEnforcementStateUnspecified GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum = "RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED"
	GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnumOff                                          GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum = "OFF"
	GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnumAudit                                        GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum = "AUDIT"
	GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnumEnforce                                      GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum = "ENFORCE"
)

func (e GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum) ToPointer() *GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum {
	return &e
}

func (e *GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED":
		fallthrough
	case "OFF":
		fallthrough
	case "AUDIT":
		fallthrough
	case "ENFORCE":
		*e = GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum: %v", v)
	}
}

// GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig - The reCAPTCHA Enterprise integration config.
type GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig struct {
	// The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
	EmailPasswordEnforcementState *GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum `json:"emailPasswordEnforcementState,omitempty"`
	// The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
	ManagedRules []GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule `json:"managedRules,omitempty"`
	// Output only. The reCAPTCHA keys.
	RecaptchaKeys []GoogleCloudIdentitytoolkitAdminV2RecaptchaKey `json:"recaptchaKeys,omitempty"`
	// Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
	UseAccountDefender *bool `json:"useAccountDefender,omitempty"`
}

// GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigInput - The reCAPTCHA Enterprise integration config.
type GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigInput struct {
	// The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
	EmailPasswordEnforcementState *GoogleCloudIdentitytoolkitAdminV2RecaptchaConfigEmailPasswordEnforcementStateEnum `json:"emailPasswordEnforcementState,omitempty"`
	// The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
	ManagedRules []GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule `json:"managedRules,omitempty"`
	// Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
	UseAccountDefender *bool `json:"useAccountDefender,omitempty"`
}
