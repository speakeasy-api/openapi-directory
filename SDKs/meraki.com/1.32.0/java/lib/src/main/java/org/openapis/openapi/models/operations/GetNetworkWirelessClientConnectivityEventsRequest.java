/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GetNetworkWirelessClientConnectivityEventsRequest {
    /**
     * Filter results by band (either '2.4', '5', '6').
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=band")
    public GetNetworkWirelessClientConnectivityEventsBandEnum band;

    public GetNetworkWirelessClientConnectivityEventsRequest withBand(GetNetworkWirelessClientConnectivityEventsBandEnum band) {
        this.band = band;
        return this;
    }
    
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=clientId")
    public String clientId;

    public GetNetworkWirelessClientConnectivityEventsRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Filter results by an AP's serial number.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=deviceSerial")
    public String deviceSerial;

    public GetNetworkWirelessClientConnectivityEventsRequest withDeviceSerial(String deviceSerial) {
        this.deviceSerial = deviceSerial;
        return this;
    }
    
    /**
     * A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=endingBefore")
    public String endingBefore;

    public GetNetworkWirelessClientConnectivityEventsRequest withEndingBefore(String endingBefore) {
        this.endingBefore = endingBefore;
        return this;
    }
    
    /**
     * A list of severities to include. If not specified, events of all severities will be returned. Valid severities are 'good', 'info', 'warn' and/or 'bad'.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=includedSeverities")
    public GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum[] includedSeverities;

    public GetNetworkWirelessClientConnectivityEventsRequest withIncludedSeverities(GetNetworkWirelessClientConnectivityEventsIncludedSeveritiesEnum[] includedSeverities) {
        this.includedSeverities = includedSeverities;
        return this;
    }
    
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=networkId")
    public String networkId;

    public GetNetworkWirelessClientConnectivityEventsRequest withNetworkId(String networkId) {
        this.networkId = networkId;
        return this;
    }
    
    /**
     * The number of entries per page returned. Acceptable range is 3 - 1000.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=perPage")
    public Long perPage;

    public GetNetworkWirelessClientConnectivityEventsRequest withPerPage(Long perPage) {
        this.perPage = perPage;
        return this;
    }
    
    /**
     * An SSID number to include. If not specified, events for all SSIDs will be returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=ssidNumber")
    public GetNetworkWirelessClientConnectivityEventsSsidNumberEnum ssidNumber;

    public GetNetworkWirelessClientConnectivityEventsRequest withSsidNumber(GetNetworkWirelessClientConnectivityEventsSsidNumberEnum ssidNumber) {
        this.ssidNumber = ssidNumber;
        return this;
    }
    
    /**
     * A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=startingAfter")
    public String startingAfter;

    public GetNetworkWirelessClientConnectivityEventsRequest withStartingAfter(String startingAfter) {
        this.startingAfter = startingAfter;
        return this;
    }
    
    /**
     * The beginning of the timespan for the data. The maximum lookback period is 31 days from today.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=t0")
    public String t0;

    public GetNetworkWirelessClientConnectivityEventsRequest withT0(String t0) {
        this.t0 = t0;
        return this;
    }
    
    /**
     * The end of the timespan for the data. t1 can be a maximum of 31 days after t0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=t1")
    public String t1;

    public GetNetworkWirelessClientConnectivityEventsRequest withT1(String t1) {
        this.t1 = t1;
        return this;
    }
    
    /**
     * The timespan for which the information will be fetched. If specifying timespan, do not specify parameters t0 and t1. The value must be in seconds and be less than or equal to 31 days. The default is 1 day.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=timespan")
    public Float timespan;

    public GetNetworkWirelessClientConnectivityEventsRequest withTimespan(Float timespan) {
        this.timespan = timespan;
        return this;
    }
    
    /**
     * A list of event types to include. If not specified, events of all types will be returned. Valid types are 'assoc', 'disassoc', 'auth', 'deauth', 'dns', 'dhcp', 'roam', 'connection' and/or 'sticky'.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=false,name=types")
    public GetNetworkWirelessClientConnectivityEventsTypesEnum[] types;

    public GetNetworkWirelessClientConnectivityEventsRequest withTypes(GetNetworkWirelessClientConnectivityEventsTypesEnum[] types) {
        this.types = types;
        return this;
    }
    
    public GetNetworkWirelessClientConnectivityEventsRequest(@JsonProperty("clientId") String clientId, @JsonProperty("networkId") String networkId) {
        this.clientId = clientId;
        this.networkId = networkId;
  }
}
