// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StorageObjectsWatchAllSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type StorageObjectsWatchAllSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type StorageObjectsWatchAllSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type StorageObjectsWatchAllSecurity struct {
	Option1 *StorageObjectsWatchAllSecurityOption1 `security:"option"`
	Option2 *StorageObjectsWatchAllSecurityOption2 `security:"option"`
	Option3 *StorageObjectsWatchAllSecurityOption3 `security:"option"`
}

type StorageObjectsWatchAllPathParams struct {
	// Name of the bucket in which to look for objects.
	Bucket string `pathParam:"style=simple,explode=false,name=bucket"`
}

// StorageObjectsWatchAllProjectionEnum - Set of properties to return. Defaults to noAcl.
type StorageObjectsWatchAllProjectionEnum string

const (
	StorageObjectsWatchAllProjectionEnumFull  StorageObjectsWatchAllProjectionEnum = "full"
	StorageObjectsWatchAllProjectionEnumNoACL StorageObjectsWatchAllProjectionEnum = "noAcl"
)

func (e *StorageObjectsWatchAllProjectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "full":
		fallthrough
	case "noAcl":
		*e = StorageObjectsWatchAllProjectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageObjectsWatchAllProjectionEnum: %s", s)
	}
}

type StorageObjectsWatchAllQueryParams struct {
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Returns results in a directory-like mode. items will contain only objects whose names, aside from the prefix, do not contain delimiter. Objects whose names, aside from the prefix, contain delimiter will have their name, truncated after the delimiter, returned in prefixes. Duplicate prefixes are omitted.
	Delimiter *string `queryParam:"style=form,explode=true,name=delimiter"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Maximum number of items plus prefixes to return. As duplicate prefixes are omitted, fewer total results may be returned than requested.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// A previously-returned page token representing part of the larger set of results to view.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// Filter results to objects whose names begin with this prefix.
	Prefix *string `queryParam:"style=form,explode=true,name=prefix"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Set of properties to return. Defaults to noAcl.
	Projection *StorageObjectsWatchAllProjectionEnum `queryParam:"style=form,explode=true,name=projection"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
	// If true, lists all versions of a file as distinct results.
	Versions *bool `queryParam:"style=form,explode=true,name=versions"`
}

type StorageObjectsWatchAllRequest struct {
	PathParams  StorageObjectsWatchAllPathParams
	QueryParams StorageObjectsWatchAllQueryParams
	Request     *shared.Channel `request:"mediaType=application/json"`
	Security    StorageObjectsWatchAllSecurity
}

type StorageObjectsWatchAllResponse struct {
	// Successful response
	Channel     *shared.Channel
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
