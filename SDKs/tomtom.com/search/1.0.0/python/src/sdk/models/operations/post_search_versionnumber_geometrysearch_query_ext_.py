"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import ext_enum as shared_ext_enum
from ..shared import versionnumber_enum as shared_versionnumber_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSearchVersionNumberGeometrySearchQueryExtRequestBodyGeometryList:
    
    position: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('position'), 'exclude': lambda f: f is None }})  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('radius'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    vertices: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vertices'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSearchVersionNumberGeometrySearchQueryExtRequestBody:
    
    geometry_list: Optional[list[PostSearchVersionNumberGeometrySearchQueryExtRequestBodyGeometryList]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geometryList'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSearchVersionNumberGeometrySearchQueryExtRequest:
    
    ext: shared_ext_enum.ExtEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'ext', 'style': 'simple', 'explode': False }})
    r"""Expected response format."""  
    query: str = dataclasses.field(metadata={'path_param': { 'field_name': 'query', 'style': 'simple', 'explode': False }})
    r"""Query string. Must be properly URL encoded."""  
    version_number: shared_versionnumber_enum.VersionNumberEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'versionNumber', 'style': 'simple', 'explode': False }})
    r"""Service version number. The current value is 2."""  
    extended_postal_codes_for: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'extendedPostalCodesFor', 'style': 'form', 'explode': True }})
    r"""Indexes for which extended postal codes should be included in the results. Available indexes are:
      - <b>Addr</b> = Address ranges
      - <b>Geo</b> = Geographies
      - <b>PAD</b> = Point Addresses
      - <b>POI</b> = Points of Interest
      - <b>Str</b> = Streets
      - <b>XStr</b> = Cross Streets (intersections)
    """  
    idx_set: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'idxSet', 'style': 'form', 'explode': True }})
    r"""A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:
      - <b>Addr</b> = Address range interpolation (when there is no PAD)
      - <b>Geo</b> = Geographies
      - <b>PAD</b> = Point Addresses
      - <b>POI</b> = Points of interest
      - <b>Str</b> = Streets
      - <b>Xstr</b> = Cross Streets (intersections)
    """  
    language: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Language in which search results should be returned. Should be one of <a href=\\"/search-api/search-api-documentation/supported-languages\\">supported IETF language tags</a>, case insensitive."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum number of search results that will be returned."""  
    request_body: Optional[PostSearchVersionNumberGeometrySearchQueryExtRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class PostSearchVersionNumberGeometrySearchQueryExtResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    