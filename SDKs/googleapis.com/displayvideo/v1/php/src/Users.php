<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Users 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesResponse
     */
	public function displayvideoUsersBulkEditAssignedUserRoles(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{userId}:bulkEditAssignedUserRoles', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "bulkEditAssignedUserRolesRequestInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersBulkEditAssignedUserRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkEditAssignedUserRolesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BulkEditAssignedUserRolesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new user. Returns the newly created user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateResponse
     */
	public function displayvideoUsersCreate(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteResponse
     */
	public function displayvideoUsersDelete(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetResponse
     */
	public function displayvideoUsersGet(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListResponse
     */
	public function displayvideoUsersList(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListUsersResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing user. Returns the updated user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchResponse
     */
	public function displayvideoUsersPatch(
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "userInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DisplayvideoUsersPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }

        return $response;
    }
}