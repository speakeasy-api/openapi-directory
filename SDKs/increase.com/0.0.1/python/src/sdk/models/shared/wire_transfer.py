"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from enum import Enum
from marshmallow import fields
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WireTransferTransferApproval:
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""
    
    approved_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approved_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WireTransferTransferCancellation:
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""
    
    canceled_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('canceled_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled."""  
    
class WireTransferCurrencyEnum(str, Enum):
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`."""
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'

class WireTransferNetworkEnum(str, Enum):
    r"""The transfer's network."""
    WIRE = 'wire'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WireTransferInboundWireReversal:
    r"""If your transfer is reversed, this will contain details of the reversal."""
    
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The amount that was reversed."""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description on the reversal message from Fedwire."""  
    financial_institution_to_financial_institution_information: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('financial_institution_to_financial_institution_information') }})
    r"""Additional financial institution information included in the wire reversal."""  
    input_cycle_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_cycle_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The Fedwire cycle date for the wire reversal."""  
    input_message_accountability_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_message_accountability_data') }})
    r"""The Fedwire transaction identifier."""  
    input_sequence_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_sequence_number') }})
    r"""The Fedwire sequence number."""  
    input_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_source') }})
    r"""The Fedwire input source identifier."""  
    previous_message_input_cycle_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_message_input_cycle_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso') }})
    r"""The Fedwire cycle date for the wire transfer that was reversed."""  
    previous_message_input_message_accountability_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_message_input_message_accountability_data') }})
    r"""The Fedwire transaction identifier for the wire transfer that was reversed."""  
    previous_message_input_sequence_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_message_input_sequence_number') }})
    r"""The Fedwire sequence number for the wire transfer that was reversed."""  
    previous_message_input_source: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_message_input_source') }})
    r"""The Fedwire input source identifier for the wire transfer that was reversed."""  
    receiver_financial_institution_information: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receiver_financial_institution_information') }})
    r"""Information included in the wire reversal for the receiving financial institution."""  
    
class WireTransferStatusEnum(str, Enum):
    r"""The lifecycle status of the transfer."""
    CANCELED = 'canceled'
    REQUIRES_ATTENTION = 'requires_attention'
    PENDING_APPROVAL = 'pending_approval'
    REJECTED = 'rejected'
    REVERSED = 'reversed'
    COMPLETE = 'complete'
    PENDING_CREATING = 'pending_creating'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WireTransferWireTransferSubmission:
    r"""After the transfer is submitted to Fedwire, this will contain supplemental details."""
    
    input_message_accountability_data: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input_message_accountability_data') }})
    r"""The accountability data for the submission."""  
    submitted_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitted_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""When this wire transfer was submitted to Fedwire."""  
    
class WireTransferTypeEnum(str, Enum):
    r"""A constant representing the object's type. For this resource it will always be `wire_transfer`."""
    WIRE_TRANSFER = 'wire_transfer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WireTransfer:
    r"""Wire transfers move funds between your Increase account and any other account accessible by Fedwire."""
    
    account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""The Account to which the transfer belongs."""  
    account_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_number') }})
    r"""The destination account number."""  
    amount: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount') }})
    r"""The transfer amount in USD cents."""  
    approval: WireTransferTransferApproval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('approval') }})
    r"""If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval."""  
    beneficiary_address_line1: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficiary_address_line1') }})
    r"""The beneficiary's address line 1."""  
    beneficiary_address_line2: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficiary_address_line2') }})
    r"""The beneficiary's address line 2."""  
    beneficiary_address_line3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficiary_address_line3') }})
    r"""The beneficiary's address line 3."""  
    beneficiary_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beneficiary_name') }})
    r"""The beneficiary's name."""  
    cancellation: WireTransferTransferCancellation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellation') }})
    r"""If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation."""  
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created."""  
    currency: WireTransferCurrencyEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency') }})
    r"""The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`."""  
    external_account_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('external_account_id') }})
    r"""The identifier of the External Account the transfer was made to, if any."""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The wire transfer's identifier."""  
    message_to_recipient: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_to_recipient') }})
    r"""The message that will show on the recipient's bank statement."""  
    network: WireTransferNetworkEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network') }})
    r"""The transfer's network."""  
    reversal: WireTransferInboundWireReversal = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reversal') }})
    r"""If your transfer is reversed, this will contain details of the reversal."""  
    routing_number: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('routing_number') }})
    r"""The American Bankers' Association (ABA) Routing Transit Number (RTN)."""  
    status: WireTransferStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The lifecycle status of the transfer."""  
    submission: WireTransferWireTransferSubmission = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submission') }})
    r"""After the transfer is submitted to Fedwire, this will contain supplemental details."""  
    template_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template_id') }})
    r"""If the transfer was created from a template, this will be the template's ID."""  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_id') }})
    r"""The ID for the transaction funding the transfer."""  
    type: WireTransferTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""A constant representing the object's type. For this resource it will always be `wire_transfer`."""  
    