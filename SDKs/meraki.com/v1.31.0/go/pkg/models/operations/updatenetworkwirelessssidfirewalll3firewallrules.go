// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkWirelessSsidFirewallL3FirewallRulesPathParams struct {
	NetworkID string `pathParam:"style=simple,explode=false,name=networkId"`
	Number    string `pathParam:"style=simple,explode=false,name=number"`
}

// UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum - 'allow' or 'deny' traffic specified by this rule
type UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum string

const (
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnumAllow UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum = "allow"
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnumDeny  UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum = "deny"
)

func (e *UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "allow":
		fallthrough
	case "deny":
		*e = UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum: %s", s)
	}
}

// UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum - The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
type UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum string

const (
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnumAny   UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "any"
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnumIcmp  UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "icmp"
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnumIcmp6 UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "icmp6"
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnumTCP   UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "tcp"
	UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnumUDP   UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum = "udp"
)

func (e *UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "any":
		fallthrough
	case "icmp":
		fallthrough
	case "icmp6":
		fallthrough
	case "tcp":
		fallthrough
	case "udp":
		*e = UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum: %s", s)
	}
}

type UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRules struct {
	// Description of the rule (optional)
	Comment *string `json:"comment,omitempty"`
	// Comma-separated list of destination IP address(es) (in IP or CIDR notation), fully-qualified domain names (FQDN) or 'any'
	DestCidr string `json:"destCidr"`
	// Comma-separated list of destination port(s) (integer in the range 1-65535), or 'any'
	DestPort *string `json:"destPort,omitempty"`
	// 'allow' or 'deny' traffic specified by this rule
	Policy UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesPolicyEnum `json:"policy"`
	// The type of protocol (must be 'tcp', 'udp', 'icmp', 'icmp6' or 'any')
	Protocol UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRulesProtocolEnum `json:"protocol"`
}

type UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBody struct {
	// Allow wireless client access to local LAN (boolean value - true allows access and false denies access) (optional)
	AllowLanAccess *bool `json:"allowLanAccess,omitempty"`
	// An ordered array of the firewall rules for this SSID (not including the local LAN access rule or the default rule)
	Rules []UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBodyRules `json:"rules,omitempty"`
}

type UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequest struct {
	PathParams UpdateNetworkWirelessSsidFirewallL3FirewallRulesPathParams
	Request    *UpdateNetworkWirelessSsidFirewallL3FirewallRulesRequestBody `request:"mediaType=application/json"`
}

type UpdateNetworkWirelessSsidFirewallL3FirewallRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessSsidFirewallL3FirewallRules200ApplicationJSONObject map[string]interface{}
}
