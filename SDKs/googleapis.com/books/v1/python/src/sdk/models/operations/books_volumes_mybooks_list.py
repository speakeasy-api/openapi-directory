"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import volumes as shared_volumes
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class BooksVolumesMybooksListSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class BooksVolumesMybooksListAcquireMethodEnum(str, Enum):
    ACQUIRE_METHOD_UNDEFINED = 'ACQUIRE_METHOD_UNDEFINED'
    FAMILY_SHARED = 'FAMILY_SHARED'
    PREORDERED = 'PREORDERED'
    PREVIOUSLY_RENTED = 'PREVIOUSLY_RENTED'
    PUBLIC_DOMAIN = 'PUBLIC_DOMAIN'
    PURCHASED = 'PURCHASED'
    RENTED = 'RENTED'
    SAMPLE = 'SAMPLE'
    UPLOADED = 'UPLOADED'

class BooksVolumesMybooksListProcessingStateEnum(str, Enum):
    PROCESSING_STATE_UNDEFINED = 'PROCESSING_STATE_UNDEFINED'
    COMPLETED_FAILED = 'COMPLETED_FAILED'
    COMPLETED_SUCCESS = 'COMPLETED_SUCCESS'
    RUNNING = 'RUNNING'


@dataclasses.dataclass
class BooksVolumesMybooksListRequest:
    
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    acquire_method: Optional[list[BooksVolumesMybooksListAcquireMethodEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'acquireMethod', 'style': 'form', 'explode': True }})
    r"""How the book was acquired"""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""ISO-3166-1 code to override the IP-based location."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    locale: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'locale', 'style': 'form', 'explode': True }})
    r"""ISO-639-1 language and ISO-3166-1 country code. Ex:'en_US'. Used for generating recommendations."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""Maximum number of results to return."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    processing_state: Optional[list[BooksVolumesMybooksListProcessingStateEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'processingState', 'style': 'form', 'explode': True }})
    r"""The processing state of the user uploaded volumes to be returned. Applicable only if the UPLOADED is specified in the acquireMethod."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""String to identify the originator of this request."""  
    start_index: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startIndex', 'style': 'form', 'explode': True }})
    r"""Index of the first result to return (starts at 0)"""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class BooksVolumesMybooksListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    volumes: Optional[shared_volumes.Volumes] = dataclasses.field(default=None)
    r"""Successful response"""  
    