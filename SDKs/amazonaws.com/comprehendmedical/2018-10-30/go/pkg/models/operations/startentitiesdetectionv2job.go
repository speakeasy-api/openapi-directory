// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartEntitiesDetectionV2JobXAmzTargetEnum
type StartEntitiesDetectionV2JobXAmzTargetEnum string

const (
	StartEntitiesDetectionV2JobXAmzTargetEnumComprehendMedical20181030StartEntitiesDetectionV2Job StartEntitiesDetectionV2JobXAmzTargetEnum = "ComprehendMedical_20181030.StartEntitiesDetectionV2Job"
)

func (e *StartEntitiesDetectionV2JobXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ComprehendMedical_20181030.StartEntitiesDetectionV2Job":
		*e = StartEntitiesDetectionV2JobXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StartEntitiesDetectionV2JobXAmzTargetEnum: %s", s)
	}
}

type StartEntitiesDetectionV2JobHeaders struct {
	XAmzAlgorithm     *string                                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        StartEntitiesDetectionV2JobXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartEntitiesDetectionV2JobRequest struct {
	Headers StartEntitiesDetectionV2JobHeaders
	Request shared.StartEntitiesDetectionV2JobRequest `request:"mediaType=application/json"`
}

type StartEntitiesDetectionV2JobResponse struct {
	ContentType string
	// InternalServerException
	InternalServerException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	StartEntitiesDetectionV2JobResponse *shared.StartEntitiesDetectionV2JobResponse
	StatusCode                          int
	RawResponse                         *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
