"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImprovementProgramJSON:
    
    image_file_b64: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_file_b64'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'image_file_b64' }})
    r"""Source image file (base64-encoded string). (If this parameter is present, the other image source parameters must be empty.)"""  
    image_filename: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_filename'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'image_filename' }})
    r"""Filename of the image, if not provided it will be autodetected form the submitted data."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_url'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'image_url' }})
    r"""Source image URL. (If this parameter is present, the other image source parameters must be empty.)"""  
    tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tag'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'tag' }})
    r"""Images with the same tag are grouped together."""  
    