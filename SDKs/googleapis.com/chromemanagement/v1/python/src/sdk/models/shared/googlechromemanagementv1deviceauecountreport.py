"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleChromeManagementV1DeviceAueCountReportAueMonthEnum(str, Enum):
    r"""Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty."""
    MONTH_UNSPECIFIED = 'MONTH_UNSPECIFIED'
    JANUARY = 'JANUARY'
    FEBRUARY = 'FEBRUARY'
    MARCH = 'MARCH'
    APRIL = 'APRIL'
    MAY = 'MAY'
    JUNE = 'JUNE'
    JULY = 'JULY'
    AUGUST = 'AUGUST'
    SEPTEMBER = 'SEPTEMBER'
    OCTOBER = 'OCTOBER'
    NOVEMBER = 'NOVEMBER'
    DECEMBER = 'DECEMBER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleChromeManagementV1DeviceAueCountReport:
    r"""Report for CountChromeDevicesPerAueDateResponse, contains the count of devices of a specific model and auto update expiration range."""
    
    aue_month: Optional[GoogleChromeManagementV1DeviceAueCountReportAueMonthEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aueMonth'), 'exclude': lambda f: f is None }})
    r"""Enum value of month corresponding to the auto update expiration date in UTC time zone. If the device is already expired, this field is empty."""  
    aue_year: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aueYear'), 'exclude': lambda f: f is None }})
    r"""Int value of year corresponding to the Auto Update Expiration date in UTC time zone. If the device is already expired, this field is empty."""  
    count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""Count of devices of this model."""  
    expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})
    r"""Boolean value for whether or not the device has already expired."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""Public model name of the devices."""  
    