// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeQueryXAmzTargetEnum
type DescribeQueryXAmzTargetEnum string

const (
	DescribeQueryXAmzTargetEnumComAmazonawsCloudtrailV20131101CloudTrail20131101DescribeQuery DescribeQueryXAmzTargetEnum = "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeQuery"
)

func (e DescribeQueryXAmzTargetEnum) ToPointer() *DescribeQueryXAmzTargetEnum {
	return &e
}

func (e *DescribeQueryXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101.DescribeQuery":
		*e = DescribeQueryXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeQueryXAmzTargetEnum: %v", v)
	}
}

type DescribeQueryRequest struct {
	DescribeQueryRequest shared.DescribeQueryRequest `request:"mediaType=application/json"`
	XAmzAlgorithm        *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256    *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential       *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate             *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken    *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature        *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders    *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget           DescribeQueryXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DescribeQueryResponse struct {
	ContentType string
	// Success
	DescribeQueryResponse *shared.DescribeQueryResponse
	// EventDataStoreARNInvalidException
	EventDataStoreARNInvalidException interface{}
	// EventDataStoreNotFoundException
	EventDataStoreNotFoundException interface{}
	// InactiveEventDataStoreException
	InactiveEventDataStoreException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// NoManagementAccountSLRExistsException
	NoManagementAccountSLRExistsException interface{}
	// OperationNotPermittedException
	OperationNotPermittedException interface{}
	// QueryIdNotFoundException
	QueryIDNotFoundException interface{}
	StatusCode               int
	RawResponse              *http.Response
	// UnsupportedOperationException
	UnsupportedOperationException interface{}
}
