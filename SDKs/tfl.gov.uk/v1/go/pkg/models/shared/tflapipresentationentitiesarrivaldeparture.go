// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum - Status of departure
type TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum string

const (
	TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnumOnTime               TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum = "OnTime"
	TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnumDelayed              TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum = "Delayed"
	TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnumCancelled            TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum = "Cancelled"
	TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnumNotStoppingAtStation TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum = "NotStoppingAtStation"
)

func (e TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum) ToPointer() *TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum {
	return &e
}

func (e *TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OnTime":
		fallthrough
	case "Delayed":
		fallthrough
	case "Cancelled":
		fallthrough
	case "NotStoppingAtStation":
		*e = TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum: %v", v)
	}
}

// TflAPIPresentationEntitiesArrivalDeparture - DTO to capture the prediction details
type TflAPIPresentationEntitiesArrivalDeparture struct {
	// Reason for cancellation or delay
	Cause *string `json:"cause,omitempty"`
	// Status of departure
	DepartureStatus *TflAPIPresentationEntitiesArrivalDepartureDepartureStatusEnum `json:"departureStatus,omitempty"`
	// Name of the destination
	DestinationName *string `json:"destinationName,omitempty"`
	// Naptan Identifier for the prediction's destination
	DestinationNaptanID *string `json:"destinationNaptanId,omitempty"`
	// Estimated time of arrival
	EstimatedTimeOfArrival *time.Time `json:"estimatedTimeOfArrival,omitempty"`
	// Estimated time of arrival
	EstimatedTimeOfDeparture *time.Time `json:"estimatedTimeOfDeparture,omitempty"`
	// Estimated time of arrival
	MinutesAndSecondsToArrival *string `json:"minutesAndSecondsToArrival,omitempty"`
	// Estimated time of arrival
	MinutesAndSecondsToDeparture *string `json:"minutesAndSecondsToDeparture,omitempty"`
	// Identifier for the prediction
	NaptanID *string `json:"naptanId,omitempty"`
	// Platform name (for bus, this is the stop letter)
	PlatformName *string `json:"platformName,omitempty"`
	// Estimated time of arrival
	ScheduledTimeOfArrival *time.Time `json:"scheduledTimeOfArrival,omitempty"`
	// Estimated time of arrival
	ScheduledTimeOfDeparture *time.Time `json:"scheduledTimeOfDeparture,omitempty"`
	// Station name
	StationName *string                                     `json:"stationName,omitempty"`
	Timing      *TflAPIPresentationEntitiesPredictionTiming `json:"timing,omitempty"`
}
