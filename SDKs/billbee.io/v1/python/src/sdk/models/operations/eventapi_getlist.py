"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from datetime import datetime
from typing import Any, Optional


@dataclasses.dataclass
class EventAPIGetListRequest:
    
    max_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxDate', 'style': 'form', 'explode': True }})
    r"""Specifies the newest date to include in the response"""  
    min_date: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'minDate', 'style': 'form', 'explode': True }})
    r"""Specifies the oldest date to include in the response"""  
    order_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'orderId', 'style': 'form', 'explode': True }})
    r"""Filter for specific order id"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Specifies the page to request"""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pageSize', 'style': 'form', 'explode': True }})
    r"""Specifies the pagesize. Defaults to 50, max value is 250"""  
    type_id: Optional[list[int]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'typeId', 'style': 'form', 'explode': True }})
    r"""Filter for specific event types"""  
    

@dataclasses.dataclass
class EventAPIGetListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    event_api_get_list_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""OK"""  
    event_api_get_list_200_text_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    