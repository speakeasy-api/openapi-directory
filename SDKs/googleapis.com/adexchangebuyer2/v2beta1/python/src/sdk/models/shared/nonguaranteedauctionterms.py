"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import priceperbuyer as shared_priceperbuyer
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NonGuaranteedAuctionTerms:
    r"""Terms for Private Auctions. Note that Private Auctions can be created only by the seller, but they can be returned in a get or list request."""
    
    auto_optimize_private_auction: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoOptimizePrivateAuction'), 'exclude': lambda f: f is None }})
    r"""True if open auction buyers are allowed to compete with invited buyers in this private auction."""  
    reserve_prices_per_buyer: Optional[list[shared_priceperbuyer.PricePerBuyer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reservePricesPerBuyer'), 'exclude': lambda f: f is None }})
    r"""Reserve price for the specified buyer."""  
    