// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type NotificationsGetAppEmailSettingsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type NotificationsGetAppEmailSettingsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

// NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum - The status code return by the API. It can be 400 or 404 or 409 or 500.
type NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum int64

const (
	NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnumFourHundred        NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum = 400
	NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnumFourHundredAndFour NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum = 404
	NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnumFourHundredAndNine NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum = 409
	NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnumFiveHundred        NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum = 500
)

func (e NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum) ToPointer() *NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum {
	return &e
}

func (e *NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 400:
		fallthrough
	case 404:
		fallthrough
	case 409:
		fallthrough
	case 500:
		*e = NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum: %v", v)
	}
}

// NotificationsGetAppEmailSettingsDefaultApplicationJSON - Generic result for any alerting API operation
type NotificationsGetAppEmailSettingsDefaultApplicationJSON struct {
	// The status code return by the API. It can be 400 or 404 or 409 or 500.
	Code NotificationsGetAppEmailSettingsDefaultApplicationJSONCodeEnum `json:"code"`
	// The reason for the request failed
	Message *string `json:"message,omitempty"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
}

// NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum - Default frequency of event
type NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum string

const (
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnumDisabled           NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Disabled"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnumIndividual         NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Individual"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnumDaily              NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "Daily"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnumDailyAndIndividual NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum = "DailyAndIndividual"
)

func (e NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum) ToPointer() *NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum {
	return &e
}

func (e *NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Individual":
		fallthrough
	case "Daily":
		fallthrough
	case "DailyAndIndividual":
		*e = NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum: %v", v)
	}
}

// NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum - Event Name
type NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum string

const (
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnumCrashNewCrashGroupCreated NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum = "crash_newCrashGroupCreated"
)

func (e NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum) ToPointer() *NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum {
	return &e
}

func (e *NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crash_newCrashGroupCreated":
		*e = NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum: %v", v)
	}
}

// NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum - Frequency of event
type NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum string

const (
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnumDisabled           NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = "Disabled"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnumIndividual         NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = "Individual"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnumDaily              NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = "Daily"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnumDailyAndIndividual NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = "DailyAndIndividual"
	NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnumDefault            NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum = "Default"
)

func (e NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum) ToPointer() *NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum {
	return &e
}

func (e *NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Disabled":
		fallthrough
	case "Individual":
		fallthrough
	case "Daily":
		fallthrough
	case "DailyAndIndividual":
		fallthrough
	case "Default":
		*e = NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum: %v", v)
	}
}

// NotificationsGetAppEmailSettings200ApplicationJSONSettings - Event Setting
type NotificationsGetAppEmailSettings200ApplicationJSONSettings struct {
	// Default frequency of event
	DefaultValue *NotificationsGetAppEmailSettings200ApplicationJSONSettingsDefaultValueEnum `json:"default_value,omitempty"`
	// Event Name
	EventType NotificationsGetAppEmailSettings200ApplicationJSONSettingsEventTypeEnum `json:"event_type"`
	// Frequency of event
	Value NotificationsGetAppEmailSettings200ApplicationJSONSettingsValueEnum `json:"value"`
}

// NotificationsGetAppEmailSettings200ApplicationJSON - Generic result for any alerting API operation
type NotificationsGetAppEmailSettings200ApplicationJSON struct {
	// Application ID
	AppID *string `json:"appId,omitempty"`
	// The ETag of the entity
	ETag *string `json:"eTag,omitempty"`
	// Allows to forcefully disable emails on app or user level
	Enabled bool `json:"enabled"`
	// Unique request identifier for tracking
	RequestID string `json:"request_id"`
	// The settings the user has for the app
	Settings []NotificationsGetAppEmailSettings200ApplicationJSONSettings `json:"settings"`
	// The unique id (UUID) of the user
	UserID *string `json:"userId,omitempty"`
	// A flag indicating if settings are enabled at user/global level
	UserEnabled bool `json:"user_enabled"`
}

type NotificationsGetAppEmailSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	NotificationsGetAppEmailSettings200ApplicationJSONObject *NotificationsGetAppEmailSettings200ApplicationJSON
	// Error code with reason
	NotificationsGetAppEmailSettingsDefaultApplicationJSONObject *NotificationsGetAppEmailSettingsDefaultApplicationJSON
}
