"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Customers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_setup_v1_customers(self, request: operations.GetSetupV1CustomersRequest) -> operations.GetSetupV1CustomersResponse:
        r"""List Customers
        <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/customers'
        
        query_params = utils.get_query_params(operations.GetSetupV1CustomersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerListViewModel])
                res.customer_list_view_model = out

        return res

    def get_setup_v1_customers_id_(self, request: operations.GetSetupV1CustomersIDRequest) -> operations.GetSetupV1CustomersIDResponse:
        r"""Get Customer
        <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /setup/v1/customers</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CustomersIDRequest, base_url, '/setup/v1/customers/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CustomersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerViewModel])
                res.customer_view_model = out

        return res

    def get_setup_v1_customers_id_privacy(self, request: operations.GetSetupV1CustomersIDPrivacyRequest) -> operations.GetSetupV1CustomersIDPrivacyResponse:
        r"""Get Customer Data
        <p>Use this endpoint to return the <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's using the <i>GET /setup/v1/customers</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1CustomersIDPrivacyRequest, base_url, '/setup/v1/customers/{id}/privacy', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1CustomersIDPrivacyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomerPrivacyViewModel])
                res.customer_privacy_view_model = out

        return res

    