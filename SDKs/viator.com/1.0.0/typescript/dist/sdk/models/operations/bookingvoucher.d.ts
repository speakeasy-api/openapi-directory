import { SpeakeasyBase } from "../../../internal/utils";
import { AxiosResponse } from "axios";
export declare class BookingVoucherRequest extends SpeakeasyBase {
    /**
     * Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)
     *
     * @remarks
     *
     */
    acceptLanguage: string;
    /**
     * ignore (Viator only)
     */
    embeddedResources?: boolean;
    /**
     * **specifier**:
     *
     * @remarks
     * - set to `true` if you wish to retrieve the full HTML-formatted voucher
     * - set to `false` if you want the div fragment (optional)
     *
     */
    fullHTML?: boolean;
    /**
     * Booking-reference number generated by Viator
     *
     * @remarks
     *
     *   - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
     *
     */
    itemId?: number;
    /**
     * **surname** of *this* lead traveler
     */
    leadLastName?: string;
    /**
     * **specifier**:
     *
     * @remarks
     * - if set to `true`, the service returns the mobile (cut down) HTML-formatted voucher
     * - if `false` the full voucher HTML is returned (ignoring `fullHTML`)
     * - default: `true`
     * - this field should only be enabled for products that have a `voucherOption` of `'VOUCHER_E'`
     * - do not enable `mobileVouchers` for paper vouchers (`voucherOption` of `'VOUCHER_PAPER_ONLY'`) as no barcode is returned
     * - the voucher information is available in the response from [/product](#operation/product), [/booking/book](#operation/bookingBook), [/booking/pastbooking](#operation/bookingPastbooking), [/booking/mybookings](#operation/bookingMybookings) (it is also displayed under the 'Redemption Info' heading in this service)
     *
     */
    mobileVoucher?: boolean;
    /**
     * **identifier** for the voucher
     *
     * @remarks
     * - **note**: use &lt;u&gt;either&lt;/u&gt; `voucherKey` &lt;u&gt;or&lt;/u&gt; the three separate parameters
     * - if `voucherKey` is provided as well as the other parameters, then `voucherKey` overrides the other paramaters
     * - `voucherKey` is obtained from [/booking/mybookings](#operation/bookingMybookings) or in the response from [/booking/book](#operation/bookingBook) when you make a booking
     *
     */
    voucherKey?: string;
}
/**
 * Success
 */
export declare class BookingVoucher200ApplicationJSON extends SpeakeasyBase {
    /**
     * **HTML-formatted** voucher content
     */
    data?: string;
    /**
     * **timestamp** of *this* response
     */
    dateStamp?: string;
    /**
     * **array** of error codes pertaining to *this* error
     *
     * @remarks
     * - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
     *
     */
    errorCodes?: string[];
    /**
     * **array** of error message strings
     */
    errorMessage?: any[];
    /**
     * **array** of error message strings in plain text
     */
    errorMessageText?: string;
    /**
     * **name** of *this* type of error
     */
    errorName?: string;
    /**
     * **reference number** of *this* error
     */
    errorReference?: string;
    /**
     * **code** specifying the type of error
     */
    errorType?: string;
    /**
     * ignore (Viator only)
     */
    extraInfo?: Record<string, any>;
    /**
     * ignore (Viator only)
     */
    extraObject?: Record<string, any>;
    /**
     * **boolean indicator** of *this* request's outcome
     *
     * @remarks
     * - `true`: the request was successful with no errors
     * - `false`: an error was encountered
     *
     */
    success?: boolean;
    /**
     * **number** of results available for *this* service
     *
     * @remarks
     *
     */
    totalCount?: number;
    /**
     * **unique numeric id** of the server that processed *this* request
     */
    vmid?: string;
}
export declare class BookingVoucherResponse extends SpeakeasyBase {
    contentType: string;
    statusCode: number;
    rawResponse?: AxiosResponse;
    /**
     * Success
     */
    bookingVoucher200ApplicationJSONObject?: BookingVoucher200ApplicationJSON;
}
