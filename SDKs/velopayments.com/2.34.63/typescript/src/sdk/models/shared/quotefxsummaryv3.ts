/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class QuoteFxSummaryV3 extends SpeakeasyBase {
  /**
   * Timestamp of when the quote was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime: Date;

  /**
   * The timestamp for when the quote will expire
   */
  @SpeakeasyMetadata()
  @Expose({ name: "expiryTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  expiryTime?: Date;

  /**
   * Current status of the funding associated with this quote. One of the following values: UNFUNDED, INSTRUCTED, FUNDED
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fundingStatus" })
  fundingStatus: string;

  /**
   * The inverse conversion rate (from paymnent currency to source currency)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "invertedRate" })
  invertedRate?: number;

  /**
   * Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "paymentCurrency" })
  paymentCurrency: string;

  /**
   * The id of the created quote
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quoteId" })
  quoteId: string;

  /**
   * The conversion rate (from the source currency to the payment currency)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rate" })
  rate: number;

  /**
   * Valid ISO 4217 3 letter currency code. See the <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a>ISO specification</a> for details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceCurrency" })
  sourceCurrency: string;

  /**
   * Current status of the fx quote. One of the following values: UNQUOTED, QUOTED, EXPIRED, EXECUTED, REJECTED
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * The amount (in minor units) that the payee will receive
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalPaymentAmount" })
  totalPaymentAmount: number;

  /**
   * The amount (in minor units) that will be paid from the source account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "totalSourceAmount" })
  totalSourceAmount: number;
}
