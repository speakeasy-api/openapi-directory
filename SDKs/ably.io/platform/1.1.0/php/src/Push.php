<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Push 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a registered device's update token
     * 
     * Delete a device details object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsResponse
     */
	public function deletePushDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channelSubscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletePushDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List all channels with at least one subscribed device
     * 
     * Returns a paginated response of channel names.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersResponse
     */
	public function getChannelsWithPushSubscribers(
        \OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetChannelsWithPushSubscribersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getChannelsWithPushSubscribers2XXApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a device registration
     * 
     * Get the full details of a device.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsResponse
     */
	public function getPushDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPushDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List channel subscriptions
     * 
     * Get a list of push notification subscriptions to channels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsResponse
     */
	public function getPushSubscriptionsOnChannels(
        \OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channelSubscriptions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetPushSubscriptionsOnChannelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * List devices registered for receiving push notifications
     * 
     * List of device details of devices registed for push notifications.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesResponse
     */
	public function getRegisteredPushDevices(
        \OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRegisteredPushDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormResponse
     */
	public function patchPushDeviceDetailsForm(
        \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceDetailsInput", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonResponse
     */
	public function patchPushDeviceDetailsJson(
        \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceDetailsInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Specific attributes of an existing registration can be updated. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawResponse
     */
	public function patchPushDeviceDetailsRaw(
        \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchPushDeviceDetailsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Publish a push notification to device(s)
     * 
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormResponse
     */
	public function publishPushNotificationToDevicesForm(
        \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/publish');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Publish a push notification to device(s)
     * 
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonResponse
     */
	public function publishPushNotificationToDevicesJson(
        \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/publish');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Publish a push notification to device(s)
     * 
     * A convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their client identifier.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawResponse
     */
	public function publishPushNotificationToDevicesRaw(
        \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/publish');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PublishPushNotificationToDevicesRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormResponse
     */
	public function putPushDeviceDetailsForm(
        \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceDetailsInput", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonResponse
     */
	public function putPushDeviceDetailsJson(
        \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceDetailsInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a device registration
     * 
     * Device registrations can be upserted (the existing registration is replaced entirely) with a PUT operation. Only clientId, metadata and push.recipient are mutable.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawResponse
     */
	public function putPushDeviceDetailsRaw(
        \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutPushDeviceDetailsRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a device for receiving push notifications
     * 
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires "push-admin" capability.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonResponse
     */
	public function registerPushDeviceJson(
        \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "deviceDetailsInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Register a device for receiving push notifications
     * 
     * Register a device’s details, including the information necessary to deliver push notifications to it. Requires "push-admin" capability.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawResponse
     */
	public function registerPushDeviceRaw(
        \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RegisterPushDeviceRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe a device to a channel
     * 
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormResponse
     */
	public function subscribePushDeviceToChannelForm(
        \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channelSubscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Subscribe a device to a channel
     * 
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonResponse
     */
	public function subscribePushDeviceToChannelJson(
        \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channelSubscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Subscribe a device to a channel
     * 
     * Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawResponse
     */
	public function subscribePushDeviceToChannelRaw(
        \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/channelSubscriptions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubscribePushDeviceToChannelRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unregister matching devices for push notifications
     * 
     * Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesResponse
     */
	public function unregisterAllPushDevices(
        \OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnregisterAllPushDevicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Unregister a single device for push notifications
     * 
     * Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceResponse
     */
	public function unregisterPushDevice(
        \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}', \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UnregisterPushDeviceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Reset a registered device's update token
     * 
     * Gets an updated device details object.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsResponse
     */
	public function updatePushDeviceDetails(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/push/deviceRegistrations/{device_id}/resetUpdateToken', \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePushDeviceDetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (($httpResponse->getStatusCode() >= 200 && $httpResponse->getStatusCode() < 300)) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deviceDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeviceDetailsOutput', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/x-msgpack')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'text/html')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}