"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authconfig as shared_authconfig
from ..shared import configvariable as shared_configvariable
from ..shared import connectionstatus as shared_connectionstatus
from ..shared import destinationconfig as shared_destinationconfig
from ..shared import lockconfig as shared_lockconfig
from ..shared import nodeconfig as shared_nodeconfig
from ..shared import sslconfig as shared_sslconfig
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionInput:
    r"""Connection represents an instance of connector."""
    
    auth_config: Optional[shared_authconfig.AuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authConfig'), 'exclude': lambda f: f is None }})
    r"""AuthConfig defines details of a authentication type."""  
    config_variables: Optional[list[shared_configvariable.ConfigVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configVariables'), 'exclude': lambda f: f is None }})
    r"""Optional. Configuration for configuring the connection with an external system."""  
    connector_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorVersion'), 'exclude': lambda f: f is None }})
    r"""Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the resource."""  
    destination_configs: Optional[list[shared_destinationconfig.DestinationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationConfigs'), 'exclude': lambda f: f is None }})
    r"""Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s)."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"""  
    lock_config: Optional[shared_lockconfig.LockConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockConfig'), 'exclude': lambda f: f is None }})
    r"""Determines whether or no a connection is locked. If locked, a reason must be specified."""  
    node_config: Optional[shared_nodeconfig.NodeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeConfig'), 'exclude': lambda f: f is None }})
    r"""Node configuration for the connection."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""Optional. Service account needed for runtime plane to access GCP resources."""  
    ssl_config: Optional[shared_sslconfig.SslConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslConfig'), 'exclude': lambda f: f is None }})
    r"""SSL Configuration of a connection"""  
    status: Optional[shared_connectionstatus.ConnectionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""ConnectionStatus indicates the state of the connection."""  
    suspended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended'), 'exclude': lambda f: f is None }})
    r"""Optional. Suspended indicates if a user has suspended a connection or not."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Connection:
    r"""Connection represents an instance of connector."""
    
    auth_config: Optional[shared_authconfig.AuthConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authConfig'), 'exclude': lambda f: f is None }})
    r"""AuthConfig defines details of a authentication type."""  
    config_variables: Optional[list[shared_configvariable.ConfigVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configVariables'), 'exclude': lambda f: f is None }})
    r"""Optional. Configuration for configuring the connection with an external system."""  
    connector_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('connectorVersion'), 'exclude': lambda f: f is None }})
    r"""Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Created time."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description of the resource."""  
    destination_configs: Optional[list[shared_destinationconfig.DestinationConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destinationConfigs'), 'exclude': lambda f: f is None }})
    r"""Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s)."""  
    envoy_image_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('envoyImageLocation'), 'exclude': lambda f: f is None }})
    r"""Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}"""  
    image_location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageLocation'), 'exclude': lambda f: f is None }})
    r"""Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}"""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources"""  
    lock_config: Optional[shared_lockconfig.LockConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lockConfig'), 'exclude': lambda f: f is None }})
    r"""Determines whether or no a connection is locked. If locked, a reason must be specified."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}"""  
    node_config: Optional[shared_nodeconfig.NodeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nodeConfig'), 'exclude': lambda f: f is None }})
    r"""Node configuration for the connection."""  
    service_account: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceAccount'), 'exclude': lambda f: f is None }})
    r"""Optional. Service account needed for runtime plane to access GCP resources."""  
    service_directory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceDirectory'), 'exclude': lambda f: f is None }})
    r"""Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. \\"projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors\\" """  
    ssl_config: Optional[shared_sslconfig.SslConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sslConfig'), 'exclude': lambda f: f is None }})
    r"""SSL Configuration of a connection"""  
    status: Optional[shared_connectionstatus.ConnectionStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""ConnectionStatus indicates the state of the connection."""  
    suspended: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspended'), 'exclude': lambda f: f is None }})
    r"""Optional. Suspended indicates if a user has suspended a connection or not."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Updated time."""  
    