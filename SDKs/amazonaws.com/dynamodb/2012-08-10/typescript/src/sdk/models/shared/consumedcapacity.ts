/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Capacity } from "./capacity";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the request asked for it. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
 */
export class ConsumedCapacity extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CapacityUnits" })
  capacityUnits?: number;

  @SpeakeasyMetadata({ elemType: Capacity })
  @Expose({ name: "GlobalSecondaryIndexes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Capacity> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Capacity);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  globalSecondaryIndexes?: Record<string, Capacity>;

  @SpeakeasyMetadata({ elemType: Capacity })
  @Expose({ name: "LocalSecondaryIndexes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Capacity> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Capacity);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  localSecondaryIndexes?: Record<string, Capacity>;

  @SpeakeasyMetadata()
  @Expose({ name: "ReadCapacityUnits" })
  readCapacityUnits?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "Table" })
  @Type(() => Capacity)
  table?: Capacity;

  @SpeakeasyMetadata()
  @Expose({ name: "TableName" })
  tableName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "WriteCapacityUnits" })
  writeCapacityUnits?: number;
}
