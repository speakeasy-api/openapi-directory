/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Organizations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates a GcpUserAccessBinding. If the client specifies a name, the server ignores it. Fails if a resource already exists with the same group_key. Completion of this long-running operation does not necessarily signify that the new binding is deployed onto all affected users, which may take more time.
   */
  accesscontextmanagerOrganizationsGcpUserAccessBindingsCreate(
    req: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateRequest,
    security: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/gcpUserAccessBindings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "gcpUserAccessBinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateResponse =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the binding deletion is deployed onto all affected users, which may take more time.
   */
  accesscontextmanagerOrganizationsGcpUserAccessBindingsDelete(
    req: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteRequest,
    security: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteResponse =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the GcpUserAccessBinding with the given name.
   */
  accesscontextmanagerOrganizationsGcpUserAccessBindingsGet(
    req: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetRequest,
    security: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetResponse =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.gcpUserAccessBinding = utils.objectToClass(
              httpRes?.data,
              shared.GcpUserAccessBinding
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all GcpUserAccessBindings for a Google Cloud organization.
   */
  accesscontextmanagerOrganizationsGcpUserAccessBindingsList(
    req: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListRequest,
    security: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/gcpUserAccessBindings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListResponse =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listGcpUserAccessBindingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListGcpUserAccessBindingsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the changed binding is deployed onto all affected users, which may take more time.
   */
  accesscontextmanagerOrganizationsGcpUserAccessBindingsPatch(
    req: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchRequest,
    security: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "gcpUserAccessBinding",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchResponse =
        new operations.AccesscontextmanagerOrganizationsGcpUserAccessBindingsPatchResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
