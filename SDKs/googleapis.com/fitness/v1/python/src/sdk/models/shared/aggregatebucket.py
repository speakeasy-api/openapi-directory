"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import dataset as shared_dataset
from ..shared import session as shared_session
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AggregateBucketTypeEnum(str, Enum):
    r"""The type of a bucket signifies how the data aggregation is performed in the bucket."""
    UNKNOWN = 'unknown'
    TIME = 'time'
    SESSION = 'session'
    ACTIVITY_TYPE = 'activityType'
    ACTIVITY_SEGMENT = 'activitySegment'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AggregateBucket:
    
    activity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activity'), 'exclude': lambda f: f is None }})
    r"""Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT"""  
    dataset: Optional[list[shared_dataset.Dataset]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataset'), 'exclude': lambda f: f is None }})
    r"""There will be one dataset per AggregateBy in the request."""  
    end_time_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endTimeMillis'), 'exclude': lambda f: f is None }})
    r"""The end time for the aggregated data, in milliseconds since epoch, inclusive."""  
    session: Optional[shared_session.Session] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('session'), 'exclude': lambda f: f is None }})
    r"""Sessions contain metadata, such as a user-friendly name and time interval information."""  
    start_time_millis: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startTimeMillis'), 'exclude': lambda f: f is None }})
    r"""The start time for the aggregated data, in milliseconds since epoch, inclusive."""  
    type: Optional[AggregateBucketTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of a bucket signifies how the data aggregation is performed in the bucket."""  
    