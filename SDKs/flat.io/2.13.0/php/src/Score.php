<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Score 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add a new collaborator
     * 
     * Share a score with a single user or a group. This API call allows to add, invite and update the collaborators of a resource.
     * - To add an existing Flat user to the resource, specify its unique identifier in the `user` property.
     * - To invite an external user to the resource, specify its email in the `userEmail` property.
     * - To add a Flat group to the resource, specify its unique identifier in the `group` property.
     * - To update an existing collaborator, process the same request with different rights.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorResponse
     */
	public function addScoreCollaborator(
        \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/collaborators', \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "resourceCollaboratorCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddScoreCollaboratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCollaborator', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a new video or audio track to the score
     * 
     * Use this method to add new track to the score. This track can then be played on flat.io or in an embedded score.
     * This API method support medias hosted on SoundCloud, YouTube and Vimeo.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackResponse
     */
	public function addScoreTrack(
        \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/tracks', \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreTrackCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddScoreTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreTrack', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new score
     * 
     * Use this API method to **create a new music score in the current User account**. You will need a MusicXML 3 (`vnd.recordare.musicxml` or `vnd.recordare.musicxml+xml`), a MIDI (`audio/midi`), Guitar Pro (GP3, GP4, GP5, GPX, GP), PowerTab, TuxGuitar, or MuseScore file to create the new Flat document.
     * 
     * This API call will automatically create the first revision of the document, the score can be modified by the using our web application or by uploading a new revision of this file (`POST /v2/scores/{score}/revisions/{revision}`).
     * 
     * The currently authenticated user will be granted owner of the file and will be able to add other collaborators (users and groups).
     * 
     * If no `collection` is specified, the API will create the score in the most appropriate collection. This can be the `root` collection or a different collection based on the user's settings or API authentication method.
     * If a `collection` is specified and this one has more public privacy settings than the score (e.g. `public` vs `private` for the score), the privacy settings of the created score will be adjusted to the collection ones.
     * You can check the adjusted privacy settings in the returned score `privacy`, and optionally adjust these settings if needed using `PUT /scores/{score}`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ScoreCreation $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateScoreResponse
     */
	public function createScore(
        \OpenAPI\OpenAPI\Models\Shared\ScoreCreation $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new revision
     * 
     * Update a score by uploading a new revision for this one.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionResponse
     */
	public function createScoreRevision(
        \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/revisions', \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreRevisionCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateScoreRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreRevision = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreRevision', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a score
     * 
     * This method can be used by the owner/admin (`aclAdmin` rights) of a score as well as regular collaborators.
     * 
     * When called by an owner/admin, it will schedule the deletion of the score, its revisions, and complete history.
     * The score won't be accessible anymore after calling this method and the user's quota will directly be updated.
     * 
     * When called by a regular collaborator (`aclRead` / `aclWrite`), the score will be unshared (i.e. removed from the account & own collections).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScoreResponse
     */
	public function deleteScore(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}', \OpenAPI\OpenAPI\Models\Operations\DeleteScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteScoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a comment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentResponse
     */
	public function deleteScoreComment(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments/{comment}', \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScoreCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove an audio or video track linked to the score
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackResponse
     */
	public function deleteScoreTrack(
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteScoreTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a score's metadata
     * 
     * This API method allows you to change the metadata of a score document (e.g. its `title` or `privacy`), all the properties are optional.
     * 
     * To edit the file itself, create a new revision using the appropriate method (`POST /v2/scores/{score}/revisions/{revision}`).
     * 
     * When editing the `title`, `subtitle`, `composer`, `lyricist`, `arranger` or `licenseText`, the metadatas will be instantly be updated, and a real-time action will be pushed to update the document lazily.
     * This pending document modification will be automatically be saved as a new version by either a connected client or our internal versioning service.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\EditScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\EditScoreResponse
     */
	public function editScore(
        \OpenAPI\OpenAPI\Models\Operations\EditScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\EditScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\EditScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}', \OpenAPI\OpenAPI\Models\Operations\EditScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreModification", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fork a score
     * 
     * This API call will make a copy of the last revision of the specified score and create a new score. The copy of the score will have a privacy set to `private`.
     * 
     * When using a [Flat for Education](https://flat.io/edu) account, the inline and contextualized comments will be accessible in the child document.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ForkScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse
     */
	public function forkScore(
        \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ForkScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/fork', \OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreFork", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ForkScoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ForkScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List liked scores
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GerUserLikesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GerUserLikesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GerUserLikesResponse
     */
	public function gerUserLikes(
        \OpenAPI\OpenAPI\Models\Operations\GerUserLikesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GerUserLikesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GerUserLikesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user}/likes', \OpenAPI\OpenAPI\Models\Operations\GerUserLikesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GerUserLikesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GerUserLikesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreDetails>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List group's scores
     * 
     * Get the list of scores shared with a group.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresResponse
     */
	public function getGroupScores(
        \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{group}/scores', \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetGroupScoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetGroupScoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreDetails>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a score's metadata
     * 
     * Get the details of a score identified by the `score` parameter in the URL.
     * The currently authenticated user must have at least a read access to the document to use this API call.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreResponse
     */
	public function getScore(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}', \OpenAPI\OpenAPI\Models\Operations\GetScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreDetails', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a collaborator
     * 
     * Get the information about a collaborator (User or Group).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorResponse
     */
	public function getScoreCollaborator(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/collaborators/{collaborator}', \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollaborator = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceCollaborator', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the collaborators
     * 
     * This API call will list the different collaborators of a score and their rights on the document. The returned list will at least contain the owner of the document.
     * 
     * Collaborators can be a single user (the object `user` will be populated) or a group (the object `group` will be populated).
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsResponse
     */
	public function getScoreCollaborators(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/collaborators', \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreCollaboratorsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceCollaborators = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ResourceCollaborator>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List comments
     * 
     * This method lists the different comments added on a music score (documents and inline) sorted by their post dates.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsResponse
     */
	public function getScoreComments(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments', \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreCommentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreComments = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreComment>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a score revision
     * 
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to get a specific
     * revision metadata.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionResponse
     */
	public function getScoreRevision(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/revisions/{revision}', \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreRevision = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreRevision', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a score revision data
     * 
     * Retrieve the file corresponding to a score revision (the following formats are available): Flat JSON/Adagio JSON `json`, MusicXML
     * `mxl`/`xml`, MP3 `mp3`, WAV `wav`, MIDI `midi`, a tumbnail of the first page `thumbnail.png` or auto sync points `synchronizationPoints`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataResponse
     */
	public function getScoreRevisionData(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/revisions/{revision}/{format}', \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionDataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getScoreRevisionData200ApplicationJSONBinaryString = $serializer->deserialize((string)$httpResponse->getBody(), 'string', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.recordare.musicxml')) {
                $response->getScoreRevisionData200ApplicationVndRecordareMusicxmlBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.recordare.musicxml+xml')) {
                $response->getScoreRevisionData200ApplicationVndRecordareMusicxmlPlusXmlBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'audio/midi')) {
                $response->getScoreRevisionData200AudioMidiBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'audio/mp3')) {
                $response->getScoreRevisionData200AudioMp3BinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'audio/wav')) {
                $response->getScoreRevisionData200AudioWavBinaryString = $httpResponse->getBody()->getContents();
            }
            if (Utils\Utils::matchContentType($contentType, 'image/png')) {
                $response->getScoreRevisionData200ImagePngBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the revisions
     * 
     * When creating a score or saving a new version of a score, a revision is created in our storage. This method allows you to list all of them, sorted by last modification.
     * 
     * Depending the plan of the account, this list can be trunked to the few last revisions.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsResponse
     */
	public function getScoreRevisions(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/revisions', \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreRevisionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreRevisions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreRevision>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List submissions related to the score
     * 
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse
     */
	public function getScoreSubmissions(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/submissions', \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreSubmissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->assignmentSubmissions = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AssignmentSubmission>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the details of an audio or video track linked to a score
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackResponse
     */
	public function getScoreTrack(
        \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScoreTrackRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScoreTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreTrack', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List user's scores
     * 
     * Get the list of public scores owned by a User.
     * 
     * **DEPRECATED**: Please note that the current behavior will be deprecrated on **2019-01-01**.
     * This method will no longer list private and shared scores, but only public scores of a Flat account.
     * If you want to access to private scores, please use the [Collections API](#tag/Collection) instead.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserScoresRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetUserScoresSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetUserScoresResponse
     */
	public function getUserScores(
        \OpenAPI\OpenAPI\Models\Operations\GetUserScoresRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetUserScoresSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetUserScoresResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/users/{user}/scores', \OpenAPI\OpenAPI\Models\Operations\GetUserScoresRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetUserScoresRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetUserScoresResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreDetails = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreDetails>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List the audio or video tracks linked to a score
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksResponse
     */
	public function listScoreTracks(
        \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/tracks', \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListScoreTracksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListScoreTracksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreTracks = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScoreTrack>', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark the comment as resolved
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedResponse
     */
	public function markScoreCommentResolved(
        \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments/{comment}/resolved', \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentResolvedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark the comment as unresolved
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedResponse
     */
	public function markScoreCommentUnresolved(
        \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments/{comment}/resolved', \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MarkScoreCommentUnresolvedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Post a new comment
     * 
     * Post a document or a contextualized comment on a document.
     * 
     * Please note that this method includes an anti-spam system for public scores. We don't guarantee that your comments will be accepted and displayed to end-user. Comments are be blocked by returning a `403` HTTP error and hidden from other users when the `spam` property is `true`.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentResponse
     */
	public function postScoreComment(
        \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments', \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreCommentCreation", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostScoreCommentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostScoreCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreComment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a collaborator
     * 
     * Remove the specified collaborator from the score
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorResponse
     */
	public function removeScoreCollaborator(
        \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/collaborators/{collaborator}', \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RemoveScoreCollaboratorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Untrash a score
     * 
     * This method will remove the score from the `trash` collection and from the deletion queue, and add it back to the original collections.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UntrashScoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UntrashScoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UntrashScoreResponse
     */
	public function untrashScore(
        \OpenAPI\OpenAPI\Models\Operations\UntrashScoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UntrashScoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UntrashScoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/untrash', \OpenAPI\OpenAPI\Models\Operations\UntrashScoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UntrashScoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing comment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentResponse
     */
	public function updateScoreComment(
        \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/comments/{comment}', \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreCommentUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateScoreCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreComment', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an audio or video track linked to a score
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackResponse
     */
	public function updateScoreTrack(
        \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scores/{score}/tracks/{track}', \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "scoreTrackUpdate", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateScoreTrackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scoreTrack = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScoreTrack', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flatErrorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlatErrorResponse', 'json');
            }
        }

        return $response;
    }
}