/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * [TrustedTester] [Required] Defines the ranges for range partitioning.
 */
export class RangePartitioningRange extends SpeakeasyBase {
  /**
   * [TrustedTester] [Required] The end of range partitioning, exclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end" })
  end?: string;

  /**
   * [TrustedTester] [Required] The width of each interval.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interval" })
  interval?: string;

  /**
   * [TrustedTester] [Required] The start of range partitioning, inclusive.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "start" })
  start?: string;
}

export class RangePartitioning extends SpeakeasyBase {
  /**
   * [TrustedTester] [Required] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field" })
  field?: string;

  /**
   * [TrustedTester] [Required] Defines the ranges for range partitioning.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "range" })
  @Type(() => RangePartitioningRange)
  range?: RangePartitioningRange;
}
