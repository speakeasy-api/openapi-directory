/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GoogleCloudIntegrationsV1alphaCredential - Defines parameters for a single, canonical credential.
 */
public class GoogleCloudIntegrationsV1alphaCredential {
    /**
     * The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authToken")
    public GoogleCloudIntegrationsV1alphaAuthToken authToken;
    public GoogleCloudIntegrationsV1alphaCredential withAuthToken(GoogleCloudIntegrationsV1alphaAuthToken authToken) {
        this.authToken = authToken;
        return this;
    }
    
    /**
     * Credential type associated with auth config.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialType")
    public GoogleCloudIntegrationsV1alphaCredentialCredentialTypeEnum credentialType;
    public GoogleCloudIntegrationsV1alphaCredential withCredentialType(GoogleCloudIntegrationsV1alphaCredentialCredentialTypeEnum credentialType) {
        this.credentialType = credentialType;
        return this;
    }
    
    /**
     * Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwt")
    public GoogleCloudIntegrationsV1alphaJwt jwt;
    public GoogleCloudIntegrationsV1alphaCredential withJwt(GoogleCloudIntegrationsV1alphaJwt jwt) {
        this.jwt = jwt;
        return this;
    }
    
    /**
     * The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2AuthorizationCode")
    public GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode oauth2AuthorizationCode;
    public GoogleCloudIntegrationsV1alphaCredential withOauth2AuthorizationCode(GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode oauth2AuthorizationCode) {
        this.oauth2AuthorizationCode = oauth2AuthorizationCode;
        return this;
    }
    
    /**
     * For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2ClientCredentials")
    public GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials oauth2ClientCredentials;
    public GoogleCloudIntegrationsV1alphaCredential withOauth2ClientCredentials(GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials oauth2ClientCredentials) {
        this.oauth2ClientCredentials = oauth2ClientCredentials;
        return this;
    }
    
    /**
     * For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oauth2ResourceOwnerCredentials")
    public GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials oauth2ResourceOwnerCredentials;
    public GoogleCloudIntegrationsV1alphaCredential withOauth2ResourceOwnerCredentials(GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials oauth2ResourceOwnerCredentials) {
        this.oauth2ResourceOwnerCredentials = oauth2ResourceOwnerCredentials;
        return this;
    }
    
    /**
     * OIDC Token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("oidcToken")
    public GoogleCloudIntegrationsV1alphaOidcToken oidcToken;
    public GoogleCloudIntegrationsV1alphaCredential withOidcToken(GoogleCloudIntegrationsV1alphaOidcToken oidcToken) {
        this.oidcToken = oidcToken;
        return this;
    }
    
    /**
     * Represents the service account which can be used to generate access token for authenticating the service call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAccountCredentials")
    public GoogleCloudIntegrationsV1alphaServiceAccountCredentials serviceAccountCredentials;
    public GoogleCloudIntegrationsV1alphaCredential withServiceAccountCredentials(GoogleCloudIntegrationsV1alphaServiceAccountCredentials serviceAccountCredentials) {
        this.serviceAccountCredentials = serviceAccountCredentials;
        return this;
    }
    
    /**
     * Username and password pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usernameAndPassword")
    public GoogleCloudIntegrationsV1alphaUsernameAndPassword usernameAndPassword;
    public GoogleCloudIntegrationsV1alphaCredential withUsernameAndPassword(GoogleCloudIntegrationsV1alphaUsernameAndPassword usernameAndPassword) {
        this.usernameAndPassword = usernameAndPassword;
        return this;
    }
    
}
