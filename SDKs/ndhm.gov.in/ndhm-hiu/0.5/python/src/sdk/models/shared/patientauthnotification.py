"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import accesstokenvalidity as shared_accesstokenvalidity
from ..shared import patientdemographicresponse as shared_patientdemographicresponse
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class PatientAuthNotificationAuthStatusEnum(str, Enum):
    GRANTED = 'GRANTED'
    DENIED = 'DENIED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAuthNotificationAuth:
    r"""depending on the purpose of auth, as specified in /auth/init, the response may include the following
      1. LINK - only returns **accessToken**
      2. KYC - only returns **patient**
      3. KYC_AND_LINK - returns both **accessToken** and **patient**
    """
    
    status: PatientAuthNotificationAuthStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    transaction_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transactionId') }})
    r"""transaction id for auth session"""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessToken'), 'exclude': lambda f: f is None }})
    r"""access token for initialization of subsequent action."""  
    patient: Optional[shared_patientdemographicresponse.PatientDemographicResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patient'), 'exclude': lambda f: f is None }})  
    validity: Optional[shared_accesstokenvalidity.AccessTokenValidity] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validity'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PatientAuthNotification:
    
    request_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId') }})
    r"""a nonce, unique for each HTTP request"""  
    timestamp: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ"""  
    auth: Optional[PatientAuthNotificationAuth] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('auth'), 'exclude': lambda f: f is None }})
    r"""depending on the purpose of auth, as specified in /auth/init, the response may include the following
      1. LINK - only returns **accessToken**
      2. KYC - only returns **patient**
      3. KYC_AND_LINK - returns both **accessToken** and **patient**
    """  
    