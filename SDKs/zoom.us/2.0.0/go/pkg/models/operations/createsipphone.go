// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type CreateSIPPhoneSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

// CreateSIPPhoneApplicationJSONTransportProtocolEnum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type CreateSIPPhoneApplicationJSONTransportProtocolEnum string

const (
	CreateSIPPhoneApplicationJSONTransportProtocolEnumUDP  CreateSIPPhoneApplicationJSONTransportProtocolEnum = "UDP"
	CreateSIPPhoneApplicationJSONTransportProtocolEnumTCP  CreateSIPPhoneApplicationJSONTransportProtocolEnum = "TCP"
	CreateSIPPhoneApplicationJSONTransportProtocolEnumTLS  CreateSIPPhoneApplicationJSONTransportProtocolEnum = "TLS"
	CreateSIPPhoneApplicationJSONTransportProtocolEnumAuto CreateSIPPhoneApplicationJSONTransportProtocolEnum = "AUTO"
)

func (e *CreateSIPPhoneApplicationJSONTransportProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = CreateSIPPhoneApplicationJSONTransportProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSIPPhoneApplicationJSONTransportProtocolEnum: %s", s)
	}
}

// CreateSIPPhoneApplicationJSONTransportProtocol2Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type CreateSIPPhoneApplicationJSONTransportProtocol2Enum string

const (
	CreateSIPPhoneApplicationJSONTransportProtocol2EnumUDP  CreateSIPPhoneApplicationJSONTransportProtocol2Enum = "UDP"
	CreateSIPPhoneApplicationJSONTransportProtocol2EnumTCP  CreateSIPPhoneApplicationJSONTransportProtocol2Enum = "TCP"
	CreateSIPPhoneApplicationJSONTransportProtocol2EnumTLS  CreateSIPPhoneApplicationJSONTransportProtocol2Enum = "TLS"
	CreateSIPPhoneApplicationJSONTransportProtocol2EnumAuto CreateSIPPhoneApplicationJSONTransportProtocol2Enum = "AUTO"
)

func (e *CreateSIPPhoneApplicationJSONTransportProtocol2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = CreateSIPPhoneApplicationJSONTransportProtocol2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSIPPhoneApplicationJSONTransportProtocol2Enum: %s", s)
	}
}

// CreateSIPPhoneApplicationJSONTransportProtocol3Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type CreateSIPPhoneApplicationJSONTransportProtocol3Enum string

const (
	CreateSIPPhoneApplicationJSONTransportProtocol3EnumUDP  CreateSIPPhoneApplicationJSONTransportProtocol3Enum = "UDP"
	CreateSIPPhoneApplicationJSONTransportProtocol3EnumTCP  CreateSIPPhoneApplicationJSONTransportProtocol3Enum = "TCP"
	CreateSIPPhoneApplicationJSONTransportProtocol3EnumTLS  CreateSIPPhoneApplicationJSONTransportProtocol3Enum = "TLS"
	CreateSIPPhoneApplicationJSONTransportProtocol3EnumAuto CreateSIPPhoneApplicationJSONTransportProtocol3Enum = "AUTO"
)

func (e *CreateSIPPhoneApplicationJSONTransportProtocol3Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = CreateSIPPhoneApplicationJSONTransportProtocol3Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSIPPhoneApplicationJSONTransportProtocol3Enum: %s", s)
	}
}

type CreateSIPPhoneApplicationJSON struct {
	// Authorization name of the user  registered for SIP Phone.
	AuthorizationName string `json:"authorization_name"`
	// The name or IP address of your providerâ€™s SIP domain. (example: CDC.WEB).
	Domain string `json:"domain"`
	// The password generated for the user in the SIP account.
	Password string `json:"password"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
	ProxyServer string `json:"proxy_server"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer2 *string `json:"proxy_server2,omitempty"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer3 *string `json:"proxy_server3,omitempty"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer string `json:"register_server"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer2 *string `json:"register_server2,omitempty"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer3 *string `json:"register_server3,omitempty"`
	// The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
	RegistrationExpireTime *int64 `json:"registration_expire_time,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol *CreateSIPPhoneApplicationJSONTransportProtocolEnum `json:"transport_protocol,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol2 *CreateSIPPhoneApplicationJSONTransportProtocol2Enum `json:"transport_protocol2,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol3 *CreateSIPPhoneApplicationJSONTransportProtocol3Enum `json:"transport_protocol3,omitempty"`
	// The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user.
	UserEmail string `json:"user_email"`
	// The phone number associated with the user in the SIP account.
	UserName string `json:"user_name"`
	// The number to dial for checking voicemail.
	VoiceMail string `json:"voice_mail"`
}

type CreateSIPPhoneRequest struct {
	Request  *CreateSIPPhoneApplicationJSON `request:"mediaType=application/json"`
	Security CreateSIPPhoneSecurity
}

type CreateSIPPhoneResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
