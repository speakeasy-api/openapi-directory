"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendServiceLogConfig = exports.BackendServiceLogConfigOptionalModeEnum = exports.BackendServiceLogConfigOptionalEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Deprecated in favor of optionalMode. This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.
 */
var BackendServiceLogConfigOptionalEnum;
(function (BackendServiceLogConfigOptionalEnum) {
    BackendServiceLogConfigOptionalEnum["Custom"] = "CUSTOM";
    BackendServiceLogConfigOptionalEnum["ExcludeAllOptional"] = "EXCLUDE_ALL_OPTIONAL";
    BackendServiceLogConfigOptionalEnum["IncludeAllOptional"] = "INCLUDE_ALL_OPTIONAL";
    BackendServiceLogConfigOptionalEnum["UnspecifiedOptionalMode"] = "UNSPECIFIED_OPTIONAL_MODE";
})(BackendServiceLogConfigOptionalEnum = exports.BackendServiceLogConfigOptionalEnum || (exports.BackendServiceLogConfigOptionalEnum = {}));
/**
 * This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.
 */
var BackendServiceLogConfigOptionalModeEnum;
(function (BackendServiceLogConfigOptionalModeEnum) {
    BackendServiceLogConfigOptionalModeEnum["Custom"] = "CUSTOM";
    BackendServiceLogConfigOptionalModeEnum["ExcludeAllOptional"] = "EXCLUDE_ALL_OPTIONAL";
    BackendServiceLogConfigOptionalModeEnum["IncludeAllOptional"] = "INCLUDE_ALL_OPTIONAL";
    BackendServiceLogConfigOptionalModeEnum["UnspecifiedOptionalMode"] = "UNSPECIFIED_OPTIONAL_MODE";
})(BackendServiceLogConfigOptionalModeEnum = exports.BackendServiceLogConfigOptionalModeEnum || (exports.BackendServiceLogConfigOptionalModeEnum = {}));
/**
 * The available logging options for the load balancer traffic served by this backend service.
 */
var BackendServiceLogConfig = /** @class */ (function (_super) {
    __extends(BackendServiceLogConfig, _super);
    function BackendServiceLogConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "enable" }),
        __metadata("design:type", Boolean)
    ], BackendServiceLogConfig.prototype, "enable", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "optional" }),
        __metadata("design:type", String)
    ], BackendServiceLogConfig.prototype, "optional", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "optionalFields" }),
        __metadata("design:type", Array)
    ], BackendServiceLogConfig.prototype, "optionalFields", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "optionalMode" }),
        __metadata("design:type", String)
    ], BackendServiceLogConfig.prototype, "optionalMode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sampleRate" }),
        __metadata("design:type", Number)
    ], BackendServiceLogConfig.prototype, "sampleRate", void 0);
    return BackendServiceLogConfig;
}(utils_1.SpeakeasyBase));
exports.BackendServiceLogConfig = BackendServiceLogConfig;
