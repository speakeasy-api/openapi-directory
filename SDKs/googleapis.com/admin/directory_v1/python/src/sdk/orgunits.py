"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Orgunits:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_orgunits_delete(self, request: operations.DirectoryOrgunitsDeleteRequest, security: operations.DirectoryOrgunitsDeleteSecurity) -> operations.DirectoryOrgunitsDeleteResponse:
        r"""Removes an organizational unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsDeleteRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}', request)
        
        query_params = utils.get_query_params(operations.DirectoryOrgunitsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_orgunits_get(self, request: operations.DirectoryOrgunitsGetRequest, security: operations.DirectoryOrgunitsGetSecurity) -> operations.DirectoryOrgunitsGetResponse:
        r"""Retrieves an organizational unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsGetRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}', request)
        
        query_params = utils.get_query_params(operations.DirectoryOrgunitsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgUnit])
                res.org_unit = out

        return res

    def directory_orgunits_insert(self, request: operations.DirectoryOrgunitsInsertRequest, security: operations.DirectoryOrgunitsInsertSecurity) -> operations.DirectoryOrgunitsInsertResponse:
        r"""Adds an organizational unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsInsertRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "org_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryOrgunitsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgUnit])
                res.org_unit = out

        return res

    def directory_orgunits_list(self, request: operations.DirectoryOrgunitsListRequest, security: operations.DirectoryOrgunitsListSecurity) -> operations.DirectoryOrgunitsListResponse:
        r"""Retrieves a list of all organizational units for an account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsListRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits', request)
        
        query_params = utils.get_query_params(operations.DirectoryOrgunitsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgUnits])
                res.org_units = out

        return res

    def directory_orgunits_patch(self, request: operations.DirectoryOrgunitsPatchRequest, security: operations.DirectoryOrgunitsPatchSecurity) -> operations.DirectoryOrgunitsPatchResponse:
        r"""Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsPatchRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "org_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryOrgunitsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgUnit])
                res.org_unit = out

        return res

    def directory_orgunits_update(self, request: operations.DirectoryOrgunitsUpdateRequest, security: operations.DirectoryOrgunitsUpdateSecurity) -> operations.DirectoryOrgunitsUpdateResponse:
        r"""Updates an organizational unit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectoryOrgunitsUpdateRequest, base_url, '/admin/directory/v1/customer/{customerId}/orgunits/{orgUnitPath}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "org_unit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectoryOrgunitsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectoryOrgunitsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrgUnit])
                res.org_unit = out

        return res

    