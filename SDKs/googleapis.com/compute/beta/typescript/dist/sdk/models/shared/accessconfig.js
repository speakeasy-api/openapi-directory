"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessConfig = exports.AccessConfigTypeEnum = exports.AccessConfigNetworkTierEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
 */
var AccessConfigNetworkTierEnum;
(function (AccessConfigNetworkTierEnum) {
    AccessConfigNetworkTierEnum["FixedStandard"] = "FIXED_STANDARD";
    AccessConfigNetworkTierEnum["Premium"] = "PREMIUM";
    AccessConfigNetworkTierEnum["Standard"] = "STANDARD";
    AccessConfigNetworkTierEnum["StandardOverridesFixedStandard"] = "STANDARD_OVERRIDES_FIXED_STANDARD";
})(AccessConfigNetworkTierEnum = exports.AccessConfigNetworkTierEnum || (exports.AccessConfigNetworkTierEnum = {}));
/**
 * The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6.
 */
var AccessConfigTypeEnum;
(function (AccessConfigTypeEnum) {
    AccessConfigTypeEnum["DirectIpv6"] = "DIRECT_IPV6";
    AccessConfigTypeEnum["OneToOneNat"] = "ONE_TO_ONE_NAT";
})(AccessConfigTypeEnum = exports.AccessConfigTypeEnum || (exports.AccessConfigTypeEnum = {}));
/**
 * An access configuration attached to an instance's network interface. Only one access config per instance is supported.
 */
var AccessConfig = /** @class */ (function (_super) {
    __extends(AccessConfig, _super);
    function AccessConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIpv6" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "externalIpv6", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "externalIpv6PrefixLength" }),
        __metadata("design:type", Number)
    ], AccessConfig.prototype, "externalIpv6PrefixLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "natIP" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "natIP", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkTier" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "networkTier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "publicPtrDomainName" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "publicPtrDomainName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "setPublicPtr" }),
        __metadata("design:type", Boolean)
    ], AccessConfig.prototype, "setPublicPtr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], AccessConfig.prototype, "type", void 0);
    return AccessConfig;
}(utils_1.SpeakeasyBase));
exports.AccessConfig = AccessConfig;
