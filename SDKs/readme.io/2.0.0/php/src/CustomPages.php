<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class CustomPages 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create custom page
     * 
     * Create a new custom page inside of this project
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CustomPage $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCustomPageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCustomPageResponse
     */
	public function createCustomPage(
        \OpenAPI\OpenAPI\Models\Shared\CustomPage $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCustomPageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCustomPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/custompages');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCustomPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201 or $httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Delete custom page
     * 
     * Delete the custom page with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageResponse
     */
	public function deleteCustomPage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/custompages/{slug}', \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCustomPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get custom page
     * 
     * Returns the custom page with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomPageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomPageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomPageResponse
     */
	public function getCustomPage(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomPageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCustomPageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/custompages/{slug}', \OpenAPI\OpenAPI\Models\Operations\GetCustomPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get custom pages
     * 
     * Returns a list of custom pages associated with the project API key
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesResponse
     */
	public function getCustomPages(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/custompages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCustomPagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomPagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
        }

        return $response;
    }
	
    /**
     * Update custom page
     * 
     * Update a custom page with this slug
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageResponse
     */
	public function updateCustomPage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/custompages/{slug}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customPage", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomPageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}