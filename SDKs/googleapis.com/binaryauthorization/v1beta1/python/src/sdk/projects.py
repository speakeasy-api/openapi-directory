"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def binaryauthorization_projects_attestors_create(self, request: operations.BinaryauthorizationProjectsAttestorsCreateRequest, security: operations.BinaryauthorizationProjectsAttestorsCreateSecurity) -> operations.BinaryauthorizationProjectsAttestorsCreateResponse:
        r"""Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsAttestorsCreateRequest, base_url, '/v1beta1/{parent}/attestors', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "attestor_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsAttestorsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsAttestorsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attestor])
                res.attestor = out

        return res

    def binaryauthorization_projects_attestors_delete(self, request: operations.BinaryauthorizationProjectsAttestorsDeleteRequest, security: operations.BinaryauthorizationProjectsAttestorsDeleteSecurity) -> operations.BinaryauthorizationProjectsAttestorsDeleteResponse:
        r"""Deletes an attestor. Returns NOT_FOUND if the attestor does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsAttestorsDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsAttestorsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsAttestorsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def binaryauthorization_projects_attestors_list(self, request: operations.BinaryauthorizationProjectsAttestorsListRequest, security: operations.BinaryauthorizationProjectsAttestorsListSecurity) -> operations.BinaryauthorizationProjectsAttestorsListResponse:
        r"""Lists attestors. Returns INVALID_ARGUMENT if the project does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsAttestorsListRequest, base_url, '/v1beta1/{parent}/attestors', request)
        
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsAttestorsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsAttestorsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAttestorsResponse])
                res.list_attestors_response = out

        return res

    def binaryauthorization_projects_attestors_update(self, request: operations.BinaryauthorizationProjectsAttestorsUpdateRequest, security: operations.BinaryauthorizationProjectsAttestorsUpdateSecurity) -> operations.BinaryauthorizationProjectsAttestorsUpdateResponse:
        r"""Updates an attestor. Returns NOT_FOUND if the attestor does not exist."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsAttestorsUpdateRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "attestor_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsAttestorsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsAttestorsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Attestor])
                res.attestor = out

        return res

    def binaryauthorization_projects_attestors_validate_attestation_occurrence(self, request: operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest, security: operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceSecurity) -> operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse:
        r"""Returns whether the given Attestation for the given image URI was signed by the given Attestor"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest, base_url, '/v1beta1/{attestor}:validateAttestationOccurrence', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "validate_attestation_occurrence_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsAttestorsValidateAttestationOccurrenceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidateAttestationOccurrenceResponse])
                res.validate_attestation_occurrence_response = out

        return res

    def binaryauthorization_projects_policy_get_iam_policy(self, request: operations.BinaryauthorizationProjectsPolicyGetIamPolicyRequest, security: operations.BinaryauthorizationProjectsPolicyGetIamPolicySecurity) -> operations.BinaryauthorizationProjectsPolicyGetIamPolicyResponse:
        r"""Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsPolicyGetIamPolicyRequest, base_url, '/v1beta1/{resource}:getIamPolicy', request)
        
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsPolicyGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsPolicyGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IamPolicy])
                res.iam_policy = out

        return res

    def binaryauthorization_projects_policy_set_iam_policy(self, request: operations.BinaryauthorizationProjectsPolicySetIamPolicyRequest, security: operations.BinaryauthorizationProjectsPolicySetIamPolicySecurity) -> operations.BinaryauthorizationProjectsPolicySetIamPolicyResponse:
        r"""Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsPolicySetIamPolicyRequest, base_url, '/v1beta1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsPolicySetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsPolicySetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.IamPolicy])
                res.iam_policy = out

        return res

    def binaryauthorization_projects_policy_test_iam_permissions(self, request: operations.BinaryauthorizationProjectsPolicyTestIamPermissionsRequest, security: operations.BinaryauthorizationProjectsPolicyTestIamPermissionsSecurity) -> operations.BinaryauthorizationProjectsPolicyTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \\"fail open\\" without warning."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.BinaryauthorizationProjectsPolicyTestIamPermissionsRequest, base_url, '/v1beta1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.BinaryauthorizationProjectsPolicyTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BinaryauthorizationProjectsPolicyTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    