/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Defines the Amazon Braket job to be created. Specifies the container image the job uses and the paths to the Python scripts used for entry and training.
 */
export class CreateJobRequestBodyAlgorithmSpecification extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "containerImage" })
  @Type(() => shared.ContainerImage)
  containerImage?: shared.ContainerImage;

  @SpeakeasyMetadata()
  @Expose({ name: "scriptModeConfig" })
  @Type(() => shared.ScriptModeConfig)
  scriptModeConfig?: shared.ScriptModeConfig;
}

/**
 * Contains information about the output locations for job checkpoint data.
 */
export class CreateJobRequestBodyCheckpointConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "localPath" })
  localPath?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "s3Uri" })
  s3Uri?: string;
}

/**
 * Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job.
 */
export class CreateJobRequestBodyDeviceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "device" })
  device?: string;
}

/**
 * Configures the resource instances to use while running the Amazon Braket hybrid job on Amazon Braket.
 */
export class CreateJobRequestBodyInstanceConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "instanceCount" })
  instanceCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "instanceType" })
  instanceType?: shared.InstanceTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "volumeSizeInGb" })
  volumeSizeInGb?: number;
}

/**
 * Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them.
 */
export class CreateJobRequestBodyOutputDataConfig extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "kmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "s3Path" })
  s3Path?: string;
}

/**
 * Specifies limits for how long an Amazon Braket job can run.
 */
export class CreateJobRequestBodyStoppingCondition extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "maxRuntimeInSeconds" })
  maxRuntimeInSeconds?: number;
}

export class CreateJobRequestBody extends SpeakeasyBase {
  /**
   * Defines the Amazon Braket job to be created. Specifies the container image the job uses and the paths to the Python scripts used for entry and training.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "algorithmSpecification" })
  @Type(() => CreateJobRequestBodyAlgorithmSpecification)
  algorithmSpecification: CreateJobRequestBodyAlgorithmSpecification;

  /**
   * Contains information about the output locations for job checkpoint data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "checkpointConfig" })
  @Type(() => CreateJobRequestBodyCheckpointConfig)
  checkpointConfig?: CreateJobRequestBodyCheckpointConfig;

  /**
   * A unique token that guarantees that the call to this API is idempotent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientToken" })
  clientToken: string;

  /**
   * Configures the quantum processing units (QPUs) or simulator used to create and run an Amazon Braket job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deviceConfig" })
  @Type(() => CreateJobRequestBodyDeviceConfig)
  deviceConfig: CreateJobRequestBodyDeviceConfig;

  /**
   * Algorithm-specific parameters used by an Amazon Braket job that influence the quality of the training job. The values are set with a string of JSON key:value pairs, where the key is the name of the hyperparameter and the value is the value of th hyperparameter.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hyperParameters" })
  hyperParameters?: Record<string, string>;

  /**
   * A list of parameters that specify the name and type of input data and where it is located.
   */
  @SpeakeasyMetadata({ elemType: shared.InputFileConfig })
  @Expose({ name: "inputDataConfig" })
  @Type(() => shared.InputFileConfig)
  inputDataConfig?: shared.InputFileConfig[];

  /**
   * Configures the resource instances to use while running the Amazon Braket hybrid job on Amazon Braket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceConfig" })
  @Type(() => CreateJobRequestBodyInstanceConfig)
  instanceConfig: CreateJobRequestBodyInstanceConfig;

  /**
   * The name of the Amazon Braket job.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jobName" })
  jobName: string;

  /**
   * Specifies the path to the S3 location where you want to store job artifacts and the encryption key used to store them.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "outputDataConfig" })
  @Type(() => CreateJobRequestBodyOutputDataConfig)
  outputDataConfig: CreateJobRequestBodyOutputDataConfig;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that Amazon Braket can assume to perform tasks on behalf of a user. It can access user resources, run an Amazon Braket job container on behalf of user, and output resources to the users' s3 buckets.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn: string;

  /**
   * Specifies limits for how long an Amazon Braket job can run.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stoppingCondition" })
  @Type(() => CreateJobRequestBodyStoppingCondition)
  stoppingCondition?: CreateJobRequestBodyStoppingCondition;

  /**
   * A tag object that consists of a key and an optional value, used to manage metadata for Amazon Braket resources.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;
}

export class CreateJobRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateJobRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class CreateJobResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createJobResponse?: shared.CreateJobResponse;

  /**
   * DeviceRetiredException
   */
  @SpeakeasyMetadata()
  deviceRetiredException?: any;

  /**
   * InternalServiceException
   */
  @SpeakeasyMetadata()
  internalServiceException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
