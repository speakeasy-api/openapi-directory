"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import classification as shared_classification
from ..shared import links as shared_links
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class GetClassificationsSecurity:
    
    api_key: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'Authorization' }})  
    
class GetClassificationsSortEnum(str, Enum):
    CREATED_AT = 'created_at'
    UPDATED_AT = 'updated_at'
    VALUE = 'value'

class GetClassificationsTypeEnum(str, Enum):
    r"""Limit the result to classifications of this type. The possible values for types
    depends on the privileges of the provided credential.
    """
    ALTERNATE_FEED_TYPE = 'AlternateFeedType'
    GENRE = 'Genre'
    INDUSTRY = 'Industry'
    LANGUAGE = 'Language'
    MEDIA_RATING = 'MediaRating'


@dataclasses.dataclass
class GetClassificationsRequest:
    
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'ids[]', 'style': 'form', 'explode': True }})
    r"""The list of IDs to filter by. Repeat this parameter for each ID you want to include in the filter.
    The brackets *MUST* be percent-encoded, per the requirements in
    [RFC 3986 § 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
    """  
    is_country: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'is_country', 'style': 'form', 'explode': True }})
    r"""If this parameter is provided and not empty, limit the result to classifications
    of type `Geography` representing countries. The credential must have at least one
    privilege with a network, series, or advertiser profile.
    """  
    page_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[number]', 'style': 'form', 'explode': True }})
    r"""Select which page number to receive results for. Pages are numbered starting at 1."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page[size]', 'style': 'form', 'explode': True }})
    r"""Indicate how many records to return per page. The maximum is 100."""  
    q: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Limit the result to classifications with a value containing the parameter value
    disregarding case.
    """  
    sort: Optional[list[GetClassificationsSortEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': False }})
    r"""Specify how to sort the result. Please refer to either the top section or the
    [JSON:API specification](https://jsonapi.org/format/#fetching-sorting) on how sorting works in general.
    """  
    type: Optional[GetClassificationsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Limit the result to classifications of this type. The possible values for types
    depends on the privileges of the provided credential.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClassifications400ApplicationVndAPIPlusJSONErrorsSource:
    r"""An object containing references to the source of the error, optionally including any of the following members."""
    
    parameter: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameter'), 'exclude': lambda f: f is None }})
    r"""A string indicating which URI query parameter caused the error."""  
    pointer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pointer'), 'exclude': lambda f: f is None }})
    r"""A JSON Pointer [RFC6901](https://tools.ietf.org/html/rfc6901) to the associated entity in the request document (e.g. `/data` for a primary data object, or `/data/attributes/title` for a specific attribute)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClassifications400ApplicationVndAPIPlusJSONErrors:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""An application-specific error code, expressed as a string value"""  
    detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detail'), 'exclude': lambda f: f is None }})
    r"""A human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized."""  
    source: Optional[GetClassifications400ApplicationVndAPIPlusJSONErrorsSource] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source'), 'exclude': lambda f: f is None }})
    r"""An object containing references to the source of the error, optionally including any of the following members."""  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The HTTP status code applicable to this problem, expressed as a string value: 400"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the
    problem, except for purposes of localization.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClassifications400ApplicationVndAPIPlusJSON:
    r"""Bad Request
    
    Parameters requiring a specific format must adhere to that format.
    Pagination must have a positive page number and a page size no larger than 100. Filtering by type for AudienceSegment, AudienceTag, ListeningPlatform, and UserDevice is no longer supported.
    """
    
    errors: Optional[list[GetClassifications400ApplicationVndAPIPlusJSONErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""An error object describing the problem. Please check out the
    [JSON:API Error document reference](https://jsonapi.org/format/#error-objects) for a full
    description of the returned object.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetClassifications200ApplicationVndAPIPlusJSON:
    r"""Success"""
    
    data: Optional[list[shared_classification.Classification]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})  
    links: Optional[shared_links.Links] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class GetClassificationsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_classifications_200_application_vnd_api_plus_json_object: Optional[GetClassifications200ApplicationVndAPIPlusJSON] = dataclasses.field(default=None)
    r"""Success"""  
    get_classifications_400_application_vnd_api_plus_json_object: Optional[GetClassifications400ApplicationVndAPIPlusJSON] = dataclasses.field(default=None)
    r"""Bad Request
    
    Parameters requiring a specific format must adhere to that format.
    Pagination must have a positive page number and a page size no larger than 100. Filtering by type for AudienceSegment, AudienceTag, ListeningPlatform, and UserDevice is no longer supported.
    """  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    