// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type UpdateSIPPhoneSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type UpdateSIPPhonePathParams struct {
	// Unique Identifier of the SIP Phone. This can be retrieved from the List SIP Phones API.
	PhoneID string `pathParam:"style=simple,explode=false,name=phoneId"`
}

// UpdateSIPPhoneApplicationJSONTransportProtocolEnum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type UpdateSIPPhoneApplicationJSONTransportProtocolEnum string

const (
	UpdateSIPPhoneApplicationJSONTransportProtocolEnumUDP  UpdateSIPPhoneApplicationJSONTransportProtocolEnum = "UDP"
	UpdateSIPPhoneApplicationJSONTransportProtocolEnumTCP  UpdateSIPPhoneApplicationJSONTransportProtocolEnum = "TCP"
	UpdateSIPPhoneApplicationJSONTransportProtocolEnumTLS  UpdateSIPPhoneApplicationJSONTransportProtocolEnum = "TLS"
	UpdateSIPPhoneApplicationJSONTransportProtocolEnumAuto UpdateSIPPhoneApplicationJSONTransportProtocolEnum = "AUTO"
)

func (e *UpdateSIPPhoneApplicationJSONTransportProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = UpdateSIPPhoneApplicationJSONTransportProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSIPPhoneApplicationJSONTransportProtocolEnum: %s", s)
	}
}

// UpdateSIPPhoneApplicationJSONTransportProtocol2Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type UpdateSIPPhoneApplicationJSONTransportProtocol2Enum string

const (
	UpdateSIPPhoneApplicationJSONTransportProtocol2EnumUDP  UpdateSIPPhoneApplicationJSONTransportProtocol2Enum = "UDP"
	UpdateSIPPhoneApplicationJSONTransportProtocol2EnumTCP  UpdateSIPPhoneApplicationJSONTransportProtocol2Enum = "TCP"
	UpdateSIPPhoneApplicationJSONTransportProtocol2EnumTLS  UpdateSIPPhoneApplicationJSONTransportProtocol2Enum = "TLS"
	UpdateSIPPhoneApplicationJSONTransportProtocol2EnumAuto UpdateSIPPhoneApplicationJSONTransportProtocol2Enum = "AUTO"
)

func (e *UpdateSIPPhoneApplicationJSONTransportProtocol2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = UpdateSIPPhoneApplicationJSONTransportProtocol2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSIPPhoneApplicationJSONTransportProtocol2Enum: %s", s)
	}
}

// UpdateSIPPhoneApplicationJSONTransportProtocol3Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type UpdateSIPPhoneApplicationJSONTransportProtocol3Enum string

const (
	UpdateSIPPhoneApplicationJSONTransportProtocol3EnumUDP  UpdateSIPPhoneApplicationJSONTransportProtocol3Enum = "UDP"
	UpdateSIPPhoneApplicationJSONTransportProtocol3EnumTCP  UpdateSIPPhoneApplicationJSONTransportProtocol3Enum = "TCP"
	UpdateSIPPhoneApplicationJSONTransportProtocol3EnumTLS  UpdateSIPPhoneApplicationJSONTransportProtocol3Enum = "TLS"
	UpdateSIPPhoneApplicationJSONTransportProtocol3EnumAuto UpdateSIPPhoneApplicationJSONTransportProtocol3Enum = "AUTO"
)

func (e *UpdateSIPPhoneApplicationJSONTransportProtocol3Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = UpdateSIPPhoneApplicationJSONTransportProtocol3Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSIPPhoneApplicationJSONTransportProtocol3Enum: %s", s)
	}
}

type UpdateSIPPhoneApplicationJSON struct {
	// Authorization name of the user  registered for SIP Phone.
	AuthorizationName string `json:"authorization_name"`
	// The name or IP address of your providerâ€™s SIP domain. (example: CDC.WEB).
	Domain string `json:"domain"`
	// The password generated for the user in the SIP account.
	Password string `json:"password"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
	ProxyServer string `json:"proxy_server"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
	ProxyServer2 string `json:"proxy_server2"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server.
	ProxyServer3 string `json:"proxy_server3"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer string `json:"register_server"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer2 string `json:"register_server2"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer3 string `json:"register_server3"`
	// The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
	RegistrationExpireTime *int64 `json:"registration_expire_time,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol *UpdateSIPPhoneApplicationJSONTransportProtocolEnum `json:"transport_protocol,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol2 *UpdateSIPPhoneApplicationJSONTransportProtocol2Enum `json:"transport_protocol2,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol3 *UpdateSIPPhoneApplicationJSONTransportProtocol3Enum `json:"transport_protocol3,omitempty"`
	// The phone number associated with the user in the SIP account.
	UserName string `json:"user_name"`
	// The number to dial for checking voicemail.
	VoiceMail string `json:"voice_mail"`
}

type UpdateSIPPhoneRequest struct {
	PathParams UpdateSIPPhonePathParams
	Request    *UpdateSIPPhoneApplicationJSON `request:"mediaType=application/json"`
	Security   UpdateSIPPhoneSecurity
}

type UpdateSIPPhoneResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `204`<br>
	// SIP Phone information updated successfully.
	//
	UpdateSIPPhone204ApplicationJSONObject map[string]interface{}
}
