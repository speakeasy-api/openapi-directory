// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UpdateMerchantWebhookRequestCommunicationFormatEnum - Format or protocol for receiving webhooks. Possible values:
// * **soap**
// * **http**
// * **json**
type UpdateMerchantWebhookRequestCommunicationFormatEnum string

const (
	UpdateMerchantWebhookRequestCommunicationFormatEnumHTTP UpdateMerchantWebhookRequestCommunicationFormatEnum = "HTTP"
	UpdateMerchantWebhookRequestCommunicationFormatEnumJSON UpdateMerchantWebhookRequestCommunicationFormatEnum = "JSON"
	UpdateMerchantWebhookRequestCommunicationFormatEnumSoap UpdateMerchantWebhookRequestCommunicationFormatEnum = "SOAP"
)

func (e *UpdateMerchantWebhookRequestCommunicationFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "JSON":
		fallthrough
	case "SOAP":
		*e = UpdateMerchantWebhookRequestCommunicationFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMerchantWebhookRequestCommunicationFormatEnum: %s", s)
	}
}

// UpdateMerchantWebhookRequestNetworkTypeEnum - Network type for Terminal API notification webhooks. Possible values:
// * **public**
// * **local**
//
// Default Value: **public**.
type UpdateMerchantWebhookRequestNetworkTypeEnum string

const (
	UpdateMerchantWebhookRequestNetworkTypeEnumLocal  UpdateMerchantWebhookRequestNetworkTypeEnum = "LOCAL"
	UpdateMerchantWebhookRequestNetworkTypeEnumPublic UpdateMerchantWebhookRequestNetworkTypeEnum = "PUBLIC"
)

func (e *UpdateMerchantWebhookRequestNetworkTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOCAL":
		fallthrough
	case "PUBLIC":
		*e = UpdateMerchantWebhookRequestNetworkTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMerchantWebhookRequestNetworkTypeEnum: %s", s)
	}
}

// UpdateMerchantWebhookRequestSslVersionEnum - SSL version to access the public webhook URL specified in the `url` field. Possible values:
// * **TLSv1.3**
// * **TLSv1.2**
// * **HTTP** - Only allowed on Test environment.
//
// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
type UpdateMerchantWebhookRequestSslVersionEnum string

const (
	UpdateMerchantWebhookRequestSslVersionEnumHTTP                 UpdateMerchantWebhookRequestSslVersionEnum = "HTTP"
	UpdateMerchantWebhookRequestSslVersionEnumSsl                  UpdateMerchantWebhookRequestSslVersionEnum = "SSL"
	UpdateMerchantWebhookRequestSslVersionEnumSslv3                UpdateMerchantWebhookRequestSslVersionEnum = "SSLV3"
	UpdateMerchantWebhookRequestSslVersionEnumSslInsecureCiphers   UpdateMerchantWebhookRequestSslVersionEnum = "SSL_INSECURE_CIPHERS"
	UpdateMerchantWebhookRequestSslVersionEnumTLS                  UpdateMerchantWebhookRequestSslVersionEnum = "TLS"
	UpdateMerchantWebhookRequestSslVersionEnumTlsv1                UpdateMerchantWebhookRequestSslVersionEnum = "TLSV1"
	UpdateMerchantWebhookRequestSslVersionEnumTlsv11               UpdateMerchantWebhookRequestSslVersionEnum = "TLSV1_1"
	UpdateMerchantWebhookRequestSslVersionEnumTlsv12               UpdateMerchantWebhookRequestSslVersionEnum = "TLSV1_2"
	UpdateMerchantWebhookRequestSslVersionEnumTlsv13               UpdateMerchantWebhookRequestSslVersionEnum = "TLSV1_3"
	UpdateMerchantWebhookRequestSslVersionEnumTlsv1InsecureCiphers UpdateMerchantWebhookRequestSslVersionEnum = "TLSV1_INSECURE_CIPHERS"
)

func (e *UpdateMerchantWebhookRequestSslVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HTTP":
		fallthrough
	case "SSL":
		fallthrough
	case "SSLV3":
		fallthrough
	case "SSL_INSECURE_CIPHERS":
		fallthrough
	case "TLS":
		fallthrough
	case "TLSV1":
		fallthrough
	case "TLSV1_1":
		fallthrough
	case "TLSV1_2":
		fallthrough
	case "TLSV1_3":
		fallthrough
	case "TLSV1_INSECURE_CIPHERS":
		*e = UpdateMerchantWebhookRequestSslVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateMerchantWebhookRequestSslVersionEnum: %s", s)
	}
}

type UpdateMerchantWebhookRequest struct {
	// Indicates if expired SSL certificates are accepted. Default value: **false**.
	AcceptsExpiredCertificate *bool `json:"acceptsExpiredCertificate,omitempty"`
	// Indicates if self-signed SSL certificates are accepted. Default value: **false**.
	AcceptsSelfSignedCertificate *bool `json:"acceptsSelfSignedCertificate,omitempty"`
	// Indicates if untrusted SSL certificates are accepted. Default value: **false**.
	AcceptsUntrustedRootCertificate *bool `json:"acceptsUntrustedRootCertificate,omitempty"`
	// Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.
	Active             bool                `json:"active"`
	AdditionalSettings *AdditionalSettings `json:"additionalSettings,omitempty"`
	// Format or protocol for receiving webhooks. Possible values:
	// * **soap**
	// * **http**
	// * **json**
	CommunicationFormat UpdateMerchantWebhookRequestCommunicationFormatEnum `json:"communicationFormat"`
	// Your description for this webhook configuration.
	Description *string `json:"description,omitempty"`
	// Network type for Terminal API notification webhooks. Possible values:
	// * **public**
	// * **local**
	//
	// Default Value: **public**.
	NetworkType *UpdateMerchantWebhookRequestNetworkTypeEnum `json:"networkType,omitempty"`
	// Password to access the webhook URL.
	Password *string `json:"password,omitempty"`
	// Indicates if the SOAP action header needs to be populated. Default value: **false**.
	//
	// Only applies if `communicationFormat`: **soap**.
	PopulateSoapActionHeader *bool `json:"populateSoapActionHeader,omitempty"`
	// SSL version to access the public webhook URL specified in the `url` field. Possible values:
	// * **TLSv1.3**
	// * **TLSv1.2**
	// * **HTTP** - Only allowed on Test environment.
	//
	// If not specified, the webhook will use `sslVersion`: **TLSv1.2**.
	SslVersion *UpdateMerchantWebhookRequestSslVersionEnum `json:"sslVersion,omitempty"`
	// Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.
	URL string `json:"url"`
	// Username to access the webhook URL.
	Username *string `json:"username,omitempty"`
}
