"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alias as shared_alias
from ..shared import antispam as shared_antispam
from ..shared import catchall as shared_catchall
from ..shared import mailzoneaccount as shared_mailzoneaccount
from ..shared import smtpdomain as shared_smtpdomain
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MailZone:
    r"""Success"""
    
    aliases: Optional[list[shared_alias.Alias]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('aliases'), 'exclude': lambda f: f is None }})
    r"""List of aliases on the mail zone<br />
    An alias is an e-mail address (alias) that automatically forwards received e-mails to another e-mail address (destination).
    """  
    anti_spam: Optional[shared_antispam.AntiSpam] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('anti_spam'), 'exclude': lambda f: f is None }})  
    available_accounts: Optional[list[shared_mailzoneaccount.MailZoneAccount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('available_accounts'), 'exclude': lambda f: f is None }})
    r"""List of mail zone accounts with their mailbox size."""  
    catch_all: Optional[shared_catchall.CatchAll] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('catch_all'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the mail zone is enabled."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    smtp_domains: Optional[list[shared_smtpdomain.SMTPDomain]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('smtp_domains'), 'exclude': lambda f: f is None }})
    r"""List of extra smtp domains on the mail zone<br />
    SMTP domain names allow you to link multiple domain names to a single e-mail address.<br />
    E-mails sent to an SMTP domain will be caught by the respective e-mail address on the main domain name.
    """  
    