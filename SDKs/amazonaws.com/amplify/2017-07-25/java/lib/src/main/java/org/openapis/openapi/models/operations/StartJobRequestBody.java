/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class StartJobRequestBody {
    /**
     *  The commit ID from a third-party repository provider for the job. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commitId")
    public String commitId;

    public StartJobRequestBody withCommitId(String commitId) {
        this.commitId = commitId;
        return this;
    }
    
    /**
     *  The commit message from a third-party repository provider for the job. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commitMessage")
    public String commitMessage;

    public StartJobRequestBody withCommitMessage(String commitMessage) {
        this.commitMessage = commitMessage;
        return this;
    }
    
    /**
     *  The commit date and time for the job. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("commitTime")
    public OffsetDateTime commitTime;

    public StartJobRequestBody withCommitTime(OffsetDateTime commitTime) {
        this.commitTime = commitTime;
        return this;
    }
    
    /**
     *  The unique ID for an existing job. This is required if the value of &lt;code&gt;jobType&lt;/code&gt; is &lt;code&gt;RETRY&lt;/code&gt;. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobId")
    public String jobId;

    public StartJobRequestBody withJobId(String jobId) {
        this.jobId = jobId;
        return this;
    }
    
    /**
     *  A descriptive reason for starting this job. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobReason")
    public String jobReason;

    public StartJobRequestBody withJobReason(String jobReason) {
        this.jobReason = jobReason;
        return this;
    }
    
    /**
     *  Describes the type for the job. The job type &lt;code&gt;RELEASE&lt;/code&gt; starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type &lt;code&gt;RETRY&lt;/code&gt; retries an existing job. If the job type value is &lt;code&gt;RETRY&lt;/code&gt;, the &lt;code&gt;jobId&lt;/code&gt; is also required. 
     */
    @JsonProperty("jobType")
    public StartJobRequestBodyJobTypeEnum jobType;

    public StartJobRequestBody withJobType(StartJobRequestBodyJobTypeEnum jobType) {
        this.jobType = jobType;
        return this;
    }
    
    public StartJobRequestBody(@JsonProperty("jobType") StartJobRequestBodyJobTypeEnum jobType) {
        this.jobType = jobType;
  }
}
