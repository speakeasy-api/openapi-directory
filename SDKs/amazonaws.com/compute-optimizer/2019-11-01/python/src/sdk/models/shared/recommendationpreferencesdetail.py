"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enhancedinfrastructuremetrics_enum as shared_enhancedinfrastructuremetrics_enum
from ..shared import externalmetricspreference as shared_externalmetricspreference
from ..shared import inferredworkloadtypespreference_enum as shared_inferredworkloadtypespreference_enum
from ..shared import resourcetype_enum as shared_resourcetype_enum
from ..shared import scope as shared_scope
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RecommendationPreferencesDetail:
    r"""Describes a recommendation preference."""
    
    enhanced_infrastructure_metrics: Optional[shared_enhancedinfrastructuremetrics_enum.EnhancedInfrastructureMetricsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedInfrastructureMetrics'), 'exclude': lambda f: f is None }})  
    external_metrics_preference: Optional[shared_externalmetricspreference.ExternalMetricsPreference] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('externalMetricsPreference'), 'exclude': lambda f: f is None }})  
    inferred_workload_types: Optional[shared_inferredworkloadtypespreference_enum.InferredWorkloadTypesPreferenceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inferredWorkloadTypes'), 'exclude': lambda f: f is None }})  
    resource_type: Optional[shared_resourcetype_enum.ResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resourceType'), 'exclude': lambda f: f is None }})  
    scope: Optional[shared_scope.Scope] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})  
    