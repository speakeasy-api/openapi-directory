"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class MeetingDeleteSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class MeetingDeleteRequest:
    
    meeting_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'meetingId', 'style': 'simple', 'explode': False }})
    r"""The meeting ID in **long** format. The data type of this field is \\"long\\"(represented as int64 in JSON).
    
    While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
    """  
    cancel_meeting_reminder: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cancel_meeting_reminder', 'style': 'form', 'explode': True }})
    r"""`true`: Notify registrants about the meeting cancellation via email.
    
    `false`: Do not send any email notification to meeting registrants. 
    
    The default value of this field is `false`.
    """  
    occurrence_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'occurrence_id', 'style': 'form', 'explode': True }})
    r"""The meeting occurrence ID."""  
    schedule_for_reminder: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'schedule_for_reminder', 'style': 'form', 'explode': True }})
    r"""`true`: Notify host and alternative host about the meeting cancellation via email.
    `false`: Do not send any email notification.
    """  
    

@dataclasses.dataclass
class MeetingDeleteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    