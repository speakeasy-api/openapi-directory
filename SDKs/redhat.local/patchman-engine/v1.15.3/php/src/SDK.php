<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - API of the Patch application on [cloud.redhat.com](cloud.redhat.com)
 * 
 * 
 * Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://redhat.local',
		'/',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Show me metadata of selected package
     * 
     * Show me metadata of selected package
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\LatestPackageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\LatestPackageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\LatestPackageResponse
     */
	public function latestPackage(
        \OpenAPI\OpenAPI\Models\Operations\LatestPackageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\LatestPackageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\LatestPackageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/packages/{package_name}', \OpenAPI\OpenAPI\Models\Operations\LatestPackageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\LatestPackageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackageDetailResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersPackageDetailResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete system by inventory id
     * 
     * Delete system by inventory id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletesystemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeletesystemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeletesystemResponse
     */
	public function deletesystem(
        \OpenAPI\OpenAPI\Models\Operations\DeletesystemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeletesystemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeletesystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/systems/{inventory_id}', \OpenAPI\OpenAPI\Models\Operations\DeletesystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeletesystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Show me details an advisory by given advisory name
     * 
     * Show me details an advisory by given advisory name
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DetailAdvisorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryResponse
     */
	public function detailAdvisory(
        \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DetailAdvisorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/advisories/{advisory_id}', \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DetailAdvisoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersAdvisoryDetailResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersAdvisoryDetailResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me details about a system by given inventory id
     * 
     * Show me details about a system by given inventory id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DetailSystemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DetailSystemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DetailSystemResponse
     */
	public function detailSystem(
        \OpenAPI\OpenAPI\Models\Operations\DetailSystemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DetailSystemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DetailSystemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/systems/{inventory_id}', \OpenAPI\OpenAPI\Models\Operations\DetailSystemRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DetailSystemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemDetailResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersSystemDetailResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export applicable advisories for all my systems
     * 
     * Export applicable advisories for all my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesResponse
     */
	public function exportAdvisories(
        \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/advisories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAdvisoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersAdvisoryInlineItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersAdvisoryInlineItem>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Export systems for my account
     * 
     * Export systems for my account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsResponse
     */
	public function exportAdvisorySystems(
        \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/advisories/{advisory_id}/systems', \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportAdvisorySystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemInlineItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersSystemInlineItem>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Show me all my systems which have a package installed
     * 
     * Show me all my systems which have a package installed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsResponse
     */
	public function exportPackageSystems(
        \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/packages/{package_name}/systems', \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportPackageSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackageSystemItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersPackageSystemItem>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me all installed packages across my systems
     * 
     * Show me all installed packages across my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportPackagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportPackagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportPackagesResponse
     */
	public function exportPackages(
        \OpenAPI\OpenAPI\Models\Operations\ExportPackagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportPackagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/packages');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportPackagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackageItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersPackageItem>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Export applicable advisories for all my systems
     * 
     * Export applicable advisories for all my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesResponse
     */
	public function exportSystemAdvisories(
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/systems/{inventory_id}/advisories', \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSystemAdvisoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemAdvisoriesDBLookups = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersSystemAdvisoriesDBLookup>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Show me details about a system packages by given inventory id
     * 
     * Show me details about a system packages by given inventory id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesResponse
     */
	public function exportSystemPackages(
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/systems/{inventory_id}/packages', \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSystemPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemPackageInlines = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersSystemPackageInline>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Export systems for my account
     * 
     * Export systems for my account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ExportSystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ExportSystemsResponse
     */
	public function exportSystems(
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ExportSystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ExportSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/export/systems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ExportSystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ExportSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemInlineItems = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ControllersSystemInlineItem>', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'text/csv')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Show me all applicable advisories for all my systems
     * 
     * Show me all applicable advisories for all my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesResponse
     */
	public function listAdvisories(
        \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/advisories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAdvisoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersAdvisoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersAdvisoriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me systems on which the given advisory is applicable
     * 
     * Show me systems on which the given advisory is applicable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsResponse
     */
	public function listAdvisorySystems(
        \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/advisories/{advisory_id}/systems', \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAdvisorySystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersAdvisorySystemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersAdvisorySystemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me all installed packages across my systems
     * 
     * Show me all installed packages across my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPackagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListPackagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListPackagesResponse
     */
	public function listPackages(
        \OpenAPI\OpenAPI\Models\Operations\ListPackagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListPackagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/packages/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListPackagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersPackagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me advisories for a system by given inventory id
     * 
     * Show me advisories for a system by given inventory id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesResponse
     */
	public function listSystemAdvisories(
        \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/systems/{inventory_id}/advisories', \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSystemAdvisoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemAdvisoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersSystemAdvisoriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me all my systems
     * 
     * Show me all my systems
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSystemsResponse
     */
	public function listSystems(
        \OpenAPI\OpenAPI\Models\Operations\ListSystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/systems');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersSystemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me all my systems which have a package installed
     * 
     * Show me all my systems which have a package installed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageSystemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageSystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageSystemsResponse
     */
	public function packageSystems(
        \OpenAPI\OpenAPI\Models\Operations\PackageSystemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PackageSystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/packages/{package_name}/systems', \OpenAPI\OpenAPI\Models\Operations\PackageSystemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageSystemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackageSystemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersPackageSystemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me all package versions installed on some system
     * 
     * Show me all package versions installed on some system
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PackageVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PackageVersionsResponse
     */
	public function packageVersions(
        \OpenAPI\OpenAPI\Models\Operations\PackageVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PackageVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PackageVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/packages/{package_name}/versions', \OpenAPI\OpenAPI\Models\Operations\PackageVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PackageVersionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PackageVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersPackageVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersPackageVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show me details about a system packages by given inventory id
     * 
     * Show me details about a system packages by given inventory id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SystemPackagesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SystemPackagesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SystemPackagesResponse
     */
	public function systemPackages(
        \OpenAPI\OpenAPI\Models\Operations\SystemPackagesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SystemPackagesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SystemPackagesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/systems/{inventory_id}/packages', \OpenAPI\OpenAPI\Models\Operations\SystemPackagesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SystemPackagesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SystemPackagesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemPackageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersSystemPackageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View advisory-system pairs for selected systems and advisories
     * 
     * View advisory-system pairs for selected systems and advisories
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ControllersSystemsAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ViewAdvisoriesSystemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ViewAdvisoriesSystemsResponse
     */
	public function viewAdvisoriesSystems(
        \OpenAPI\OpenAPI\Models\Shared\ControllersSystemsAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ViewAdvisoriesSystemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ViewAdvisoriesSystemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/views/advisories/systems');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ViewAdvisoriesSystemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersAdvisoriesSystemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersAdvisoriesSystemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View system-advisory pairs for selected systems and advisories
     * 
     * View system-advisory pairs for selected systems and advisories
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\ControllersSystemsAdvisoriesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ViewSystemsAdvisoriesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ViewSystemsAdvisoriesResponse
     */
	public function viewSystemsAdvisories(
        \OpenAPI\OpenAPI\Models\Shared\ControllersSystemsAdvisoriesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ViewSystemsAdvisoriesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ViewSystemsAdvisoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/patch/v1/views/systems/advisories');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ViewSystemsAdvisoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->controllersSystemsAdvisoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ControllersSystemsAdvisoriesResponse', 'json');
            }
        }

        return $response;
    }
}