/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GetCandidatesTotalsOfficeEnum {
  Unknown = "",
  H = "H",
  S = "S",
  P = "P",
}

export class GetCandidatesTotalsRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * A unique identifier assigned to each candidate registered with the FEC.
   * If a person runs for several offices, that person will have separate candidate IDs for each office.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=candidate_id",
  })
  candidateId?: string[];

  /**
   *
   * @remarks
   * Filter records to only those that were applicable to a given
   * two-year period.The cycle begins with an odd year and is named
   * for its ending, even year.
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cycle" })
  cycle?: number[];

  /**
   * District of candidate
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=district",
  })
  district?: string[];

  /**
   * `True` indicates that full election period of a candidate.
   *
   * @remarks
   * `False` indicates that two year election cycle.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_full",
  })
  electionFull?: boolean;

  /**
   *
   * @remarks
   * Filter records to only those that were applicable to a given
   * two-year period.The cycle begins with an odd year and is named
   * for its ending, even year.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=election_year",
  })
  electionYear?: number[];

  /**
   * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=federal_funds_flag",
  })
  federalFundsFlag?: boolean;

  /**
   * A boolean that describes if a candidate's committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=has_raised_funds",
  })
  hasRaisedFunds?: boolean;

  /**
   *  Candidates who are actively seeking office. If no value is specified, all candidates
   *
   * @remarks
   * are returned. When True is specified, only active candidates are returned. When False is
   * specified, only inactive candidates are returned.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=is_active_candidate",
  })
  isActiveCandidate?: boolean;

  /**
   * Maximum cash on hand
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_cash_on_hand_end_period",
  })
  maxCashOnHandEndPeriod?: string;

  /**
   * Maximum debt
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_debts_owed_by_committee",
  })
  maxDebtsOwedByCommittee?: string;

  /**
   * Maximum aggregated disbursements
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_disbursements",
  })
  maxDisbursements?: string;

  /**
   * Maximum aggregated receipts
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=max_receipts",
  })
  maxReceipts?: string;

  /**
   * Minimum cash on hand
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_cash_on_hand_end_period",
  })
  minCashOnHandEndPeriod?: string;

  /**
   * Minimum debt
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_debts_owed_by_committee",
  })
  minDebtsOwedByCommittee?: string;

  /**
   * Minimum aggregated disbursements
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_disbursements",
  })
  minDisbursements?: string;

  /**
   * Minimum aggregated receipts
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=min_receipts",
  })
  minReceipts?: string;

  /**
   * Federal office candidate runs for: H, S or P
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=office",
  })
  office?: GetCandidatesTotalsOfficeEnum[];

  /**
   * For paginating through results, starting at page 1
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
  page?: number;

  /**
   * Three-letter party code
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=party" })
  party?: string[];

  /**
   * The number of results returned per page. Defaults to 20.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * Name of candidate running for office
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string[];

  /**
   * Provide a field to sort by. Use `-` for descending order.
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Hide null values on sorted column(s).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_hide_null",
  })
  sortHideNull?: boolean;

  /**
   * Toggle that filters out all rows having sort column that is non-null
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_null_only",
  })
  sortNullOnly?: boolean;

  /**
   * Toggle that sorts null values last
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_nulls_last",
  })
  sortNullsLast?: boolean;

  /**
   * State of candidate
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=state" })
  state?: string[];
}

export class GetCandidatesTotalsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  candidateHistoryTotalPage?: shared.CandidateHistoryTotalPage;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
