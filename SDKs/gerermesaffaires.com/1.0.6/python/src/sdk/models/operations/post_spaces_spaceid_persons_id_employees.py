"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class PostSpacesSpaceIDPersonsIDEmployeesSecurity:
    
    gma_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum(str, Enum):
    CONFIDENTIAL = 'confidential'
    REGULAR = 'regular'
    PUBLIC = 'public'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDPersonsIDEmployeesRequestBody:
    r"""Employee to add (except name, class and archivaldate)"""
    
    about: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('About'), 'exclude': lambda f: f is None }})  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Comment'), 'exclude': lambda f: f is None }})  
    contract_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractType'), 'exclude': lambda f: f is None }})  
    employee_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EmployeeNumber'), 'exclude': lambda f: f is None }})  
    end: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('End'), 'exclude': lambda f: f is None }})  
    function: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Function'), 'exclude': lambda f: f is None }})  
    home: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Home'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Keywords'), 'exclude': lambda f: f is None }})  
    level: Optional[PostSpacesSpaceIDPersonsIDEmployeesRequestBodyLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Level'), 'exclude': lambda f: f is None }})  
    postal_mail: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PostalMail'), 'exclude': lambda f: f is None }})  
    ss_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SSNumber'), 'exclude': lambda f: f is None }})  
    start: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Start'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDPersonsIDEmployeesRequest:
    
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the employee"""  
    request_body: PostSpacesSpaceIDPersonsIDEmployeesRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Employee to add (except name, class and archivaldate)"""  
    space_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'spaceId', 'style': 'simple', 'explode': False }})
    r"""Id of the space"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON:
    r"""Id of folder created"""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostSpacesSpaceIDPersonsIDEmployeesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    post_spaces_space_id_persons_id_employees_201_application_json_object: Optional[PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON] = dataclasses.field(default=None)
    r"""Id of folder created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    