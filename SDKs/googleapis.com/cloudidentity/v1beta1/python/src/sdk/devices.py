"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Devices:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudidentity_devices_create(self, request: operations.CloudidentityDevicesCreateRequest, security: operations.CloudidentityDevicesCreateSecurity) -> operations.CloudidentityDevicesCreateResponse:
        r"""Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta1/devices'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_device_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudidentityDevicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudidentity_devices_device_users_approve(self, request: operations.CloudidentityDevicesDeviceUsersApproveRequest, security: operations.CloudidentityDevicesDeviceUsersApproveSecurity) -> operations.CloudidentityDevicesDeviceUsersApproveResponse:
        r"""Approves device to access user data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersApproveRequest, base_url, '/v1beta1/{name}:approve', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "approve_device_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersApproveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersApproveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudidentity_devices_device_users_block(self, request: operations.CloudidentityDevicesDeviceUsersBlockRequest, security: operations.CloudidentityDevicesDeviceUsersBlockSecurity) -> operations.CloudidentityDevicesDeviceUsersBlockResponse:
        r"""Blocks device from accessing user data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersBlockRequest, base_url, '/v1beta1/{name}:block', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "block_device_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersBlockRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersBlockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudidentity_devices_device_users_cancel_wipe(self, request: operations.CloudidentityDevicesDeviceUsersCancelWipeRequest, security: operations.CloudidentityDevicesDeviceUsersCancelWipeSecurity) -> operations.CloudidentityDevicesDeviceUsersCancelWipeResponse:
        r"""Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersCancelWipeRequest, base_url, '/v1beta1/{name}:cancelWipe', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "cancel_wipe_device_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersCancelWipeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersCancelWipeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudidentity_devices_device_users_list(self, request: operations.CloudidentityDevicesDeviceUsersListRequest, security: operations.CloudidentityDevicesDeviceUsersListSecurity) -> operations.CloudidentityDevicesDeviceUsersListResponse:
        r"""Lists/Searches DeviceUsers."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersListRequest, base_url, '/v1beta1/{parent}/deviceUsers', request)
        
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDeviceUsersResponse])
                res.list_device_users_response = out

        return res

    def cloudidentity_devices_device_users_lookup(self, request: operations.CloudidentityDevicesDeviceUsersLookupRequest, security: operations.CloudidentityDevicesDeviceUsersLookupSecurity) -> operations.CloudidentityDevicesDeviceUsersLookupResponse:
        r"""Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersLookupRequest, base_url, '/v1beta1/{parent}:lookup', request)
        
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersLookupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LookupSelfDeviceUsersResponse])
                res.lookup_self_device_users_response = out

        return res

    def cloudidentity_devices_device_users_wipe(self, request: operations.CloudidentityDevicesDeviceUsersWipeRequest, security: operations.CloudidentityDevicesDeviceUsersWipeSecurity) -> operations.CloudidentityDevicesDeviceUsersWipeResponse:
        r"""Wipes the user's account on a device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudidentityDevicesDeviceUsersWipeRequest, base_url, '/v1beta1/{name}:wipe', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "wipe_device_user_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudidentityDevicesDeviceUsersWipeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesDeviceUsersWipeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudidentity_devices_list(self, request: operations.CloudidentityDevicesListRequest, security: operations.CloudidentityDevicesListSecurity) -> operations.CloudidentityDevicesListResponse:
        r"""Lists/Searches devices."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1beta1/devices'
        
        query_params = utils.get_query_params(operations.CloudidentityDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudidentityDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListDevicesResponse])
                res.list_devices_response = out

        return res

    