"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ReminderProfileReminderTemplateTypeEnum(str, Enum):
    r"""One of `\\"email\\"`, `\\"sms\\"` or `\\"auto_call\\"`"""
    EMAIL = 'email'
    SMS = 'sms'
    PHONE = 'phone'
    AUTO_CALL = 'auto_call'

class ReminderProfileReminderTemplateUnitEnum(str, Enum):
    r"""One of `\\"email\\"`, `\\"sms\\"` or `\\"auto_call\\"`"""
    MINUTES = 'minutes'
    HOURS = 'hours'
    DAYS = 'days'
    WEEKS = 'weeks'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReminderProfileReminderTemplate:
    r"""Array of reminders"""
    
    amount: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amount'), 'exclude': lambda f: f is None }})  
    type: Optional[ReminderProfileReminderTemplateTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""One of `\\"email\\"`, `\\"sms\\"` or `\\"auto_call\\"`"""  
    unit: Optional[ReminderProfileReminderTemplateUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unit'), 'exclude': lambda f: f is None }})
    r"""One of `\\"email\\"`, `\\"sms\\"` or `\\"auto_call\\"`"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReminderProfile:
    r"""Created"""
    
    doctor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doctor') }})
    r"""Doctor who created the profile. Other doctors in the practice group may have access to their profiles"""  
    reminders: list[ReminderProfileReminderTemplate] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reminders') }})
    r"""Reminders set in the profile"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    