<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


class UpdateLinkAttributesRequestBody
{
    /**
     * The attributes update structure.
     * 
     * @var array<\OpenAPI\OpenAPI\Models\Shared\LinkAttributeUpdate> $attributeUpdates
     */
	#[\JMS\Serializer\Annotation\SerializedName('AttributeUpdates')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\LinkAttributeUpdate>')]
    public array $attributeUpdates;
    
    /**
     * Contains all the information that is used to uniquely identify a typed link. The parameters discussed in this topic are used to uniquely specify the typed link being operated on. The <a>AttachTypedLink</a> API returns a typed link specifier while the <a>DetachTypedLink</a> API accepts one as input. Similarly, the <a>ListIncomingTypedLinks</a> and <a>ListOutgoingTypedLinks</a> API operations provide typed link specifiers as output. You can also construct a typed link specifier from scratch.
     * 
     * @var \OpenAPI\OpenAPI\Models\Operations\UpdateLinkAttributesRequestBodyTypedLinkSpecifier $typedLinkSpecifier
     */
	#[\JMS\Serializer\Annotation\SerializedName('TypedLinkSpecifier')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Operations\UpdateLinkAttributesRequestBodyTypedLinkSpecifier')]
    public UpdateLinkAttributesRequestBodyTypedLinkSpecifier $typedLinkSpecifier;
    
	public function __construct()
	{
		$this->attributeUpdates = [];
		$this->typedLinkSpecifier = new \OpenAPI\OpenAPI\Models\Operations\UpdateLinkAttributesRequestBodyTypedLinkSpecifier();
	}
}
