"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import authentication as shared_authentication
from ..shared import cardconfiguration as shared_cardconfiguration
from ..shared import contact as shared_contact
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CardInfoFormFactorEnum(str, Enum):
    r"""The form factor of the card.
    Possible values: **virtual**, **physical**.
    """
    PHYSICAL = 'physical'
    UNKNOWN = 'unknown'
    VIRTUAL = 'virtual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CardInfo:
    
    brand: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brand') }})
    r"""The brand of the physical or the virtual card.
    Possible values: **visa**, **mc**.
    """  
    brand_variant: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('brandVariant') }})
    r"""The brand variant of the physical or the virtual card.
    >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
    """  
    cardholder_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardholderName') }})
    r"""The name of the cardholder.
     Maximum length: 26 characters.
    """  
    form_factor: CardInfoFormFactorEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formFactor') }})
    r"""The form factor of the card.
    Possible values: **virtual**, **physical**.
    """  
    authentication: Optional[shared_authentication.Authentication] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authentication'), 'exclude': lambda f: f is None }})  
    configuration: Optional[shared_cardconfiguration.CardConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('configuration'), 'exclude': lambda f: f is None }})  
    delivery_contact: Optional[shared_contact.Contact] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryContact'), 'exclude': lambda f: f is None }})  
    