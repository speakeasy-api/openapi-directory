/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * CloneContext - Database instance clone context.
 */
public class CloneContext {
    /**
     * The name of the allocated ip range for the private ip Cloud SQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocatedIpRange")
    public String allocatedIpRange;
    public CloneContext withAllocatedIpRange(String allocatedIpRange) {
        this.allocatedIpRange = allocatedIpRange;
        return this;
    }
    
    /**
     * Binary log coordinates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("binLogCoordinates")
    public BinLogCoordinates binLogCoordinates;
    public CloneContext withBinLogCoordinates(BinLogCoordinates binLogCoordinates) {
        this.binLogCoordinates = binLogCoordinates;
        return this;
    }
    
    /**
     * (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("databaseNames")
    public String[] databaseNames;
    public CloneContext withDatabaseNames(String[] databaseNames) {
        this.databaseNames = databaseNames;
        return this;
    }
    
    /**
     * Name of the Cloud SQL instance to be created as a clone.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinationInstanceName")
    public String destinationInstanceName;
    public CloneContext withDestinationInstanceName(String destinationInstanceName) {
        this.destinationInstanceName = destinationInstanceName;
        return this;
    }
    
    /**
     * This is always `sql#cloneContext`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public CloneContext withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Reserved for future use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pitrTimestampMs")
    public String pitrTimestampMs;
    public CloneContext withPitrTimestampMs(String pitrTimestampMs) {
        this.pitrTimestampMs = pitrTimestampMs;
        return this;
    }
    
    /**
     * Timestamp, if specified, identifies the time to which the source instance is cloned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pointInTime")
    public String pointInTime;
    public CloneContext withPointInTime(String pointInTime) {
        this.pointInTime = pointInTime;
        return this;
    }
    
}
