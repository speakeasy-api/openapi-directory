"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alloweddomainssettings as shared_alloweddomainssettings
from ..shared import corssettings as shared_corssettings
from ..shared import gcipsettings as shared_gcipsettings
from ..shared import oauthsettings as shared_oauthsettings
from ..shared import policydelegationsettings as shared_policydelegationsettings
from ..shared import reauthsettings as shared_reauthsettings
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccessSettings:
    r"""Access related settings for IAP protected apps."""
    
    allowed_domains_settings: Optional[shared_alloweddomainssettings.AllowedDomainsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedDomainsSettings'), 'exclude': lambda f: f is None }})
    r"""Configuration for IAP allowed domains. Lets you to restrict access to an app and allow access to only the domains that you list."""  
    cors_settings: Optional[shared_corssettings.CorsSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('corsSettings'), 'exclude': lambda f: f is None }})
    r"""Allows customers to configure HTTP request paths that'll allow HTTP OPTIONS call to bypass authentication and authorization."""  
    gcip_settings: Optional[shared_gcipsettings.GcipSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gcipSettings'), 'exclude': lambda f: f is None }})
    r"""Allows customers to configure tenant_id for GCIP instance per-app."""  
    oauth_settings: Optional[shared_oauthsettings.OAuthSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauthSettings'), 'exclude': lambda f: f is None }})
    r"""Configuration for OAuth login&consent flow behavior as well as for OAuth Credentials."""  
    policy_delegation_settings: Optional[shared_policydelegationsettings.PolicyDelegationSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDelegationSettings'), 'exclude': lambda f: f is None }})
    r"""PolicyDelegationConfig allows google-internal teams to use IAP for apps hosted in a tenant project. Using these settings, the app can delegate permission check to happen against the linked customer project. This is only ever supposed to be used by google internal teams, hence the restriction on the proto."""  
    reauth_settings: Optional[shared_reauthsettings.ReauthSettings] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('reauthSettings'), 'exclude': lambda f: f is None }})
    r"""Configuration for IAP reauthentication policies."""  
    