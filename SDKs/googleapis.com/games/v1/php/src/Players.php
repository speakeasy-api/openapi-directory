<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Players 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetResponse
     */
	public function gamesPlayersGet(
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/{playerId}', \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->player = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Player', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the application player ids for the currently authenticated player across all requested games by the same developer as the calling application. This will only return ids for players that actually have an id (scoped or otherwise) with that game.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsResponse
     */
	public function gamesPlayersGetMultipleApplicationPlayerIds(
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/me/multipleApplicationPlayerIds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetMultipleApplicationPlayerIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getMultipleApplicationPlayerIdsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetMultipleApplicationPlayerIdsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves scoped player identifiers for currently authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsResponse
     */
	public function gamesPlayersGetScopedPlayerIds(
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/me/scopedIds');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesPlayersGetScopedPlayerIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scopedPlayerIds = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScopedPlayerIds', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get the collection of players for the currently authenticated user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListResponse
     */
	public function gamesPlayersList(
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1/players/me/players/{collection}', \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesPlayersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesPlayersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerListResponse', 'json');
            }
        }

        return $response;
    }
}