"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class HotKeyDetection:
    r"""Proto describing a hot key detected on a given WorkItem."""
    
    hot_key_age: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hotKeyAge'), 'exclude': lambda f: f is None }})
    r"""The age of the hot key measured from when it was first detected."""  
    system_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('systemName'), 'exclude': lambda f: f is None }})
    r"""System-defined name of the step containing this hot key. Unique across the workflow."""  
    user_step_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userStepName'), 'exclude': lambda f: f is None }})
    r"""User-provided name of the step that contains this hot key."""  
    