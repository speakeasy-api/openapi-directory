<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Artifacts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create artifact
     * 
     * Creates a new artifact by posting the artifact content.  The body of the request should
     * be the raw content of the artifact.  This is typically in JSON format for *most* of the 
     * supported types, but may be in another format for a few (for example, `PROTOBUF`).
     * 
     * The registry attempts to figure out what kind of artifact is being added from the
     * following supported list:
     * 
     * * Avro (`AVRO`)
     * * Protobuf (`PROTOBUF`)
     * * JSON Schema (`JSON`)
     * * Kafka Connect (`KCONNECT`)
     * * OpenAPI (`OPENAPI`)
     * * AsyncAPI (`ASYNCAPI`)
     * * GraphQL (`GRAPHQL`)
     * * Web Services Description Language (`WSDL`)
     * * XML Schema (`XSD`)
     * 
     * Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType` 
     * HTTP request header, or include a hint in the request's `Content-Type`.  For example:
     * 
     * ```
     * Content-Type: application/json; artifactType=AVRO
     * ```
     * 
     * An artifact is created using the content provided in the body of the request.  This
     * content is created under a unique artifact ID that can be provided in the request
     * using the `X-Registry-ArtifactId` request header.  If not provided in the request,
     * the server generates a unique ID for the artifact.  It is typically recommended
     * that callers provide the ID, because this is typically a meaningful identifier, 
     * and for most use cases should be supplied by the caller.
     * 
     * If an artifact with the provided artifact ID already exists, the default behavior
     * is for the server to reject the content with a 409 error.  However, the caller can
     * supply the `ifExists` query parameter to alter this default behavior. The `ifExists`
     * query parameter can have one of the following values:
     * 
     * * `FAIL` (*default*) - server rejects the content with a 409 error
     * * `UPDATE` - server updates the existing artifact and returns the new metadata
     * * `RETURN` - server does not create or add content to the server, but instead 
     * returns the metadata for the existing artifact
     * * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the 
     * provided content if such a version exists, otherwise a new version is created
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * An invalid `ArtifactType` was indicated (HTTP error `400`)
     * * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`)
     * * Provided content (request body) was empty (HTTP error `400`)
     * * An artifact with the provided ID already exists (HTTP error `409`)
     * * The content violates one of the configured global rules (HTTP error `409`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonResponse
     */
	public function createArtifactJson(
        \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts', \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contentCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateArtifactJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleViolationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuleViolationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create artifact
     * 
     * Creates a new artifact by posting the artifact content.  The body of the request should
     * be the raw content of the artifact.  This is typically in JSON format for *most* of the 
     * supported types, but may be in another format for a few (for example, `PROTOBUF`).
     * 
     * The registry attempts to figure out what kind of artifact is being added from the
     * following supported list:
     * 
     * * Avro (`AVRO`)
     * * Protobuf (`PROTOBUF`)
     * * JSON Schema (`JSON`)
     * * Kafka Connect (`KCONNECT`)
     * * OpenAPI (`OPENAPI`)
     * * AsyncAPI (`ASYNCAPI`)
     * * GraphQL (`GRAPHQL`)
     * * Web Services Description Language (`WSDL`)
     * * XML Schema (`XSD`)
     * 
     * Alternatively, you can specify the artifact type using the `X-Registry-ArtifactType` 
     * HTTP request header, or include a hint in the request's `Content-Type`.  For example:
     * 
     * ```
     * Content-Type: application/json; artifactType=AVRO
     * ```
     * 
     * An artifact is created using the content provided in the body of the request.  This
     * content is created under a unique artifact ID that can be provided in the request
     * using the `X-Registry-ArtifactId` request header.  If not provided in the request,
     * the server generates a unique ID for the artifact.  It is typically recommended
     * that callers provide the ID, because this is typically a meaningful identifier, 
     * and for most use cases should be supplied by the caller.
     * 
     * If an artifact with the provided artifact ID already exists, the default behavior
     * is for the server to reject the content with a 409 error.  However, the caller can
     * supply the `ifExists` query parameter to alter this default behavior. The `ifExists`
     * query parameter can have one of the following values:
     * 
     * * `FAIL` (*default*) - server rejects the content with a 409 error
     * * `UPDATE` - server updates the existing artifact and returns the new metadata
     * * `RETURN` - server does not create or add content to the server, but instead 
     * returns the metadata for the existing artifact
     * * `RETURN_OR_UPDATE` - server returns an existing **version** that matches the 
     * provided content if such a version exists, otherwise a new version is created
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * An invalid `ArtifactType` was indicated (HTTP error `400`)
     * * No `ArtifactType` was indicated and the server could not determine one from the content (HTTP error `400`)
     * * Provided content (request body) was empty (HTTP error `400`)
     * * An artifact with the provided ID already exists (HTTP error `409`)
     * * The content violates one of the configured global rules (HTTP error `409`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawResponse
     */
	public function createArtifactRaw(
        \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts', \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateArtifactRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ruleViolationError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RuleViolationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete artifact
     * 
     * Deletes an artifact completely, resulting in all versions of the artifact also being
     * deleted.  This may fail for one of the following reasons:
     * 
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse
     */
	public function deleteArtifact(
        \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete artifacts in group
     * 
     * Deletes all of the artifacts that exist in a given group.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupResponse
     */
	public function deleteArtifactsInGroup(
        \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts', \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteArtifactsInGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact by global ID
     * 
     * Gets the content for an artifact version in the registry using its globally unique
     * identifier.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * No artifact version with this `globalId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdResponse
     */
	public function getContentByGlobalId(
        \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/globalIds/{globalId}', \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentByGlobalIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->fileContent = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact content by SHA-256 hash
     * 
     * Gets the content for an artifact version in the registry using the 
     * SHA-256 hash of the content.  This content hash may be shared by multiple artifact
     * versions in the case where the artifact versions have identical content.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * No content with this `contentHash` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentByHashRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentByHashResponse
     */
	public function getContentByHash(
        \OpenAPI\OpenAPI\Models\Operations\GetContentByHashRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentByHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/contentHashes/{contentHash}/', \OpenAPI\OpenAPI\Models\Operations\GetContentByHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentByHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->fileContent = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get artifact content by ID
     * 
     * Gets the content for an artifact version in the registry using the unique content
     * identifier for that content.  This content ID may be shared by multiple artifact
     * versions in the case where the artifact versions are identical.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * No content with this `contentId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContentByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContentByIdResponse
     */
	public function getContentById(
        \OpenAPI\OpenAPI\Models\Operations\GetContentByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContentByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/contentIds/{contentId}/', \OpenAPI\OpenAPI\Models\Operations\GetContentByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContentByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->fileContent = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get latest artifact
     * 
     * Returns the latest version of the artifact in its raw form.  The `Content-Type` of the
     * response depends on the artifact type.  In most cases, this is `application/json`, but 
     * for some types it may be different (for example, `PROTOBUF`).
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactResponse
     */
	public function getLatestArtifact(
        \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLatestArtifactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->fileContent = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List artifacts in group
     * 
     * Returns a list of all artifacts in the group.  This list is paged.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupResponse
     */
	public function listArtifactsInGroup(
        \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts', \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListArtifactsInGroupResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List artifact references by hash
     * 
     * Returns a list containing all the artifact references using the artifact content hash.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashResponse
     */
	public function referencesByContentHash(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/contentHashes/{contentHash}/references', \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentHashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactReferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArtifactReference>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List artifact references by content ID
     * 
     * Returns a list containing all the artifact references using the artifact content ID.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdResponse
     */
	public function referencesByContentId(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/contentIds/{contentId}/references', \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesByContentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactReferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArtifactReference>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List artifact references by global ID
     * 
     * Returns a list containing all the artifact references using the artifact global ID.
     * 
     * This operation may fail for one of the following reasons:
     * 
     * * A server error occurred (HTTP error `500`)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdResponse
     */
	public function referencesByGlobalId(
        \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ids/globalIds/{globalId}/references', \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReferencesByGlobalIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactReferences = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ArtifactReference>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for artifacts
     * 
     * Returns a paginated list of all artifacts that match the provided filter criteria.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsResponse
     */
	public function searchArtifacts(
        \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/artifacts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchArtifactsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search for artifacts by content
     * 
     * Returns a paginated list of all artifacts with at least one version that matches the
     * posted content.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentResponse
     */
	public function searchArtifactsByContent(
        \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/search/artifacts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SearchArtifactsByContentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactSearchResults = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactSearchResults', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact state
     * 
     * Updates the state of the artifact.  For example, you can use this to mark the latest
     * version of an artifact as `DEPRECATED`.  The operation changes the state of the latest 
     * version of the artifact.  If multiple versions exist, only the most recent is changed.
     * 
     * This operation can fail for the following reasons:
     * 
     * * No artifact with this `artifactId` exists (HTTP error `404`)
     * * A server error occurred (HTTP error `500`)
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateResponse
     */
	public function updateArtifactState(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}/state', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateState", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactStateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact
     * 
     * Updates an artifact by uploading new content.  The body of the request can
     * be the raw content of the artifact or a JSON object containing both the raw content and
     * a set of references to other artifacts..  This is typically in JSON format for *most*
     * of the supported types, but may be in another format for a few (for example, `PROTOBUF`).
     * The type of the content should be compatible with the artifact's type (it would be
     * an error to update an `AVRO` artifact with new `OPENAPI` content, for example).
     * 
     * The update could fail for a number of reasons including:
     * 
     * * Provided content (request body) was empty (HTTP error `400`)
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * The new content violates one of the rules configured for the artifact (HTTP error `409`)
     * * A server error occurred (HTTP error `500`)
     * 
     * When successful, this creates a new version of the artifact, making it the most recent
     * (and therefore official) version of the artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonResponse
     */
	public function updateArtifactJson(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contentCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update artifact
     * 
     * Updates an artifact by uploading new content.  The body of the request can
     * be the raw content of the artifact or a JSON object containing both the raw content and
     * a set of references to other artifacts..  This is typically in JSON format for *most*
     * of the supported types, but may be in another format for a few (for example, `PROTOBUF`).
     * The type of the content should be compatible with the artifact's type (it would be
     * an error to update an `AVRO` artifact with new `OPENAPI` content, for example).
     * 
     * The update could fail for a number of reasons including:
     * 
     * * Provided content (request body) was empty (HTTP error `400`)
     * * No artifact with the `artifactId` exists (HTTP error `404`)
     * * The new content violates one of the rules configured for the artifact (HTTP error `409`)
     * * A server error occurred (HTTP error `500`)
     * 
     * When successful, this creates a new version of the artifact, making it the most recent
     * (and therefore official) version of the artifact.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawResponse
     */
	public function updateArtifactRaw(
        \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/groups/{groupId}/artifacts/{artifactId}', \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateArtifactRawResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->artifactMetaData = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ArtifactMetaData', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 409 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}