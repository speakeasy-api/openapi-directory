<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * MssqlHostConfigurationWithHostId - Parameters for creating a SQL Server host configuration.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class MssqlHostConfigurationWithHostId
{
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum $enableDatabaseBatchSnapshots
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableDatabaseBatchSnapshots')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HostConfigurationPropertyEnabledEnum $enableDatabaseBatchSnapshots = null;
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum $enableGroupFetch
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableGroupFetch')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HostConfigurationPropertyEnabledEnum $enableGroupFetch = null;
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum $enableVdi
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableVdi')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HostConfigurationPropertyEnabledEnum $enableVdi = null;
    
    /**
     * Defines the boolean type for host configuration. 'Enabled' specifies true, 'Disabled' specifies False, and 'Default' specifies to delete the entry and default to the global configuration.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum $enableVdiDb
     */
	#[\JMS\Serializer\Annotation\SerializedName('enableVdiDb')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\HostConfigurationPropertyEnabledEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?HostConfigurationPropertyEnabledEnum $enableVdiDb = null;
    
    /**
     * Number of concurrent read requests for restoring a file from the Rubrik cluster to a remote host.
     * 
     * @var ?int $fileRestoreReadParallelism
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileRestoreReadParallelism')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $fileRestoreReadParallelism = null;
    
    /**
     * Number of concurrent write requests for restoring a file from the Rubrik cluster to a remote host.
     * 
     * @var ?int $fileRestoreWriteParallelism
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileRestoreWriteParallelism')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $fileRestoreWriteParallelism = null;
    
    /**
     * Number of concurrent requests for transferring a file from a remote host to the Rubrik cluster.
     * 
     * @var ?int $fileTransferParallelism
     */
	#[\JMS\Serializer\Annotation\SerializedName('fileTransferParallelism')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $fileTransferParallelism = null;
    
    /**
     * the ID of the host.
     * 
     * @var string $hostId
     */
	#[\JMS\Serializer\Annotation\SerializedName('hostId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hostId;
    
    /**
     * The default value for maximum number of data streams per database.
     * 
     * @var ?int $mssqlDefaultMaxDataStreamsPerDatabase
     */
	#[\JMS\Serializer\Annotation\SerializedName('mssqlDefaultMaxDataStreamsPerDatabase')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $mssqlDefaultMaxDataStreamsPerDatabase = null;
    
    /**
     * The maximum number of concurrent database restore job running on a host.
     * 
     * @var ?int $physicalHostDatabaseRestoreThrottleMaxRefCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('physicalHostDatabaseRestoreThrottleMaxRefCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $physicalHostDatabaseRestoreThrottleMaxRefCount = null;
    
    /**
     * Maximum number of concurrent SQL Server log backup jobs per physical host.
     * 
     * @var ?int $physicalHostLogBackupThrottleMaxRefCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('physicalHostLogBackupThrottleMaxRefCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $physicalHostLogBackupThrottleMaxRefCount = null;
    
    /**
     * Maximum number of concurrent snapshots per physical host.
     * 
     * @var ?int $throttlePhysicalHostMaxRefCount
     */
	#[\JMS\Serializer\Annotation\SerializedName('throttlePhysicalHostMaxRefCount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $throttlePhysicalHostMaxRefCount = null;
    
	public function __construct()
	{
		$this->enableDatabaseBatchSnapshots = null;
		$this->enableGroupFetch = null;
		$this->enableVdi = null;
		$this->enableVdiDb = null;
		$this->fileRestoreReadParallelism = null;
		$this->fileRestoreWriteParallelism = null;
		$this->fileTransferParallelism = null;
		$this->hostId = "";
		$this->mssqlDefaultMaxDataStreamsPerDatabase = null;
		$this->physicalHostDatabaseRestoreThrottleMaxRefCount = null;
		$this->physicalHostLogBackupThrottleMaxRefCount = null;
		$this->throttlePhysicalHostMaxRefCount = null;
	}
}
