// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// TeamFullPrivacyEnum - The level of privacy this team should have
type TeamFullPrivacyEnum string

const (
	TeamFullPrivacyEnumClosed TeamFullPrivacyEnum = "closed"
	TeamFullPrivacyEnumSecret TeamFullPrivacyEnum = "secret"
)

func (e *TeamFullPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "closed":
		fallthrough
	case "secret":
		*e = TeamFullPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamFullPrivacyEnum: %s", s)
	}
}

// TeamFull - Groups of organization members that gives permissions on specified repositories.
type TeamFull struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	HTMLURL     string    `json:"html_url"`
	// Unique identifier of the team
	ID int64 `json:"id"`
	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn       *string `json:"ldap_dn,omitempty"`
	MembersCount int64   `json:"members_count"`
	MembersURL   string  `json:"members_url"`
	// Name of the team
	Name   string `json:"name"`
	NodeID string `json:"node_id"`
	// Organization Full
	Organization OrganizationFull `json:"organization"`
	// Groups of organization members that gives permissions on specified repositories.
	Parent *NullableTeamSimple `json:"parent,omitempty"`
	// Permission that the team will have for its repositories
	Permission string `json:"permission"`
	// The level of privacy this team should have
	Privacy         *TeamFullPrivacyEnum `json:"privacy,omitempty"`
	ReposCount      int64                `json:"repos_count"`
	RepositoriesURL string               `json:"repositories_url"`
	Slug            string               `json:"slug"`
	UpdatedAt       time.Time            `json:"updated_at"`
	// URL for the team
	URL string `json:"url"`
}
