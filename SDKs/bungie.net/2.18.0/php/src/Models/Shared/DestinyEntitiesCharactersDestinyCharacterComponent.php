<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * DestinyEntitiesCharactersDestinyCharacterComponent - This component contains base properties of the character. You'll probably want to always request this component, but hey you do you.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class DestinyEntitiesCharactersDestinyCharacterComponent
{
    /**
     * The "base" level of your character, not accounting for any light level.
     * 
     * @var ?int $baseCharacterLevel
     */
	
    public ?int $baseCharacterLevel = null;
    
    /**
     * The unique identifier for the character.
     * 
     * @var ?int $characterId
     */
	
    public ?int $characterId = null;
    
    /**
     * Use this hash to look up the character's DestinyClassDefinition.
     * 
     * @var ?int $classHash
     */
	
    public ?int $classHash = null;
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's class.
     * 
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     * 
     * @var ?int $classType
     */
	
    public ?int $classType = null;
    
    /**
     * The last date that the user played Destiny.
     * 
     * @var ?\DateTime $dateLastPlayed
     */
	
    public ?\DateTime $dateLastPlayed = null;
    
    /**
     * A shortcut path to the user's currently equipped emblem background image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     * 
     * @var ?string $emblemBackgroundPath
     */
	
    public ?string $emblemBackgroundPath = null;
    
    /**
     * A shortcut for getting the background color of the user's currently equipped emblem without having to do a DestinyInventoryItemDefinition lookup.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyEntitiesCharactersDestinyCharacterComponentEmblemColor $emblemColor
     */
	
    public ?DestinyEntitiesCharactersDestinyCharacterComponentEmblemColor $emblemColor = null;
    
    /**
     * The hash of the currently equipped emblem for the user. Can be used to look up the DestinyInventoryItemDefinition.
     * 
     * @var ?int $emblemHash
     */
	
    public ?int $emblemHash = null;
    
    /**
     * A shortcut path to the user's currently equipped emblem image. If you're just showing summary info for a user, this is more convenient than examining their equipped emblem and looking up the definition.
     * 
     * @var ?string $emblemPath
     */
	
    public ?string $emblemPath = null;
    
    /**
     * Use this hash to look up the character's DestinyGenderDefinition.
     * 
     * @var ?int $genderHash
     */
	
    public ?int $genderHash = null;
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's Gender.
     * 
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove. And yeah, it's an enumeration and not a boolean. Fight me.
     * 
     * @var ?int $genderType
     */
	
    public ?int $genderType = null;
    
    /**
     * The progression that indicates your character's level. Not their light level, but their character level: you know, the thing you max out a couple hours in and then ignore for the sake of light level.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DestinyEntitiesCharactersDestinyCharacterComponentLevelProgression $levelProgression
     */
	
    public ?DestinyEntitiesCharactersDestinyCharacterComponentLevelProgression $levelProgression = null;
    
    /**
     * The user's calculated "Light Level". Light level is an indicator of your power that mostly matters in the end game, once you've reached the maximum character level: it's a level that's dependent on the average Attack/Defense power of your items.
     * 
     * @var ?int $light
     */
	
    public ?int $light = null;
    
    /**
     * Every Destiny Profile has a membershipId. This is provided on the character as well for convenience.
     * 
     * @var ?int $membershipId
     */
	
    public ?int $membershipId = null;
    
    /**
     * membershipType tells you the platform on which the character plays. Examine the BungieMembershipType enumeration for possible values.
     * 
     * @var ?int $membershipType
     */
	
    public ?int $membershipType = null;
    
    /**
     * If the user is currently playing, this is how long they've been playing.
     * 
     * @var ?int $minutesPlayedThisSession
     */
	
    public ?int $minutesPlayedThisSession = null;
    
    /**
     * If this value is 525,600, then they played Destiny for a year. Or they're a very dedicated Rent fan. Note that this includes idle time, not just time spent actually in activities shooting things.
     * 
     * @var ?int $minutesPlayedTotal
     */
	
    public ?int $minutesPlayedTotal = null;
    
    /**
     * A number between 0 and 100, indicating the whole and fractional % remaining to get to the next character level.
     * 
     * @var ?float $percentToNextLevel
     */
	
    public ?float $percentToNextLevel = null;
    
    /**
     * Use this hash to look up the character's DestinyRaceDefinition.
     * 
     * @var ?int $raceHash
     */
	
    public ?int $raceHash = null;
    
    /**
     * Mostly for historical purposes at this point, this is an enumeration for the character's race.
     * 
     * It'll be preferable in the general case to look up the related definition: but for some people this was too convenient to remove.
     * 
     * @var ?int $raceType
     */
	
    public ?int $raceType = null;
    
    /**
     * Your character's stats, such as Agility, Resilience, etc... *not* historical stats.
     * 
     * You'll have to call a different endpoint for those.
     * 
     * @var ?array<string, int> $stats
     */
	
    public ?array $stats = null;
    
    /**
     * If this Character has a title assigned to it, this is the identifier of the DestinyRecordDefinition that has that title information.
     * 
     * @var ?int $titleRecordHash
     */
	
    public ?int $titleRecordHash = null;
    
	public function __construct()
	{
		$this->baseCharacterLevel = null;
		$this->characterId = null;
		$this->classHash = null;
		$this->classType = null;
		$this->dateLastPlayed = null;
		$this->emblemBackgroundPath = null;
		$this->emblemColor = null;
		$this->emblemHash = null;
		$this->emblemPath = null;
		$this->genderHash = null;
		$this->genderType = null;
		$this->levelProgression = null;
		$this->light = null;
		$this->membershipId = null;
		$this->membershipType = null;
		$this->minutesPlayedThisSession = null;
		$this->minutesPlayedTotal = null;
		$this->percentToNextLevel = null;
		$this->raceHash = null;
		$this->raceType = null;
		$this->stats = null;
		$this->titleRecordHash = null;
	}
}
