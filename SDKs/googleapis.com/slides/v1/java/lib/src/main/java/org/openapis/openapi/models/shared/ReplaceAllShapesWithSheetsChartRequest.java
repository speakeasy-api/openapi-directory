/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ReplaceAllShapesWithSheetsChartRequest - Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
 */
public class ReplaceAllShapesWithSheetsChartRequest {
    /**
     * The ID of the specific chart in the Google Sheets spreadsheet.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chartId")
    public Integer chartId;

    public ReplaceAllShapesWithSheetsChartRequest withChartId(Integer chartId) {
        this.chartId = chartId;
        return this;
    }
    
    /**
     * A criteria that matches a specific string of text in a shape or table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("containsText")
    public SubstringMatchCriteria containsText;

    public ReplaceAllShapesWithSheetsChartRequest withContainsText(SubstringMatchCriteria containsText) {
        this.containsText = containsText;
        return this;
    }
    
    /**
     * The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkingMode")
    public ReplaceAllShapesWithSheetsChartRequestLinkingModeEnum linkingMode;

    public ReplaceAllShapesWithSheetsChartRequest withLinkingMode(ReplaceAllShapesWithSheetsChartRequestLinkingModeEnum linkingMode) {
        this.linkingMode = linkingMode;
        return this;
    }
    
    /**
     * If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pageObjectIds")
    public String[] pageObjectIds;

    public ReplaceAllShapesWithSheetsChartRequest withPageObjectIds(String[] pageObjectIds) {
        this.pageObjectIds = pageObjectIds;
        return this;
    }
    
    /**
     * The ID of the Google Sheets spreadsheet that contains the chart.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spreadsheetId")
    public String spreadsheetId;

    public ReplaceAllShapesWithSheetsChartRequest withSpreadsheetId(String spreadsheetId) {
        this.spreadsheetId = spreadsheetId;
        return this;
    }
    
    public ReplaceAllShapesWithSheetsChartRequest(){}
}
