"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Root:
    r"""Response"""
    
    authorizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizations_url') }})  
    code_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_search_url') }})  
    commit_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('commit_search_url') }})  
    current_user_authorizations_html_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_authorizations_html_url') }})  
    current_user_repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_repositories_url') }})  
    current_user_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_user_url') }})  
    emails_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emails_url') }})  
    emojis_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emojis_url') }})  
    events_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events_url') }})  
    feeds_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('feeds_url') }})  
    followers_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('followers_url') }})  
    following_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('following_url') }})  
    gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gists_url') }})  
    hub_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hub_url') }})  
    issue_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issue_search_url') }})  
    issues_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issues_url') }})  
    keys_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keys_url') }})  
    label_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_search_url') }})  
    notifications_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications_url') }})  
    organization_repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_repositories_url') }})  
    organization_teams_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_teams_url') }})  
    organization_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_url') }})  
    public_gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('public_gists_url') }})  
    rate_limit_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rate_limit_url') }})  
    repository_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_search_url') }})  
    repository_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('repository_url') }})  
    starred_gists_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_gists_url') }})  
    starred_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('starred_url') }})  
    user_organizations_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_organizations_url') }})  
    user_repositories_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_repositories_url') }})  
    user_search_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_search_url') }})  
    user_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_url') }})  
    topic_search_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_search_url'), 'exclude': lambda f: f is None }})  
    