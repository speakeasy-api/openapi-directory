"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def servicedirectory_projects_locations_list(self, request: operations.ServicedirectoryProjectsLocationsListRequest, security: operations.ServicedirectoryProjectsLocationsListSecurity) -> operations.ServicedirectoryProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def servicedirectory_projects_locations_namespaces_create(self, request: operations.ServicedirectoryProjectsLocationsNamespacesCreateRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesCreateSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesCreateResponse:
        r"""Creates a namespace, and returns the new namespace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesCreateRequest, base_url, '/v1/{parent}/namespaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "namespace_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Namespace])
                res.namespace = out

        return res

    def servicedirectory_projects_locations_namespaces_list(self, request: operations.ServicedirectoryProjectsLocationsNamespacesListRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesListSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesListResponse:
        r"""Lists all namespaces."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesListRequest, base_url, '/v1/{parent}/namespaces', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListNamespacesResponse])
                res.list_namespaces_response = out

        return res

    def servicedirectory_projects_locations_namespaces_services_create(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse:
        r"""Creates a service, and returns the new service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest, base_url, '/v1/{parent}/services', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "service_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Service])
                res.service = out

        return res

    def servicedirectory_projects_locations_namespaces_services_endpoints_create(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse:
        r"""Creates an endpoint, and returns the new endpoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest, base_url, '/v1/{parent}/endpoints', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "endpoint_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Endpoint])
                res.endpoint = out

        return res

    def servicedirectory_projects_locations_namespaces_services_endpoints_delete(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse:
        r"""Deletes an endpoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def servicedirectory_projects_locations_namespaces_services_endpoints_get(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse:
        r"""Gets an endpoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Endpoint])
                res.endpoint = out

        return res

    def servicedirectory_projects_locations_namespaces_services_endpoints_list(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse:
        r"""Lists all endpoints."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest, base_url, '/v1/{parent}/endpoints', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListEndpointsResponse])
                res.list_endpoints_response = out

        return res

    def servicedirectory_projects_locations_namespaces_services_endpoints_patch(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse:
        r"""Updates an endpoint."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "endpoint_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesEndpointsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Endpoint])
                res.endpoint = out

        return res

    def servicedirectory_projects_locations_namespaces_services_get_iam_policy(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicySecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyResponse:
        r"""Gets the IAM Policy for a resource (namespace or service only)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyRequest, base_url, '/v1/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def servicedirectory_projects_locations_namespaces_services_list(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesListRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesListSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesListResponse:
        r"""Lists all services belonging to a namespace."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesListRequest, base_url, '/v1/{parent}/services', request)
        
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListServicesResponse])
                res.list_services_response = out

        return res

    def servicedirectory_projects_locations_namespaces_services_resolve(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse:
        r"""Returns a service and its associated endpoints. Resolving a service is not considered an active developer method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest, base_url, '/v1/{name}:resolve', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "resolve_service_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesResolveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResolveServiceResponse])
                res.resolve_service_response = out

        return res

    def servicedirectory_projects_locations_namespaces_services_set_iam_policy(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicySecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyResponse:
        r"""Sets the IAM Policy for a resource (namespace or service only)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyRequest, base_url, '/v1/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def servicedirectory_projects_locations_namespaces_services_test_iam_permissions(self, request: operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsRequest, security: operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsSecurity) -> operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsResponse:
        r"""Tests IAM permissions for a resource (namespace or service only)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsRequest, base_url, '/v1/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServicedirectoryProjectsLocationsNamespacesServicesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    