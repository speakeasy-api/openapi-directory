"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyIpamResourceCidrResult = exports.ModifyIpamResourceCidrResultIpamResourceCidr = exports.ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrResourceTags = exports.ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * The compliance status of the IPAM resource. For more information on compliance statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum;
(function (ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum) {
    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum["Compliant"] = "compliant";
    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum["Noncompliant"] = "noncompliant";
    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum["Unmanaged"] = "unmanaged";
    ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum["Ignored"] = "ignored";
})(ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum || (exports.ModifyIpamResourceCidrResultIpamResourceCidrComplianceStatusEnum = {}));
/**
 * The management state of the resource. For more information about management states, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum;
(function (ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum) {
    ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum["Managed"] = "managed";
    ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum["Unmanaged"] = "unmanaged";
    ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum["Ignored"] = "ignored";
})(ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum || (exports.ModifyIpamResourceCidrResultIpamResourceCidrManagementStateEnum = {}));
/**
 * The overlap status of an IPAM resource. The overlap status tells you if the CIDR for a resource overlaps with another CIDR in the scope. For more information on overlap statuses, see <a href="https://docs.aws.amazon.com/vpc/latest/ipam/monitor-cidr-compliance-ipam.html">Monitor CIDR usage by resource</a> in the <i>Amazon VPC IPAM User Guide</i>.
 */
var ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum;
(function (ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum) {
    ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum["Overlapping"] = "overlapping";
    ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum["Nonoverlapping"] = "nonoverlapping";
    ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum["Ignored"] = "ignored";
})(ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum || (exports.ModifyIpamResourceCidrResultIpamResourceCidrOverlapStatusEnum = {}));
/**
 * The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.
 */
var ModifyIpamResourceCidrResultIpamResourceCidrResourceTags = /** @class */ (function (_super) {
    __extends(ModifyIpamResourceCidrResultIpamResourceCidrResourceTags, _super);
    function ModifyIpamResourceCidrResultIpamResourceCidrResourceTags() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidrResourceTags.prototype, "key", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidrResourceTags.prototype, "value", void 0);
    return ModifyIpamResourceCidrResultIpamResourceCidrResourceTags;
}(utils_1.SpeakeasyBase));
exports.ModifyIpamResourceCidrResultIpamResourceCidrResourceTags = ModifyIpamResourceCidrResultIpamResourceCidrResourceTags;
/**
 * The type of IPAM resource.
 */
var ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum;
(function (ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum) {
    ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum["Vpc"] = "vpc";
    ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum["Subnet"] = "subnet";
    ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum["Eip"] = "eip";
    ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum["PublicIpv4Pool"] = "public-ipv4-pool";
    ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum["Ipv6Pool"] = "ipv6-pool";
})(ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = exports.ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum || (exports.ModifyIpamResourceCidrResultIpamResourceCidrResourceTypeEnum = {}));
/**
 * The CIDR of the resource.
 */
var ModifyIpamResourceCidrResultIpamResourceCidr = /** @class */ (function (_super) {
    __extends(ModifyIpamResourceCidrResultIpamResourceCidr, _super);
    function ModifyIpamResourceCidrResultIpamResourceCidr() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "complianceStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "ipUsage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "ipamId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "ipamPoolId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "ipamScopeId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "managementState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "overlapStatus", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceCidr", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceOwnerId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceRegion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            elemType: ModifyIpamResourceCidrResultIpamResourceCidrResourceTags,
        }),
        __metadata("design:type", Array)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceTags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "resourceType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], ModifyIpamResourceCidrResultIpamResourceCidr.prototype, "vpcId", void 0);
    return ModifyIpamResourceCidrResultIpamResourceCidr;
}(utils_1.SpeakeasyBase));
exports.ModifyIpamResourceCidrResultIpamResourceCidr = ModifyIpamResourceCidrResultIpamResourceCidr;
/**
 * Success
 */
var ModifyIpamResourceCidrResult = /** @class */ (function (_super) {
    __extends(ModifyIpamResourceCidrResult, _super);
    function ModifyIpamResourceCidrResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", ModifyIpamResourceCidrResultIpamResourceCidr)
    ], ModifyIpamResourceCidrResult.prototype, "ipamResourceCidr", void 0);
    return ModifyIpamResourceCidrResult;
}(utils_1.SpeakeasyBase));
exports.ModifyIpamResourceCidrResult = ModifyIpamResourceCidrResult;
