<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class EntityConnections 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Multi-entity: List connections
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * Retrieves information about certain connections for a specified entity. You can specify the entity to retrieve in the `Zuora-Entity-Ids` request header.
     * 
     * You can retrieve:
     *  - Inbound connections
     *  - Outbound connections
     *  - Both inbound and outbound connections
     * 
     * ## User Access Permission
     * You can make the call as any entity user. 
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsResponse
     */
	public function getEntityConnections(
        \OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/entity-connections');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GETEntityConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getEntityConnectionsResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GETEntityConnectionsResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Initiate a connection request
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * Initiates a connection request from a source entity to a target entity.
     * 
     * ## User Access Permission
     * You must make the call as a source entity administrator. Also, this administrator must have permission to access to the target entity.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\POSTEntityConnectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\POSTEntityConnectionsResponse
     */
	public function postEntityConnections(
        \OpenAPI\OpenAPI\Models\Operations\POSTEntityConnectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\POSTEntityConnectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/entity-connections');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "postEntityConnectionsType", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\POSTEntityConnectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postEntityConnectionsResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\POSTEntityConnectionsResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Accept a connection request
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * Accepts a connection request.
     * 
     * ## User Access Permission
     * You must make the call as an entity administrator to accept a connection request.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptResponse
     */
	public function putEntityConnectionsAccept(
        \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/entity-connections/{connection-id}/accept', \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsAcceptResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putEntityConnectionsAcceptResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTEntityConnectionsAcceptResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Deny a connection request
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * Denies a connection request.
     * 
     * ## User Access Permission
     * You must make the call as an entity administrator to deny a connection request.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyResponse
     */
	public function putEntityConnectionsDeny(
        \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/entity-connections/{connection-id}/deny', \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDenyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putEntityConnectionsDenyResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTEntityConnectionsDenyResponseType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Multi-entity: Disconnect a connection
     * 
     * **Note:** The Multi-entity feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).
     * 
     * Disconnects an established connection. If you have shared objects from a global entity to a target entity, disconnecting the connection will break the mapping relationship between these entities and cannot be recovered later.
     * 
     * ## User Access Permission
     * You must make the call as an administrator of the target entity or source entity.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectResponse
     */
	public function putEntityConnectionsDisconnect(
        \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/entity-connections/{connection-id}/disconnect', \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_defaultClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PUTEntityConnectionsDisconnectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putEntityConnectionsDisconnectResponseType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PUTEntityConnectionsDisconnectResponseType', 'json');
            }
        }

        return $response;
    }
}