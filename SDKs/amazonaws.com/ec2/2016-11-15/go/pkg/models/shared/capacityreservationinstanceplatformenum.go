// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type CapacityReservationInstancePlatformEnum string

const (
	CapacityReservationInstancePlatformEnumLinuxUnix                        CapacityReservationInstancePlatformEnum = "Linux/UNIX"
	CapacityReservationInstancePlatformEnumRedHatEnterpriseLinux            CapacityReservationInstancePlatformEnum = "Red Hat Enterprise Linux"
	CapacityReservationInstancePlatformEnumSuseLinux                        CapacityReservationInstancePlatformEnum = "SUSE Linux"
	CapacityReservationInstancePlatformEnumWindows                          CapacityReservationInstancePlatformEnum = "Windows"
	CapacityReservationInstancePlatformEnumWindowsWithSQLServer             CapacityReservationInstancePlatformEnum = "Windows with SQL Server"
	CapacityReservationInstancePlatformEnumWindowsWithSQLServerEnterprise   CapacityReservationInstancePlatformEnum = "Windows with SQL Server Enterprise"
	CapacityReservationInstancePlatformEnumWindowsWithSQLServerStandard     CapacityReservationInstancePlatformEnum = "Windows with SQL Server Standard"
	CapacityReservationInstancePlatformEnumWindowsWithSQLServerWeb          CapacityReservationInstancePlatformEnum = "Windows with SQL Server Web"
	CapacityReservationInstancePlatformEnumLinuxWithSQLServerStandard       CapacityReservationInstancePlatformEnum = "Linux with SQL Server Standard"
	CapacityReservationInstancePlatformEnumLinuxWithSQLServerWeb            CapacityReservationInstancePlatformEnum = "Linux with SQL Server Web"
	CapacityReservationInstancePlatformEnumLinuxWithSQLServerEnterprise     CapacityReservationInstancePlatformEnum = "Linux with SQL Server Enterprise"
	CapacityReservationInstancePlatformEnumRhelWithSQLServerStandard        CapacityReservationInstancePlatformEnum = "RHEL with SQL Server Standard"
	CapacityReservationInstancePlatformEnumRhelWithSQLServerEnterprise      CapacityReservationInstancePlatformEnum = "RHEL with SQL Server Enterprise"
	CapacityReservationInstancePlatformEnumRhelWithSQLServerWeb             CapacityReservationInstancePlatformEnum = "RHEL with SQL Server Web"
	CapacityReservationInstancePlatformEnumRhelWithHa                       CapacityReservationInstancePlatformEnum = "RHEL with HA"
	CapacityReservationInstancePlatformEnumRhelWithHaAndSQLServerStandard   CapacityReservationInstancePlatformEnum = "RHEL with HA and SQL Server Standard"
	CapacityReservationInstancePlatformEnumRhelWithHaAndSQLServerEnterprise CapacityReservationInstancePlatformEnum = "RHEL with HA and SQL Server Enterprise"
)

func (e *CapacityReservationInstancePlatformEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Linux/UNIX":
		fallthrough
	case "Red Hat Enterprise Linux":
		fallthrough
	case "SUSE Linux":
		fallthrough
	case "Windows":
		fallthrough
	case "Windows with SQL Server":
		fallthrough
	case "Windows with SQL Server Enterprise":
		fallthrough
	case "Windows with SQL Server Standard":
		fallthrough
	case "Windows with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Standard":
		fallthrough
	case "Linux with SQL Server Web":
		fallthrough
	case "Linux with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Standard":
		fallthrough
	case "RHEL with SQL Server Enterprise":
		fallthrough
	case "RHEL with SQL Server Web":
		fallthrough
	case "RHEL with HA":
		fallthrough
	case "RHEL with HA and SQL Server Standard":
		fallthrough
	case "RHEL with HA and SQL Server Enterprise":
		*e = CapacityReservationInstancePlatformEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CapacityReservationInstancePlatformEnum: %s", s)
	}
}
