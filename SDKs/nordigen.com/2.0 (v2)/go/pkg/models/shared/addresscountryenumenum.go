// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AddressCountryEnumEnum - * `AT` - Austria
// * `BE` - Belgium
// * `BG` - Bulgaria
// * `HR` - Croatia
// * `CY` - Cyprus
// * `CZ` - Czechia
// * `DK` - Denmark
// * `EE` - Estonia
// * `FI` - Finland
// * `FR` - France
// * `DE` - Germany
// * `GR` - Greece
// * `HU` - Hungary
// * `IS` - Iceland
// * `IE` - Ireland
// * `IT` - Italy
// * `LV` - Latvia
// * `LI` - Liechtenstein
// * `LT` - Lithuania
// * `LU` - Luxembourg
// * `MT` - Malta
// * `NL` - Netherlands
// * `NO` - Norway
// * `PL` - Poland
// * `PT` - Portugal
// * `RO` - Romania
// * `SK` - Slovakia
// * `SI` - Slovenia
// * `ES` - Spain
// * `SE` - Sweden
// * `GB` - United Kingdom
// * `US` - United States of America
type AddressCountryEnumEnum string

const (
	AddressCountryEnumEnumAt AddressCountryEnumEnum = "AT"
	AddressCountryEnumEnumBe AddressCountryEnumEnum = "BE"
	AddressCountryEnumEnumBg AddressCountryEnumEnum = "BG"
	AddressCountryEnumEnumHr AddressCountryEnumEnum = "HR"
	AddressCountryEnumEnumCy AddressCountryEnumEnum = "CY"
	AddressCountryEnumEnumCz AddressCountryEnumEnum = "CZ"
	AddressCountryEnumEnumDk AddressCountryEnumEnum = "DK"
	AddressCountryEnumEnumEe AddressCountryEnumEnum = "EE"
	AddressCountryEnumEnumFi AddressCountryEnumEnum = "FI"
	AddressCountryEnumEnumFr AddressCountryEnumEnum = "FR"
	AddressCountryEnumEnumDe AddressCountryEnumEnum = "DE"
	AddressCountryEnumEnumGr AddressCountryEnumEnum = "GR"
	AddressCountryEnumEnumHu AddressCountryEnumEnum = "HU"
	AddressCountryEnumEnumIs AddressCountryEnumEnum = "IS"
	AddressCountryEnumEnumIe AddressCountryEnumEnum = "IE"
	AddressCountryEnumEnumIt AddressCountryEnumEnum = "IT"
	AddressCountryEnumEnumLv AddressCountryEnumEnum = "LV"
	AddressCountryEnumEnumLi AddressCountryEnumEnum = "LI"
	AddressCountryEnumEnumLt AddressCountryEnumEnum = "LT"
	AddressCountryEnumEnumLu AddressCountryEnumEnum = "LU"
	AddressCountryEnumEnumMt AddressCountryEnumEnum = "MT"
	AddressCountryEnumEnumNl AddressCountryEnumEnum = "NL"
	AddressCountryEnumEnumNo AddressCountryEnumEnum = "NO"
	AddressCountryEnumEnumPl AddressCountryEnumEnum = "PL"
	AddressCountryEnumEnumPt AddressCountryEnumEnum = "PT"
	AddressCountryEnumEnumRo AddressCountryEnumEnum = "RO"
	AddressCountryEnumEnumSk AddressCountryEnumEnum = "SK"
	AddressCountryEnumEnumSi AddressCountryEnumEnum = "SI"
	AddressCountryEnumEnumEs AddressCountryEnumEnum = "ES"
	AddressCountryEnumEnumSe AddressCountryEnumEnum = "SE"
	AddressCountryEnumEnumGb AddressCountryEnumEnum = "GB"
	AddressCountryEnumEnumUs AddressCountryEnumEnum = "US"
)

func (e AddressCountryEnumEnum) ToPointer() *AddressCountryEnumEnum {
	return &e
}

func (e *AddressCountryEnumEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AT":
		fallthrough
	case "BE":
		fallthrough
	case "BG":
		fallthrough
	case "HR":
		fallthrough
	case "CY":
		fallthrough
	case "CZ":
		fallthrough
	case "DK":
		fallthrough
	case "EE":
		fallthrough
	case "FI":
		fallthrough
	case "FR":
		fallthrough
	case "DE":
		fallthrough
	case "GR":
		fallthrough
	case "HU":
		fallthrough
	case "IS":
		fallthrough
	case "IE":
		fallthrough
	case "IT":
		fallthrough
	case "LV":
		fallthrough
	case "LI":
		fallthrough
	case "LT":
		fallthrough
	case "LU":
		fallthrough
	case "MT":
		fallthrough
	case "NL":
		fallthrough
	case "NO":
		fallthrough
	case "PL":
		fallthrough
	case "PT":
		fallthrough
	case "RO":
		fallthrough
	case "SK":
		fallthrough
	case "SI":
		fallthrough
	case "ES":
		fallthrough
	case "SE":
		fallthrough
	case "GB":
		fallthrough
	case "US":
		*e = AddressCountryEnumEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddressCountryEnumEnum: %v", v)
	}
}
