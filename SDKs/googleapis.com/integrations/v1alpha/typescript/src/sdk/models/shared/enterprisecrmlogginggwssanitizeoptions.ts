/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

export enum EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeEnum {
  LogTypeUnspecified = "LOG_TYPE_UNSPECIFIED",
  Gws = "GWS",
  Gts = "GTS",
  All = "ALL",
}

export enum EnterpriseCrmLoggingGwsSanitizeOptionsPrivacyEnum {
  PrivacyTypeUnspecified = "PRIVACY_TYPE_UNSPECIFIED",
  NotPii = "NOT_PII",
  Pii = "PII",
  Spii = "SPII",
  Unsure = "UNSURE",
}

export enum EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeTypeEnum {
  SanitizeTypeUnspecified = "SANITIZE_TYPE_UNSPECIFIED",
  Scrub = "SCRUB",
  Anonymize = "ANONYMIZE",
  AnonymizeLimitedRepeatable = "ANONYMIZE_LIMITED_REPEATABLE",
  Obfuscate = "OBFUSCATE",
  Encrypt = "ENCRYPT",
  DoNotSanitize = "DO_NOT_SANITIZE",
}

/**
 * Identifies whether a field contains, or may contain, PII or sensitive data, and how to sanitize the field if it does. If a field's privacy type cannot be determined then it is sanitized (e.g., scrubbed). The specific sanitizer implementation is determined by run-time configuration and environment options (e.g., prod vs. qa). next_id: 5
 */
export class EnterpriseCrmLoggingGwsSanitizeOptions extends SpeakeasyBase {
  /**
   * If true, the value has already been sanitized and needs no further sanitization. For instance, a D3 customer id is already an obfuscated entity and *might not* need further sanitization.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isAlreadySanitized" })
  isAlreadySanitized?: boolean;

  /**
   * To which type(s) of logs the sanitize options apply.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "logType" })
  logType?: EnterpriseCrmLoggingGwsSanitizeOptionsLogTypeEnum[];

  @SpeakeasyMetadata()
  @Expose({ name: "privacy" })
  privacy?: EnterpriseCrmLoggingGwsSanitizeOptionsPrivacyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "sanitizeType" })
  sanitizeType?: EnterpriseCrmLoggingGwsSanitizeOptionsSanitizeTypeEnum;
}
