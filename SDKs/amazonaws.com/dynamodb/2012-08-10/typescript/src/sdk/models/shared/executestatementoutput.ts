/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { AttributeValue } from "./attributevalue";
import { ConsumedCapacity } from "./consumedcapacity";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class ExecuteStatementOutput extends SpeakeasyBase {
  /**
   * The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the request asked for it. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ConsumedCapacity" })
  @Type(() => ConsumedCapacity)
  consumedCapacity?: ConsumedCapacity;

  @SpeakeasyMetadata({ elemType: AttributeValue, elemDepth: 2 })
  @Expose({ name: "Items" })
  @Transform(
    ({ value }) => {
      const arr: Record<string, AttributeValue>[] = [];
      for (const item of value) {
        arr.push(objectToClass(item, AttributeValue));
      }
      return arr;
    },
    { toClassOnly: true }
  )
  items?: Record<string, AttributeValue>[];

  @SpeakeasyMetadata({ elemType: AttributeValue })
  @Expose({ name: "LastEvaluatedKey" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, AttributeValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], AttributeValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  lastEvaluatedKey?: Record<string, AttributeValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "NextToken" })
  nextToken?: string;
}
