// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ReleasesAvailableToTesterSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ReleasesAvailableToTesterRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// when *true*, filters out releases that were uploaded but were never distributed. Releases that under deleted distribution groups will not be filtered out.
	PublishedOnly *bool `queryParam:"style=form,explode=true,name=published_only"`
}

// ReleasesAvailableToTester200ApplicationJSONBuild - Build information for the release
type ReleasesAvailableToTester200ApplicationJSONBuild struct {
	// The branch name of the build producing the release
	BranchName *string `json:"branch_name,omitempty"`
	// The commit hash of the build producing the release
	CommitHash *string `json:"commit_hash,omitempty"`
	// The commit message of the build producing the release
	CommitMessage *string `json:"commit_message,omitempty"`
}

// ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum - OBSOLETE. Will be removed in next version. The destination type.<br>
// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
type ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum string

const (
	ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnumGroup  ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum = "group"
	ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnumStore  ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum = "store"
	ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnumTester ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum = "tester"
)

func (e *ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum: %s", s)
	}
}

// ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum - Destination can be either store or group.
type ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum string

const (
	ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnumGroup  ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum = "group"
	ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnumStore  ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum = "store"
	ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnumTester ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum = "tester"
)

func (e *ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		fallthrough
	case "tester":
		*e = ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum: %s", s)
	}
}

// ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum string

const (
	ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnumIntune     ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum = "intune"
	ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnumGoogleplay ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum = "googleplay"
	ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnumApple      ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum = "apple"
	ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnumNone       ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum = "none"
)

func (e *ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum: %s", s)
	}
}

// ReleasesAvailableToTester200ApplicationJSONDestinations - A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
type ReleasesAvailableToTester200ApplicationJSONDestinations struct {
	// Destination can be either store or group.
	DestinationType *ReleasesAvailableToTester200ApplicationJSONDestinationsDestinationTypeEnum `json:"destination_type,omitempty"`
	// Display name for the group or tester
	DisplayName *string `json:"display_name,omitempty"`
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesAvailableToTester200ApplicationJSONDestinationsTypeEnum `json:"type,omitempty"`
}

type ReleasesAvailableToTester200ApplicationJSONDistributionGroups struct {
	// ID identifying a unique distribution group.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution group.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution group.
	Name *string `json:"name,omitempty"`
}

// ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum - type of the distribution store currently stores type can be intune, googleplay or windows.
type ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum string

const (
	ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnumIntune     ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum = "intune"
	ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnumGoogleplay ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
	ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnumApple      ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum = "apple"
	ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnumNone       ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum = "none"
)

func (e *ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		fallthrough
	case "apple":
		fallthrough
	case "none":
		*e = ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum: %s", s)
	}
}

type ReleasesAvailableToTester200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID string `json:"id"`
	// Is the containing release the latest one in this distribution store.
	IsLatest *bool `json:"is_latest,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune, googleplay or windows.
	Type *ReleasesAvailableToTester200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// ReleasesAvailableToTester200ApplicationJSONOriginEnum - The release's origin
type ReleasesAvailableToTester200ApplicationJSONOriginEnum string

const (
	ReleasesAvailableToTester200ApplicationJSONOriginEnumHockeyapp ReleasesAvailableToTester200ApplicationJSONOriginEnum = "hockeyapp"
	ReleasesAvailableToTester200ApplicationJSONOriginEnumAppcenter ReleasesAvailableToTester200ApplicationJSONOriginEnum = "appcenter"
)

func (e *ReleasesAvailableToTester200ApplicationJSONOriginEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "hockeyapp":
		fallthrough
	case "appcenter":
		*e = ReleasesAvailableToTester200ApplicationJSONOriginEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReleasesAvailableToTester200ApplicationJSONOriginEnum: %s", s)
	}
}

// ReleasesAvailableToTester200ApplicationJSON - Basic information on a release
type ReleasesAvailableToTester200ApplicationJSON struct {
	// Build information for the release
	//
	Build *ReleasesAvailableToTester200ApplicationJSONBuild `json:"build,omitempty"`
	// OBSOLETE. Will be removed in next version. The destination type.<br>
	// <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
	// <b>store</b>: The release distributed to external stores and distribution_stores details will be returned. <br>
	//
	DestinationType *ReleasesAvailableToTester200ApplicationJSONDestinationTypeEnum `json:"destination_type,omitempty"`
	// A list of distribution groups or stores.
	Destinations []ReleasesAvailableToTester200ApplicationJSONDestinations `json:"destinations,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
	DistributionGroups []ReleasesAvailableToTester200ApplicationJSONDistributionGroups `json:"distribution_groups,omitempty"`
	// OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
	DistributionStores []ReleasesAvailableToTester200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// This value determines the whether a release currently is enabled or disabled.
	Enabled bool `json:"enabled"`
	// The file extension of the main (user-uploaded) package file.
	FileExtension *string `json:"file_extension,omitempty"`
	// ID identifying this unique release.
	ID int64 `json:"id"`
	// This value determines if a release is external or not.
	IsExternalBuild *bool `json:"is_external_build,omitempty"`
	// The release's origin
	Origin *ReleasesAvailableToTester200ApplicationJSONOriginEnum `json:"origin,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.<br>
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion string `json:"short_version"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt string `json:"uploaded_at"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.<br>
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version string `json:"version"`
}

type ReleasesAvailableToTesterResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ReleasesAvailableToTester200ApplicationJSONObjects []ReleasesAvailableToTester200ApplicationJSON
}
