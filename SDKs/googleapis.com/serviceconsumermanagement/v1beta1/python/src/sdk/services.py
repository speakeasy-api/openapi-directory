"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Services:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def serviceconsumermanagement_services_consumer_quota_metrics_import_producer_overrides(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesResponse:
        r"""Create or update multiple producer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest, base_url, '/v1beta1/{parent}/consumerQuotaMetrics:importProducerOverrides', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_beta1_import_producer_overrides_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsImportProducerOverridesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_limits_get(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetResponse:
        r"""Retrieves a summary of quota information for a specific quota limit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Beta1ConsumerQuotaLimit])
                res.v1_beta1_consumer_quota_limit = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_limits_producer_overrides_create(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateResponse:
        r"""Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present (\\"upsert\\" semantics), use ImportProducerOverrides instead."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest, base_url, '/v1beta1/{parent}/producerOverrides', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_beta1_quota_override", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_limits_producer_overrides_delete(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteResponse:
        r"""Deletes a producer override."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest, base_url, '/v1beta1/{name}', request)
        
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_limits_producer_overrides_list(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListResponse:
        r"""Lists all producer overrides on this limit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest, base_url, '/v1beta1/{parent}/producerOverrides', request)
        
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Beta1ListProducerOverridesResponse])
                res.v1_beta1_list_producer_overrides_response = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_limits_producer_overrides_patch(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchResponse:
        r"""Updates a producer override."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest, base_url, '/v1beta1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_beta1_quota_override", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsLimitsProducerOverridesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def serviceconsumermanagement_services_consumer_quota_metrics_list(self, request: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest, security: operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListSecurity) -> operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListResponse:
        r"""Retrieves a summary of all quota information about this consumer that is visible to the service producer, for each quota metric defined by the service. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest, base_url, '/v1beta1/{parent}/consumerQuotaMetrics', request)
        
        query_params = utils.get_query_params(operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ServiceconsumermanagementServicesConsumerQuotaMetricsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Beta1ListConsumerQuotaMetricsResponse])
                res.v1_beta1_list_consumer_quota_metrics_response = out

        return res

    