// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type TeamsUpdateInOrgPathParams struct {
	// The organization name. The name is not case sensitive.
	Org string `pathParam:"style=simple,explode=false,name=org"`
	// The slug of the team name.
	TeamSlug string `pathParam:"style=simple,explode=false,name=team_slug"`
}

// TeamsUpdateInOrgRequestBodyPermissionEnum - **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
type TeamsUpdateInOrgRequestBodyPermissionEnum string

const (
	TeamsUpdateInOrgRequestBodyPermissionEnumPull  TeamsUpdateInOrgRequestBodyPermissionEnum = "pull"
	TeamsUpdateInOrgRequestBodyPermissionEnumPush  TeamsUpdateInOrgRequestBodyPermissionEnum = "push"
	TeamsUpdateInOrgRequestBodyPermissionEnumAdmin TeamsUpdateInOrgRequestBodyPermissionEnum = "admin"
)

func (e *TeamsUpdateInOrgRequestBodyPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pull":
		fallthrough
	case "push":
		fallthrough
	case "admin":
		*e = TeamsUpdateInOrgRequestBodyPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdateInOrgRequestBodyPermissionEnum: %s", s)
	}
}

// TeamsUpdateInOrgRequestBodyPrivacyEnum - The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
// **For a non-nested team:**
//   - `secret` - only visible to organization owners and members of this team.
//   - `closed` - visible to all members of this organization.
//
// **For a parent or child team:**
//   - `closed` - visible to all members of this organization.
type TeamsUpdateInOrgRequestBodyPrivacyEnum string

const (
	TeamsUpdateInOrgRequestBodyPrivacyEnumSecret TeamsUpdateInOrgRequestBodyPrivacyEnum = "secret"
	TeamsUpdateInOrgRequestBodyPrivacyEnumClosed TeamsUpdateInOrgRequestBodyPrivacyEnum = "closed"
)

func (e *TeamsUpdateInOrgRequestBodyPrivacyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "secret":
		fallthrough
	case "closed":
		*e = TeamsUpdateInOrgRequestBodyPrivacyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamsUpdateInOrgRequestBodyPrivacyEnum: %s", s)
	}
}

type TeamsUpdateInOrgRequestBody struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// The ID of a team to set as the parent team.
	ParentTeamID *int64 `json:"parent_team_id,omitempty"`
	// **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
	Permission *TeamsUpdateInOrgRequestBodyPermissionEnum `json:"permission,omitempty"`
	// The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
	// **For a non-nested team:**
	//  * `secret` - only visible to organization owners and members of this team.
	//  * `closed` - visible to all members of this organization.
	// **For a parent or child team:**
	//  * `closed` - visible to all members of this organization.
	Privacy *TeamsUpdateInOrgRequestBodyPrivacyEnum `json:"privacy,omitempty"`
}

type TeamsUpdateInOrgRequest struct {
	PathParams TeamsUpdateInOrgPathParams
	Request    *TeamsUpdateInOrgRequestBody `request:"mediaType=application/json"`
}

type TeamsUpdateInOrgResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Forbidden
	BasicError *shared.BasicError
	// Response when the updated information already exists
	TeamFull *shared.TeamFull
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
