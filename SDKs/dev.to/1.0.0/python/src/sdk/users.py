"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Users:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_org_users(self, request: operations.GetOrgUsersRequest) -> operations.GetOrgUsersResponse:
        r"""Organization's users
        This endpoint allows the client to retrieve a list of users belonging to the organization
        
        It supports pagination, each page will contain `30` users by default.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrgUsersRequest, base_url, '/api/organizations/{username}/users', request)
        
        query_params = utils.get_query_params(operations.GetOrgUsersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrgUsersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.User]])
                res.users = out
        elif http_res.status_code == 404:
            pass

        return res

    def get_user(self, request: operations.GetUserRequest) -> operations.GetUserResponse:
        r"""A User
        This endpoint allows the client to retrieve a single user, either by id
        or by the user's username.
        
        For complete documentation, see the v0 API docs: https://developers.forem.com/api/v0#tag/users/operation/getUser
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUserRequest, base_url, '/api/users/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_user_200_application_json_object = out

        return res

    def get_user_all_articles(self, request: operations.GetUserAllArticlesRequest) -> operations.GetUserAllArticlesResponse:
        r"""User's all articles
        This endpoint allows the client to retrieve a list of all articles on behalf of an authenticated user.
        
        \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
        
        It will return both published and unpublished articles with pagination.
        
        Unpublished articles will be at the top of the list in reverse chronological creation order. Published articles will follow in reverse chronological publication order.
        
        By default a page will contain 30 articles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/articles/me/all'
        
        query_params = utils.get_query_params(operations.GetUserAllArticlesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserAllArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArticleIndex]])
                res.article_indices = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_user_articles(self, request: operations.GetUserArticlesRequest) -> operations.GetUserArticlesResponse:
        r"""User's articles
        This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
        
        \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
        
        Published articles will be in reverse chronological publication order.
        
        It will return published articles with pagination. By default a page will contain 30 articles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/articles/me'
        
        query_params = utils.get_query_params(operations.GetUserArticlesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArticleIndex]])
                res.article_indices = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_user_me(self) -> operations.GetUserMeResponse:
        r"""The authenticated user
        This endpoint allows the client to retrieve information about the authenticated user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/users/me'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserMeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_user_me_200_application_json_object = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_user_published_articles(self, request: operations.GetUserPublishedArticlesRequest) -> operations.GetUserPublishedArticlesResponse:
        r"""User's published articles
        This endpoint allows the client to retrieve a list of published articles on behalf of an authenticated user.
        
        \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
        
        Published articles will be in reverse chronological publication order.
        
        It will return published articles with pagination. By default a page will contain 30 articles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/articles/me/published'
        
        query_params = utils.get_query_params(operations.GetUserPublishedArticlesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserPublishedArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArticleIndex]])
                res.article_indices = out
        elif http_res.status_code == 401:
            pass

        return res

    def get_user_unpublished_articles(self, request: operations.GetUserUnpublishedArticlesRequest) -> operations.GetUserUnpublishedArticlesResponse:
        r"""User's unpublished articles
        This endpoint allows the client to retrieve a list of unpublished articles on behalf of an authenticated user.
        
        \"Articles\" are all the posts that users create on DEV that typically show up in the feed. They can be a blog post, a discussion question, a help thread etc. but is referred to as article within the code.
        
        Unpublished articles will be in reverse chronological creation order.
        
        It will return unpublished articles with pagination. By default a page will contain 30 articles.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/articles/me/unpublished'
        
        query_params = utils.get_query_params(operations.GetUserUnpublishedArticlesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUserUnpublishedArticlesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ArticleIndex]])
                res.article_indices = out
        elif http_res.status_code == 401:
            pass

        return res

    def post_admin_users_create(self, request: shared.UserInviteParam) -> operations.PostAdminUsersCreateResponse:
        r"""Invite a User
        This endpoint allows the client to trigger an invitation to the provided email address.
        
                It requires a token from a user with `super_admin` privileges.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/admin/users'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAdminUsersCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def suspend_user(self, request: operations.SuspendUserRequest) -> operations.SuspendUserResponse:
        r"""Suspend a User
        This endpoint allows the client to suspend a user.
        
        The user associated with the API key must have any 'admin' or 'moderator' role.
        
        This specified user will be assigned the 'suspended' role. Suspending a user will stop the
        user from posting new posts and comments. It doesn't delete any of the user's content, just
        prevents them from creating new content while suspended. Users are not notified of their suspension
        in the UI, so if you want them to know about this, you must notify them.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SuspendUserRequest, base_url, '/api/users/{id}/suspend', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SuspendUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def unpublish_user(self, request: operations.UnpublishUserRequest) -> operations.UnpublishUserResponse:
        r"""Unpublish a User's Articles and Comments
        This endpoint allows the client to unpublish all of the articles and
        comments created by a user.
        
        The user associated with the API key must have any 'admin' or 'moderator' role.
        
        This specified user's articles and comments will be unpublished and will no longer be
        visible to the public. They will remain in the database and will set back to draft status
        on the specified user's  dashboard. Any notifications associated with the specified user's
        articles and comments will be deleted.
        
        Note this endpoint unpublishes articles and comments asychronously: it will return a 204 NO CONTENT
        status code immediately, but the articles and comments will not be unpublished until the
        request is completed on the server.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnpublishUserRequest, base_url, '/api/users/{id}/unpublish', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnpublishUserResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    