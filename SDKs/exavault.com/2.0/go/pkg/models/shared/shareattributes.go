// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ShareAttributesStatusEnum - Share activity status. Can be active (1) or deactivated (0).
type ShareAttributesStatusEnum int

const (
	ShareAttributesStatusEnumZero ShareAttributesStatusEnum = 0
	ShareAttributesStatusEnumOne  ShareAttributesStatusEnum = 1
)

func (e ShareAttributesStatusEnum) ToPointer() *ShareAttributesStatusEnum {
	return &e
}

func (e *ShareAttributesStatusEnum) UnmarshalJSON(data []byte) error {
	var v int
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = ShareAttributesStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesStatusEnum: %v", v)
	}
}

// ShareAttributesTrackingStatusEnum - Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
type ShareAttributesTrackingStatusEnum string

const (
	ShareAttributesTrackingStatusEnumComplete   ShareAttributesTrackingStatusEnum = "complete"
	ShareAttributesTrackingStatusEnumIncomplete ShareAttributesTrackingStatusEnum = "incomplete"
	ShareAttributesTrackingStatusEnumPending    ShareAttributesTrackingStatusEnum = "pending"
)

func (e ShareAttributesTrackingStatusEnum) ToPointer() *ShareAttributesTrackingStatusEnum {
	return &e
}

func (e *ShareAttributesTrackingStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "complete":
		fallthrough
	case "incomplete":
		fallthrough
	case "pending":
		*e = ShareAttributesTrackingStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesTrackingStatusEnum: %v", v)
	}
}

// ShareAttributesTypeEnum - Type of share.
type ShareAttributesTypeEnum string

const (
	ShareAttributesTypeEnumSharedFolder ShareAttributesTypeEnum = "shared_folder"
	ShareAttributesTypeEnumSend         ShareAttributesTypeEnum = "send"
	ShareAttributesTypeEnumReceive      ShareAttributesTypeEnum = "receive"
)

func (e ShareAttributesTypeEnum) ToPointer() *ShareAttributesTypeEnum {
	return &e
}

func (e *ShareAttributesTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shared_folder":
		fallthrough
	case "send":
		fallthrough
	case "receive":
		*e = ShareAttributesTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareAttributesTypeEnum: %v", v)
	}
}

// ShareAttributes - Attributes of the share including the name, path and share recipients.
type ShareAttributes struct {
	// Description of the share access rights.
	AccessDescription *string `json:"accessDescription,omitempty"`
	// An object defining what a not-logged-in visitor can do with the share contents
	AccessMode *AccessMode `json:"accessMode,omitempty"`
	// Timestamp of share creation.
	Created *time.Time `json:"created,omitempty"`
	// True if share can be embedded.
	Embed *bool `json:"embed,omitempty"`
	// Expiration date of the share.
	Expiration *string `json:"expiration,omitempty"`
	// True if the share has expired.
	Expired *bool `json:"expired,omitempty"`
	// Flag to show if separate folders should be created for each file upload to receive folder.
	FileDropCreateFolders *bool `json:"fileDropCreateFolders,omitempty"`
	// ID of the form.
	FormID *int64 `json:"formId,omitempty"`
	// True if share has notification.
	HasNotification *bool `json:"hasNotification,omitempty"`
	// True if the share has password.
	HasPassword *bool `json:"hasPassword,omitempty"`
	// Share hash.
	Hash *string `json:"hash,omitempty"`
	// True if share inherited from parent folder.
	Inherited *bool `json:"inherited,omitempty"`
	// Array of invitation messages.
	Messages []ShareMessage `json:"messages,omitempty"`
	// Timestamp of share modification. Can be `null` if it wasn't modified.
	Modified *time.Time `json:"modified,omitempty"`
	// Share name.
	Name *string `json:"name,omitempty"`
	// Share owner's hash.
	OwnerHash *string `json:"ownerHash,omitempty"`
	// Path to the shared resource in your account.
	Paths []string `json:"paths,omitempty"`
	// True if the share has a public url.
	Public *bool `json:"public,omitempty"`
	// Array of recipients.
	Recipients []ShareRecipient `json:"recipients,omitempty"`
	// True if share requires email to access.
	RequireEmail *bool `json:"requireEmail,omitempty"`
	// Invitations resent date. Can be `null` if resent never happened.
	Resent *time.Time `json:"resent,omitempty"`
	// Share activity status. Can be active (1) or deactivated (0).
	Status *ShareAttributesStatusEnum `json:"status,omitempty"`
	// Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)
	TrackingStatus *ShareAttributesTrackingStatusEnum `json:"trackingStatus,omitempty"`
	// Type of share.
	Type *ShareAttributesTypeEnum `json:"type,omitempty"`
}
