"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import electionofficial as shared_electionofficial
from ..shared import simpleaddresstype as shared_simpleaddresstype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AdministrativeBody:
    r"""Information about an election administrative body (e.g. County Board of Elections)."""
    
    absentee_voting_info_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('absenteeVotingInfoUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for information on absentee voting."""  
    ballot_info_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ballotInfoUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body to give contest information to the voter."""  
    correspondence_address: Optional[shared_simpleaddresstype.SimpleAddressType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('correspondenceAddress'), 'exclude': lambda f: f is None }})
    r"""A simple representation of an address."""  
    election_info_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionInfoUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for looking up general election information."""  
    election_notice_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionNoticeText'), 'exclude': lambda f: f is None }})
    r"""A last minute or emergency notification text provided by this administrative body."""  
    election_notice_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionNoticeUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for additional information related to the last minute or emergency notification."""  
    election_officials: Optional[list[shared_electionofficial.ElectionOfficial]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionOfficials'), 'exclude': lambda f: f is None }})
    r"""The election officials for this election administrative body."""  
    election_registration_confirmation_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionRegistrationConfirmationUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for confirming that the voter is registered to vote."""  
    election_registration_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionRegistrationUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for looking up how to register to vote."""  
    election_rules_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('electionRulesUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body describing election rules to the voter."""  
    hours_of_operation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hoursOfOperation'), 'exclude': lambda f: f is None }})
    r"""A description of the hours of operation for this administrative body."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this election administrative body."""  
    physical_address: Optional[shared_simpleaddresstype.SimpleAddressType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('physicalAddress'), 'exclude': lambda f: f is None }})
    r"""A simple representation of an address."""  
    voter_services: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voter_services'), 'exclude': lambda f: f is None }})
    r"""A description of the services this administrative body may provide."""  
    voting_location_finder_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('votingLocationFinderUrl'), 'exclude': lambda f: f is None }})
    r"""A URL provided by this administrative body for looking up where to vote."""  
    