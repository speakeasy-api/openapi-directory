/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PATCHUpdateWorkflowRequestBody {
    /**
     * If true, the workflow will run upon an API callout. This field must be `true` for integrating with the Configurable Payment Retry feature or the Collections Window feature in Collect.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callout_trigger")
    public Boolean calloutTrigger;
    public PATCHUpdateWorkflowRequestBody withCalloutTrigger(Boolean calloutTrigger) {
        this.calloutTrigger = calloutTrigger;
        return this;
    }
    
    /**
     * The description of the workflow defintion
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public PATCHUpdateWorkflowRequestBody withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The cron expression for workflows with scheduled_trigger as `true`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    public String interval;
    public PATCHUpdateWorkflowRequestBody withInterval(String interval) {
        this.interval = interval;
        return this;
    }
    
    /**
     * The name of the workflow definition
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public PATCHUpdateWorkflowRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * If true, the workflow will run when manually initiated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ondemand_trigger")
    public Boolean ondemandTrigger;
    public PATCHUpdateWorkflowRequestBody withOndemandTrigger(Boolean ondemandTrigger) {
        this.ondemandTrigger = ondemandTrigger;
        return this;
    }
    
    /**
     * Can be `High`, `Medium`, or `Low`. Higher-priority workflows take precedence over lower-priority workflows. When a workflow of higher priority is initiated, it will be placed ahead of lower-priority workflows that are running. Depending on the available resources, lower-priority workflows may be paused until resources are released.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    public String priority;
    public PATCHUpdateWorkflowRequestBody withPriority(String priority) {
        this.priority = priority;
        return this;
    }
    
    /**
     * If true, the workflow will run based on the configured schedule with the interval field.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scheduled_trigger")
    public Boolean scheduledTrigger;
    public PATCHUpdateWorkflowRequestBody withScheduledTrigger(Boolean scheduledTrigger) {
        this.scheduledTrigger = scheduledTrigger;
        return this;
    }
    
    /**
     * Can be `Active` or `Inactive`. Active workfow definitions run like normal. Inactive workflow definitions cannot be run.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public PATCHUpdateWorkflowRequestBody withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * The timezone that corresponds with the cron expression in the interval field. See the [list of accepted timezone values](https://docs.google.com/spreadsheets/d/1skhepi-q5l9LyaMUPZjU_V9gzTphNMqNyV6ST5mygEo/edit?usp=sharing).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    public String timezone;
    public PATCHUpdateWorkflowRequestBody withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
}
