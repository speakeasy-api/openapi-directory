"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Ontology:
    r"""Operations on Ontology Terms and Subsets"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_ontology_subset(self, request: operations.GetOntologySubsetRequest) -> operations.GetOntologySubsetResponse:
        r"""Returns meta data of an ontology subset (slim)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologySubsetRequest, base_url, '/ontology/subset/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologySubsetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ontology_term(self, request: operations.GetOntologyTermRequest) -> operations.GetOntologyTermResponse:
        r"""Returns meta data of an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologyTermRequest, base_url, '/ontology/term/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologyTermResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ontology_term_graph(self, request: operations.GetOntologyTermGraphRequest) -> operations.GetOntologyTermGraphResponse:
        r"""Returns graph of an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologyTermGraphRequest, base_url, '/ontology/term/{id}/graph', request)
        
        query_params = utils.get_query_params(operations.GetOntologyTermGraphRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologyTermGraphResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ontology_term_subgraph(self, request: operations.GetOntologyTermSubgraphRequest) -> operations.GetOntologyTermSubgraphResponse:
        r"""Extract a subgraph from an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologyTermSubgraphRequest, base_url, '/ontology/term/{id}/subgraph', request)
        
        query_params = utils.get_query_params(operations.GetOntologyTermSubgraphRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologyTermSubgraphResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ontology_term_subsets(self, request: operations.GetOntologyTermSubsetsRequest) -> operations.GetOntologyTermSubsetsResponse:
        r"""Returns subsets (slims) associated to an ontology term"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologyTermSubsetsRequest, base_url, '/ontology/term/{id}/subsets', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologyTermSubsetsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_ontology_terms_shared_ancestor(self, request: operations.GetOntologyTermsSharedAncestorRequest) -> operations.GetOntologyTermsSharedAncestorResponse:
        r"""Returns the ancestor ontology terms shared by two ontology terms"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOntologyTermsSharedAncestorRequest, base_url, '/ontology/shared/{subject}/{object}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOntologyTermsSharedAncestorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    