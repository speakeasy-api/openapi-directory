<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * BreakType - A defined break template that sets an expectation for possible `Break`
 * 
 * instances on a `Shift`.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class BreakType
{
    /**
     * A human-readable name for this type of break. The name is displayed to
     * 
     * employees in Square products.
     * 
     * @var string $breakName
     */
	#[\JMS\Serializer\Annotation\SerializedName('break_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $breakName;
    
    /**
     * A read-only timestamp in RFC 3339 format.
     * 
     * @var ?string $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $createdAt = null;
    
    /**
     * Format: RFC-3339 P[n]Y[n]M[n]DT[n]H[n]M[n]S. The expected length of
     * 
     * this break. Precision less than minutes is truncated.
     * 
     * @var string $expectedDuration
     */
	#[\JMS\Serializer\Annotation\SerializedName('expected_duration')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $expectedDuration;
    
    /**
     * The UUID for this object.
     * 
     * @var ?string $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * Whether this break counts towards time worked for compensation
     * 
     * purposes.
     * 
     * @var bool $isPaid
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_paid')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $isPaid;
    
    /**
     * The ID of the business location this type of break applies to.
     * 
     * @var string $locationId
     */
	#[\JMS\Serializer\Annotation\SerializedName('location_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $locationId;
    
    /**
     * A read-only timestamp in RFC 3339 format.
     * 
     * @var ?string $updatedAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $updatedAt = null;
    
    /**
     * Used for resolving concurrency issues. The request fails if the version
     * 
     * provided does not match the server version at the time of the request. If a value is not
     * provided, Square's servers execute a "blind" write; potentially
     * overwriting another writer's data.
     * 
     * @var ?int $version
     */
	#[\JMS\Serializer\Annotation\SerializedName('version')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $version = null;
    
	public function __construct()
	{
		$this->breakName = "";
		$this->createdAt = null;
		$this->expectedDuration = "";
		$this->id = null;
		$this->isPaid = false;
		$this->locationId = "";
		$this->updatedAt = null;
		$this->version = null;
	}
}
