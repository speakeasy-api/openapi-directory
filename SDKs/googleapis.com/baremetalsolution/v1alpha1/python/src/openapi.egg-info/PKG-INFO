Metadata-Version: 2.1
Name: openapi
Version: 0.0.1
Summary: Python Client SDK Generated by Speakeasy
Author: Speakeasy
Requires-Python: >=3.9
Description-Content-Type: text/markdown

# openapi

<!-- Start SDK Installation -->
## SDK Installation

```bash
pip install git+https://github.com/speakeasy-api/openapi-directory.git#subdirectory=SDKs/googleapis.com/baremetalsolution/v1alpha1/python
```
<!-- End SDK Installation -->

## SDK Example Usage
<!-- Start SDK Example Usage -->
```python
import sdk
from sdk.models import operations, shared

s = sdk.SDK()


req = operations.BaremetalsolutionProjectsLocationsSubmitProvisioningConfigRequest(
    dollar_xgafv="2",
    submit_provisioning_config_request=shared.SubmitProvisioningConfigRequest(
        email="Micheal_Sporer@yahoo.com",
        provisioning_config=shared.ProvisioningConfig(
            instances=[
                shared.InstanceConfig(
                    client_network=shared.NetworkAddress(
                        address="466 Hunter Fort",
                        existing_network_id="debitis",
                        network_id="ipsa",
                    ),
                    hyperthreading=False,
                    id="delectus",
                    instance_type="tempora",
                    location="suscipit",
                    os_image="molestiae",
                    private_network=shared.NetworkAddress(
                        address="854 Huel Via",
                        existing_network_id="temporibus",
                        network_id="ab",
                    ),
                    user_note="quis",
                ),
                shared.InstanceConfig(
                    client_network=shared.NetworkAddress(
                        address="60389 Connelly Trace",
                        existing_network_id="at",
                        network_id="maiores",
                    ),
                    hyperthreading=False,
                    id="molestiae",
                    instance_type="quod",
                    location="quod",
                    os_image="esse",
                    private_network=shared.NetworkAddress(
                        address="7617 McCullough Coves",
                        existing_network_id="deleniti",
                        network_id="hic",
                    ),
                    user_note="optio",
                ),
                shared.InstanceConfig(
                    client_network=shared.NetworkAddress(
                        address="1442 Ona River",
                        existing_network_id="esse",
                        network_id="ipsum",
                    ),
                    hyperthreading=False,
                    id="excepturi",
                    instance_type="aspernatur",
                    location="perferendis",
                    os_image="ad",
                    private_network=shared.NetworkAddress(
                        address="1626 Tyra Union",
                        existing_network_id="fuga",
                        network_id="in",
                    ),
                    user_note="corporis",
                ),
            ],
            networks=[
                shared.NetworkConfig(
                    bandwidth="BW_2_GBPS",
                    cidr="saepe",
                    id="quidem",
                    location="architecto",
                    service_cidr="SERVICE_CIDR_UNSPECIFIED",
                    type="PRIVATE",
                    user_note="est",
                    vlan_attachments=[
                        shared.VlanAttachment(
                            id="laborum",
                            pairing_key="dolores",
                        ),
                        shared.VlanAttachment(
                            id="dolorem",
                            pairing_key="corporis",
                        ),
                        shared.VlanAttachment(
                            id="explicabo",
                            pairing_key="nobis",
                        ),
                    ],
                ),
                shared.NetworkConfig(
                    bandwidth="BW_1_GBPS",
                    cidr="omnis",
                    id="nemo",
                    location="minima",
                    service_cidr="HIGH_26",
                    type="TYPE_UNSPECIFIED",
                    user_note="iure",
                    vlan_attachments=[
                        shared.VlanAttachment(
                            id="doloribus",
                            pairing_key="sapiente",
                        ),
                        shared.VlanAttachment(
                            id="architecto",
                            pairing_key="mollitia",
                        ),
                        shared.VlanAttachment(
                            id="dolorem",
                            pairing_key="culpa",
                        ),
                    ],
                ),
                shared.NetworkConfig(
                    bandwidth="BANDWIDTH_UNSPECIFIED",
                    cidr="repellat",
                    id="mollitia",
                    location="occaecati",
                    service_cidr="DISABLED",
                    type="CLIENT",
                    user_note="quam",
                    vlan_attachments=[
                        shared.VlanAttachment(
                            id="velit",
                            pairing_key="error",
                        ),
                        shared.VlanAttachment(
                            id="quia",
                            pairing_key="quis",
                        ),
                    ],
                ),
            ],
            ticket_id="vitae",
            volumes=[
                shared.VolumeConfig(
                    id="animi",
                    location="enim",
                    lun_ranges=[
                        shared.LunRange(
                            quantity=778346,
                            size_gb=196582,
                        ),
                    ],
                    machine_ids=[
                        "ipsam",
                        "id",
                        "possimus",
                        "aut",
                    ],
                    nfs_exports=[
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="error",
                            machine_id="temporibus",
                            network_id="laborum",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                    ],
                    protocol="PROTOCOL_NFS",
                    size_gb=976460,
                    snapshots_enabled=False,
                    type="DISK",
                    user_note="nihil",
                ),
                shared.VolumeConfig(
                    id="praesentium",
                    location="voluptatibus",
                    lun_ranges=[
                        shared.LunRange(
                            quantity=604846,
                            size_gb=451159,
                        ),
                    ],
                    machine_ids=[
                        "perferendis",
                        "doloremque",
                        "reprehenderit",
                    ],
                    nfs_exports=[
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="maiores",
                            machine_id="dicta",
                            network_id="corporis",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="iusto",
                            machine_id="dicta",
                            network_id="harum",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                    ],
                    protocol="PROTOCOL_NFS",
                    size_gb=414263,
                    snapshots_enabled=False,
                    type="DISK",
                    user_note="quae",
                ),
                shared.VolumeConfig(
                    id="ipsum",
                    location="quidem",
                    lun_ranges=[
                        shared.LunRange(
                            quantity=566602,
                            size_gb=865103,
                        ),
                        shared.LunRange(
                            quantity=265389,
                            size_gb=508969,
                        ),
                        shared.LunRange(
                            quantity=523248,
                            size_gb=916723,
                        ),
                    ],
                    machine_ids=[
                        "repudiandae",
                    ],
                    nfs_exports=[
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="veritatis",
                            machine_id="itaque",
                            network_id="incidunt",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="consequatur",
                            machine_id="est",
                            network_id="quibusdam",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                        shared.NfsExport(
                            allow_dev=False,
                            allow_suid=False,
                            cidr="deserunt",
                            machine_id="distinctio",
                            network_id="quibusdam",
                            no_root_squash=False,
                            permissions="PERMISSIONS_UNSPECIFIED",
                        ),
                    ],
                    protocol="PROTOCOL_UNSPECIFIED",
                    size_gb=183191,
                    snapshots_enabled=False,
                    type="FLASH",
                    user_note="cupiditate",
                ),
            ],
        ),
    ),
    access_token="quos",
    alt="json",
    callback="magni",
    fields_="assumenda",
    key="ipsam",
    location="alias",
    oauth_token="fugit",
    pretty_print=False,
    project="dolorum",
    quota_user="excepturi",
    upload_type="tempora",
    upload_protocol="facilis",
)
    
res = s.projects.baremetalsolution_projects_locations_submit_provisioning_config(req, operations.BaremetalsolutionProjectsLocationsSubmitProvisioningConfigSecurity(
    oauth2="Bearer YOUR_ACCESS_TOKEN_HERE",
    oauth2c="Bearer YOUR_ACCESS_TOKEN_HERE",
))

if res.provisioning_config is not None:
    # handle response
```
<!-- End SDK Example Usage -->

<!-- Start SDK Available Operations -->
## Available Resources and Operations


### projects

* `baremetalsolution_projects_locations_submit_provisioning_config` - Submit a provisiong configuration for a given project.
* `baremetalsolution_projects_provisioning_quotas_list` - List the budget details to provision resources on a given project.
<!-- End SDK Available Operations -->

### Maturity

This SDK is in beta, and there may be breaking changes between versions without a major version update. Therefore, we recommend pinning usage
to a specific package version. This way, you can install the same version each time without breaking changes unless you are intentionally
looking for the latest version.

### Contributions

While we value open-source contributions to this SDK, this library is generated programmatically.
Feel free to open a PR or a Github issue as a proof of concept and we'll do our best to include it in a future release !

### SDK Created by [Speakeasy](https://docs.speakeasyapi.dev/docs/using-speakeasy/client-sdks)
