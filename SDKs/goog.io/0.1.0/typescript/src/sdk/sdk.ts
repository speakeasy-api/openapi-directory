/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://api.goog.io"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * # Intoduction
 *
 * @remarks
 *
 * This is the OpenAPI V3 documentation for https://api.goog.io
 *
 * An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.
 *
 * Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.
 *
 * Googio is the ultimate search API for Google Searches, Google News, and Google SERP.
 * # Docs
 *
 * > An Unofficial Google Search API
 *
 * An API to perform Google Searches. Extremely fast and accurate. Zero proxies. Clean USA IPs.
 *
 * Simple to use API, but advance enough to support special parameters such as languages, country and geographic locality.
 *
 * # Example Code
 *
 *  Check out [Github repo](https://github.com/googio/googio_examples) for example code for calling the API with various languages.
 *
 * # Authentication
 *
 * ### API Key
 *
 * Optional API key for authenticated access. Note that we use "API key" interchangably in these docs.
 *
 * Authenticated requests must include an `apikey` header containing your subscription's API Key.
 *
 * | Security Schema Type | Header Name | Example Token |
 * | --- | --- | --- |
 * | API Key | `apikey` | c5bfb018-ab46-4e61-9271-4ec7e9c04a6e |
 *
 * In the following example, `YOU_APIKEY` represents the auth token for your account.
 *
 * ```
 * curl --header 'apikey: YOU_APIKEY'
 * ```
 *
 * You can view and manage your API keys in the [Dashboard](/dashboard).
 *
 * Be sure to keep your API keys secure. Do not share them in publicly accessible areas such as GitHub, client-side code, and so forth.
 *
 * Also note that all API requests must be made over **HTTPS**. Calls made over plain HTTP will attempt to be automatically upgraded to HTTPS, though this use cases is discouraged.
 *
 *
 * ## Rate Limits
 *
 * API requests may be rate limited depending on your subscription plan and traffic patterns. The following response headers will be present in these cases:
 *
 * | Header | Description |
 * | ------ | ----------- |
 * | `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make. |
 * | `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |
 * | `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |
 *
 * When the rate limit is **exceeded**, an error is returned with the status "**429 Too Many Requests**":
 *
 * ```json
 * {
 *   "error": {
 *     "code": "too_many_requests",
 *     "message": "Rate limit exceeded"
 *   }
 * }
 * ```
 *
 *
 *
 * ## Errors
 *
 * This API uses conventional HTTP response codes to indicate the success or failure of API requests. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, endpoint not found, etc.). Codes in the `5xx` range indicate an error with our API (these are rare).
 *
 *
 *
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }
  }

  /**
   * Crawl
   *
   * @remarks
   * Perform Google Search
   *
   *  Parameters
   * ----------
   * query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating
   *
   * Returns
   * -------
   * json: a the html source of the results page
   */
  crawl(
    req: operations.CrawlRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CrawlResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CrawlRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/crawl/{query}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CrawlResponse = new operations.CrawlResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.crawl200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Crawl200ApplicationJSON
            );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Status
   *
   * @remarks
   * It "status" == true then API is up, else the API is down
   */
  getTheStatusOfTheAPIService(
    config?: AxiosRequestConfig
  ): Promise<operations.GetTheStatusOfTheAPIServiceResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetTheStatusOfTheAPIServiceResponse =
        new operations.GetTheStatusOfTheAPIServiceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTheStatusOfTheAPIService200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetTheStatusOfTheAPIService200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Images
   *
   * @remarks
   * Perform Google Image Search
   *
   * Parameters
   * ----------
   * query : the string query to perform search. supports advance queries.
   *
   * Returns
   * -------
   * json: a list of results with the link, description, and title for each result
   */
  images(
    req: operations.ImagesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.ImagesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ImagesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/images/{query}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ImagesResponse = new operations.ImagesResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.images200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Images200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * News
   *
   * @remarks
   * Perform Google News Search
   *
   *  Parameters
   * ----------
   * query : the string query to perform search for Google news. A simple query for `president` will be `q=president`. An example of multiple keyword would be `q=news+about+presdient+trump`. News can also be filtered by country and language. For `US` news and in English the query will be `q=trump&ceid=US:en` for news in Great Britian the query will be `q=trump&ceid=GB:en`
   *
   * Returns
   * -------
   * json: {"feed": { "title" : "trump" ...} , "entites": [ {"title" : "Trump doubles down on divisive messaging in speech to honor Independence Day - CNN", "links": []} ...]}
   */
  news(
    req: operations.NewsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.NewsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.NewsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/news/{query}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.NewsResponse = new operations.NewsResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.news200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.News200ApplicationJSON
            );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Search
   *
   * @remarks
   * Perform Google Search
   *
   * Parameters
   * ----------
   * query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formating
   *
   * Returns
   * -------
   * json: a list of results with the link, description, and title for each result
   */
  search(
    req: operations.SearchRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.SearchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.SearchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/search/{query}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SearchResponse = new operations.SearchResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.search200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Search200ApplicationJSON
            );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * SERP
   *
   * @remarks
   * Perform Google Search and search for website in Search Engine Results Pages (SERP)
   *
   * Parameters
   * ----------
   * query : the string query to perform search. supports advance queries. Check out https://moz.com/blog/the-ultimate-guide-to-the-google-search-parameters guide for formatting, it is recommended to set the query `&num=100`
   *
   * Returns
   * -------
   * json: a list of results with the query, website, searched_results, and position. json["position"] will be set to -1 if website is not found in results
   */
  serp(
    req: shared.SerpData,
    config?: AxiosRequestConfig
  ): Promise<operations.SerpResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SerpData(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v1/serp/";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.SerpResponse = new operations.SerpResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.serp200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.Serp200ApplicationJSON
            );
          }
          break;
        case [404, 429].includes(httpRes?.status):
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
