<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Labels 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Purchase Label
     * 
     * Purchase and print a label for shipment
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CreateLabelRequestBodyInput $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLabelResponse
     */
	public function createLabel(
        \OpenAPI\OpenAPI\Models\Shared\CreateLabelRequestBodyInput $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createLabelResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateLabelResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase Label with Rate ID
     * 
     * When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used
     * to generate a label without having to refill in the shipment information repeatedly.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateResponse
     */
	public function createLabelFromRate(
        \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/rates/{rate_id}', \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createLabelFromRateRequestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromRateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createLabelFromRateResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateLabelFromRateResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase Label with Shipment ID
     * 
     * Purchase a label using a shipment ID that has already been created with the desired address and
     * package info.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentResponse
     */
	public function createLabelFromShipment(
        \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/shipment/{shipment_id}', \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createLabelFromShipmentRequestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateLabelFromShipmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createLabelFromShipmentResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateLabelFromShipmentResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a return label
     * 
     * Create a return label
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelResponse
     */
	public function createReturnLabel(
        \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/{label_id}/return', \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createReturnLabelRequestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReturnLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createReturnLabelResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateReturnLabelResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Label By External Shipment ID
     * 
     * Find a label by using the external shipment id that was used during label creation
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdResponse
     */
	public function getLabelByExternalShipmentId(
        \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/external_shipment_id/{external_shipment_id}', \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLabelByExternalShipmentIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLabelByExternalShipmentIdResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetLabelByExternalShipmentIdResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Label By ID
     * 
     * Retrieve information for individual labels.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdResponse
     */
	public function getLabelById(
        \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/{label_id}', \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetLabelByIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetLabelByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getLabelByIdResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetLabelByIdResponseBodyOutput', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Label Tracking Information
     * 
     * Retrieve the label's tracking information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelResponse
     */
	public function getTrackingLogFromLabel(
        \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/{label_id}/track', \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTrackingLogFromLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTrackingLogFromLabelResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTrackingLogFromLabelResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List labels
     * 
     * This endpoint returns a list of labels that you've [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.
     * 
     * By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id`
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListLabelsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ListLabelsResponse
     */
	public function listLabels(
        \OpenAPI\OpenAPI\Models\Operations\ListLabelsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ListLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListLabelsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLabelsResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Void a Label By ID
     * 
     * Void a label by ID to get a refund.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\VoidLabelRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\VoidLabelResponse
     */
	public function voidLabel(
        \OpenAPI\OpenAPI\Models\Operations\VoidLabelRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\VoidLabelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/labels/{label_id}/void', \OpenAPI\OpenAPI\Models\Operations\VoidLabelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\VoidLabelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->voidLabelResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VoidLabelResponseBody', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponseBody = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponseBody', 'json');
            }
        }

        return $response;
    }
}