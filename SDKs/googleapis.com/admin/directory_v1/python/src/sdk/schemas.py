"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Schemas:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def directory_schemas_delete(self, request: operations.DirectorySchemasDeleteRequest, security: operations.DirectorySchemasDeleteSecurity) -> operations.DirectorySchemasDeleteResponse:
        r"""Deletes a schema."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasDeleteRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}', request)
        
        query_params = utils.get_query_params(operations.DirectorySchemasDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def directory_schemas_get(self, request: operations.DirectorySchemasGetRequest, security: operations.DirectorySchemasGetSecurity) -> operations.DirectorySchemasGetResponse:
        r"""Retrieves a schema."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasGetRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}', request)
        
        query_params = utils.get_query_params(operations.DirectorySchemasGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Schema])
                res.schema = out

        return res

    def directory_schemas_insert(self, request: operations.DirectorySchemasInsertRequest, security: operations.DirectorySchemasInsertSecurity) -> operations.DirectorySchemasInsertResponse:
        r"""Creates a schema."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasInsertRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schema", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectorySchemasInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Schema])
                res.schema = out

        return res

    def directory_schemas_list(self, request: operations.DirectorySchemasListRequest, security: operations.DirectorySchemasListSecurity) -> operations.DirectorySchemasListResponse:
        r"""Retrieves all schemas for a customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasListRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas', request)
        
        query_params = utils.get_query_params(operations.DirectorySchemasListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Schemas])
                res.schemas = out

        return res

    def directory_schemas_patch(self, request: operations.DirectorySchemasPatchRequest, security: operations.DirectorySchemasPatchSecurity) -> operations.DirectorySchemasPatchResponse:
        r"""Patches a schema."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasPatchRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schema", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectorySchemasPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Schema])
                res.schema = out

        return res

    def directory_schemas_update(self, request: operations.DirectorySchemasUpdateRequest, security: operations.DirectorySchemasUpdateSecurity) -> operations.DirectorySchemasUpdateResponse:
        r"""Updates a schema."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DirectorySchemasUpdateRequest, base_url, '/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "schema", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DirectorySchemasUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DirectorySchemasUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Schema])
                res.schema = out

        return res

    