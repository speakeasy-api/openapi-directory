// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type KeysAPIFindRequest struct {
	Serial string `pathParam:"style=simple,explode=false,name=serial"`
}

type KeysAPIFind200ApplicationJSONType string

const (
	KeysAPIFind200ApplicationJSONTypeKeyView KeysAPIFind200ApplicationJSONType = "KeyView"
)

type KeysAPIFind200ApplicationJSON struct {
	KeyView *shared.KeyView

	Type KeysAPIFind200ApplicationJSONType
}

func CreateKeysAPIFind200ApplicationJSONKeyView(keyView shared.KeyView) KeysAPIFind200ApplicationJSON {
	typ := KeysAPIFind200ApplicationJSONTypeKeyView

	return KeysAPIFind200ApplicationJSON{
		KeyView: &keyView,
		Type:    typ,
	}
}

func (u *KeysAPIFind200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	keyView := new(shared.KeyView)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&keyView); err == nil {
		u.KeyView = keyView
		u.Type = KeysAPIFind200ApplicationJSONTypeKeyView
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u KeysAPIFind200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.KeyView != nil {
		return json.Marshal(u.KeyView)
	}

	return nil, nil
}

type KeysAPIFindResponse struct {
	ContentType                        string
	KeysAPIFind200ApplicationJSONOneOf *KeysAPIFind200ApplicationJSON
	StatusCode                         int
	RawResponse                        *http.Response
}
