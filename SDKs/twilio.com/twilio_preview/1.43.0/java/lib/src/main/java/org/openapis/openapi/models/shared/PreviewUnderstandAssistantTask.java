/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PreviewUnderstandAssistantTask - Created
 */
public class PreviewUnderstandAssistantTask {
    /**
     * The unique ID of the Account that created this Task.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public PreviewUnderstandAssistantTask withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * User-provided HTTP endpoint where from the assistant fetches actions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actions_url")
    public String actionsUrl;

    public PreviewUnderstandAssistantTask withActionsUrl(String actionsUrl) {
        this.actionsUrl = actionsUrl;
        return this;
    }
    
    /**
     * The unique ID of the Assistant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assistant_sid")
    public String assistantSid;

    public PreviewUnderstandAssistantTask withAssistantSid(String assistantSid) {
        this.assistantSid = assistantSid;
        return this;
    }
    
    /**
     * The date that this resource was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public PreviewUnderstandAssistantTask withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date that this resource was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public PreviewUnderstandAssistantTask withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * A user-provided string that identifies this resource. It is non-unique and can up to 255 characters long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendly_name")
    public String friendlyName;

    public PreviewUnderstandAssistantTask withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;

    public PreviewUnderstandAssistantTask withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * A 34 character string that uniquely identifies this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public PreviewUnderstandAssistantTask withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * A user-provided string that uniquely identifies this resource as an alternative to the sid. Unique up to 64 characters long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_name")
    public String uniqueName;

    public PreviewUnderstandAssistantTask withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public PreviewUnderstandAssistantTask withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public PreviewUnderstandAssistantTask(){}
}
