// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AssociateResolverQueryLogConfigXAmzTargetEnum
type AssociateResolverQueryLogConfigXAmzTargetEnum string

const (
	AssociateResolverQueryLogConfigXAmzTargetEnumRoute53ResolverAssociateResolverQueryLogConfig AssociateResolverQueryLogConfigXAmzTargetEnum = "Route53Resolver.AssociateResolverQueryLogConfig"
)

func (e AssociateResolverQueryLogConfigXAmzTargetEnum) ToPointer() *AssociateResolverQueryLogConfigXAmzTargetEnum {
	return &e
}

func (e *AssociateResolverQueryLogConfigXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53Resolver.AssociateResolverQueryLogConfig":
		*e = AssociateResolverQueryLogConfigXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateResolverQueryLogConfigXAmzTargetEnum: %v", v)
	}
}

type AssociateResolverQueryLogConfigRequest struct {
	AssociateResolverQueryLogConfigRequest shared.AssociateResolverQueryLogConfigRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                         *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                               *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                      *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                             AssociateResolverQueryLogConfigXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type AssociateResolverQueryLogConfigResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	// Success
	AssociateResolverQueryLogConfigResponse *shared.AssociateResolverQueryLogConfigResponse
	ContentType                             string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceExistsException
	ResourceExistsException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
