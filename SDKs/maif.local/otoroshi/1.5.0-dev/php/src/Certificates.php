<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Certificates 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all certificates
     * 
     * Get all certificates
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\AllCertsResponse
     */
	public function allCerts(
    ): \OpenAPI\OpenAPI\Models\Operations\AllCertsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AllCertsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Certificate>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Create one certificate
     * 
     * Create one certificate
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\Certificate $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCertResponse
     */
	public function createCert(
        \OpenAPI\OpenAPI\Models\Shared\Certificate $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Delete one certificate by id
     * 
     * Delete one certificate by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCertResponse
     */
	public function deleteCert(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleted = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Deleted', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Get one certificate by id
     * 
     * Get one certificate by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OneCertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OneCertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OneCertResponse
     */
	public function oneCert(
        \OpenAPI\OpenAPI\Models\Operations\OneCertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OneCertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OneCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\OneCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OneCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update one certificate by id
     * 
     * Update one certificate by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchCertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchCertResponse
     */
	public function patchCert(
        \OpenAPI\OpenAPI\Models\Operations\PatchCertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchCertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
	
    /**
     * Update one certificate by id
     * 
     * Update one certificate by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutCertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutCertResponse
     */
	public function putCert(
        \OpenAPI\OpenAPI\Models\Operations\PutCertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutCertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutCertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/certificates/{id}', \OpenAPI\OpenAPI\Models\Operations\PutCertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "certificate", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutCertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->certificate = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Certificate', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
        }

        return $response;
    }
}