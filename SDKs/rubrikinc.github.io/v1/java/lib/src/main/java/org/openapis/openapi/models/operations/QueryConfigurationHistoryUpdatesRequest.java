/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class QueryConfigurationHistoryUpdatesRequest {
    /**
     * The earliest time configuration history is needed. Applies a filter that only shows configuration updates after the specified time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=after_time")
    public OffsetDateTime afterTime;

    public QueryConfigurationHistoryUpdatesRequest withAfterTime(OffsetDateTime afterTime) {
        this.afterTime = afterTime;
        return this;
    }
    
    /**
     * The username of the account. Applies a filter to the configuration updates performed by the specified username.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=api_user")
    public String apiUser;

    public QueryConfigurationHistoryUpdatesRequest withApiUser(String apiUser) {
        this.apiUser = apiUser;
        return this;
    }
    
    /**
     * The latest time configuration history is needed. Applies filter to display only configuration updates prior to the specified time. The default value is the current time.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=before_time")
    public OffsetDateTime beforeTime;

    public QueryConfigurationHistoryUpdatesRequest withBeforeTime(OffsetDateTime beforeTime) {
        this.beforeTime = beforeTime;
        return this;
    }
    
    /**
     * Limit the number of matches returned.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Integer limit;

    public QueryConfigurationHistoryUpdatesRequest withLimit(Integer limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Name of the configuration. Applies a filter to the configuration updates for the specified configuration name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;

    public QueryConfigurationHistoryUpdatesRequest withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The configuration namespace. Applies a filter to the configuration updates for the specified namespace.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=namespace")
    public String namespace;

    public QueryConfigurationHistoryUpdatesRequest withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }
    
    /**
     * The node ID. Applies a filter to the configuration updates for the specified node. When no node_id is specified, the filter shows both local and cluster-wide configurations. Specify 'cluster' for filtering out cluster-wide configuration updates.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=node_id")
    public String nodeId;

    public QueryConfigurationHistoryUpdatesRequest withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Ignore these many matches in the beginning.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Integer offset;

    public QueryConfigurationHistoryUpdatesRequest withOffset(Integer offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Source for configuration updates. Applies a filter to the configuration updates for the specified source.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=source")
    public QueryConfigurationHistoryUpdatesSourceEnum source;

    public QueryConfigurationHistoryUpdatesRequest withSource(QueryConfigurationHistoryUpdatesSourceEnum source) {
        this.source = source;
        return this;
    }
    
    public QueryConfigurationHistoryUpdatesRequest(){}
}
