/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class DeleteLicenseManagerReportGeneratorResponse {
    /**
     * AccessDeniedException
     */
    
    public Object accessDeniedException;

    public DeleteLicenseManagerReportGeneratorResponse withAccessDeniedException(Object accessDeniedException) {
        this.accessDeniedException = accessDeniedException;
        return this;
    }
    
    /**
     * AuthorizationException
     */
    
    public Object authorizationException;

    public DeleteLicenseManagerReportGeneratorResponse withAuthorizationException(Object authorizationException) {
        this.authorizationException = authorizationException;
        return this;
    }
    
    
    public String contentType;

    public DeleteLicenseManagerReportGeneratorResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public java.util.Map<String, Object> deleteLicenseManagerReportGeneratorResponse;

    public DeleteLicenseManagerReportGeneratorResponse withDeleteLicenseManagerReportGeneratorResponse(java.util.Map<String, Object> deleteLicenseManagerReportGeneratorResponse) {
        this.deleteLicenseManagerReportGeneratorResponse = deleteLicenseManagerReportGeneratorResponse;
        return this;
    }
    
    /**
     * InvalidParameterValueException
     */
    
    public Object invalidParameterValueException;

    public DeleteLicenseManagerReportGeneratorResponse withInvalidParameterValueException(Object invalidParameterValueException) {
        this.invalidParameterValueException = invalidParameterValueException;
        return this;
    }
    
    /**
     * RateLimitExceededException
     */
    
    public Object rateLimitExceededException;

    public DeleteLicenseManagerReportGeneratorResponse withRateLimitExceededException(Object rateLimitExceededException) {
        this.rateLimitExceededException = rateLimitExceededException;
        return this;
    }
    
    /**
     * ResourceLimitExceededException
     */
    
    public Object resourceLimitExceededException;

    public DeleteLicenseManagerReportGeneratorResponse withResourceLimitExceededException(Object resourceLimitExceededException) {
        this.resourceLimitExceededException = resourceLimitExceededException;
        return this;
    }
    
    
    public Integer statusCode;

    public DeleteLicenseManagerReportGeneratorResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public DeleteLicenseManagerReportGeneratorResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * ResourceNotFoundException
     */
    
    public Object resourceNotFoundException;

    public DeleteLicenseManagerReportGeneratorResponse withResourceNotFoundException(Object resourceNotFoundException) {
        this.resourceNotFoundException = resourceNotFoundException;
        return this;
    }
    
    /**
     * ServerInternalException
     */
    
    public Object serverInternalException;

    public DeleteLicenseManagerReportGeneratorResponse withServerInternalException(Object serverInternalException) {
        this.serverInternalException = serverInternalException;
        return this;
    }
    
    /**
     * ValidationException
     */
    
    public Object validationException;

    public DeleteLicenseManagerReportGeneratorResponse withValidationException(Object validationException) {
        this.validationException = validationException;
        return this;
    }
    
    public DeleteLicenseManagerReportGeneratorResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
