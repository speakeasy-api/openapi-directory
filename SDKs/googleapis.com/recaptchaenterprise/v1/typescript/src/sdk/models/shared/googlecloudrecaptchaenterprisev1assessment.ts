/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment } from "./googlecloudrecaptchaenterprisev1accountdefenderassessment";
import {
  GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo,
  GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoInput,
} from "./googlecloudrecaptchaenterprisev1accountverificationinfo";
import { GoogleCloudRecaptchaenterpriseV1Event } from "./googlecloudrecaptchaenterprisev1event";
import { GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment } from "./googlecloudrecaptchaenterprisev1firewallpolicyassessment";
import { GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment } from "./googlecloudrecaptchaenterprisev1fraudpreventionassessment";
import {
  GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification,
  GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerificationInput,
} from "./googlecloudrecaptchaenterprisev1privatepasswordleakverification";
import { GoogleCloudRecaptchaenterpriseV1RiskAnalysis } from "./googlecloudrecaptchaenterprisev1riskanalysis";
import { GoogleCloudRecaptchaenterpriseV1TokenProperties } from "./googlecloudrecaptchaenterprisev1tokenproperties";
import { Expose, Type } from "class-transformer";

/**
 * A reCAPTCHA Enterprise assessment resource.
 */
export class GoogleCloudRecaptchaenterpriseV1AssessmentInput extends SpeakeasyBase {
  /**
   * Account defender risk assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountDefenderAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment)
  accountDefenderAssessment?: GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment;

  /**
   * Information about account verification, used for identity verification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountVerification" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoInput)
  accountVerification?: GoogleCloudRecaptchaenterpriseV1AccountVerificationInfoInput;

  /**
   * The event being assessed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1Event)
  event?: GoogleCloudRecaptchaenterpriseV1Event;

  /**
   * Policy config assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firewallPolicyAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment)
  firewallPolicyAssessment?: GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment;

  /**
   * Assessment for Fraud Prevention.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fraudPreventionAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment)
  fraudPreventionAssessment?: GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment;

  /**
   * Private password leak verification info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privatePasswordLeakVerification" })
  @Type(
    () => GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerificationInput
  )
  privatePasswordLeakVerification?: GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerificationInput;

  /**
   * Risk analysis result for an event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "riskAnalysis" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1RiskAnalysis)
  riskAnalysis?: GoogleCloudRecaptchaenterpriseV1RiskAnalysis;

  /**
   * Properties of the provided event token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenProperties" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1TokenProperties)
  tokenProperties?: GoogleCloudRecaptchaenterpriseV1TokenProperties;
}

/**
 * A reCAPTCHA Enterprise assessment resource.
 */
export class GoogleCloudRecaptchaenterpriseV1Assessment extends SpeakeasyBase {
  /**
   * Account defender risk assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountDefenderAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment)
  accountDefenderAssessment?: GoogleCloudRecaptchaenterpriseV1AccountDefenderAssessment;

  /**
   * Information about account verification, used for identity verification.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountVerification" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo)
  accountVerification?: GoogleCloudRecaptchaenterpriseV1AccountVerificationInfo;

  /**
   * The event being assessed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "event" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1Event)
  event?: GoogleCloudRecaptchaenterpriseV1Event;

  /**
   * Policy config assessment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firewallPolicyAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment)
  firewallPolicyAssessment?: GoogleCloudRecaptchaenterpriseV1FirewallPolicyAssessment;

  /**
   * Assessment for Fraud Prevention.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fraudPreventionAssessment" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment)
  fraudPreventionAssessment?: GoogleCloudRecaptchaenterpriseV1FraudPreventionAssessment;

  /**
   * Output only. The resource name for the Assessment in the format "projects/{project}/assessments/{assessment}".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Private password leak verification info.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "privatePasswordLeakVerification" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification)
  privatePasswordLeakVerification?: GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification;

  /**
   * Risk analysis result for an event.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "riskAnalysis" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1RiskAnalysis)
  riskAnalysis?: GoogleCloudRecaptchaenterpriseV1RiskAnalysis;

  /**
   * Properties of the provided event token.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tokenProperties" })
  @Type(() => GoogleCloudRecaptchaenterpriseV1TokenProperties)
  tokenProperties?: GoogleCloudRecaptchaenterpriseV1TokenProperties;
}
