"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ShippingMethods:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_shipping_methods_id_json(self, request: operations.DeleteShippingMethodsIDJSONRequest) -> operations.DeleteShippingMethodsIDJSONResponse:
        r"""Delete an existing Shipping Method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteShippingMethodsIDJSONRequest, base_url, '/shipping_methods/{id}.json', request)
        
        query_params = utils.get_query_params(operations.DeleteShippingMethodsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteShippingMethodsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.delete_shipping_methods_id_json_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def get_shipping_methods_json(self, request: operations.GetShippingMethodsJSONRequest) -> operations.GetShippingMethodsJSONResponse:
        r"""Retrieve all Store's Shipping Methods."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/shipping_methods.json'
        
        query_params = utils.get_query_params(operations.GetShippingMethodsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShippingMethodsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ShippingMethod]])
                res.shipping_methods = out

        return res

    def get_shipping_methods_id_json(self, request: operations.GetShippingMethodsIDJSONRequest) -> operations.GetShippingMethodsIDJSONResponse:
        r"""Retrieve a single Shipping Method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShippingMethodsIDJSONRequest, base_url, '/shipping_methods/{id}.json', request)
        
        query_params = utils.get_query_params(operations.GetShippingMethodsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShippingMethodsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingMethod])
                res.shipping_method = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def post_shipping_methods_json(self, request: operations.PostShippingMethodsJSONRequest) -> operations.PostShippingMethodsJSONResponse:
        r"""Creates a Shipping Method."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/shipping_methods.json'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shipping_method_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PostShippingMethodsJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostShippingMethodsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingMethod])
                res.shipping_method = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    def put_shipping_methods_id_json(self, request: operations.PutShippingMethodsIDJSONRequest) -> operations.PutShippingMethodsIDJSONResponse:
        r"""Update a Shipping Method."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutShippingMethodsIDJSONRequest, base_url, '/shipping_methods/{id}.json', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "shipping_method_edit", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.PutShippingMethodsIDJSONRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutShippingMethodsIDJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ShippingMethod])
                res.shipping_method = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NotFound])
                res.not_found = out

        return res

    