/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * TextBroadcast - A text campaign allows you to send a text message to a number of recipients. It supports scheduling, retry logic and pattern-based messages
 */
public class TextBroadcast {
    /**
     * If message length exceeds 160 characters, multiple messages will be sent, SEND_MULTIPLE strategy is chosen by default. Available values: SEND_MULTIPLE - send text as multiple messages, DO_NOT_SEND - do not send text if it exceeds 160 characters, TRIM - trims text message to 160 characters
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bigMessageStrategy")
    public TextBroadcastBigMessageStrategyEnum bigMessageStrategy;

    public TextBroadcast withBigMessageStrategy(TextBroadcastBigMessageStrategyEnum bigMessageStrategy) {
        this.bigMessageStrategy = bigMessageStrategy;
        return this;
    }
    
    /**
     * A phone number in E.164 format (11-digit) or short code. Example: 12132000384, 67076, etc
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fromNumber")
    public String fromNumber;

    public TextBroadcast withFromNumber(String fromNumber) {
        this.fromNumber = fromNumber;
        return this;
    }
    
    /**
     * A unique id of a broadcast
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public TextBroadcast withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * A labels of a broadcast
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;

    public TextBroadcast withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * A time when the given resource was updated, formatted in unix time milliseconds (read only). Example: 1473781817000
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModified")
    public Long lastModified;

    public TextBroadcast withLastModified(Long lastModified) {
        this.lastModified = lastModified;
        return this;
    }
    
    /**
     * Represents a range of time during which CallFire will send a call or text to recipients. Timeframe uses the local timezone of recipient's number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localTimeRestriction")
    public LocalTimeRestriction localTimeRestriction;

    public TextBroadcast withLocalTimeRestriction(LocalTimeRestriction localTimeRestriction) {
        this.localTimeRestriction = localTimeRestriction;
        return this;
    }
    
    /**
     * A maximum number of texts that CallFire dials at once
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxActive")
    public Integer maxActive;

    public TextBroadcast withMaxActive(Integer maxActive) {
        this.maxActive = maxActive;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media")
    public Media[] media;

    public TextBroadcast withMedia(Media[] media) {
        this.media = media;
        return this;
    }
    
    /**
     * A text message
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    public String message;

    public TextBroadcast withMessage(String message) {
        this.message = message;
        return this;
    }
    
    /**
     * A name of a broadcast
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public TextBroadcast withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Recipients of a text campaign, can be an existing contacts or a new one
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipients")
    public TextRecipient[] recipients;

    public TextBroadcast withRecipients(TextRecipient[] recipients) {
        this.recipients = recipients;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resumeNextDay")
    public Boolean resumeNextDay;

    public TextBroadcast withResumeNextDay(Boolean resumeNextDay) {
        this.resumeNextDay = resumeNextDay;
        return this;
    }
    
    /**
     * ~
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedules")
    public Schedule[] schedules;

    public TextBroadcast withSchedules(Schedule[] schedules) {
        this.schedules = schedules;
        return this;
    }
    
    /**
     * A status of a broadcast. SETUP - campaign isn't configured yet; START_PENDING - waiting for contact batch population; RUNNING - campaign is running; STOPPED - campaign is stopped; FINISHED - campaign is finished; ARCHIVED - campaign was archived
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public TextBroadcastStatusEnum status;

    public TextBroadcast withStatus(TextBroadcastStatusEnum status) {
        this.status = status;
        return this;
    }
    
    public TextBroadcast(){}
}
