"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apistatus_enum as shared_apistatus_enum
from ..shared import resourcestatus_enum as shared_resourcestatus_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIResources:
    
    excluded_from_coverage: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('excluded_from_coverage'), 'exclude': lambda f: f is None }})
    r"""Exclude from mapping coverage"""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the resource, typically a lowercased version of its name."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the resource (plural)"""  
    status: Optional[shared_resourcestatus_enum.ResourceStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the resource. Resources with status live or beta are callable."""  
    
class APITypeEnum(str, Enum):
    r"""Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API."""
    PLATFORM = 'platform'
    UNIFIED = 'unified'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class API:
    
    api_reference_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('api_reference_url'), 'exclude': lambda f: f is None }})
    r"""Link to the API reference of the API."""  
    categories: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('categories'), 'exclude': lambda f: f is None }})
    r"""List of categories the API belongs to."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of the API."""  
    events: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    r"""List of event types this API supports."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID of the API."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the API."""  
    postman_collection_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postman_collection_id'), 'exclude': lambda f: f is None }})
    r"""ID of the Postman collection of the API."""  
    resources: Optional[list[APIResources]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources'), 'exclude': lambda f: f is None }})
    r"""List of resources supported in this API."""  
    spec_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('spec_url'), 'exclude': lambda f: f is None }})
    r"""Link to the latest OpenAPI specification of the API."""  
    status: Optional[shared_apistatus_enum.APIStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the API. APIs with status live or beta are callable."""  
    type: Optional[APITypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API."""  
    