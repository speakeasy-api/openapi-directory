/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * ProxyGetRefund - Container for custom fields of a Refund object.
 * 
 */
public class ProxyGetRefund {
    /**
     *  The ID of the account associated with this refund. Specify a value for this field only if you're creating an electronic non-referenced refund. Don't specify a value for any other type of refund; Zuora associates the refund automatically with the account from the associated payment.
     * **Character limit**: 32 **Values**: a valid account ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountId")
    public String accountId;
    public ProxyGetRefund withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     *  The accounting code for the payment or invoice line item that the refund applies to. If there is no accounting code, then this value is null. Accounting codes group transactions that contain similar accounting attributes.
     * **Character limit**: 50 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AccountingCode")
    public String accountingCode;
    public ProxyGetRefund withAccountingCode(String accountingCode) {
        this.accountingCode = accountingCode;
        return this;
    }
    
    /**
     *  The amount of the refund. The amount can't exceed the amount of the associated payment. If the original payment was applied to a single invoice,\u00a0you can create a partial refund by specifying an amount in this field or through the UI. If the payment was applied\u00a0to multiple invoices, you can create a partial refund by using the `RefundInvoicePaymentData`\u00a0field of this operation or through the UI.
     * **Character limit**: 16 **Values**: a valid currency amount 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Amount")
    public Double amount;
    public ProxyGetRefund withAmount(Double amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     *  The date the refund was cancelled.
     * **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CancelledOn")
    public OffsetDateTime cancelledOn;
    public ProxyGetRefund withCancelledOn(OffsetDateTime cancelledOn) {
        this.cancelledOn = cancelledOn;
        return this;
    }
    
    /**
     *  Use this field to record comments about the refund.
     * **Character limit**: 255 **Values**: a string of 255 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Comment")
    public String comment;
    public ProxyGetRefund withComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    /**
     *  The ID of the Zuora user who created the `Refund` object.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("CreatedById")
    public String createdById;
    public ProxyGetRefund withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     *  The date when the `Refund` object was created.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("CreatedDate")
    public OffsetDateTime createdDate;
    public ProxyGetRefund withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     *  The gateway that processed the original payment. Zuora uses this same gateway for the corresponding refund. If this payment gateway is no longer active, then the electronic refund fails. A gateway is an online service provider that connects an online shopping cart to a payment processor.
     * **Values**: automatically inherited from the `Payment` object 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Gateway")
    public String gateway;
    public ProxyGetRefund withGateway(String gateway) {
        this.gateway = gateway;
        return this;
    }
    
    /**
     *  The message returned from the payment gateway for the refund. This message is gateway-dependent.
     * **Character limit**: 500 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponse")
    public String gatewayResponse;
    public ProxyGetRefund withGatewayResponse(String gatewayResponse) {
        this.gatewayResponse = gatewayResponse;
        return this;
    }
    
    /**
     *  The code returned from the payment gateway for the payment. This code is gateway-dependent.
     * **Character limit**: 20 **System****Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayResponseCode")
    public String gatewayResponseCode;
    public ProxyGetRefund withGatewayResponseCode(String gatewayResponseCode) {
        this.gatewayResponseCode = gatewayResponseCode;
        return this;
    }
    
    /**
     *  The status of the payment in the gateway.
     * **Character limit**: 19 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("GatewayState")
    public String gatewayState;
    public ProxyGetRefund withGatewayState(String gatewayState) {
        this.gatewayState = gatewayState;
        return this;
    }
    
    /**
     * Object identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Id")
    public String id;
    public ProxyGetRefund withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationId__NS")
    public String integrationIdNS;
    public ProxyGetRefund withIntegrationIdNS(String integrationIdNS) {
        this.integrationIdNS = integrationIdNS;
        return this;
    }
    
    /**
     * Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("IntegrationStatus__NS")
    public String integrationStatusNS;
    public ProxyGetRefund withIntegrationStatusNS(String integrationStatusNS) {
        this.integrationStatusNS = integrationStatusNS;
        return this;
    }
    
    /**
     *  The date when a payment was marked and waiting for batch submission to the payment process. **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("MarkedForSubmissionOn")
    public OffsetDateTime markedForSubmissionOn;
    public ProxyGetRefund withMarkedForSubmissionOn(OffsetDateTime markedForSubmissionOn) {
        this.markedForSubmissionOn = markedForSubmissionOn;
        return this;
    }
    
    /**
     *  Indicates how an external refund was issued to a customer. This field is required for an external refund. You can issue an external refund on an electronic payment. **Character limit**: 30 **Values**:
     * 
     * - `ACH`
     * - `Cash`
     * - `Check`
     * - `CreditCard`
     * - `Other`
     * - `PayPal`
     * - `WireTransfer`
     * - `DebitCard`
     * - `CreditCardReferenceTransaction`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("MethodType")
    public String methodType;
    public ProxyGetRefund withMethodType(String methodType) {
        this.methodType = methodType;
        return this;
    }
    
    /**
     * Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Origin__NS")
    public String originNS;
    public ProxyGetRefund withOriginNS(String originNS) {
        this.originNS = originNS;
        return this;
    }
    
    /**
     *  The unique ID of the payment associated with this refund. Don't specify a value for this field if you're creating an electronic non-referenced refund.
     * **Character limit**: 32 **Values**: a valid payment ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentId")
    public Object paymentId;
    public ProxyGetRefund withPaymentId(Object paymentId) {
        this.paymentId = paymentId;
        return this;
    }
    
    /**
     *  The unique ID of the payment method that the customer used to make the payment. Specify a value for this field only if you're creating an electronic non-referenced refund.
     * **Character limit**: 32 **V****alues**: a valid payment method ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodId")
    public String paymentMethodId;
    public ProxyGetRefund withPaymentMethodId(String paymentMethodId) {
        this.paymentMethodId = paymentMethodId;
        return this;
    }
    
    /**
     *  The unique ID of the payment method snapshot which is a copy of the particular Payment Method used in a transaction.
     * **Character limit**: 32 **V****alues**: a valid payment method snapshot ID 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("PaymentMethodSnapshotId")
    public String paymentMethodSnapshotId;
    public ProxyGetRefund withPaymentMethodSnapshotId(String paymentMethodSnapshotId) {
        this.paymentMethodSnapshotId = paymentMethodSnapshotId;
        return this;
    }
    
    /**
     *  A code identifying the reason for the transaction. Must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code.
     * **Character limit**: 32 **V****alues**: a valid reason code 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReasonCode")
    public String reasonCode;
    public ProxyGetRefund withReasonCode(String reasonCode) {
        this.reasonCode = reasonCode;
        return this;
    }
    
    /**
     *  The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.
     * **Character limit**: 60 **Values**: a string of 60 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReferenceID")
    public String referenceID;
    public ProxyGetRefund withReferenceID(String referenceID) {
        this.referenceID = referenceID;
        return this;
    }
    
    /**
     *  The date of the refund, in `yyyy-mm-dd` format. The date of the refund cannot be before the payment date. Specify this field only for external refunds. Zuora automatically generates this field for electronic refunds.
     * **Character limit**: 29 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("RefundDate")
    public LocalDate refundDate;
    public ProxyGetRefund withRefundDate(LocalDate refundDate) {
        this.refundDate = refundDate;
        return this;
    }
    
    /**
     *  The unique identifier of the refund.
     * **Character limit**: 50 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RefundNumber")
    public String refundNumber;
    public ProxyGetRefund withRefundNumber(String refundNumber) {
        this.refundNumber = refundNumber;
        return this;
    }
    
    /**
     *  The date and time when the refund was issued.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("RefundTransactionTime")
    public OffsetDateTime refundTransactionTime;
    public ProxyGetRefund withRefundTransactionTime(OffsetDateTime refundTransactionTime) {
        this.refundTransactionTime = refundTransactionTime;
        return this;
    }
    
    /**
     *  The transaction ID returned by the payment gateway if there is an additional transaction for the payment. Use this field to reconcile payments between your gateway and Zuora Payments.
     * **Character limit**: 60 **Values**: a string of 60 characters or fewer 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondRefundReferenceId")
    public String secondRefundReferenceId;
    public ProxyGetRefund withSecondRefundReferenceId(String secondRefundReferenceId) {
        this.secondRefundReferenceId = secondRefundReferenceId;
        return this;
    }
    
    /**
     *  The date when the payment was settled in the payment processor. This field is used by the Spectrum gateway only and not applicable to other gateways.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("SettledOn")
    public OffsetDateTime settledOn;
    public ProxyGetRefund withSettledOn(OffsetDateTime settledOn) {
        this.settledOn = settledOn;
        return this;
    }
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 35 **Values**:
     * 
     * - 3-byte company identifier &amp;quot;*&amp;quot; 18-byte descriptor
     * - 7-byte company identifier &amp;quot;*&amp;quot; 14-byte descriptor
     * - 12-byte company identifier &amp;quot;*&amp;quot; 9-byte descriptor
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptor")
    public String softDescriptor;
    public ProxyGetRefund withSoftDescriptor(String softDescriptor) {
        this.softDescriptor = softDescriptor;
        return this;
    }
    
    /**
     *  A payment gateway-specific field that maps Zuora to other gateways . **Character limit**: 20 **Values**:
     * 
     * - Customer service phone number formatted as: `NNN-NNN-NNNN` or `NNN-AAAAAAA`
     * - URL (non-e-Commerce): Transactions sent with a URL do not qualify for the best interchange rate
     * - Email address
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SoftDescriptorPhone")
    public String softDescriptorPhone;
    public ProxyGetRefund withSoftDescriptorPhone(String softDescriptorPhone) {
        this.softDescriptorPhone = softDescriptorPhone;
        return this;
    }
    
    /**
     *  Specifies whether the refund is a refund payment or a credit balance. This field is required when creating an non-referenced refund. If you creating an non-referenced refund, then set this value to `CreditBalance`.
     * **Character limit**: 13 **Values**:
     * 
     * - `Payment`
     * - `CreditBalance`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SourceType")
    public String sourceType;
    public ProxyGetRefund withSourceType(String sourceType) {
        this.sourceType = sourceType;
        return this;
    }
    
    /**
     *  The status of the refund.
     * **Character limit**: 10 **Values**: automatically generated:
     * 
     * - `Canceled`
     * - `Error`
     * - `Processed`
     * - `Processing`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Status")
    public String status;
    public ProxyGetRefund withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     *  The date when the payment was submitted.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("SubmittedOn")
    public OffsetDateTime submittedOn;
    public ProxyGetRefund withSubmittedOn(OffsetDateTime submittedOn) {
        this.submittedOn = submittedOn;
        return this;
    }
    
    /**
     * Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SyncDate__NS")
    public String syncDateNS;
    public ProxyGetRefund withSyncDateNS(String syncDateNS) {
        this.syncDateNS = syncDateNS;
        return this;
    }
    
    /**
     * Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SynctoNetSuite__NS")
    public String synctoNetSuiteNS;
    public ProxyGetRefund withSynctoNetSuiteNS(String synctoNetSuiteNS) {
        this.synctoNetSuiteNS = synctoNetSuiteNS;
        return this;
    }
    
    /**
     *  Specifies whether or not the object has been transferred to an external accounting system. Use this field for integrations with accounting systems such as NetSuite.
     * **Character limit**: 10 **Values**: automatically generated:
     * 
     * - `Processing`
     * - `Yes`
     * - `Error`
     * - `Ignore`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("TransferredToAccounting")
    public String transferredToAccounting;
    public ProxyGetRefund withTransferredToAccounting(String transferredToAccounting) {
        this.transferredToAccounting = transferredToAccounting;
        return this;
    }
    
    /**
     *  Specifies if the refund is electronic or external.
     * **Character limit**: 10 **Values**:
     * 
     * - `Electronic`
     * - External
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    public String type;
    public ProxyGetRefund withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     *  The ID of the last user to update the object.
     * **Character limit**: 32 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UpdatedById")
    public String updatedById;
    public ProxyGetRefund withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     *  The date when the object was last updated.
     * **Character limit**: 29 **Values**: automatically generated 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("UpdatedDate")
    public OffsetDateTime updatedDate;
    public ProxyGetRefund withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
