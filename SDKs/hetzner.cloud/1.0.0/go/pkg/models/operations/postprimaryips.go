// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum - Resource type the Primary IP can be assigned to
type PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum string

const (
	PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnumServer PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum = "server"
)

func (e PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum) ToPointer() *PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum {
	return &e
}

func (e *PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		*e = PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum: %v", v)
	}
}

// PostPrimaryIpsCreatePrimaryIPRequestTypeEnum - Primary IP type
type PostPrimaryIpsCreatePrimaryIPRequestTypeEnum string

const (
	PostPrimaryIpsCreatePrimaryIPRequestTypeEnumIpv4 PostPrimaryIpsCreatePrimaryIPRequestTypeEnum = "ipv4"
	PostPrimaryIpsCreatePrimaryIPRequestTypeEnumIpv6 PostPrimaryIpsCreatePrimaryIPRequestTypeEnum = "ipv6"
)

func (e PostPrimaryIpsCreatePrimaryIPRequestTypeEnum) ToPointer() *PostPrimaryIpsCreatePrimaryIPRequestTypeEnum {
	return &e
}

func (e *PostPrimaryIpsCreatePrimaryIPRequestTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = PostPrimaryIpsCreatePrimaryIPRequestTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPrimaryIpsCreatePrimaryIPRequestTypeEnum: %v", v)
	}
}

// PostPrimaryIpsCreatePrimaryIPRequest - The `type` argument is required while `datacenter` and `assignee_id` are mutually exclusive.
type PostPrimaryIpsCreatePrimaryIPRequest struct {
	// ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.
	AssigneeID *int64 `json:"assignee_id,omitempty"`
	// Resource type the Primary IP can be assigned to
	AssigneeType PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum `json:"assignee_type"`
	// Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`.
	AutoDelete *bool `json:"auto_delete,omitempty"`
	// ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.
	Datacenter *string `json:"datacenter,omitempty"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels,omitempty"`
	Name   string                 `json:"name"`
	// Primary IP type
	Type PostPrimaryIpsCreatePrimaryIPRequestTypeEnum `json:"type"`
}

// PostPrimaryIpsCreatePrimaryIPResponseActionError - Error message for the Action if error occurred, otherwise null
type PostPrimaryIpsCreatePrimaryIPResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostPrimaryIpsCreatePrimaryIPResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum - Status of the Action
type PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum string

const (
	PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnumSuccess PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum = "success"
	PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnumRunning PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum = "running"
	PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnumError   PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum = "error"
)

func (e PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum) ToPointer() *PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum {
	return &e
}

func (e *PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum: %v", v)
	}
}

type PostPrimaryIpsCreatePrimaryIPResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostPrimaryIpsCreatePrimaryIPResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostPrimaryIpsCreatePrimaryIPResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum `json:"status"`
}

// PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum - Resource type the Primary IP can be assigned to
type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum string

const (
	PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnumServer PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum = "server"
)

func (e PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum) ToPointer() *PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum {
	return &e
}

func (e *PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "server":
		*e = PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum: %v", v)
	}
}

type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation struct {
	// City the Location is closest to
	City string `json:"city"`
	// ISO 3166-1 alpha-2 code of the country the Location resides in
	Country string `json:"country"`
	// Description of the Location
	Description string `json:"description"`
	// ID of the Location
	ID float64 `json:"id"`
	// Latitude of the city closest to the Location
	Latitude float64 `json:"latitude"`
	// Longitude of the city closest to the Location
	Longitude float64 `json:"longitude"`
	// Unique identifier of the Location
	Name string `json:"name"`
	// Name of network zone this Location resides in
	NetworkZone string `json:"network_zone"`
}

// PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes - The Server types the Datacenter can handle
type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes struct {
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	Available []float64 `json:"available"`
	// IDs of Server types that are supported and for which the Datacenter has enough resources left
	AvailableForMigration []float64 `json:"available_for_migration"`
	// IDs of Server types that are supported in the Datacenter
	Supported []float64 `json:"supported"`
}

// PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter - Datacenter this Primary IP is located at
type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter struct {
	// Description of the Datacenter
	Description string `json:"description"`
	// ID of the Resource
	ID       int64                                                            `json:"id"`
	Location PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation `json:"location"`
	// Unique identifier of the Datacenter
	Name string `json:"name"`
	// The Server types the Datacenter can handle
	ServerTypes PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes `json:"server_types"`
}

type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDNSPtr struct {
	// DNS pointer for the specific IP address
	DNSPtr string `json:"dns_ptr"`
	// Single IPv4 or IPv6 address
	IP string `json:"ip"`
}

// PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection - Protection configuration for the Resource
type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection struct {
	// If true, prevents the Resource from being deleted
	Delete bool `json:"delete"`
}

// PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum - Type of the Primary IP
type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum string

const (
	PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnumIpv4 PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum = "ipv4"
	PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnumIpv6 PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum = "ipv6"
)

func (e PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum) ToPointer() *PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum {
	return &e
}

func (e *PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ipv4":
		fallthrough
	case "ipv6":
		*e = PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum: %v", v)
	}
}

type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP struct {
	// ID of the resource the Primary IP is assigned to, null if it is not assigned at all
	AssigneeID int64 `json:"assignee_id"`
	// Resource type the Primary IP can be assigned to
	AssigneeType PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum `json:"assignee_type"`
	// Delete this Primary IP when the resource it is assigned to is deleted
	AutoDelete bool `json:"auto_delete"`
	// Whether the IP is blocked
	Blocked bool `json:"blocked"`
	// Point in time when the Resource was created (in ISO-8601 format)
	Created string `json:"created"`
	// Datacenter this Primary IP is located at
	Datacenter PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter `json:"datacenter"`
	// Array of reverse DNS entries
	DNSPtr []PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDNSPtr `json:"dns_ptr"`
	// ID of the Resource
	ID int64 `json:"id"`
	// IP address
	IP string `json:"ip"`
	// User-defined labels (key-value pairs)
	Labels map[string]string `json:"labels"`
	// Name of the Resource. Must be unique per Project.
	Name string `json:"name"`
	// Protection configuration for the Resource
	Protection PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection `json:"protection"`
	// Type of the Primary IP
	Type PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum `json:"type"`
}

// PostPrimaryIpsCreatePrimaryIPResponse - The `primary_ip` key contains the Primary IP that was just created
type PostPrimaryIpsCreatePrimaryIPResponse struct {
	Action    *PostPrimaryIpsCreatePrimaryIPResponseAction   `json:"action,omitempty"`
	PrimaryIP PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP `json:"primary_ip"`
}

type PostPrimaryIpsResponse struct {
	ContentType string
	// The `primary_ip` key contains the Primary IP that was just created
	CreatePrimaryIPResponse *PostPrimaryIpsCreatePrimaryIPResponse
	StatusCode              int
	RawResponse             *http.Response
}
