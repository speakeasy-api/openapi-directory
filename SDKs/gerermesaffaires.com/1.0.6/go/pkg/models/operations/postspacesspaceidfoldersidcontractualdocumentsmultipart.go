// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccounting struct {
	AccountedOn *string                                                                                `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                                `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataFile struct {
	File    string `multipartForm:"name=File"`
	Content []byte `multipartForm:"content"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum string

const (
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumContract         PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "contract"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumEngagementLetter PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "engagement-letter"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumAmendment        PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "amendment"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumPurchaseOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "purchase-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumDeliveryOrder    PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "delivery-order"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumQuotation        PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "quotation"
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnumOther            PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum = "other"
)

func (e PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum) ToPointer() *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "contract":
		fallthrough
	case "engagement-letter":
		fallthrough
	case "amendment":
		fallthrough
	case "purchase-order":
		fallthrough
	case "delivery-order":
		fallthrough
	case "quotation":
		fallthrough
	case "other":
		*e = PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum: %v", v)
	}
}

// PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormData1 - Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormData1 struct {
	Accounting  *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataAccounting `multipartForm:"name=Accounting,json"`
	Amount      *string                                                                    `multipartForm:"name=Amount"`
	Author      *string                                                                    `multipartForm:"name=Author"`
	Code        *string                                                                    `multipartForm:"name=Code"`
	Comment     *string                                                                    `multipartForm:"name=Comment"`
	Date        *string                                                                    `multipartForm:"name=Date"`
	Designation *string                                                                    `multipartForm:"name=Designation"`
	File        PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataFile        `multipartForm:"file"`
	Reference   *string                                                                    `multipartForm:"name=Reference"`
	StartDate   *string                                                                    `multipartForm:"name=StartDate"`
	Title       string                                                                     `multipartForm:"name=Title"`
	Type        *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormDataTypeEnum   `multipartForm:"name=Type"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartRequest struct {
	// Document to add (either DocumentId either (File,Name,Content64Encoded,Title) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartFormData1 `request:"mediaType=multipart/form-data"`
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDContractualDocumentsMultipart201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipart201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDContractualDocumentsMultipart201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDContractualDocumentsMultipart201ApplicationJSON
}
