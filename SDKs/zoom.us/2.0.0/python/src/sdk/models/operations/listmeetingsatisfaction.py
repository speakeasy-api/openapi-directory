"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class ListMeetingSatisfactionSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class ListMeetingSatisfactionRequest:
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""The start date for the query in “yyyy-mm-dd” format."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""The end date for the query in “yyyy-mm-dd” format."""  
    

@dataclasses.dataclass
class ListMeetingSatisfaction200ApplicationXMLClientSatisfaction:
    
    date_: Optional[date] = dataclasses.field(default=None)
    r"""Date of the report."""  
    good_count: Optional[int] = dataclasses.field(default=None)
    r"""The total number of \\"thumbs up\\" received for this meeting."""  
    none_count: Optional[int] = dataclasses.field(default=None)
    r"""The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down)."""  
    not_good_count: Optional[int] = dataclasses.field(default=None)
    r"""The total number of \\"thumbs down\\" received for this meeting."""  
    satisfaction_percent: Optional[int] = dataclasses.field(default=None)
    r"""Satisfaction Percentage.
    The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
    """  
    

@dataclasses.dataclass
class ListMeetingSatisfaction200ApplicationXML:
    r"""**HTTP Status Code:** `200`<br>
    Client satisfaction data returned.
    """
    
    client_satisfaction: Optional[list[ListMeetingSatisfaction200ApplicationXMLClientSatisfaction]] = dataclasses.field(default=None)  
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report in 'yyyy-mm-dd' format."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report in 'yyyy-mm-dd' format."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The total number of records available across all pages."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListMeetingSatisfaction200ApplicationJSONClientSatisfaction:
    
    date_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date of the report."""  
    good_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('good_count'), 'exclude': lambda f: f is None }})
    r"""The total number of \\"thumbs up\\" received for this meeting."""  
    none_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('none_count'), 'exclude': lambda f: f is None }})
    r"""The total number of attendees who didn't submit any response (neither thumbs up nor thumbs down)."""  
    not_good_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('not_good_count'), 'exclude': lambda f: f is None }})
    r"""The total number of \\"thumbs down\\" received for this meeting."""  
    satisfaction_percent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('satisfaction_percent'), 'exclude': lambda f: f is None }})
    r"""Satisfaction Percentage.
    The satisfaction percentage is calculated as `(good_count + none_count)` / `total_count`.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListMeetingSatisfaction200ApplicationJSON:
    r"""**HTTP Status Code:** `200`<br>
    Client satisfaction data returned.
    """
    
    client_satisfaction: Optional[list[ListMeetingSatisfaction200ApplicationJSONClientSatisfaction]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('client_satisfaction'), 'exclude': lambda f: f is None }})  
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report in 'yyyy-mm-dd' format."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report in 'yyyy-mm-dd' format."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The total number of records available across all pages."""  
    

@dataclasses.dataclass
class ListMeetingSatisfactionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    list_meeting_satisfaction_200_application_json_object: Optional[ListMeetingSatisfaction200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    Client satisfaction data returned.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    