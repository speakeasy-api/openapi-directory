"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PermissionEntityPermissionEnum(str, Enum):
    r"""Permission type"""
    FULL = 'full'
    READONLY = 'readonly'
    WRITEONLY = 'writeonly'
    LIST = 'list'
    HISTORY = 'history'
    ADMIN = 'admin'
    BUNDLE = 'bundle'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PermissionEntity:
    r"""List Permissions"""
    
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    r"""Group ID"""  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_name'), 'exclude': lambda f: f is None }})
    r"""Group name if applicable"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Permission ID"""  
    path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path'), 'exclude': lambda f: f is None }})
    r"""Folder path"""  
    permission: Optional[PermissionEntityPermissionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permission'), 'exclude': lambda f: f is None }})
    r"""Permission type"""  
    recursive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recursive'), 'exclude': lambda f: f is None }})
    r"""Does this permission apply to subfolders?"""  
    user_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID"""  
    username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('username'), 'exclude': lambda f: f is None }})
    r"""User's username"""  
    