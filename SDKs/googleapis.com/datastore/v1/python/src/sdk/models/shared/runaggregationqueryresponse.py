"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import aggregationquery as shared_aggregationquery
from ..shared import aggregationresultbatch as shared_aggregationresultbatch
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunAggregationQueryResponse:
    r"""The response for Datastore.RunAggregationQuery."""
    
    batch: Optional[shared_aggregationresultbatch.AggregationResultBatch] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batch'), 'exclude': lambda f: f is None }})
    r"""A batch of aggregation results produced by an aggregation query."""  
    query: Optional[shared_aggregationquery.AggregationQuery] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('query'), 'exclude': lambda f: f is None }})
    r"""Datastore query for running an aggregation over a Query."""  
    transaction: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction'), 'exclude': lambda f: f is None }})
    r"""The identifier of the transaction that was started as part of this RunAggregationQuery request. Set only when ReadOptions.new_transaction was set in RunAggregationQueryRequest.read_options."""  
    