"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Browser:
    r"""To change the description use /examples/TagsDescriptions.json"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def browse_csv(self, request: operations.BrowseCSVRequest) -> operations.BrowseCSVResponse:
        r"""Searches for data (ie. customer, task, etc) and returns it in a CSV form.
        Searches for data (ie. customer, task, etc) and returns it in a CSV form.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/browser/csv'
        
        query_params = utils.get_query_params(operations.BrowseCSVRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BrowseCSVResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.browse_csv_default_application_vnd_xtrf_v1_plus_json_object = out

        return res

    def browse_json(self, request: operations.BrowseJSONRequest) -> operations.BrowseJSONResponse:
        r"""Searches for data (ie. customer, task, etc) and returns it in a tabular form.
        Searches for data (ie. customer, task, etc) and returns it in a tabular form.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/browser'
        
        query_params = utils.get_query_params(operations.BrowseJSONRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.BrowseJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.browse_json_default_application_vnd_xtrf_v1_plus_json_object = out

        return res

    def create(self, request: operations.CreateRequest) -> operations.CreateResponse:
        r"""Creates view for given class.
        Creates view for given class.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateRequest, base_url, '/browser/views/for/{className}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "view_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewWithIDDTO])
                res.view_with_id_dto = out

        return res

    def delete(self, request: operations.DeleteRequest) -> operations.DeleteResponse:
        r"""Removes a view.
        Removes a view. No content is returned upon success (204).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteRequest, base_url, '/browser/views/{viewId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_column(self, request: operations.DeleteColumnRequest) -> operations.DeleteColumnResponse:
        r"""Deletes a single column from view.
        Deletes a single column from view.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteColumnRequest, base_url, '/browser/views/{viewId}/columns/{columnName}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ColumnDTO]])
                res.column_dtos = out

        return res

    def get(self, request: operations.GetRequest) -> operations.GetResponse:
        r"""Returns all view's information.
        Returns all view's information (ie. name, columns, filters, etc).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetRequest, base_url, '/browser/views/{viewId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewDTO])
                res.view_dto = out

        return res

    def get_column_settings(self, request: operations.GetColumnSettingsRequest) -> operations.GetColumnSettingsResponse:
        r"""Returns column's specific settings.
        Returns column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetColumnSettingsRequest, base_url, '/browser/views/{viewId}/columns/{columnName}/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetColumnSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.get_column_settings_default_application_vnd_xtrf_v1_plus_json_object = out

        return res

    def get_columns(self, request: operations.GetColumnsRequest) -> operations.GetColumnsResponse:
        r"""Returns columns defined in view.
        Returns columns defined in view.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetColumnsRequest, base_url, '/browser/views/{viewId}/columns', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetColumnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ColumnDTO]])
                res.column_dtos = out

        return res

    def get_current_view_details(self, request: operations.GetCurrentViewDetailsRequest) -> operations.GetCurrentViewDetailsResponse:
        r"""Returns current view's detailed information, suitable for browser.
        Returns current view's detailed information, suitable for browser.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCurrentViewDetailsRequest, base_url, '/browser/views/details/for/{className}', request)
        
        query_params = utils.get_query_params(operations.GetCurrentViewDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCurrentViewDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewDetailsDTO])
                res.view_details_dto = out

        return res

    def get_filter(self, request: operations.GetFilterRequest) -> operations.GetFilterResponse:
        r"""Returns view's filter.
        Returns view's filter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFilterRequest, base_url, '/browser/views/{viewId}/filter', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFilterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilterDTO])
                res.filter_dto = out

        return res

    def get_local_settings(self, request: operations.GetLocalSettingsRequest) -> operations.GetLocalSettingsResponse:
        r"""Returns view's local settings (for current user).
        Returns view's local settings (for current user).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLocalSettingsRequest, base_url, '/browser/views/{viewId}/settings/local', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLocalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LocalSettingsDTO])
                res.local_settings_dto = out

        return res

    def get_order(self, request: operations.GetOrderRequest) -> operations.GetOrderResponse:
        r"""Returns view's order settings.
        Returns view's order settings.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrderRequest, base_url, '/browser/views/{viewId}/order', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderDTO])
                res.order_dto = out

        return res

    def get_permissions(self, request: operations.GetPermissionsRequest) -> operations.GetPermissionsResponse:
        r"""Returns view's permissions.
        Returns view's permissions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPermissionsRequest, base_url, '/browser/views/{viewId}/permissions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionsDTO])
                res.permissions_dto = out

        return res

    def get_settings(self, request: operations.GetSettingsRequest) -> operations.GetSettingsResponse:
        r"""Returns view's settings.
        Returns view's settings (ie. name).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsRequest, base_url, '/browser/views/{viewId}/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SettingsDTO])
                res.settings_dto = out

        return res

    def get_view_details(self, request: operations.GetViewDetailsRequest) -> operations.GetViewDetailsResponse:
        r"""Returns view's detailed information, suitable for browser.
        Returns view's detailed information, suitable for browser.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetViewDetailsRequest, base_url, '/browser/views/details/for/{className}/{viewId}', request)
        
        query_params = utils.get_query_params(operations.GetViewDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetViewDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewDetailsDTO])
                res.view_details_dto = out

        return res

    def get_views_brief(self, request: operations.GetViewsBriefRequest) -> operations.GetViewsBriefResponse:
        r"""Returns views' brief.
        Returns views' brief.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetViewsBriefRequest, base_url, '/browser/views/for/{className}', request)
        
        query_params = utils.get_query_params(operations.GetViewsBriefRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetViewsBriefResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewsBriefDTO])
                res.views_brief_dto = out

        return res

    def select_view_and_get_its_details(self, request: operations.SelectViewAndGetItsDetailsRequest) -> operations.SelectViewAndGetItsDetailsResponse:
        r"""Selects given view as current and returns its detailed information, suitable for browser.
        Selects given view as current and returns its detailed information, suitable for browser.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SelectViewAndGetItsDetailsRequest, base_url, '/browser/views/details/for/{className}/{viewId}', request)
        
        query_params = utils.get_query_params(operations.SelectViewAndGetItsDetailsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SelectViewAndGetItsDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewDetailsDTO])
                res.view_details_dto = out

        return res

    def update(self, request: operations.UpdateRequest) -> operations.UpdateResponse:
        r"""Updates all view's information.
        Updates all view's information (ie. name, columns, filters, etc).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateRequest, base_url, '/browser/views/{viewId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "view_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ViewDTO])
                res.view_dto = out

        return res

    def update_column_settings(self, request: operations.UpdateColumnSettingsRequest) -> operations.UpdateColumnSettingsResponse:
        r"""Updates column's specific settings.
        Updates column's specific settings. For example when column describes money amount we can decide whether it should display currency or not.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateColumnSettingsRequest, base_url, '/browser/views/{viewId}/columns/{columnName}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateColumnSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_column_settings_default_application_vnd_xtrf_v1_plus_json_object = out

        return res

    def update_columns(self, request: operations.UpdateColumnsRequest) -> operations.UpdateColumnsResponse:
        r"""Updates columns in view.
        Updates columns in view.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateColumnsRequest, base_url, '/browser/views/{viewId}/columns', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateColumnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ColumnDTO]])
                res.column_dtos = out

        return res

    def update_filter(self, request: operations.UpdateFilterRequest) -> operations.UpdateFilterResponse:
        r"""Updates view's filter.
        Updates view's filter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateFilterRequest, base_url, '/browser/views/{viewId}/filter', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFilterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FilterDTO])
                res.filter_dto = out

        return res

    def update_filter_property(self, request: operations.UpdateFilterPropertyRequest) -> operations.UpdateFilterPropertyResponse:
        r"""Updates view's filter property.
        Updates view's filter property.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateFilterPropertyRequest, base_url, '/browser/views/{viewId}/filter/{filterProperty}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_property_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFilterPropertyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_filter_property_default_application_vnd_xtrf_v1_plus_json_object = out

        return res

    def update_local_settings(self, request: operations.UpdateLocalSettingsRequest) -> operations.UpdateLocalSettingsResponse:
        r"""Updates view's local settings (for current user).
        Updates view's local settings (for current user).
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateLocalSettingsRequest, base_url, '/browser/views/{viewId}/settings/local', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "local_settings_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateLocalSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LocalSettingsDTO])
                res.local_settings_dto = out

        return res

    def update_order(self, request: operations.UpdateOrderRequest) -> operations.UpdateOrderResponse:
        r"""Updates view's order settings.
        Updates view's order settings.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrderRequest, base_url, '/browser/views/{viewId}/order', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "order_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OrderDTO])
                res.order_dto = out

        return res

    def update_permissions(self, request: operations.UpdatePermissionsRequest) -> operations.UpdatePermissionsResponse:
        r"""Updates view's permissions.
        Updates view's permissions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePermissionsRequest, base_url, '/browser/views/{viewId}/permissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "permissions_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PermissionsDTO])
                res.permissions_dto = out

        return res

    def update_settings(self, request: operations.UpdateSettingsRequest) -> operations.UpdateSettingsResponse:
        r"""Updates view's settings.
        Updates view's settings.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateSettingsRequest, base_url, '/browser/views/{viewId}/settings', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "settings_dto", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSettingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if True:
            if utils.match_content_type(content_type, 'application/vnd.xtrf-v1+json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SettingsDTO])
                res.settings_dto = out

        return res

    