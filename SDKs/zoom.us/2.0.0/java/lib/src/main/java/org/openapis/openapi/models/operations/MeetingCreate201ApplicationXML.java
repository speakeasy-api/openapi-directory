/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.OffsetDateTime;

/**
 * MeetingCreate201ApplicationXML - Meeting object
 */
public class MeetingCreate201ApplicationXML {
    /**
     * Agenda
     */
    
    public String agenda;
    public MeetingCreate201ApplicationXML withAgenda(String agenda) {
        this.agenda = agenda;
        return this;
    }
    
    /**
     * Unique identifier of the scheduler who scheduled this meeting on behalf of the host. This field is only returned if you used "schedule_for" option in the [Create a Meeting API request](https://marketplace.zoom.us/docs/api-reference/zoom-api/meetings/meetingcreate).
     */
    
    public String assistantId;
    public MeetingCreate201ApplicationXML withAssistantId(String assistantId) {
        this.assistantId = assistantId;
        return this;
    }
    
    /**
     * The date and time at which this meeting was created.
     */
    
    public OffsetDateTime createdAt;
    public MeetingCreate201ApplicationXML withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Meeting duration.
     */
    
    public Long duration;
    public MeetingCreate201ApplicationXML withDuration(Long duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * H.323/SIP room system password
     */
    
    public String h323Password;
    public MeetingCreate201ApplicationXML withH323Password(String h323Password) {
        this.h323Password = h323Password;
        return this;
    }
    
    /**
     * Email address of the meeting host.
     */
    
    public String hostEmail;
    public MeetingCreate201ApplicationXML withHostEmail(String hostEmail) {
        this.hostEmail = hostEmail;
        return this;
    }
    
    /**
     * [Meeting ID](https://support.zoom.us/hc/en-us/articles/201362373-What-is-a-Meeting-ID-): Unique identifier of the meeting in "**long**" format(represented as int64 data type in JSON), also known as the meeting number.
     */
    
    public Long id;
    public MeetingCreate201ApplicationXML withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * URL for participants to join the meeting. This URL should only be shared with users that you would like to invite for the meeting.
     */
    
    public String joinUrl;
    public MeetingCreate201ApplicationXML withJoinUrl(String joinUrl) {
        this.joinUrl = joinUrl;
        return this;
    }
    
    /**
     * Array of occurrence objects.
     */
    
    public MeetingCreate201ApplicationXMLOccurrences[] occurrences;
    public MeetingCreate201ApplicationXML withOccurrences(MeetingCreate201ApplicationXMLOccurrences[] occurrences) {
        this.occurrences = occurrences;
        return this;
    }
    
    /**
     * Meeting password. Password may only contain the following characters: `[a-z A-Z 0-9 @ - _ * !]`
     * 
     * If "Require a password when scheduling new meetings" setting has been **enabled** **and** [locked](https://support.zoom.us/hc/en-us/articles/115005269866-Using-Tiered-Settings#locked) for the user, the password field will be autogenerated in the response even if it is not provided in the API request. 
     * 
     * 
     * 
     */
    
    public String password;
    public MeetingCreate201ApplicationXML withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Personal Meeting Id. Only used for scheduled meetings and recurring meetings with no fixed time.
     */
    
    public Long pmi;
    public MeetingCreate201ApplicationXML withPmi(Long pmi) {
        this.pmi = pmi;
        return this;
    }
    
    /**
     * Recurrence object. Use this object only for a meeting with type `8` i.e., a recurring meeting with fixed time. 
     */
    
    public MeetingCreate201ApplicationXMLRecurrence recurrence;
    public MeetingCreate201ApplicationXML withRecurrence(MeetingCreate201ApplicationXMLRecurrence recurrence) {
        this.recurrence = recurrence;
        return this;
    }
    
    /**
     * URL using which registrants can register for a meeting. This field is only returned for meetings that have enabled registration.
     */
    
    public String registrationUrl;
    public MeetingCreate201ApplicationXML withRegistrationUrl(String registrationUrl) {
        this.registrationUrl = registrationUrl;
        return this;
    }
    
    /**
     * Meeting settings.
     */
    
    public MeetingCreate201ApplicationXMLSettings settings;
    public MeetingCreate201ApplicationXML withSettings(MeetingCreate201ApplicationXMLSettings settings) {
        this.settings = settings;
        return this;
    }
    
    /**
     * Meeting start date-time in UTC/GMT. Example: "2020-03-31T12:02:00Z"
     */
    
    public OffsetDateTime startTime;
    public MeetingCreate201ApplicationXML withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * URL to start the meeting. This URL should only be used by the host of the meeting and **should not be shared with anyone other than the host** of the meeting as anyone with this URL will be able to login to the Zoom Client as the host of the meeting.
     */
    
    public String startUrl;
    public MeetingCreate201ApplicationXML withStartUrl(String startUrl) {
        this.startUrl = startUrl;
        return this;
    }
    
    /**
     * Timezone to format start_time
     */
    
    public String timezone;
    public MeetingCreate201ApplicationXML withTimezone(String timezone) {
        this.timezone = timezone;
        return this;
    }
    
    /**
     * Meeting topic
     */
    
    public String topic;
    public MeetingCreate201ApplicationXML withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * Tracking fields
     */
    
    public MeetingCreate201ApplicationXMLTrackingFields[] trackingFields;
    public MeetingCreate201ApplicationXML withTrackingFields(MeetingCreate201ApplicationXMLTrackingFields[] trackingFields) {
        this.trackingFields = trackingFields;
        return this;
    }
    
    /**
     * Meeting Type
     */
    
    public MeetingCreate201ApplicationXMLTypeEnum type;
    public MeetingCreate201ApplicationXML withType(MeetingCreate201ApplicationXMLTypeEnum type) {
        this.type = type;
        return this;
    }
    
}
