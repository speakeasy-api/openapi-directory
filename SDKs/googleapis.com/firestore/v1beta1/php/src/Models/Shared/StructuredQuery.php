<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * StructuredQuery - A Firestore query.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class StructuredQuery
{
    /**
     * A position in a query result set.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Cursor $endAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('endAt')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Cursor')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Cursor $endAt = null;
    
    /**
     * The collections to query.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\CollectionSelector> $from
     */
	#[\JMS\Serializer\Annotation\SerializedName('from')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\CollectionSelector>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $from = null;
    
    /**
     * The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.
     * 
     * @var ?int $limit
     */
	#[\JMS\Serializer\Annotation\SerializedName('limit')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $limit = null;
    
    /**
     * The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.
     * 
     * @var ?int $offset
     */
	#[\JMS\Serializer\Annotation\SerializedName('offset')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $offset = null;
    
    /**
     * The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Order> $orderBy
     */
	#[\JMS\Serializer\Annotation\SerializedName('orderBy')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Order>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $orderBy = null;
    
    /**
     * The projection of document's fields to return.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Projection $select
     */
	#[\JMS\Serializer\Annotation\SerializedName('select')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Projection')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Projection $select = null;
    
    /**
     * A position in a query result set.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Cursor $startAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('startAt')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Cursor')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Cursor $startAt = null;
    
    /**
     * A filter.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Filter $where
     */
	#[\JMS\Serializer\Annotation\SerializedName('where')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Filter')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Filter $where = null;
    
	public function __construct()
	{
		$this->endAt = null;
		$this->from = null;
		$this->limit = null;
		$this->offset = null;
		$this->orderBy = null;
		$this->select = null;
		$this->startAt = null;
		$this->where = null;
	}
}
