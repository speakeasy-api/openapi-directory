"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import flex_v1_insights_assessments_comment as shared_flex_v1_insights_assessments_comment
from typing import Optional

CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS = [
	"https://flex-api.twilio.com",
]


@dataclasses.dataclass
class CreateInsightsAssessmentsCommentSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsCommentCreateInsightsAssessmentsCommentRequest:
    
    agent_id: str = dataclasses.field(metadata={'form': { 'field_name': 'AgentId' }})
    r"""The id of the agent."""  
    category_id: str = dataclasses.field(metadata={'form': { 'field_name': 'CategoryId' }})
    r"""The ID of the category"""  
    category_name: str = dataclasses.field(metadata={'form': { 'field_name': 'CategoryName' }})
    r"""The name of the category"""  
    comment: str = dataclasses.field(metadata={'form': { 'field_name': 'Comment' }})
    r"""The Assessment comment."""  
    offset: float = dataclasses.field(metadata={'form': { 'field_name': 'Offset' }})
    r"""The offset"""  
    segment_id: str = dataclasses.field(metadata={'form': { 'field_name': 'SegmentId' }})
    r"""The id of the segment."""  
    user_email: str = dataclasses.field(metadata={'form': { 'field_name': 'UserEmail' }})
    r"""The email id of the user."""  
    user_name: str = dataclasses.field(metadata={'form': { 'field_name': 'UserName' }})
    r"""The name of the user."""  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsCommentRequest:
    
    request_body: Optional[CreateInsightsAssessmentsCommentCreateInsightsAssessmentsCommentRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/x-www-form-urlencoded' }})  
    token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'Token', 'style': 'simple', 'explode': False }})
    r"""The Token HTTP request header"""  
    

@dataclasses.dataclass
class CreateInsightsAssessmentsCommentResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    flex_v1_insights_assessments_comment: Optional[shared_flex_v1_insights_assessments_comment.FlexV1InsightsAssessmentsComment] = dataclasses.field(default=None)
    r"""Created"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    