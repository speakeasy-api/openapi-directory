"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import fileshareconfig as shared_fileshareconfig
from ..shared import networkconfig as shared_networkconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class InstanceStateEnum(str, Enum):
    r"""Output only. The instance state."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    READY = 'READY'
    REPAIRING = 'REPAIRING'
    DELETING = 'DELETING'
    ERROR = 'ERROR'
    RESTORING = 'RESTORING'
    SUSPENDED = 'SUSPENDED'
    SUSPENDING = 'SUSPENDING'
    RESUMING = 'RESUMING'

class InstanceSuspensionReasonsEnum(str, Enum):
    SUSPENSION_REASON_UNSPECIFIED = 'SUSPENSION_REASON_UNSPECIFIED'
    KMS_KEY_ISSUE = 'KMS_KEY_ISSUE'

class InstanceTierEnum(str, Enum):
    r"""The service tier of the instance."""
    TIER_UNSPECIFIED = 'TIER_UNSPECIFIED'
    STANDARD = 'STANDARD'
    PREMIUM = 'PREMIUM'
    BASIC_HDD = 'BASIC_HDD'
    BASIC_SSD = 'BASIC_SSD'
    HIGH_SCALE_SSD = 'HIGH_SCALE_SSD'
    ENTERPRISE = 'ENTERPRISE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Instance:
    r"""A Filestore instance."""
    
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time when the instance was created."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the instance (2048 characters or less)."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other."""  
    file_shares: Optional[list[shared_fileshareconfig.FileShareConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileShares'), 'exclude': lambda f: f is None }})
    r"""File system shares on the instance. For this version, only a single file share is supported."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""KMS key name used for data encryption."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. The resource name of the instance, in the format `projects/{project}/locations/{location}/instances/{instance}`."""  
    networks: Optional[list[shared_networkconfig.NetworkConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""VPC networks to which the instance is connected. For this version, only a single network is supported."""  
    satisfies_pzs: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('satisfiesPzs'), 'exclude': lambda f: f is None }})
    r"""Output only. Reserved for future use."""  
    state: Optional[InstanceStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The instance state."""  
    status_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusMessage'), 'exclude': lambda f: f is None }})
    r"""Output only. Additional information about the instance state, if available."""  
    suspension_reasons: Optional[list[InstanceSuspensionReasonsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('suspensionReasons'), 'exclude': lambda f: f is None }})
    r"""Output only. Field indicates all the reasons the instance is in \\"SUSPENDED\\" state."""  
    tier: Optional[InstanceTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""The service tier of the instance."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InstanceInput:
    r"""A Filestore instance."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""The description of the instance (2048 characters or less)."""  
    etag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('etag'), 'exclude': lambda f: f is None }})
    r"""Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other."""  
    file_shares: Optional[list[shared_fileshareconfig.FileShareConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileShares'), 'exclude': lambda f: f is None }})
    r"""File system shares on the instance. For this version, only a single file share is supported."""  
    kms_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kmsKeyName'), 'exclude': lambda f: f is None }})
    r"""KMS key name used for data encryption."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Resource labels to represent user provided metadata."""  
    networks: Optional[list[shared_networkconfig.NetworkConfigInput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networks'), 'exclude': lambda f: f is None }})
    r"""VPC networks to which the instance is connected. For this version, only a single network is supported."""  
    tier: Optional[InstanceTierEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier'), 'exclude': lambda f: f is None }})
    r"""The service tier of the instance."""  
    