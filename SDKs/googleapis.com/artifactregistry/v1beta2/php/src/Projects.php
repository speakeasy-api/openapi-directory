<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListResponse
     */
	public function artifactregistryProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesAptArtifactsImport(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/aptArtifacts:import', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importAptArtifactsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesAptArtifactsUpload(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/aptArtifacts:create', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesAptArtifactsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadAptArtifactMediaResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UploadAptArtifactMediaResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/repositories', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "repositoryInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists files.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesFilesList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/files', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesFilesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFilesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListFilesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM policy for a given resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists repositories.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/repositories', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRepositoriesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListRepositoriesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists packages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/packages', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listPackagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListPackagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesTagsCreate(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists tags.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesTagsList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/tags', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTagsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListTagsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesTagsPatch(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "tag", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesTagsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Tag', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a version and all of its content. The returned operation will complete once the version has been deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesVersionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesVersionsGet(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{name}', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->version = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Version', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists versions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesPackagesVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesPackagesVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the IAM policy for a given resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tests if the caller has a list of permissions on a resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesYumArtifactsImport(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/yumArtifacts:import', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importYumArtifactsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse
     */
	public function artifactregistryProjectsLocationsRepositoriesYumArtifactsUpload(
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta2/{parent}/yumArtifacts:create', \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArtifactregistryProjectsLocationsRepositoriesYumArtifactsUploadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadYumArtifactMediaResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UploadYumArtifactMediaResponse', 'json');
            }
        }

        return $response;
    }
}