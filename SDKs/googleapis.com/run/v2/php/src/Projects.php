<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a Job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateResponse
     */
	public function runProjectsLocationsJobsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRunV2JobInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Executions from a Job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListResponse
     */
	public function runProjectsLocationsJobsExecutionsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/executions', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2ListExecutionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2ListExecutionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Tasks from an Execution of a Job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListResponse
     */
	public function runProjectsLocationsJobsExecutionsTasksList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/tasks', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsExecutionsTasksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2ListTasksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2ListTasksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Jobs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListResponse
     */
	public function runProjectsLocationsJobsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/jobs', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2ListJobsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2ListJobsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers creation of a new Execution of this Job.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunResponse
     */
	public function runProjectsLocationsJobsRun(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:run', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRunV2RunJobRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsJobsRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListResponse
     */
	public function runProjectsLocationsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitResponse
     */
	public function runProjectsLocationsOperationsWait(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}:wait', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleLongrunningWaitOperationRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsOperationsWaitResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new Service in a given project and location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse
     */
	public function runProjectsLocationsServicesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRunV2ServiceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the IAM Access Control policy currently in effect for the given Cloud Run Service. This result does not include any inherited policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse
     */
	public function runProjectsLocationsServicesGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Services.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse
     */
	public function runProjectsLocationsServicesList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2ListServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2ListServicesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a Service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchResponse
     */
	public function runProjectsLocationsServicesPatch(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRunV2ServiceInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a Revision.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteResponse
     */
	public function runProjectsLocationsServicesRevisionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets information about a Revision.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetResponse
     */
	public function runProjectsLocationsServicesRevisionsGet(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{name}', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2Revision = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2Revision', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists Revisions from a given Service, or from a given location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListResponse
     */
	public function runProjectsLocationsServicesRevisionsList(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{parent}/revisions', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesRevisionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRunV2ListRevisionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRunV2ListRevisionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse
     */
	public function runProjectsLocationsServicesSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1SetIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1Policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse
     */
	public function runProjectsLocationsServicesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v2/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleIamV1TestIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RunProjectsLocationsServicesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleIamV1TestIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleIamV1TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}