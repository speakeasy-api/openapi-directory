"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import responseheaderspolicycorsconfig as shared_responseheaderspolicycorsconfig
from ..shared import responseheaderspolicycustomheadersconfig as shared_responseheaderspolicycustomheadersconfig
from ..shared import responseheaderspolicyremoveheadersconfig as shared_responseheaderspolicyremoveheadersconfig
from ..shared import responseheaderspolicysecurityheadersconfig as shared_responseheaderspolicysecurityheadersconfig
from ..shared import responseheaderspolicyservertimingheadersconfig as shared_responseheaderspolicyservertimingheadersconfig
from typing import Optional


@dataclasses.dataclass
class CreateResponseHeadersPolicy20200531RequestBodyResponseHeadersPolicyConfig:
    r"""<p>A response headers policy configuration.</p> <p>A response headers policy configuration contains metadata about the response headers policy, and configurations for sets of HTTP response headers.</p>"""
    
    comment: Optional[str] = dataclasses.field(default=None)  
    cors_config: Optional[shared_responseheaderspolicycorsconfig.ResponseHeadersPolicyCorsConfig] = dataclasses.field(default=None)  
    custom_headers_config: Optional[shared_responseheaderspolicycustomheadersconfig.ResponseHeadersPolicyCustomHeadersConfig] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    remove_headers_config: Optional[shared_responseheaderspolicyremoveheadersconfig.ResponseHeadersPolicyRemoveHeadersConfig] = dataclasses.field(default=None)  
    security_headers_config: Optional[shared_responseheaderspolicysecurityheadersconfig.ResponseHeadersPolicySecurityHeadersConfig] = dataclasses.field(default=None)  
    server_timing_headers_config: Optional[shared_responseheaderspolicyservertimingheadersconfig.ResponseHeadersPolicyServerTimingHeadersConfig] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class CreateResponseHeadersPolicy20200531RequestBody:
    
    response_headers_policy_config: CreateResponseHeadersPolicy20200531RequestBodyResponseHeadersPolicyConfig = dataclasses.field()
    r"""<p>A response headers policy configuration.</p> <p>A response headers policy configuration contains metadata about the response headers policy, and configurations for sets of HTTP response headers.</p>"""  
    

@dataclasses.dataclass
class CreateResponseHeadersPolicy20200531Request:
    
    request_body: bytes = dataclasses.field(metadata={'request': { 'media_type': 'text/xml' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateResponseHeadersPolicy20200531Response:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    