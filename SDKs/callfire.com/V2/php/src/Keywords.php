<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Keywords 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Find keyword lease configs
     * 
     * Searches for all keyword lease configs for the user. Returns a paged list of KeywordConfig
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsResponse
     */
	public function findKeywordLeaseConfigs(
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/configs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeaseConfigsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Page', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find keyword leases
     * 
     * Searches for all keywords owned by user. A keyword lease is the ownership information involving a keyword
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesResponse
     */
	public function findKeywordLeases(
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindKeywordLeasesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordLeasePage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordLeasePage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find keywords
     * 
     * Searches for all keywords available for purchase on the CallFire platform. If a keyword appears in the response, it is available for purchase. List the 'keywords' in a query parameter to search for multiple keywords (at least one keyword should be sent in request). Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindKeywordsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindKeywordsResponse
     */
	public function findKeywords(
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindKeywordsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindKeywordsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindKeywordsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindKeywordsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific lease
     * 
     * Searches for all keywords owned by user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseResponse
     */
	public function getKeywordLease(
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/{keyword}', \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordLease = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordLease', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a keyword by id
     * 
     * Get keyword by id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdResponse
     */
	public function getKeywordLeaseById(
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/id/{id}', \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordLease = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordLease', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific keyword lease config
     * 
     * Returns a single KeywordConfig instance for a given keyword lease
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigResponse
     */
	public function getKeywordLeaseConfig(
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/configs/{keyword}', \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetKeywordLeaseConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->keywordConfig = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\KeywordConfig', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Check for a specific keyword
     * 
     * Searches for the specific keyword to purchase on the CallFire platform. Returns 'true' if keyword is available. Keyword should only consist of uppercase and lowercase letters and numbers. Number of characters must be greater than 2, but less than 65.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableResponse
     */
	public function isKeywordAvailable(
        \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/{keyword}/available', \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IsKeywordAvailableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->isKeywordAvailable200ApplicationJSONBoolean = $serializer->deserialize((string)$httpResponse->getBody(), 'bool', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a lease
     * 
     * Updates a keyword lease. Turns the autoRenew on/off. Configure double opt in feature. Add/remove contact list from keyword.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseResponse
     */
	public function updateKeywordLease(
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/{keyword}', \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "keywordLease", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a keyword lease config
     * 
     * Updates a keyword lease configuration. Use this API endpoint to enable/disable inbound SMS forwarding, set forward number. Forward number must be in E.164 format)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigResponse
     */
	public function updateKeywordLeaseConfig(
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/keywords/leases/configs/{keyword}', \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "keywordConfig", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateKeywordLeaseConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}