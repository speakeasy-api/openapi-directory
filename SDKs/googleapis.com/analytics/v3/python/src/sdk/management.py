"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Management:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def analytics_management_account_summaries_list(self, request: operations.AnalyticsManagementAccountSummariesListRequest, security: operations.AnalyticsManagementAccountSummariesListSecurity) -> operations.AnalyticsManagementAccountSummariesListResponse:
        r"""Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/accountSummaries'
        
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountSummariesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountSummariesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AccountSummaries])
                res.account_summaries = out

        return res

    def analytics_management_account_user_links_delete(self, request: operations.AnalyticsManagementAccountUserLinksDeleteRequest, security: operations.AnalyticsManagementAccountUserLinksDeleteSecurity) -> operations.AnalyticsManagementAccountUserLinksDeleteResponse:
        r"""Removes a user from the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementAccountUserLinksDeleteRequest, base_url, '/management/accounts/{accountId}/entityUserLinks/{linkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountUserLinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountUserLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_account_user_links_insert(self, request: operations.AnalyticsManagementAccountUserLinksInsertRequest, security: operations.AnalyticsManagementAccountUserLinksInsertSecurity) -> operations.AnalyticsManagementAccountUserLinksInsertResponse:
        r"""Adds a new user to the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementAccountUserLinksInsertRequest, base_url, '/management/accounts/{accountId}/entityUserLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountUserLinksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountUserLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    def analytics_management_account_user_links_list(self, request: operations.AnalyticsManagementAccountUserLinksListRequest, security: operations.AnalyticsManagementAccountUserLinksListSecurity) -> operations.AnalyticsManagementAccountUserLinksListResponse:
        r"""Lists account-user links for a given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementAccountUserLinksListRequest, base_url, '/management/accounts/{accountId}/entityUserLinks', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountUserLinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountUserLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLinks])
                res.entity_user_links = out

        return res

    def analytics_management_account_user_links_update(self, request: operations.AnalyticsManagementAccountUserLinksUpdateRequest, security: operations.AnalyticsManagementAccountUserLinksUpdateSecurity) -> operations.AnalyticsManagementAccountUserLinksUpdateResponse:
        r"""Updates permissions for an existing user on the given account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementAccountUserLinksUpdateRequest, base_url, '/management/accounts/{accountId}/entityUserLinks/{linkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountUserLinksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountUserLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    def analytics_management_accounts_list(self, request: operations.AnalyticsManagementAccountsListRequest, security: operations.AnalyticsManagementAccountsListSecurity) -> operations.AnalyticsManagementAccountsListResponse:
        r"""Lists all accounts to which the user has access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/accounts'
        
        query_params = utils.get_query_params(operations.AnalyticsManagementAccountsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementAccountsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Accounts])
                res.accounts = out

        return res

    def analytics_management_client_id_hash_client_id(self, request: operations.AnalyticsManagementClientIDHashClientIDRequest, security: operations.AnalyticsManagementClientIDHashClientIDSecurity) -> operations.AnalyticsManagementClientIDHashClientIDResponse:
        r"""Hashes the given Client ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/clientId:hashClientId'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "hash_client_id_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementClientIDHashClientIDRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementClientIDHashClientIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.HashClientIDResponse])
                res.hash_client_id_response = out

        return res

    def analytics_management_custom_data_sources_list(self, request: operations.AnalyticsManagementCustomDataSourcesListRequest, security: operations.AnalyticsManagementCustomDataSourcesListSecurity) -> operations.AnalyticsManagementCustomDataSourcesListResponse:
        r"""List custom data sources to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDataSourcesListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDataSourcesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDataSourcesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDataSources])
                res.custom_data_sources = out

        return res

    def analytics_management_custom_dimensions_get(self, request: operations.AnalyticsManagementCustomDimensionsGetRequest, security: operations.AnalyticsManagementCustomDimensionsGetSecurity) -> operations.AnalyticsManagementCustomDimensionsGetResponse:
        r"""Get a custom dimension to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDimensionsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDimensionsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDimensionsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDimension])
                res.custom_dimension = out

        return res

    def analytics_management_custom_dimensions_insert(self, request: operations.AnalyticsManagementCustomDimensionsInsertRequest, security: operations.AnalyticsManagementCustomDimensionsInsertSecurity) -> operations.AnalyticsManagementCustomDimensionsInsertResponse:
        r"""Create a new custom dimension."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDimensionsInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_dimension_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDimensionsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDimensionsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDimension])
                res.custom_dimension = out

        return res

    def analytics_management_custom_dimensions_list(self, request: operations.AnalyticsManagementCustomDimensionsListRequest, security: operations.AnalyticsManagementCustomDimensionsListSecurity) -> operations.AnalyticsManagementCustomDimensionsListResponse:
        r"""Lists custom dimensions to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDimensionsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDimensionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDimensionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDimensions])
                res.custom_dimensions = out

        return res

    def analytics_management_custom_dimensions_patch(self, request: operations.AnalyticsManagementCustomDimensionsPatchRequest, security: operations.AnalyticsManagementCustomDimensionsPatchSecurity) -> operations.AnalyticsManagementCustomDimensionsPatchResponse:
        r"""Updates an existing custom dimension. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDimensionsPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_dimension_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDimensionsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDimensionsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDimension])
                res.custom_dimension = out

        return res

    def analytics_management_custom_dimensions_update(self, request: operations.AnalyticsManagementCustomDimensionsUpdateRequest, security: operations.AnalyticsManagementCustomDimensionsUpdateSecurity) -> operations.AnalyticsManagementCustomDimensionsUpdateResponse:
        r"""Updates an existing custom dimension."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomDimensionsUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_dimension_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomDimensionsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomDimensionsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomDimension])
                res.custom_dimension = out

        return res

    def analytics_management_custom_metrics_get(self, request: operations.AnalyticsManagementCustomMetricsGetRequest, security: operations.AnalyticsManagementCustomMetricsGetSecurity) -> operations.AnalyticsManagementCustomMetricsGetResponse:
        r"""Get a custom metric to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomMetricsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomMetricsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomMetricsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomMetric])
                res.custom_metric = out

        return res

    def analytics_management_custom_metrics_insert(self, request: operations.AnalyticsManagementCustomMetricsInsertRequest, security: operations.AnalyticsManagementCustomMetricsInsertSecurity) -> operations.AnalyticsManagementCustomMetricsInsertResponse:
        r"""Create a new custom metric."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomMetricsInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_metric_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomMetricsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomMetricsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomMetric])
                res.custom_metric = out

        return res

    def analytics_management_custom_metrics_list(self, request: operations.AnalyticsManagementCustomMetricsListRequest, security: operations.AnalyticsManagementCustomMetricsListSecurity) -> operations.AnalyticsManagementCustomMetricsListResponse:
        r"""Lists custom metrics to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomMetricsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomMetricsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomMetricsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomMetrics])
                res.custom_metrics = out

        return res

    def analytics_management_custom_metrics_patch(self, request: operations.AnalyticsManagementCustomMetricsPatchRequest, security: operations.AnalyticsManagementCustomMetricsPatchSecurity) -> operations.AnalyticsManagementCustomMetricsPatchResponse:
        r"""Updates an existing custom metric. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomMetricsPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_metric_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomMetricsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomMetricsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomMetric])
                res.custom_metric = out

        return res

    def analytics_management_custom_metrics_update(self, request: operations.AnalyticsManagementCustomMetricsUpdateRequest, security: operations.AnalyticsManagementCustomMetricsUpdateSecurity) -> operations.AnalyticsManagementCustomMetricsUpdateResponse:
        r"""Updates an existing custom metric."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementCustomMetricsUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "custom_metric_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementCustomMetricsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementCustomMetricsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CustomMetric])
                res.custom_metric = out

        return res

    def analytics_management_experiments_delete(self, request: operations.AnalyticsManagementExperimentsDeleteRequest, security: operations.AnalyticsManagementExperimentsDeleteSecurity) -> operations.AnalyticsManagementExperimentsDeleteResponse:
        r"""Delete an experiment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_experiments_get(self, request: operations.AnalyticsManagementExperimentsGetRequest, security: operations.AnalyticsManagementExperimentsGetSecurity) -> operations.AnalyticsManagementExperimentsGetResponse:
        r"""Returns an experiment to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Experiment])
                res.experiment = out

        return res

    def analytics_management_experiments_insert(self, request: operations.AnalyticsManagementExperimentsInsertRequest, security: operations.AnalyticsManagementExperimentsInsertSecurity) -> operations.AnalyticsManagementExperimentsInsertResponse:
        r"""Create a new experiment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "experiment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Experiment])
                res.experiment = out

        return res

    def analytics_management_experiments_list(self, request: operations.AnalyticsManagementExperimentsListRequest, security: operations.AnalyticsManagementExperimentsListSecurity) -> operations.AnalyticsManagementExperimentsListResponse:
        r"""Lists experiments to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Experiments])
                res.experiments = out

        return res

    def analytics_management_experiments_patch(self, request: operations.AnalyticsManagementExperimentsPatchRequest, security: operations.AnalyticsManagementExperimentsPatchSecurity) -> operations.AnalyticsManagementExperimentsPatchResponse:
        r"""Update an existing experiment. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "experiment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Experiment])
                res.experiment = out

        return res

    def analytics_management_experiments_update(self, request: operations.AnalyticsManagementExperimentsUpdateRequest, security: operations.AnalyticsManagementExperimentsUpdateSecurity) -> operations.AnalyticsManagementExperimentsUpdateResponse:
        r"""Update an existing experiment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementExperimentsUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "experiment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementExperimentsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementExperimentsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Experiment])
                res.experiment = out

        return res

    def analytics_management_filters_delete(self, request: operations.AnalyticsManagementFiltersDeleteRequest, security: operations.AnalyticsManagementFiltersDeleteSecurity) -> operations.AnalyticsManagementFiltersDeleteResponse:
        r"""Delete a filter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersDeleteRequest, base_url, '/management/accounts/{accountId}/filters/{filterId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filter])
                res.filter = out

        return res

    def analytics_management_filters_get(self, request: operations.AnalyticsManagementFiltersGetRequest, security: operations.AnalyticsManagementFiltersGetSecurity) -> operations.AnalyticsManagementFiltersGetResponse:
        r"""Returns filters to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersGetRequest, base_url, '/management/accounts/{accountId}/filters/{filterId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filter])
                res.filter = out

        return res

    def analytics_management_filters_insert(self, request: operations.AnalyticsManagementFiltersInsertRequest, security: operations.AnalyticsManagementFiltersInsertSecurity) -> operations.AnalyticsManagementFiltersInsertResponse:
        r"""Create a new filter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersInsertRequest, base_url, '/management/accounts/{accountId}/filters', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filter])
                res.filter = out

        return res

    def analytics_management_filters_list(self, request: operations.AnalyticsManagementFiltersListRequest, security: operations.AnalyticsManagementFiltersListSecurity) -> operations.AnalyticsManagementFiltersListResponse:
        r"""Lists all filters for an account"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersListRequest, base_url, '/management/accounts/{accountId}/filters', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filters])
                res.filters = out

        return res

    def analytics_management_filters_patch(self, request: operations.AnalyticsManagementFiltersPatchRequest, security: operations.AnalyticsManagementFiltersPatchSecurity) -> operations.AnalyticsManagementFiltersPatchResponse:
        r"""Updates an existing filter. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersPatchRequest, base_url, '/management/accounts/{accountId}/filters/{filterId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filter])
                res.filter = out

        return res

    def analytics_management_filters_update(self, request: operations.AnalyticsManagementFiltersUpdateRequest, security: operations.AnalyticsManagementFiltersUpdateSecurity) -> operations.AnalyticsManagementFiltersUpdateResponse:
        r"""Updates an existing filter."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementFiltersUpdateRequest, base_url, '/management/accounts/{accountId}/filters/{filterId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "filter_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementFiltersUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementFiltersUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Filter])
                res.filter = out

        return res

    def analytics_management_goals_get(self, request: operations.AnalyticsManagementGoalsGetRequest, security: operations.AnalyticsManagementGoalsGetSecurity) -> operations.AnalyticsManagementGoalsGetResponse:
        r"""Gets a goal to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Goal])
                res.goal = out

        return res

    def analytics_management_goals_insert(self, request: operations.AnalyticsManagementGoalsInsertRequest, security: operations.AnalyticsManagementGoalsInsertSecurity) -> operations.AnalyticsManagementGoalsInsertResponse:
        r"""Create a new goal."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "goal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Goal])
                res.goal = out

        return res

    def analytics_management_goals_list(self, request: operations.AnalyticsManagementGoalsListRequest, security: operations.AnalyticsManagementGoalsListSecurity) -> operations.AnalyticsManagementGoalsListResponse:
        r"""Lists goals to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Goals])
                res.goals = out

        return res

    def analytics_management_goals_patch(self, request: operations.AnalyticsManagementGoalsPatchRequest, security: operations.AnalyticsManagementGoalsPatchSecurity) -> operations.AnalyticsManagementGoalsPatchResponse:
        r"""Updates an existing goal. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "goal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Goal])
                res.goal = out

        return res

    def analytics_management_goals_update(self, request: operations.AnalyticsManagementGoalsUpdateRequest, security: operations.AnalyticsManagementGoalsUpdateSecurity) -> operations.AnalyticsManagementGoalsUpdateResponse:
        r"""Updates an existing goal."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementGoalsUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "goal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementGoalsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementGoalsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Goal])
                res.goal = out

        return res

    def analytics_management_profile_filter_links_delete(self, request: operations.AnalyticsManagementProfileFilterLinksDeleteRequest, security: operations.AnalyticsManagementProfileFilterLinksDeleteSecurity) -> operations.AnalyticsManagementProfileFilterLinksDeleteResponse:
        r"""Delete a profile filter link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_profile_filter_links_get(self, request: operations.AnalyticsManagementProfileFilterLinksGetRequest, security: operations.AnalyticsManagementProfileFilterLinksGetSecurity) -> operations.AnalyticsManagementProfileFilterLinksGetResponse:
        r"""Returns a single profile filter link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProfileFilterLink])
                res.profile_filter_link = out

        return res

    def analytics_management_profile_filter_links_insert(self, request: operations.AnalyticsManagementProfileFilterLinksInsertRequest, security: operations.AnalyticsManagementProfileFilterLinksInsertSecurity) -> operations.AnalyticsManagementProfileFilterLinksInsertResponse:
        r"""Create a new profile filter link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_filter_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProfileFilterLink])
                res.profile_filter_link = out

        return res

    def analytics_management_profile_filter_links_list(self, request: operations.AnalyticsManagementProfileFilterLinksListRequest, security: operations.AnalyticsManagementProfileFilterLinksListSecurity) -> operations.AnalyticsManagementProfileFilterLinksListResponse:
        r"""Lists all profile filter links for a profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProfileFilterLinks])
                res.profile_filter_links = out

        return res

    def analytics_management_profile_filter_links_patch(self, request: operations.AnalyticsManagementProfileFilterLinksPatchRequest, security: operations.AnalyticsManagementProfileFilterLinksPatchSecurity) -> operations.AnalyticsManagementProfileFilterLinksPatchResponse:
        r"""Update an existing profile filter link. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_filter_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProfileFilterLink])
                res.profile_filter_link = out

        return res

    def analytics_management_profile_filter_links_update(self, request: operations.AnalyticsManagementProfileFilterLinksUpdateRequest, security: operations.AnalyticsManagementProfileFilterLinksUpdateSecurity) -> operations.AnalyticsManagementProfileFilterLinksUpdateResponse:
        r"""Update an existing profile filter link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileFilterLinksUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_filter_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileFilterLinksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileFilterLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProfileFilterLink])
                res.profile_filter_link = out

        return res

    def analytics_management_profile_user_links_delete(self, request: operations.AnalyticsManagementProfileUserLinksDeleteRequest, security: operations.AnalyticsManagementProfileUserLinksDeleteSecurity) -> operations.AnalyticsManagementProfileUserLinksDeleteResponse:
        r"""Removes a user from the given view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileUserLinksDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileUserLinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileUserLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_profile_user_links_insert(self, request: operations.AnalyticsManagementProfileUserLinksInsertRequest, security: operations.AnalyticsManagementProfileUserLinksInsertSecurity) -> operations.AnalyticsManagementProfileUserLinksInsertResponse:
        r"""Adds a new user to the given view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileUserLinksInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileUserLinksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileUserLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    def analytics_management_profile_user_links_list(self, request: operations.AnalyticsManagementProfileUserLinksListRequest, security: operations.AnalyticsManagementProfileUserLinksListSecurity) -> operations.AnalyticsManagementProfileUserLinksListResponse:
        r"""Lists profile-user links for a given view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileUserLinksListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileUserLinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileUserLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLinks])
                res.entity_user_links = out

        return res

    def analytics_management_profile_user_links_update(self, request: operations.AnalyticsManagementProfileUserLinksUpdateRequest, security: operations.AnalyticsManagementProfileUserLinksUpdateSecurity) -> operations.AnalyticsManagementProfileUserLinksUpdateResponse:
        r"""Updates permissions for an existing user on the given view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfileUserLinksUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfileUserLinksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfileUserLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    def analytics_management_profiles_delete(self, request: operations.AnalyticsManagementProfilesDeleteRequest, security: operations.AnalyticsManagementProfilesDeleteSecurity) -> operations.AnalyticsManagementProfilesDeleteResponse:
        r"""Deletes a view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_profiles_get(self, request: operations.AnalyticsManagementProfilesGetRequest, security: operations.AnalyticsManagementProfilesGetSecurity) -> operations.AnalyticsManagementProfilesGetResponse:
        r"""Gets a view (profile) to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def analytics_management_profiles_insert(self, request: operations.AnalyticsManagementProfilesInsertRequest, security: operations.AnalyticsManagementProfilesInsertSecurity) -> operations.AnalyticsManagementProfilesInsertResponse:
        r"""Create a new view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def analytics_management_profiles_list(self, request: operations.AnalyticsManagementProfilesListRequest, security: operations.AnalyticsManagementProfilesListSecurity) -> operations.AnalyticsManagementProfilesListResponse:
        r"""Lists views (profiles) to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profiles])
                res.profiles = out

        return res

    def analytics_management_profiles_patch(self, request: operations.AnalyticsManagementProfilesPatchRequest, security: operations.AnalyticsManagementProfilesPatchSecurity) -> operations.AnalyticsManagementProfilesPatchResponse:
        r"""Updates an existing view (profile). This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def analytics_management_profiles_update(self, request: operations.AnalyticsManagementProfilesUpdateRequest, security: operations.AnalyticsManagementProfilesUpdateSecurity) -> operations.AnalyticsManagementProfilesUpdateResponse:
        r"""Updates an existing view (profile)."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementProfilesUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "profile_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementProfilesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementProfilesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Profile])
                res.profile = out

        return res

    def analytics_management_remarketing_audience_delete(self, request: operations.AnalyticsManagementRemarketingAudienceDeleteRequest, security: operations.AnalyticsManagementRemarketingAudienceDeleteSecurity) -> operations.AnalyticsManagementRemarketingAudienceDeleteResponse:
        r"""Delete a remarketing audience."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudienceDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudienceDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudienceDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_remarketing_audience_get(self, request: operations.AnalyticsManagementRemarketingAudienceGetRequest, security: operations.AnalyticsManagementRemarketingAudienceGetSecurity) -> operations.AnalyticsManagementRemarketingAudienceGetResponse:
        r"""Gets a remarketing audience to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudienceGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudienceGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudienceGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemarketingAudience])
                res.remarketing_audience = out

        return res

    def analytics_management_remarketing_audience_insert(self, request: operations.AnalyticsManagementRemarketingAudienceInsertRequest, security: operations.AnalyticsManagementRemarketingAudienceInsertSecurity) -> operations.AnalyticsManagementRemarketingAudienceInsertResponse:
        r"""Creates a new remarketing audience."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudienceInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remarketing_audience_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudienceInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudienceInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemarketingAudience])
                res.remarketing_audience = out

        return res

    def analytics_management_remarketing_audience_list(self, request: operations.AnalyticsManagementRemarketingAudienceListRequest, security: operations.AnalyticsManagementRemarketingAudienceListSecurity) -> operations.AnalyticsManagementRemarketingAudienceListResponse:
        r"""Lists remarketing audiences to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudienceListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudienceListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudienceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemarketingAudiences])
                res.remarketing_audiences = out

        return res

    def analytics_management_remarketing_audience_patch(self, request: operations.AnalyticsManagementRemarketingAudiencePatchRequest, security: operations.AnalyticsManagementRemarketingAudiencePatchSecurity) -> operations.AnalyticsManagementRemarketingAudiencePatchResponse:
        r"""Updates an existing remarketing audience. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudiencePatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remarketing_audience_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudiencePatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudiencePatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemarketingAudience])
                res.remarketing_audience = out

        return res

    def analytics_management_remarketing_audience_update(self, request: operations.AnalyticsManagementRemarketingAudienceUpdateRequest, security: operations.AnalyticsManagementRemarketingAudienceUpdateSecurity) -> operations.AnalyticsManagementRemarketingAudienceUpdateResponse:
        r"""Updates an existing remarketing audience."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementRemarketingAudienceUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remarketing_audience_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementRemarketingAudienceUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementRemarketingAudienceUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RemarketingAudience])
                res.remarketing_audience = out

        return res

    def analytics_management_segments_list(self, request: operations.AnalyticsManagementSegmentsListRequest, security: operations.AnalyticsManagementSegmentsListSecurity) -> operations.AnalyticsManagementSegmentsListResponse:
        r"""Lists segments to which the user has access."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/management/segments'
        
        query_params = utils.get_query_params(operations.AnalyticsManagementSegmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementSegmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Segments])
                res.segments = out

        return res

    def analytics_management_unsampled_reports_delete(self, request: operations.AnalyticsManagementUnsampledReportsDeleteRequest, security: operations.AnalyticsManagementUnsampledReportsDeleteSecurity) -> operations.AnalyticsManagementUnsampledReportsDeleteResponse:
        r"""Deletes an unsampled report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUnsampledReportsDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUnsampledReportsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUnsampledReportsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_unsampled_reports_get(self, request: operations.AnalyticsManagementUnsampledReportsGetRequest, security: operations.AnalyticsManagementUnsampledReportsGetSecurity) -> operations.AnalyticsManagementUnsampledReportsGetResponse:
        r"""Returns a single unsampled report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUnsampledReportsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUnsampledReportsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUnsampledReportsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnsampledReport])
                res.unsampled_report = out

        return res

    def analytics_management_unsampled_reports_insert(self, request: operations.AnalyticsManagementUnsampledReportsInsertRequest, security: operations.AnalyticsManagementUnsampledReportsInsertSecurity) -> operations.AnalyticsManagementUnsampledReportsInsertResponse:
        r"""Create a new unsampled report."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUnsampledReportsInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "unsampled_report_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementUnsampledReportsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUnsampledReportsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnsampledReport])
                res.unsampled_report = out

        return res

    def analytics_management_unsampled_reports_list(self, request: operations.AnalyticsManagementUnsampledReportsListRequest, security: operations.AnalyticsManagementUnsampledReportsListSecurity) -> operations.AnalyticsManagementUnsampledReportsListResponse:
        r"""Lists unsampled reports to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUnsampledReportsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUnsampledReportsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUnsampledReportsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.UnsampledReports])
                res.unsampled_reports = out

        return res

    def analytics_management_uploads_delete_upload_data(self, request: operations.AnalyticsManagementUploadsDeleteUploadDataRequest, security: operations.AnalyticsManagementUploadsDeleteUploadDataSecurity) -> operations.AnalyticsManagementUploadsDeleteUploadDataResponse:
        r"""Delete data associated with a previous upload."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUploadsDeleteUploadDataRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "analytics_dataimport_delete_upload_data_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementUploadsDeleteUploadDataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUploadsDeleteUploadDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_uploads_get(self, request: operations.AnalyticsManagementUploadsGetRequest, security: operations.AnalyticsManagementUploadsGetSecurity) -> operations.AnalyticsManagementUploadsGetResponse:
        r"""List uploads to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUploadsGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUploadsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUploadsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Upload])
                res.upload = out

        return res

    def analytics_management_uploads_list(self, request: operations.AnalyticsManagementUploadsListRequest, security: operations.AnalyticsManagementUploadsListSecurity) -> operations.AnalyticsManagementUploadsListResponse:
        r"""List uploads to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUploadsListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUploadsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUploadsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Uploads])
                res.uploads = out

        return res

    def analytics_management_uploads_upload_data(self, request: operations.AnalyticsManagementUploadsUploadDataRequest, security: operations.AnalyticsManagementUploadsUploadDataSecurity) -> operations.AnalyticsManagementUploadsUploadDataResponse:
        r"""Upload data for a custom data source."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementUploadsUploadDataRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementUploadsUploadDataRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementUploadsUploadDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Upload])
                res.upload = out

        return res

    def analytics_management_web_property_ad_words_links_delete(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse:
        r"""Deletes a web property-Google Ads link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_web_property_ad_words_links_get(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksGetRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksGetSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksGetResponse:
        r"""Returns a web property-Google Ads link to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityAdWordsLink])
                res.entity_ad_words_link = out

        return res

    def analytics_management_web_property_ad_words_links_insert(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksInsertRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksInsertSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksInsertResponse:
        r"""Creates a webProperty-Google Ads link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_ad_words_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityAdWordsLink])
                res.entity_ad_words_link = out

        return res

    def analytics_management_web_property_ad_words_links_list(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksListRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksListSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksListResponse:
        r"""Lists webProperty-Google Ads links for a given web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityAdWordsLinks])
                res.entity_ad_words_links = out

        return res

    def analytics_management_web_property_ad_words_links_patch(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksPatchRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksPatchSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksPatchResponse:
        r"""Updates an existing webProperty-Google Ads link. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_ad_words_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityAdWordsLink])
                res.entity_ad_words_link = out

        return res

    def analytics_management_web_property_ad_words_links_update(self, request: operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest, security: operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateSecurity) -> operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse:
        r"""Updates an existing webProperty-Google Ads link."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_ad_words_link", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebPropertyAdWordsLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityAdWordsLink])
                res.entity_ad_words_link = out

        return res

    def analytics_management_webproperties_get(self, request: operations.AnalyticsManagementWebpropertiesGetRequest, security: operations.AnalyticsManagementWebpropertiesGetSecurity) -> operations.AnalyticsManagementWebpropertiesGetResponse:
        r"""Gets a web property to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesGetRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webproperty])
                res.webproperty = out

        return res

    def analytics_management_webproperties_insert(self, request: operations.AnalyticsManagementWebpropertiesInsertRequest, security: operations.AnalyticsManagementWebpropertiesInsertSecurity) -> operations.AnalyticsManagementWebpropertiesInsertResponse:
        r"""Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesInsertRequest, base_url, '/management/accounts/{accountId}/webproperties', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webproperty_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webproperty])
                res.webproperty = out

        return res

    def analytics_management_webproperties_list(self, request: operations.AnalyticsManagementWebpropertiesListRequest, security: operations.AnalyticsManagementWebpropertiesListSecurity) -> operations.AnalyticsManagementWebpropertiesListResponse:
        r"""Lists web properties to which the user has access."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesListRequest, base_url, '/management/accounts/{accountId}/webproperties', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webproperties])
                res.webproperties = out

        return res

    def analytics_management_webproperties_patch(self, request: operations.AnalyticsManagementWebpropertiesPatchRequest, security: operations.AnalyticsManagementWebpropertiesPatchSecurity) -> operations.AnalyticsManagementWebpropertiesPatchResponse:
        r"""Updates an existing web property. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesPatchRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webproperty_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webproperty])
                res.webproperty = out

        return res

    def analytics_management_webproperties_update(self, request: operations.AnalyticsManagementWebpropertiesUpdateRequest, security: operations.AnalyticsManagementWebpropertiesUpdateSecurity) -> operations.AnalyticsManagementWebpropertiesUpdateResponse:
        r"""Updates an existing web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertiesUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "webproperty_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertiesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertiesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Webproperty])
                res.webproperty = out

        return res

    def analytics_management_webproperty_user_links_delete(self, request: operations.AnalyticsManagementWebpropertyUserLinksDeleteRequest, security: operations.AnalyticsManagementWebpropertyUserLinksDeleteSecurity) -> operations.AnalyticsManagementWebpropertyUserLinksDeleteResponse:
        r"""Removes a user from the given web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertyUserLinksDeleteRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertyUserLinksDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertyUserLinksDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def analytics_management_webproperty_user_links_insert(self, request: operations.AnalyticsManagementWebpropertyUserLinksInsertRequest, security: operations.AnalyticsManagementWebpropertyUserLinksInsertSecurity) -> operations.AnalyticsManagementWebpropertyUserLinksInsertResponse:
        r"""Adds a new user to the given web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertyUserLinksInsertRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertyUserLinksInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertyUserLinksInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    def analytics_management_webproperty_user_links_list(self, request: operations.AnalyticsManagementWebpropertyUserLinksListRequest, security: operations.AnalyticsManagementWebpropertyUserLinksListSecurity) -> operations.AnalyticsManagementWebpropertyUserLinksListResponse:
        r"""Lists webProperty-user links for a given web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertyUserLinksListRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks', request)
        
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertyUserLinksListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertyUserLinksListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLinks])
                res.entity_user_links = out

        return res

    def analytics_management_webproperty_user_links_update(self, request: operations.AnalyticsManagementWebpropertyUserLinksUpdateRequest, security: operations.AnalyticsManagementWebpropertyUserLinksUpdateSecurity) -> operations.AnalyticsManagementWebpropertyUserLinksUpdateResponse:
        r"""Updates permissions for an existing user on the given web property."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AnalyticsManagementWebpropertyUserLinksUpdateRequest, base_url, '/management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "entity_user_link_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AnalyticsManagementWebpropertyUserLinksUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AnalyticsManagementWebpropertyUserLinksUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EntityUserLink])
                res.entity_user_link = out

        return res

    