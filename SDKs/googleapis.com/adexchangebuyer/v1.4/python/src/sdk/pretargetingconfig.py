"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class PretargetingConfig:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adexchangebuyer_pretargeting_config_delete(self, request: operations.AdexchangebuyerPretargetingConfigDeleteRequest, security: operations.AdexchangebuyerPretargetingConfigDeleteSecurity) -> operations.AdexchangebuyerPretargetingConfigDeleteResponse:
        r"""Deletes an existing pretargeting config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigDeleteRequest, base_url, '/pretargetingconfigs/{accountId}/{configId}', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def adexchangebuyer_pretargeting_config_get(self, request: operations.AdexchangebuyerPretargetingConfigGetRequest, security: operations.AdexchangebuyerPretargetingConfigGetSecurity) -> operations.AdexchangebuyerPretargetingConfigGetResponse:
        r"""Gets a specific pretargeting configuration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigGetRequest, base_url, '/pretargetingconfigs/{accountId}/{configId}', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PretargetingConfig])
                res.pretargeting_config = out

        return res

    def adexchangebuyer_pretargeting_config_insert(self, request: operations.AdexchangebuyerPretargetingConfigInsertRequest, security: operations.AdexchangebuyerPretargetingConfigInsertSecurity) -> operations.AdexchangebuyerPretargetingConfigInsertResponse:
        r"""Inserts a new pretargeting configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigInsertRequest, base_url, '/pretargetingconfigs/{accountId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pretargeting_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PretargetingConfig])
                res.pretargeting_config = out

        return res

    def adexchangebuyer_pretargeting_config_list(self, request: operations.AdexchangebuyerPretargetingConfigListRequest, security: operations.AdexchangebuyerPretargetingConfigListSecurity) -> operations.AdexchangebuyerPretargetingConfigListResponse:
        r"""Retrieves a list of the authenticated user's pretargeting configurations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigListRequest, base_url, '/pretargetingconfigs/{accountId}', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PretargetingConfigList])
                res.pretargeting_config_list = out

        return res

    def adexchangebuyer_pretargeting_config_patch(self, request: operations.AdexchangebuyerPretargetingConfigPatchRequest, security: operations.AdexchangebuyerPretargetingConfigPatchSecurity) -> operations.AdexchangebuyerPretargetingConfigPatchResponse:
        r"""Updates an existing pretargeting config. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigPatchRequest, base_url, '/pretargetingconfigs/{accountId}/{configId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pretargeting_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PretargetingConfig])
                res.pretargeting_config = out

        return res

    def adexchangebuyer_pretargeting_config_update(self, request: operations.AdexchangebuyerPretargetingConfigUpdateRequest, security: operations.AdexchangebuyerPretargetingConfigUpdateSecurity) -> operations.AdexchangebuyerPretargetingConfigUpdateResponse:
        r"""Updates an existing pretargeting config."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerPretargetingConfigUpdateRequest, base_url, '/pretargetingconfigs/{accountId}/{configId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "pretargeting_config", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerPretargetingConfigUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerPretargetingConfigUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PretargetingConfig])
                res.pretargeting_config = out

        return res

    