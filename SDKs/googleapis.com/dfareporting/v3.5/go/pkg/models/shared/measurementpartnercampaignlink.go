// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MeasurementPartnerCampaignLinkLinkStatusEnum - .
type MeasurementPartnerCampaignLinkLinkStatusEnum string

const (
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerUnlinked            MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_UNLINKED"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinked              MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINKED"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinkPending         MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_PENDING"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinkFailure         MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_FAILURE"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinkOptOut          MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_OPT_OUT"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinkOptOutPending   MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerLinkWrappingPending MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING"
	MeasurementPartnerCampaignLinkLinkStatusEnumMeasurementPartnerModeChangePending   MeasurementPartnerCampaignLinkLinkStatusEnum = "MEASUREMENT_PARTNER_MODE_CHANGE_PENDING"
)

func (e MeasurementPartnerCampaignLinkLinkStatusEnum) ToPointer() *MeasurementPartnerCampaignLinkLinkStatusEnum {
	return &e
}

func (e *MeasurementPartnerCampaignLinkLinkStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MEASUREMENT_PARTNER_UNLINKED":
		fallthrough
	case "MEASUREMENT_PARTNER_LINKED":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_FAILURE":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_OPT_OUT":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING":
		fallthrough
	case "MEASUREMENT_PARTNER_MODE_CHANGE_PENDING":
		*e = MeasurementPartnerCampaignLinkLinkStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementPartnerCampaignLinkLinkStatusEnum: %v", v)
	}
}

// MeasurementPartnerCampaignLinkMeasurementPartnerEnum - Measurement partner used for tag wrapping.
type MeasurementPartnerCampaignLinkMeasurementPartnerEnum string

const (
	MeasurementPartnerCampaignLinkMeasurementPartnerEnumNone              MeasurementPartnerCampaignLinkMeasurementPartnerEnum = "NONE"
	MeasurementPartnerCampaignLinkMeasurementPartnerEnumIntegralAdScience MeasurementPartnerCampaignLinkMeasurementPartnerEnum = "INTEGRAL_AD_SCIENCE"
	MeasurementPartnerCampaignLinkMeasurementPartnerEnumDoubleVerify      MeasurementPartnerCampaignLinkMeasurementPartnerEnum = "DOUBLE_VERIFY"
)

func (e MeasurementPartnerCampaignLinkMeasurementPartnerEnum) ToPointer() *MeasurementPartnerCampaignLinkMeasurementPartnerEnum {
	return &e
}

func (e *MeasurementPartnerCampaignLinkMeasurementPartnerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "INTEGRAL_AD_SCIENCE":
		fallthrough
	case "DOUBLE_VERIFY":
		*e = MeasurementPartnerCampaignLinkMeasurementPartnerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MeasurementPartnerCampaignLinkMeasurementPartnerEnum: %v", v)
	}
}

type MeasurementPartnerCampaignLink struct {
	// .
	LinkStatus *MeasurementPartnerCampaignLinkLinkStatusEnum `json:"linkStatus,omitempty"`
	// Measurement partner used for tag wrapping.
	MeasurementPartner *MeasurementPartnerCampaignLinkMeasurementPartnerEnum `json:"measurementPartner,omitempty"`
	// Partner campaign ID needed for establishing linking with Measurement partner.
	PartnerCampaignID *string `json:"partnerCampaignId,omitempty"`
}
