/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Apps {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Uploads the specified SSL certificate.
   */
  appengineAppsAuthorizedCertificatesCreate(
    req: operations.AppengineAppsAuthorizedCertificatesCreateRequest,
    security: operations.AppengineAppsAuthorizedCertificatesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedCertificatesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedCertificatesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedCertificates",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "authorizedCertificate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AppengineAppsAuthorizedCertificatesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedCertificatesCreateResponse =
        new operations.AppengineAppsAuthorizedCertificatesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorizedCertificate = utils.objectToClass(
              httpRes?.data,
              shared.AuthorizedCertificate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified SSL certificate.
   */
  appengineAppsAuthorizedCertificatesDelete(
    req: operations.AppengineAppsAuthorizedCertificatesDeleteRequest,
    security: operations.AppengineAppsAuthorizedCertificatesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedCertificatesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedCertificatesDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AppengineAppsAuthorizedCertificatesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedCertificatesDeleteResponse =
        new operations.AppengineAppsAuthorizedCertificatesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.empty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified SSL certificate.
   */
  appengineAppsAuthorizedCertificatesGet(
    req: operations.AppengineAppsAuthorizedCertificatesGetRequest,
    security: operations.AppengineAppsAuthorizedCertificatesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedCertificatesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedCertificatesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsAuthorizedCertificatesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedCertificatesGetResponse =
        new operations.AppengineAppsAuthorizedCertificatesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorizedCertificate = utils.objectToClass(
              httpRes?.data,
              shared.AuthorizedCertificate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all SSL certificates the user is authorized to administer.
   */
  appengineAppsAuthorizedCertificatesList(
    req: operations.AppengineAppsAuthorizedCertificatesListRequest,
    security: operations.AppengineAppsAuthorizedCertificatesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedCertificatesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedCertificatesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedCertificates",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsAuthorizedCertificatesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedCertificatesListResponse =
        new operations.AppengineAppsAuthorizedCertificatesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorizedCertificatesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAuthorizedCertificatesResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.
   */
  appengineAppsAuthorizedCertificatesPatch(
    req: operations.AppengineAppsAuthorizedCertificatesPatchRequest,
    security: operations.AppengineAppsAuthorizedCertificatesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedCertificatesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedCertificatesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "authorizedCertificate",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.AppengineAppsAuthorizedCertificatesPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedCertificatesPatchResponse =
        new operations.AppengineAppsAuthorizedCertificatesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.authorizedCertificate = utils.objectToClass(
              httpRes?.data,
              shared.AuthorizedCertificate
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all domains the user is authorized to administer.
   */
  appengineAppsAuthorizedDomainsList(
    req: operations.AppengineAppsAuthorizedDomainsListRequest,
    security: operations.AppengineAppsAuthorizedDomainsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsAuthorizedDomainsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsAuthorizedDomainsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/authorizedDomains",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsAuthorizedDomainsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsAuthorizedDomainsListResponse =
        new operations.AppengineAppsAuthorizedDomainsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listAuthorizedDomainsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListAuthorizedDomainsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.
   */
  appengineAppsDomainMappingsCreate(
    req: operations.AppengineAppsDomainMappingsCreateRequest,
    security: operations.AppengineAppsDomainMappingsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsDomainMappingsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsDomainMappingsCreateRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/domainMappings",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "domainMapping",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsDomainMappingsCreateSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsDomainMappingsCreateResponse =
        new operations.AppengineAppsDomainMappingsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.
   */
  appengineAppsDomainMappingsDelete(
    req: operations.AppengineAppsDomainMappingsDeleteRequest,
    security: operations.AppengineAppsDomainMappingsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsDomainMappingsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsDomainMappingsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsDomainMappingsDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsDomainMappingsDeleteResponse =
        new operations.AppengineAppsDomainMappingsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the specified domain mapping.
   */
  appengineAppsDomainMappingsGet(
    req: operations.AppengineAppsDomainMappingsGetRequest,
    security: operations.AppengineAppsDomainMappingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsDomainMappingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsDomainMappingsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsDomainMappingsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsDomainMappingsGetResponse =
        new operations.AppengineAppsDomainMappingsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.domainMapping = utils.objectToClass(
              httpRes?.data,
              shared.DomainMapping
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the domain mappings on an application.
   */
  appengineAppsDomainMappingsList(
    req: operations.AppengineAppsDomainMappingsListRequest,
    security: operations.AppengineAppsDomainMappingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsDomainMappingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsDomainMappingsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/domainMappings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsDomainMappingsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsDomainMappingsListResponse =
        new operations.AppengineAppsDomainMappingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listDomainMappingsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListDomainMappingsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.
   */
  appengineAppsDomainMappingsPatch(
    req: operations.AppengineAppsDomainMappingsPatchRequest,
    security: operations.AppengineAppsDomainMappingsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsDomainMappingsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsDomainMappingsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "domainMapping",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsDomainMappingsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsDomainMappingsPatchResponse =
        new operations.AppengineAppsDomainMappingsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets information about a location.
   */
  appengineAppsLocationsGet(
    req: operations.AppengineAppsLocationsGetRequest,
    security: operations.AppengineAppsLocationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsLocationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsLocationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/locations/{locationsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsLocationsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsLocationsGetResponse =
        new operations.AppengineAppsLocationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.location = utils.objectToClass(httpRes?.data, shared.Location);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists information about the supported locations for this service.
   */
  appengineAppsLocationsList(
    req: operations.AppengineAppsLocationsListRequest,
    security: operations.AppengineAppsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/locations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsLocationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsLocationsListResponse =
        new operations.AppengineAppsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
   */
  appengineAppsOperationsGet(
    req: operations.AppengineAppsOperationsGetRequest,
    security: operations.AppengineAppsOperationsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsOperationsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsOperationsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/operations/{operationsId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsOperationsGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsOperationsGetResponse =
        new operations.AppengineAppsOperationsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.
   */
  appengineAppsOperationsList(
    req: operations.AppengineAppsOperationsListRequest,
    security: operations.AppengineAppsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.AppengineAppsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AppengineAppsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1alpha/apps/{appsId}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.AppengineAppsOperationsListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AppengineAppsOperationsListResponse =
        new operations.AppengineAppsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
