"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Vitals:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def playdeveloperreporting_vitals_errors_issues_search(self, request: operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest, security: operations.PlaydeveloperreportingVitalsErrorsIssuesSearchSecurity) -> operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse:
        r"""Searches all error issues in which reports have been grouped."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest, base_url, '/v1alpha1/{parent}/errorIssues:search', request)
        
        query_params = utils.get_query_params(operations.PlaydeveloperreportingVitalsErrorsIssuesSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaydeveloperreportingVitalsErrorsIssuesSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglePlayDeveloperReportingV1alpha1SearchErrorIssuesResponse])
                res.google_play_developer_reporting_v1alpha1_search_error_issues_response = out

        return res

    def playdeveloperreporting_vitals_errors_reports_search(self, request: operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest, security: operations.PlaydeveloperreportingVitalsErrorsReportsSearchSecurity) -> operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse:
        r"""Searches all error reports received for an app."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest, base_url, '/v1alpha1/{parent}/errorReports:search', request)
        
        query_params = utils.get_query_params(operations.PlaydeveloperreportingVitalsErrorsReportsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaydeveloperreportingVitalsErrorsReportsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglePlayDeveloperReportingV1alpha1SearchErrorReportsResponse])
                res.google_play_developer_reporting_v1alpha1_search_error_reports_response = out

        return res

    def playdeveloperreporting_vitals_stuckbackgroundwakelockrate_get(self, request: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest, security: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetSecurity) -> operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse:
        r"""Describes the properties of the metric set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglePlayDeveloperReportingV1alpha1StuckBackgroundWakelockRateMetricSet])
                res.google_play_developer_reporting_v1alpha1_stuck_background_wakelock_rate_metric_set = out

        return res

    def playdeveloperreporting_vitals_stuckbackgroundwakelockrate_query(self, request: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest, security: operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQuerySecurity) -> operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse:
        r"""Queries the metrics in the metric set."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest, base_url, '/v1alpha1/{name}:query', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "google_play_developer_reporting_v1alpha1_query_stuck_background_wakelock_rate_metric_set_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PlaydeveloperreportingVitalsStuckbackgroundwakelockrateQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GooglePlayDeveloperReportingV1alpha1QueryStuckBackgroundWakelockRateMetricSetResponse])
                res.google_play_developer_reporting_v1alpha1_query_stuck_background_wakelock_rate_metric_set_response = out

        return res

    