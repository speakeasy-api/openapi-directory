<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'http://mastodon.local',
		'https://mastodon.social',
	];
  	
	public TODOSecurity $todoSecurity;
	
	public Accounts $accounts;
	
	public Apps $apps;
	
	public Oauth $oauth;
		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
		
		$this->todoSecurity = new TODOSecurity(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->accounts = new Accounts(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->apps = new Apps(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
		
		$this->oauth = new Oauth(
			$this->_defaultClient,
			$this->_securityClient,
			$this->_serverUrl,
			$this->_language,
			$this->_sdkVersion,
			$this->_genVersion
		);
	}
	
    /**
     * Undo a react emoji to an announcement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameResponse
     */
	public function deleteApiV1AnnouncementsIdReactionsName(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/announcements/{id}/reactions/{name}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1AnnouncementsIdReactionsNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1AnnouncementsIdReactionsName200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove converstation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdResponse
     */
	public function deleteApiV1ConversationsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/conversations/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ConversationsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1ConversationsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a domain block, if it exists in the user's array of blocked domains.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksResponse
     */
	public function deleteApiV1DomainBlocks(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/domain_blocks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1DomainBlocksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1DomainBlocks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfeature a tag
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdResponse
     */
	public function deleteApiV1FeaturedTagsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/featured_tags/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FeaturedTagsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1FeaturedTagsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdResponse
     */
	public function deleteApiV1FiltersId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/filters/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1FiltersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete a list
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsResponse
     */
	public function deleteApiV1Lists(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1Lists200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove accounts from the given list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsResponse
     */
	public function deleteApiV1ListsIdAccounts(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists/{id}/accounts', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ListsIdAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1ListsIdAccounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1PushSubscriptionResponse
     */
	public function deleteApiV1PushSubscription(
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1PushSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/push/subscription');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1PushSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1PushSubscription200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancel a scheduled status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdResponse
     */
	public function deleteApiV1ScheduledStatusesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/scheduled_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1ScheduledStatusesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1ScheduledStatusesId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteApiV1StatusesId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdResponse
     */
	public function deleteApiV1StatusesId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1StatusesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete user suggestion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdResponse
     */
	public function deleteApiV1SuggestionsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/suggestions/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApiV1SuggestionsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteApiV1SuggestionsId200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * OEmbed as JSON
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiOembedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiOembedResponse
     */
	public function getApiOembed(
        \OpenAPI\OpenAPI\Models\Operations\GetApiOembedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiOembedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/oembed');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiOembedRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiOembedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->card = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Card', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View identity proof
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiProofsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiProofsResponse
     */
	public function getApiProofs(
        \OpenAPI\OpenAPI\Models\Operations\GetApiProofsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiProofsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/proofs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiProofsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiProofsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identityProof = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentityProof', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View accounts matching certain criteria for filtering, up to 100 at a time. Pagination may be done with the HTTP Link header in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsResponse
     */
	public function getApiV1AdminAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminAccounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AdminAccount>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View admin-level information about the given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdResponse
     */
	public function getApiV1AdminAccountsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminAccountsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminAccount = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminAccount', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View all reports. Pagination may be done with HTTP Link header in the response.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsResponse
     */
	public function getApiV1AdminReports(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReports = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\AdminReport>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View information about the report with the given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdResponse
     */
	public function getApiV1AdminReportsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AdminReportsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * See all currently active announcements set by admins.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsResponse
     */
	public function getApiV1Announcements(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/announcements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1AnnouncementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->announcements = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Announcement>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get blocked users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksResponse
     */
	public function getApiV1Blocks(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/blocks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1BlocksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Statuses the user has bookmarked.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksResponse
     */
	public function getApiV1Bookmarks(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/bookmarks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1BookmarksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Show conversation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsResponse
     */
	public function getApiV1Conversations(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversations = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Conversation>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom emojis that are available on the server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1CustomEmojisResponse
     */
	public function getApiV1CustomEmojis(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1CustomEmojisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/custom_emojis');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1CustomEmojisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emojis = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Emoji>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List accounts visible in the directory.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryResponse
     */
	public function getApiV1Directory(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/directory');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DirectoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View domains the user has blocked.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksResponse
     */
	public function getApiV1DomainBlocks(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/domain_blocks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1DomainBlocksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getApiV1DomainBlocks200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accounts that the user is currently featuring on their profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsResponse
     */
	public function getApiV1Endorsements(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/endorsements');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1EndorsementsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Statuses the user has favourited.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesResponse
     */
	public function getApiV1Favourites(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/favourites');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FavouritesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View your featured tags.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsResponse
     */
	public function getApiV1FeaturedTags(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/featured_tags');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredTags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FeaturedTag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsSuggestionsResponse
     */
	public function getApiV1FeaturedTagsSuggestions(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsSuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/featured_tags/suggestions');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FeaturedTagsSuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredTags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FeaturedTag>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getApiV1Filters
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersResponse
     */
	public function getApiV1Filters(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/filters');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filters = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Filter>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get one filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdResponse
     */
	public function getApiV1FiltersId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/filters/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FiltersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Pending Follows
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsResponse
     */
	public function getApiV1FollowRequests(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/follow_requests');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1FollowRequestsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Information about the server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceResponse
     */
	public function getApiV1Instance(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/instance');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->instance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Instance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Instance activity over the last 3 months, binned weekly.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceActivityResponse
     */
	public function getApiV1InstanceActivity(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceActivityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/instance/activity');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstanceActivityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->activities = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Activity>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Information about the server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstancePeersResponse
     */
	public function getApiV1InstancePeers(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstancePeersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/instance/peers');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1InstancePeersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getApiV1InstancePeers200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch all lists that the user owns.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsResponse
     */
	public function getApiV1Lists(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->lists = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ListT>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove converstation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdResponse
     */
	public function getApiV1ListsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->list = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View accounts in List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsResponse
     */
	public function getApiV1ListsIdAccounts(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists/{id}/accounts', \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ListsIdAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an attachement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdResponse
     */
	public function getApiV1MediaId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/media/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1MediaIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 206) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attachment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accounts the user has muted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesResponse
     */
	public function getApiV1Mutes(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/mutes');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1MutesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accounts = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Account>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Notifications concerning the user. This API returns Link headers containing links to the next/previous page. However, the links can also be constructed dynamically using query params and id values.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsResponse
     */
	public function getApiV1Notifications(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/notifications');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notifications = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Notification>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View information about a notification with a given ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdResponse
     */
	public function getApiV1NotificationsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/notifications/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1NotificationsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Notification', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a poll.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdResponse
     */
	public function getApiV1PollsId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/polls/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1PollsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->poll = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Poll', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Shows your 10 most-used tags, with usage history for the past week.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1PreferencesResponse
     */
	public function getApiV1Preferences(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1PreferencesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/preferences');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1PreferencesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->preferences = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Preferences', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View the PushSubscription currently associated with this access token.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1PushSubscriptionResponse
     */
	public function getApiV1PushSubscription(
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1PushSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/push/subscription');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1PushSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pushSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PushSubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View scheduled statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesResponse
     */
	public function getApiV1ScheduledStatuses(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/scheduled_statuses');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduledStatuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\ScheduledStatus>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a single scheduled status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdResponse
     */
	public function getApiV1ScheduledStatusesId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/scheduled_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1ScheduledStatusesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduledStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScheduledStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getApiV1StatusesId
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdResponse
     */
	public function getApiV1StatusesId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * getApiV1StatusesIdContext
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextResponse
     */
	public function getApiV1StatusesIdContext(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/context', \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->context = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Context', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View who favourited a given status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByResponse
     */
	public function getApiV1StatusesIdFavouritedBy(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/favourited_by', \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdFavouritedByResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View who boosted a given status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByResponse
     */
	public function getApiV1StatusesIdRebloggedBy(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/reblogged_by', \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1StatusesIdRebloggedByResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accounts the user has had past positive interactions with, but is not yet following.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsResponse
     */
	public function getApiV1Suggestions(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/suggestions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1SuggestionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Account', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View statuses from followed users.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeResponse
     */
	public function getApiV1TimelinesHome(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/timelines/home');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesHomeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 206) {
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View statuses in the given list timeline.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdResponse
     */
	public function getApiV1TimelinesListListId(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/timelines/list/{list_id}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesListListIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Public timeline
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicResponse
     */
	public function getApiV1TimelinesPublic(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/timelines/public');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesPublicResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View public statuses containing the given hashtag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagResponse
     */
	public function getApiV1TimelinesTagHashtag(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/timelines/tag/{hashtag}', \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1TimelinesTagHashtagResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->statuses = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Status>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Tags that are being used more frequently within the past week.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsResponse
     */
	public function getApiV1Trends(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/trends');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV1TrendsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->tags = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Tag>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search results
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchResponse
     */
	public function getApiV2Search(
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v2/search');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApiV2SearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getApiV2Search200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetApiV2Search200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Perform an action against an account and log this action in the moderation history.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionResponse
     */
	public function postApiV1AdminAccountsIdAction(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/action', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdActionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Approve the given local account if it is currently pending approval.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveResponse
     */
	public function postApiV1AdminAccountsIdApprove(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/approve', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdApproveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Re-enable a local account whose login is currently disabled.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableResponse
     */
	public function postApiV1AdminAccountsIdEnable(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/enable', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Reject the given local account if it is currently pending approval.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectResponse
     */
	public function postApiV1AdminAccountsIdReject(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/reject', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdRejectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unsilence a currently silenced account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceResponse
     */
	public function postApiV1AdminAccountsIdUnsilence(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/unsilence', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsilenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Unsuspend a currently suspended account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendResponse
     */
	public function postApiV1AdminAccountsIdUnsuspend(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/accounts/{id}/unsuspend', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminAccountsIdUnsuspendResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Claim the handling of this report to yourself.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfResponse
     */
	public function postApiV1AdminReportsIdAssignToSelf(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports/{id}/assign_to_self', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdAssignToSelfResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark a report as resolved with no further action taken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenResponse
     */
	public function postApiV1AdminReportsIdReopen(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports/{id}/reopen', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdReopenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark a report as resolved with no further action taken.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveResponse
     */
	public function postApiV1AdminReportsIdResolve(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports/{id}/resolve', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdResolveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unassign a report so that someone else can claim it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignResponse
     */
	public function postApiV1AdminReportsIdUnassign(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/admin/reports/{id}/unassign', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AdminReportsIdUnassignResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->adminReport = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AdminReport', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows a user to mark the announcement as read.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissResponse
     */
	public function postApiV1AnnouncementsIdDismiss(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/announcements/{id}/dismiss', \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1AnnouncementsIdDismissResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1AnnouncementsIdDismiss200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove converstation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadResponse
     */
	public function postApiV1ConversationsIdRead(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/conversations/{id}/read', \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1ConversationsIdReadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->conversation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Conversation', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * "Block a domain to:
     * - hide all public posts from it
     * - hide all notifications from it
     * - remove all followers from it
     * - prevent following new users from it (but does not remove existing follows)"
     * 
     * 
     * @param string $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1DomainBlocksSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1DomainBlocksResponse
     */
	public function postApiV1DomainBlocks(
        string $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1DomainBlocksSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1DomainBlocksResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/domain_blocks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1DomainBlocksResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1DomainBlocks200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a feature a tag.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsResponse
     */
	public function postApiV1FeaturedTags(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/featured_tags');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1FeaturedTagsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->featuredTag = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FeaturedTag', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postApiV1Filters
     * 
     * @param string $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FiltersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1FiltersResponse
     */
	public function postApiV1Filters(
        string $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FiltersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1FiltersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/filters');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1FiltersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accept Follow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeResponse
     */
	public function postApiV1FollowRequestsIdAuthorize(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/follow_requests/{id}/authorize', \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdAuthorizeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Accept Follow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectResponse
     */
	public function postApiV1FollowRequestsIdReject(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/follow_requests/{id}/reject', \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1FollowRequestsIdRejectResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->relationship = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Relationship', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsResponse
     */
	public function postApiV1Lists(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->list = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add accounts to the given list. Note that the user must be following these accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsResponse
     */
	public function postApiV1ListsIdAccounts(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists/{id}/accounts', \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1ListsIdAccountsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1ListsIdAccounts200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get saved timeline position
     * 
     * @param array<string, mixed> $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MarkersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1MarkersResponse
     */
	public function postApiV1Markers(
        array $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MarkersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1MarkersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/markers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1MarkersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1Markers200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 409) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an attachment to be used with a new status.
     * 
     * @param string $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaResponse
     */
	public function postApiV1Media(
        string $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/media');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attachment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an Attachment, before it is attached to a status and posted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdResponse
     */
	public function postApiV1MediaId(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/media/{id}', \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1MediaIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->attachment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Attachment', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clear all notifications from the server.
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsClearResponse
     */
	public function postApiV1NotificationsClear(
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsClearResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/notifications/clear');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsClearResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1NotificationsClear200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Clear a single notification from the server.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissResponse
     */
	public function postApiV1NotificationsIdDismiss(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/notifications/{id}/dismiss', \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1NotificationsIdDismissResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notification = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Notification', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Vote on a poll.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdResponse
     */
	public function postApiV1PollsId(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/polls/{id}', \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1PollsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->poll = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Poll', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Web Push API subscription to receive notifications. Each access token can have one push subscription. If you create a new subscription, the old subscription is deleted.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionResponse
     */
	public function postApiV1PushSubscription(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/push/subscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1PushSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pushSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PushSubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * File a report.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsResponse
     */
	public function postApiV1Reports(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/reports');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1ReportsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->report = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Report', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * postApiV1Statuses
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesResponse
     */
	public function postApiV1Statuses(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postApiV1Statuses200ApplicationJSONOneOf = $serializer->deserialize((string)$httpResponse->getBody(), 'mixed', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Privately bookmark a status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkResponse
     */
	public function postApiV1StatusesIdBookmark(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/bookmark', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdBookmarkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a status to your favourites list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteResponse
     */
	public function postApiV1StatusesIdFavourite(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/favourite', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdFavouriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Do not receive notifications for the thread that this status is part of. Must be a thread in which you are a participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteResponse
     */
	public function postApiV1StatusesIdMute(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/mute', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdMuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Feature one of your own public statuses at the top of your profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinResponse
     */
	public function postApiV1StatusesIdPin(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/pin', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdPinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reshare a status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogResponse
     */
	public function postApiV1StatusesIdReblog(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/reblog', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdReblogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a status from your private bookmarks.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkResponse
     */
	public function postApiV1StatusesIdUnbookmark(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/unbookmark', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnbookmarkResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove a status from your favourites list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteResponse
     */
	public function postApiV1StatusesIdUnfavourite(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/unfavourite', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnfavouriteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Status's conversation unmuted, or was already unmuted
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteResponse
     */
	public function postApiV1StatusesIdUnmute(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/unmute', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnmuteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Unfeature a status from the top of your profile.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinResponse
     */
	public function postApiV1StatusesIdUnpin(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/unpin', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnpinResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Undo a reshare of a status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogResponse
     */
	public function postApiV1StatusesIdUnreblog(
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/statuses/{id}/unreblog', \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostApiV1StatusesIdUnreblogResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->status = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Status', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Allows a user to mark the announcement as read.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameResponse
     */
	public function putApiV1AnnouncementsIdReactionsName(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/announcements/{id}/reactions/{name}', \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1AnnouncementsIdReactionsNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->putApiV1AnnouncementsIdReactionsName200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a filter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdResponse
     */
	public function putApiV1FiltersId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/filters/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1FiltersIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->filter = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Filter', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Change the title of a list, or which replies to show.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsResponse
     */
	public function putApiV1Lists(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/lists');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1ListsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->list = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListT', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the current push subscription. Only the data part can be updated. To change fundamentals, a new subscription must be created instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionRequestBody $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionResponse
     */
	public function putApiV1PushSubscription(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionRequestBody $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/push/subscription');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1PushSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->pushSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PushSubscription', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * View a single scheduled status
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdResponse
     */
	public function putApiV1ScheduledStatusesId(
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/scheduled_statuses/{id}', \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutApiV1ScheduledStatusesIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->scheduledStatus = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ScheduledStatus', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}