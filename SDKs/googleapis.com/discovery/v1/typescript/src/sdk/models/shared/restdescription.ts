/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { JsonSchema } from "./jsonschema";
import { RestMethod } from "./restmethod";
import { RestResource } from "./restresource";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The scope value.
 */
export class RestDescriptionAuthOauth2Scopes extends SpeakeasyBase {
  /**
   * Description of scope.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;
}

/**
 * OAuth 2.0 authentication information.
 */
export class RestDescriptionAuthOauth2 extends SpeakeasyBase {
  /**
   * Available OAuth 2.0 scopes.
   */
  @SpeakeasyMetadata({ elemType: RestDescriptionAuthOauth2Scopes })
  @Expose({ name: "scopes" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RestDescriptionAuthOauth2Scopes> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RestDescriptionAuthOauth2Scopes);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  scopes?: Record<string, RestDescriptionAuthOauth2Scopes>;
}

/**
 * Authentication information.
 */
export class RestDescriptionAuth extends SpeakeasyBase {
  /**
   * OAuth 2.0 authentication information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "oauth2" })
  @Type(() => RestDescriptionAuthOauth2)
  oauth2?: RestDescriptionAuthOauth2;
}

/**
 * Links to 16x16 and 32x32 icons representing the API.
 */
export class RestDescriptionIcons extends SpeakeasyBase {
  /**
   * The URL of the 16x16 icon.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "x16" })
  x16?: string;

  /**
   * The URL of the 32x32 icon.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "x32" })
  x32?: string;
}

/**
 * Successful response
 */
export class RestDescription extends SpeakeasyBase {
  /**
   * Authentication information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auth" })
  @Type(() => RestDescriptionAuth)
  auth?: RestDescriptionAuth;

  /**
   * [DEPRECATED] The base path for REST requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "basePath" })
  basePath?: string;

  /**
   * [DEPRECATED] The base URL for REST requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "baseUrl" })
  baseUrl?: string;

  /**
   * The path for REST batch requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "batchPath" })
  batchPath?: string;

  /**
   * Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "canonicalName" })
  canonicalName?: string;

  /**
   * The description of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Indicate the version of the Discovery API used to generate this doc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "discoveryVersion" })
  discoveryVersion?: string;

  /**
   * A link to human readable documentation for the API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "documentationLink" })
  documentationLink?: string;

  /**
   * The ETag for this response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "etag" })
  etag?: string;

  /**
   * Enable exponential backoff for suitable methods in the generated clients.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exponentialBackoffDefault" })
  exponentialBackoffDefault?: boolean;

  /**
   * A list of supported features for this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "features" })
  features?: string[];

  /**
   * Links to 16x16 and 32x32 icons representing the API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "icons" })
  @Type(() => RestDescriptionIcons)
  icons?: RestDescriptionIcons;

  /**
   * The ID of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The kind for this response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Labels for the status of this API, such as labs or deprecated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: string[];

  /**
   * API-level methods for this API.
   */
  @SpeakeasyMetadata({ elemType: RestMethod })
  @Expose({ name: "methods" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RestMethod> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RestMethod);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  methods?: Record<string, RestMethod>;

  /**
   * The name of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownerDomain" })
  ownerDomain?: string;

  /**
   * The name of the owner of this API. See ownerDomain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ownerName" })
  ownerName?: string;

  /**
   * The package of the owner of this API. See ownerDomain.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packagePath" })
  packagePath?: string;

  /**
   * Common parameters that apply across all apis.
   */
  @SpeakeasyMetadata({ elemType: JsonSchema })
  @Expose({ name: "parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, JsonSchema> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], JsonSchema);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, JsonSchema>;

  /**
   * The protocol described by this document.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: string;

  /**
   * The resources in this API.
   */
  @SpeakeasyMetadata({ elemType: RestResource })
  @Expose({ name: "resources" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RestResource> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RestResource);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  resources?: Record<string, RestResource>;

  /**
   * The version of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "revision" })
  revision?: string;

  /**
   * The root URL under which all API services live.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rootUrl" })
  rootUrl?: string;

  /**
   * The schemas for this API.
   */
  @SpeakeasyMetadata({ elemType: JsonSchema })
  @Expose({ name: "schemas" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, JsonSchema> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], JsonSchema);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  schemas?: Record<string, JsonSchema>;

  /**
   * The base path for all REST requests.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servicePath" })
  servicePath?: string;

  /**
   * The title of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The version of this API.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "version_module" })
  versionModule?: boolean;
}
