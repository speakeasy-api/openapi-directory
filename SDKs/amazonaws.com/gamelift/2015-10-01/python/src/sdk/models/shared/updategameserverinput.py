"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import gameserverhealthcheck_enum as shared_gameserverhealthcheck_enum
from ..shared import gameserverutilizationstatus_enum as shared_gameserverutilizationstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateGameServerInput:
    
    game_server_group_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameServerGroupName') }})  
    game_server_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameServerId') }})  
    game_server_data: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GameServerData'), 'exclude': lambda f: f is None }})  
    health_check: Optional[shared_gameserverhealthcheck_enum.GameServerHealthCheckEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HealthCheck'), 'exclude': lambda f: f is None }})  
    utilization_status: Optional[shared_gameserverutilizationstatus_enum.GameServerUtilizationStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UtilizationStatus'), 'exclude': lambda f: f is None }})  
    