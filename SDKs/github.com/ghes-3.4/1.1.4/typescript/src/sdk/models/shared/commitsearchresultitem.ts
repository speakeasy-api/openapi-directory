/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MinimalRepository } from "./minimalrepository";
import { NullableGitUser } from "./nullablegituser";
import { NullableSimpleUser } from "./nullablesimpleuser";
import { SearchResultTextMatches } from "./searchresulttextmatches";
import { Verification } from "./verification";
import { Expose, Transform, Type } from "class-transformer";

export class CommitSearchResultItemCommitAuthor extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;
}

export class CommitSearchResultItemCommitTree extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}

export class CommitSearchResultItemCommit extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => CommitSearchResultItemCommitAuthor)
  author: CommitSearchResultItemCommitAuthor;

  @SpeakeasyMetadata()
  @Expose({ name: "comment_count" })
  commentCount: number;

  /**
   * Metaproperties for Git author/committer information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "committer" })
  @Type(() => NullableGitUser)
  committer: NullableGitUser;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tree" })
  @Type(() => CommitSearchResultItemCommitTree)
  tree: CommitSearchResultItemCommitTree;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;

  @SpeakeasyMetadata()
  @Expose({ name: "verification" })
  @Type(() => Verification)
  verification?: Verification;
}

export class CommitSearchResultItemParents extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Commit Search Result Item
 */
export class CommitSearchResultItem extends SpeakeasyBase {
  /**
   * A GitHub user.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => NullableSimpleUser)
  author: NullableSimpleUser;

  @SpeakeasyMetadata()
  @Expose({ name: "comments_url" })
  commentsUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "commit" })
  @Type(() => CommitSearchResultItemCommit)
  commit: CommitSearchResultItemCommit;

  /**
   * Metaproperties for Git author/committer information.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "committer" })
  @Type(() => NullableGitUser)
  committer: NullableGitUser;

  @SpeakeasyMetadata()
  @Expose({ name: "html_url" })
  htmlUrl: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_id" })
  nodeId: string;

  @SpeakeasyMetadata({ elemType: CommitSearchResultItemParents })
  @Expose({ name: "parents" })
  @Type(() => CommitSearchResultItemParents)
  parents: CommitSearchResultItemParents[];

  /**
   * Minimal Repository
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repository" })
  @Type(() => MinimalRepository)
  repository: MinimalRepository;

  @SpeakeasyMetadata()
  @Expose({ name: "score" })
  score: number;

  @SpeakeasyMetadata()
  @Expose({ name: "sha" })
  sha: string;

  @SpeakeasyMetadata({ elemType: SearchResultTextMatches })
  @Expose({ name: "text_matches" })
  @Type(() => SearchResultTextMatches)
  textMatches?: SearchResultTextMatches[];

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url: string;
}
