// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum - The algorithm used to encrypt the PDF document.
type AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum string

const (
	AddRestrictionsV1RequestBodyEncryptionAlgorithmEnumAes128 AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum = "AES-128"
	AddRestrictionsV1RequestBodyEncryptionAlgorithmEnumAes256 AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum = "AES-256"
)

func (e AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum) ToPointer() *AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum {
	return &e
}

func (e *AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AES-128":
		fallthrough
	case "AES-256":
		*e = AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum: %v", v)
	}
}

type AddRestrictionsV1RequestBodyFile struct {
	Content []byte `multipartForm:"content"`
	File    string `multipartForm:"name=file"`
}

type AddRestrictionsV1RequestBody struct {
	// If false, accessibility programs can't read the text or images of the document.
	AllowAccessibility *bool `multipartForm:"name=allow_accessibility"`
	// If false, the user can't assemble or manipulate the document.
	AllowAssembleDocument *bool `multipartForm:"name=allow_assemble_document"`
	// If false, the user can't change the content of the document.
	AllowChangeContent *bool `multipartForm:"name=allow_change_content"`
	// If false, the user can't add, edit or modify annotations or fill form fields.
	AllowCommentAndFillForm *bool `multipartForm:"name=allow_comment_and_fill_form"`
	// If false, the user can't copy text and images to the clipboard.
	AllowCopyContent *bool `multipartForm:"name=allow_copy_content"`
	// If false, the user can't fill forms fields.
	AllowFillForm *bool `multipartForm:"name=allow_fill_form"`
	// If false, the user can't print the document.
	AllowPrint *bool `multipartForm:"name=allow_print"`
	// If false, the user can't print the document in high resolution.
	AllowPrintHighResolution *bool `multipartForm:"name=allow_print_high_resolution"`
	// The algorithm used to encrypt the PDF document.
	EncryptionAlgorithm *AddRestrictionsV1RequestBodyEncryptionAlgorithmEnum `multipartForm:"name=encryption_algorithm"`
	// The input PDF document
	File AddRestrictionsV1RequestBodyFile `multipartForm:"file"`
	// The password required to open and change permissions of the PDF document.
	OwnerPassword string `multipartForm:"name=owner_password"`
	// The password required to open the PDF document. If the `user_password` is not set, the user will be able to open the document without a password.
	UserPassword *string `multipartForm:"name=user_password"`
}

// AddRestrictionsV14XXApplicationProblemPlusJSON - Error
type AddRestrictionsV14XXApplicationProblemPlusJSON struct {
	Errors map[string]interface{} `json:"errors,omitempty"`
	Status *int64                 `json:"status,omitempty"`
	Title  *string                `json:"title,omitempty"`
	Type   *string                `json:"type,omitempty"`
}

type AddRestrictionsV1Response struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The document was processed succesfully.
	AddRestrictionsV1200ApplicationPdfBinaryString []byte
	// Error
	AddRestrictionsV14XXApplicationProblemPlusJSONObject *AddRestrictionsV14XXApplicationProblemPlusJSON
}
