// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StoreNotificationsGetNotificationByAppIDSecurity struct {
	APIToken shared.SchemeAPIToken `security:"scheme,type=apiKey,subtype=header"`
}

type StoreNotificationsGetNotificationByAppIDPathParams struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type StoreNotificationsGetNotificationByAppIDRequest struct {
	PathParams StoreNotificationsGetNotificationByAppIDPathParams
	Security   StoreNotificationsGetNotificationByAppIDSecurity
}

type StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum string

const (
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumBadRequest          StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumConflict            StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "Conflict"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumNotAcceptable       StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumNotFound            StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "NotFound"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumInternalServerError StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumUnauthorized        StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnumTooManyRequests     StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// StoreNotificationsGetNotificationByAppIDDefaultApplicationJSON - Error
type StoreNotificationsGetNotificationByAppIDDefaultApplicationJSON struct {
	Code    StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                                                 `json:"message"`
}

// StoreNotificationsGetNotificationByAppID200ApplicationJSON - Success. Availability for store service status is stored in response schema.
type StoreNotificationsGetNotificationByAppID200ApplicationJSON struct {
	Service    *string `json:"service,omitempty"`
	Status     *string `json:"status,omitempty"`
	ValidUntil *int64  `json:"valid_until,omitempty"`
}

type StoreNotificationsGetNotificationByAppIDResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success. Availability for store service status is stored in response schema.
	StoreNotificationsGetNotificationByAppID200ApplicationJSONObject *StoreNotificationsGetNotificationByAppID200ApplicationJSON
	// Error
	StoreNotificationsGetNotificationByAppIDDefaultApplicationJSONObject *StoreNotificationsGetNotificationByAppIDDefaultApplicationJSON
}
