/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Booking - Details of an existing booking.
 */
public class Booking {
    /**
     * List of rooms booked
     */
    @JsonProperty("bookedRooms")
    public BookedRoom[] bookedRooms;
    public Booking withBookedRooms(BookedRoom[] bookedRooms) {
        this.bookedRooms = bookedRooms;
        return this;
    }
    
    /**
     * Unique identifier for this booking within the Impala platform.
     */
    @JsonProperty("bookingId")
    public String bookingId;
    public Booking withBookingId(String bookingId) {
        this.bookingId = bookingId;
        return this;
    }
    
    /**
     * Returned in case the booking (or parts of it) has been cancelled. Contains information on the cancellation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellation")
    public BookingCancellation cancellation;
    public Booking withCancellation(BookingCancellation cancellation) {
        this.cancellation = cancellation;
        return this;
    }
    
    /**
     * Guest details for this booking.
     */
    @JsonProperty("contact")
    public BookingPerson contact;
    public Booking withContact(BookingPerson contact) {
        this.contact = contact;
        return this;
    }
    
    /**
     * Date and time (in UTC and ISO 8601 format) when the booking was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdAt")
    public OffsetDateTime createdAt;
    public Booking withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The departure date of the booking.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("end")
    public LocalDate end;
    public Booking withEnd(LocalDate end) {
        this.end = end;
        return this;
    }
    
    /**
     * Essential information on a hotel returned as part of other resources, linking to the full resource within its `href` field.
     */
    @JsonProperty("hotel")
    public HotelStub hotel;
    public Booking withHotel(HotelStub hotel) {
        this.hotel = hotel;
        return this;
    }
    
    /**
     * The hotel's confirmation identifier for this booking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hotelConfirmationCode")
    public String hotelConfirmationCode;
    public Booking withHotelConfirmationCode(String hotelConfirmationCode) {
        this.hotelConfirmationCode = hotelConfirmationCode;
        return this;
    }
    
    /**
     * The notes that were transmitted to the hotel as part of this booking.
     * 
     * These fields allow for **Markdown formatting** that's displayed to hotels in its rendered format in most circumstances but might fall back to text-only in scenarios where that's not possible.
     */
    @JsonProperty("notes")
    public BookingNotes notes;
    public Booking withNotes(BookingNotes notes) {
        this.notes = notes;
        return this;
    }
    
    /**
     * If status is PAYMENT_REQUIRED, then this should be used as the Authorisation header for the POST to the /payments endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentBearerToken")
    public String paymentBearerToken;
    public Booking withPaymentBearerToken(String paymentBearerToken) {
        this.paymentBearerToken = paymentBearerToken;
        return this;
    }
    
    /**
     * If status is PAYMENT_REQUIRED, then this should be used as the client secret when rendering Impala Payment Elements in the UI.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentClientSecret")
    public String paymentClientSecret;
    public Booking withPaymentClientSecret(String paymentClientSecret) {
        this.paymentClientSecret = paymentClientSecret;
        return this;
    }
    
    /**
     * The arrival date of the booking.
     */
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("start")
    public LocalDate start;
    public Booking withStart(LocalDate start) {
        this.start = start;
        return this;
    }
    
    /**
     * Status of this booking within the Impala platform. When you make a booking, it'll first appear as `PENDING` until we receive the hotel's confirmation details. At this point your booking will move to `ACCEPTED`.
     */
    @JsonProperty("status")
    public BookingStatusEnum status;
    public Booking withStatus(BookingStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Date and time (in UTC and ISO 8601 format) when the booking was last updated.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updatedAt")
    public OffsetDateTime updatedAt;
    public Booking withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
