"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetUserLevelChannelResponse = exports.GetUserLevelChannel200ApplicationJSON = exports.GetUserLevelChannel200ApplicationJSONTypeEnum = exports.GetUserLevelChannel200ApplicationXML = exports.GetUserLevelChannel200ApplicationXMLTypeEnum = exports.GetUserLevelChannelRequest = exports.GetUserLevelChannelSecurity = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
var GetUserLevelChannelSecurity = /** @class */ (function (_super) {
    __extends(GetUserLevelChannelSecurity, _super);
    function GetUserLevelChannelSecurity() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "security, scheme=true;type=oauth2;name=Authorization",
        }),
        __metadata("design:type", String)
    ], GetUserLevelChannelSecurity.prototype, "oAuth", void 0);
    return GetUserLevelChannelSecurity;
}(utils_1.SpeakeasyBase));
exports.GetUserLevelChannelSecurity = GetUserLevelChannelSecurity;
var GetUserLevelChannelRequest = /** @class */ (function (_super) {
    __extends(GetUserLevelChannelRequest, _super);
    function GetUserLevelChannelRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({
            data: "pathParam, style=simple;explode=false;name=channelId",
        }),
        __metadata("design:type", String)
    ], GetUserLevelChannelRequest.prototype, "channelId", void 0);
    return GetUserLevelChannelRequest;
}(utils_1.SpeakeasyBase));
exports.GetUserLevelChannelRequest = GetUserLevelChannelRequest;
/**
 * Type of the channel. The value can be one of the following:<br>
 *
 * @remarks
 * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
 * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
 * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
 */
var GetUserLevelChannel200ApplicationXMLTypeEnum;
(function (GetUserLevelChannel200ApplicationXMLTypeEnum) {
    GetUserLevelChannel200ApplicationXMLTypeEnum["One"] = "1";
    GetUserLevelChannel200ApplicationXMLTypeEnum["Two"] = "2";
    GetUserLevelChannel200ApplicationXMLTypeEnum["Three"] = "3";
})(GetUserLevelChannel200ApplicationXMLTypeEnum = exports.GetUserLevelChannel200ApplicationXMLTypeEnum || (exports.GetUserLevelChannel200ApplicationXMLTypeEnum = {}));
/**
 * The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
 */
var GetUserLevelChannel200ApplicationXML = /** @class */ (function (_super) {
    __extends(GetUserLevelChannel200ApplicationXML, _super);
    function GetUserLevelChannel200ApplicationXML() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationXML.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationXML.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationXML.prototype, "type", void 0);
    return GetUserLevelChannel200ApplicationXML;
}(utils_1.SpeakeasyBase));
exports.GetUserLevelChannel200ApplicationXML = GetUserLevelChannel200ApplicationXML;
/**
 * Type of the channel. The value can be one of the following:<br>
 *
 * @remarks
 * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
 * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
 * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
 */
var GetUserLevelChannel200ApplicationJSONTypeEnum;
(function (GetUserLevelChannel200ApplicationJSONTypeEnum) {
    GetUserLevelChannel200ApplicationJSONTypeEnum["One"] = "1";
    GetUserLevelChannel200ApplicationJSONTypeEnum["Two"] = "2";
    GetUserLevelChannel200ApplicationJSONTypeEnum["Three"] = "3";
})(GetUserLevelChannel200ApplicationJSONTypeEnum = exports.GetUserLevelChannel200ApplicationJSONTypeEnum || (exports.GetUserLevelChannel200ApplicationJSONTypeEnum = {}));
/**
 * The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
 */
var GetUserLevelChannel200ApplicationJSON = /** @class */ (function (_super) {
    __extends(GetUserLevelChannel200ApplicationJSON, _super);
    function GetUserLevelChannel200ApplicationJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationJSON.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationJSON.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], GetUserLevelChannel200ApplicationJSON.prototype, "type", void 0);
    return GetUserLevelChannel200ApplicationJSON;
}(utils_1.SpeakeasyBase));
exports.GetUserLevelChannel200ApplicationJSON = GetUserLevelChannel200ApplicationJSON;
var GetUserLevelChannelResponse = /** @class */ (function (_super) {
    __extends(GetUserLevelChannelResponse, _super);
    function GetUserLevelChannelResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Uint8Array)
    ], GetUserLevelChannelResponse.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], GetUserLevelChannelResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], GetUserLevelChannelResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], GetUserLevelChannelResponse.prototype, "rawResponse", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", GetUserLevelChannel200ApplicationJSON)
    ], GetUserLevelChannelResponse.prototype, "getUserLevelChannel200ApplicationJSONObject", void 0);
    return GetUserLevelChannelResponse;
}(utils_1.SpeakeasyBase));
exports.GetUserLevelChannelResponse = GetUserLevelChannelResponse;
