/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentityServiceOidcConfigInput - Configuration for OIDC Auth flow.
 */
public class IdentityServiceOidcConfigInput {
    /**
     * PEM-encoded CA for OIDC provider.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateAuthorityData")
    public String certificateAuthorityData;

    public IdentityServiceOidcConfigInput withCertificateAuthorityData(String certificateAuthorityData) {
        this.certificateAuthorityData = certificateAuthorityData;
        return this;
    }
    
    /**
     * ID for OIDC client application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    public String clientId;

    public IdentityServiceOidcConfigInput withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    public String clientSecret;

    public IdentityServiceOidcConfigInput withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    /**
     * Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deployCloudConsoleProxy")
    public Boolean deployCloudConsoleProxy;

    public IdentityServiceOidcConfigInput withDeployCloudConsoleProxy(Boolean deployCloudConsoleProxy) {
        this.deployCloudConsoleProxy = deployCloudConsoleProxy;
        return this;
    }
    
    /**
     * Enable access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableAccessToken")
    public Boolean enableAccessToken;

    public IdentityServiceOidcConfigInput withEnableAccessToken(Boolean enableAccessToken) {
        this.enableAccessToken = enableAccessToken;
        return this;
    }
    
    /**
     * Comma-separated list of key-value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extraParams")
    public String extraParams;

    public IdentityServiceOidcConfigInput withExtraParams(String extraParams) {
        this.extraParams = extraParams;
        return this;
    }
    
    /**
     * Prefix to prepend to group name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupPrefix")
    public String groupPrefix;

    public IdentityServiceOidcConfigInput withGroupPrefix(String groupPrefix) {
        this.groupPrefix = groupPrefix;
        return this;
    }
    
    /**
     * Claim in OIDC ID token that holds group information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupsClaim")
    public String groupsClaim;

    public IdentityServiceOidcConfigInput withGroupsClaim(String groupsClaim) {
        this.groupsClaim = groupsClaim;
        return this;
    }
    
    /**
     * URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuerUri")
    public String issuerUri;

    public IdentityServiceOidcConfigInput withIssuerUri(String issuerUri) {
        this.issuerUri = issuerUri;
        return this;
    }
    
    /**
     * Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kubectlRedirectUri")
    public String kubectlRedirectUri;

    public IdentityServiceOidcConfigInput withKubectlRedirectUri(String kubectlRedirectUri) {
        this.kubectlRedirectUri = kubectlRedirectUri;
        return this;
    }
    
    /**
     * Comma-separated list of identifiers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String scopes;

    public IdentityServiceOidcConfigInput withScopes(String scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * Claim in OIDC ID token that holds username.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userClaim")
    public String userClaim;

    public IdentityServiceOidcConfigInput withUserClaim(String userClaim) {
        this.userClaim = userClaim;
        return this;
    }
    
    /**
     * Prefix to prepend to user name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userPrefix")
    public String userPrefix;

    public IdentityServiceOidcConfigInput withUserPrefix(String userPrefix) {
        this.userPrefix = userPrefix;
        return this;
    }
    
    public IdentityServiceOidcConfigInput(){}
}
