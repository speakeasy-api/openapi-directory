"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticsThread = exports.DiagnosticsThreadPlatformEnum = exports.DiagnosticsThreadFrames = exports.DiagnosticsThreadFramesLanguageEnum = void 0;
var utils_1 = require("../../../internal/utils");
var diagnosticsexception_1 = require("./diagnosticsexception");
var class_transformer_1 = require("class-transformer");
/**
 * programming language of the frame
 */
var DiagnosticsThreadFramesLanguageEnum;
(function (DiagnosticsThreadFramesLanguageEnum) {
    DiagnosticsThreadFramesLanguageEnum["JavaScript"] = "JavaScript";
    DiagnosticsThreadFramesLanguageEnum["CSharp"] = "CSharp";
    DiagnosticsThreadFramesLanguageEnum["ObjectiveC"] = "Objective-C";
    DiagnosticsThreadFramesLanguageEnum["ObjectiveCpp"] = "Objective-Cpp";
    DiagnosticsThreadFramesLanguageEnum["Cpp"] = "Cpp";
    DiagnosticsThreadFramesLanguageEnum["C"] = "C";
    DiagnosticsThreadFramesLanguageEnum["Swift"] = "Swift";
    DiagnosticsThreadFramesLanguageEnum["Java"] = "Java";
    DiagnosticsThreadFramesLanguageEnum["Unknown"] = "Unknown";
})(DiagnosticsThreadFramesLanguageEnum = exports.DiagnosticsThreadFramesLanguageEnum || (exports.DiagnosticsThreadFramesLanguageEnum = {}));
/**
 * a single frame of a stack trace
 */
var DiagnosticsThreadFrames = /** @class */ (function (_super) {
    __extends(DiagnosticsThreadFrames, _super);
    function DiagnosticsThreadFrames() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "app_code" }),
        __metadata("design:type", Boolean)
    ], DiagnosticsThreadFrames.prototype, "appCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "class_method" }),
        __metadata("design:type", Boolean)
    ], DiagnosticsThreadFrames.prototype, "classMethod", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "class_name" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "className", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code_formatted" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "codeFormatted", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "code_raw" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "codeRaw", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "file" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "file", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "framework_name" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "frameworkName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "language" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "language", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "line" }),
        __metadata("design:type", Number)
    ], DiagnosticsThreadFrames.prototype, "line", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "method" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "method", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "method_params" }),
        __metadata("design:type", String)
    ], DiagnosticsThreadFrames.prototype, "methodParams", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relevant" }),
        __metadata("design:type", Boolean)
    ], DiagnosticsThreadFrames.prototype, "relevant", void 0);
    return DiagnosticsThreadFrames;
}(utils_1.SpeakeasyBase));
exports.DiagnosticsThreadFrames = DiagnosticsThreadFrames;
/**
 * SDK/Platform this thread is beeing generated from
 */
var DiagnosticsThreadPlatformEnum;
(function (DiagnosticsThreadPlatformEnum) {
    DiagnosticsThreadPlatformEnum["Ios"] = "ios";
    DiagnosticsThreadPlatformEnum["Android"] = "android";
    DiagnosticsThreadPlatformEnum["Xamarin"] = "xamarin";
    DiagnosticsThreadPlatformEnum["ReactNative"] = "react-native";
    DiagnosticsThreadPlatformEnum["Ndk"] = "ndk";
    DiagnosticsThreadPlatformEnum["Unity"] = "unity";
    DiagnosticsThreadPlatformEnum["Other"] = "other";
})(DiagnosticsThreadPlatformEnum = exports.DiagnosticsThreadPlatformEnum || (exports.DiagnosticsThreadPlatformEnum = {}));
/**
 * a thread representation
 */
var DiagnosticsThread = /** @class */ (function (_super) {
    __extends(DiagnosticsThread, _super);
    function DiagnosticsThread() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "crashed" }),
        __metadata("design:type", Boolean)
    ], DiagnosticsThread.prototype, "crashed", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exception" }),
        (0, class_transformer_1.Type)(function () { return diagnosticsexception_1.DiagnosticsException; }),
        __metadata("design:type", diagnosticsexception_1.DiagnosticsException)
    ], DiagnosticsThread.prototype, "exception", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: DiagnosticsThreadFrames }),
        (0, class_transformer_1.Expose)({ name: "frames" }),
        (0, class_transformer_1.Type)(function () { return DiagnosticsThreadFrames; }),
        __metadata("design:type", Array)
    ], DiagnosticsThread.prototype, "frames", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "platform" }),
        __metadata("design:type", String)
    ], DiagnosticsThread.prototype, "platform", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "relevant" }),
        __metadata("design:type", Boolean)
    ], DiagnosticsThread.prototype, "relevant", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "title" }),
        __metadata("design:type", String)
    ], DiagnosticsThread.prototype, "title", void 0);
    return DiagnosticsThread;
}(utils_1.SpeakeasyBase));
exports.DiagnosticsThread = DiagnosticsThread;
