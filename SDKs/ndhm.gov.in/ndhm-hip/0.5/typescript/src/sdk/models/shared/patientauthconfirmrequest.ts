/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PatientDemographic } from "./patientdemographic";
import { Expose, Transform, Type } from "class-transformer";

/**
 * note, demographic details are only required for demographic auth at this point.
 */
export class PatientAuthConfirmRequestCredential extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "authCode" })
  authCode?: string;

  /**
   * demographic details are only required for demographic auth at this point, in which case identifier.Type must be AADHAAR.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "demographic" })
  @Type(() => PatientDemographic)
  demographic?: PatientDemographic;
}

export class PatientAuthConfirmRequest extends SpeakeasyBase {
  /**
   * note, demographic details are only required for demographic auth at this point.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "credential" })
  @Type(() => PatientAuthConfirmRequestCredential)
  credential: PatientAuthConfirmRequestCredential;

  /**
   * a nonce, unique for each HTTP request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requestId" })
  requestId: string;

  /**
   * Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "transactionId" })
  transactionId: string;
}
