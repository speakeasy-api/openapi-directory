/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContinuousProjectDocument - The newly added continuous project document object.
 */
public class ContinuousProjectDocument {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billed_word_count")
    public Long billedWordCount;
    public ContinuousProjectDocument withBilledWordCount(Long billedWordCount) {
        this.billedWordCount = billedWordCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public ContinuousProjectDocument withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public DocumentLinks links;
    public ContinuousProjectDocument withLinks(DocumentLinks links) {
        this.links = links;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public ContinuousProjectDocument withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_edit_enabled")
    public Boolean postEditEnabled;
    public ContinuousProjectDocument withPostEditEnabled(Boolean postEditEnabled) {
        this.postEditEnabled = postEditEnabled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    public String projectId;
    public ContinuousProjectDocument withProjectId(String projectId) {
        this.projectId = projectId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source_language")
    public String sourceLanguage;
    public ContinuousProjectDocument withSourceLanguage(String sourceLanguage) {
        this.sourceLanguage = sourceLanguage;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_languages")
    public String[] targetLanguages;
    public ContinuousProjectDocument withTargetLanguages(String[] targetLanguages) {
        this.targetLanguages = targetLanguages;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("word_count")
    public Long wordCount;
    public ContinuousProjectDocument withWordCount(Long wordCount) {
        this.wordCount = wordCount;
        return this;
    }
    
}
