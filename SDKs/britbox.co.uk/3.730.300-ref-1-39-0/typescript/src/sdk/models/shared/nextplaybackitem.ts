/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ItemDetail } from "./itemdetail";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Field indicating the type or reason behind the suggestion.
 *
 * @remarks
 *
 * Id Type   | Show Watched Status| Value            | Description
 * ----------|--------------------|------------------|---------------------------------
 * showId    | Unwatched          | StartWatching    |
 * showId    | Completely watched | RestartWatching  |
 * showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
 * showId    | Partly watched     | Sequential       | Suggested episode unwatched
 * episodeId | Any                | Sequential       | Next episode in show
 *
 */
export enum NextPlaybackItemSuggestionTypeEnum {
  StartWatching = "StartWatching",
  ContinueWatching = "ContinueWatching",
  RestartWatching = "RestartWatching",
  Sequential = "Sequential",
  None = "None",
}

/**
 * The detail of the next item to play.
 */
export class NextPlaybackItem extends SpeakeasyBase {
  /**
   * Time when the item corresponding to the itemId passed in by the client was
   *
   * @remarks
   * first watched by the user. Will be `undefined` if the user has never
   * watched the item.
   *
   * It can be used to identify the scenario where the user has never watched a
   * show and we are suggesting they watch the first episode (i.e. it is
   * missing in this scenario)
   *
   * **This will only be populated when a `showId` is passed in**
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "firstWatchedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  firstWatchedDate?: Date;

  /**
   * Time when the item corresponding to the itemId passed in by the client was
   *
   * @remarks
   * last watched by the user. Will be `undefined` if the user has never
   * watched the item.
   *
   * It can be used to identify the scenario where the user has never watched a
   * show and we are suggesting they watch the first episode (i.e. it is
   * missing in this scenario)
   *
   * **This will only be populated when a `showId` is passed in**
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastWatchedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastWatchedDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "next" })
  @Type(() => ItemDetail)
  next?: ItemDetail;

  /**
   * The id of the item used to determine the next item to play.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sourceItemId" })
  sourceItemId: string;

  /**
   * Field indicating the type or reason behind the suggestion.
   *
   * @remarks
   *
   * Id Type   | Show Watched Status| Value            | Description
   * ----------|--------------------|------------------|---------------------------------
   * showId    | Unwatched          | StartWatching    |
   * showId    | Completely watched | RestartWatching  |
   * showId    | Partly watched     | ContinueWatching | Suggested episode partly watched
   * showId    | Partly watched     | Sequential       | Suggested episode unwatched
   * episodeId | Any                | Sequential       | Next episode in show
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "suggestionType" })
  suggestionType?: NextPlaybackItemSuggestionTypeEnum;
}
