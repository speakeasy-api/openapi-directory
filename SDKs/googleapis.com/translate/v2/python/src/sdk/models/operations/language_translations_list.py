"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import translationslistresponse as shared_translationslistresponse
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class LanguageTranslationsListSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class LanguageTranslationsListSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class LanguageTranslationsListSecurity:
    
    option1: Optional[LanguageTranslationsListSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[LanguageTranslationsListSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class LanguageTranslationsListFormatEnum(str, Enum):
    r"""The format of the source text, in either HTML (default) or plain-text. A
    value of \"html\" indicates HTML and a value of \"text\" indicates plain-text.
    """
    HTML = 'html'
    TEXT = 'text'


@dataclasses.dataclass
class LanguageTranslationsListRequest:
    
    q: list[str] = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""The input text to translate. Repeat this parameter to perform translation
    operations on multiple text inputs.
    """  
    target: str = dataclasses.field(metadata={'query_param': { 'field_name': 'target', 'style': 'form', 'explode': True }})
    r"""The language to use for translation of the input text, set to one of the
    language codes listed in Language Support.
    """  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    bearer_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'bearer_token', 'style': 'form', 'explode': True }})
    r"""OAuth bearer token."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    cid: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cid', 'style': 'form', 'explode': True }})
    r"""The customization id for translate"""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    format: Optional[LanguageTranslationsListFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""The format of the source text, in either HTML (default) or plain-text. A
    value of \"html\" indicates HTML and a value of \"text\" indicates plain-text.
    """  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    model: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'model', 'style': 'form', 'explode': True }})
    r"""The `model` type requested for this translation. Valid values are
    listed in public documentation.
    """  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pp: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'pp', 'style': 'form', 'explode': True }})
    r"""Pretty-print response."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."""  
    source: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'source', 'style': 'form', 'explode': True }})
    r"""The language of the source text, set to one of the language codes listed in
    Language Support. If the source language is not specified, the API will
    attempt to identify the source language automatically and return it within
    the response.
    """  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class LanguageTranslationsListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    translations_list_response: Optional[shared_translationslistresponse.TranslationsListResponse] = dataclasses.field(default=None)
    r"""Successful response"""  
    