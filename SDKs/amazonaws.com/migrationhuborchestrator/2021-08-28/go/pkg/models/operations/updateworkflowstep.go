// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateWorkflowStepRequestBodyStatusEnum - The status of the step.
type UpdateWorkflowStepRequestBodyStatusEnum string

const (
	UpdateWorkflowStepRequestBodyStatusEnumAwaitingDependencies  UpdateWorkflowStepRequestBodyStatusEnum = "AWAITING_DEPENDENCIES"
	UpdateWorkflowStepRequestBodyStatusEnumReady                 UpdateWorkflowStepRequestBodyStatusEnum = "READY"
	UpdateWorkflowStepRequestBodyStatusEnumInProgress            UpdateWorkflowStepRequestBodyStatusEnum = "IN_PROGRESS"
	UpdateWorkflowStepRequestBodyStatusEnumCompleted             UpdateWorkflowStepRequestBodyStatusEnum = "COMPLETED"
	UpdateWorkflowStepRequestBodyStatusEnumFailed                UpdateWorkflowStepRequestBodyStatusEnum = "FAILED"
	UpdateWorkflowStepRequestBodyStatusEnumPaused                UpdateWorkflowStepRequestBodyStatusEnum = "PAUSED"
	UpdateWorkflowStepRequestBodyStatusEnumUserAttentionRequired UpdateWorkflowStepRequestBodyStatusEnum = "USER_ATTENTION_REQUIRED"
)

func (e UpdateWorkflowStepRequestBodyStatusEnum) ToPointer() *UpdateWorkflowStepRequestBodyStatusEnum {
	return &e
}

func (e *UpdateWorkflowStepRequestBodyStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWAITING_DEPENDENCIES":
		fallthrough
	case "READY":
		fallthrough
	case "IN_PROGRESS":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		fallthrough
	case "PAUSED":
		fallthrough
	case "USER_ATTENTION_REQUIRED":
		*e = UpdateWorkflowStepRequestBodyStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkflowStepRequestBodyStatusEnum: %v", v)
	}
}

// UpdateWorkflowStepRequestBodyStepActionTypeEnum - The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
type UpdateWorkflowStepRequestBodyStepActionTypeEnum string

const (
	UpdateWorkflowStepRequestBodyStepActionTypeEnumManual    UpdateWorkflowStepRequestBodyStepActionTypeEnum = "MANUAL"
	UpdateWorkflowStepRequestBodyStepActionTypeEnumAutomated UpdateWorkflowStepRequestBodyStepActionTypeEnum = "AUTOMATED"
)

func (e UpdateWorkflowStepRequestBodyStepActionTypeEnum) ToPointer() *UpdateWorkflowStepRequestBodyStepActionTypeEnum {
	return &e
}

func (e *UpdateWorkflowStepRequestBodyStepActionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MANUAL":
		fallthrough
	case "AUTOMATED":
		*e = UpdateWorkflowStepRequestBodyStepActionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateWorkflowStepRequestBodyStepActionTypeEnum: %v", v)
	}
}

// UpdateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration - The custom script to run tests on source or target environments.
type UpdateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration struct {
	Command                *shared.PlatformCommand    `json:"command,omitempty"`
	RunEnvironment         *shared.RunEnvironmentEnum `json:"runEnvironment,omitempty"`
	ScriptLocationS3Bucket *string                    `json:"scriptLocationS3Bucket,omitempty"`
	ScriptLocationS3Key    *shared.PlatformScriptKey  `json:"scriptLocationS3Key,omitempty"`
	TargetType             *shared.TargetTypeEnum     `json:"targetType,omitempty"`
}

type UpdateWorkflowStepRequestBody struct {
	// The description of the step.
	Description *string `json:"description,omitempty"`
	// The name of the step.
	Name *string `json:"name,omitempty"`
	// The next step.
	Next []string `json:"next,omitempty"`
	// The outputs of a step.
	Outputs []shared.WorkflowStepOutput `json:"outputs,omitempty"`
	// The previous step.
	Previous []string `json:"previous,omitempty"`
	// The status of the step.
	Status *UpdateWorkflowStepRequestBodyStatusEnum `json:"status,omitempty"`
	// The action type of the step. You must run and update the status of a manual step for the workflow to continue after the completion of the step.
	StepActionType *UpdateWorkflowStepRequestBodyStepActionTypeEnum `json:"stepActionType,omitempty"`
	// The ID of the step group.
	StepGroupID string `json:"stepGroupId"`
	// The servers on which a step will be run.
	StepTarget []string `json:"stepTarget,omitempty"`
	// The ID of the migration workflow.
	WorkflowID string `json:"workflowId"`
	// The custom script to run tests on source or target environments.
	WorkflowStepAutomationConfiguration *UpdateWorkflowStepRequestBodyWorkflowStepAutomationConfiguration `json:"workflowStepAutomationConfiguration,omitempty"`
}

type UpdateWorkflowStepRequest struct {
	RequestBody       UpdateWorkflowStepRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The ID of the step.
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type UpdateWorkflowStepResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// Success
	UpdateWorkflowStepResponse *shared.UpdateWorkflowStepResponse
	// ValidationException
	ValidationException interface{}
}
