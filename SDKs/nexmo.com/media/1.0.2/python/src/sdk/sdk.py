"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://api.nexmo.com/v3/media",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The Media API can be used to query, download and delete media items such as audio files for use with other Nexmo APIs."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def delete_a_media_item(self) -> operations.DeleteAMediaItemResponse:
        r"""Delete a media item
        Delete a previously created media item by ID.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/:id'
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAMediaItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def list_and_search_media_items(self, request: operations.ListAndSearchMediaItemsRequest) -> operations.ListAndSearchMediaItemsResponse:
        r"""List and search media items
        Retrieve information about multiple media items with the ability to search and paginate.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/'
        
        query_params = utils.get_query_params(operations.ListAndSearchMediaItemsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAndSearchMediaItemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAndSearchMediaItems200ApplicationJSON])
                res.list_and_search_media_items_200_application_json_object = out

        return res

    def retrieve_a_media_item(self) -> operations.RetrieveAMediaItemResponse:
        r"""Retrieve a media item
        Retrieve information about a single media item
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/:id/info'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveAMediaItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Media])
                res.media = out

        return res

    def update_a_media_item(self, request: operations.UpdateAMediaItemRequestBody) -> operations.UpdateAMediaItemResponse:
        r"""Update a media item
        Update a previously created media item by ID.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/:id/info'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAMediaItemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    