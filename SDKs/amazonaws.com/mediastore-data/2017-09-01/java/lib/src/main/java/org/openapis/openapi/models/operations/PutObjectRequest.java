/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PutObjectRequest {
    /**
     * &lt;p&gt;An optional &lt;code&gt;CacheControl&lt;/code&gt; header that allows the caller to control the object's cache behavior. Headers can be passed in as specified in the HTTP at &lt;a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9"&gt;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Headers with a custom user-defined value are also accepted.&lt;/p&gt;
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Cache-Control")
    public String cacheControl;

    public PutObjectRequest withCacheControl(String cacheControl) {
        this.cacheControl = cacheControl;
        return this;
    }
    
    /**
     * The content type of the object.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=Content-Type")
    public String contentType;

    public PutObjectRequest withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * &lt;p&gt;The path (including the file name) where the object is stored in the container. Format: &amp;lt;folder name&amp;gt;/&amp;lt;folder name&amp;gt;/&amp;lt;file name&amp;gt;&lt;/p&gt; &lt;p&gt;For example, to upload the file &lt;code&gt;mlaw.avi&lt;/code&gt; to the folder path &lt;code&gt;premium\canada&lt;/code&gt; in the container &lt;code&gt;movies&lt;/code&gt;, enter the path &lt;code&gt;premium/canada/mlaw.avi&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Do not include the container name in this path.&lt;/p&gt; &lt;p&gt;If the path includes any folders that don't exist yet, the service creates them. For example, suppose you have an existing &lt;code&gt;premium/usa&lt;/code&gt; subfolder. If you specify &lt;code&gt;premium/canada&lt;/code&gt;, the service creates a &lt;code&gt;canada&lt;/code&gt; subfolder in the &lt;code&gt;premium&lt;/code&gt; folder. You then have two subfolders, &lt;code&gt;usa&lt;/code&gt; and &lt;code&gt;canada&lt;/code&gt;, in the &lt;code&gt;premium&lt;/code&gt; folder. &lt;/p&gt; &lt;p&gt;There is no correlation between the path to the source and the path (folders) in the container in AWS Elemental MediaStore.&lt;/p&gt; &lt;p&gt;For more information about folders and how they exist in a container, see the &lt;a href="http://docs.aws.amazon.com/mediastore/latest/ug/"&gt;AWS Elemental MediaStore User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The file name is the name that is assigned to the file that you upload. The file can have the same name inside and outside of AWS Elemental MediaStore, or it can have the same name. The file name can include or omit an extension. &lt;/p&gt;
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=Path")
    public String path;

    public PutObjectRequest withPath(String path) {
        this.path = path;
        return this;
    }
    
    @SpeakeasyMetadata("request:mediaType=application/json")
    public PutObjectRequestBody requestBody;

    public PutObjectRequest withRequestBody(PutObjectRequestBody requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Algorithm")
    public String xAmzAlgorithm;

    public PutObjectRequest withXAmzAlgorithm(String xAmzAlgorithm) {
        this.xAmzAlgorithm = xAmzAlgorithm;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Content-Sha256")
    public String xAmzContentSha256;

    public PutObjectRequest withXAmzContentSha256(String xAmzContentSha256) {
        this.xAmzContentSha256 = xAmzContentSha256;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Credential")
    public String xAmzCredential;

    public PutObjectRequest withXAmzCredential(String xAmzCredential) {
        this.xAmzCredential = xAmzCredential;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Date")
    public String xAmzDate;

    public PutObjectRequest withXAmzDate(String xAmzDate) {
        this.xAmzDate = xAmzDate;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Security-Token")
    public String xAmzSecurityToken;

    public PutObjectRequest withXAmzSecurityToken(String xAmzSecurityToken) {
        this.xAmzSecurityToken = xAmzSecurityToken;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-Signature")
    public String xAmzSignature;

    public PutObjectRequest withXAmzSignature(String xAmzSignature) {
        this.xAmzSignature = xAmzSignature;
        return this;
    }
    
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Amz-SignedHeaders")
    public String xAmzSignedHeaders;

    public PutObjectRequest withXAmzSignedHeaders(String xAmzSignedHeaders) {
        this.xAmzSignedHeaders = xAmzSignedHeaders;
        return this;
    }
    
    /**
     * Indicates the storage class of a &lt;code&gt;Put&lt;/code&gt; request. Defaults to high-performance temporal storage class, and objects are persisted into durable storage shortly after being received.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-amz-storage-class")
    public PutObjectXAmzStorageClassEnum xAmzStorageClass;

    public PutObjectRequest withXAmzStorageClass(PutObjectXAmzStorageClassEnum xAmzStorageClass) {
        this.xAmzStorageClass = xAmzStorageClass;
        return this;
    }
    
    /**
     * &lt;p&gt;Indicates the availability of an object while it is still uploading. If the value is set to &lt;code&gt;streaming&lt;/code&gt;, the object is available for downloading after some initial buffering but before the object is uploaded completely. If the value is set to &lt;code&gt;standard&lt;/code&gt;, the object is available for downloading only when it is uploaded completely. The default value for this header is &lt;code&gt;standard&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To use this header, you must also set the HTTP &lt;code&gt;Transfer-Encoding&lt;/code&gt; header to &lt;code&gt;chunked&lt;/code&gt;.&lt;/p&gt;
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=x-amz-upload-availability")
    public PutObjectXAmzUploadAvailabilityEnum xAmzUploadAvailability;

    public PutObjectRequest withXAmzUploadAvailability(PutObjectXAmzUploadAvailabilityEnum xAmzUploadAvailability) {
        this.xAmzUploadAvailability = xAmzUploadAvailability;
        return this;
    }
    
    public PutObjectRequest(@JsonProperty("Path") String path, @JsonProperty("RequestBody") PutObjectRequestBody requestBody) {
        this.path = path;
        this.requestBody = requestBody;
  }
}
