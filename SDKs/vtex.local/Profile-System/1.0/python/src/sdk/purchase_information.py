"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class PurchaseInformation:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_purchase_information(self, request: operations.CreatePurchaseInformationRequest) -> operations.CreatePurchaseInformationResponse:
        r"""Create purchase information
        Creates purchase information for a given client profile.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreatePurchaseInformationRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/purchase-info', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CreatePurchaseInformationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreatePurchaseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.create_purchase_information_201_application_json_object = out

        return res

    def delete_purchase_information(self, request: operations.DeletePurchaseInformationRequest) -> operations.DeletePurchaseInformationResponse:
        r"""Delete purchase information
        Deletes purchase informaiton by `profileId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeletePurchaseInformationRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/purchase-info', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.DeletePurchaseInformationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeletePurchaseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_purchase_information(self, request: operations.GetPurchaseInformationRequest) -> operations.GetPurchaseInformationResponse:
        r"""Get purchase information
        Retrieves purchase information of a given client, by its `profileId`.
        
        
        > For security and privacy reasons, this request returns masked data. For unmasked information, see Get unmasked purchase information.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPurchaseInformationRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/purchase-info', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetPurchaseInformationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPurchaseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[Any]])
                res.get_purchase_information_200_application_json_anies = out

        return res

    def get_unmasked_purchase_information(self, request: operations.GetUnmaskedPurchaseInformationRequest) -> operations.GetUnmaskedPurchaseInformationResponse:
        r"""Get unmasked purchase information
        Retrieves unmasked purchase information of a given client, by its `profileId`.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetUnmaskedPurchaseInformationRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/purchase-info/unmask', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetUnmaskedPurchaseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[dict[str, Any]]])
                res.get_unmasked_purchase_information_200_application_json_objects = out

        return res

    def update_purchase_information(self, request: operations.UpdatePurchaseInformationRequest) -> operations.UpdatePurchaseInformationResponse:
        r"""Update purchase information
        Updates one or more fields of existing purchase information for a given client profile.
        
        
        > Learn more about the [Profile System](https://developers.vtex.com/vtex-rest-api/docs/profile-system) and its other API endpoints.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdatePurchaseInformationRequest, base_url, '/api/storage/profile-system/profiles/{profileId}/purchase-info', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.UpdatePurchaseInformationRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdatePurchaseInformationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.update_purchase_information_200_application_json_object = out

        return res

    