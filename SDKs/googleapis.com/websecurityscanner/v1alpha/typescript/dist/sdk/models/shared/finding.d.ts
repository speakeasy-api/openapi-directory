import { SpeakeasyBase } from "../../../internal/utils";
import { OutdatedLibrary } from "./outdatedlibrary";
import { ViolatingResource } from "./violatingresource";
import { VulnerableHeaders } from "./vulnerableheaders";
import { VulnerableParameters } from "./vulnerableparameters";
import { Xss } from "./xss";
/**
 * The type of the Finding.
 */
export declare enum FindingFindingTypeEnum {
    FindingTypeUnspecified = "FINDING_TYPE_UNSPECIFIED",
    MixedContent = "MIXED_CONTENT",
    OutdatedLibrary = "OUTDATED_LIBRARY",
    RosettaFlash = "ROSETTA_FLASH",
    XssCallback = "XSS_CALLBACK",
    XssError = "XSS_ERROR",
    ClearTextPassword = "CLEAR_TEXT_PASSWORD",
    InvalidContentType = "INVALID_CONTENT_TYPE",
    XssAngularCallback = "XSS_ANGULAR_CALLBACK",
    InvalidHeader = "INVALID_HEADER",
    MisspelledSecurityHeaderName = "MISSPELLED_SECURITY_HEADER_NAME",
    MismatchingSecurityHeaderValues = "MISMATCHING_SECURITY_HEADER_VALUES"
}
/**
 * A Finding resource represents a vulnerability instance identified during a ScanRun.
 */
export declare class Finding extends SpeakeasyBase {
    /**
     * The body of the request that triggered the vulnerability.
     */
    body?: string;
    /**
     * The description of the vulnerability.
     */
    description?: string;
    /**
     * The URL where the browser lands when the vulnerability is detected.
     */
    finalUrl?: string;
    /**
     * The type of the Finding.
     */
    findingType?: FindingFindingTypeEnum;
    /**
     * If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.
     */
    frameUrl?: string;
    /**
     * The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.
     */
    fuzzedUrl?: string;
    /**
     * The http method of the request that triggered the vulnerability, in uppercase.
     */
    httpMethod?: string;
    /**
     * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.
     */
    name?: string;
    /**
     * Information reported for an outdated library.
     */
    outdatedLibrary?: OutdatedLibrary;
    /**
     * The URL containing human-readable payload that user can leverage to reproduce the vulnerability.
     */
    reproductionUrl?: string;
    /**
     * The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.
     */
    trackingId?: string;
    /**
     * Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.
     */
    violatingResource?: ViolatingResource;
    /**
     * Information about vulnerable or missing HTTP Headers.
     */
    vulnerableHeaders?: VulnerableHeaders;
    /**
     * Information about vulnerable request parameters.
     */
    vulnerableParameters?: VulnerableParameters;
    /**
     * Information reported for an XSS.
     */
    xss?: Xss;
}
