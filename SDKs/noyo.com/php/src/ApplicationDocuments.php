<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class ApplicationDocuments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new Application Document
     * 
     * Create a new document submission attached to an application. This endpoint provisions a new document upload and creates a new application document to be attached to the application. Use this endpoint to submit any files not already requested by the application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentResponse
     */
	public function createApplicationDocument(
        \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/documents', \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationDocumentCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApplicationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationDocumentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationDocumentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit an Application Document
     * 
     * Edit an application document based on the ID provided. The version parameter must match the latest application document version. When the `group_file_id` is not present, this method will update properties and metadata about an existing application document.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentResponse
     */
	public function editApplicationDocument(
        \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/documents/{document_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationDocumentEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditApplicationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationDocumentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationDocumentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Application Document
     * 
     * Returns the latest version of a single application document based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentResponse
     */
	public function getApplicationDocument(
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/documents/{document_id}', \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationDocumentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationDocumentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Application Documents
     * 
     * Get a list of all documents associated with a carrier application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsResponse
     */
	public function getApplicationDocuments(
        \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/documents', \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetApplicationDocumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedApplicationDocumentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedApplicationDocumentResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Submit new Application Document
     * 
     * Each group application will ask for a list of optional or required application documents. This endpoint provisions a new file upload and associates the uploaded file with the existing application document with the given ID. This endpoint can be used to replace a file that you uploaded earlier with a newer version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentResponse
     */
	public function submitApplicationDocument(
        \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/applications/{application_id}/documents/{document_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "applicationDocumentEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubmitApplicationDocumentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->applicationDocumentResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApplicationDocumentResult', 'json');
            }
        }

        return $response;
    }
}