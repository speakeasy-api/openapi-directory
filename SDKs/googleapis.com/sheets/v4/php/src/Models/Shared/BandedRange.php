<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * BandedRange - A banded (alternating colors) range in a sheet.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class BandedRange
{
    /**
     * The id of the banded range.
     * 
     * @var ?int $bandedRangeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('bandedRangeId')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $bandedRangeId = null;
    
    /**
     * Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BandingProperties $columnProperties
     */
	#[\JMS\Serializer\Annotation\SerializedName('columnProperties')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BandingProperties')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BandingProperties $columnProperties = null;
    
    /**
     * A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GridRange $range
     */
	#[\JMS\Serializer\Annotation\SerializedName('range')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GridRange')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GridRange $range = null;
    
    /**
     * Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\BandingProperties $rowProperties
     */
	#[\JMS\Serializer\Annotation\SerializedName('rowProperties')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BandingProperties')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BandingProperties $rowProperties = null;
    
	public function __construct()
	{
		$this->bandedRangeId = null;
		$this->columnProperties = null;
		$this->range = null;
		$this->rowProperties = null;
	}
}
