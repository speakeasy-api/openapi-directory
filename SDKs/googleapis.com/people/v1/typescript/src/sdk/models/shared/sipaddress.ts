/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FieldMetadata, FieldMetadataInput } from "./fieldmetadata";
import { Expose, Type } from "class-transformer";

/**
 * A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet.
 */
export class SipAddress extends SpeakeasyBase {
  /**
   * Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "formattedType" })
  formattedType?: string;

  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadata)
  metadata?: FieldMetadata;

  /**
   * The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet.
 */
export class SipAddressInput extends SpeakeasyBase {
  /**
   * Metadata about a field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  @Type(() => FieldMetadataInput)
  metadata?: FieldMetadataInput;

  /**
   * The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}
