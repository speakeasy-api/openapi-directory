/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DataPoints {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete multiple datapoints
   */
  dataPointsBatchDelete(
    req: shared.ApiCoreRequestsDeleteBatch,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsBatchDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreRequestsDeleteBatch(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsBatchDeleteResponse =
        new operations.DataPointsBatchDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update multiple datapoints
   */
  dataPointsBatchPost(
    req: shared.ApiCoreRequestsDatapointsBatch,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsBatchPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreRequestsDatapointsBatch(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsBatchPostResponse =
        new operations.DataPointsBatchPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create multiple datapoints
   */
  dataPointsBatchPut(
    req: shared.ApiCoreRequestsDatapointsBatch,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsBatchPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreRequestsDatapointsBatch(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsBatchPutResponse =
        new operations.DataPointsBatchPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesModifyBatchItemResponceApiCoreDtoDatapointsDatapointSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Count the datapoints associated to the user
   */
  dataPointsCount(
    req: operations.DataPointsCountRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsCountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsCountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints/count";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsCountResponse =
        new operations.DataPointsCountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesCountResponce = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesCountResponce
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a datapoint
   */
  dataPointsDelete(
    req: operations.DataPointsDeleteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/datapoints/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsDeleteResponse =
        new operations.DataPointsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List of all the datapoints associated to the user
   */
  dataPointsGet(
    req: operations.DataPointsGetRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetResponse =
        new operations.DataPointsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64 =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreResponsesEntityUriSystemInt64
              );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve the list of events related to this datapoint.
   */
  dataPointsGetHits(
    req: operations.DataPointsGetHitsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetHitsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetHitsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/hits",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetHitsResponse =
        new operations.DataPointsGetHitsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoClickStreamHitListPage = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoClickStreamHitListPage
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoClickStreamHitListPage = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoClickStreamHitListPage
            );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about this customer for a timeframe by groups
   */
  dataPointsGetStatisticsAggregatedSingle(
    req: operations.DataPointsGetStatisticsAggregatedSingleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetStatisticsAggregatedSingleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetStatisticsAggregatedSingleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints/aggregated";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetStatisticsAggregatedSingleResponse =
        new operations.DataPointsGetStatisticsAggregatedSingleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about all datapoints of this customer for a timeframe grouped by some temporal entity (day/week/month)
   */
  dataPointsGetStatisticsAllList(
    req: operations.DataPointsGetStatisticsAllListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetStatisticsAllListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetStatisticsAllListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/datapoints/aggregated/list";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetStatisticsAllListResponse =
        new operations.DataPointsGetStatisticsAllListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about this datapoint for a timeframe grouped by some temporal entity (day/week/month)
   */
  dataPointsGetStatisticsList(
    req: operations.DataPointsGetStatisticsListRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetStatisticsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetStatisticsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/aggregated/list",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetStatisticsListResponse =
        new operations.DataPointsGetStatisticsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult =
              utils.objectToClass(
                httpRes?.data,
                shared.ApiCoreResponsesEntitiesResponseApiCoreDtoAggregatedAggregatedResult
              );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve statistics about this datapoint for a timeframe
   */
  dataPointsGetStatisticsSingle(
    req: operations.DataPointsGetStatisticsSingleRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsGetStatisticsSingleResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsGetStatisticsSingleRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/aggregated",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsGetStatisticsSingleResponse =
        new operations.DataPointsGetStatisticsSingleResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoAggregatedAggregatedResult = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoAggregatedAggregatedResult
            );
          }
          break;
        case [401, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast switch the "favourite" field of a datapoint
   */
  dataPointsPatchFavourite(
    req: operations.DataPointsPatchFavouriteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPatchFavouriteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsPatchFavouriteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/favourite",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "put",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPatchFavouriteResponse =
        new operations.DataPointsPatchFavouriteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch the "notes" field of a datapoint
   */
  dataPointsPatchNotesForm(
    req: operations.DataPointsPatchNotesFormRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPatchNotesFormResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsPatchNotesFormRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/notes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsGenericTextPatch",
        "form"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPatchNotesFormResponse =
        new operations.DataPointsPatchNotesFormResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch the "notes" field of a datapoint
   */
  dataPointsPatchNotesJson(
    req: operations.DataPointsPatchNotesJsonRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPatchNotesJsonResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsPatchNotesJsonRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/notes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreRequestsGenericTextPatch",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPatchNotesJsonResponse =
        new operations.DataPointsPatchNotesJsonResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Fast patch the "notes" field of a datapoint
   */
  dataPointsPatchNotesRaw(
    req: operations.DataPointsPatchNotesRawRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPatchNotesRawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsPatchNotesRawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/datapoints/{id}/notes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "raw"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPatchNotesRawResponse =
        new operations.DataPointsPatchNotesRawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 403, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a datapoint
   */
  dataPointsPost(
    req: operations.DataPointsPostRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DataPointsPostRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/datapoints/{id}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "apiCoreDtoDatapointsDatapoint",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPostResponse =
        new operations.DataPointsPostResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Create a datapoint
   */
  dataPointsPut(
    req: shared.ApiCoreDtoDatapointsDatapoint,
    config?: AxiosRequestConfig
  ): Promise<operations.DataPointsPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.ApiCoreDtoDatapointsDatapoint(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/datapoints";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DataPointsPutResponse =
        new operations.DataPointsPutResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreResponsesEntityUriSystemInt64 = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreResponsesEntityUriSystemInt64
            );
          }
          if (utils.matchContentType(contentType, `application/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `text/xml`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Get a datapoint
   */
  getDatapointsId(
    req: operations.GetDatapointsIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDatapointsIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetDatapointsIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/datapoints/{id}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetDatapointsIdResponse =
        new operations.GetDatapointsIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.apiCoreDtoDatapointsDatapoint = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoDatapointsDatapoint
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.apiCoreDtoDatapointsDatapoint = utils.objectToClass(
              httpRes?.data,
              shared.ApiCoreDtoDatapointsDatapoint
            );
          }
          break;
        case [401, 404, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
