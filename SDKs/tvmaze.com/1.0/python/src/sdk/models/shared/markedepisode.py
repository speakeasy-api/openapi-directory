"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarkedEpisodeEmbedded:
    
    episode: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episode'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarkedEpisodeInput:
    
    embedded: Optional[MarkedEpisodeEmbedded] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded'), 'exclude': lambda f: f is None }})  
    marked_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marked_at'), 'exclude': lambda f: f is None }})
    r"""Epoch timestamp for when the user watched the episode, or 0 for unknown."""  
    type: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""0 for watched, 1 for acquired, 2 for skipped"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MarkedEpisode:
    r"""this episode is now marked"""
    
    embedded: Optional[MarkedEpisodeEmbedded] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('_embedded'), 'exclude': lambda f: f is None }})  
    episode_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episode_id'), 'exclude': lambda f: f is None }})  
    marked_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marked_at'), 'exclude': lambda f: f is None }})
    r"""Epoch timestamp for when the user watched the episode, or 0 for unknown."""  
    type: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""0 for watched, 1 for acquired, 2 for skipped"""  
    