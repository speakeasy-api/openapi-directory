// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableDeviceInterfaceConnectionStatusEnum string

const (
	WritableDeviceInterfaceConnectionStatusEnumFalse WritableDeviceInterfaceConnectionStatusEnum = "false"
	WritableDeviceInterfaceConnectionStatusEnumTrue  WritableDeviceInterfaceConnectionStatusEnum = "true"
)

func (e *WritableDeviceInterfaceConnectionStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "false":
		fallthrough
	case "true":
		*e = WritableDeviceInterfaceConnectionStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceInterfaceConnectionStatusEnum: %s", s)
	}
}

type WritableDeviceInterfaceModeEnum string

const (
	WritableDeviceInterfaceModeEnumAccess    WritableDeviceInterfaceModeEnum = "access"
	WritableDeviceInterfaceModeEnumTagged    WritableDeviceInterfaceModeEnum = "tagged"
	WritableDeviceInterfaceModeEnumTaggedAll WritableDeviceInterfaceModeEnum = "tagged-all"
)

func (e *WritableDeviceInterfaceModeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "access":
		fallthrough
	case "tagged":
		fallthrough
	case "tagged-all":
		*e = WritableDeviceInterfaceModeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceInterfaceModeEnum: %s", s)
	}
}

type WritableDeviceInterfaceTypeEnum string

const (
	WritableDeviceInterfaceTypeEnumVirtual                          WritableDeviceInterfaceTypeEnum = "virtual"
	WritableDeviceInterfaceTypeEnumLag                              WritableDeviceInterfaceTypeEnum = "lag"
	WritableDeviceInterfaceTypeEnumOneHundredbaseTx                 WritableDeviceInterfaceTypeEnum = "100base-tx"
	WritableDeviceInterfaceTypeEnumOneThousandbaseT                 WritableDeviceInterfaceTypeEnum = "1000base-t"
	WritableDeviceInterfaceTypeEnumTwo5gbaseT                       WritableDeviceInterfaceTypeEnum = "2.5gbase-t"
	WritableDeviceInterfaceTypeEnumFivegbaseT                       WritableDeviceInterfaceTypeEnum = "5gbase-t"
	WritableDeviceInterfaceTypeEnumTengbaseT                        WritableDeviceInterfaceTypeEnum = "10gbase-t"
	WritableDeviceInterfaceTypeEnumTengbaseCx4                      WritableDeviceInterfaceTypeEnum = "10gbase-cx4"
	WritableDeviceInterfaceTypeEnumOneThousandbaseXGbic             WritableDeviceInterfaceTypeEnum = "1000base-x-gbic"
	WritableDeviceInterfaceTypeEnumOneThousandbaseXSfp              WritableDeviceInterfaceTypeEnum = "1000base-x-sfp"
	WritableDeviceInterfaceTypeEnumTengbaseXSfpp                    WritableDeviceInterfaceTypeEnum = "10gbase-x-sfpp"
	WritableDeviceInterfaceTypeEnumTengbaseXXfp                     WritableDeviceInterfaceTypeEnum = "10gbase-x-xfp"
	WritableDeviceInterfaceTypeEnumTengbaseXXenpak                  WritableDeviceInterfaceTypeEnum = "10gbase-x-xenpak"
	WritableDeviceInterfaceTypeEnumTengbaseXx2                      WritableDeviceInterfaceTypeEnum = "10gbase-x-x2"
	WritableDeviceInterfaceTypeEnumTwentyFivegbaseXSfp28            WritableDeviceInterfaceTypeEnum = "25gbase-x-sfp28"
	WritableDeviceInterfaceTypeEnumFortygbaseXQsfpp                 WritableDeviceInterfaceTypeEnum = "40gbase-x-qsfpp"
	WritableDeviceInterfaceTypeEnumFiftygbaseXSfp28                 WritableDeviceInterfaceTypeEnum = "50gbase-x-sfp28"
	WritableDeviceInterfaceTypeEnumOneHundredgbaseXCfp              WritableDeviceInterfaceTypeEnum = "100gbase-x-cfp"
	WritableDeviceInterfaceTypeEnumOneHundredgbaseXCfp2             WritableDeviceInterfaceTypeEnum = "100gbase-x-cfp2"
	WritableDeviceInterfaceTypeEnumTwoHundredgbaseXCfp2             WritableDeviceInterfaceTypeEnum = "200gbase-x-cfp2"
	WritableDeviceInterfaceTypeEnumOneHundredgbaseXCfp4             WritableDeviceInterfaceTypeEnum = "100gbase-x-cfp4"
	WritableDeviceInterfaceTypeEnumOneHundredgbaseXCpak             WritableDeviceInterfaceTypeEnum = "100gbase-x-cpak"
	WritableDeviceInterfaceTypeEnumOneHundredgbaseXQsfp28           WritableDeviceInterfaceTypeEnum = "100gbase-x-qsfp28"
	WritableDeviceInterfaceTypeEnumTwoHundredgbaseXQsfp56           WritableDeviceInterfaceTypeEnum = "200gbase-x-qsfp56"
	WritableDeviceInterfaceTypeEnumFourHundredgbaseXQsfpdd          WritableDeviceInterfaceTypeEnum = "400gbase-x-qsfpdd"
	WritableDeviceInterfaceTypeEnumFourHundredgbaseXOsfp            WritableDeviceInterfaceTypeEnum = "400gbase-x-osfp"
	WritableDeviceInterfaceTypeEnumIeee80211a                       WritableDeviceInterfaceTypeEnum = "ieee802.11a"
	WritableDeviceInterfaceTypeEnumIeee80211g                       WritableDeviceInterfaceTypeEnum = "ieee802.11g"
	WritableDeviceInterfaceTypeEnumIeee80211n                       WritableDeviceInterfaceTypeEnum = "ieee802.11n"
	WritableDeviceInterfaceTypeEnumIeee80211ac                      WritableDeviceInterfaceTypeEnum = "ieee802.11ac"
	WritableDeviceInterfaceTypeEnumIeee80211ad                      WritableDeviceInterfaceTypeEnum = "ieee802.11ad"
	WritableDeviceInterfaceTypeEnumIeee80211ax                      WritableDeviceInterfaceTypeEnum = "ieee802.11ax"
	WritableDeviceInterfaceTypeEnumGsm                              WritableDeviceInterfaceTypeEnum = "gsm"
	WritableDeviceInterfaceTypeEnumCdma                             WritableDeviceInterfaceTypeEnum = "cdma"
	WritableDeviceInterfaceTypeEnumLte                              WritableDeviceInterfaceTypeEnum = "lte"
	WritableDeviceInterfaceTypeEnumSonetOc3                         WritableDeviceInterfaceTypeEnum = "sonet-oc3"
	WritableDeviceInterfaceTypeEnumSonetOc12                        WritableDeviceInterfaceTypeEnum = "sonet-oc12"
	WritableDeviceInterfaceTypeEnumSonetOc48                        WritableDeviceInterfaceTypeEnum = "sonet-oc48"
	WritableDeviceInterfaceTypeEnumSonetOc192                       WritableDeviceInterfaceTypeEnum = "sonet-oc192"
	WritableDeviceInterfaceTypeEnumSonetOc768                       WritableDeviceInterfaceTypeEnum = "sonet-oc768"
	WritableDeviceInterfaceTypeEnumSonetOc1920                      WritableDeviceInterfaceTypeEnum = "sonet-oc1920"
	WritableDeviceInterfaceTypeEnumSonetOc3840                      WritableDeviceInterfaceTypeEnum = "sonet-oc3840"
	WritableDeviceInterfaceTypeEnumOnegfcSfp                        WritableDeviceInterfaceTypeEnum = "1gfc-sfp"
	WritableDeviceInterfaceTypeEnumTwogfcSfp                        WritableDeviceInterfaceTypeEnum = "2gfc-sfp"
	WritableDeviceInterfaceTypeEnumFourgfcSfp                       WritableDeviceInterfaceTypeEnum = "4gfc-sfp"
	WritableDeviceInterfaceTypeEnumEightgfcSfpp                     WritableDeviceInterfaceTypeEnum = "8gfc-sfpp"
	WritableDeviceInterfaceTypeEnumSixteengfcSfpp                   WritableDeviceInterfaceTypeEnum = "16gfc-sfpp"
	WritableDeviceInterfaceTypeEnumThirtyTwogfcSfp28                WritableDeviceInterfaceTypeEnum = "32gfc-sfp28"
	WritableDeviceInterfaceTypeEnumOneHundredAndTwentyEightgfcSfp28 WritableDeviceInterfaceTypeEnum = "128gfc-sfp28"
	WritableDeviceInterfaceTypeEnumInfinibandSdr                    WritableDeviceInterfaceTypeEnum = "infiniband-sdr"
	WritableDeviceInterfaceTypeEnumInfinibandDdr                    WritableDeviceInterfaceTypeEnum = "infiniband-ddr"
	WritableDeviceInterfaceTypeEnumInfinibandQdr                    WritableDeviceInterfaceTypeEnum = "infiniband-qdr"
	WritableDeviceInterfaceTypeEnumInfinibandFdr10                  WritableDeviceInterfaceTypeEnum = "infiniband-fdr10"
	WritableDeviceInterfaceTypeEnumInfinibandFdr                    WritableDeviceInterfaceTypeEnum = "infiniband-fdr"
	WritableDeviceInterfaceTypeEnumInfinibandEdr                    WritableDeviceInterfaceTypeEnum = "infiniband-edr"
	WritableDeviceInterfaceTypeEnumInfinibandHdr                    WritableDeviceInterfaceTypeEnum = "infiniband-hdr"
	WritableDeviceInterfaceTypeEnumInfinibandNdr                    WritableDeviceInterfaceTypeEnum = "infiniband-ndr"
	WritableDeviceInterfaceTypeEnumInfinibandXdr                    WritableDeviceInterfaceTypeEnum = "infiniband-xdr"
	WritableDeviceInterfaceTypeEnumT1                               WritableDeviceInterfaceTypeEnum = "t1"
	WritableDeviceInterfaceTypeEnumE1                               WritableDeviceInterfaceTypeEnum = "e1"
	WritableDeviceInterfaceTypeEnumT3                               WritableDeviceInterfaceTypeEnum = "t3"
	WritableDeviceInterfaceTypeEnumE3                               WritableDeviceInterfaceTypeEnum = "e3"
	WritableDeviceInterfaceTypeEnumCiscoStackwise                   WritableDeviceInterfaceTypeEnum = "cisco-stackwise"
	WritableDeviceInterfaceTypeEnumCiscoStackwisePlus               WritableDeviceInterfaceTypeEnum = "cisco-stackwise-plus"
	WritableDeviceInterfaceTypeEnumCiscoFlexstack                   WritableDeviceInterfaceTypeEnum = "cisco-flexstack"
	WritableDeviceInterfaceTypeEnumCiscoFlexstackPlus               WritableDeviceInterfaceTypeEnum = "cisco-flexstack-plus"
	WritableDeviceInterfaceTypeEnumJuniperVcp                       WritableDeviceInterfaceTypeEnum = "juniper-vcp"
	WritableDeviceInterfaceTypeEnumExtremeSummitstack               WritableDeviceInterfaceTypeEnum = "extreme-summitstack"
	WritableDeviceInterfaceTypeEnumExtremeSummitstack128            WritableDeviceInterfaceTypeEnum = "extreme-summitstack-128"
	WritableDeviceInterfaceTypeEnumExtremeSummitstack256            WritableDeviceInterfaceTypeEnum = "extreme-summitstack-256"
	WritableDeviceInterfaceTypeEnumExtremeSummitstack512            WritableDeviceInterfaceTypeEnum = "extreme-summitstack-512"
	WritableDeviceInterfaceTypeEnumOther                            WritableDeviceInterfaceTypeEnum = "other"
)

func (e *WritableDeviceInterfaceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "virtual":
		fallthrough
	case "lag":
		fallthrough
	case "100base-tx":
		fallthrough
	case "1000base-t":
		fallthrough
	case "2.5gbase-t":
		fallthrough
	case "5gbase-t":
		fallthrough
	case "10gbase-t":
		fallthrough
	case "10gbase-cx4":
		fallthrough
	case "1000base-x-gbic":
		fallthrough
	case "1000base-x-sfp":
		fallthrough
	case "10gbase-x-sfpp":
		fallthrough
	case "10gbase-x-xfp":
		fallthrough
	case "10gbase-x-xenpak":
		fallthrough
	case "10gbase-x-x2":
		fallthrough
	case "25gbase-x-sfp28":
		fallthrough
	case "40gbase-x-qsfpp":
		fallthrough
	case "50gbase-x-sfp28":
		fallthrough
	case "100gbase-x-cfp":
		fallthrough
	case "100gbase-x-cfp2":
		fallthrough
	case "200gbase-x-cfp2":
		fallthrough
	case "100gbase-x-cfp4":
		fallthrough
	case "100gbase-x-cpak":
		fallthrough
	case "100gbase-x-qsfp28":
		fallthrough
	case "200gbase-x-qsfp56":
		fallthrough
	case "400gbase-x-qsfpdd":
		fallthrough
	case "400gbase-x-osfp":
		fallthrough
	case "ieee802.11a":
		fallthrough
	case "ieee802.11g":
		fallthrough
	case "ieee802.11n":
		fallthrough
	case "ieee802.11ac":
		fallthrough
	case "ieee802.11ad":
		fallthrough
	case "ieee802.11ax":
		fallthrough
	case "gsm":
		fallthrough
	case "cdma":
		fallthrough
	case "lte":
		fallthrough
	case "sonet-oc3":
		fallthrough
	case "sonet-oc12":
		fallthrough
	case "sonet-oc48":
		fallthrough
	case "sonet-oc192":
		fallthrough
	case "sonet-oc768":
		fallthrough
	case "sonet-oc1920":
		fallthrough
	case "sonet-oc3840":
		fallthrough
	case "1gfc-sfp":
		fallthrough
	case "2gfc-sfp":
		fallthrough
	case "4gfc-sfp":
		fallthrough
	case "8gfc-sfpp":
		fallthrough
	case "16gfc-sfpp":
		fallthrough
	case "32gfc-sfp28":
		fallthrough
	case "128gfc-sfp28":
		fallthrough
	case "infiniband-sdr":
		fallthrough
	case "infiniband-ddr":
		fallthrough
	case "infiniband-qdr":
		fallthrough
	case "infiniband-fdr10":
		fallthrough
	case "infiniband-fdr":
		fallthrough
	case "infiniband-edr":
		fallthrough
	case "infiniband-hdr":
		fallthrough
	case "infiniband-ndr":
		fallthrough
	case "infiniband-xdr":
		fallthrough
	case "t1":
		fallthrough
	case "e1":
		fallthrough
	case "t3":
		fallthrough
	case "e3":
		fallthrough
	case "cisco-stackwise":
		fallthrough
	case "cisco-stackwise-plus":
		fallthrough
	case "cisco-flexstack":
		fallthrough
	case "cisco-flexstack-plus":
		fallthrough
	case "juniper-vcp":
		fallthrough
	case "extreme-summitstack":
		fallthrough
	case "extreme-summitstack-128":
		fallthrough
	case "extreme-summitstack-256":
		fallthrough
	case "extreme-summitstack-512":
		fallthrough
	case "other":
		*e = WritableDeviceInterfaceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceInterfaceTypeEnum: %s", s)
	}
}

type WritableDeviceInterfaceInput struct {
	Cable            *NestedCableInput                            `json:"cable,omitempty"`
	ConnectionStatus *WritableDeviceInterfaceConnectionStatusEnum `json:"connection_status,omitempty"`
	Description      *string                                      `json:"description,omitempty"`
	Device           int64                                        `json:"device"`
	Enabled          *bool                                        `json:"enabled,omitempty"`
	Lag              *int64                                       `json:"lag,omitempty"`
	MacAddress       *string                                      `json:"mac_address,omitempty"`
	// This interface is used only for out-of-band management
	MgmtOnly     *bool                            `json:"mgmt_only,omitempty"`
	Mode         *WritableDeviceInterfaceModeEnum `json:"mode,omitempty"`
	Mtu          *int64                           `json:"mtu,omitempty"`
	Name         string                           `json:"name"`
	TaggedVlans  []int64                          `json:"tagged_vlans,omitempty"`
	Tags         []string                         `json:"tags,omitempty"`
	Type         WritableDeviceInterfaceTypeEnum  `json:"type"`
	UntaggedVlan *int64                           `json:"untagged_vlan,omitempty"`
}
