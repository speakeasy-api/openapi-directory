// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ParentEntityFilterFileTypeEnum string

const (
	ParentEntityFilterFileTypeEnumFileTypeUnspecified    ParentEntityFilterFileTypeEnum = "FILE_TYPE_UNSPECIFIED"
	ParentEntityFilterFileTypeEnumFileTypeCampaign       ParentEntityFilterFileTypeEnum = "FILE_TYPE_CAMPAIGN"
	ParentEntityFilterFileTypeEnumFileTypeMediaProduct   ParentEntityFilterFileTypeEnum = "FILE_TYPE_MEDIA_PRODUCT"
	ParentEntityFilterFileTypeEnumFileTypeInsertionOrder ParentEntityFilterFileTypeEnum = "FILE_TYPE_INSERTION_ORDER"
	ParentEntityFilterFileTypeEnumFileTypeLineItem       ParentEntityFilterFileTypeEnum = "FILE_TYPE_LINE_ITEM"
	ParentEntityFilterFileTypeEnumFileTypeAdGroup        ParentEntityFilterFileTypeEnum = "FILE_TYPE_AD_GROUP"
	ParentEntityFilterFileTypeEnumFileTypeAd             ParentEntityFilterFileTypeEnum = "FILE_TYPE_AD"
)

func (e ParentEntityFilterFileTypeEnum) ToPointer() *ParentEntityFilterFileTypeEnum {
	return &e
}

func (e *ParentEntityFilterFileTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILE_TYPE_UNSPECIFIED":
		fallthrough
	case "FILE_TYPE_CAMPAIGN":
		fallthrough
	case "FILE_TYPE_MEDIA_PRODUCT":
		fallthrough
	case "FILE_TYPE_INSERTION_ORDER":
		fallthrough
	case "FILE_TYPE_LINE_ITEM":
		fallthrough
	case "FILE_TYPE_AD_GROUP":
		fallthrough
	case "FILE_TYPE_AD":
		*e = ParentEntityFilterFileTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParentEntityFilterFileTypeEnum: %v", v)
	}
}

// ParentEntityFilterFilterTypeEnum - Required. Filter type used to filter fetched entities.
type ParentEntityFilterFilterTypeEnum string

const (
	ParentEntityFilterFilterTypeEnumFilterTypeUnspecified      ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_UNSPECIFIED"
	ParentEntityFilterFilterTypeEnumFilterTypeNone             ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_NONE"
	ParentEntityFilterFilterTypeEnumFilterTypeAdvertiserID     ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_ADVERTISER_ID"
	ParentEntityFilterFilterTypeEnumFilterTypeCampaignID       ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_CAMPAIGN_ID"
	ParentEntityFilterFilterTypeEnumFilterTypeMediaProductID   ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_MEDIA_PRODUCT_ID"
	ParentEntityFilterFilterTypeEnumFilterTypeInsertionOrderID ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_INSERTION_ORDER_ID"
	ParentEntityFilterFilterTypeEnumFilterTypeLineItemID       ParentEntityFilterFilterTypeEnum = "FILTER_TYPE_LINE_ITEM_ID"
)

func (e ParentEntityFilterFilterTypeEnum) ToPointer() *ParentEntityFilterFilterTypeEnum {
	return &e
}

func (e *ParentEntityFilterFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FILTER_TYPE_UNSPECIFIED":
		fallthrough
	case "FILTER_TYPE_NONE":
		fallthrough
	case "FILTER_TYPE_ADVERTISER_ID":
		fallthrough
	case "FILTER_TYPE_CAMPAIGN_ID":
		fallthrough
	case "FILTER_TYPE_MEDIA_PRODUCT_ID":
		fallthrough
	case "FILTER_TYPE_INSERTION_ORDER_ID":
		fallthrough
	case "FILTER_TYPE_LINE_ITEM_ID":
		*e = ParentEntityFilterFilterTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ParentEntityFilterFilterTypeEnum: %v", v)
	}
}

// ParentEntityFilter - A filtering option that filters on selected file types belonging to a chosen set of filter entities.
type ParentEntityFilter struct {
	// Required. File types that will be returned.
	FileType []ParentEntityFilterFileTypeEnum `json:"fileType,omitempty"`
	// The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.
	FilterIds []string `json:"filterIds,omitempty"`
	// Required. Filter type used to filter fetched entities.
	FilterType *ParentEntityFilterFilterTypeEnum `json:"filterType,omitempty"`
}
