// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type FullItemCategoryEnum string

const (
	FullItemCategoryEnumLogin                FullItemCategoryEnum = "LOGIN"
	FullItemCategoryEnumPassword             FullItemCategoryEnum = "PASSWORD"
	FullItemCategoryEnumAPICredential        FullItemCategoryEnum = "API_CREDENTIAL"
	FullItemCategoryEnumServer               FullItemCategoryEnum = "SERVER"
	FullItemCategoryEnumDatabase             FullItemCategoryEnum = "DATABASE"
	FullItemCategoryEnumCreditCard           FullItemCategoryEnum = "CREDIT_CARD"
	FullItemCategoryEnumMembership           FullItemCategoryEnum = "MEMBERSHIP"
	FullItemCategoryEnumPassport             FullItemCategoryEnum = "PASSPORT"
	FullItemCategoryEnumSoftwareLicense      FullItemCategoryEnum = "SOFTWARE_LICENSE"
	FullItemCategoryEnumOutdoorLicense       FullItemCategoryEnum = "OUTDOOR_LICENSE"
	FullItemCategoryEnumSecureNote           FullItemCategoryEnum = "SECURE_NOTE"
	FullItemCategoryEnumWirelessRouter       FullItemCategoryEnum = "WIRELESS_ROUTER"
	FullItemCategoryEnumBankAccount          FullItemCategoryEnum = "BANK_ACCOUNT"
	FullItemCategoryEnumDriverLicense        FullItemCategoryEnum = "DRIVER_LICENSE"
	FullItemCategoryEnumIdentity             FullItemCategoryEnum = "IDENTITY"
	FullItemCategoryEnumRewardProgram        FullItemCategoryEnum = "REWARD_PROGRAM"
	FullItemCategoryEnumDocument             FullItemCategoryEnum = "DOCUMENT"
	FullItemCategoryEnumEmailAccount         FullItemCategoryEnum = "EMAIL_ACCOUNT"
	FullItemCategoryEnumSocialSecurityNumber FullItemCategoryEnum = "SOCIAL_SECURITY_NUMBER"
	FullItemCategoryEnumMedicalRecord        FullItemCategoryEnum = "MEDICAL_RECORD"
	FullItemCategoryEnumSSHKey               FullItemCategoryEnum = "SSH_KEY"
	FullItemCategoryEnumCustom               FullItemCategoryEnum = "CUSTOM"
)

func (e *FullItemCategoryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LOGIN":
		fallthrough
	case "PASSWORD":
		fallthrough
	case "API_CREDENTIAL":
		fallthrough
	case "SERVER":
		fallthrough
	case "DATABASE":
		fallthrough
	case "CREDIT_CARD":
		fallthrough
	case "MEMBERSHIP":
		fallthrough
	case "PASSPORT":
		fallthrough
	case "SOFTWARE_LICENSE":
		fallthrough
	case "OUTDOOR_LICENSE":
		fallthrough
	case "SECURE_NOTE":
		fallthrough
	case "WIRELESS_ROUTER":
		fallthrough
	case "BANK_ACCOUNT":
		fallthrough
	case "DRIVER_LICENSE":
		fallthrough
	case "IDENTITY":
		fallthrough
	case "REWARD_PROGRAM":
		fallthrough
	case "DOCUMENT":
		fallthrough
	case "EMAIL_ACCOUNT":
		fallthrough
	case "SOCIAL_SECURITY_NUMBER":
		fallthrough
	case "MEDICAL_RECORD":
		fallthrough
	case "SSH_KEY":
		fallthrough
	case "CUSTOM":
		*e = FullItemCategoryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullItemCategoryEnum: %s", s)
	}
}

type FullItemSections struct {
	ID    *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
}

type FullItemUrls struct {
	Href    string  `json:"href"`
	Label   *string `json:"label,omitempty"`
	Primary *bool   `json:"primary,omitempty"`
}

type FullItemVault struct {
	ID string `json:"id"`
}

type FullItemInput struct {
	Category FullItemCategoryEnum `json:"category"`
	Favorite *bool                `json:"favorite,omitempty"`
	Fields   []FieldInput         `json:"fields,omitempty"`
	Files    []FileInput          `json:"files,omitempty"`
	ID       *string              `json:"id,omitempty"`
	Sections []FullItemSections   `json:"sections,omitempty"`
	Tags     []string             `json:"tags,omitempty"`
	Title    *string              `json:"title,omitempty"`
	Urls     []FullItemUrls       `json:"urls,omitempty"`
	Vault    FullItemVault        `json:"vault"`
	Version  *int64               `json:"version,omitempty"`
}

type FullItemStateEnum string

const (
	FullItemStateEnumArchived FullItemStateEnum = "ARCHIVED"
	FullItemStateEnumDeleted  FullItemStateEnum = "DELETED"
)

func (e *FullItemStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ARCHIVED":
		fallthrough
	case "DELETED":
		*e = FullItemStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FullItemStateEnum: %s", s)
	}
}

// FullItem - OK
type FullItem struct {
	Category     FullItemCategoryEnum `json:"category"`
	CreatedAt    *time.Time           `json:"createdAt,omitempty"`
	Favorite     *bool                `json:"favorite,omitempty"`
	Fields       []Field              `json:"fields,omitempty"`
	Files        []File               `json:"files,omitempty"`
	ID           *string              `json:"id,omitempty"`
	LastEditedBy *string              `json:"lastEditedBy,omitempty"`
	Sections     []FullItemSections   `json:"sections,omitempty"`
	State        *FullItemStateEnum   `json:"state,omitempty"`
	Tags         []string             `json:"tags,omitempty"`
	Title        *string              `json:"title,omitempty"`
	UpdatedAt    *time.Time           `json:"updatedAt,omitempty"`
	Urls         []FullItemUrls       `json:"urls,omitempty"`
	Vault        FullItemVault        `json:"vault"`
	Version      *int64               `json:"version,omitempty"`
}
