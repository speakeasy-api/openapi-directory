<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const CREATE_ENGAGEMENT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const CREATE_EXECUTION_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const DELETE_ENGAGEMENT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const DELETE_EXECUTION_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const DELETE_FLOW_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_ENGAGEMENT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_ENGAGEMENT_CONTEXT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_EXECUTION_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_EXECUTION_CONTEXT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_EXECUTION_STEP_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_EXECUTION_STEP_CONTEXT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_FLOW_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_STEP_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const FETCH_STEP_CONTEXT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const LIST_ENGAGEMENT_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const LIST_EXECUTION_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const LIST_EXECUTION_STEP_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const LIST_FLOW_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const LIST_STEP_SERVERS = [
		'https://studio.twilio.com',
	];
	
	public const UPDATE_EXECUTION_SERVERS = [
		'https://studio.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Triggers a new Engagement for the Flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEngagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateEngagementSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateEngagementResponse
     */
	public function createEngagement(
        \OpenAPI\OpenAPI\Models\Operations\CreateEngagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateEngagementSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateEngagementResponse
    {
        $baseUrl = SDK::CREATE_ENGAGEMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements', \OpenAPI\OpenAPI\Models\Operations\CreateEngagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateEngagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowEngagement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowEngagement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Triggers a new Execution for the Flow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateExecutionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateExecutionResponse
     */
	public function createExecution(
        \OpenAPI\OpenAPI\Models\Operations\CreateExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateExecutionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateExecutionResponse
    {
        $baseUrl = SDK::CREATE_EXECUTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions', \OpenAPI\OpenAPI\Models\Operations\CreateExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete this Engagement and all Steps relating to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementResponse
     */
	public function deleteEngagement(
        \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementResponse
    {
        $baseUrl = SDK::DELETE_ENGAGEMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteEngagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete the Execution and all Steps relating to it.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionResponse
     */
	public function deleteExecution(
        \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionResponse
    {
        $baseUrl = SDK::DELETE_EXECUTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFlowResponse
     */
	public function deleteFlow(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFlowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFlowResponse
    {
        $baseUrl = SDK::DELETE_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Retrieve an Engagement
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEngagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEngagementSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEngagementResponse
     */
	public function fetchEngagement(
        \OpenAPI\OpenAPI\Models\Operations\FetchEngagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEngagementSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEngagementResponse
    {
        $baseUrl = SDK::FETCH_ENGAGEMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchEngagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEngagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowEngagement = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowEngagement', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the most recent context for an Engagement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextResponse
     */
	public function fetchEngagementContext(
        \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextResponse
    {
        $baseUrl = SDK::FETCH_ENGAGEMENT_CONTEXT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Context', \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchEngagementContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowEngagementEngagementContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowEngagementEngagementContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve an Execution
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExecutionResponse
     */
	public function fetchExecution(
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExecutionResponse
    {
        $baseUrl = SDK::FETCH_EXECUTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecution', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the most recent context for an Execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextResponse
     */
	public function fetchExecutionContext(
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextResponse
    {
        $baseUrl = SDK::FETCH_EXECUTION_CONTEXT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Context', \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExecutionContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecutionExecutionContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecutionExecutionContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Step.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepResponse
     */
	public function fetchExecutionStep(
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepResponse
    {
        $baseUrl = SDK::FETCH_EXECUTION_STEP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecutionExecutionStep = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecutionExecutionStep', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the context for an Execution Step.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextResponse
     */
	public function fetchExecutionStepContext(
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextResponse
    {
        $baseUrl = SDK::FETCH_EXECUTION_STEP_CONTEXT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps/{StepSid}/Context', \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchExecutionStepContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecutionExecutionStepExecutionStepContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecutionExecutionStepExecutionStepContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a specific Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFlowResponse
     */
	public function fetchFlow(
        \OpenAPI\OpenAPI\Models\Operations\FetchFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFlowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFlowResponse
    {
        $baseUrl = SDK::FETCH_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1Flow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1Flow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a Step.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStepRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStepSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchStepResponse
     */
	public function fetchStep(
        \OpenAPI\OpenAPI\Models\Operations\FetchStepRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchStepSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchStepResponse
    {
        $baseUrl = SDK::FETCH_STEP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchStepRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchStepResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowEngagementStep = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowEngagementStep', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the context for an Engagement Step.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStepContextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchStepContextSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchStepContextResponse
     */
	public function fetchStepContext(
        \OpenAPI\OpenAPI\Models\Operations\FetchStepContextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchStepContextSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchStepContextResponse
    {
        $baseUrl = SDK::FETCH_STEP_CONTEXT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps/{StepSid}/Context', \OpenAPI\OpenAPI\Models\Operations\FetchStepContextRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchStepContextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowEngagementStepStepContext = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowEngagementStepStepContext', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Engagements for the Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEngagementRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListEngagementSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListEngagementResponse
     */
	public function listEngagement(
        \OpenAPI\OpenAPI\Models\Operations\ListEngagementRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListEngagementSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListEngagementResponse
    {
        $baseUrl = SDK::LIST_ENGAGEMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements', \OpenAPI\OpenAPI\Models\Operations\ListEngagementRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListEngagementRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListEngagementResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listEngagementResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListEngagementListEngagementResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Executions for the Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExecutionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListExecutionResponse
     */
	public function listExecution(
        \OpenAPI\OpenAPI\Models\Operations\ListExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListExecutionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListExecutionResponse
    {
        $baseUrl = SDK::LIST_EXECUTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions', \OpenAPI\OpenAPI\Models\Operations\ListExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListExecutionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListExecutionListExecutionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Steps for an Execution.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepResponse
     */
	public function listExecutionStep(
        \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepResponse
    {
        $baseUrl = SDK::LIST_EXECUTION_STEP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{ExecutionSid}/Steps', \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListExecutionStepRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListExecutionStepResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExecutionStepResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListExecutionStepListExecutionStepResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Flows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFlowResponse
     */
	public function listFlow(
        \OpenAPI\OpenAPI\Models\Operations\ListFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFlowSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFlowResponse
    {
        $baseUrl = SDK::LIST_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFlowResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFlowListFlowResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all Steps for an Engagement.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListStepRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListStepSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListStepResponse
     */
	public function listStep(
        \OpenAPI\OpenAPI\Models\Operations\ListStepRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListStepSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListStepResponse
    {
        $baseUrl = SDK::LIST_STEP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Engagements/{EngagementSid}/Steps', \OpenAPI\OpenAPI\Models\Operations\ListStepRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListStepRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListStepResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listStepResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListStepListStepResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the status of an Execution to `ended`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionResponse
     */
	public function updateExecution(
        \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionSecurity $security,
        ?string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionResponse
    {
        $baseUrl = SDK::UPDATE_EXECUTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Flows/{FlowSid}/Executions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateExecutionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->studioV1FlowExecution = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\StudioV1FlowExecution', 'json');
            }
        }

        return $response;
    }
}