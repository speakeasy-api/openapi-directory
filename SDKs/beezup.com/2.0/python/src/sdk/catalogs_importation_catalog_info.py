"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CatalogsImportationCatalogInfo:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def importation_configure_catalog_column(self, request: operations.ImportationConfigureCatalogColumnRequest) -> operations.ImportationConfigureCatalogColumnResponse:
        r"""Configure catalog column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationConfigureCatalogColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "configure_catalog_column_catalog_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationConfigureCatalogColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_delete_custom_column(self, request: operations.ImportationDeleteCustomColumnRequest) -> operations.ImportationDeleteCustomColumnResponse:
        r"""Delete Custom Column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationDeleteCustomColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationDeleteCustomColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_get_custom_column_expression(self, request: operations.ImportationGetCustomColumnExpressionRequest) -> operations.ImportationGetCustomColumnExpressionResponse:
        r"""Get the encrypted custom column expression in this importation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationGetCustomColumnExpressionRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationGetCustomColumnExpressionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.importation_get_custom_column_expression_200_application_json_string = http_res.content
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_get_custom_columns(self, request: operations.ImportationGetCustomColumnsRequest) -> operations.ImportationGetCustomColumnsResponse:
        r"""Get custom columns currently place in this importation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationGetCustomColumnsRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationGetCustomColumnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ImportationCustomColumnList])
                res.importation_custom_column_list = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_get_detected_catalog_columns(self, request: operations.ImportationGetDetectedCatalogColumnsRequest) -> operations.ImportationGetDetectedCatalogColumnsResponse:
        r"""Get detected catalog columns during this importation."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationGetDetectedCatalogColumnsRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationGetDetectedCatalogColumnsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DetectedCatalogColumnList])
                res.detected_catalog_column_list = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_get_product_sample(self, request: operations.ImportationGetProductSampleRequest) -> operations.ImportationGetProductSampleResponse:
        r"""Get the product sample related to this importation with all columns (catalog and custom)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationGetProductSampleRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationGetProductSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ProductSample])
                res.product_sample = out
        elif http_res.status_code == 404:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_get_product_sample_custom_column_value(self, request: operations.ImportationGetProductSampleCustomColumnValueRequest) -> operations.ImportationGetProductSampleCustomColumnValueResponse:
        r"""Get product sample custom column value related to this importation.
        /!\ Use this operation only when you just changed the custom column expression and you want to get a precise the property value. Otherwise use the operation Importation_GetProductSample which will give you all property values
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationGetProductSampleCustomColumnValueRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationGetProductSampleCustomColumnValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                res.importation_get_product_sample_custom_column_value_200_application_json_string = http_res.content
        elif http_res.status_code == 404:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_ignore_column(self, request: operations.ImportationIgnoreColumnRequest) -> operations.ImportationIgnoreColumnResponse:
        r"""Ignore Column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationIgnoreColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationIgnoreColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_map_catalog_column(self, request: operations.ImportationMapCatalogColumnRequest) -> operations.ImportationMapCatalogColumnResponse:
        r"""Map catalog column to a BeezUP column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationMapCatalogColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "map_beez_up_column_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationMapCatalogColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_map_custom_column(self, request: operations.ImportationMapCustomColumnRequest) -> operations.ImportationMapCustomColumnResponse:
        r"""Map custom column to a BeezUP column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationMapCustomColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "map_beez_up_column_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationMapCustomColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_reattend_column(self, request: operations.ImportationReattendColumnRequest) -> operations.ImportationReattendColumnResponse:
        r"""Reattend Column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationReattendColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationReattendColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_save_custom_column(self, request: operations.ImportationSaveCustomColumnRequest) -> operations.ImportationSaveCustomColumnResponse:
        r"""Create or replace a custom column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationSaveCustomColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "change_custom_column_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationSaveCustomColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_unmap_catalog_column(self, request: operations.ImportationUnmapCatalogColumnRequest) -> operations.ImportationUnmapCatalogColumnResponse:
        r"""Unmap catalog column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationUnmapCatalogColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationUnmapCatalogColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    def importation_unmap_custom_column(self, request: operations.ImportationUnmapCustomColumnRequest) -> operations.ImportationUnmapCustomColumnResponse:
        r"""Unmap custom column"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ImportationUnmapCustomColumnRequest, base_url, '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ImportationUnmapCustomColumnResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BeezUPCommonErrorResponseMessage])
                res.beez_up_common_error_response_message = out

        return res

    