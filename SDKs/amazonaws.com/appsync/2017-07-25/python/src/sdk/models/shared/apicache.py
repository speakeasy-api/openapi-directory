"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apicachestatus_enum as shared_apicachestatus_enum
from ..shared import apicachetype_enum as shared_apicachetype_enum
from ..shared import apicachingbehavior_enum as shared_apicachingbehavior_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APICache:
    r"""The <code>ApiCache</code> object."""
    
    api_caching_behavior: Optional[shared_apicachingbehavior_enum.APICachingBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiCachingBehavior'), 'exclude': lambda f: f is None }})  
    at_rest_encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('atRestEncryptionEnabled'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_apicachestatus_enum.APICacheStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    transit_encryption_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transitEncryptionEnabled'), 'exclude': lambda f: f is None }})  
    ttl: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ttl'), 'exclude': lambda f: f is None }})  
    type: Optional[shared_apicachetype_enum.APICacheTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    