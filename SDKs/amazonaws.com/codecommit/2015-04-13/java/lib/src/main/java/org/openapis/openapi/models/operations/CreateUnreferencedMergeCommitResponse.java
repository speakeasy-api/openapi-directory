/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.net.http.HttpResponse;

public class CreateUnreferencedMergeCommitResponse {
    /**
     * CommitDoesNotExistException
     */
    
    public Object commitDoesNotExistException;

    public CreateUnreferencedMergeCommitResponse withCommitDoesNotExistException(Object commitDoesNotExistException) {
        this.commitDoesNotExistException = commitDoesNotExistException;
        return this;
    }
    
    /**
     * CommitMessageLengthExceededException
     */
    
    public Object commitMessageLengthExceededException;

    public CreateUnreferencedMergeCommitResponse withCommitMessageLengthExceededException(Object commitMessageLengthExceededException) {
        this.commitMessageLengthExceededException = commitMessageLengthExceededException;
        return this;
    }
    
    /**
     * CommitRequiredException
     */
    
    public Object commitRequiredException;

    public CreateUnreferencedMergeCommitResponse withCommitRequiredException(Object commitRequiredException) {
        this.commitRequiredException = commitRequiredException;
        return this;
    }
    
    /**
     * ConcurrentReferenceUpdateException
     */
    
    public Object concurrentReferenceUpdateException;

    public CreateUnreferencedMergeCommitResponse withConcurrentReferenceUpdateException(Object concurrentReferenceUpdateException) {
        this.concurrentReferenceUpdateException = concurrentReferenceUpdateException;
        return this;
    }
    
    
    public String contentType;

    public CreateUnreferencedMergeCommitResponse withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * Success
     */
    
    public org.openapis.openapi.models.shared.CreateUnreferencedMergeCommitOutput createUnreferencedMergeCommitOutput;

    public CreateUnreferencedMergeCommitResponse withCreateUnreferencedMergeCommitOutput(org.openapis.openapi.models.shared.CreateUnreferencedMergeCommitOutput createUnreferencedMergeCommitOutput) {
        this.createUnreferencedMergeCommitOutput = createUnreferencedMergeCommitOutput;
        return this;
    }
    
    /**
     * EncryptionIntegrityChecksFailedException
     */
    
    public Object encryptionIntegrityChecksFailedException;

    public CreateUnreferencedMergeCommitResponse withEncryptionIntegrityChecksFailedException(Object encryptionIntegrityChecksFailedException) {
        this.encryptionIntegrityChecksFailedException = encryptionIntegrityChecksFailedException;
        return this;
    }
    
    /**
     * EncryptionKeyAccessDeniedException
     */
    
    public Object encryptionKeyAccessDeniedException;

    public CreateUnreferencedMergeCommitResponse withEncryptionKeyAccessDeniedException(Object encryptionKeyAccessDeniedException) {
        this.encryptionKeyAccessDeniedException = encryptionKeyAccessDeniedException;
        return this;
    }
    
    /**
     * EncryptionKeyDisabledException
     */
    
    public Object encryptionKeyDisabledException;

    public CreateUnreferencedMergeCommitResponse withEncryptionKeyDisabledException(Object encryptionKeyDisabledException) {
        this.encryptionKeyDisabledException = encryptionKeyDisabledException;
        return this;
    }
    
    /**
     * EncryptionKeyNotFoundException
     */
    
    public Object encryptionKeyNotFoundException;

    public CreateUnreferencedMergeCommitResponse withEncryptionKeyNotFoundException(Object encryptionKeyNotFoundException) {
        this.encryptionKeyNotFoundException = encryptionKeyNotFoundException;
        return this;
    }
    
    /**
     * EncryptionKeyUnavailableException
     */
    
    public Object encryptionKeyUnavailableException;

    public CreateUnreferencedMergeCommitResponse withEncryptionKeyUnavailableException(Object encryptionKeyUnavailableException) {
        this.encryptionKeyUnavailableException = encryptionKeyUnavailableException;
        return this;
    }
    
    /**
     * FileContentSizeLimitExceededException
     */
    
    public Object fileContentSizeLimitExceededException;

    public CreateUnreferencedMergeCommitResponse withFileContentSizeLimitExceededException(Object fileContentSizeLimitExceededException) {
        this.fileContentSizeLimitExceededException = fileContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * FileModeRequiredException
     */
    
    public Object fileModeRequiredException;

    public CreateUnreferencedMergeCommitResponse withFileModeRequiredException(Object fileModeRequiredException) {
        this.fileModeRequiredException = fileModeRequiredException;
        return this;
    }
    
    /**
     * FolderContentSizeLimitExceededException
     */
    
    public Object folderContentSizeLimitExceededException;

    public CreateUnreferencedMergeCommitResponse withFolderContentSizeLimitExceededException(Object folderContentSizeLimitExceededException) {
        this.folderContentSizeLimitExceededException = folderContentSizeLimitExceededException;
        return this;
    }
    
    /**
     * InvalidCommitException
     */
    
    public Object invalidCommitException;

    public CreateUnreferencedMergeCommitResponse withInvalidCommitException(Object invalidCommitException) {
        this.invalidCommitException = invalidCommitException;
        return this;
    }
    
    /**
     * InvalidConflictDetailLevelException
     */
    
    public Object invalidConflictDetailLevelException;

    public CreateUnreferencedMergeCommitResponse withInvalidConflictDetailLevelException(Object invalidConflictDetailLevelException) {
        this.invalidConflictDetailLevelException = invalidConflictDetailLevelException;
        return this;
    }
    
    /**
     * InvalidConflictResolutionException
     */
    
    public Object invalidConflictResolutionException;

    public CreateUnreferencedMergeCommitResponse withInvalidConflictResolutionException(Object invalidConflictResolutionException) {
        this.invalidConflictResolutionException = invalidConflictResolutionException;
        return this;
    }
    
    /**
     * InvalidConflictResolutionStrategyException
     */
    
    public Object invalidConflictResolutionStrategyException;

    public CreateUnreferencedMergeCommitResponse withInvalidConflictResolutionStrategyException(Object invalidConflictResolutionStrategyException) {
        this.invalidConflictResolutionStrategyException = invalidConflictResolutionStrategyException;
        return this;
    }
    
    /**
     * InvalidEmailException
     */
    
    public Object invalidEmailException;

    public CreateUnreferencedMergeCommitResponse withInvalidEmailException(Object invalidEmailException) {
        this.invalidEmailException = invalidEmailException;
        return this;
    }
    
    /**
     * InvalidFileModeException
     */
    
    public Object invalidFileModeException;

    public CreateUnreferencedMergeCommitResponse withInvalidFileModeException(Object invalidFileModeException) {
        this.invalidFileModeException = invalidFileModeException;
        return this;
    }
    
    /**
     * InvalidMergeOptionException
     */
    
    public Object invalidMergeOptionException;

    public CreateUnreferencedMergeCommitResponse withInvalidMergeOptionException(Object invalidMergeOptionException) {
        this.invalidMergeOptionException = invalidMergeOptionException;
        return this;
    }
    
    /**
     * InvalidPathException
     */
    
    public Object invalidPathException;

    public CreateUnreferencedMergeCommitResponse withInvalidPathException(Object invalidPathException) {
        this.invalidPathException = invalidPathException;
        return this;
    }
    
    /**
     * InvalidReplacementContentException
     */
    
    public Object invalidReplacementContentException;

    public CreateUnreferencedMergeCommitResponse withInvalidReplacementContentException(Object invalidReplacementContentException) {
        this.invalidReplacementContentException = invalidReplacementContentException;
        return this;
    }
    
    /**
     * InvalidReplacementTypeException
     */
    
    public Object invalidReplacementTypeException;

    public CreateUnreferencedMergeCommitResponse withInvalidReplacementTypeException(Object invalidReplacementTypeException) {
        this.invalidReplacementTypeException = invalidReplacementTypeException;
        return this;
    }
    
    /**
     * InvalidRepositoryNameException
     */
    
    public Object invalidRepositoryNameException;

    public CreateUnreferencedMergeCommitResponse withInvalidRepositoryNameException(Object invalidRepositoryNameException) {
        this.invalidRepositoryNameException = invalidRepositoryNameException;
        return this;
    }
    
    /**
     * ManualMergeRequiredException
     */
    
    public Object manualMergeRequiredException;

    public CreateUnreferencedMergeCommitResponse withManualMergeRequiredException(Object manualMergeRequiredException) {
        this.manualMergeRequiredException = manualMergeRequiredException;
        return this;
    }
    
    /**
     * MaximumConflictResolutionEntriesExceededException
     */
    
    public Object maximumConflictResolutionEntriesExceededException;

    public CreateUnreferencedMergeCommitResponse withMaximumConflictResolutionEntriesExceededException(Object maximumConflictResolutionEntriesExceededException) {
        this.maximumConflictResolutionEntriesExceededException = maximumConflictResolutionEntriesExceededException;
        return this;
    }
    
    /**
     * MaximumFileContentToLoadExceededException
     */
    
    public Object maximumFileContentToLoadExceededException;

    public CreateUnreferencedMergeCommitResponse withMaximumFileContentToLoadExceededException(Object maximumFileContentToLoadExceededException) {
        this.maximumFileContentToLoadExceededException = maximumFileContentToLoadExceededException;
        return this;
    }
    
    /**
     * MaximumItemsToCompareExceededException
     */
    
    public Object maximumItemsToCompareExceededException;

    public CreateUnreferencedMergeCommitResponse withMaximumItemsToCompareExceededException(Object maximumItemsToCompareExceededException) {
        this.maximumItemsToCompareExceededException = maximumItemsToCompareExceededException;
        return this;
    }
    
    /**
     * MergeOptionRequiredException
     */
    
    public Object mergeOptionRequiredException;

    public CreateUnreferencedMergeCommitResponse withMergeOptionRequiredException(Object mergeOptionRequiredException) {
        this.mergeOptionRequiredException = mergeOptionRequiredException;
        return this;
    }
    
    /**
     * MultipleConflictResolutionEntriesException
     */
    
    public Object multipleConflictResolutionEntriesException;

    public CreateUnreferencedMergeCommitResponse withMultipleConflictResolutionEntriesException(Object multipleConflictResolutionEntriesException) {
        this.multipleConflictResolutionEntriesException = multipleConflictResolutionEntriesException;
        return this;
    }
    
    /**
     * NameLengthExceededException
     */
    
    public Object nameLengthExceededException;

    public CreateUnreferencedMergeCommitResponse withNameLengthExceededException(Object nameLengthExceededException) {
        this.nameLengthExceededException = nameLengthExceededException;
        return this;
    }
    
    /**
     * PathRequiredException
     */
    
    public Object pathRequiredException;

    public CreateUnreferencedMergeCommitResponse withPathRequiredException(Object pathRequiredException) {
        this.pathRequiredException = pathRequiredException;
        return this;
    }
    
    /**
     * ReplacementContentRequiredException
     */
    
    public Object replacementContentRequiredException;

    public CreateUnreferencedMergeCommitResponse withReplacementContentRequiredException(Object replacementContentRequiredException) {
        this.replacementContentRequiredException = replacementContentRequiredException;
        return this;
    }
    
    /**
     * ReplacementTypeRequiredException
     */
    
    public Object replacementTypeRequiredException;

    public CreateUnreferencedMergeCommitResponse withReplacementTypeRequiredException(Object replacementTypeRequiredException) {
        this.replacementTypeRequiredException = replacementTypeRequiredException;
        return this;
    }
    
    /**
     * RepositoryDoesNotExistException
     */
    
    public Object repositoryDoesNotExistException;

    public CreateUnreferencedMergeCommitResponse withRepositoryDoesNotExistException(Object repositoryDoesNotExistException) {
        this.repositoryDoesNotExistException = repositoryDoesNotExistException;
        return this;
    }
    
    /**
     * RepositoryNameRequiredException
     */
    
    public Object repositoryNameRequiredException;

    public CreateUnreferencedMergeCommitResponse withRepositoryNameRequiredException(Object repositoryNameRequiredException) {
        this.repositoryNameRequiredException = repositoryNameRequiredException;
        return this;
    }
    
    
    public Integer statusCode;

    public CreateUnreferencedMergeCommitResponse withStatusCode(Integer statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    
    public HttpResponse<byte[]> rawResponse;

    public CreateUnreferencedMergeCommitResponse withRawResponse(HttpResponse<byte[]> rawResponse) {
        this.rawResponse = rawResponse;
        return this;
    }
    
    /**
     * TipsDivergenceExceededException
     */
    
    public Object tipsDivergenceExceededException;

    public CreateUnreferencedMergeCommitResponse withTipsDivergenceExceededException(Object tipsDivergenceExceededException) {
        this.tipsDivergenceExceededException = tipsDivergenceExceededException;
        return this;
    }
    
    public CreateUnreferencedMergeCommitResponse(@JsonProperty("ContentType") String contentType, @JsonProperty("StatusCode") Integer statusCode) {
        this.contentType = contentType;
        this.statusCode = statusCode;
  }
}
