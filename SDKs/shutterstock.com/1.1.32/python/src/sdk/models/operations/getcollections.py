"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import catalogcollectiondatalist as shared_catalogcollectiondatalist
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetCollectionsSecurity:
    
    customer_access_code: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class GetCollectionsSortEnum(str, Enum):
    r"""Sort by"""
    NEWEST = 'newest'
    OLDEST = 'oldest'


@dataclasses.dataclass
class GetCollectionsRequest:
    
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    shared: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'shared', 'style': 'form', 'explode': True }})
    r"""Set to true to omit collections that you own and return only collections  that are shared with you"""  
    sort: Optional[GetCollectionsSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by"""  
    

@dataclasses.dataclass
class GetCollectionsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    catalog_collection_data_list: Optional[shared_catalogcollectiondatalist.CatalogCollectionDataList] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    