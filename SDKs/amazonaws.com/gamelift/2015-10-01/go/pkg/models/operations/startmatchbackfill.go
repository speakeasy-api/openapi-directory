// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// StartMatchBackfillXAmzTargetEnum
type StartMatchBackfillXAmzTargetEnum string

const (
	StartMatchBackfillXAmzTargetEnumGameLiftStartMatchBackfill StartMatchBackfillXAmzTargetEnum = "GameLift.StartMatchBackfill"
)

func (e StartMatchBackfillXAmzTargetEnum) ToPointer() *StartMatchBackfillXAmzTargetEnum {
	return &e
}

func (e *StartMatchBackfillXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GameLift.StartMatchBackfill":
		*e = StartMatchBackfillXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StartMatchBackfillXAmzTargetEnum: %v", v)
	}
}

type StartMatchBackfillRequest struct {
	StartMatchBackfillInput shared.StartMatchBackfillInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              StartMatchBackfillXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type StartMatchBackfillResponse struct {
	ContentType string
	// InternalServiceException
	InternalServiceException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// NotFoundException
	NotFoundException interface{}
	// Success
	StartMatchBackfillOutput *shared.StartMatchBackfillOutput
	StatusCode               int
	RawResponse              *http.Response
	// UnsupportedRegionException
	UnsupportedRegionException interface{}
}
