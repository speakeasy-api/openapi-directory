// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type WtrblSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type WtrblRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Registration Number
	RegNum string `json:"RegNum"`
	// Aadhaar number
	UID string `json:"UID"`
}

// WtrblRequestBodyFormatEnum - The format of the certificate in response.
type WtrblRequestBodyFormatEnum string

const (
	WtrblRequestBodyFormatEnumPdf WtrblRequestBodyFormatEnum = "pdf"
)

func (e *WtrblRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = WtrblRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WtrblRequestBodyFormatEnum: %s", s)
	}
}

// WtrblRequestBody - Request format
type WtrblRequestBody struct {
	CertificateParameters *WtrblRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format WtrblRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type WtrblRequest struct {
	// Request format
	Request  *WtrblRequestBody `request:"mediaType=application/json"`
	Security WtrblSecurity
}

type Wtrbl504ApplicationJSONErrorEnum string

const (
	Wtrbl504ApplicationJSONErrorEnumGatewayTimeout Wtrbl504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Wtrbl504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Wtrbl504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl504ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl504ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Wtrbl504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Wtrbl504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Wtrbl504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl504ApplicationJSON - Gateway timeout
type Wtrbl504ApplicationJSON struct {
	Error            *Wtrbl504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl503ApplicationJSONErrorEnum string

const (
	Wtrbl503ApplicationJSONErrorEnumServiceUnavailable Wtrbl503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Wtrbl503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Wtrbl503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl503ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl503ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Wtrbl503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Wtrbl503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Wtrbl503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl503ApplicationJSON - Service unavailable
type Wtrbl503ApplicationJSON struct {
	Error            *Wtrbl503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl502ApplicationJSONErrorEnum string

const (
	Wtrbl502ApplicationJSONErrorEnumBadGatewy Wtrbl502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Wtrbl502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Wtrbl502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl502ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl502ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Wtrbl502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Wtrbl502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Wtrbl502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl502ApplicationJSON - Bad gateway
type Wtrbl502ApplicationJSON struct {
	Error            *Wtrbl502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl500ApplicationJSONErrorEnum string

const (
	Wtrbl500ApplicationJSONErrorEnumInternalServerError Wtrbl500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Wtrbl500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Wtrbl500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl500ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl500ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl500ApplicationJSONErrorDescriptionEnumInternalServerError Wtrbl500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Wtrbl500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Wtrbl500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl500ApplicationJSON - Internal server error
type Wtrbl500ApplicationJSON struct {
	Error            *Wtrbl500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl404ApplicationJSONErrorEnum string

const (
	Wtrbl404ApplicationJSONErrorEnumRecordNotFound Wtrbl404ApplicationJSONErrorEnum = "record_not_found"
	Wtrbl404ApplicationJSONErrorEnumURLNotFound    Wtrbl404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Wtrbl404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Wtrbl404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl404ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl404ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl404ApplicationJSONErrorDescriptionEnumNoRecordFound               Wtrbl404ApplicationJSONErrorDescriptionEnum = "No record found"
	Wtrbl404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Wtrbl404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Wtrbl404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Wtrbl404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl404ApplicationJSON - No record found
type Wtrbl404ApplicationJSON struct {
	Error            *Wtrbl404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl401ApplicationJSONErrorEnum string

const (
	Wtrbl401ApplicationJSONErrorEnumInvalidAuthentication Wtrbl401ApplicationJSONErrorEnum = "invalid_authentication"
	Wtrbl401ApplicationJSONErrorEnumInvalidAuthorization  Wtrbl401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Wtrbl401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Wtrbl401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl401ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl401ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Wtrbl401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Wtrbl401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Wtrbl401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Wtrbl401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Wtrbl401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl401ApplicationJSON - Unauthorized access
type Wtrbl401ApplicationJSON struct {
	Error            *Wtrbl401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Wtrbl400ApplicationJSONErrorEnum string

const (
	Wtrbl400ApplicationJSONErrorEnumMissingParameter Wtrbl400ApplicationJSONErrorEnum = "missing_parameter"
	Wtrbl400ApplicationJSONErrorEnumInvalidParameter Wtrbl400ApplicationJSONErrorEnum = "invalid_parameter"
	Wtrbl400ApplicationJSONErrorEnumInvalidFormat    Wtrbl400ApplicationJSONErrorEnum = "invalid_format"
	Wtrbl400ApplicationJSONErrorEnumInvalidTxnid     Wtrbl400ApplicationJSONErrorEnum = "invalid_txnid"
	Wtrbl400ApplicationJSONErrorEnumInvalidConsentid Wtrbl400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Wtrbl400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Wtrbl400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl400ApplicationJSONErrorEnum: %s", s)
	}
}

type Wtrbl400ApplicationJSONErrorDescriptionEnum string

const (
	Wtrbl400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Wtrbl400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Wtrbl400ApplicationJSONErrorDescriptionEnumBadRequest                              Wtrbl400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Wtrbl400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Wtrbl400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Wtrbl400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Wtrbl400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Wtrbl400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Wtrbl400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Wtrbl400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Wtrbl400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Wtrbl400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Wtrbl400ApplicationJSON - Bad request
type Wtrbl400ApplicationJSON struct {
	Error            *Wtrbl400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Wtrbl400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type WtrblResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Wtrbl400ApplicationJSONObject *Wtrbl400ApplicationJSON
	// Unauthorized access
	Wtrbl401ApplicationJSONObject *Wtrbl401ApplicationJSON
	// No record found
	Wtrbl404ApplicationJSONObject *Wtrbl404ApplicationJSON
	// Internal server error
	Wtrbl500ApplicationJSONObject *Wtrbl500ApplicationJSON
	// Bad gateway
	Wtrbl502ApplicationJSONObject *Wtrbl502ApplicationJSON
	// Service unavailable
	Wtrbl503ApplicationJSONObject *Wtrbl503ApplicationJSON
	// Gateway timeout
	Wtrbl504ApplicationJSONObject *Wtrbl504ApplicationJSON
}
