// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// PostNetworksCreateNetworkRequestLabels - User-defined labels (key-value pairs)
type PostNetworksCreateNetworkRequestLabels struct {
	// New label
	Labelkey *string `json:"labelkey,omitempty"`
}

type PostNetworksCreateNetworkRequestRoutes struct {
	// Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
	Destination string `json:"destination"`
	// Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
	Gateway string `json:"gateway"`
}

// PostNetworksCreateNetworkRequestSubnetsTypeEnum - Type of Subnetwork
type PostNetworksCreateNetworkRequestSubnetsTypeEnum string

const (
	PostNetworksCreateNetworkRequestSubnetsTypeEnumCloud   PostNetworksCreateNetworkRequestSubnetsTypeEnum = "cloud"
	PostNetworksCreateNetworkRequestSubnetsTypeEnumServer  PostNetworksCreateNetworkRequestSubnetsTypeEnum = "server"
	PostNetworksCreateNetworkRequestSubnetsTypeEnumVswitch PostNetworksCreateNetworkRequestSubnetsTypeEnum = "vswitch"
)

func (e *PostNetworksCreateNetworkRequestSubnetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cloud":
		fallthrough
	case "server":
		fallthrough
	case "vswitch":
		*e = PostNetworksCreateNetworkRequestSubnetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNetworksCreateNetworkRequestSubnetsTypeEnum: %s", s)
	}
}

type PostNetworksCreateNetworkRequestSubnets struct {
	// Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
	IPRange *string `json:"ip_range,omitempty"`
	// Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.
	NetworkZone string `json:"network_zone"`
	// Type of Subnetwork
	Type PostNetworksCreateNetworkRequestSubnetsTypeEnum `json:"type"`
}

type PostNetworksCreateNetworkRequest struct {
	// IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.
	IPRange string `json:"ip_range"`
	// User-defined labels (key-value pairs)
	Labels *PostNetworksCreateNetworkRequestLabels `json:"labels,omitempty"`
	// Name of the network
	Name string `json:"name"`
	// Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1.
	Routes []PostNetworksCreateNetworkRequestRoutes `json:"routes,omitempty"`
	// Array of subnets allocated.
	Subnets []PostNetworksCreateNetworkRequestSubnets `json:"subnets,omitempty"`
}

type PostNetworksRequest struct {
	Request *PostNetworksCreateNetworkRequest `request:"mediaType=application/json"`
}

// PostNetworks201ApplicationJSONNetworkProtection - Protection configuration for the Network
type PostNetworks201ApplicationJSONNetworkProtection struct {
	// If true, prevents the Network from being deleted
	Delete bool `json:"delete"`
}

type PostNetworks201ApplicationJSONNetworkRoutes struct {
	// Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
	Destination string `json:"destination"`
	// Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
	Gateway string `json:"gateway"`
}

// PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum - Type of Subnetwork
type PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum string

const (
	PostNetworks201ApplicationJSONNetworkSubnetsTypeEnumCloud   PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum = "cloud"
	PostNetworks201ApplicationJSONNetworkSubnetsTypeEnumServer  PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum = "server"
	PostNetworks201ApplicationJSONNetworkSubnetsTypeEnumVswitch PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum = "vswitch"
)

func (e *PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "cloud":
		fallthrough
	case "server":
		fallthrough
	case "vswitch":
		*e = PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum: %s", s)
	}
}

type PostNetworks201ApplicationJSONNetworkSubnets struct {
	// Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
	Gateway string `json:"gateway"`
	// Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
	IPRange *string `json:"ip_range,omitempty"`
	// Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.
	NetworkZone string `json:"network_zone"`
	// Type of Subnetwork
	Type PostNetworks201ApplicationJSONNetworkSubnetsTypeEnum `json:"type"`
}

type PostNetworks201ApplicationJSONNetwork struct {
	// Point in time when the Network was created (in ISO-8601 format)
	Created string `json:"created"`
	// ID of the Network
	ID int64 `json:"id"`
	// IPv4 prefix of the whole Network
	IPRange string `json:"ip_range"`
	// User-defined labels (key-value pairs)
	Labels map[string]interface{} `json:"labels"`
	// Array of IDs of Load Balancers attached to this Network
	LoadBalancers []int64 `json:"load_balancers,omitempty"`
	// Name of the Network
	Name string `json:"name"`
	// Protection configuration for the Network
	Protection PostNetworks201ApplicationJSONNetworkProtection `json:"protection"`
	// Array of routes set in this Network
	Routes []PostNetworks201ApplicationJSONNetworkRoutes `json:"routes"`
	// Array of IDs of Servers attached to this Network
	Servers []int64 `json:"servers"`
	// Array subnets allocated in this Network
	Subnets []PostNetworks201ApplicationJSONNetworkSubnets `json:"subnets"`
}

// PostNetworks201ApplicationJSON - The `network` key contains the network that was just created
type PostNetworks201ApplicationJSON struct {
	Network *PostNetworks201ApplicationJSONNetwork `json:"network,omitempty"`
}

type PostNetworksResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `network` key contains the network that was just created
	PostNetworks201ApplicationJSONObject *PostNetworks201ApplicationJSON
}
