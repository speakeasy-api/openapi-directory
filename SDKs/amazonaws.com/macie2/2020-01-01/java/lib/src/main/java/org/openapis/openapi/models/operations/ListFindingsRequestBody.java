/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ListFindingsRequestBody {
    /**
     * Specifies, as a map, one or more property-based conditions that filter the results of a query for findings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("findingCriteria")
    public ListFindingsRequestBodyFindingCriteria findingCriteria;
    public ListFindingsRequestBody withFindingCriteria(ListFindingsRequestBodyFindingCriteria findingCriteria) {
        this.findingCriteria = findingCriteria;
        return this;
    }
    
    /**
     * The maximum number of items to include in each page of the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxResults")
    public Long maxResults;
    public ListFindingsRequestBody withMaxResults(Long maxResults) {
        this.maxResults = maxResults;
        return this;
    }
    
    /**
     * The nextToken string that specifies which page of results to return in a paginated response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nextToken")
    public String nextToken;
    public ListFindingsRequestBody withNextToken(String nextToken) {
        this.nextToken = nextToken;
        return this;
    }
    
    /**
     * Specifies criteria for sorting the results of a request for findings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sortCriteria")
    public ListFindingsRequestBodySortCriteria sortCriteria;
    public ListFindingsRequestBody withSortCriteria(ListFindingsRequestBodySortCriteria sortCriteria) {
        this.sortCriteria = sortCriteria;
        return this;
    }
    
}
