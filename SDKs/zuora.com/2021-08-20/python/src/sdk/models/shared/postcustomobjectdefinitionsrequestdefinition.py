"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import postcustomobjectdefinitionfielddefinitionrequest as shared_postcustomobjectdefinitionfielddefinitionrequest
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostCustomObjectDefinitionsRequestDefinitionRelationshipsCardinalityEnum(str, Enum):
    r"""The cardinality of the relationship from this object to another object.
    
    Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
    
    A custom object definition can have a maximum of 2 `manyToOne` relationships.
    """
    MANY_TO_ONE = 'manyToOne'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCustomObjectDefinitionsRequestDefinitionRelationshipsRecordConstraintsCreate:
    
    enforce_valid_mapping: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enforceValidMapping'), 'exclude': lambda f: f is None }})
    r"""Specifies whether Zuora validates the values of mapped fields
    in custom object records.
    
    By default, Zuora validates the values of mapped fields
    in custom object records. For example, if the
    custom object definition has a field called `AccountId__c`
    that is mapped to the `Id` field of the `account` object,
    Zuora verifies that the value of `AccountId__c` is a valid
    account ID when a custom object record is created.
    If the value of `AccountId__c` is not a valid account ID,
    the operation fails.
    """  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCustomObjectDefinitionsRequestDefinitionRelationshipsRecordConstraints:
    r"""Specifies contraints to apply to custom object records."""
    
    create: Optional[PostCustomObjectDefinitionsRequestDefinitionRelationshipsRecordConstraintsCreate] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('create'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCustomObjectDefinitionsRequestDefinitionRelationships:
    
    fields_: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields') }})
    r"""Field mappings in the form of `<this-object-field-name>`: `<other-object-field-name>`. Usually the `<other-object-field-name>` can only be the `Id` field of the related object. Two exceptions are Subscription Name and Rate Plan Charge Number as both of them are unique."""  
    namespace: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('namespace') }})
    r"""The namespace where the related object is located"""  
    object: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The API name of the related object"""  
    cardinality: Optional[PostCustomObjectDefinitionsRequestDefinitionRelationshipsCardinalityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cardinality'), 'exclude': lambda f: f is None }})
    r"""The cardinality of the relationship from this object to another object.
    
    Only the `manyToOne` cardinality can be used when creating relationships.  A relationship with `oneToMany` cardinality is created implicitly when a `manyToOne` relationship is created.
    
    A custom object definition can have a maximum of 2 `manyToOne` relationships.
    """  
    record_constraints: Optional[PostCustomObjectDefinitionsRequestDefinitionRelationshipsRecordConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recordConstraints'), 'exclude': lambda f: f is None }})
    r"""Specifies contraints to apply to custom object records."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCustomObjectDefinitionsRequestDefinition:
    
    label: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})
    r"""A UI label for the custom object"""  
    object: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The API name of the custom object"""  
    filterable: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('filterable'), 'exclude': lambda f: f is None }})
    r"""The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable."""  
    properties: Optional[dict[str, shared_postcustomobjectdefinitionfielddefinitionrequest.PostCustomObjectDefinitionFieldDefinitionRequest]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})  
    relationships: Optional[list[PostCustomObjectDefinitionsRequestDefinitionRelationships]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relationships'), 'exclude': lambda f: f is None }})
    r"""An array of relationships with Zuora objects or other custom objects. You can add at most 2 `manyToOne` relationships when creating a custom field definition."""  
    required: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""The required fields of the custom object. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records."""  
    