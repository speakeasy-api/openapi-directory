// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type RscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type RscerRequestBodyCertificateParameters struct {
	// Full name
	FullName string `json:"FullName"`
	// Reference No
	RefNo string `json:"RefNo"`
	// Token No
	TokenNo string `json:"TokenNo"`
	// Aadhaar number
	UID string `json:"UID"`
}

// RscerRequestBodyFormatEnum - The format of the certificate in response.
type RscerRequestBodyFormatEnum string

const (
	RscerRequestBodyFormatEnumPdf RscerRequestBodyFormatEnum = "pdf"
)

func (e RscerRequestBodyFormatEnum) ToPointer() *RscerRequestBodyFormatEnum {
	return &e
}

func (e *RscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = RscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RscerRequestBodyFormatEnum: %v", v)
	}
}

// RscerRequestBody - Request format
type RscerRequestBody struct {
	CertificateParameters *RscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format RscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Rscer504ApplicationJSONErrorEnum string

const (
	Rscer504ApplicationJSONErrorEnumGatewayTimeout Rscer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Rscer504ApplicationJSONErrorEnum) ToPointer() *Rscer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Rscer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer504ApplicationJSONErrorDescriptionEnum string

const (
	Rscer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Rscer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Rscer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Rscer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer504ApplicationJSON - Gateway timeout
type Rscer504ApplicationJSON struct {
	Error            *Rscer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer503ApplicationJSONErrorEnum string

const (
	Rscer503ApplicationJSONErrorEnumServiceUnavailable Rscer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Rscer503ApplicationJSONErrorEnum) ToPointer() *Rscer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Rscer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer503ApplicationJSONErrorDescriptionEnum string

const (
	Rscer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Rscer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Rscer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Rscer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer503ApplicationJSON - Service unavailable
type Rscer503ApplicationJSON struct {
	Error            *Rscer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer502ApplicationJSONErrorEnum string

const (
	Rscer502ApplicationJSONErrorEnumBadGatewy Rscer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Rscer502ApplicationJSONErrorEnum) ToPointer() *Rscer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Rscer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer502ApplicationJSONErrorDescriptionEnum string

const (
	Rscer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Rscer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Rscer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Rscer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer502ApplicationJSON - Bad gateway
type Rscer502ApplicationJSON struct {
	Error            *Rscer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer500ApplicationJSONErrorEnum string

const (
	Rscer500ApplicationJSONErrorEnumInternalServerError Rscer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Rscer500ApplicationJSONErrorEnum) ToPointer() *Rscer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Rscer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer500ApplicationJSONErrorDescriptionEnum string

const (
	Rscer500ApplicationJSONErrorDescriptionEnumInternalServerError Rscer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Rscer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Rscer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer500ApplicationJSON - Internal server error
type Rscer500ApplicationJSON struct {
	Error            *Rscer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer404ApplicationJSONErrorEnum string

const (
	Rscer404ApplicationJSONErrorEnumRecordNotFound Rscer404ApplicationJSONErrorEnum = "record_not_found"
	Rscer404ApplicationJSONErrorEnumURLNotFound    Rscer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Rscer404ApplicationJSONErrorEnum) ToPointer() *Rscer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Rscer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer404ApplicationJSONErrorDescriptionEnum string

const (
	Rscer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Rscer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Rscer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Rscer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Rscer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Rscer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer404ApplicationJSON - No record found
type Rscer404ApplicationJSON struct {
	Error            *Rscer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer401ApplicationJSONErrorEnum string

const (
	Rscer401ApplicationJSONErrorEnumInvalidAuthentication Rscer401ApplicationJSONErrorEnum = "invalid_authentication"
	Rscer401ApplicationJSONErrorEnumInvalidAuthorization  Rscer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Rscer401ApplicationJSONErrorEnum) ToPointer() *Rscer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Rscer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer401ApplicationJSONErrorDescriptionEnum string

const (
	Rscer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Rscer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Rscer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Rscer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Rscer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Rscer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer401ApplicationJSON - Unauthorized access
type Rscer401ApplicationJSON struct {
	Error            *Rscer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Rscer400ApplicationJSONErrorEnum string

const (
	Rscer400ApplicationJSONErrorEnumMissingParameter Rscer400ApplicationJSONErrorEnum = "missing_parameter"
	Rscer400ApplicationJSONErrorEnumInvalidParameter Rscer400ApplicationJSONErrorEnum = "invalid_parameter"
	Rscer400ApplicationJSONErrorEnumInvalidFormat    Rscer400ApplicationJSONErrorEnum = "invalid_format"
	Rscer400ApplicationJSONErrorEnumInvalidTxnid     Rscer400ApplicationJSONErrorEnum = "invalid_txnid"
	Rscer400ApplicationJSONErrorEnumInvalidConsentid Rscer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Rscer400ApplicationJSONErrorEnum) ToPointer() *Rscer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Rscer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Rscer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Rscer400ApplicationJSONErrorDescriptionEnum string

const (
	Rscer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Rscer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Rscer400ApplicationJSONErrorDescriptionEnumBadRequest                              Rscer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Rscer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Rscer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Rscer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Rscer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Rscer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Rscer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Rscer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Rscer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Rscer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Rscer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Rscer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Rscer400ApplicationJSON - Bad request
type Rscer400ApplicationJSON struct {
	Error            *Rscer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Rscer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type RscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Rscer400ApplicationJSONObject *Rscer400ApplicationJSON
	// Unauthorized access
	Rscer401ApplicationJSONObject *Rscer401ApplicationJSON
	// No record found
	Rscer404ApplicationJSONObject *Rscer404ApplicationJSON
	// Internal server error
	Rscer500ApplicationJSONObject *Rscer500ApplicationJSON
	// Bad gateway
	Rscer502ApplicationJSONObject *Rscer502ApplicationJSON
	// Service unavailable
	Rscer503ApplicationJSONObject *Rscer503ApplicationJSON
	// Gateway timeout
	Rscer504ApplicationJSONObject *Rscer504ApplicationJSON
}
