"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class POSTTierType:
    
    price: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price') }})
    r"""Price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing."""  
    tier: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tier') }})
    r"""Unique number that identifies the tier that the price applies to."""  
    ending_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endingUnit'), 'exclude': lambda f: f is None }})
    r"""End number of a range of units for the tier."""  
    price_format: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormat'), 'exclude': lambda f: f is None }})
    r"""Indicates if pricing is a flat fee or is per unit.
    
    Values:
    
    * `FlatFee`
    * `PerUnit`
    """  
    starting_unit: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('startingUnit'), 'exclude': lambda f: f is None }})
    r"""Starting number of a range of units for the tier."""  
    