// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RoutingCurbsideStrictnessEnum - In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address).
type RoutingCurbsideStrictnessEnum string

const (
	RoutingCurbsideStrictnessEnumIgnore RoutingCurbsideStrictnessEnum = "ignore"
	RoutingCurbsideStrictnessEnumSoft   RoutingCurbsideStrictnessEnum = "soft"
	RoutingCurbsideStrictnessEnumStrict RoutingCurbsideStrictnessEnum = "strict"
)

func (e *RoutingCurbsideStrictnessEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ignore":
		fallthrough
	case "soft":
		fallthrough
	case "strict":
		*e = RoutingCurbsideStrictnessEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutingCurbsideStrictnessEnum: %s", s)
	}
}

// RoutingNetworkDataProviderEnum - specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles).
type RoutingNetworkDataProviderEnum string

const (
	RoutingNetworkDataProviderEnumOpenstreetmap RoutingNetworkDataProviderEnum = "openstreetmap"
	RoutingNetworkDataProviderEnumTomtom        RoutingNetworkDataProviderEnum = "tomtom"
)

func (e *RoutingNetworkDataProviderEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "openstreetmap":
		fallthrough
	case "tomtom":
		*e = RoutingNetworkDataProviderEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutingNetworkDataProviderEnum: %s", s)
	}
}

type RoutingSnapPreventionsEnum string

const (
	RoutingSnapPreventionsEnumMotorway RoutingSnapPreventionsEnum = "motorway"
	RoutingSnapPreventionsEnumTrunk    RoutingSnapPreventionsEnum = "trunk"
	RoutingSnapPreventionsEnumBridge   RoutingSnapPreventionsEnum = "bridge"
	RoutingSnapPreventionsEnumFord     RoutingSnapPreventionsEnum = "ford"
	RoutingSnapPreventionsEnumTunnel   RoutingSnapPreventionsEnum = "tunnel"
	RoutingSnapPreventionsEnumFerry    RoutingSnapPreventionsEnum = "ferry"
)

func (e *RoutingSnapPreventionsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "motorway":
		fallthrough
	case "trunk":
		fallthrough
	case "bridge":
		fallthrough
	case "ford":
		fallthrough
	case "tunnel":
		fallthrough
	case "ferry":
		*e = RoutingSnapPreventionsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RoutingSnapPreventionsEnum: %s", s)
	}
}

// Routing - This contains all routing specific configurations.
type Routing struct {
	// It lets you specify whether the API should provide you with route geometries for vehicle routes or not. Thus, you do not need to do extra routing to get the polyline for each route.
	CalcPoints *bool `json:"calc_points,omitempty"`
	// indicates whether historical traffic information should be considered
	ConsiderTraffic *bool `json:"consider_traffic,omitempty"`
	// In some cases curbside constraints cannot be fulfilled. For example in one-way streets you cannot arrive at a building that is on the left side of the street such that the building is to the right of you (unless you drove the one-way street the wrong/illegal way). You can set the `curbside_strictness` to `soft` to ignore the curbside constraint in such cases or set it to `strict` to get an error response instead. You can also set it to `ignore` to ignore all curbside constraints (this is useful to compare the results with and without constraints without modifying every single address).
	CurbsideStrictness *RoutingCurbsideStrictnessEnum `json:"curbside_strictness,omitempty"`
	// indicates whether matrix calculation should fail fast when points cannot be connected
	FailFast *bool `json:"fail_fast,omitempty"`
	// specifies the data provider, read more about it [here](#section/Map-Data-and-Routing-Profiles).
	NetworkDataProvider *RoutingNetworkDataProviderEnum `json:"network_data_provider,omitempty"`
	// Indicates whether a solution includes snapped waypoints. In contrary to the address coordinate a snapped waypoint is the access point to the (road) network.
	ReturnSnappedWaypoints *bool `json:"return_snapped_waypoints,omitempty"`
	// Prevents snapping locations to road links of specified road types, e.g. to motorway.
	SnapPreventions []RoutingSnapPreventionsEnum `json:"snap_preventions,omitempty"`
}
