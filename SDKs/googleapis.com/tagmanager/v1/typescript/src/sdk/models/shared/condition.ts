/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Parameter } from "./parameter";
import { Expose, Type } from "class-transformer";

/**
 * The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
 */
export enum ConditionTypeEnum {
  Equals = "equals",
  Contains = "contains",
  StartsWith = "startsWith",
  EndsWith = "endsWith",
  MatchRegex = "matchRegex",
  Greater = "greater",
  GreaterOrEquals = "greaterOrEquals",
  Less = "less",
  LessOrEquals = "lessOrEquals",
  CssSelector = "cssSelector",
  UrlMatches = "urlMatches",
}

/**
 * Represents a predicate.
 */
export class Condition extends SpeakeasyBase {
  /**
   * A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata({ elemType: Parameter })
  @Expose({ name: "parameter" })
  @Type(() => Parameter)
  parameter?: Parameter[];

  /**
   * The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ConditionTypeEnum;
}
