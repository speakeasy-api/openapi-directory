"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import consumptionavailabilitystatus_enum as shared_consumptionavailabilitystatus_enum
from ..shared import errorresponsemessage as shared_errorresponsemessage
from ..shared import subscriptionlinks as shared_subscriptionlinks
from ..shared import subscriptionstatus_enum as shared_subscriptionstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionIndex:
    r"""The subscription definition"""
    
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier of the subscription to the orders for a merchant"""  
    merchant_application_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantApplicationName') }})
    r"""The name of your application"""  
    merchant_application_version: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantApplicationVersion') }})
    r"""The version of your application"""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The subscription name you want to use"""  
    status: shared_subscriptionstatus_enum.SubscriptionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of your subscription"""  
    target_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetUrl') }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    consumer_health_status: Optional[shared_consumptionavailabilitystatus_enum.ConsumptionAvailabilityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerHealthStatus'), 'exclude': lambda f: f is None }})
    r"""The subscription consumption status"""  
    consumer_last_request_sent_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerLastRequestSentUri'), 'exclude': lambda f: f is None }})
    r"""The URL <a href=\\"https://en.wikipedia.org/wiki/URL\\">https://en.wikipedia.org/wiki/URL</a>"""  
    consumer_unvailable_since_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumerUnvailableSinceUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""This date indicates since when the subscription consumer is unavailable"""  
    last_error_message: Optional[shared_errorresponsemessage.ErrorResponseMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastErrorMessage'), 'exclude': lambda f: f is None }})  
    last_order_pushed_modification_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastOrderPushedModificationUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""This modification date correspond to the last order pushed by your subscription consumer"""  
    last_retry_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRetryUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The last date we retry to send orders"""  
    last_successful_order_pushed_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastSuccessfulOrderPushedUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date of the last pushed order successfully received by your subscription consumer"""  
    links: Optional[shared_subscriptionlinks.SubscriptionLinks] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('links'), 'exclude': lambda f: f is None }})  
    max_retry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxRetryCount'), 'exclude': lambda f: f is None }})
    r"""The maximum BeezUP will retry to push orders. When we the retry count will reach maximum retry count, the subscription will be deactivated."""  
    merchant_email_alert: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantEmailAlert'), 'exclude': lambda f: f is None }})
    r"""The email"""  
    next_scheduled_retry_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextScheduledRetryUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The next scheduled  date we retry to send orders"""  
    recover_begin_period_order_last_modification_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recoverBeginPeriodOrderLastModificationUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Recover existing orders using the begin period order last modification date. If not set then you will receive new/updated orders in real-time."""  
    recover_end_period_order_last_modification_utc_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recoverEndPeriodOrderLastModificationUtcDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Recover existing orders using the begin and the end period order last modification date.
    Otherwise, you will receive new/updated orders in real-time.
    """  
    retry_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryCount'), 'exclude': lambda f: f is None }})
    r"""The retry count. When we the retry count will reach maximum retry count, the subscription will be deactivated."""  
    