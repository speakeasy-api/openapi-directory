<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_ACCOUNT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_APPLICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_CALL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_CALL_FEEDBACK_SUMMARY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_CALL_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_INCOMING_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_INCOMING_PHONE_NUMBER_LOCAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_INCOMING_PHONE_NUMBER_MOBILE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_MESSAGE_FEEDBACK_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_NEW_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_NEW_SIGNING_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_PARTICIPANT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_PAYMENTS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_QUEUE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_CREDENTIAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_CREDENTIAL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_DOMAIN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIP_IP_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_SIPREC_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_STREAM_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_TOKEN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_USAGE_TRIGGER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_USER_DEFINED_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const CREATE_VALIDATION_REQUEST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_APPLICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_CALL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_CALL_FEEDBACK_SUMMARY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_CALL_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_CONFERENCE_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_INCOMING_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_MEDIA_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_OUTGOING_CALLER_ID_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_PARTICIPANT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_QUEUE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_RECORDING_ADD_ON_RESULT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_RECORDING_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIGNING_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_CREDENTIAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_CREDENTIAL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_DOMAIN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_SIP_IP_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_USAGE_TRIGGER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_ACCOUNT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_APPLICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_AUTHORIZED_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_BALANCE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CALL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CALL_FEEDBACK_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CALL_FEEDBACK_SUMMARY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CALL_NOTIFICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CALL_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CONFERENCE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CONFERENCE_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_INCOMING_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_MEDIA_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_MEMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_NOTIFICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_OUTGOING_CALLER_ID_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_PARTICIPANT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_QUEUE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_RECORDING_ADD_ON_RESULT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_RECORDING_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SHORT_CODE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIGNING_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_CREDENTIAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_CREDENTIAL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_DOMAIN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_SIP_IP_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const FETCH_USAGE_TRIGGER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_ACCOUNT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_APPLICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AUTHORIZED_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_LOCAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_MOBILE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_AVAILABLE_PHONE_NUMBER_VOIP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CALL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CALL_EVENT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CALL_NOTIFICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CALL_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CONFERENCE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CONFERENCE_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_DEPENDENT_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_LOCAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_MOBILE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_MEDIA_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_MEMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_NOTIFICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_OUTGOING_CALLER_ID_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_PARTICIPANT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_QUEUE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_RECORDING_ADD_ON_RESULT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_RECORDING_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SHORT_CODE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIGNING_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_CREDENTIAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_CREDENTIAL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_CREDENTIAL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_DOMAIN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_SIP_IP_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_TRANSCRIPTION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_ALL_TIME_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_DAILY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_LAST_MONTH_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_MONTHLY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_THIS_MONTH_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_TODAY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_YEARLY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_RECORD_YESTERDAY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const LIST_USAGE_TRIGGER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_ACCOUNT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_APPLICATION_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CALL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CALL_FEEDBACK_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CALL_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CONFERENCE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CONFERENCE_RECORDING_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_CONNECT_APP_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_INCOMING_PHONE_NUMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_MEMBER_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_MESSAGE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_OUTGOING_CALLER_ID_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_PARTICIPANT_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_PAYMENTS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_QUEUE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SHORT_CODE_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIGNING_KEY_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIP_CREDENTIAL_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIP_CREDENTIAL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIP_DOMAIN_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIP_IP_ADDRESS_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_SIPREC_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_STREAM_SERVERS = [
		'https://api.twilio.com',
	];
	
	public const UPDATE_USAGE_TRIGGER_SERVERS = [
		'https://api.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Create a new Twilio Subaccount from the account making the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountCreateAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAccountResponse
     */
	public function createAccount(
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountCreateAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAccountSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAccountResponse
    {
        $baseUrl = SDK::CREATE_ACCOUNT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts.json');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010Account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateAddressResponse
     */
	public function createAddress(
        \OpenAPI\OpenAPI\Models\Operations\CreateAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateAddressResponse
    {
        $baseUrl = SDK::CREATE_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses.json', \OpenAPI\OpenAPI\Models\Operations\CreateAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new application within your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateApplicationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateApplicationResponse
     */
	public function createApplication(
        \OpenAPI\OpenAPI\Models\Operations\CreateApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateApplicationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateApplicationResponse
    {
        $baseUrl = SDK::CREATE_APPLICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Applications.json', \OpenAPI\OpenAPI\Models\Operations\CreateApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCallResponse
     */
	public function createCall(
        \OpenAPI\OpenAPI\Models\Operations\CreateCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCallResponse
    {
        $baseUrl = SDK::CREATE_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls.json', \OpenAPI\OpenAPI\Models\Operations\CreateCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCall = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCall', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a FeedbackSummary resource for a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryResponse
     */
	public function createCallFeedbackSummary(
        \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummarySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryResponse
    {
        $baseUrl = SDK::CREATE_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json', \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCallFeedbackSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallFeedbackSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallFeedbackSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a recording for the call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingResponse
     */
	public function createCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingResponse
    {
        $baseUrl = SDK::CREATE_CALL_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json', \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Purchase a phone-number for the account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberResponse
     */
	public function createIncomingPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberResponse
    {
        $baseUrl = SDK::CREATE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json', \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Assign an Add-on installation to the Number specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnResponse
     */
	public function createIncomingPhoneNumberAssignedAddOn(
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnResponse
    {
        $baseUrl = SDK::CREATE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json', \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberAssignedAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createIncomingPhoneNumberLocal
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalResponse
     */
	public function createIncomingPhoneNumberLocal(
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalResponse
    {
        $baseUrl = SDK::CREATE_INCOMING_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json', \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberLocalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createIncomingPhoneNumberMobile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileResponse
     */
	public function createIncomingPhoneNumberMobile(
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileResponse
    {
        $baseUrl = SDK::CREATE_INCOMING_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json', \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberMobileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createIncomingPhoneNumberTollFree
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeResponse
     */
	public function createIncomingPhoneNumberTollFree(
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeResponse
    {
        $baseUrl = SDK::CREATE_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json', \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateIncomingPhoneNumberTollFreeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send a message from the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse
     */
	public function createMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse
    {
        $baseUrl = SDK::CREATE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages.json', \OpenAPI\OpenAPI\Models\Operations\CreateMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createMessageFeedback
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackResponse
     */
	public function createMessageFeedback(
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackResponse
    {
        $baseUrl = SDK::CREATE_MESSAGE_FEEDBACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json', \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateMessageFeedbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountMessageMessageFeedback = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountMessageMessageFeedback', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createNewKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyResponse
     */
	public function createNewKey(
        \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNewKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyResponse
    {
        $baseUrl = SDK::CREATE_NEW_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Keys.json', \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNewKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountNewKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountNewKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Signing Key for the account making the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyResponse
     */
	public function createNewSigningKey(
        \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyResponse
    {
        $baseUrl = SDK::CREATE_NEW_SIGNING_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SigningKeys.json', \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateNewSigningKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountNewSigningKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountNewSigningKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createParticipant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse
     */
	public function createParticipant(
        \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse
    {
        $baseUrl = SDK::CREATE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json', \OpenAPI\OpenAPI\Models\Operations\CreateParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConferenceParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConferenceParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * create an instance of payments. This will start a new payments session
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsResponse
     */
	public function createPayments(
        \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsResponse
    {
        $baseUrl = SDK::CREATE_PAYMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json', \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreatePaymentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallPayments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallPayments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateQueueResponse
     */
	public function createQueue(
        \OpenAPI\OpenAPI\Models\Operations\CreateQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateQueueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateQueueResponse
    {
        $baseUrl = SDK::CREATE_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues.json', \OpenAPI\OpenAPI\Models\Operations\CreateQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new credential list mapping resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingResponse
     */
	public function createSipAuthCallsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingResponse
    {
        $baseUrl = SDK::CREATE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new IP Access Control List mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingResponse
     */
	public function createSipAuthCallsIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::CREATE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthCallsIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new credential list mapping resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingResponse
     */
	public function createSipAuthRegistrationsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingResponse
    {
        $baseUrl = SDK::CREATE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipAuthRegistrationsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new credential resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialResponse
     */
	public function createSipCredential(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialResponse
    {
        $baseUrl = SDK::CREATE_SIP_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialListSipCredential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialListSipCredential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Credential List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListResponse
     */
	public function createSipCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListResponse
    {
        $baseUrl = SDK::CREATE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a CredentialListMapping resource for an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingResponse
     */
	public function createSipCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingResponse
    {
        $baseUrl = SDK::CREATE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainResponse
     */
	public function createSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainResponse
    {
        $baseUrl = SDK::CREATE_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new IpAccessControlList resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListResponse
     */
	public function createSipIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListResponse
    {
        $baseUrl = SDK::CREATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new IpAccessControlListMapping resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingResponse
     */
	public function createSipIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::CREATE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipIpAccessControlListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipIpAccessControlListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new IpAddress resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressResponse
     */
	public function createSipIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressResponse
    {
        $baseUrl = SDK::CREATE_SIP_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json', \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSipIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlListSipIpAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlListSipIpAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Siprec
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSiprecRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateSiprecSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateSiprecResponse
     */
	public function createSiprec(
        \OpenAPI\OpenAPI\Models\Operations\CreateSiprecRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateSiprecSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateSiprecResponse
    {
        $baseUrl = SDK::CREATE_SIPREC_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec.json', \OpenAPI\OpenAPI\Models\Operations\CreateSiprecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateSiprecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallSiprec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallSiprec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a Stream
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateStreamResponse
     */
	public function createStream(
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateStreamSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateStreamResponse
    {
        $baseUrl = SDK::CREATE_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams.json', \OpenAPI\OpenAPI\Models\Operations\CreateStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new token for ICE servers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTokenSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse
     */
	public function createToken(
        \OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTokenSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse
    {
        $baseUrl = SDK::CREATE_TOKEN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Tokens.json', \OpenAPI\OpenAPI\Models\Operations\CreateTokenRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountToken = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountToken', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new UsageTrigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerResponse
     */
	public function createUsageTrigger(
        \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerResponse
    {
        $baseUrl = SDK::CREATE_USAGE_TRIGGER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json', \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUsageTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountUsageUsageTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountUsageUsageTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new User Defined Message for the given Call SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageResponse
     */
	public function createUserDefinedMessage(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageResponse
    {
        $baseUrl = SDK::CREATE_USER_DEFINED_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessages.json', \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallUserDefinedMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallUserDefinedMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Subscribe to User Defined Messages for a given Call SID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionResponse
     */
	public function createUserDefinedMessageSubscription(
        \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionResponse
    {
        $baseUrl = SDK::CREATE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions.json', \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateUserDefinedMessageSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallUserDefinedMessageSubscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallUserDefinedMessageSubscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createValidationRequest
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestResponse
     */
	public function createValidationRequest(
        \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestResponse
    {
        $baseUrl = SDK::CREATE_VALIDATION_REQUEST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json', \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateValidationRequestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountValidationRequest = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountValidationRequest', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
     */
	public function deleteAddress(
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse
    {
        $baseUrl = SDK::DELETE_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete the application by the specified application sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse
     */
	public function deleteApplication(
        \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse
    {
        $baseUrl = SDK::DELETE_APPLICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCallResponse
     */
	public function deleteCall(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCallResponse
    {
        $baseUrl = SDK::DELETE_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a FeedbackSummary resource from a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryResponse
     */
	public function deleteCallFeedbackSummary(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummarySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryResponse
    {
        $baseUrl = SDK::DELETE_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCallFeedbackSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a recording from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingResponse
     */
	public function deleteCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingResponse
    {
        $baseUrl = SDK::DELETE_CALL_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a recording from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingResponse
     */
	public function deleteConferenceRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingResponse
    {
        $baseUrl = SDK::DELETE_CONFERENCE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConferenceRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an instance of a connect-app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppResponse
     */
	public function deleteConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppResponse
    {
        $baseUrl = SDK::DELETE_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a phone-numbers belonging to the account used to make the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberResponse
     */
	public function deleteIncomingPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberResponse
    {
        $baseUrl = SDK::DELETE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove the assignment of an Add-on installation from the Number specified.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnResponse
     */
	public function deleteIncomingPhoneNumberAssignedAddOn(
        \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnResponse
    {
        $baseUrl = SDK::DELETE_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteIncomingPhoneNumberAssignedAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteKeyResponse
     */
	public function deleteKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteKeyResponse
    {
        $baseUrl = SDK::DELETE_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete media from your account. Once delete, you will no longer be billed
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMediaSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMediaResponse
     */
	public function deleteMedia(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMediaSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMediaResponse
    {
        $baseUrl = SDK::DELETE_MEDIA_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Deletes a message record from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse
     */
	public function deleteMessage(
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse
    {
        $baseUrl = SDK::DELETE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete the caller-id specified from the account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdResponse
     */
	public function deleteOutgoingCallerId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdResponse
    {
        $baseUrl = SDK::DELETE_OUTGOING_CALLER_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteOutgoingCallerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Kick a participant from a given conference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse
     */
	public function deleteParticipant(
        \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse
    {
        $baseUrl = SDK::DELETE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Remove an empty queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteQueueResponse
     */
	public function deleteQueue(
        \OpenAPI\OpenAPI\Models\Operations\DeleteQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteQueueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteQueueResponse
    {
        $baseUrl = SDK::DELETE_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a recording from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse
     */
	public function deleteRecording(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse
    {
        $baseUrl = SDK::DELETE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a result and purge all associated Payloads
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultResponse
     */
	public function deleteRecordingAddOnResult(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultResponse
    {
        $baseUrl = SDK::DELETE_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a payload from the result along with all associated Data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadResponse
     */
	public function deleteRecordingAddOnResultPayload(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadResponse
    {
        $baseUrl = SDK::DELETE_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingAddOnResultPayloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteRecordingTranscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionResponse
     */
	public function deleteRecordingTranscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionResponse
    {
        $baseUrl = SDK::DELETE_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteRecordingTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteSigningKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyResponse
     */
	public function deleteSigningKey(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyResponse
    {
        $baseUrl = SDK::DELETE_SIGNING_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSigningKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a credential list mapping from the requested domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingResponse
     */
	public function deleteSipAuthCallsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingResponse
    {
        $baseUrl = SDK::DELETE_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an IP Access Control List mapping from the requested domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingResponse
     */
	public function deleteSipAuthCallsIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::DELETE_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthCallsIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a credential list mapping from the requested domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingResponse
     */
	public function deleteSipAuthRegistrationsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingResponse
    {
        $baseUrl = SDK::DELETE_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipAuthRegistrationsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a credential resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialResponse
     */
	public function deleteSipCredential(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialResponse
    {
        $baseUrl = SDK::DELETE_SIP_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a Credential List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListResponse
     */
	public function deleteSipCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListResponse
    {
        $baseUrl = SDK::DELETE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a CredentialListMapping resource from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingResponse
     */
	public function deleteSipCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingResponse
    {
        $baseUrl = SDK::DELETE_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an instance of a Domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainResponse
     */
	public function deleteSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainResponse
    {
        $baseUrl = SDK::DELETE_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an IpAccessControlList from the requested account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListResponse
     */
	public function deleteSipIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListResponse
    {
        $baseUrl = SDK::DELETE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an IpAccessControlListMapping resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingResponse
     */
	public function deleteSipIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::DELETE_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete an IpAddress resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressResponse
     */
	public function deleteSipIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressResponse
    {
        $baseUrl = SDK::DELETE_SIP_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteSipIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a transcription from the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionResponse
     */
	public function deleteTranscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionResponse
    {
        $baseUrl = SDK::DELETE_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteUsageTrigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerResponse
     */
	public function deleteUsageTrigger(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerResponse
    {
        $baseUrl = SDK::DELETE_USAGE_TRIGGER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUsageTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a specific User Defined Message Subscription.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionResponse
     */
	public function deleteUserDefinedMessageSubscription(
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionResponse
    {
        $baseUrl = SDK::DELETE_USER_DEFINED_MESSAGE_SUBSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/UserDefinedMessageSubscriptions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteUserDefinedMessageSubscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Fetch the account specified by the provided Account Sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAccountResponse
     */
	public function fetchAccount(
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAccountSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAccountResponse
    {
        $baseUrl = SDK::FETCH_ACCOUNT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010Account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAddressResponse
     */
	public function fetchAddress(
        \OpenAPI\OpenAPI\Models\Operations\FetchAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAddressResponse
    {
        $baseUrl = SDK::FETCH_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the application specified by the provided sid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchApplicationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchApplicationResponse
     */
	public function fetchApplication(
        \OpenAPI\OpenAPI\Models\Operations\FetchApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchApplicationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchApplicationResponse
    {
        $baseUrl = SDK::FETCH_APPLICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an authorized-connect-app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppResponse
     */
	public function fetchAuthorizedConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppResponse
    {
        $baseUrl = SDK::FETCH_AUTHORIZED_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAuthorizedConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountAuthorizedConnectApp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountAuthorizedConnectApp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchAvailablePhoneNumberCountry
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryResponse
     */
	public function fetchAvailablePhoneNumberCountry(
        \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryResponse
    {
        $baseUrl = SDK::FETCH_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json', \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchAvailablePhoneNumberCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountAvailablePhoneNumberCountry = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountAvailablePhoneNumberCountry', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the balance for an Account based on Account Sid. Balance changes may not be reflected immediately. Child accounts do not contain balance information
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBalanceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchBalanceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchBalanceResponse
     */
	public function fetchBalance(
        \OpenAPI\OpenAPI\Models\Operations\FetchBalanceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchBalanceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchBalanceResponse
    {
        $baseUrl = SDK::FETCH_BALANCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Balance.json', \OpenAPI\OpenAPI\Models\Operations\FetchBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountBalance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountBalance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch the call specified by the provided Call SID
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse
     */
	public function fetchCall(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse
    {
        $baseUrl = SDK::FETCH_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCall = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCall', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Feedback resource from a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackResponse
     */
	public function fetchCallFeedback(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackResponse
    {
        $baseUrl = SDK::FETCH_CALL_FEEDBACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json', \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallFeedback = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallFeedback', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a FeedbackSummary resource from a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummarySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryResponse
     */
	public function fetchCallFeedbackSummary(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummarySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryResponse
    {
        $baseUrl = SDK::FETCH_CALL_FEEDBACK_SUMMARY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallFeedbackSummaryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallFeedbackSummary = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallFeedbackSummary', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchCallNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationResponse
     */
	public function fetchCallNotification(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationResponse
    {
        $baseUrl = SDK::FETCH_CALL_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallNotificationInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallNotificationInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a recording for a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingResponse
     */
	public function fetchCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingResponse
    {
        $baseUrl = SDK::FETCH_CALL_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a conference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse
     */
	public function fetchConference(
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse
    {
        $baseUrl = SDK::FETCH_CONFERENCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a recording for a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingResponse
     */
	public function fetchConferenceRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingResponse
    {
        $baseUrl = SDK::FETCH_CONFERENCE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConferenceRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConferenceConferenceRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConferenceConferenceRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a connect-app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppResponse
     */
	public function fetchConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppResponse
    {
        $baseUrl = SDK::FETCH_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConnectApp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConnectApp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an incoming-phone-number belonging to the account used to make the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberResponse
     */
	public function fetchIncomingPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberResponse
    {
        $baseUrl = SDK::FETCH_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Add-on installation currently assigned to this Number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnResponse
     */
	public function fetchIncomingPhoneNumberAssignedAddOn(
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnResponse
    {
        $baseUrl = SDK::FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an Extension for the Assigned Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionResponse
     */
	public function fetchIncomingPhoneNumberAssignedAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionResponse
    {
        $baseUrl = SDK::FETCH_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchIncomingPhoneNumberAssignedAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchKeyResponse
     */
	public function fetchKey(
        \OpenAPI\OpenAPI\Models\Operations\FetchKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchKeyResponse
    {
        $baseUrl = SDK::FETCH_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a single media instance belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMediaSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMediaResponse
     */
	public function fetchMedia(
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMediaSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMediaResponse
    {
        $baseUrl = SDK::FETCH_MEDIA_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountMessageMedia = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountMessageMedia', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific member from the queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse
     */
	public function fetchMember(
        \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse
    {
        $baseUrl = SDK::FETCH_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountQueueMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountQueueMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a message belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse
     */
	public function fetchMessage(
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse
    {
        $baseUrl = SDK::FETCH_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a notification belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchNotificationResponse
     */
	public function fetchNotification(
        \OpenAPI\OpenAPI\Models\Operations\FetchNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchNotificationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchNotificationResponse
    {
        $baseUrl = SDK::FETCH_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountNotificationInstance = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountNotificationInstance', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an outgoing-caller-id belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdResponse
     */
	public function fetchOutgoingCallerId(
        \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdResponse
    {
        $baseUrl = SDK::FETCH_OUTGOING_CALLER_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchOutgoingCallerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountOutgoingCallerId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountOutgoingCallerId', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a participant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse
     */
	public function fetchParticipant(
        \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse
    {
        $baseUrl = SDK::FETCH_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConferenceParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConferenceParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a queue identified by the QueueSid
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchQueueResponse
     */
	public function fetchQueue(
        \OpenAPI\OpenAPI\Models\Operations\FetchQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchQueueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchQueueResponse
    {
        $baseUrl = SDK::FETCH_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
     */
	public function fetchRecording(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of an AddOnResult
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultResponse
     */
	public function fetchRecordingAddOnResult(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountRecordingRecordingAddOnResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountRecordingRecordingAddOnResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a result payload
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadResponse
     */
	public function fetchRecordingAddOnResultPayload(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingAddOnResultPayloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchRecordingTranscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionResponse
     */
	public function fetchRecordingTranscription(
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionResponse
    {
        $baseUrl = SDK::FETCH_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchRecordingTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountRecordingRecordingTranscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountRecordingRecordingTranscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a short code
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
     */
	public function fetchShortCode(
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse
    {
        $baseUrl = SDK::FETCH_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchSigningKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyResponse
     */
	public function fetchSigningKey(
        \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyResponse
    {
        $baseUrl = SDK::FETCH_SIGNING_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSigningKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSigningKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSigningKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific instance of a credential list mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingResponse
     */
	public function fetchSipAuthCallsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingResponse
    {
        $baseUrl = SDK::FETCH_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific instance of an IP Access Control List mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingResponse
     */
	public function fetchSipAuthCallsIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::FETCH_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthCallsIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific instance of a credential list mapping
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingResponse
     */
	public function fetchSipAuthRegistrationsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingResponse
    {
        $baseUrl = SDK::FETCH_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipAuthRegistrationsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a single credential.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialResponse
     */
	public function fetchSipCredential(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialResponse
    {
        $baseUrl = SDK::FETCH_SIP_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialListSipCredential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialListSipCredential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a Credential List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListResponse
     */
	public function fetchSipCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListResponse
    {
        $baseUrl = SDK::FETCH_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a single CredentialListMapping resource from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingResponse
     */
	public function fetchSipCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingResponse
    {
        $baseUrl = SDK::FETCH_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipCredentialListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipCredentialListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a Domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse
     */
	public function fetchSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse
    {
        $baseUrl = SDK::FETCH_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a specific instance of an IpAccessControlList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListResponse
     */
	public function fetchSipIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListResponse
    {
        $baseUrl = SDK::FETCH_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an IpAccessControlListMapping resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingResponse
     */
	public function fetchSipIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::FETCH_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomainSipIpAccessControlListMapping = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomainSipIpAccessControlListMapping', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Read one IpAddress resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressResponse
     */
	public function fetchSipIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressResponse
    {
        $baseUrl = SDK::FETCH_SIP_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchSipIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlListSipIpAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlListSipIpAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch an instance of a Transcription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionResponse
     */
	public function fetchTranscription(
        \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionResponse
    {
        $baseUrl = SDK::FETCH_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountTranscription = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountTranscription', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch and instance of a usage-trigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerResponse
     */
	public function fetchUsageTrigger(
        \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerResponse
    {
        $baseUrl = SDK::FETCH_USAGE_TRIGGER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchUsageTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountUsageUsageTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountUsageUsageTrigger', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a collection of Accounts belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAccountSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAccountResponse
     */
	public function listAccount(
        \OpenAPI\OpenAPI\Models\Operations\ListAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAccountSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAccountResponse
    {
        $baseUrl = SDK::LIST_ACCOUNT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts.json');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAccountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAccountListAccountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAddressResponse
     */
	public function listAddress(
        \OpenAPI\OpenAPI\Models\Operations\ListAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAddressResponse
    {
        $baseUrl = SDK::LIST_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses.json', \OpenAPI\OpenAPI\Models\Operations\ListAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAddressRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAddressListAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of applications representing an application within the requesting account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListApplicationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListApplicationResponse
     */
	public function listApplication(
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListApplicationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListApplicationResponse
    {
        $baseUrl = SDK::LIST_APPLICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Applications.json', \OpenAPI\OpenAPI\Models\Operations\ListApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListApplicationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listApplicationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListApplicationListApplicationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of authorized-connect-apps belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppResponse
     */
	public function listAuthorizedConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppResponse
    {
        $baseUrl = SDK::LIST_AUTHORIZED_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json', \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAuthorizedConnectAppResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAuthorizedConnectAppListAuthorizedConnectAppResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberCountry
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountrySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryResponse
     */
	public function listAvailablePhoneNumberCountry(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountrySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_COUNTRY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberCountryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberCountryListAvailablePhoneNumberCountryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberLocal
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalResponse
     */
	public function listAvailablePhoneNumberLocal(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberLocalResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberLocalListAvailablePhoneNumberLocalResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberMachineToMachine
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineResponse
     */
	public function listAvailablePhoneNumberMachineToMachine(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_MACHINE_TO_MACHINE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberMachineToMachineResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMachineToMachineListAvailablePhoneNumberMachineToMachineResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberMobile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileResponse
     */
	public function listAvailablePhoneNumberMobile(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberMobileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberMobileListAvailablePhoneNumberMobileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberNational
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalResponse
     */
	public function listAvailablePhoneNumberNational(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_NATIONAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberNationalResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberNationalListAvailablePhoneNumberNationalResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberSharedCost
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostResponse
     */
	public function listAvailablePhoneNumberSharedCost(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_SHARED_COST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberSharedCostResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberSharedCostListAvailablePhoneNumberSharedCostResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberTollFree
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeResponse
     */
	public function listAvailablePhoneNumberTollFree(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberTollFreeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberTollFreeListAvailablePhoneNumberTollFreeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listAvailablePhoneNumberVoip
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipResponse
     */
	public function listAvailablePhoneNumberVoip(
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipResponse
    {
        $baseUrl = SDK::LIST_AVAILABLE_PHONE_NUMBER_VOIP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json', \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAvailablePhoneNumberVoipResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListAvailablePhoneNumberVoipListAvailablePhoneNumberVoipResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a collection of calls made to and from your account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallResponse
     */
	public function listCall(
        \OpenAPI\OpenAPI\Models\Operations\ListCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallResponse
    {
        $baseUrl = SDK::LIST_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls.json', \OpenAPI\OpenAPI\Models\Operations\ListCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallListCallResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of all events for a call.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallEventRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallEventSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallEventResponse
     */
	public function listCallEvent(
        \OpenAPI\OpenAPI\Models\Operations\ListCallEventRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallEventSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallEventResponse
    {
        $baseUrl = SDK::LIST_CALL_EVENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json', \OpenAPI\OpenAPI\Models\Operations\ListCallEventRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallEventRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallEventResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallEventResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallEventListCallEventResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listCallNotification
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationResponse
     */
	public function listCallNotification(
        \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationResponse
    {
        $baseUrl = SDK::LIST_CALL_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json', \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallNotificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallNotificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallNotificationListCallNotificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingResponse
     */
	public function listCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingResponse
    {
        $baseUrl = SDK::LIST_CALL_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json', \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListCallRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listCallRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListCallRecordingListCallRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of conferences belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse
     */
	public function listConference(
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse
    {
        $baseUrl = SDK::LIST_CONFERENCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences.json', \OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConferenceRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConferenceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConferenceListConferenceResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of recordings belonging to the call used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingResponse
     */
	public function listConferenceRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingResponse
    {
        $baseUrl = SDK::LIST_CONFERENCE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json', \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConferenceRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConferenceRecordingListConferenceRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of connect-apps belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListConnectAppResponse
     */
	public function listConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\ListConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListConnectAppResponse
    {
        $baseUrl = SDK::LIST_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/ConnectApps.json', \OpenAPI\OpenAPI\Models\Operations\ListConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListConnectAppRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectAppResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListConnectAppListConnectAppResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listDependentPhoneNumber
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberResponse
     */
	public function listDependentPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberResponse
    {
        $baseUrl = SDK::LIST_DEPENDENT_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json', \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listDependentPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListDependentPhoneNumberListDependentPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of incoming-phone-numbers belonging to the account used to make the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberResponse
     */
	public function listIncomingPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberListIncomingPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Add-on installations currently assigned to this Number.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnResponse
     */
	public function listIncomingPhoneNumberAssignedAddOn(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberAssignedAddOnResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnListIncomingPhoneNumberAssignedAddOnResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Extensions for the Assigned Add-on.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionResponse
     */
	public function listIncomingPhoneNumberAssignedAddOnExtension(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_ASSIGNED_ADD_ON_EXTENSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberAssignedAddOnExtensionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberAssignedAddOnExtensionListIncomingPhoneNumberAssignedAddOnExtensionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listIncomingPhoneNumberLocal
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalResponse
     */
	public function listIncomingPhoneNumberLocal(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_LOCAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberLocalResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberLocalListIncomingPhoneNumberLocalResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listIncomingPhoneNumberMobile
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileResponse
     */
	public function listIncomingPhoneNumberMobile(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_MOBILE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberMobileResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberMobileListIncomingPhoneNumberMobileResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listIncomingPhoneNumberTollFree
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeResponse
     */
	public function listIncomingPhoneNumberTollFree(
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeResponse
    {
        $baseUrl = SDK::LIST_INCOMING_PHONE_NUMBER_TOLL_FREE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json', \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listIncomingPhoneNumberTollFreeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListIncomingPhoneNumberTollFreeListIncomingPhoneNumberTollFreeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListKeyResponse
     */
	public function listKey(
        \OpenAPI\OpenAPI\Models\Operations\ListKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListKeyResponse
    {
        $baseUrl = SDK::LIST_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Keys.json', \OpenAPI\OpenAPI\Models\Operations\ListKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListKeyListKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of Media resources belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMediaSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMediaResponse
     */
	public function listMedia(
        \OpenAPI\OpenAPI\Models\Operations\ListMediaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMediaSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMediaResponse
    {
        $baseUrl = SDK::LIST_MEDIA_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json', \OpenAPI\OpenAPI\Models\Operations\ListMediaRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMediaRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMediaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMediaResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMediaListMediaResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve the members of the queue
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse
     */
	public function listMember(
        \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse
    {
        $baseUrl = SDK::LIST_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json', \OpenAPI\OpenAPI\Models\Operations\ListMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMemberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMemberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMemberListMemberResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of messages belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse
     */
	public function listMessage(
        \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse
    {
        $baseUrl = SDK::LIST_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages.json', \OpenAPI\OpenAPI\Models\Operations\ListMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListMessageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMessageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListMessageListMessageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of notifications belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNotificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListNotificationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListNotificationResponse
     */
	public function listNotification(
        \OpenAPI\OpenAPI\Models\Operations\ListNotificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListNotificationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListNotificationResponse
    {
        $baseUrl = SDK::LIST_NOTIFICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Notifications.json', \OpenAPI\OpenAPI\Models\Operations\ListNotificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListNotificationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListNotificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listNotificationResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListNotificationListNotificationResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of outgoing-caller-ids belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdResponse
     */
	public function listOutgoingCallerId(
        \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdResponse
    {
        $baseUrl = SDK::LIST_OUTGOING_CALLER_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json', \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listOutgoingCallerIdResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListOutgoingCallerIdListOutgoingCallerIdResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of participants belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse
     */
	public function listParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse
    {
        $baseUrl = SDK::LIST_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json', \OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListParticipantListParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of queues belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListQueueResponse
     */
	public function listQueue(
        \OpenAPI\OpenAPI\Models\Operations\ListQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListQueueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListQueueResponse
    {
        $baseUrl = SDK::LIST_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues.json', \OpenAPI\OpenAPI\Models\Operations\ListQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListQueueRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listQueueResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListQueueListQueueResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of recordings belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse
     */
	public function listRecording(
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse
    {
        $baseUrl = SDK::LIST_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings.json', \OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRecordingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecordingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRecordingListRecordingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of results belonging to the recording
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultResponse
     */
	public function listRecordingAddOnResult(
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultResponse
    {
        $baseUrl = SDK::LIST_RECORDING_ADD_ON_RESULT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json', \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecordingAddOnResultResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultListRecordingAddOnResultResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of payloads belonging to the AddOnResult
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadResponse
     */
	public function listRecordingAddOnResultPayload(
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadResponse
    {
        $baseUrl = SDK::LIST_RECORDING_ADD_ON_RESULT_PAYLOAD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json', \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecordingAddOnResultPayloadResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRecordingAddOnResultPayloadListRecordingAddOnResultPayloadResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listRecordingTranscription
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionResponse
     */
	public function listRecordingTranscription(
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionResponse
    {
        $baseUrl = SDK::LIST_RECORDING_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json', \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listRecordingTranscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListRecordingTranscriptionListRecordingTranscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of short-codes belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
     */
	public function listShortCode(
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListShortCodeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse
    {
        $baseUrl = SDK::LIST_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json', \OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListShortCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listShortCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListShortCodeListShortCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listSigningKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSigningKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyResponse
     */
	public function listSigningKey(
        \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSigningKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyResponse
    {
        $baseUrl = SDK::LIST_SIGNING_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SigningKeys.json', \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSigningKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSigningKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSigningKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSigningKeyListSigningKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of credential list mappings belonging to the domain used in the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingResponse
     */
	public function listSipAuthCallsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingResponse
    {
        $baseUrl = SDK::LIST_SIP_AUTH_CALLS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipAuthCallsCredentialListMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsCredentialListMappingListSipAuthCallsCredentialListMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of IP Access Control List mappings belonging to the domain used in the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingResponse
     */
	public function listSipAuthCallsIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::LIST_SIP_AUTH_CALLS_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json', \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipAuthCallsIpAccessControlListMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipAuthCallsIpAccessControlListMappingListSipAuthCallsIpAccessControlListMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of credential list mappings belonging to the domain used in the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingResponse
     */
	public function listSipAuthRegistrationsCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingResponse
    {
        $baseUrl = SDK::LIST_SIP_AUTH_REGISTRATIONS_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipAuthRegistrationsCredentialListMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipAuthRegistrationsCredentialListMappingListSipAuthRegistrationsCredentialListMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of credentials.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialResponse
     */
	public function listSipCredential(
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialResponse
    {
        $baseUrl = SDK::LIST_SIP_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json', \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipCredentialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipCredentialResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListSipCredentialResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get All Credential Lists
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListResponse
     */
	public function listSipCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListResponse
    {
        $baseUrl = SDK::LIST_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json', \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipCredentialListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListListSipCredentialListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Read multiple CredentialListMapping resources from an account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingResponse
     */
	public function listSipCredentialListMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingResponse
    {
        $baseUrl = SDK::LIST_SIP_CREDENTIAL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json', \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipCredentialListMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipCredentialListMappingListSipCredentialListMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of domains belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipDomainResponse
     */
	public function listSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\ListSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipDomainSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipDomainResponse
    {
        $baseUrl = SDK::LIST_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json', \OpenAPI\OpenAPI\Models\Operations\ListSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipDomainRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipDomainResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipDomainListSipDomainResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of IpAccessControlLists that belong to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListResponse
     */
	public function listSipIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListResponse
    {
        $baseUrl = SDK::LIST_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json', \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipIpAccessControlListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListListSipIpAccessControlListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of IpAccessControlListMapping resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingResponse
     */
	public function listSipIpAccessControlListMapping(
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingResponse
    {
        $baseUrl = SDK::LIST_SIP_IP_ACCESS_CONTROL_LIST_MAPPING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json', \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipIpAccessControlListMappingResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipIpAccessControlListMappingListSipIpAccessControlListMappingResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Read multiple IpAddress resources.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressResponse
     */
	public function listSipIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressResponse
    {
        $baseUrl = SDK::LIST_SIP_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json', \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listSipIpAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListSipIpAddressListSipIpAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of transcriptions belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionResponse
     */
	public function listTranscription(
        \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionResponse
    {
        $baseUrl = SDK::LIST_TRANSCRIPTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Transcriptions.json', \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListTranscriptionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListTranscriptionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listTranscriptionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListTranscriptionListTranscriptionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of usage-records belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
     */
	public function listUsageRecord(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordListUsageRecordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordAllTime
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeResponse
     */
	public function listUsageRecordAllTime(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_ALL_TIME_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordAllTimeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordAllTimeListUsageRecordAllTimeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordDaily
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyResponse
     */
	public function listUsageRecordDaily(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_DAILY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordDailyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordDailyListUsageRecordDailyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordLastMonth
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthResponse
     */
	public function listUsageRecordLastMonth(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_LAST_MONTH_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordLastMonthResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordLastMonthListUsageRecordLastMonthResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordMonthly
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyResponse
     */
	public function listUsageRecordMonthly(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_MONTHLY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordMonthlyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordMonthlyListUsageRecordMonthlyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordThisMonth
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthResponse
     */
	public function listUsageRecordThisMonth(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_THIS_MONTH_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordThisMonthResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordThisMonthListUsageRecordThisMonthResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordToday
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodaySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayResponse
     */
	public function listUsageRecordToday(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodaySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_TODAY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordTodayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordTodayListUsageRecordTodayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordYearly
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyResponse
     */
	public function listUsageRecordYearly(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_YEARLY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordYearlyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYearlyListUsageRecordYearlyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listUsageRecordYesterday
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdaySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayResponse
     */
	public function listUsageRecordYesterday(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdaySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayResponse
    {
        $baseUrl = SDK::LIST_USAGE_RECORD_YESTERDAY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageRecordYesterdayResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageRecordYesterdayListUsageRecordYesterdayResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve a list of usage-triggers belonging to the account used to make the request
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerResponse
     */
	public function listUsageTrigger(
        \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerResponse
    {
        $baseUrl = SDK::LIST_USAGE_TRIGGER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json', \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listUsageTriggerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListUsageTriggerListUsageTriggerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Modify the properties of a given Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse
     */
	public function updateAccount(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAccountSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse
    {
        $baseUrl = SDK::UPDATE_ACCOUNT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateAccountRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010Account = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010Account', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateAddress
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse
     */
	public function updateAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse
    {
        $baseUrl = SDK::UPDATE_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the application's properties
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationResponse
     */
	public function updateApplication(
        \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationResponse
    {
        $baseUrl = SDK::UPDATE_APPLICATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateApplicationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountApplication = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountApplication', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Initiates a call redirect or terminates a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCallResponse
     */
	public function updateCall(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCallResponse
    {
        $baseUrl = SDK::UPDATE_CALL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateCallRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCallResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCall = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCall', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Feedback resource for a call
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackResponse
     */
	public function updateCallFeedback(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackResponse
    {
        $baseUrl = SDK::UPDATE_CALL_FEEDBACK_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json', \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCallFeedbackResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallFeedback = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallFeedback', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingResponse
     */
	public function updateCallRecording(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingResponse
    {
        $baseUrl = SDK::UPDATE_CALL_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCallRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallCallRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallCallRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateConference
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceResponse
     */
	public function updateConference(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceResponse
    {
        $baseUrl = SDK::UPDATE_CONFERENCE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConference = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConference', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingResponse
     */
	public function updateConferenceRecording(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingResponse
    {
        $baseUrl = SDK::UPDATE_CONFERENCE_RECORDING_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConferenceRecordingResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConferenceConferenceRecording = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConferenceConferenceRecording', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a connect-app with the specified parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppResponse
     */
	public function updateConnectApp(
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppResponse
    {
        $baseUrl = SDK::UPDATE_CONNECT_APP_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateConnectAppResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConnectApp = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConnectApp', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an incoming-phone-number instance.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberResponse
     */
	public function updateIncomingPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberResponse
    {
        $baseUrl = SDK::UPDATE_INCOMING_PHONE_NUMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateIncomingPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountIncomingPhoneNumber = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountIncomingPhoneNumber', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateKeyResponse
     */
	public function updateKey(
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateKeyResponse
    {
        $baseUrl = SDK::UPDATE_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMemberSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
     */
	public function updateMember(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMemberSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse
    {
        $baseUrl = SDK::UPDATE_MEMBER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateMemberRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMemberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountQueueMember = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountQueueMember', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To redact a message-body from a post-flight message record, post to the message instance resource with an empty body
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateMessageSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse
     */
	public function updateMessage(
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateMessageSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse
    {
        $baseUrl = SDK::UPDATE_MESSAGE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateMessageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateMessageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountMessage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountMessage', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the caller-id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdResponse
     */
	public function updateOutgoingCallerId(
        \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdResponse
    {
        $baseUrl = SDK::UPDATE_OUTGOING_CALLER_ID_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateOutgoingCallerIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountOutgoingCallerId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountOutgoingCallerId', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the properties of the participant
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantResponse
     */
	public function updateParticipant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantResponse
    {
        $baseUrl = SDK::UPDATE_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountConferenceParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountConferenceParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * update an instance of payments with different phases of payment flows.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsResponse
     */
	public function updatePayments(
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsResponse
    {
        $baseUrl = SDK::UPDATE_PAYMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdatePaymentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 202) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallPayments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallPayments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the queue with the new parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateQueueRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateQueueSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateQueueResponse
     */
	public function updateQueue(
        \OpenAPI\OpenAPI\Models\Operations\UpdateQueueRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateQueueSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateQueueResponse
    {
        $baseUrl = SDK::UPDATE_QUEUE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateQueueRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateQueueResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountQueue = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountQueue', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a short code with the following parameters
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse
     */
	public function updateShortCode(
        \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse
    {
        $baseUrl = SDK::UPDATE_SHORT_CODE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateShortCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountShortCode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountShortCode', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateSigningKey
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyResponse
     */
	public function updateSigningKey(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyResponse
    {
        $baseUrl = SDK::UPDATE_SIGNING_KEY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSigningKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSigningKey = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSigningKey', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a credential resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialResponse
     */
	public function updateSipCredential(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialResponse
    {
        $baseUrl = SDK::UPDATE_SIP_CREDENTIAL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialListSipCredential = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialListSipCredential', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a Credential List
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListResponse
     */
	public function updateSipCredentialList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListResponse
    {
        $baseUrl = SDK::UPDATE_SIP_CREDENTIAL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipCredentialListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipCredentialList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipCredentialList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update the attributes of a domain
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse
     */
	public function updateSipDomain(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse
    {
        $baseUrl = SDK::UPDATE_SIP_DOMAIN_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipDomainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipDomain = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipDomain', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rename an IpAccessControlList
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListResponse
     */
	public function updateSipIpAccessControlList(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListResponse
    {
        $baseUrl = SDK::UPDATE_SIP_IP_ACCESS_CONTROL_LIST_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAccessControlListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an IpAddress resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressResponse
     */
	public function updateSipIpAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressResponse
    {
        $baseUrl = SDK::UPDATE_SIP_IP_ADDRESS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSipIpAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountSipSipIpAccessControlListSipIpAddress = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountSipSipIpAccessControlListSipIpAddress', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop a Siprec using either the SID of the Siprec resource or the `name` used when creating the resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecResponse
     */
	public function updateSiprec(
        \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecResponse
    {
        $baseUrl = SDK::UPDATE_SIPREC_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateSiprecResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallSiprec = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallSiprec', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop a Stream using either the SID of the Stream resource or the `name` used when creating the resource
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateStreamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateStreamSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateStreamResponse
     */
	public function updateStream(
        \OpenAPI\OpenAPI\Models\Operations\UpdateStreamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateStreamSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateStreamResponse
    {
        $baseUrl = SDK::UPDATE_STREAM_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateStreamRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateStreamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountCallStream = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountCallStream', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an instance of a usage trigger
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerResponse
     */
	public function updateUsageTrigger(
        \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerResponse
    {
        $baseUrl = SDK::UPDATE_USAGE_TRIGGER_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json', \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateUsageTriggerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->apiV2010AccountUsageUsageTrigger = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ApiV2010AccountUsageUsageTrigger', 'json');
            }
        }

        return $response;
    }
}