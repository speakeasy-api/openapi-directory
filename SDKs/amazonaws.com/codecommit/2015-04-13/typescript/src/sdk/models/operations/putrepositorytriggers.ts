/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum PutRepositoryTriggersXAmzTargetEnum {
  CodeCommit20150413PutRepositoryTriggers = "CodeCommit_20150413.PutRepositoryTriggers",
}

export class PutRepositoryTriggersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  putRepositoryTriggersInput: shared.PutRepositoryTriggersInput;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Target",
  })
  xAmzTarget: PutRepositoryTriggersXAmzTargetEnum;
}

export class PutRepositoryTriggersResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * EncryptionIntegrityChecksFailedException
   */
  @SpeakeasyMetadata()
  encryptionIntegrityChecksFailedException?: any;

  /**
   * EncryptionKeyAccessDeniedException
   */
  @SpeakeasyMetadata()
  encryptionKeyAccessDeniedException?: any;

  /**
   * EncryptionKeyDisabledException
   */
  @SpeakeasyMetadata()
  encryptionKeyDisabledException?: any;

  /**
   * EncryptionKeyNotFoundException
   */
  @SpeakeasyMetadata()
  encryptionKeyNotFoundException?: any;

  /**
   * EncryptionKeyUnavailableException
   */
  @SpeakeasyMetadata()
  encryptionKeyUnavailableException?: any;

  /**
   * InvalidRepositoryNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryNameException?: any;

  /**
   * InvalidRepositoryTriggerBranchNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerBranchNameException?: any;

  /**
   * InvalidRepositoryTriggerCustomDataException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerCustomDataException?: any;

  /**
   * InvalidRepositoryTriggerDestinationArnException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerDestinationArnException?: any;

  /**
   * InvalidRepositoryTriggerEventsException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerEventsException?: any;

  /**
   * InvalidRepositoryTriggerNameException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerNameException?: any;

  /**
   * InvalidRepositoryTriggerRegionException
   */
  @SpeakeasyMetadata()
  invalidRepositoryTriggerRegionException?: any;

  /**
   * MaximumBranchesExceededException
   */
  @SpeakeasyMetadata()
  maximumBranchesExceededException?: any;

  /**
   * MaximumRepositoryTriggersExceededException
   */
  @SpeakeasyMetadata()
  maximumRepositoryTriggersExceededException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  putRepositoryTriggersOutput?: shared.PutRepositoryTriggersOutput;

  /**
   * RepositoryDoesNotExistException
   */
  @SpeakeasyMetadata()
  repositoryDoesNotExistException?: any;

  /**
   * RepositoryTriggerBranchNameListRequiredException
   */
  @SpeakeasyMetadata()
  repositoryTriggerBranchNameListRequiredException?: any;

  /**
   * RepositoryTriggerDestinationArnRequiredException
   */
  @SpeakeasyMetadata()
  repositoryTriggerDestinationArnRequiredException?: any;

  /**
   * RepositoryTriggerEventsListRequiredException
   */
  @SpeakeasyMetadata()
  repositoryTriggerEventsListRequiredException?: any;

  /**
   * RepositoryTriggerNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryTriggerNameRequiredException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * RepositoryNameRequiredException
   */
  @SpeakeasyMetadata()
  repositoryNameRequiredException?: any;

  /**
   * RepositoryTriggersListRequiredException
   */
  @SpeakeasyMetadata()
  repositoryTriggersListRequiredException?: any;
}
