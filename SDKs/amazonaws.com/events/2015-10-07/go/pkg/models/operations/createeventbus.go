// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateEventBusXAmzTargetEnum
type CreateEventBusXAmzTargetEnum string

const (
	CreateEventBusXAmzTargetEnumAwsEventsCreateEventBus CreateEventBusXAmzTargetEnum = "AWSEvents.CreateEventBus"
)

func (e *CreateEventBusXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSEvents.CreateEventBus":
		*e = CreateEventBusXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEventBusXAmzTargetEnum: %s", s)
	}
}

type CreateEventBusRequest struct {
	CreateEventBusRequest shared.CreateEventBusRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateEventBusXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateEventBusResponse struct {
	// ConcurrentModificationException
	ConcurrentModificationException interface{}
	ContentType                     string
	// Success
	CreateEventBusResponse *shared.CreateEventBusResponse
	// InternalException
	InternalException interface{}
	// InvalidStateException
	InvalidStateException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// OperationDisabledException
	OperationDisabledException interface{}
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
}
