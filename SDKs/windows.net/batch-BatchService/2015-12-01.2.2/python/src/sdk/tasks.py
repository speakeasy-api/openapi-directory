"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tasks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def task_add(self, request: operations.TaskAddRequest) -> operations.TaskAddResponse:
        r"""Adds a task to the specified job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskAddRequest, base_url, '/jobs/{jobId}/tasks', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "task_add_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.TaskAddRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskAddResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_delete(self, request: operations.TaskDeleteRequest) -> operations.TaskDeleteResponse:
        r"""Deletes a task from the specified job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskDeleteRequest, base_url, '/jobs/{jobId}/tasks/{taskId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TaskDeleteRequest, request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_get(self, request: operations.TaskGetRequest) -> operations.TaskGetResponse:
        r"""Gets information about the specified task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskGetRequest, base_url, '/jobs/{jobId}/tasks/{taskId}', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TaskGetRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CloudTask])
                res.cloud_task = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_list(self, request: operations.TaskListRequest) -> operations.TaskListResponse:
        r"""Lists all of the tasks that are associated with the specified job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskListRequest, base_url, '/jobs/{jobId}/tasks', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TaskListRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CloudTaskListResult])
                res.cloud_task_list_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_list_subtasks(self, request: operations.TaskListSubtasksRequest) -> operations.TaskListSubtasksResponse:
        r"""Lists all of the subtasks that are associated with the specified multi-instance task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskListSubtasksRequest, base_url, '/jobs/{jobId}/tasks/{taskId}/subtasksinfo', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TaskListSubtasksRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskListSubtasksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CloudTaskListSubtasksResult])
                res.cloud_task_list_subtasks_result = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_terminate(self, request: operations.TaskTerminateRequest) -> operations.TaskTerminateResponse:
        r"""Terminates the specified task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskTerminateRequest, base_url, '/jobs/{jobId}/tasks/{taskId}/terminate', request)
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.TaskTerminateRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskTerminateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    def task_update(self, request: operations.TaskUpdateRequest) -> operations.TaskUpdateResponse:
        r"""Updates the properties of the specified task."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.TaskUpdateRequest, base_url, '/jobs/{jobId}/tasks/{taskId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "task_update_parameter", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.TaskUpdateRequest, request)
        
        client = self._client
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TaskUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.BatchError])
                res.batch_error = out

        return res

    