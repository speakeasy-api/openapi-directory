/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Resource type the Primary IP can be assigned to
 */
export enum PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum {
  Server = "server",
}

/**
 * Primary IP type
 */
export enum PostPrimaryIpsCreatePrimaryIPRequestTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

/**
 * The `type` argument is required while `datacenter` and `assignee_id` are mutually exclusive.
 */
export class PostPrimaryIpsCreatePrimaryIPRequest extends SpeakeasyBase {
  /**
   * ID of the resource the Primary IP should be assigned to. Omitted if it should not be assigned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_id" })
  assigneeId?: number;

  /**
   * Resource type the Primary IP can be assigned to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_type" })
  assigneeType: PostPrimaryIpsCreatePrimaryIPRequestAssigneeTypeEnum;

  /**
   * Delete the Primary IP when the Server it is assigned to is deleted. If omitted defaults to `false`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete" })
  autoDelete?: boolean;

  /**
   * ID or name of Datacenter the Primary IP will be bound to. Needs to be omitted if `assignee_id` is passed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  datacenter?: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Primary IP type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostPrimaryIpsCreatePrimaryIPRequestTypeEnum;
}

/**
 * Error message for the Action if error occurred, otherwise null
 */
export class PostPrimaryIpsCreatePrimaryIPResponseActionError extends SpeakeasyBase {
  /**
   * Fixed machine readable code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: string;

  /**
   * Humanized error message
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export class PostPrimaryIpsCreatePrimaryIPResponseActionResources extends SpeakeasyBase {
  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

/**
 * Status of the Action
 */
export enum PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum {
  Success = "success",
  Running = "running",
  Error = "error",
}

export class PostPrimaryIpsCreatePrimaryIPResponseAction extends SpeakeasyBase {
  /**
   * Command executed in the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "command" })
  command: string;

  /**
   * Error message for the Action if error occurred, otherwise null
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponseActionError)
  error: PostPrimaryIpsCreatePrimaryIPResponseActionError;

  /**
   * Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "finished" })
  finished: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Progress of Action in percent
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  progress: number;

  /**
   * Resources the Action relates to
   */
  @SpeakeasyMetadata({
    elemType: PostPrimaryIpsCreatePrimaryIPResponseActionResources,
  })
  @Expose({ name: "resources" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponseActionResources)
  resources: PostPrimaryIpsCreatePrimaryIPResponseActionResources[];

  /**
   * Point in time when the Action was started (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "started" })
  started: string;

  /**
   * Status of the Action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: PostPrimaryIpsCreatePrimaryIPResponseActionStatusEnum;
}

/**
 * Resource type the Primary IP can be assigned to
 */
export enum PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum {
  Server = "server",
}

export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation extends SpeakeasyBase {
  /**
   * City the Location is closest to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "city" })
  city: string;

  /**
   * ISO 3166-1 alpha-2 code of the country the Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country" })
  country: string;

  /**
   * Description of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Latitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latitude" })
  latitude: number;

  /**
   * Longitude of the city closest to the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longitude" })
  longitude: number;

  /**
   * Unique identifier of the Location
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Name of network zone this Location resides in
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;
}

/**
 * The Server types the Datacenter can handle
 */
export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes extends SpeakeasyBase {
  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available" })
  available: number[];

  /**
   * IDs of Server types that are supported and for which the Datacenter has enough resources left
   */
  @SpeakeasyMetadata()
  @Expose({ name: "available_for_migration" })
  availableForMigration: number[];

  /**
   * IDs of Server types that are supported in the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "supported" })
  supported: number[];
}

/**
 * Datacenter this Primary IP is located at
 */
export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter extends SpeakeasyBase {
  /**
   * Description of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  @SpeakeasyMetadata()
  @Expose({ name: "location" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation)
  location: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterLocation;

  /**
   * Unique identifier of the Datacenter
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * The Server types the Datacenter can handle
   */
  @SpeakeasyMetadata()
  @Expose({ name: "server_types" })
  @Type(
    () => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes
  )
  serverTypes: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenterServerTypes;
}

export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDnsPtr extends SpeakeasyBase {
  /**
   * DNS pointer for the specific IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dns_ptr" })
  dnsPtr: string;

  /**
   * Single IPv4 or IPv6 address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;
}

/**
 * Protection configuration for the Resource
 */
export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Resource from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

/**
 * Type of the Primary IP
 */
export enum PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum {
  Ipv4 = "ipv4",
  Ipv6 = "ipv6",
}

export class PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP extends SpeakeasyBase {
  /**
   * ID of the resource the Primary IP is assigned to, null if it is not assigned at all
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_id" })
  assigneeId: number;

  /**
   * Resource type the Primary IP can be assigned to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "assignee_type" })
  assigneeType: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPAssigneeTypeEnum;

  /**
   * Delete this Primary IP when the resource it is assigned to is deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auto_delete" })
  autoDelete: boolean;

  /**
   * Whether the IP is blocked
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blocked" })
  blocked: boolean;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Datacenter this Primary IP is located at
   */
  @SpeakeasyMetadata()
  @Expose({ name: "datacenter" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter)
  datacenter: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDatacenter;

  /**
   * Array of reverse DNS entries
   */
  @SpeakeasyMetadata({
    elemType: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDnsPtr,
  })
  @Expose({ name: "dns_ptr" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDnsPtr)
  dnsPtr: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPDnsPtr[];

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IP address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip" })
  ip: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection)
  protection: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPProtection;

  /**
   * Type of the Primary IP
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIPTypeEnum;
}

/**
 * The `primary_ip` key contains the Primary IP that was just created
 */
export class PostPrimaryIpsCreatePrimaryIPResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponseAction)
  action?: PostPrimaryIpsCreatePrimaryIPResponseAction;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_ip" })
  @Type(() => PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP)
  primaryIp: PostPrimaryIpsCreatePrimaryIPResponsePrimaryIP;
}

export class PostPrimaryIpsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The `primary_ip` key contains the Primary IP that was just created
   */
  @SpeakeasyMetadata()
  createPrimaryIPResponse?: PostPrimaryIpsCreatePrimaryIPResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
