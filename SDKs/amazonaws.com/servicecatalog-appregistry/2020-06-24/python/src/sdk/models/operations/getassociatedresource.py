"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getassociatedresourceresponse as shared_getassociatedresourceresponse
from enum import Enum
from typing import Any, Optional

class GetAssociatedResourceResourceTypeEnum(str, Enum):
    r"""The type of resource associated with the application."""
    CFN_STACK = 'CFN_STACK'
    RESOURCE_TAG_VALUE = 'RESOURCE_TAG_VALUE'


@dataclasses.dataclass
class GetAssociatedResourceRequest:
    
    application: str = dataclasses.field(metadata={'path_param': { 'field_name': 'application', 'style': 'simple', 'explode': False }})
    r"""The name, ID, or ARN of the application."""  
    resource: str = dataclasses.field(metadata={'path_param': { 'field_name': 'resource', 'style': 'simple', 'explode': False }})
    r"""The name or ID of the resource associated with the application."""  
    resource_type: GetAssociatedResourceResourceTypeEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'resourceType', 'style': 'simple', 'explode': False }})
    r"""The type of resource associated with the application."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetAssociatedResourceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_associated_resource_response: Optional[shared_getassociatedresourceresponse.GetAssociatedResourceResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    