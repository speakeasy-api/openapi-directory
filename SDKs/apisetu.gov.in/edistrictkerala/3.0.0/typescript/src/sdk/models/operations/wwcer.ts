/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class WwcerSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-APIKEY",
  })
  apiKey: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-APISETU-CLIENTID",
  })
  clientId: string;
}

export class WwcerRequestBodyCertificateParameters extends SpeakeasyBase {
  /**
   * Application Number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "aplno" })
  aplno: string;

  /**
   * Certificate Number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certno" })
  certno: string;

  /**
   * Security Code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sccd" })
  sccd: string;
}

/**
 * The format of the certificate in response.
 */
export enum WwcerRequestBodyFormatEnum {
  Pdf = "pdf",
}

/**
 * Request format
 */
export class WwcerRequestBody extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "certificateParameters" })
  @Type(() => WwcerRequestBodyCertificateParameters)
  certificateParameters?: WwcerRequestBodyCertificateParameters;

  @SpeakeasyMetadata()
  @Expose({ name: "consentArtifact" })
  @Type(() => shared.ConsentArtifactSchema)
  consentArtifact?: shared.ConsentArtifactSchema;

  /**
   * The format of the certificate in response.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format: WwcerRequestBodyFormatEnum;

  /**
   * A unique transaction id for this request in UUID format. It is used for tracking the request.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "txnId" })
  txnId: string;
}

export enum Wwcer504ApplicationJSONErrorEnum {
  GatewayTimeout = "gateway_timeout",
}

export enum Wwcer504ApplicationJSONErrorDescriptionEnum {
  PublisherServiceDidNotRespondInTime = "Publisher service did not respond in time",
}

/**
 * Gateway timeout
 */
export class Wwcer504ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer504ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer504ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer503ApplicationJSONErrorEnum {
  ServiceUnavailable = "service_unavailable",
}

export enum Wwcer503ApplicationJSONErrorDescriptionEnum {
  PublisherServiceIsTemporarilyUnavailable = "Publisher service is temporarily unavailable",
}

/**
 * Service unavailable
 */
export class Wwcer503ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer503ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer503ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer502ApplicationJSONErrorEnum {
  BadGatewy = "bad_gatewy",
}

export enum Wwcer502ApplicationJSONErrorDescriptionEnum {
  PublisherServiceReturnedAnInvalidResponse = "Publisher service returned an invalid response",
}

/**
 * Bad gateway
 */
export class Wwcer502ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer502ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer502ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer500ApplicationJSONErrorEnum {
  InternalServerError = "internal_server_error",
}

export enum Wwcer500ApplicationJSONErrorDescriptionEnum {
  InternalServerError = "Internal server error",
}

/**
 * Internal server error
 */
export class Wwcer500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer500ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer500ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer404ApplicationJSONErrorEnum {
  RecordNotFound = "record_not_found",
  UrlNotFound = "url_not_found",
}

export enum Wwcer404ApplicationJSONErrorDescriptionEnum {
  NoRecordFound = "No record found",
  YourAPIUrlOrPathIsIncorrect = "Your API url or path is incorrect",
}

/**
 * No record found
 */
export class Wwcer404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer404ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer404ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer401ApplicationJSONErrorEnum {
  InvalidAuthentication = "invalid_authentication",
  InvalidAuthorization = "invalid_authorization",
}

export enum Wwcer401ApplicationJSONErrorDescriptionEnum {
  AuthenticationFailed = "Authentication failed",
  YouAreNotAuthorizedToUseThisAPI = "You are not authorized to use this API",
}

/**
 * Unauthorized access
 */
export class Wwcer401ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer401ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer401ApplicationJSONErrorDescriptionEnum;
}

export enum Wwcer400ApplicationJSONErrorEnum {
  MissingParameter = "missing_parameter",
  InvalidParameter = "invalid_parameter",
  InvalidFormat = "invalid_format",
  InvalidTxnid = "invalid_txnid",
  InvalidConsentid = "invalid_consentid",
}

export enum Wwcer400ApplicationJSONErrorDescriptionEnum {
  PleaseProvideAllMandatoryParameters = "Please provide all mandatory parameters",
  BadRequest = "Bad request",
  TheFormatParameterIsInvalid = "The format parameter is invalid",
  TheTxnIdParameterMustBeInUUIDFormat = "The txnId parameter must be in UUID format",
  TheConsentIdParameterMustBeInUUIDFormat = "The consentId parameter must be in UUID format",
}

/**
 * Bad request
 */
export class Wwcer400ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  error?: Wwcer400ApplicationJSONErrorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "errorDescription" })
  errorDescription?: Wwcer400ApplicationJSONErrorDescriptionEnum;
}

export class WwcerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Bad request
   */
  @SpeakeasyMetadata()
  wwcer400ApplicationJSONObject?: Wwcer400ApplicationJSON;

  /**
   * Unauthorized access
   */
  @SpeakeasyMetadata()
  wwcer401ApplicationJSONObject?: Wwcer401ApplicationJSON;

  /**
   * No record found
   */
  @SpeakeasyMetadata()
  wwcer404ApplicationJSONObject?: Wwcer404ApplicationJSON;

  /**
   * Internal server error
   */
  @SpeakeasyMetadata()
  wwcer500ApplicationJSONObject?: Wwcer500ApplicationJSON;

  /**
   * Bad gateway
   */
  @SpeakeasyMetadata()
  wwcer502ApplicationJSONObject?: Wwcer502ApplicationJSON;

  /**
   * Service unavailable
   */
  @SpeakeasyMetadata()
  wwcer503ApplicationJSONObject?: Wwcer503ApplicationJSON;

  /**
   * Gateway timeout
   */
  @SpeakeasyMetadata()
  wwcer504ApplicationJSONObject?: Wwcer504ApplicationJSON;
}
