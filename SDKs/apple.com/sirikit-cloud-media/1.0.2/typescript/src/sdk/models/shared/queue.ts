/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Content } from "./content";
import { PlayMediaControl } from "./playmediacontrol";
import { QueueInsertPointer } from "./queueinsertpointer";
import { QueuePlayPointer } from "./queueplaypointer";
import { Expose, Transform, Type } from "class-transformer";

export class Queue extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Content })
  @Expose({ name: "content" })
  @Type(() => Content)
  content: Content[];

  @SpeakeasyMetadata()
  @Expose({ name: "contentItemsCount" })
  contentItemsCount?: number;

  @SpeakeasyMetadata({ elemType: PlayMediaControl })
  @Expose({ name: "controls" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, PlayMediaControl> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], PlayMediaControl);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  controls?: Record<string, PlayMediaControl>;

  @SpeakeasyMetadata()
  @Expose({ name: "identifier" })
  identifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "insertPointer" })
  @Type(() => QueueInsertPointer)
  insertPointer?: QueueInsertPointer;

  @SpeakeasyMetadata()
  @Expose({ name: "nextContentUrl" })
  nextContentUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "playPointer" })
  @Type(() => QueuePlayPointer)
  playPointer?: QueuePlayPointer;

  @SpeakeasyMetadata()
  @Expose({ name: "prerollSeconds" })
  prerollSeconds?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previousContentUrl" })
  previousContentUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "skipsRemaining" })
  skipsRemaining?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version: string;
}
