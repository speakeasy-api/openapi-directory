"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import credit as shared_credit
from ..shared import legacy_error as shared_legacy_error
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class EditVideoCreditSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EditVideoCreditRequestBody:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the person being credited."""  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role'), 'exclude': lambda f: f is None }})
    r"""The role of the person being credited."""  
    

@dataclasses.dataclass
class EditVideoCreditRequest:
    
    credit_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'credit_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the credit."""  
    video_id: float = dataclasses.field(metadata={'path_param': { 'field_name': 'video_id', 'style': 'simple', 'explode': False }})
    r"""The ID of the video."""  
    request_body: Optional[EditVideoCreditRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/vnd.vimeo.credit+json' }})  
    

@dataclasses.dataclass
class EditVideoCreditResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    credit: Optional[shared_credit.Credit] = dataclasses.field(default=None)
    r"""The credit was edited."""  
    legacy_error: Optional[shared_legacy_error.LegacyError] = dataclasses.field(default=None)
    r"""A parameter is invalid."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    