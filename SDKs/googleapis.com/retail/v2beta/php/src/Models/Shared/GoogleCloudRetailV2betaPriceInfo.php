<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * GoogleCloudRetailV2betaPriceInfo - The price information of a Product.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class GoogleCloudRetailV2betaPriceInfo
{
    /**
     * The costs associated with the sale of a particular product. Used for gross profit reporting. * Profit = price - cost Google Merchant Center property [cost_of_goods_sold](https://support.google.com/merchants/answer/9017895).
     * 
     * @var ?float $cost
     */
	#[\JMS\Serializer\Annotation\SerializedName('cost')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $cost = null;
    
    /**
     * The 3-letter currency code defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). If this field is an unrecognizable currency code, an INVALID_ARGUMENT error is returned. The Product.Type.VARIANT Products with the same Product.primary_product_id must share the same currency_code. Otherwise, a FAILED_PRECONDITION error is returned.
     * 
     * @var ?string $currencyCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('currencyCode')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $currencyCode = null;
    
    /**
     * Price of the product without any discount. If zero, by default set to be the price. If set, original_price should be greater than or equal to price, otherwise an INVALID_ARGUMENT error is thrown.
     * 
     * @var ?float $originalPrice
     */
	#[\JMS\Serializer\Annotation\SerializedName('originalPrice')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $originalPrice = null;
    
    /**
     * Price of the product. Google Merchant Center property [price](https://support.google.com/merchants/answer/6324371). Schema.org property [Offer.price](https://schema.org/price).
     * 
     * @var ?float $price
     */
	#[\JMS\Serializer\Annotation\SerializedName('price')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $price = null;
    
    /**
     * The timestamp when the price starts to be effective. This can be set as a future timestamp, and the price is only used for search after price_effective_time. If so, the original_price must be set and original_price is used before price_effective_time. Do not set if price is always effective because it will cause additional latency during search.
     * 
     * @var ?string $priceEffectiveTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceEffectiveTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $priceEffectiveTime = null;
    
    /**
     * The timestamp when the price stops to be effective. The price is used for search before price_expire_time. If this field is set, the original_price must be set and original_price is used after price_expire_time. Do not set if price is always effective because it will cause additional latency during search.
     * 
     * @var ?string $priceExpireTime
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceExpireTime')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $priceExpireTime = null;
    
    /**
     * The price range of all variant Product having the same Product.primary_product_id.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2betaPriceInfoPriceRange $priceRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('priceRange')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\GoogleCloudRetailV2betaPriceInfoPriceRange')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?GoogleCloudRetailV2betaPriceInfoPriceRange $priceRange = null;
    
	public function __construct()
	{
		$this->cost = null;
		$this->currencyCode = null;
		$this->originalPrice = null;
		$this->price = null;
		$this->priceEffectiveTime = null;
		$this->priceExpireTime = null;
		$this->priceRange = null;
	}
}
