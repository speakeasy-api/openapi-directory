"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import proposal as shared_proposal
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class AdexchangebuyerProposalsUpdateSecurity:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class AdexchangebuyerProposalsUpdateUpdateActionEnum(str, Enum):
    r"""The proposed action to take on the proposal. This field is required and it must be set when updating a proposal."""
    ACCEPT = 'accept'
    CANCEL = 'cancel'
    PROPOSE = 'propose'
    PROPOSE_AND_ACCEPT = 'proposeAndAccept'
    UNKNOWN_ACTION = 'unknownAction'
    UPDATE_NON_TERMS = 'updateNonTerms'


@dataclasses.dataclass
class AdexchangebuyerProposalsUpdateRequest:
    
    proposal_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'proposalId', 'style': 'simple', 'explode': False }})
    r"""The proposal id to update."""  
    revision_number: str = dataclasses.field(metadata={'path_param': { 'field_name': 'revisionNumber', 'style': 'simple', 'explode': False }})
    r"""The last known revision number to update. If the head revision in the marketplace database has since changed, an error will be thrown. The caller should then fetch the latest proposal at head revision and retry the update at that revision."""  
    update_action: AdexchangebuyerProposalsUpdateUpdateActionEnum = dataclasses.field(metadata={'path_param': { 'field_name': 'updateAction', 'style': 'simple', 'explode': False }})
    r"""The proposed action to take on the proposal. This field is required and it must be set when updating a proposal."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    proposal: Optional[shared_proposal.Proposal] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    

@dataclasses.dataclass
class AdexchangebuyerProposalsUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    proposal: Optional[shared_proposal.Proposal] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    