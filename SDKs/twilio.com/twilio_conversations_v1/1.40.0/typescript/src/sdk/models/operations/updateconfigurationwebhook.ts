/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const UpdateConfigurationWebhookServerList = [
  "https://conversations.twilio.com",
] as const;

export class UpdateConfigurationWebhookSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class UpdateConfigurationWebhookUpdateConfigurationWebhookRequest extends SpeakeasyBase {
  /**
   * The list of webhook event triggers that are enabled for this Service: `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`, `onConversationUpdated`, `onConversationRemoved`, `onParticipantAdded`, `onParticipantUpdated`, `onParticipantRemoved`
   */
  @SpeakeasyMetadata({ data: "form, name=Filters" })
  filters?: string[];

  /**
   * The HTTP method to be used when sending a webhook request.
   */
  @SpeakeasyMetadata({ data: "form, name=Method" })
  method?: string;

  /**
   * The absolute url the post-event webhook request should be sent to.
   */
  @SpeakeasyMetadata({ data: "form, name=PostWebhookUrl" })
  postWebhookUrl?: string;

  /**
   * The absolute url the pre-event webhook request should be sent to.
   */
  @SpeakeasyMetadata({ data: "form, name=PreWebhookUrl" })
  preWebhookUrl?: string;

  @SpeakeasyMetadata({ data: "form, name=Target" })
  target?: shared.ConfigurationWebhookEnumTargetEnum;
}

export class UpdateConfigurationWebhookResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  conversationsV1ConfigurationConfigurationWebhook?: shared.ConversationsV1ConfigurationConfigurationWebhook;
}
