"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .classification import Classification
from .classificationinclusion import ClassificationInclusion
from .credit import Credit
from .episode import Episode
from .image import Image
from .mediaasset import MediaAsset
from .network import Network
from .person import Person
from .season import Season
from .series import Series
from sdk.models import shared

SERVERS = [
    "https://art19.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""The ART19 Content API conforms to the [JSON:API specification](http://jsonapi.org).
    
    API requests **MUST** use the HTTP Accept header:
    
    `Accept: application/vnd.api+json`
    
    API requests **MUST** be authenticated using the HTTP Authorization header:
    
    `Authorization: Token token=\"your-token\", credential=\"your-credential\"`
    
    ## General Notes
    
    Some query parameters use unencoded [ and ] characters simply for readability. Defaults, examples, and
    possible values are additionally rendered in double quotes for readability. In practice, query parameters should
    not have quotes around the values (e.g., `foo=bar` is valid, not `foo=\"bar\"`), and both query parameter keys
    and values must be percent-encoded, per the requirements in [RFC 3986 ยง 3.4](https://tools.ietf.org/html/rfc3986#section-3.4).
    
    ## Rate Limiting
    
    In order to provide a fair distribution of available resources, all API calls are subject to rate limits.
    If you exceed the number of API calls per minute granted to your credential, a `429 Too Many Requests`
    error response will be returned.
    
    In that case, a `Retry-After` header MAY be included in the response, describing the number of seconds
    after which a request can be retried.
    
    If you run into a high number of 429 errors, please reach out to ART19 Support to adjust your rate limit.
    
    ### Example
    
    In the following example the request can be retried after waiting for 21 seconds:
    
        HTTP/1.1 429 Too Many Requests
        Content-Type: text/html
        Retry-After: 21
    
    ## Pagination
    
    Requests to collection endpoints **SHOULD** provide pagination parameters.
    Some endpoints **REQUIRE** pagination parameters to be provided.
    Whenever pagination is provided, it **MUST** be valid.
    Failing to provide pagination when it is required or providing wrong or incomplete pagination
    always results in a `400 Bad Request` error response.
    
    The page numbering starts with `1` and the maximum page size (if not otherwise documented
    on an endpoint) is `100`. Pagination **MUST NOT** be specified if requesting a list of IDs (using an `ids[]` parameter).
    
    Providing invalid values for page number or page size, as well as providing only a page number or only a page size,
    is considered an error. Pagination is provided like this:
    
    `page[number]=1&page[size]=25`
    
    Responses conform to the [JSON:API specification's pagination section](https://jsonapi.org/format/#fetching-pagination)
    by including pagination links. Your requested page size will be carried into the pagination links.
    
    ## Sorting
    
    Requests to collection endpoints usually accept a `sort` parameter. Please refer to the
    [JSON:API Specification's sorting section](https://jsonapi.org/format/#fetching-sorting) for further details.
    
    ## Relationship Linking
    
    Currently, resources return all of their relationships, in no particular order, pursuant to how relationships
    should be returned [according to the JSON:API specification](https://jsonapi.org/format/#document-resource-object-relationships). Consumers of this API
    **MUST NOT** make assumptions about the order of these collections. Even though this data is not currently paginated, consumers **MUST** support
    paginating relationships per the JSON:API specification if this data is important for their application.
    """
    classification: Classification
    classification_inclusion: ClassificationInclusion
    credit: Credit
    episode: Episode
    image: Image
    media_asset: MediaAsset
    network: Network
    person: Person
    season: Season
    series: Series

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.classification = Classification(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.classification_inclusion = ClassificationInclusion(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.credit = Credit(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.episode = Episode(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.image = Image(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.media_asset = MediaAsset(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.network = Network(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.person = Person(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.season = Season(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.series = Series(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    