/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Authentication } from "./authentication";
import { ScanRun } from "./scanrun";
import { Schedule } from "./schedule";
import { Expose, Type } from "class-transformer";

/**
 * Controls export of scan configurations and results to Security Command Center.
 */
export enum ScanConfigExportToSecurityCommandCenterEnum {
  ExportToSecurityCommandCenterUnspecified = "EXPORT_TO_SECURITY_COMMAND_CENTER_UNSPECIFIED",
  Enabled = "ENABLED",
  Disabled = "DISABLED",
}

/**
 * The risk level selected for the scan
 */
export enum ScanConfigRiskLevelEnum {
  RiskLevelUnspecified = "RISK_LEVEL_UNSPECIFIED",
  Normal = "NORMAL",
  Low = "LOW",
}

export enum ScanConfigTargetPlatformsEnum {
  TargetPlatformUnspecified = "TARGET_PLATFORM_UNSPECIFIED",
  AppEngine = "APP_ENGINE",
  Compute = "COMPUTE",
  CloudRun = "CLOUD_RUN",
  CloudFunctions = "CLOUD_FUNCTIONS",
}

/**
 * The user agent used during scanning.
 */
export enum ScanConfigUserAgentEnum {
  UserAgentUnspecified = "USER_AGENT_UNSPECIFIED",
  ChromeLinux = "CHROME_LINUX",
  ChromeAndroid = "CHROME_ANDROID",
  SafariIphone = "SAFARI_IPHONE",
}

/**
 * A ScanConfig resource contains the configurations to launch a scan.
 */
export class ScanConfig extends SpeakeasyBase {
  /**
   * Scan authentication configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authentication" })
  @Type(() => Authentication)
  authentication?: Authentication;

  /**
   * The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blacklistPatterns" })
  blacklistPatterns?: string[];

  /**
   * Required. The user provided display name of the ScanConfig.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * Controls export of scan configurations and results to Security Command Center.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "exportToSecurityCommandCenter" })
  exportToSecurityCommandCenter?: ScanConfigExportToSecurityCommandCenterEnum;

  /**
   * Whether to keep scanning even if most requests return HTTP error codes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ignoreHttpStatusErrors" })
  ignoreHttpStatusErrors?: boolean;

  /**
   * A ScanRun is a output-only resource representing an actual run of the scan. Next id: 12
   */
  @SpeakeasyMetadata()
  @Expose({ name: "latestRun" })
  @Type(() => ScanRun)
  latestRun?: ScanRun;

  /**
   * Whether the scan config is managed by Web Security Scanner, output only.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "managedScan" })
  managedScan?: boolean;

  /**
   * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of [5, 20] range will be rejected with INVALID_ARGUMENT error.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxQps" })
  maxQps?: number;

  /**
   * The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The risk level selected for the scan
   */
  @SpeakeasyMetadata()
  @Expose({ name: "riskLevel" })
  riskLevel?: ScanConfigRiskLevelEnum;

  /**
   * Scan schedule configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "schedule" })
  @Type(() => Schedule)
  schedule?: Schedule;

  /**
   * Required. The starting URLs from which the scanner finds site pages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startingUrls" })
  startingUrls?: string[];

  /**
   * Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticIpScan" })
  staticIpScan?: boolean;

  /**
   * Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetPlatforms" })
  targetPlatforms?: ScanConfigTargetPlatformsEnum[];

  /**
   * The user agent used during scanning.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userAgent" })
  userAgent?: ScanConfigUserAgentEnum;
}
