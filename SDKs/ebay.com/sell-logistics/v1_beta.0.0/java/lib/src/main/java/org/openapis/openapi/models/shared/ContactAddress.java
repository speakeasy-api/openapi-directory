/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ContactAddress - This complex type specifies the details of a geographical address.
 */
public class ContactAddress {
    /**
     * The first line of the street address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLine1")
    public String addressLine1;

    public ContactAddress withAddressLine1(String addressLine1) {
        this.addressLine1 = addressLine1;
        return this;
    }
    
    /**
     * The second line of the street address. Use this field for additional address information, such as a suite or apartment number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addressLine2")
    public String addressLine2;

    public ContactAddress withAddressLine2(String addressLine2) {
        this.addressLine2 = addressLine2;
        return this;
    }
    
    /**
     * The city in which the address is located.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    public String city;

    public ContactAddress withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The country of the address, represented as two-letter &lt;a href="https://www.iso.org/iso-3166-country-codes.html" title="https://www.iso.org" target="_blank"&gt;ISO 3166&lt;/a&gt; country code. For example, &lt;code&gt;US&lt;/code&gt; represents the United States and &lt;code&gt;DE&lt;/code&gt; represents Germany. For implementation help, refer to &lt;a href='https://developer.ebay.com/api-docs/sell/logistics/types/bas:CountryCodeEnum'&gt;eBay API documentation&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    public String countryCode;

    public ContactAddress withCountryCode(String countryCode) {
        this.countryCode = countryCode;
        return this;
    }
    
    /**
     * The county (not country) in which the address is located. Counties typically contain multiple cities or towns.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("county")
    public String county;

    public ContactAddress withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * The postal code of the address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postalCode")
    public String postalCode;

    public ContactAddress withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }
    
    /**
     * The state or province in which the address is located. States and provinces often contain multiple counties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stateOrProvince")
    public String stateOrProvince;

    public ContactAddress withStateOrProvince(String stateOrProvince) {
        this.stateOrProvince = stateOrProvince;
        return this;
    }
    
    public ContactAddress(){}
}
