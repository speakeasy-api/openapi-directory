// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAvailableNumbersFeaturesEnum - Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
type GetAvailableNumbersFeaturesEnum string

const (
	GetAvailableNumbersFeaturesEnumSms         GetAvailableNumbersFeaturesEnum = "SMS"
	GetAvailableNumbersFeaturesEnumVoice       GetAvailableNumbersFeaturesEnum = "VOICE"
	GetAvailableNumbersFeaturesEnumSmsVoice    GetAvailableNumbersFeaturesEnum = "SMS,VOICE"
	GetAvailableNumbersFeaturesEnumMms         GetAvailableNumbersFeaturesEnum = "MMS"
	GetAvailableNumbersFeaturesEnumSmsMms      GetAvailableNumbersFeaturesEnum = "SMS,MMS"
	GetAvailableNumbersFeaturesEnumVoiceMms    GetAvailableNumbersFeaturesEnum = "VOICE,MMS"
	GetAvailableNumbersFeaturesEnumSmsMmsVoice GetAvailableNumbersFeaturesEnum = "SMS,MMS,VOICE"
)

func (e *GetAvailableNumbersFeaturesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SMS":
		fallthrough
	case "VOICE":
		fallthrough
	case "SMS,VOICE":
		fallthrough
	case "MMS":
		fallthrough
	case "SMS,MMS":
		fallthrough
	case "VOICE,MMS":
		fallthrough
	case "SMS,MMS,VOICE":
		*e = GetAvailableNumbersFeaturesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAvailableNumbersFeaturesEnum: %s", s)
	}
}

type GetAvailableNumbersQueryParams struct {
	// The two character country code to filter on (in ISO 3166-1 alpha-2 format)
	Country string `queryParam:"style=form,explode=true,name=country"`
	// Available features are `SMS`, `VOICE` and `MMS`. To look for numbers that support multiple features, use a comma-separated value: `SMS,MMS,VOICE`.
	Features *GetAvailableNumbersFeaturesEnum `queryParam:"style=form,explode=true,name=features"`
	// Page index
	Index *int64 `queryParam:"style=form,explode=true,name=index"`
	// The number pattern you want to search for. Use in conjunction with `search_pattern`.
	Pattern *string `queryParam:"style=form,explode=true,name=pattern"`
	// The strategy you want to use for matching:
	//
	//
	// * `0` - Search for numbers that start with `pattern` (Note: all numbers are in E.164 format, so the starting pattern includes the country code, such as 1 for USA)
	// * `1` - Search for numbers that contain `pattern`
	// * `2` - Search for numbers that end with `pattern`
	//
	SearchPattern *shared.SearchPatternEnum `queryParam:"style=form,explode=true,name=search_pattern"`
	// Page size
	Size *int64 `queryParam:"style=form,explode=true,name=size"`
	// Set this parameter to filter the type of number, such as mobile or landline
	Type *shared.TypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetAvailableNumbersRequest struct {
	QueryParams GetAvailableNumbersQueryParams
}

type GetAvailableNumbersResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Unauthorized
	AccountUnauthorized *shared.AccountUnauthorized
	// OK
	AvailableNumbers *shared.AvailableNumbers
}
