// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// AuthorizeRealmEnum - User type to be authorized (usually 'customer')
type AuthorizeRealmEnum string

const (
	AuthorizeRealmEnumCustomer    AuthorizeRealmEnum = "customer"
	AuthorizeRealmEnumContributor AuthorizeRealmEnum = "contributor"
)

func (e AuthorizeRealmEnum) ToPointer() *AuthorizeRealmEnum {
	return &e
}

func (e *AuthorizeRealmEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "contributor":
		*e = AuthorizeRealmEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizeRealmEnum: %v", v)
	}
}

// AuthorizeResponseTypeEnum - Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'
type AuthorizeResponseTypeEnum string

const (
	AuthorizeResponseTypeEnumCode AuthorizeResponseTypeEnum = "code"
)

func (e AuthorizeResponseTypeEnum) ToPointer() *AuthorizeResponseTypeEnum {
	return &e
}

func (e *AuthorizeResponseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "code":
		*e = AuthorizeResponseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthorizeResponseTypeEnum: %v", v)
	}
}

type AuthorizeRequest struct {
	// Client ID (Consumer Key) of your application
	ClientID string `queryParam:"style=form,explode=true,name=client_id"`
	// User type to be authorized (usually 'customer')
	Realm *AuthorizeRealmEnum `queryParam:"style=form,explode=true,name=realm"`
	// The callback URI to send the request to after authorization; must use a host name that is registered with your application
	RedirectURI string `queryParam:"style=form,explode=true,name=redirect_uri"`
	// Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'
	ResponseType AuthorizeResponseTypeEnum `queryParam:"style=form,explode=true,name=response_type"`
	// Space-separated list of scopes to be authorized
	Scope *string `queryParam:"style=form,explode=true,name=scope"`
	// Unique value used by the calling app to verify the request
	State string `queryParam:"style=form,explode=true,name=state"`
}

type AuthorizeResponse struct {
	// Redirect user to authenticate with Shutterstock
	AuthorizeResponse *string
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
