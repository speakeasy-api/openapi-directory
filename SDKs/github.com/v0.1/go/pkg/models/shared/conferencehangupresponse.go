// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ConferenceHangupResponseMessageEnum - Response message
type ConferenceHangupResponseMessageEnum string

const (
	ConferenceHangupResponseMessageEnumConferenceHangupExecuted                 ConferenceHangupResponseMessageEnum = "Conference Hangup Executed"
	ConferenceHangupResponseMessageEnumConferenceNameParameterMustBePresent     ConferenceHangupResponseMessageEnum = "ConferenceName Parameter must be present"
	ConferenceHangupResponseMessageEnumMemberIDParameterMustBePresent           ConferenceHangupResponseMessageEnum = "MemberID Parameter must be present"
	ConferenceHangupResponseMessageEnumConferenceHangupFailedConferenceNotFound ConferenceHangupResponseMessageEnum = "Conference Hangup Failed -- Conference not found"
)

func (e ConferenceHangupResponseMessageEnum) ToPointer() *ConferenceHangupResponseMessageEnum {
	return &e
}

func (e *ConferenceHangupResponseMessageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Conference Hangup Executed":
		fallthrough
	case "ConferenceName Parameter must be present":
		fallthrough
	case "MemberID Parameter must be present":
		fallthrough
	case "Conference Hangup Failed -- Conference not found":
		*e = ConferenceHangupResponseMessageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConferenceHangupResponseMessageEnum: %v", v)
	}
}

// ConferenceHangupResponse - Response
type ConferenceHangupResponse struct {
	// List of affected members
	Members []string `json:"Members,omitempty"`
	// Response message
	Message ConferenceHangupResponseMessageEnum `json:"Message"`
	// Whether the request was successful or not
	Success bool `json:"Success"`
}
