/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export enum PermissionAccessModeEnum {
  View = "VIEW",
  Store = "STORE",
  Query = "QUERY",
  Stream = "STREAM",
}

export class PermissionDateRange extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "from" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  from?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "to" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  to?: Date;
}

export enum PermissionFrequencyUnitEnum {
  Hour = "HOUR",
  Week = "WEEK",
  Day = "DAY",
  Month = "MONTH",
  Year = "YEAR",
}

export class PermissionFrequency extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "repeats" })
  repeats?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit?: PermissionFrequencyUnitEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: number;
}

export class Permission extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "accessMode" })
  accessMode: PermissionAccessModeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "dataEraseAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  dataEraseAt: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "dateRange" })
  @Type(() => PermissionDateRange)
  dateRange: PermissionDateRange;

  @SpeakeasyMetadata()
  @Expose({ name: "frequency" })
  @Type(() => PermissionFrequency)
  frequency: PermissionFrequency;
}
