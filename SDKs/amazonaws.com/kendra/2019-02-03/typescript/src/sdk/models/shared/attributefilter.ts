/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DocumentAttribute } from "./documentattribute";
import { Expose, Type } from "class-transformer";

/**
 * <p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message "<code>AttributeFilter</code> cannot have a depth of more than 2."</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message "<code>AttributeFilter</code> cannot have a length of more than 10".</p>
 */
export class AttributeFilter extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: AttributeFilter })
  @Expose({ name: "AndAllFilters" })
  @Type(() => AttributeFilter)
  andAllFilters?: AttributeFilter[];

  @SpeakeasyMetadata()
  @Expose({ name: "ContainsAll" })
  @Type(() => DocumentAttribute)
  containsAll?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "ContainsAny" })
  @Type(() => DocumentAttribute)
  containsAny?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "EqualsTo" })
  @Type(() => DocumentAttribute)
  equalsTo?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "GreaterThan" })
  @Type(() => DocumentAttribute)
  greaterThan?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "GreaterThanOrEquals" })
  @Type(() => DocumentAttribute)
  greaterThanOrEquals?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "LessThan" })
  @Type(() => DocumentAttribute)
  lessThan?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "LessThanOrEquals" })
  @Type(() => DocumentAttribute)
  lessThanOrEquals?: DocumentAttribute;

  @SpeakeasyMetadata()
  @Expose({ name: "NotFilter" })
  @Type(() => AttributeFilter)
  notFilter?: AttributeFilter;

  @SpeakeasyMetadata({ elemType: AttributeFilter })
  @Expose({ name: "OrAllFilters" })
  @Type(() => AttributeFilter)
  orAllFilters?: AttributeFilter[];
}
