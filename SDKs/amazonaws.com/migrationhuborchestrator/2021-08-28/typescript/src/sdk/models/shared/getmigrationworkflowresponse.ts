/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { MigrationWorkflowStatusEnumEnum } from "./migrationworkflowstatusenumenum";
import { StepInput } from "./stepinput";
import { Tool } from "./tool";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class GetMigrationWorkflowResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "adsApplicationConfigurationId" })
  adsApplicationConfigurationId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "adsApplicationName" })
  adsApplicationName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "arn" })
  arn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "completedSteps" })
  completedSteps?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "lastStopTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastStopTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: MigrationWorkflowStatusEnumEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "statusMessage" })
  statusMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "templateId" })
  templateId?: string;

  @SpeakeasyMetadata({ elemType: Tool })
  @Expose({ name: "tools" })
  @Type(() => Tool)
  tools?: Tool[];

  @SpeakeasyMetadata()
  @Expose({ name: "totalSteps" })
  totalSteps?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "workflowBucket" })
  workflowBucket?: string;

  @SpeakeasyMetadata({ elemType: StepInput })
  @Expose({ name: "workflowInputs" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, StepInput> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], StepInput);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  workflowInputs?: Record<string, StepInput>;
}
