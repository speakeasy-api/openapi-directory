// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type WritableDeviceRackFaceEnum string

const (
	WritableDeviceRackFaceEnumZero WritableDeviceRackFaceEnum = "0"
	WritableDeviceRackFaceEnumOne  WritableDeviceRackFaceEnum = "1"
)

func (e *WritableDeviceRackFaceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = WritableDeviceRackFaceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceRackFaceEnum: %s", s)
	}
}

type WritableDeviceStatusEnum string

const (
	WritableDeviceStatusEnumOne   WritableDeviceStatusEnum = "1"
	WritableDeviceStatusEnumZero  WritableDeviceStatusEnum = "0"
	WritableDeviceStatusEnumTwo   WritableDeviceStatusEnum = "2"
	WritableDeviceStatusEnumThree WritableDeviceStatusEnum = "3"
	WritableDeviceStatusEnumFour  WritableDeviceStatusEnum = "4"
	WritableDeviceStatusEnumFive  WritableDeviceStatusEnum = "5"
)

func (e *WritableDeviceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "1":
		fallthrough
	case "0":
		fallthrough
	case "2":
		fallthrough
	case "3":
		fallthrough
	case "4":
		fallthrough
	case "5":
		*e = WritableDeviceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for WritableDeviceStatusEnum: %s", s)
	}
}

type WritableDeviceInput struct {
	// A unique tag used to identify this device
	AssetTag         *string                     `json:"asset_tag,omitempty"`
	Cluster          *int64                      `json:"cluster,omitempty"`
	Comments         *string                     `json:"comments,omitempty"`
	CustomFields     map[string]interface{}      `json:"custom_fields,omitempty"`
	DeviceRole       int64                       `json:"device_role"`
	DeviceType       int64                       `json:"device_type"`
	Face             *WritableDeviceRackFaceEnum `json:"face,omitempty"`
	LocalContextData *string                     `json:"local_context_data,omitempty"`
	Name             *string                     `json:"name,omitempty"`
	Platform         *int64                      `json:"platform,omitempty"`
	// The lowest-numbered unit occupied by the device
	Position       *int64                    `json:"position,omitempty"`
	PrimaryIp4     *int64                    `json:"primary_ip4,omitempty"`
	PrimaryIp6     *int64                    `json:"primary_ip6,omitempty"`
	Rack           *int64                    `json:"rack,omitempty"`
	Serial         *string                   `json:"serial,omitempty"`
	Site           int64                     `json:"site"`
	Status         *WritableDeviceStatusEnum `json:"status,omitempty"`
	Tags           []string                  `json:"tags,omitempty"`
	Tenant         *int64                    `json:"tenant,omitempty"`
	VcPosition     *int64                    `json:"vc_position,omitempty"`
	VcPriority     *int64                    `json:"vc_priority,omitempty"`
	VirtualChassis *int64                    `json:"virtual_chassis,omitempty"`
}
