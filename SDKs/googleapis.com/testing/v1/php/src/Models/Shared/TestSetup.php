<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TestSetup - A description of how to set up the Android device prior to running the test.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TestSetup
{
    /**
     * Identifies an account and how to log into it.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Account $account
     */
	#[\JMS\Serializer\Annotation\SerializedName('account')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Account')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Account $account = null;
    
    /**
     * APKs to install in addition to those being directly tested. Currently capped at 100.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Apk> $additionalApks
     */
	#[\JMS\Serializer\Annotation\SerializedName('additionalApks')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Apk>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $additionalApks = null;
    
    /**
     * List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.
     * 
     * @var ?array<string> $directoriesToPull
     */
	#[\JMS\Serializer\Annotation\SerializedName('directoriesToPull')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $directoriesToPull = null;
    
    /**
     * Whether to prevent all runtime permissions to be granted at app install
     * 
     * @var ?bool $dontAutograntPermissions
     */
	#[\JMS\Serializer\Annotation\SerializedName('dontAutograntPermissions')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $dontAutograntPermissions = null;
    
    /**
     * Environment variables to set for the test (only applicable for instrumentation tests).
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\EnvironmentVariable> $environmentVariables
     */
	#[\JMS\Serializer\Annotation\SerializedName('environmentVariables')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\EnvironmentVariable>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $environmentVariables = null;
    
    /**
     * List of files to push to the device before starting the test.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\DeviceFile> $filesToPush
     */
	#[\JMS\Serializer\Annotation\SerializedName('filesToPush')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\DeviceFile>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $filesToPush = null;
    
    /**
     * The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
     * 
     * @var ?string $networkProfile
     */
	#[\JMS\Serializer\Annotation\SerializedName('networkProfile')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $networkProfile = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('systrace')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SystraceSetup')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SystraceSetup $systrace = null;
    
	public function __construct()
	{
		$this->account = null;
		$this->additionalApks = null;
		$this->directoriesToPull = null;
		$this->dontAutograntPermissions = null;
		$this->environmentVariables = null;
		$this->filesToPush = null;
		$this->networkProfile = null;
		$this->systrace = null;
	}
}
