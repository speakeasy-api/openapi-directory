/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * resources concerning a "Beleg"
 */
export class Beleg {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Signs a receipt and stores it in the "Datenerfassungsprotokoll".
   */
  addBeleg(
    req: operations.AddBelegRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.AddBelegResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.AddBelegRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "belegdaten",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.AddBelegResponse = new operations.AddBelegResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
        headers: utils.getHeadersFromResponse(httpRes.headers),
      });
      switch (true) {
        case httpRes?.status == 201:
          break;
        case [400, 403, 409, 415, 429, 500].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Generates an `Abschlussbeleg`.
   */
  createAbschluss(
    req: operations.CreateAbschlussRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAbschlussResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAbschlussRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/registrierkassen/{registrierkasseUuid}/abschluss",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "abschlussbelegdaten",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateAbschlussResponse =
        new operations.CreateAbschlussResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
   */
  getBeleg(
    req: operations.GetBelegRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBelegResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBelegRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/registrierkassen/{registrierkasseUuid}/belege/{belegUuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBelegResponse = new operations.GetBelegResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beleg = utils.objectToClass(httpRes?.data, shared.Beleg);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves the `Beleg` collection from the "Datenerfassungsprotokoll".
   */
  getBelege(
    req: operations.GetBelegeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBelegeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBelegeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/registrierkassen/{registrierkasseUuid}/belege",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBelegeResponse =
        new operations.GetBelegeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.belege = utils.objectToClass(httpRes?.data, shared.Belege);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieves a particular `Beleg` from the "Datenerfassungsprotokoll".
   */
  getBelegeBelegUuid(
    req: operations.GetBelegeBelegUuidRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBelegeBelegUuidResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBelegeBelegUuidRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/belege/{belegUuid}", req);

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBelegeBelegUuidResponse =
        new operations.GetBelegeBelegUuidResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.beleg = utils.objectToClass(httpRes?.data, shared.Beleg);
          }
          break;
        case httpRes?.status == 404:
          break;
      }

      return res;
    });
  }
}
