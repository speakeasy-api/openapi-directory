/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateNewFactorServerList = ["https://verify.twilio.com"] as const;

export class CreateNewFactorSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateNewFactorCreateNewFactorRequest extends SpeakeasyBase {
  /**
   * The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
   */
  @SpeakeasyMetadata({ data: "form, name=Binding.Alg" })
  bindingAlg?: string;

  /**
   * The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.
   *
   * @remarks
   *
   * Required when `factor_type` is `push`
   */
  @SpeakeasyMetadata({ data: "form, name=Binding.PublicKey" })
  bindingPublicKey?: string;

  /**
   * The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.
   *
   * @remarks
   *
   * Used when `factor_type` is `totp`
   */
  @SpeakeasyMetadata({ data: "form, name=Binding.Secret" })
  bindingSecret?: string;

  @SpeakeasyMetadata({ data: "form, name=Config.Alg" })
  configAlg?: shared.NewFactorEnumTotpAlgorithmsEnum;

  /**
   * The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.
   *
   * @remarks
   *
   * Required when `factor_type` is `push`.
   */
  @SpeakeasyMetadata({ data: "form, name=Config.AppId" })
  configAppId?: string;

  /**
   * Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.
   *
   * @remarks
   *
   * Used when `factor_type` is `totp`
   */
  @SpeakeasyMetadata({ data: "form, name=Config.CodeLength" })
  configCodeLength?: number;

  @SpeakeasyMetadata({ data: "form, name=Config.NotificationPlatform" })
  configNotificationPlatform?: shared.NewFactorEnumNotificationPlatformsEnum;

  /**
   * For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.
   *
   * @remarks
   *
   * Required when `factor_type` is `push`.
   */
  @SpeakeasyMetadata({ data: "form, name=Config.NotificationToken" })
  configNotificationToken?: string;

  /**
   * The Verify Push SDK version used to configure the factor
   *
   * @remarks
   *
   * Required when `factor_type` is `push`
   */
  @SpeakeasyMetadata({ data: "form, name=Config.SdkVersion" })
  configSDKVersion?: string;

  /**
   * The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.
   *
   * @remarks
   *
   * Used when `factor_type` is `totp`
   */
  @SpeakeasyMetadata({ data: "form, name=Config.Skew" })
  configSkew?: number;

  /**
   * Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.
   *
   * @remarks
   *
   * Used when `factor_type` is `totp`
   */
  @SpeakeasyMetadata({ data: "form, name=Config.TimeStep" })
  configTimeStep?: number;

  @SpeakeasyMetadata({ data: "form, name=FactorType" })
  factorType: shared.NewFactorEnumFactorTypesEnum;

  /**
   * The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors.
   *
   * @remarks
   * For `factor_type` `push`, this could be a device name.
   * For `factor_type` `totp`, this value is used as the “account name” in constructing the `binding.uri` property.
   * At the same time, we recommend avoiding providing PII.
   */
  @SpeakeasyMetadata({ data: "form, name=FriendlyName" })
  friendlyName: string;

  /**
   * Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{"os": "Android"}`. Can be up to 1024 characters in length.
   */
  @SpeakeasyMetadata({ data: "form, name=Metadata" })
  metadata?: any;
}

export class CreateNewFactorRequest extends SpeakeasyBase {
  /**
   * Customer unique identity for the Entity owner of the Factor. This identifier should be immutable, not PII, length between 8 and 64 characters, and generated by your external system, such as your user's UUID, GUID, or SID. It can only contain dash (-) separated alphanumeric characters.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=Identity",
  })
  identity: string;

  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateNewFactorCreateNewFactorRequest;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;
}

export class CreateNewFactorResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  verifyV2ServiceEntityNewFactor?: shared.VerifyV2ServiceEntityNewFactor;
}
