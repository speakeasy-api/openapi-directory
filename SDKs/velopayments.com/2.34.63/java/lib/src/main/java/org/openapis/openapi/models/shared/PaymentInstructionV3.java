/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PaymentInstructionV3 - Instruction for creating a payment
 */
public class PaymentInstructionV3 {
    /**
     * &lt;p&gt;Amount to send to Payee&lt;/p&gt;
     * &lt;p&gt;The maximum payment amount is dependent on the currency&lt;/p&gt;
     * 
     */
    @JsonProperty("amount")
    public Long amount;
    public PaymentInstructionV3 withAmount(Long amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Valid ISO 4217 3 letter currency code. See the &lt;a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank" a&gt;ISO specification&lt;/a&gt; for details.
     */
    @JsonProperty("currency")
    public String currency;
    public PaymentInstructionV3 withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * &lt;p&gt;Any value here will override the memo value in the parent payout&lt;/p&gt;
     * &lt;p&gt;This should be the reference field on the statement seen by the payee (but not via ACH)&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMemo")
    public String paymentMemo;
    public PaymentInstructionV3 withPaymentMemo(String paymentMemo) {
        this.paymentMemo = paymentMemo;
        return this;
    }
    
    /**
     * &lt;p&gt;Metadata about the payment that may be relevant to the specific rails or remote system making the payout&lt;/p&gt;
     * &lt;p&gt;The structure of the data will be dictated by the requirements of the payment rails&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paymentMetadata")
    public String paymentMetadata;
    public PaymentInstructionV3 withPaymentMetadata(String paymentMetadata) {
        this.paymentMetadata = paymentMetadata;
        return this;
    }
    
    /**
     * A reference identifier for the payor for the given payee payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payorPaymentId")
    public String payorPaymentId;
    public PaymentInstructionV3 withPayorPaymentId(String payorPaymentId) {
        this.payorPaymentId = payorPaymentId;
        return this;
    }
    
    /**
     * Your identifier for the payee
     */
    @JsonProperty("remoteId")
    public String remoteId;
    public PaymentInstructionV3 withRemoteId(String remoteId) {
        this.remoteId = remoteId;
        return this;
    }
    
    /**
     * &lt;p&gt;The identifier for the remote payments system if not Velo&lt;/p&gt;
     * &lt;p&gt;Should only be used after consultation with Velo Payments&lt;/p&gt;
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remoteSystemId")
    public String remoteSystemId;
    public PaymentInstructionV3 withRemoteSystemId(String remoteSystemId) {
        this.remoteSystemId = remoteSystemId;
        return this;
    }
    
    /**
     * Must match a valid source account name belonging to the payor
     */
    @JsonProperty("sourceAccountName")
    public String sourceAccountName;
    public PaymentInstructionV3 withSourceAccountName(String sourceAccountName) {
        this.sourceAccountName = sourceAccountName;
        return this;
    }
    
    /**
     * Optionally choose a specific transmission method for the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transmissionType")
    public PaymentInstructionV3TransmissionTypeEnum transmissionType;
    public PaymentInstructionV3 withTransmissionType(PaymentInstructionV3TransmissionTypeEnum transmissionType) {
        this.transmissionType = transmissionType;
        return this;
    }
    
}
