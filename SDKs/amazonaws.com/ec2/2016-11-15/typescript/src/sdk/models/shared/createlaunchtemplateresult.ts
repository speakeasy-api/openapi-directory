/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * Describes a tag.
 */
export class CreateLaunchTemplateResultLaunchTemplateTags extends SpeakeasyBase {
  @SpeakeasyMetadata()
  key?: string;

  @SpeakeasyMetadata()
  value?: string;
}

/**
 * Information about the launch template.
 */
export class CreateLaunchTemplateResultLaunchTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata()
  createTime?: Date;

  @SpeakeasyMetadata()
  createdBy?: string;

  @SpeakeasyMetadata()
  defaultVersionNumber?: number;

  @SpeakeasyMetadata()
  latestVersionNumber?: number;

  @SpeakeasyMetadata()
  launchTemplateId?: string;

  @SpeakeasyMetadata()
  launchTemplateName?: string;

  @SpeakeasyMetadata({ elemType: CreateLaunchTemplateResultLaunchTemplateTags })
  tags?: CreateLaunchTemplateResultLaunchTemplateTags[];
}

/**
 * The error code and error message that is returned for a parameter or parameter combination that is not valid when a new launch template or new version of a launch template is created.
 */
export class CreateLaunchTemplateResultWarningErrors extends SpeakeasyBase {
  @SpeakeasyMetadata()
  code?: string;

  @SpeakeasyMetadata()
  message?: string;
}

/**
 * If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
 */
export class CreateLaunchTemplateResultWarning extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: CreateLaunchTemplateResultWarningErrors })
  errors?: CreateLaunchTemplateResultWarningErrors[];
}

/**
 * Success
 */
export class CreateLaunchTemplateResult extends SpeakeasyBase {
  @SpeakeasyMetadata()
  launchTemplate?: CreateLaunchTemplateResultLaunchTemplate;

  @SpeakeasyMetadata()
  warning?: CreateLaunchTemplateResultWarning;
}
