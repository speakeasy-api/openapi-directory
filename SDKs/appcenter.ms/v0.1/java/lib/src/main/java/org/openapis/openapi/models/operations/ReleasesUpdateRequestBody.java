/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;



/**
 * ReleasesUpdateRequestBody - A request containing information for updating a release.
 */
public class ReleasesUpdateRequestBody {
    /**
     * Contains metadata about the build that produced the release being uploaded
     */
    
    public ReleasesUpdateRequestBodyBuild build;

    public ReleasesUpdateRequestBody withBuild(ReleasesUpdateRequestBodyBuild build) {
        this.build = build;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in future releases - use destinations instead. Id of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both destination name and id are passed, the id is taking precedence.
     */
    
    public String destinationId;

    public ReleasesUpdateRequestBody withDestinationId(String destinationId) {
        this.destinationId = destinationId;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in future releases - use destinations instead. Name of a destination. The release will be associated with this destination. If the destination doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     */
    
    public String destinationName;

    public ReleasesUpdateRequestBody withDestinationName(String destinationName) {
        this.destinationName = destinationName;
        return this;
    }
    
    /**
     * Not used anymore.
     */
    
    public String destinationType;

    public ReleasesUpdateRequestBody withDestinationType(String destinationType) {
        this.destinationType = destinationType;
        return this;
    }
    
    /**
     * Distribute this release under the following list of destinations (store groups or distribution groups).
     */
    
    public ReleasesUpdateRequestBodyDestinations[] destinations;

    public ReleasesUpdateRequestBody withDestinations(ReleasesUpdateRequestBodyDestinations[] destinations) {
        this.destinations = destinations;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in future releases - use destinations instead. Id of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     */
    
    public String distributionGroupId;

    public ReleasesUpdateRequestBody withDistributionGroupId(String distributionGroupId) {
        this.distributionGroupId = distributionGroupId;
        return this;
    }
    
    /**
     * OBSOLETE. Will be removed in future releases - use destinations instead. Name of a distribution group. The release will be associated with this distribution group. If the distribution group doesn't exist a 400 is returned. If both distribution group name and id are passed, the id is taking precedence.
     */
    
    public String distributionGroupName;

    public ReleasesUpdateRequestBody withDistributionGroupName(String distributionGroupName) {
        this.distributionGroupName = distributionGroupName;
        return this;
    }
    
    /**
     * A boolean which determines whether this version should be a mandatory update or not.
     */
    
    public Boolean mandatoryUpdate;

    public ReleasesUpdateRequestBody withMandatoryUpdate(Boolean mandatoryUpdate) {
        this.mandatoryUpdate = mandatoryUpdate;
        return this;
    }
    
    /**
     * An object containing all the release metadata.
     */
    
    public ReleasesUpdateRequestBodyMetadata metadata;

    public ReleasesUpdateRequestBody withMetadata(ReleasesUpdateRequestBodyMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * A boolean which determines whether to notify testers of a new release, default to true.
     */
    
    public Boolean notifyTesters;

    public ReleasesUpdateRequestBody withNotifyTesters(Boolean notifyTesters) {
        this.notifyTesters = notifyTesters;
        return this;
    }
    
    /**
     * Release notes for this release.
     */
    
    public String releaseNotes;

    public ReleasesUpdateRequestBody withReleaseNotes(String releaseNotes) {
        this.releaseNotes = releaseNotes;
        return this;
    }
    
    public ReleasesUpdateRequestBody(){}
}
