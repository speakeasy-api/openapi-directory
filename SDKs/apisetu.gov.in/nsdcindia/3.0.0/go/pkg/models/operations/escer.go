// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type EscerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type EscerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// DOCID
	Docid string `json:"DOCID"`
	// Full name
	FullName string `json:"FullName"`
}

// EscerRequestBodyFormatEnum - The format of the certificate in response.
type EscerRequestBodyFormatEnum string

const (
	EscerRequestBodyFormatEnumPdf EscerRequestBodyFormatEnum = "pdf"
)

func (e EscerRequestBodyFormatEnum) ToPointer() *EscerRequestBodyFormatEnum {
	return &e
}

func (e *EscerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = EscerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EscerRequestBodyFormatEnum: %v", v)
	}
}

// EscerRequestBody - Request format
type EscerRequestBody struct {
	CertificateParameters *EscerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format EscerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Escer504ApplicationJSONErrorEnum string

const (
	Escer504ApplicationJSONErrorEnumGatewayTimeout Escer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Escer504ApplicationJSONErrorEnum) ToPointer() *Escer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Escer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer504ApplicationJSONErrorDescriptionEnum string

const (
	Escer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Escer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Escer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Escer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer504ApplicationJSON - Gateway timeout
type Escer504ApplicationJSON struct {
	Error            *Escer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer503ApplicationJSONErrorEnum string

const (
	Escer503ApplicationJSONErrorEnumServiceUnavailable Escer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Escer503ApplicationJSONErrorEnum) ToPointer() *Escer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Escer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer503ApplicationJSONErrorDescriptionEnum string

const (
	Escer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Escer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Escer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Escer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer503ApplicationJSON - Service unavailable
type Escer503ApplicationJSON struct {
	Error            *Escer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer502ApplicationJSONErrorEnum string

const (
	Escer502ApplicationJSONErrorEnumBadGatewy Escer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Escer502ApplicationJSONErrorEnum) ToPointer() *Escer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Escer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer502ApplicationJSONErrorDescriptionEnum string

const (
	Escer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Escer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Escer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Escer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer502ApplicationJSON - Bad gateway
type Escer502ApplicationJSON struct {
	Error            *Escer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer500ApplicationJSONErrorEnum string

const (
	Escer500ApplicationJSONErrorEnumInternalServerError Escer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Escer500ApplicationJSONErrorEnum) ToPointer() *Escer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Escer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer500ApplicationJSONErrorDescriptionEnum string

const (
	Escer500ApplicationJSONErrorDescriptionEnumInternalServerError Escer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Escer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Escer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer500ApplicationJSON - Internal server error
type Escer500ApplicationJSON struct {
	Error            *Escer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer404ApplicationJSONErrorEnum string

const (
	Escer404ApplicationJSONErrorEnumRecordNotFound Escer404ApplicationJSONErrorEnum = "record_not_found"
	Escer404ApplicationJSONErrorEnumURLNotFound    Escer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Escer404ApplicationJSONErrorEnum) ToPointer() *Escer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Escer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer404ApplicationJSONErrorDescriptionEnum string

const (
	Escer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Escer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Escer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Escer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Escer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Escer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer404ApplicationJSON - No record found
type Escer404ApplicationJSON struct {
	Error            *Escer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer401ApplicationJSONErrorEnum string

const (
	Escer401ApplicationJSONErrorEnumInvalidAuthentication Escer401ApplicationJSONErrorEnum = "invalid_authentication"
	Escer401ApplicationJSONErrorEnumInvalidAuthorization  Escer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Escer401ApplicationJSONErrorEnum) ToPointer() *Escer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Escer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer401ApplicationJSONErrorDescriptionEnum string

const (
	Escer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Escer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Escer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Escer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Escer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Escer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer401ApplicationJSON - Unauthorized access
type Escer401ApplicationJSON struct {
	Error            *Escer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Escer400ApplicationJSONErrorEnum string

const (
	Escer400ApplicationJSONErrorEnumMissingParameter Escer400ApplicationJSONErrorEnum = "missing_parameter"
	Escer400ApplicationJSONErrorEnumInvalidParameter Escer400ApplicationJSONErrorEnum = "invalid_parameter"
	Escer400ApplicationJSONErrorEnumInvalidFormat    Escer400ApplicationJSONErrorEnum = "invalid_format"
	Escer400ApplicationJSONErrorEnumInvalidTxnid     Escer400ApplicationJSONErrorEnum = "invalid_txnid"
	Escer400ApplicationJSONErrorEnumInvalidConsentid Escer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Escer400ApplicationJSONErrorEnum) ToPointer() *Escer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Escer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Escer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Escer400ApplicationJSONErrorDescriptionEnum string

const (
	Escer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Escer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Escer400ApplicationJSONErrorDescriptionEnumBadRequest                              Escer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Escer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Escer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Escer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Escer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Escer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Escer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Escer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Escer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Escer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Escer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Escer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Escer400ApplicationJSON - Bad request
type Escer400ApplicationJSON struct {
	Error            *Escer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Escer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type EscerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Escer400ApplicationJSONObject *Escer400ApplicationJSON
	// Unauthorized access
	Escer401ApplicationJSONObject *Escer401ApplicationJSON
	// No record found
	Escer404ApplicationJSONObject *Escer404ApplicationJSON
	// Internal server error
	Escer500ApplicationJSONObject *Escer500ApplicationJSON
	// Bad gateway
	Escer502ApplicationJSONObject *Escer502ApplicationJSON
	// Service unavailable
	Escer503ApplicationJSONObject *Escer503ApplicationJSON
	// Gateway timeout
	Escer504ApplicationJSONObject *Escer504ApplicationJSON
}
