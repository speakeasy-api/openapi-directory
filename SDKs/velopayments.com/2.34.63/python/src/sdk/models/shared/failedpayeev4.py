"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import challengev4 as shared_challengev4
from ..shared import companyv4 as shared_companyv4
from ..shared import createindividualv4 as shared_createindividualv4
from ..shared import createpayeeaddressv4 as shared_createpayeeaddressv4
from ..shared import createpaymentchannelv4 as shared_createpaymentchannelv4
from ..shared import payeepayorrefv4 as shared_payeepayorrefv4
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FailedPayeeV4:
    
    address: Optional[shared_createpayeeaddressv4.CreatePayeeAddressV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address'), 'exclude': lambda f: f is None }})  
    challenge: Optional[shared_challengev4.ChallengeV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('challenge'), 'exclude': lambda f: f is None }})
    r"""<p>Used to override the default challenge presented to the payee when they onboard</p>
    <p>Not used after the payee has onboarded</p>
    """  
    company: Optional[shared_companyv4.CompanyV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('company'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    individual: Optional[shared_createindividualv4.CreateIndividualV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual'), 'exclude': lambda f: f is None }})  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""An IETF BCP 47 language code which has been configured for use within this Velo environment.<BR>
    See the /v1/supportedLanguages endpoint to list the available codes for an environment.
    """  
    payee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payeeId'), 'exclude': lambda f: f is None }})  
    payment_channel: Optional[shared_createpaymentchannelv4.CreatePaymentChannelV4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentChannel'), 'exclude': lambda f: f is None }})  
    payor_refs: Optional[list[shared_payeepayorrefv4.PayeePayorRefV4]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payorRefs'), 'exclude': lambda f: f is None }})  
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Type of Payee. One of the following values: Individual, Company"""  
    