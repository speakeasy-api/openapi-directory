/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Key } from "./key";
import { Value } from "./value";
import { Expose, Transform, Type } from "class-transformer";

/**
 * A Datastore data object. An entity is limited to 1 megabyte when stored. That _roughly_ corresponds to a limit of 1 megabyte for the serialized form of this message.
 */
export class Entity extends SpeakeasyBase {
  /**
   * A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  @Type(() => Key)
  key?: Key;

  /**
   * The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The name must not contain more than 500 characters. The name cannot be `""`.
   */
  @SpeakeasyMetadata({ elemType: Value })
  @Expose({ name: "properties" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Value> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Value);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  properties?: Record<string, Value>;
}
