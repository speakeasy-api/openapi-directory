<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class TaxDeclarationInput
{
    /**
     * If the employee has approved withholding variation. e.g (0 - 100)
     * 
     * @var ?float $approvedWithholdingVariationPercentage
     */
	#[\JMS\Serializer\Annotation\SerializedName('ApprovedWithholdingVariationPercentage')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $approvedWithholdingVariationPercentage = null;
    
    /**
     * If the employee is Australian resident for tax purposes. e.g true or false
     * 
     * @var ?bool $australianResidentForTaxPurposes
     */
	#[\JMS\Serializer\Annotation\SerializedName('AustralianResidentForTaxPurposes')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $australianResidentForTaxPurposes = null;
    
    /**
     * If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
     * 
     * @var ?bool $eligibleToReceiveLeaveLoading
     */
	#[\JMS\Serializer\Annotation\SerializedName('EligibleToReceiveLeaveLoading')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $eligibleToReceiveLeaveLoading = null;
    
    /**
     * Address line 1 for employee home address
     * 
     * @var ?string $employeeID
     */
	#[\JMS\Serializer\Annotation\SerializedName('EmployeeID')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $employeeID = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('EmploymentBasis')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\EmploymentBasisEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?EmploymentBasisEnum $employmentBasis = null;
    
    /**
     * If employee has HECS or HELP debt. e.g true or false
     * 
     * @var ?bool $hasHELPDebt
     */
	#[\JMS\Serializer\Annotation\SerializedName('HasHELPDebt')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasHELPDebt = null;
    
    /**
     * If employee has financial supplement debt. e.g true or false
     * 
     * @var ?bool $hasSFSSDebt
     */
	#[\JMS\Serializer\Annotation\SerializedName('HasSFSSDebt')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasSFSSDebt = null;
    
    /**
     * If the employee is eligible for student startup loan rules
     * 
     * @var ?bool $hasStudentStartupLoan
     */
	#[\JMS\Serializer\Annotation\SerializedName('HasStudentStartupLoan')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasStudentStartupLoan = null;
    
    /**
     * If employee has trade support loan. e.g true or false
     * 
     * @var ?bool $hasTradeSupportLoanDebt
     */
	#[\JMS\Serializer\Annotation\SerializedName('HasTradeSupportLoanDebt')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasTradeSupportLoanDebt = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ResidencyStatus')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ResidencyStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ResidencyStatusEnum $residencyStatus = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('TFNExemptionType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\TFNExemptionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TFNExemptionTypeEnum $tfnExemptionType = null;
    
    /**
     * The tax file number e.g 123123123.
     * 
     * @var ?string $taxFileNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('TaxFileNumber')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $taxFileNumber = null;
    
    /**
     * If tax free threshold claimed. e.g true or false
     * 
     * @var ?bool $taxFreeThresholdClaimed
     */
	#[\JMS\Serializer\Annotation\SerializedName('TaxFreeThresholdClaimed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $taxFreeThresholdClaimed = null;
    
    /**
     * If has tax offset estimated then the tax offset estimated amount. e.g 100
     * 
     * @var ?float $taxOffsetEstimatedAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('TaxOffsetEstimatedAmount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $taxOffsetEstimatedAmount = null;
    
    /**
     * If the employee has requested that additional tax be withheld each pay run. e.g 50
     * 
     * @var ?float $upwardVariationTaxWithholdingAmount
     */
	#[\JMS\Serializer\Annotation\SerializedName('UpwardVariationTaxWithholdingAmount')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $upwardVariationTaxWithholdingAmount = null;
    
	public function __construct()
	{
		$this->approvedWithholdingVariationPercentage = null;
		$this->australianResidentForTaxPurposes = null;
		$this->eligibleToReceiveLeaveLoading = null;
		$this->employeeID = null;
		$this->employmentBasis = null;
		$this->hasHELPDebt = null;
		$this->hasSFSSDebt = null;
		$this->hasStudentStartupLoan = null;
		$this->hasTradeSupportLoanDebt = null;
		$this->residencyStatus = null;
		$this->tfnExemptionType = null;
		$this->taxFileNumber = null;
		$this->taxFreeThresholdClaimed = null;
		$this->taxOffsetEstimatedAmount = null;
		$this->upwardVariationTaxWithholdingAmount = null;
	}
}
