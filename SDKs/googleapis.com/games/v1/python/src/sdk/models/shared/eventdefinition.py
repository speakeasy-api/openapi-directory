"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import eventchild as shared_eventchild
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EventDefinitionVisibilityEnum(str, Enum):
    r"""The visibility of event being tracked in this definition."""
    EVENT_VISIBILITY_UNSPECIFIED = 'EVENT_VISIBILITY_UNSPECIFIED'
    REVEALED = 'REVEALED'
    HIDDEN = 'HIDDEN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventDefinition:
    r"""An event definition resource."""
    
    child_events: Optional[list[shared_eventchild.EventChild]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childEvents'), 'exclude': lambda f: f is None }})
    r"""A list of events that are a child of this event."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of what this event represents."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The name to display for the event."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the event."""  
    image_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageUrl'), 'exclude': lambda f: f is None }})
    r"""The base URL for the image that represents the event."""  
    is_default_image_url: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isDefaultImageUrl'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the icon image being returned is a default image, or is game-provided."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `games#eventDefinition`."""  
    visibility: Optional[EventDefinitionVisibilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility'), 'exclude': lambda f: f is None }})
    r"""The visibility of event being tracked in this definition."""  
    