// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MergedResultStateEnum - State of the resource
type MergedResultStateEnum string

const (
	MergedResultStateEnumUnknownState MergedResultStateEnum = "unknownState"
	MergedResultStateEnumPending      MergedResultStateEnum = "pending"
	MergedResultStateEnumInProgress   MergedResultStateEnum = "inProgress"
	MergedResultStateEnumComplete     MergedResultStateEnum = "complete"
)

func (e MergedResultStateEnum) ToPointer() *MergedResultStateEnum {
	return &e
}

func (e *MergedResultStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknownState":
		fallthrough
	case "pending":
		fallthrough
	case "inProgress":
		fallthrough
	case "complete":
		*e = MergedResultStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MergedResultStateEnum: %v", v)
	}
}

// MergedResult - Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.
type MergedResult struct {
	// Interprets a result so that humans and machines can act on it.
	Outcome *Outcome `json:"outcome,omitempty"`
	// State of the resource
	State *MergedResultStateEnum `json:"state,omitempty"`
	// The combined and rolled-up result of each test suite that was run as part of this environment. Combining: When the test cases from a suite are run in different steps (sharding), the results are added back together in one overview. (e.g., if shard1 has 2 failures and shard2 has 1 failure than the overview failure_count = 3). Rollup: When test cases from the same suite are run multiple times (flaky), the results are combined (e.g., if testcase1.run1 fails, testcase1.run2 passes, and both testcase2.run1 and testcase2.run2 fail then the overview flaky_count = 1 and failure_count = 1).
	TestSuiteOverviews []TestSuiteOverview `json:"testSuiteOverviews,omitempty"`
}
