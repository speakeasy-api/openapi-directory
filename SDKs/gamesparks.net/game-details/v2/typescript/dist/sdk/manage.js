"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manage = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
/**
 * Manage Restv 2 Controller
 */
var Manage = /** @class */ (function () {
    function Manage(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * copySnapshotToExistingGame
     */
    Manage.prototype.copySnapshotToExistingGameUsingPOST = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CopySnapshotToExistingGameUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/copy/to/{targetApiKey}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CopySnapshotToExistingGameUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * createQuery
     */
    Manage.prototype.createQueryUsingPOST = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateQueryUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/queries", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageQuery", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateQueryUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageQuery = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageQuery);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * createScreen
     */
    Manage.prototype.createScreenUsingPOST = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateScreenUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageScreen", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateScreenUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageScreen = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageScreen);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * createSnapshot
     */
    Manage.prototype.createSnapshotUsingPOST = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateSnapshotUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "snapshotCreationModel", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateSnapshotUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageSnapshot = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageSnapshot);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * createSnippet
     */
    Manage.prototype.createSnippetUsingPOST = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateSnippetUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snippets", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageSnippet", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "post", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.CreateSnippetUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageSnippet = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageSnippet);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * deleteQuery
     */
    Manage.prototype.deleteQueryUsingDELETE = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DELETEQueryUsingDELETERequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/queries/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DELETEQueryUsingDELETEResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * deleteScreen
     */
    Manage.prototype.deleteScreenUsingDELETE = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DELETEScreenUsingDELETERequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DELETEScreenUsingDELETEResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * deleteSnapshot
     */
    Manage.prototype.deleteSnapshotUsingDELETE = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DELETESnapshotUsingDELETERequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots/{snapshotId}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DELETESnapshotUsingDELETEResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case [200, 403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * deleteSnippet
     */
    Manage.prototype.deleteSnippetUsingDELETE = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DELETESnippetUsingDELETERequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snippets/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.DELETESnippetUsingDELETEResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * getQuery
     */
    Manage.prototype.getQueryUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GETQueryUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/queries/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GETQueryUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageQuery = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageQuery);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * getScreen
     */
    Manage.prototype.getScreenUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GETScreenUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GETScreenUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageScreen = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageScreen);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * getSnippet
     */
    Manage.prototype.getSnippetUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GETSnippetUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snippets/{shortCode}", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.GETSnippetUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageSnippet = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageSnippet);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * listExecutableScreens
     */
    Manage.prototype.listExecutableScreensUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListExecutableScreensUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens/executable", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListExecutableScreensUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageItemSummaries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.manageItemSummaries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageItemSummary, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * listQueries
     */
    Manage.prototype.listQueriesUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListQueriesUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/queries", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListQueriesUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageItemSummaries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.manageItemSummaries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageItemSummary, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * listScreens
     */
    Manage.prototype.listScreensUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListScreensUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListScreensUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageItemSummaries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.manageItemSummaries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageItemSummary, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * listSnapshots
     */
    Manage.prototype.listSnapshotsUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSnapshotsUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListSnapshotsUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageSnapshots = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.manageSnapshots = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageSnapshot, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * listSnippets
     */
    Manage.prototype.listSnippetsUsingGET = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSnippetsUsingGETRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snippets", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ListSnippetsUsingGETResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageItemSummaries = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.manageItemSummaries = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageItemSummary, resFieldDepth);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * publishSnapshot
     */
    Manage.prototype.publishSnapshotUsingPOST = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PublishSnapshotUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/publish", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.PublishSnapshotUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * revertSnapshot
     */
    Manage.prototype.revertSnapshotUsingPOST = function (req, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RevertSnapshotUsingPOSTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snapshots/{snapshotId}/revert", req);
        var client = this._defaultClient;
        var r = client.request(__assign({ url: url, method: "post" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.RevertSnapshotUsingPOSTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 201:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageResult = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageResult);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * updateQuery
     */
    Manage.prototype.updateQueryUsingPUT = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateQueryUsingPUTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/queries/{shortCode}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageQuery", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateQueryUsingPUTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageQuery = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageQuery);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * updateScreen
     */
    Manage.prototype.updateScreenUsingPUT = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateScreenUsingPUTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/screens/{shortCode}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageScreen", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateScreenUsingPUTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageScreen = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageScreen);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    /**
     * updateSnippet
     */
    Manage.prototype.updateSnippetUsingPUT = function (req, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateSnippetUsingPUTRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/restv2/game/{apiKey}/manage/snippets/{shortCode}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "manageSnippet", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        var client = this._defaultClient;
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "put", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.UpdateSnippetUsingPUTResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.manageSnippet = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.ManageSnippet);
                    }
                    break;
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 400:
                    if (utils.matchContentType(contentType, "application/json;charset=UTF-8")) {
                        res.messageModel = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.MessageModel);
                    }
                    break;
                case [403, 404].includes(httpRes === null || httpRes === void 0 ? void 0 : httpRes.status):
                    break;
            }
            return res;
        });
    };
    return Manage;
}());
exports.Manage = Manage;
