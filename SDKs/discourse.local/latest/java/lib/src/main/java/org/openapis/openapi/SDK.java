/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This page contains the documentation on how to use Discourse through API calls.
 * 
 * &gt; Note: For any endpoints not listed you can follow the
 * [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576)
 * guide to figure out how to use an API endpoint.
 * 
 * ### Request Content-Type
 * 
 * The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`,
 * `multipart/form-data`, or `application/json`.
 * 
 * ### Endpoint Names and Response Content-Type
 * 
 * Most API endpoints provide the same content as their HTML counterparts. For example
 * the URL `/categories` serves a list of categories, the `/categories.json` API provides the
 * same information in JSON format.
 * 
 * Instead of sending API requests to `/categories.json` you may also send them to `/categories`
 * and add an `Accept: application/json` header to the request to get the JSON response.
 * Sending requests with the `Accept` header is necessary if you want to use URLs
 * for related endpoints returned by the API, such as pagination URLs.
 * These URLs are returned without the `.json` prefix so you need to add the header in
 * order to get the correct response format.
 * 
 * ### Authentication
 * 
 * Some endpoints do not require any authentication, pretty much anything else will
 * require you to be authenticated.
 * 
 * To become authenticated you will need to create an API Key from the admin panel.
 * 
 * Once you have your API Key you can pass it in along with your API Username
 * as an HTTP header like this:
 * 
 * ```
 * curl -X GET "http://127.0.0.1:3000/admin/users/list/active.json" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system"
 * ```
 * 
 * and this is how POST requests will look:
 * 
 * ```
 * curl -X POST "http://127.0.0.1:3000/categories" \
 * -H "Content-Type: multipart/form-data;" \
 * -H "Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19" \
 * -H "Api-Username: system" \
 * -F "name=89853c20-4409-e91a-a8ea-f6cdff96aaaa" \
 * -F "color=49d9e9" \
 * -F "text_color=f0fcfd"
 * ```
 * 
 * ### Boolean values
 * 
 * If an endpoint accepts a boolean be sure to specify it as a lowercase
 * `true` or `false` value unless noted otherwise.
 * 
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://discourse.local",
        "https://{defaultHost}",
	};
  	
    public Admin admin;
    public Backups backups;
    public Badges badges;
    public Categories categories;
    public Groups groups;
    public Invites invites;
    public Notifications notifications;
    public Posts posts;
    public PrivateMessages privateMessages;
    public Search search;
    public Site site;
    public Tags tags;
    public Topics topics;
    public Uploads uploads;
    public Users users;	

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}
		
		
		this.admin = new Admin(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.backups = new Backups(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.badges = new Badges(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.categories = new Categories(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.groups = new Groups(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.invites = new Invites(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.notifications = new Notifications(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.posts = new Posts(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.privateMessages = new PrivateMessages(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.search = new Search(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.site = new Site(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.tags = new Tags(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.topics = new Topics(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.uploads = new Uploads(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
		
		this.users = new Users(
			this._defaultClient,
			this._securityClient,
			this._serverUrl,
			this._language,
			this._sdkVersion,
			this._genVersion
		);
	}
}