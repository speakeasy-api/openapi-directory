/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MeasurementUnit - Represents a unit of measurement to use with a quantity, such as ounces
 * or inches. Exactly one of the following fields are required: `custom_unit`,
 * `area_unit`, `length_unit`, `volume_unit`, and `weight_unit`.
 */
public class MeasurementUnit {
    /**
     * Represents a standard area unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("area_unit")
    public String areaUnit;
    public MeasurementUnit withAreaUnit(String areaUnit) {
        this.areaUnit = areaUnit;
        return this;
    }
    
    /**
     * The information needed to define a custom unit, provided by the seller.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_unit")
    public MeasurementUnitCustom customUnit;
    public MeasurementUnit withCustomUnit(MeasurementUnitCustom customUnit) {
        this.customUnit = customUnit;
        return this;
    }
    
    /**
     * Reserved for API integrations that lack the ability to specify a real measurement unit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generic_unit")
    public String genericUnit;
    public MeasurementUnit withGenericUnit(String genericUnit) {
        this.genericUnit = genericUnit;
        return this;
    }
    
    /**
     * Represents a standard length unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("length_unit")
    public String lengthUnit;
    public MeasurementUnit withLengthUnit(String lengthUnit) {
        this.lengthUnit = lengthUnit;
        return this;
    }
    
    /**
     * Represents a standard unit of time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_unit")
    public String timeUnit;
    public MeasurementUnit withTimeUnit(String timeUnit) {
        this.timeUnit = timeUnit;
        return this;
    }
    
    /**
     * Represents the type of the measurement unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public MeasurementUnit withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * Represents a standard volume unit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("volume_unit")
    public String volumeUnit;
    public MeasurementUnit withVolumeUnit(String volumeUnit) {
        this.volumeUnit = volumeUnit;
        return this;
    }
    
    /**
     * Represents a standard unit of weight or mass.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight_unit")
    public String weightUnit;
    public MeasurementUnit withWeightUnit(String weightUnit) {
        this.weightUnit = weightUnit;
        return this;
    }
    
}
