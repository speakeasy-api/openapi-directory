"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class LoginRequestAuthTypeEnum(str, Enum):
    r"""Authentication methods"""
    BASIC = 'basic'
    ACTIVE_DIRECTORY = 'active_directory'
    RADIUS = 'radius'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LoginRequest:
    r"""User credentials"""
    
    password: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('password') }})
    r"""Password"""  
    auth_type: Optional[LoginRequestAuthTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authType'), 'exclude': lambda f: f is None }})
    r"""Authentication methods"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.7.0
    
    Language ID or ISO 639-1 code
    """  
    login: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('login'), 'exclude': lambda f: f is None }})
    r"""&#128679; Deprecated since v4.7.0
    
    User login name
    """  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""For RADIUS Access-Challenge
    
    If a `replyState` is returned, it must be included as `state` in the following request.
    """  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""RADIUS Token"""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userName'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.13.0
    
    Username
    """  
    