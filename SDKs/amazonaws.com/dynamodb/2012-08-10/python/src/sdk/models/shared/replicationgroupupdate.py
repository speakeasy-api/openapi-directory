"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import createreplicationgroupmemberaction as shared_createreplicationgroupmemberaction
from ..shared import deletereplicationgroupmemberaction as shared_deletereplicationgroupmemberaction
from ..shared import updatereplicationgroupmemberaction as shared_updatereplicationgroupmemberaction
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ReplicationGroupUpdate:
    r"""<p>Represents one of the following:</p> <ul> <li> <p>A new replica to be added to an existing regional table or global table. This request invokes the <code>CreateTableReplica</code> action in the destination Region.</p> </li> <li> <p>New parameters for an existing replica. This request invokes the <code>UpdateTable</code> action in the destination Region.</p> </li> <li> <p>An existing replica to be deleted. The request invokes the <code>DeleteTableReplica</code> action in the destination Region, deleting the replica and all if its items in the destination Region.</p> </li> </ul> <note> <p>When you manually remove a table or global table replica, you do not automatically remove any associated scalable targets, scaling policies, or CloudWatch alarms.</p> </note>"""
    
    create: Optional[shared_createreplicationgroupmemberaction.CreateReplicationGroupMemberAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Create'), 'exclude': lambda f: f is None }})  
    delete: Optional[shared_deletereplicationgroupmemberaction.DeleteReplicationGroupMemberAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Delete'), 'exclude': lambda f: f is None }})  
    update: Optional[shared_updatereplicationgroupmemberaction.UpdateReplicationGroupMemberAction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Update'), 'exclude': lambda f: f is None }})  
    