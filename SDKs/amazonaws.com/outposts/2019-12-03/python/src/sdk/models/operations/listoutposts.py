"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import listoutpostsoutput as shared_listoutpostsoutput
from typing import Any, Optional


@dataclasses.dataclass
class ListOutpostsRequest:
    
    availability_zone_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AvailabilityZoneFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by Availability Zone (for example, <code>us-east-1a</code>)."""  
    availability_zone_id_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'AvailabilityZoneIdFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by AZ ID (for example, <code>use1-az1</code>)."""  
    life_cycle_status_filter: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LifeCycleStatusFilter', 'style': 'form', 'explode': True }})
    r"""Filters the results by the lifecycle status."""  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'MaxResults', 'style': 'form', 'explode': True }})  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NextToken', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ListOutpostsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    list_outposts_output: Optional[shared_listoutpostsoutput.ListOutpostsOutput] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    