/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * SegmentFilter - SegmentFilter defines the segment to be either a simple or a sequence segment. A simple segment condition contains dimension and metric conditions to select the sessions or users. A sequence segment condition can be used to select users or sessions based on sequential conditions.
 */
public class SegmentFilter {
    /**
     * If true, match the complement of simple or sequence segment. For example, to match all visits not from "New York", we can define the segment as follows: "sessionSegment": { "segmentFilters": [{ "simpleSegment" :{ "orFiltersForSegment": [{ "segmentFilterClauses":[{ "dimensionFilter": { "dimensionName": "ga:city", "expressions": ["New York"] } }] }] }, "not": "True" }] },
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("not")
    public Boolean not;

    public SegmentFilter withNot(Boolean not) {
        this.not = not;
        return this;
    }
    
    /**
     * Sequence conditions consist of one or more steps, where each step is defined by one or more dimension/metric conditions. Multiple steps can be combined with special sequence operators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequenceSegment")
    public SequenceSegment sequenceSegment;

    public SegmentFilter withSequenceSegment(SequenceSegment sequenceSegment) {
        this.sequenceSegment = sequenceSegment;
        return this;
    }
    
    /**
     * A Simple segment conditions consist of one or more dimension/metric conditions that can be combined.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("simpleSegment")
    public SimpleSegment simpleSegment;

    public SegmentFilter withSimpleSegment(SimpleSegment simpleSegment) {
        this.simpleSegment = simpleSegment;
        return this;
    }
    
    public SegmentFilter(){}
}
