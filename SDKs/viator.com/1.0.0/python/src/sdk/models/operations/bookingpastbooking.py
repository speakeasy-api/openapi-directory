"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bookingengineid_response_enum as shared_bookingengineid_response_enum
from ..shared import bookingstatus_item as shared_bookingstatus_item
from ..shared import bookingstatus_itinerary as shared_bookingstatus_itinerary
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclasses.dataclass
class BookingPastbookingRequest:
    
    accept_language: str = dataclasses.field(metadata={'header': { 'field_name': 'Accept-Language', 'style': 'simple', 'explode': False }})
    r"""Specifies the language into which the natural-language fields in the response from this service will be translated (see [Accept-Language header](#section/Appendices/Accept-Language-header) for available langage codes)"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'email', 'style': 'form', 'explode': True }})
    r"""**email address** by which to search for past bookings"""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'itemId', 'style': 'form', 'explode': True }})
    r"""Search for a booking with this **unique booking-reference number**. See [Booking references](#section/Key-concepts/Booking-references) for more information."""  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'voucherKey', 'style': 'form', 'explode': True }})
    r"""**specifier** of past booking type (use *one* of: `itemId` (booking reference) *and* `'voucherKey'` *or* `'email'`)"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate:
    
    day_range_max: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayRangeMax'), 'exclude': lambda f: f is None }})
    r"""**number** of days prior to the tour start date that *this* policy window begins. `null` signifies open-endedness"""  
    day_range_min: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dayRangeMin'), 'exclude': lambda f: f is None }})
    r"""**number** of days prior to the tour start date that *this* policy window ends"""  
    percentage_refundable: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentageRefundable'), 'exclude': lambda f: f is None }})
    r"""**percentage** of total price refundable if cancelled within *this* time window"""  
    policy_end_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyEndTimestamp'), 'exclude': lambda f: f is None }})
    r"""**Unix timestamp** giving the exact time the policy ends"""  
    policy_start_timestamp: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyStartTimestamp'), 'exclude': lambda f: f is None }})
    r"""**Unix timestamp** giving the exact time the policy commences"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSONDataItemSummariesMerchantTermsAndConditions:
    
    amount_refundable: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amountRefundable'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted** amount that will be refunded if the cancellation is processed now."""  
    cancellation_from_tour_date: Optional[list[BookingPastbooking200ApplicationJSONDataItemSummariesMerchantTermsAndConditionsCancellationFromTourDate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancellationFromTourDate'), 'exclude': lambda f: f is None }})
    r"""**array** of cancellation policy objects"""  
    terms_and_conditions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the terms and conditions for *this* product"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSONDataItemSummariesTravellerAgeBands:
    
    age_band_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ageBandId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** for the age band
    - See: [Working with age bands](#section/Appendices/Working-with-age-bands)
    """  
    count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('count'), 'exclude': lambda f: f is None }})
    r"""**number** of travelers in *this* age band"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** (singular) of *this* age band"""  
    plural_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pluralDescription'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** (plural) of *this* age band"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* age band"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSONDataItemSummaries:
    
    barcode_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeOption'), 'exclude': lambda f: f is None }})
    r"""Indicates whether a voucher is required for each passenger; or, whether the requirement is one voucher per group booking."""  
    barcode_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('barcodeType'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric code** specifying the type of barcode"""  
    booking_engine_id: Optional[shared_bookingengineid_response_enum.BookingEngineIDResponseEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingEngineId'), 'exclude': lambda f: f is None }})
    r"""[booking type indicator](#section/Key-concepts/Booking-concepts) that indicates whether the booking will be `CONFIRMED` immediately or if it will remain `PENDING` even after the booking has been made
    
    *one of* the following:
    - `\"UF\"` (FreesaleBE and UnconditionalBE) – this booking will be confirmed immediately
    - `\"OR\"` (DeferredCRMBE) – the booked product is an on-request product, will not be confirmed immediately and will have a `PENDING` status after it is booked, to be confirmed by the supplier within the time specified in the `hoursConfirmed` field available in the booking response and post-booking services
    - `\"FO\"` (FreesaleOnRequestBE) – the booked product is freesale up until a certain number of days before the travel date, referred to as the *on-request period*.
    """  
    booking_status: Optional[shared_bookingstatus_item.BookingStatusItem] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingStatus'), 'exclude': lambda f: f is None }})
    r"""**object** containing item booking status information"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which pricing is displayed"""  
    departs_from: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departsFrom'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* item's departure location"""  
    departure_point: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePoint'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the product departure point"""  
    departure_point_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePointAddress'), 'exclude': lambda f: f is None }})
    r"""**natural-language address** of the departure point for the product"""  
    departure_point_directions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('departurePointDirections'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of how to access the departure point for the product"""  
    dest_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('destId'), 'exclude': lambda f: f is None }})
    r"""**unique numeric identifier** of the destination in which the product operates"""  
    distributor_item_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorItemRef'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric reference code** of the distributor item"""  
    hours_confirmed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hoursConfirmed'), 'exclude': lambda f: f is None }})
    r"""The `hoursConfirmed` field also indicates if the product is freesale or on request. The `hoursConfirmed` value is the approximate window for confirmation in hours, which can be presented to the customer. A value of `0` means that the product is **freesale**, and a value greater than `0` means that the product is **on-request**."""  
    item_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemId'), 'exclude': lambda f: f is None }})
    r"""Booking-reference number generated by Viator
    - **Note**: For more information, see: [Booking references](#section/Key-concepts/Booking-references)
    """  
    itinerary_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itineraryId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    language_services_language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageServicesLanguageCode'), 'exclude': lambda f: f is None }})
    r"""**language code** for the language that the product operates in"""  
    last_retail_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRetailPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric last retail price** of *this* item"""  
    last_retail_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastRetailPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted retail price** of *this* item"""  
    lead_traveller_firstname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerFirstname'), 'exclude': lambda f: f is None }})
    r"""**first name** of the lead traveler"""  
    lead_traveller_surname: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerSurname'), 'exclude': lambda f: f is None }})
    r"""**surname** of the lead traveler"""  
    lead_traveller_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('leadTravellerTitle'), 'exclude': lambda f: f is None }})
    r"""**title** of the lead traveler's name"""  
    merchant_cancellable: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantCancellable'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)
    
    For cancellation information regarding the booking, please refer to the `merchantTermsAndConditions` object
    """  
    merchant_net_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant net rate** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_net_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantNetPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant net rate** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    merchant_terms_and_conditions: Optional[BookingPastbooking200ApplicationJSONDataItemSummariesMerchantTermsAndConditions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantTermsAndConditions'), 'exclude': lambda f: f is None }})  
    obfs_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('obfsId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    passbooks: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passbooks'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('price'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** for the booked product
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant total price** for *this* item
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    price_usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priceUSD'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** of the item in USD"""  
    product_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productCode'), 'exclude': lambda f: f is None }})
    r"""**unique alphanumeric identifier** of the product that was booked"""  
    product_pulled_down: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productPulledDown'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    product_title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productTitle'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the product that was booked"""  
    product_widget_list: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productWidgetList'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    rules_applied: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesApplied'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    saving_amount: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingAmount'), 'exclude': lambda f: f is None }})
    r"""Ignore (Viator only)"""  
    saving_amount_formated: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('savingAmountFormated'), 'exclude': lambda f: f is None }})
    r"""Ignore (Viator only)"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})  
    terms_and_conditions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('termsAndConditions'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    tour_grade_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGradeCode'), 'exclude': lambda f: f is None }})
    r"""**alphanumeric identifier** of the tour grade of the product that was booked"""  
    tour_grade_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tourGradeDescription'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of *this* tour grade"""  
    travel_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travelDate'), 'exclude': lambda f: f is None }})
    r"""**date** of travel for the product that was booked"""  
    traveller_age_bands: Optional[list[BookingPastbooking200ApplicationJSONDataItemSummariesTravellerAgeBands]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('travellerAgeBands'), 'exclude': lambda f: f is None }})
    r"""**array** of age band objects"""  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherKey'), 'exclude': lambda f: f is None }})
    r"""Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints"""  
    voucher_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherOption'), 'exclude': lambda f: f is None }})
    r"""**specifier** of the rules pertaining to the use of the voucher"""  
    voucher_requirements: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherRequirements'), 'exclude': lambda f: f is None }})
    r"""**natural-language description** of the requirements for using the voucher"""  
    vouchers: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vouchers'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    voucher_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherURL'), 'exclude': lambda f: f is None }})
    r"""**URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSONData:
    r"""**object** containing pricing matrix information"""
    
    booker_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookerEmail'), 'exclude': lambda f: f is None }})
    r"""**email address** of the entity that booked the tour"""  
    booking_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingDate'), 'exclude': lambda f: f is None }})
    r"""**date** on which the booking was made"""  
    booking_status: Optional[shared_bookingstatus_itinerary.BookingStatusItinerary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bookingStatus'), 'exclude': lambda f: f is None }})
    r"""**object** containing itinerary booking status information"""  
    currency_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currencyCode'), 'exclude': lambda f: f is None }})
    r"""**currency code** for the currency in which pricing is displayed"""  
    distributor_ref: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributorRef'), 'exclude': lambda f: f is None }})
    r"""**reference code** for the distributor"""  
    exchange_rate: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchangeRate'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    has_voucher: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasVoucher'), 'exclude': lambda f: f is None }})
    r"""**indicator**: `true` if a voucher exists"""  
    item_summaries: Optional[list[BookingPastbooking200ApplicationJSONDataItemSummaries]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemSummaries'), 'exclude': lambda f: f is None }})
    r"""**array** of item summary objects"""  
    itinerary_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itineraryId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    rules_applied: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rulesApplied'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    sort_order: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sortOrder'), 'exclude': lambda f: f is None }})
    r"""**sort order** for *this* result"""  
    total_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPrice'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** for *this* booking
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    total_price_formatted: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPriceFormatted'), 'exclude': lambda f: f is None }})
    r"""**currency-formatted merchant total price** for *this* booking
    - For more information, see: [Merchant pricing](#section/Merchant-APIs/Merchant-pricing)
    """  
    total_price_usd: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPriceUSD'), 'exclude': lambda f: f is None }})
    r"""**numeric merchant total price** of this booking in USD"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userId'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    voucher_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherKey'), 'exclude': lambda f: f is None }})
    r"""Unique reference for the voucher for this booking that can be used as a request parameter to search for existing bookings using the [/booking/mybookings](#operation/bookingMybookings) and [/booking/pastbooking](#operation/bookingPastbooking) endpoints"""  
    voucher_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voucherURL'), 'exclude': lambda f: f is None }})
    r"""**URL of the voucher** for *this* product (if available). The customer can access this URL to retrieve their voucher."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BookingPastbooking200ApplicationJSON:
    r"""Success"""
    
    data: Optional[BookingPastbooking200ApplicationJSONData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""**object** containing pricing matrix information"""  
    date_stamp: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateStamp'), 'exclude': lambda f: f is None }})
    r"""**timestamp** of *this* response"""  
    error_codes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCodes'), 'exclude': lambda f: f is None }})
    r"""**array** of error codes pertaining to *this* error
    - See: [Viator API error codes](#section/Appendices/Viator-API-error-codes) for a list of possible error codes
    """  
    error_message: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessage'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings"""  
    error_message_text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorMessageText'), 'exclude': lambda f: f is None }})
    r"""**array** of error message strings in plain text"""  
    error_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorName'), 'exclude': lambda f: f is None }})
    r"""**name** of *this* type of error"""  
    error_reference: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorReference'), 'exclude': lambda f: f is None }})
    r"""**reference number** of *this* error"""  
    error_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorType'), 'exclude': lambda f: f is None }})
    r"""**code** specifying the type of error"""  
    extra_info: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraInfo'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    extra_object: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extraObject'), 'exclude': lambda f: f is None }})
    r"""ignore (Viator only)"""  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})
    r"""**boolean indicator** of *this* request's outcome
    - `true`: the request was successful with no errors
    - `false`: an error was encountered
    """  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})
    r"""**number** of results available for *this* service"""  
    vmid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vmid'), 'exclude': lambda f: f is None }})
    r"""**unique numeric id** of the server that processed *this* request"""  
    

@dataclasses.dataclass
class BookingPastbookingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    booking_pastbooking_200_application_json_object: Optional[BookingPastbooking200ApplicationJSON] = dataclasses.field(default=None)
    r"""Success"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    