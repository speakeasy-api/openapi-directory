"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import collaborator as shared_collaborator
from ..shared import customarticlefield as shared_customarticlefield
from ..shared import fundinginformation as shared_fundinginformation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils

class ProjectCompletePrivateRoleEnum(str, Enum):
    r"""Role inside this project"""
    OWNER = 'Owner'
    COLLABORATOR = 'Collaborator'
    VIEWER = 'Viewer'

class ProjectCompletePrivateStorageEnum(str, Enum):
    r"""Project storage type"""
    INDIVIDUAL = 'individual'
    GROUP = 'group'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectCompletePrivate:
    r"""OK. Project representation"""
    
    account_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('account_id') }})
    r"""ID of the account owning the project"""  
    collaborators: list[shared_collaborator.Collaborator] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collaborators') }})
    r"""List of project collaborators"""  
    created_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_date') }})
    r"""Date when project was created"""  
    custom_fields: list[shared_customarticlefield.CustomArticleField] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields') }})
    r"""Collection custom fields"""  
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""Project description"""  
    figshare_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('figshare_url') }})
    r"""Project public url"""  
    funding: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding') }})
    r"""Project funding"""  
    funding_list: list[shared_fundinginformation.FundingInformation] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding_list') }})
    r"""Full Project funding information"""  
    group_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id') }})
    r"""Group of project if any"""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Project id"""  
    modified_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modified_date') }})
    r"""Date when project was last modified"""  
    published_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published_date') }})
    r"""Date when project was published"""  
    quota: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quota') }})
    r"""Project quota"""  
    role: ProjectCompletePrivateRoleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""Role inside this project"""  
    storage: ProjectCompletePrivateStorageEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage') }})
    r"""Project storage type"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""Project title"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""Api endpoint"""  
    used_quota: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_quota') }})
    r"""Project used quota"""  
    used_quota_private: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_quota_private') }})
    r"""Project private quota used"""  
    used_quota_public: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('used_quota_public') }})
    r"""Project public quota used"""  
    