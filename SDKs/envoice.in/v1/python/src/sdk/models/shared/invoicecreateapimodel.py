"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import invoicecreateattachmentapimodel as shared_invoicecreateattachmentapimodel
from ..shared import invoicecreateitemapimodel as shared_invoicecreateitemapimodel
from ..shared import invoicegatewayapimodel as shared_invoicegatewayapimodel
from ..shared import invoicerecurringapimodel as shared_invoicerecurringapimodel
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class InvoiceCreateAPIModelStatusEnum(str, Enum):
    r"""Indicate the status of the invoice (paid/unpaid/overdue)"""
    DRAFT = 'Draft'
    PAID = 'Paid'
    UNPAID = 'Unpaid'
    OVERDUE = 'Overdue'
    VOID = 'Void'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InvoiceCreateAPIModel:
    
    attachments: Optional[list[shared_invoicecreateattachmentapimodel.InvoiceCreateAttachmentAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Attachments'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Attachments', 'json': True }})
    r"""List of invoice attachments"""  
    client_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClientId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ClientId' }})
    r"""The client to whom this invoice is assigned"""  
    cloned_from_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ClonedFromId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ClonedFromId' }})
    r"""Indicate from which invoice this invoice has been cloned from"""  
    currency_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CurrencyId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'CurrencyId' }})
    r"""Id of the currency for the invoice amounts"""  
    duedate: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Duedate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Duedate' }})
    r"""Indicates when the invoice will be proclamed as due"""  
    invoice_category_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InvoiceCategoryId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'InvoiceCategoryId' }})
    r"""Hold the id of the invoice category"""  
    issued_on: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IssuedOn'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'IssuedOn' }})
    r"""Indicates when the invoice was issued"""  
    items: Optional[list[shared_invoicecreateitemapimodel.InvoiceCreateItemAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Items'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Items', 'json': True }})
    r"""List of invoice items"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Notes'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Notes' }})
    r"""Internal note regarding the invoice"""  
    number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Number'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Number' }})
    r"""Unique invoice number"""  
    payment_gateways: Optional[list[shared_invoicegatewayapimodel.InvoiceGatewayAPIModel]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PaymentGateways'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PaymentGateways', 'json': True }})
    r"""List of enabled payment gateways for this invoice"""  
    po_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PoNumber'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'PoNumber' }})
    r"""Unique number generated by the buyer"""  
    recurring_profile: Optional[shared_invoicerecurringapimodel.InvoiceRecurringAPIModel] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringProfile'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'RecurringProfile', 'json': True }})
    r"""Definition of invoice recurring profile"""  
    recurring_profile_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecurringProfileId'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'RecurringProfileId' }})
    r"""Hold the id of the recurring profile"""  
    should_send_reminders: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ShouldSendReminders'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'ShouldSendReminders' }})
    r"""Should send email reminders to client?"""  
    status: Optional[InvoiceCreateAPIModelStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Status' }})
    r"""Indicate the status of the invoice (paid/unpaid/overdue)"""  
    terms: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Terms'), 'exclude': lambda f: f is None }, 'form': { 'field_name': 'Terms' }})
    r"""Terms of agreement"""  
    