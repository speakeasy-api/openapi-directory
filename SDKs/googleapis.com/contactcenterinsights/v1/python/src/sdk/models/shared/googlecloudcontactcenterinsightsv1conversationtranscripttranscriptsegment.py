"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudcontactcenterinsightsv1conversationparticipant as shared_googlecloudcontactcenterinsightsv1conversationparticipant
from ..shared import googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentdialogflowsegmentmetadata as shared_googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentdialogflowsegmentmetadata
from ..shared import googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentwordinfo as shared_googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentwordinfo
from ..shared import googlecloudcontactcenterinsightsv1sentimentdata as shared_googlecloudcontactcenterinsightsv1sentimentdata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegment:
    r"""A segment of a full transcript."""
    
    channel_tag: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelTag'), 'exclude': lambda f: f is None }})
    r"""For conversations derived from multi-channel audio, this is the channel number corresponding to the audio from that channel. For audioChannelCount = N, its output values can range from '1' to 'N'. A channel tag of 0 indicates that the audio is mono."""  
    confidence: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confidence'), 'exclude': lambda f: f is None }})
    r"""A confidence estimate between 0.0 and 1.0 of the fidelity of this segment. A default value of 0.0 indicates that the value is unset."""  
    dialogflow_segment_metadata: Optional[shared_googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentdialogflowsegmentmetadata.GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentDialogflowSegmentMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dialogflowSegmentMetadata'), 'exclude': lambda f: f is None }})
    r"""Metadata from Dialogflow relating to the current transcript segment."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The language code of this segment as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. Example: \\"en-US\\"."""  
    message_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageTime'), 'exclude': lambda f: f is None }})
    r"""The time that the message occurred, if provided."""  
    segment_participant: Optional[shared_googlecloudcontactcenterinsightsv1conversationparticipant.GoogleCloudContactcenterinsightsV1ConversationParticipant] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('segmentParticipant'), 'exclude': lambda f: f is None }})
    r"""The call participant speaking for a given utterance."""  
    sentiment: Optional[shared_googlecloudcontactcenterinsightsv1sentimentdata.GoogleCloudContactcenterinsightsV1SentimentData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sentiment'), 'exclude': lambda f: f is None }})
    r"""The data for a sentiment annotation."""  
    text: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""The text of this segment."""  
    words: Optional[list[shared_googlecloudcontactcenterinsightsv1conversationtranscripttranscriptsegmentwordinfo.GoogleCloudContactcenterinsightsV1ConversationTranscriptTranscriptSegmentWordInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('words'), 'exclude': lambda f: f is None }})
    r"""A list of the word-specific information for each word in the segment."""  
    