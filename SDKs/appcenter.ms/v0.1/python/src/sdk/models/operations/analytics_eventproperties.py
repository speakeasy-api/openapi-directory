"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AnalyticsEventPropertiesSecurity:
    
    api_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'header', 'field_name': 'X-API-Token' }})  
    

@dataclasses.dataclass
class AnalyticsEventPropertiesRequest:
    
    app_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'app_name', 'style': 'simple', 'explode': False }})
    r"""The name of the application"""  
    event_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'event_name', 'style': 'simple', 'explode': False }})
    r"""The id of the event."""  
    owner_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'owner_name', 'style': 'simple', 'explode': False }})
    r"""The name of the owner"""  
    
class AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum(str, Enum):
    r"""The status code return by the API. It can be 400 or 403 or 500."""
    FOUR_HUNDRED = '400'
    FOUR_HUNDRED_AND_THREE = '403'
    FIVE_HUNDRED = '500'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsEventPropertiesDefaultApplicationJSONError:
    
    code: Optional[AnalyticsEventPropertiesDefaultApplicationJSONErrorCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""The status code return by the API. It can be 400 or 403 or 500."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""The reason for the request failed."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsEventPropertiesDefaultApplicationJSON:
    r"""Error"""
    
    error: Optional[AnalyticsEventPropertiesDefaultApplicationJSONError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AnalyticsEventProperties200ApplicationJSON:
    r"""Event properties during the time range."""
    
    event_properties: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_properties'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class AnalyticsEventPropertiesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    analytics_event_properties_200_application_json_object: Optional[AnalyticsEventProperties200ApplicationJSON] = dataclasses.field(default=None)
    r"""Event properties."""  
    analytics_event_properties_default_application_json_object: Optional[AnalyticsEventPropertiesDefaultApplicationJSON] = dataclasses.field(default=None)
    r"""Error code with reason."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    