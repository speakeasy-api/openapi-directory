/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class JsonSchema {
    /**
     * A reference to another schema. The value of this property is the "id" of another schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("$ref")
    public String dollarRef;
    public JsonSchema withDollarRef(String dollarRef) {
        this.dollarRef = dollarRef;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalProperties")
    public JsonSchema additionalProperties;
    public JsonSchema withAdditionalProperties(JsonSchema additionalProperties) {
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    /**
     * Additional information about this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotations")
    public JsonSchemaAnnotations annotations;
    public JsonSchema withAnnotations(JsonSchemaAnnotations annotations) {
        this.annotations = annotations;
        return this;
    }
    
    /**
     * A description of this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public JsonSchema withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Values this parameter may take (if it is an enum).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enum")
    public String[] enum_;
    public JsonSchema withEnum(String[] enum_) {
        this.enum_ = enum_;
        return this;
    }
    
    /**
     * The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumDescriptions")
    public String[] enumDescriptions;
    public JsonSchema withEnumDescriptions(String[] enumDescriptions) {
        this.enumDescriptions = enumDescriptions;
        return this;
    }
    
    /**
     * An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("format")
    public String format;
    public JsonSchema withFormat(String format) {
        this.format = format;
        return this;
    }
    
    /**
     * Unique identifier for this schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public JsonSchema withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    public JsonSchema items;
    public JsonSchema withItems(JsonSchema items) {
        this.items = items;
        return this;
    }
    
    /**
     * Whether this parameter goes in the query or the path for REST requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    public String location;
    public JsonSchema withLocation(String location) {
        this.location = location;
        return this;
    }
    
    /**
     * The maximum value of this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maximum")
    public String maximum;
    public JsonSchema withMaximum(String maximum) {
        this.maximum = maximum;
        return this;
    }
    
    /**
     * The minimum value of this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimum")
    public String minimum;
    public JsonSchema withMinimum(String minimum) {
        this.minimum = minimum;
        return this;
    }
    
    /**
     * The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pattern")
    public String pattern;
    public JsonSchema withPattern(String pattern) {
        this.pattern = pattern;
        return this;
    }
    
    /**
     * If this is a schema for an object, list the schema for each property of this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    public java.util.Map<String, JsonSchema> properties;
    public JsonSchema withProperties(java.util.Map<String, JsonSchema> properties) {
        this.properties = properties;
        return this;
    }
    
    /**
     * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readOnly")
    public Boolean readOnly;
    public JsonSchema withReadOnly(Boolean readOnly) {
        this.readOnly = readOnly;
        return this;
    }
    
    /**
     * Whether this parameter may appear multiple times.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repeated")
    public Boolean repeated;
    public JsonSchema withRepeated(Boolean repeated) {
        this.repeated = repeated;
        return this;
    }
    
    /**
     * Whether the parameter is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    public Boolean required;
    public JsonSchema withRequired(Boolean required) {
        this.required = required;
        return this;
    }
    
    /**
     * The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public JsonSchema withType(String type) {
        this.type = type;
        return this;
    }
    
    /**
     * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variant")
    public JsonSchemaVariant variant;
    public JsonSchema withVariant(JsonSchemaVariant variant) {
        this.variant = variant;
        return this;
    }
    
}
