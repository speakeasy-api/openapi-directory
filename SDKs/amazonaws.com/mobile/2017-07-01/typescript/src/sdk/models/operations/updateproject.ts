/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateProjectRequestBody extends SpeakeasyBase {
  /**
   *  Binary file data.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "contents" })
  contents?: string;
}

export class UpdateProjectRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateProjectRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   *  Unique project identifier.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=projectId",
  })
  projectId: string;
}

export class UpdateProjectResponse extends SpeakeasyBase {
  /**
   * AccountActionRequiredException
   */
  @SpeakeasyMetadata()
  accountActionRequiredException?: shared.AccountActionRequiredException;

  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: shared.BadRequestException;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalFailureException
   */
  @SpeakeasyMetadata()
  internalFailureException?: shared.InternalFailureException;

  /**
   * LimitExceededException
   */
  @SpeakeasyMetadata()
  limitExceededException?: shared.LimitExceededException;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: shared.NotFoundException;

  /**
   * ServiceUnavailableException
   */
  @SpeakeasyMetadata()
  serviceUnavailableException?: shared.ServiceUnavailableException;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: shared.TooManyRequestsException;

  /**
   * UnauthorizedException
   */
  @SpeakeasyMetadata()
  unauthorizedException?: shared.UnauthorizedException;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateProjectResult?: shared.UpdateProjectResult;
}
