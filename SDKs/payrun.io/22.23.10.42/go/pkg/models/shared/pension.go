// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// PensionPensionCertificationEnum - The pensions' certification
type PensionPensionCertificationEnum string

const (
	PensionPensionCertificationEnumNotSet PensionPensionCertificationEnum = "NotSet"
	PensionPensionCertificationEnumSet1   PensionPensionCertificationEnum = "Set1"
	PensionPensionCertificationEnumSet2   PensionPensionCertificationEnum = "Set2"
	PensionPensionCertificationEnumSet3   PensionPensionCertificationEnum = "Set3"
)

func (e *PensionPensionCertificationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "Set1":
		fallthrough
	case "Set2":
		fallthrough
	case "Set3":
		*e = PensionPensionCertificationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PensionPensionCertificationEnum: %s", s)
	}
}

// PensionPensionPensionablePayCodes - The pensions' pensionable pay codes
type PensionPensionPensionablePayCodes struct {
	PayCode []string `json:"PayCode,omitempty"`
}

// PensionPensionProRataMethodEnum - The pensions' pro rata method
type PensionPensionProRataMethodEnum string

const (
	PensionPensionProRataMethodEnumNotSet                      PensionPensionProRataMethodEnum = "NotSet"
	PensionPensionProRataMethodEnumAnnual260Days               PensionPensionProRataMethodEnum = "Annual260Days"
	PensionPensionProRataMethodEnumAnnual365Days               PensionPensionProRataMethodEnum = "Annual365Days"
	PensionPensionProRataMethodEnumAnnualQualifyingDays        PensionPensionProRataMethodEnum = "AnnualQualifyingDays"
	PensionPensionProRataMethodEnumDaysPerCalendarMonth        PensionPensionProRataMethodEnum = "DaysPerCalendarMonth"
	PensionPensionProRataMethodEnumDaysPerTaxPeriod            PensionPensionProRataMethodEnum = "DaysPerTaxPeriod"
	PensionPensionProRataMethodEnumWorkingDaysPerCalendarMonth PensionPensionProRataMethodEnum = "WorkingDaysPerCalendarMonth"
	PensionPensionProRataMethodEnumWeekDaysPerCalendarMonth    PensionPensionProRataMethodEnum = "WeekDaysPerCalendarMonth"
)

func (e *PensionPensionProRataMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "Annual260Days":
		fallthrough
	case "Annual365Days":
		fallthrough
	case "AnnualQualifyingDays":
		fallthrough
	case "DaysPerCalendarMonth":
		fallthrough
	case "DaysPerTaxPeriod":
		fallthrough
	case "WorkingDaysPerCalendarMonth":
		fallthrough
	case "WeekDaysPerCalendarMonth":
		*e = PensionPensionProRataMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PensionPensionProRataMethodEnum: %s", s)
	}
}

// PensionPensionQualifyingPayCodes - The pensions' qualifying pay codes
type PensionPensionQualifyingPayCodes struct {
	PayCode []string `json:"PayCode,omitempty"`
}

// PensionPensionRasRoundingOverrideEnum - The pensions' ras rounding override
type PensionPensionRasRoundingOverrideEnum string

const (
	PensionPensionRasRoundingOverrideEnumNotSet    PensionPensionRasRoundingOverrideEnum = "NotSet"
	PensionPensionRasRoundingOverrideEnumPennyUp   PensionPensionRasRoundingOverrideEnum = "PennyUp"
	PensionPensionRasRoundingOverrideEnumPennyDown PensionPensionRasRoundingOverrideEnum = "PennyDown"
	PensionPensionRasRoundingOverrideEnumBankers   PensionPensionRasRoundingOverrideEnum = "Bankers"
	PensionPensionRasRoundingOverrideEnumFiveUp    PensionPensionRasRoundingOverrideEnum = "FiveUp"
	PensionPensionRasRoundingOverrideEnumFiveDown  PensionPensionRasRoundingOverrideEnum = "FiveDown"
	PensionPensionRasRoundingOverrideEnumFloor     PensionPensionRasRoundingOverrideEnum = "Floor"
	PensionPensionRasRoundingOverrideEnumCeiling   PensionPensionRasRoundingOverrideEnum = "Ceiling"
)

func (e *PensionPensionRasRoundingOverrideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "PennyUp":
		fallthrough
	case "PennyDown":
		fallthrough
	case "Bankers":
		fallthrough
	case "FiveUp":
		fallthrough
	case "FiveDown":
		fallthrough
	case "Floor":
		fallthrough
	case "Ceiling":
		*e = PensionPensionRasRoundingOverrideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PensionPensionRasRoundingOverrideEnum: %s", s)
	}
}

// PensionPensionRoundingOptionEnum - The pensions' rounding option
type PensionPensionRoundingOptionEnum string

const (
	PensionPensionRoundingOptionEnumNotSet    PensionPensionRoundingOptionEnum = "NotSet"
	PensionPensionRoundingOptionEnumPennyUp   PensionPensionRoundingOptionEnum = "PennyUp"
	PensionPensionRoundingOptionEnumPennyDown PensionPensionRoundingOptionEnum = "PennyDown"
	PensionPensionRoundingOptionEnumBankers   PensionPensionRoundingOptionEnum = "Bankers"
	PensionPensionRoundingOptionEnumFiveUp    PensionPensionRoundingOptionEnum = "FiveUp"
	PensionPensionRoundingOptionEnumFiveDown  PensionPensionRoundingOptionEnum = "FiveDown"
	PensionPensionRoundingOptionEnumFloor     PensionPensionRoundingOptionEnum = "Floor"
	PensionPensionRoundingOptionEnumCeiling   PensionPensionRoundingOptionEnum = "Ceiling"
)

func (e *PensionPensionRoundingOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "PennyUp":
		fallthrough
	case "PennyDown":
		fallthrough
	case "Bankers":
		fallthrough
	case "FiveUp":
		fallthrough
	case "FiveDown":
		fallthrough
	case "Floor":
		fallthrough
	case "Ceiling":
		*e = PensionPensionRoundingOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PensionPensionRoundingOptionEnum: %s", s)
	}
}

// PensionPensionTaxationMethodEnum - The pensions' taxation method
type PensionPensionTaxationMethodEnum string

const (
	PensionPensionTaxationMethodEnumNotSet            PensionPensionTaxationMethodEnum = "NotSet"
	PensionPensionTaxationMethodEnumNetBased          PensionPensionTaxationMethodEnum = "NetBased"
	PensionPensionTaxationMethodEnumReliefAtSource    PensionPensionTaxationMethodEnum = "ReliefAtSource"
	PensionPensionTaxationMethodEnumTaxReliefExcluded PensionPensionTaxationMethodEnum = "TaxReliefExcluded"
)

func (e *PensionPensionTaxationMethodEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "NotSet":
		fallthrough
	case "NetBased":
		fallthrough
	case "ReliefAtSource":
		fallthrough
	case "TaxReliefExcluded":
		*e = PensionPensionTaxationMethodEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PensionPensionTaxationMethodEnum: %s", s)
	}
}

type PensionPension struct {
	// The pensions' a e compatible
	AECompatible *bool `json:"AECompatible,omitempty"`
	// The pensions' certification
	Certification *PensionPensionCertificationEnum `json:"Certification,omitempty"`
	// The pensions' code
	Code *string `json:"Code,omitempty"`
	// The pensions' contribution deduction day
	ContributionDeductionDay *int `json:"ContributionDeductionDay,omitempty"`
	// The pensions' effective date
	EffectiveDate *types.Date `json:"EffectiveDate,omitempty"`
	// The pensions' employee contribution cash
	EmployeeContributionCash *float64 `json:"EmployeeContributionCash,omitempty"`
	// The pensions' employee contribution percent
	EmployeeContributionPercent *float64 `json:"EmployeeContributionPercent,omitempty"`
	// The pensions' employer contribution cash
	EmployerContributionCash *float64 `json:"EmployerContributionCash,omitempty"`
	// The pensions' employer contribution percent
	EmployerContributionPercent *float64 `json:"EmployerContributionPercent,omitempty"`
	// The pensions' employer ni saving
	EmployerNiSaving *bool `json:"EmployerNiSaving,omitempty"`
	// The pensions' employer ni saving percentage
	EmployerNiSavingPercentage *float64 `json:"EmployerNiSavingPercentage,omitempty"`
	// The pensions' group
	Group *string `json:"Group,omitempty"`
	// The pensions' lower threshold
	LowerThreshold *float64 `json:"LowerThreshold,omitempty"`
	// The pensions' meta data
	MetaData map[string]interface{} `json:"MetaData,omitempty"`
	// The pensions' next revision date
	NextRevisionDate *types.Date `json:"NextRevisionDate,omitempty"`
	// The pensions' pensionable pay codes
	PensionablePayCodes *PensionPensionPensionablePayCodes `json:"PensionablePayCodes,omitempty"`
	// The pensions' pro rata method
	ProRataMethod *PensionPensionProRataMethodEnum `json:"ProRataMethod,omitempty"`
	// The pensions' provider employer ref
	ProviderEmployerRef *string `json:"ProviderEmployerRef,omitempty"`
	// The pensions' provider name
	ProviderName *string `json:"ProviderName,omitempty"`
	// The pensions' qualifying pay codes
	QualifyingPayCodes *PensionPensionQualifyingPayCodes `json:"QualifyingPayCodes,omitempty"`
	// The pensions' ras rounding override
	RasRoundingOverride *PensionPensionRasRoundingOverrideEnum `json:"RasRoundingOverride,omitempty"`
	// The pensions' revision
	Revision *int `json:"Revision,omitempty"`
	// The pensions' rounding option
	RoundingOption *PensionPensionRoundingOptionEnum `json:"RoundingOption,omitempty"`
	// The pensions' salary sacrifice
	SalarySacrifice *bool `json:"SalarySacrifice,omitempty"`
	// The pensions' scheme name
	SchemeName *string `json:"SchemeName,omitempty"`
	// The pensions' sub group
	SubGroup *string `json:"SubGroup,omitempty"`
	// The pensions' taxation method
	TaxationMethod *PensionPensionTaxationMethodEnum `json:"TaxationMethod,omitempty"`
	// The pensions' upper threshold
	UpperThreshold *float64 `json:"UpperThreshold,omitempty"`
	// The pensions' use a e thresholds
	UseAEThresholds *bool `json:"UseAEThresholds,omitempty"`
}

// Pension - The pension object.
type Pension struct {
	Pension *PensionPension `json:"Pension,omitempty"`
}
