<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Tod 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Show the agent's TOD argument structure
     * 
     * Agent's TOD configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsResponse
     */
	public function protocolTodGetArgs(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/get/args', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetArgsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTodGetArgs200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TOD configuration
     * 
     * Agent's TOD configuration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigResponse
     */
	public function protocolTodGetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/get/config', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTOD = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTOD', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TOD statistics
     * 
     * Statistics of fields indicated in the headers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsResponse
     */
	public function protocolTodGetStatistics(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/get/statistics', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatisticsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTodGetStatistics200ApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the TOD statistics headers
     * 
     * The headers of statistics fields
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatsHdrResponse
     */
	public function protocolTodGetStatsHdr(
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatsHdrResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/protocol/msg/tod/get/stats_hdr');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetStatsHdrResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTodGetStatsHdr200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Show the agent's TOD traffic tracing
     * 
     * Trace 1 means enabled, 0 means not
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceResponse
     */
	public function protocolTodGetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/get/trace', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->configTOD = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConfigTOD', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Retrieve TOD time
     * 
     * Retrive time from server
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeResponse
     */
	public function protocolTodGettime(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/gettime/server/{serverAddr}/port/{portNum}/script/{scriptName}/timeout/{timeSec}/retries/{numRetries}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodGettimeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->protocolTodGettime200ApplicationJSONStrings = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string>', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TOD configuration
     * 
     * Agent's TOD configuration with port,rule,prompt,paging_prompt,userdb,keymap
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigResponse
     */
	public function protocolTodSetConfig(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/set/config/{argument}/{value}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTodSetConfig200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Set the agent's TOD traffic tracing
     * 
     * 1 to enable, 0 to disable
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceResponse
     */
	public function protocolTodSetTrace(
        \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/mimic/agent/{agentNum}/protocol/msg/tod/set/trace/{enableOrNot}', \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProtocolTodSetTraceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $response->protocolTodSetTrace200ApplicationJSONString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}