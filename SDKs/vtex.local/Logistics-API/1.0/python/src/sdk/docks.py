"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Optional

class Docks:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def activate_dock(self, request: operations.ActivateDockRequest) -> operations.ActivateDockResponse:
        r"""Activate dock
        Activates dock through dock ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ActivateDockRequest, base_url, '/api/logistics/pvt/configuration/docks/{dockId}/activation', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ActivateDockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def all_docks(self, request: operations.AllDocksRequest) -> operations.AllDocksResponse:
        r"""List all  docks
        Informs a list of all docks.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/configuration/docks'
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AllDocksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.AllDocks200ApplicationJSON]])
                res.all_docks_200_application_json_objects = out

        return res

    def create_update_dock(self, request: operations.CreateUpdateDockRequest) -> operations.CreateUpdateDockResponse:
        r"""Create/update dock
        Creates or updates docks to be used in your logistic operation.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/logistics/pvt/configuration/docks'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateUpdateDockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def deactivate_dock(self, request: operations.DeactivateDockRequest) -> operations.DeactivateDockResponse:
        r"""Deactivate dock
        Deactivate dock by dock ID
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeactivateDockRequest, base_url, '/api/logistics/pvt/configuration/docks/{dockId}/deactivation', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('POST', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeactivateDockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dock(self, request: operations.DockRequest) -> operations.DockResponse:
        r"""Delete dock
        Deletes dock by dock ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DockRequest, base_url, '/api/logistics/pvt/configuration/docks/{dockId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DockResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def dock_by_id(self, request: operations.DockByIDRequest) -> operations.DockByIDResponse:
        r"""List dock by ID
        Informs a given dock's information, searching by dock ID.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DockByIDRequest, base_url, '/api/logistics/pvt/configuration/docks/{dockId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DockByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json; charset=utf-8'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.DockByID200ApplicationJSON])
                res.dock_by_id_200_application_json_object = out

        return res

    