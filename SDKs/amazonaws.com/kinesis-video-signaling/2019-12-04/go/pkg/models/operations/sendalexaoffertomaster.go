// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/models/shared"
)

type SendAlexaOfferToMasterHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type SendAlexaOfferToMasterRequestBody struct {
	// The ARN of the signaling channel by which Alexa and the master peer communicate.
	ChannelARN string `json:"ChannelARN"`
	// The base64-encoded SDP offer content.
	MessagePayload string `json:"MessagePayload"`
	// The unique identifier for the sender client.
	SenderClientID string `json:"SenderClientId"`
}

type SendAlexaOfferToMasterRequest struct {
	Headers SendAlexaOfferToMasterHeaders
	Request SendAlexaOfferToMasterRequestBody `request:"mediaType=application/json"`
}

type SendAlexaOfferToMasterResponse struct {
	// ClientLimitExceededException
	ClientLimitExceededException interface{}
	ContentType                  string
	// InvalidArgumentException
	InvalidArgumentException interface{}
	// NotAuthorizedException
	NotAuthorizedException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SendAlexaOfferToMasterResponse *shared.SendAlexaOfferToMasterResponse
	StatusCode                     int
	RawResponse                    *http.Response
}
