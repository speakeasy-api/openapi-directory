"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum(str, Enum):
    r"""The hierarchical clustering method to use"""
    SINGLE_LINKAGE = 'singleLinkage'
    AVERAGE_LINKAGE = 'averageLinkage'
    COMPLETE_LINKAGE = 'completeLinkage'
    WARD_LINKAGE = 'wardLinkage'

class PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum(str, Enum):
    r"""The order to impose on the hierarchical clustering tree leaves"""
    R_HCLUST = 'r-hclust'
    OPTIMAL = 'optimal'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityRequestBodyConstraints:
    
    maximum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""maximumAssetsWeights[i] is the maximum weight of the asset i in the portfolio, in percentage"""  
    maximum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maximumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The maximum portfolio exposure; must be higher than or equal to minimumPortfolioExposure"""  
    minimum_assets_weights: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumAssetsWeights'), 'exclude': lambda f: f is None }})
    r"""minimumAssetsWeights[i] is the minimum weight of the asset i in the portfolio, in percentage"""  
    minimum_portfolio_exposure: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minimumPortfolioExposure'), 'exclude': lambda f: f is None }})
    r"""The minimum portfolio exposure; must be lower than or equal to maximumPortfolioExposure"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityRequestBody:
    
    assets: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets') }})
    r"""The number of assets"""  
    assets_covariance_matrix: list[list[float]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsCovarianceMatrix') }})
    r"""assetsCovarianceMatrix[i][j] is the covariance between the asset i and the asset j"""  
    clustering_method: Optional[PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusteringMethod'), 'exclude': lambda f: f is None }})
    r"""The hierarchical clustering method to use"""  
    clustering_ordering: Optional[PostPortfolioOptimizationHierarchicalRiskParityRequestBodyClusteringOrderingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clusteringOrdering'), 'exclude': lambda f: f is None }})
    r"""The order to impose on the hierarchical clustering tree leaves"""  
    constraints: Optional[PostPortfolioOptimizationHierarchicalRiskParityRequestBodyConstraints] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('constraints'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON:
    r"""OK"""
    
    assets_weights: list[float] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assetsWeights') }})
    r"""assetsWeights[i] is the weight of the asset i in the portfolio, in percentage"""  
    

@dataclasses.dataclass
class PostPortfolioOptimizationHierarchicalRiskParityResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_portfolio_optimization_hierarchical_risk_parity_200_application_json_object: Optional[PostPortfolioOptimizationHierarchicalRiskParity200ApplicationJSON] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    