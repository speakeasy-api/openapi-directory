/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Retrieve information about LineageProcesses associated with specific links. LineageProcesses are transformation pipelines that result in data flowing from **source** to **target** assets. Links between assets represent this operation. If you have specific link names, you can use this method to verify which LineageProcesses contribute to creating those links. See the SearchLinks method for more information on how to retrieve link name. You can retrieve the LineageProcess information in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
   */
  datalineageProjectsLocationsBatchSearchLinkProcesses(
    req: operations.DatalineageProjectsLocationsBatchSearchLinkProcessesRequest,
    security: operations.DatalineageProjectsLocationsBatchSearchLinkProcessesSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsBatchSearchLinkProcessesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsBatchSearchLinkProcessesRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}:batchSearchLinkProcesses",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1BatchSearchLinkProcessesRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsBatchSearchLinkProcessesSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsBatchSearchLinkProcessesResponse =
        new operations.DatalineageProjectsLocationsBatchSearchLinkProcessesResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1BatchSearchLinkProcessesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1BatchSearchLinkProcessesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
   */
  datalineageProjectsLocationsOperationsCancel(
    req: operations.DatalineageProjectsLocationsOperationsCancelRequest,
    security: operations.DatalineageProjectsLocationsOperationsCancelSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsOperationsCancelResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsOperationsCancelRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}:cancel", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsOperationsCancelSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsOperationsCancelResponse =
        new operations.DatalineageProjectsLocationsOperationsCancelResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  datalineageProjectsLocationsOperationsList(
    req: operations.DatalineageProjectsLocationsOperationsListRequest,
    security: operations.DatalineageProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsOperationsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsOperationsListResponse =
        new operations.DatalineageProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleLongrunningListOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.GoogleLongrunningListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new process.
   */
  datalineageProjectsLocationsProcessesCreate(
    req: operations.DatalineageProjectsLocationsProcessesCreateRequest,
    security: operations.DatalineageProjectsLocationsProcessesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsProcessesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/processes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1Process",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesCreateResponse =
        new operations.DatalineageProjectsLocationsProcessesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1Process = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogLineageV1Process
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List processes in the given project and location. List order is descending by insertion time.
   */
  datalineageProjectsLocationsProcessesList(
    req: operations.DatalineageProjectsLocationsProcessesListRequest,
    security: operations.DatalineageProjectsLocationsProcessesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsProcessesListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/processes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesListResponse =
        new operations.DatalineageProjectsLocationsProcessesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1ListProcessesResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1ListProcessesResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new run.
   */
  datalineageProjectsLocationsProcessesRunsCreate(
    req: operations.DatalineageProjectsLocationsProcessesRunsCreateRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/runs", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1Run",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsCreateResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1Run = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogLineageV1Run
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new lineage event.
   */
  datalineageProjectsLocationsProcessesRunsLineageEventsCreate(
    req: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/lineageEvents",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1LineageEvent",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsCreateResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1LineageEvent =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1LineageEvent
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the lineage event with the specified name.
   */
  datalineageProjectsLocationsProcessesRunsLineageEventsDelete(
    req: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsDeleteResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleProtobufEmpty = utils.objectToClass(httpRes?.data);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a specified lineage event.
   */
  datalineageProjectsLocationsProcessesRunsLineageEventsGet(
    req: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsGetResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1LineageEvent =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1LineageEvent
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists lineage events in the given project and location. The list order is not defined.
   */
  datalineageProjectsLocationsProcessesRunsLineageEventsList(
    req: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/lineageEvents",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsLineageEventsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1ListLineageEventsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1ListLineageEventsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists runs in the given project and location. List order is descending by `start_time`.
   */
  datalineageProjectsLocationsProcessesRunsList(
    req: operations.DatalineageProjectsLocationsProcessesRunsListRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsProcessesRunsListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{parent}/runs", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsListResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1ListRunsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1ListRunsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a run.
   */
  datalineageProjectsLocationsProcessesRunsPatch(
    req: operations.DatalineageProjectsLocationsProcessesRunsPatchRequest,
    security: operations.DatalineageProjectsLocationsProcessesRunsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsProcessesRunsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DatalineageProjectsLocationsProcessesRunsPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1Run",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DatalineageProjectsLocationsProcessesRunsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsProcessesRunsPatchResponse =
        new operations.DatalineageProjectsLocationsProcessesRunsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1Run = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudDatacatalogLineageV1Run
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve a list of links connected to a specific asset. Links represent the data flow between **source** (upstream) and **target** (downstream) assets in transformation pipelines. Links are stored in the same project as the Lineage Events that create them. You can retrieve links in every project where you have the `datalineage.events.get` permission. The project provided in the URL is used for Billing and Quota.
   */
  datalineageProjectsLocationsSearchLinks(
    req: operations.DatalineageProjectsLocationsSearchLinksRequest,
    security: operations.DatalineageProjectsLocationsSearchLinksSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DatalineageProjectsLocationsSearchLinksResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DatalineageProjectsLocationsSearchLinksRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}:searchLinks",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudDatacatalogLineageV1SearchLinksRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DatalineageProjectsLocationsSearchLinksSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DatalineageProjectsLocationsSearchLinksResponse =
        new operations.DatalineageProjectsLocationsSearchLinksResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudDatacatalogLineageV1SearchLinksResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudDatacatalogLineageV1SearchLinksResponse
              );
          }
          break;
      }

      return res;
    });
  }
}
