// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type YoutubeSearchListSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type YoutubeSearchListSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type YoutubeSearchListSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type YoutubeSearchListSecurityOption4 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type YoutubeSearchListSecurity struct {
	Option1 *YoutubeSearchListSecurityOption1 `security:"option"`
	Option2 *YoutubeSearchListSecurityOption2 `security:"option"`
	Option3 *YoutubeSearchListSecurityOption3 `security:"option"`
	Option4 *YoutubeSearchListSecurityOption4 `security:"option"`
}

// YoutubeSearchListChannelTypeEnum - Add a filter on the channel search.
type YoutubeSearchListChannelTypeEnum string

const (
	YoutubeSearchListChannelTypeEnumChannelTypeUnspecified YoutubeSearchListChannelTypeEnum = "channelTypeUnspecified"
	YoutubeSearchListChannelTypeEnumAny                    YoutubeSearchListChannelTypeEnum = "any"
	YoutubeSearchListChannelTypeEnumShow                   YoutubeSearchListChannelTypeEnum = "show"
)

func (e YoutubeSearchListChannelTypeEnum) ToPointer() *YoutubeSearchListChannelTypeEnum {
	return &e
}

func (e *YoutubeSearchListChannelTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "channelTypeUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "show":
		*e = YoutubeSearchListChannelTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListChannelTypeEnum: %v", v)
	}
}

// YoutubeSearchListEventTypeEnum - Filter on the livestream status of the videos.
type YoutubeSearchListEventTypeEnum string

const (
	YoutubeSearchListEventTypeEnumNone      YoutubeSearchListEventTypeEnum = "none"
	YoutubeSearchListEventTypeEnumUpcoming  YoutubeSearchListEventTypeEnum = "upcoming"
	YoutubeSearchListEventTypeEnumLive      YoutubeSearchListEventTypeEnum = "live"
	YoutubeSearchListEventTypeEnumCompleted YoutubeSearchListEventTypeEnum = "completed"
)

func (e YoutubeSearchListEventTypeEnum) ToPointer() *YoutubeSearchListEventTypeEnum {
	return &e
}

func (e *YoutubeSearchListEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "none":
		fallthrough
	case "upcoming":
		fallthrough
	case "live":
		fallthrough
	case "completed":
		*e = YoutubeSearchListEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListEventTypeEnum: %v", v)
	}
}

// YoutubeSearchListOrderEnum - Sort order of the results.
type YoutubeSearchListOrderEnum string

const (
	YoutubeSearchListOrderEnumSearchSortUnspecified YoutubeSearchListOrderEnum = "searchSortUnspecified"
	YoutubeSearchListOrderEnumDate                  YoutubeSearchListOrderEnum = "date"
	YoutubeSearchListOrderEnumRating                YoutubeSearchListOrderEnum = "rating"
	YoutubeSearchListOrderEnumViewCount             YoutubeSearchListOrderEnum = "viewCount"
	YoutubeSearchListOrderEnumRelevance             YoutubeSearchListOrderEnum = "relevance"
	YoutubeSearchListOrderEnumTitle                 YoutubeSearchListOrderEnum = "title"
	YoutubeSearchListOrderEnumVideoCount            YoutubeSearchListOrderEnum = "videoCount"
)

func (e YoutubeSearchListOrderEnum) ToPointer() *YoutubeSearchListOrderEnum {
	return &e
}

func (e *YoutubeSearchListOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "searchSortUnspecified":
		fallthrough
	case "date":
		fallthrough
	case "rating":
		fallthrough
	case "viewCount":
		fallthrough
	case "relevance":
		fallthrough
	case "title":
		fallthrough
	case "videoCount":
		*e = YoutubeSearchListOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListOrderEnum: %v", v)
	}
}

// YoutubeSearchListSafeSearchEnum - Indicates whether the search results should include restricted content as well as standard content.
type YoutubeSearchListSafeSearchEnum string

const (
	YoutubeSearchListSafeSearchEnumSafeSearchSettingUnspecified YoutubeSearchListSafeSearchEnum = "safeSearchSettingUnspecified"
	YoutubeSearchListSafeSearchEnumNone                         YoutubeSearchListSafeSearchEnum = "none"
	YoutubeSearchListSafeSearchEnumModerate                     YoutubeSearchListSafeSearchEnum = "moderate"
	YoutubeSearchListSafeSearchEnumStrict                       YoutubeSearchListSafeSearchEnum = "strict"
)

func (e YoutubeSearchListSafeSearchEnum) ToPointer() *YoutubeSearchListSafeSearchEnum {
	return &e
}

func (e *YoutubeSearchListSafeSearchEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "safeSearchSettingUnspecified":
		fallthrough
	case "none":
		fallthrough
	case "moderate":
		fallthrough
	case "strict":
		*e = YoutubeSearchListSafeSearchEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListSafeSearchEnum: %v", v)
	}
}

// YoutubeSearchListVideoCaptionEnum - Filter on the presence of captions on the videos.
type YoutubeSearchListVideoCaptionEnum string

const (
	YoutubeSearchListVideoCaptionEnumVideoCaptionUnspecified YoutubeSearchListVideoCaptionEnum = "videoCaptionUnspecified"
	YoutubeSearchListVideoCaptionEnumAny                     YoutubeSearchListVideoCaptionEnum = "any"
	YoutubeSearchListVideoCaptionEnumClosedCaption           YoutubeSearchListVideoCaptionEnum = "closedCaption"
	YoutubeSearchListVideoCaptionEnumNone                    YoutubeSearchListVideoCaptionEnum = "none"
)

func (e YoutubeSearchListVideoCaptionEnum) ToPointer() *YoutubeSearchListVideoCaptionEnum {
	return &e
}

func (e *YoutubeSearchListVideoCaptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "videoCaptionUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "closedCaption":
		fallthrough
	case "none":
		*e = YoutubeSearchListVideoCaptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoCaptionEnum: %v", v)
	}
}

// YoutubeSearchListVideoDefinitionEnum - Filter on the definition of the videos.
type YoutubeSearchListVideoDefinitionEnum string

const (
	YoutubeSearchListVideoDefinitionEnumAny      YoutubeSearchListVideoDefinitionEnum = "any"
	YoutubeSearchListVideoDefinitionEnumStandard YoutubeSearchListVideoDefinitionEnum = "standard"
	YoutubeSearchListVideoDefinitionEnumHigh     YoutubeSearchListVideoDefinitionEnum = "high"
)

func (e YoutubeSearchListVideoDefinitionEnum) ToPointer() *YoutubeSearchListVideoDefinitionEnum {
	return &e
}

func (e *YoutubeSearchListVideoDefinitionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "standard":
		fallthrough
	case "high":
		*e = YoutubeSearchListVideoDefinitionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoDefinitionEnum: %v", v)
	}
}

// YoutubeSearchListVideoDimensionEnum - Filter on 3d videos.
type YoutubeSearchListVideoDimensionEnum string

const (
	YoutubeSearchListVideoDimensionEnumAny    YoutubeSearchListVideoDimensionEnum = "any"
	YoutubeSearchListVideoDimensionEnumTwod   YoutubeSearchListVideoDimensionEnum = "2d"
	YoutubeSearchListVideoDimensionEnumThreed YoutubeSearchListVideoDimensionEnum = "3d"
)

func (e YoutubeSearchListVideoDimensionEnum) ToPointer() *YoutubeSearchListVideoDimensionEnum {
	return &e
}

func (e *YoutubeSearchListVideoDimensionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "2d":
		fallthrough
	case "3d":
		*e = YoutubeSearchListVideoDimensionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoDimensionEnum: %v", v)
	}
}

// YoutubeSearchListVideoDurationEnum - Filter on the duration of the videos.
type YoutubeSearchListVideoDurationEnum string

const (
	YoutubeSearchListVideoDurationEnumVideoDurationUnspecified YoutubeSearchListVideoDurationEnum = "videoDurationUnspecified"
	YoutubeSearchListVideoDurationEnumAny                      YoutubeSearchListVideoDurationEnum = "any"
	YoutubeSearchListVideoDurationEnumShort                    YoutubeSearchListVideoDurationEnum = "short"
	YoutubeSearchListVideoDurationEnumMedium                   YoutubeSearchListVideoDurationEnum = "medium"
	YoutubeSearchListVideoDurationEnumLong                     YoutubeSearchListVideoDurationEnum = "long"
)

func (e YoutubeSearchListVideoDurationEnum) ToPointer() *YoutubeSearchListVideoDurationEnum {
	return &e
}

func (e *YoutubeSearchListVideoDurationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "videoDurationUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "short":
		fallthrough
	case "medium":
		fallthrough
	case "long":
		*e = YoutubeSearchListVideoDurationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoDurationEnum: %v", v)
	}
}

// YoutubeSearchListVideoEmbeddableEnum - Filter on embeddable videos.
type YoutubeSearchListVideoEmbeddableEnum string

const (
	YoutubeSearchListVideoEmbeddableEnumVideoEmbeddableUnspecified YoutubeSearchListVideoEmbeddableEnum = "videoEmbeddableUnspecified"
	YoutubeSearchListVideoEmbeddableEnumAny                        YoutubeSearchListVideoEmbeddableEnum = "any"
	YoutubeSearchListVideoEmbeddableEnumTrue                       YoutubeSearchListVideoEmbeddableEnum = "true"
)

func (e YoutubeSearchListVideoEmbeddableEnum) ToPointer() *YoutubeSearchListVideoEmbeddableEnum {
	return &e
}

func (e *YoutubeSearchListVideoEmbeddableEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "videoEmbeddableUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "true":
		*e = YoutubeSearchListVideoEmbeddableEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoEmbeddableEnum: %v", v)
	}
}

// YoutubeSearchListVideoLicenseEnum - Filter on the license of the videos.
type YoutubeSearchListVideoLicenseEnum string

const (
	YoutubeSearchListVideoLicenseEnumAny            YoutubeSearchListVideoLicenseEnum = "any"
	YoutubeSearchListVideoLicenseEnumYoutube        YoutubeSearchListVideoLicenseEnum = "youtube"
	YoutubeSearchListVideoLicenseEnumCreativeCommon YoutubeSearchListVideoLicenseEnum = "creativeCommon"
)

func (e YoutubeSearchListVideoLicenseEnum) ToPointer() *YoutubeSearchListVideoLicenseEnum {
	return &e
}

func (e *YoutubeSearchListVideoLicenseEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		fallthrough
	case "youtube":
		fallthrough
	case "creativeCommon":
		*e = YoutubeSearchListVideoLicenseEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoLicenseEnum: %v", v)
	}
}

// YoutubeSearchListVideoSyndicatedEnum - Filter on syndicated videos.
type YoutubeSearchListVideoSyndicatedEnum string

const (
	YoutubeSearchListVideoSyndicatedEnumVideoSyndicatedUnspecified YoutubeSearchListVideoSyndicatedEnum = "videoSyndicatedUnspecified"
	YoutubeSearchListVideoSyndicatedEnumAny                        YoutubeSearchListVideoSyndicatedEnum = "any"
	YoutubeSearchListVideoSyndicatedEnumTrue                       YoutubeSearchListVideoSyndicatedEnum = "true"
)

func (e YoutubeSearchListVideoSyndicatedEnum) ToPointer() *YoutubeSearchListVideoSyndicatedEnum {
	return &e
}

func (e *YoutubeSearchListVideoSyndicatedEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "videoSyndicatedUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "true":
		*e = YoutubeSearchListVideoSyndicatedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoSyndicatedEnum: %v", v)
	}
}

// YoutubeSearchListVideoTypeEnum - Filter on videos of a specific type.
type YoutubeSearchListVideoTypeEnum string

const (
	YoutubeSearchListVideoTypeEnumVideoTypeUnspecified YoutubeSearchListVideoTypeEnum = "videoTypeUnspecified"
	YoutubeSearchListVideoTypeEnumAny                  YoutubeSearchListVideoTypeEnum = "any"
	YoutubeSearchListVideoTypeEnumMovie                YoutubeSearchListVideoTypeEnum = "movie"
	YoutubeSearchListVideoTypeEnumEpisode              YoutubeSearchListVideoTypeEnum = "episode"
)

func (e YoutubeSearchListVideoTypeEnum) ToPointer() *YoutubeSearchListVideoTypeEnum {
	return &e
}

func (e *YoutubeSearchListVideoTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "videoTypeUnspecified":
		fallthrough
	case "any":
		fallthrough
	case "movie":
		fallthrough
	case "episode":
		*e = YoutubeSearchListVideoTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for YoutubeSearchListVideoTypeEnum: %v", v)
	}
}

type YoutubeSearchListRequest struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Filter on resources belonging to this channelId.
	ChannelID *string `queryParam:"style=form,explode=true,name=channelId"`
	// Add a filter on the channel search.
	ChannelType *YoutubeSearchListChannelTypeEnum `queryParam:"style=form,explode=true,name=channelType"`
	// Filter on the livestream status of the videos.
	EventType *YoutubeSearchListEventTypeEnum `queryParam:"style=form,explode=true,name=eventType"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Search owned by a content owner.
	ForContentOwner *bool `queryParam:"style=form,explode=true,name=forContentOwner"`
	// Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
	ForDeveloper *bool `queryParam:"style=form,explode=true,name=forDeveloper"`
	// Search for the private videos of the authenticated user.
	ForMine *bool `queryParam:"style=form,explode=true,name=forMine"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Filter on location of the video
	Location *string `queryParam:"style=form,explode=true,name=location"`
	// Filter on distance from the location (specified above).
	LocationRadius *string `queryParam:"style=form,explode=true,name=locationRadius"`
	// The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
	OnBehalfOfContentOwner *string `queryParam:"style=form,explode=true,name=onBehalfOfContentOwner"`
	// Sort order of the results.
	Order *YoutubeSearchListOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
	PageToken *string `queryParam:"style=form,explode=true,name=pageToken"`
	// The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
	Part []string `queryParam:"style=form,explode=true,name=part"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Filter on resources published after this date.
	PublishedAfter *string `queryParam:"style=form,explode=true,name=publishedAfter"`
	// Filter on resources published before this date.
	PublishedBefore *string `queryParam:"style=form,explode=true,name=publishedBefore"`
	// Textual search terms to match.
	Q *string `queryParam:"style=form,explode=true,name=q"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Display the content as seen by viewers in this country.
	RegionCode *string `queryParam:"style=form,explode=true,name=regionCode"`
	// Search related to a resource.
	RelatedToVideoID *string `queryParam:"style=form,explode=true,name=relatedToVideoId"`
	// Return results relevant to this language.
	RelevanceLanguage *string `queryParam:"style=form,explode=true,name=relevanceLanguage"`
	// Indicates whether the search results should include restricted content as well as standard content.
	SafeSearch *YoutubeSearchListSafeSearchEnum `queryParam:"style=form,explode=true,name=safeSearch"`
	// Restrict results to a particular topic.
	TopicID *string `queryParam:"style=form,explode=true,name=topicId"`
	// Restrict results to a particular set of resource types from One Platform.
	Type []string `queryParam:"style=form,explode=true,name=type"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// Filter on the presence of captions on the videos.
	VideoCaption *YoutubeSearchListVideoCaptionEnum `queryParam:"style=form,explode=true,name=videoCaption"`
	// Filter on videos in a specific category.
	VideoCategoryID *string `queryParam:"style=form,explode=true,name=videoCategoryId"`
	// Filter on the definition of the videos.
	VideoDefinition *YoutubeSearchListVideoDefinitionEnum `queryParam:"style=form,explode=true,name=videoDefinition"`
	// Filter on 3d videos.
	VideoDimension *YoutubeSearchListVideoDimensionEnum `queryParam:"style=form,explode=true,name=videoDimension"`
	// Filter on the duration of the videos.
	VideoDuration *YoutubeSearchListVideoDurationEnum `queryParam:"style=form,explode=true,name=videoDuration"`
	// Filter on embeddable videos.
	VideoEmbeddable *YoutubeSearchListVideoEmbeddableEnum `queryParam:"style=form,explode=true,name=videoEmbeddable"`
	// Filter on the license of the videos.
	VideoLicense *YoutubeSearchListVideoLicenseEnum `queryParam:"style=form,explode=true,name=videoLicense"`
	// Filter on syndicated videos.
	VideoSyndicated *YoutubeSearchListVideoSyndicatedEnum `queryParam:"style=form,explode=true,name=videoSyndicated"`
	// Filter on videos of a specific type.
	VideoType *YoutubeSearchListVideoTypeEnum `queryParam:"style=form,explode=true,name=videoType"`
}

type YoutubeSearchListResponse struct {
	ContentType string
	// Successful response
	SearchListResponse *shared.SearchListResponse
	StatusCode         int
	RawResponse        *http.Response
}
