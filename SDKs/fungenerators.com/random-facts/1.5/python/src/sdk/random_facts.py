"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class RandomFacts:
    r"""Get random facts based on category and other criteria.
    http://fungenerators.com/api/facts#number - Find out more
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_fact(self, request: operations.GetFactRequest, security: operations.GetFactSecurity) -> operations.GetFactResponse:
        r"""Get a Fact belonging to the id."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact'
        
        query_params = utils.get_query_params(operations.GetFactRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fact_categories(self, request: operations.GetFactCategoriesRequest, security: operations.GetFactCategoriesSecurity) -> operations.GetFactCategoriesResponse:
        r"""Get a random Fact."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/categories'
        
        query_params = utils.get_query_params(operations.GetFactCategoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fact_random(self, request: operations.GetFactRandomRequest, security: operations.GetFactRandomSecurity) -> operations.GetFactRandomResponse:
        r"""Get a random Fact for a given category(optional) and subcategory(optional)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/random'
        
        query_params = utils.get_query_params(operations.GetFactRandomRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactRandomResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_fact_search(self, request: operations.GetFactSearchRequest, security: operations.GetFactSearchSecurity) -> operations.GetFactSearchResponse:
        r"""Search for random Fact which has the text in the query, for a given category(optional) and subcategory(optional)."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/fact/search'
        
        query_params = utils.get_query_params(operations.GetFactSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    