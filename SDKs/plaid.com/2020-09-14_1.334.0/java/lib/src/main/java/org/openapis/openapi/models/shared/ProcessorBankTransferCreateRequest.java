/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ProcessorBankTransferCreateRequest - Defines the request schema for `/processor/bank_transfer/create`
 */
public class ProcessorBankTransferCreateRequest {
    /**
     * Specifies the use case of the transfer. Required for transfers on an ACH network.
     * 
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     * 
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     * 
     * `"tel"` - Telephone-Initiated Entry
     * 
     * `"web"` - Internet-Initiated Entry - debits from a consumer\u2019s account where their authorization is obtained over the Internet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ach_class")
    public ACHClassEnum achClass;
    public ProcessorBankTransferCreateRequest withAchClass(ACHClassEnum achClass) {
        this.achClass = achClass;
        return this;
    }
    
    /**
     * The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
     */
    @JsonProperty("amount")
    public String amount;
    public ProcessorBankTransferCreateRequest withAmount(String amount) {
        this.amount = amount;
        return this;
    }
    
    /**
     * Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;
    public ProcessorBankTransferCreateRequest withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    /**
     * An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_tag")
    public String customTag;
    public ProcessorBankTransferCreateRequest withCustomTag(String customTag) {
        this.customTag = customTag;
        return this;
    }
    
    /**
     * The transfer description. Maximum of 10 characters.
     */
    @JsonProperty("description")
    public String description;
    public ProcessorBankTransferCreateRequest withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
     * 
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     */
    @JsonProperty("idempotency_key")
    public String idempotencyKey;
    public ProcessorBankTransferCreateRequest withIdempotencyKey(String idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    
    /**
     * The currency of the transfer amount \u2013 should be set to "USD".
     */
    @JsonProperty("iso_currency_code")
    public String isoCurrencyCode;
    public ProcessorBankTransferCreateRequest withIsoCurrencyCode(String isoCurrencyCode) {
        this.isoCurrencyCode = isoCurrencyCode;
        return this;
    }
    
    /**
     * The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public ProcessorBankTransferCreateRequest withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
     */
    @JsonProperty("network")
    public BankTransferNetworkEnum network;
    public ProcessorBankTransferCreateRequest withNetwork(BankTransferNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * Plaid\u2019s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origination_account_id")
    public String originationAccountId;
    public ProcessorBankTransferCreateRequest withOriginationAccountId(String originationAccountId) {
        this.originationAccountId = originationAccountId;
        return this;
    }
    
    /**
     * The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-&lt;environment&gt;-&lt;identifier&gt;`
     */
    @JsonProperty("processor_token")
    public String processorToken;
    public ProcessorBankTransferCreateRequest withProcessorToken(String processorToken) {
        this.processorToken = processorToken;
        return this;
    }
    
    /**
     * Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    public String secret;
    public ProcessorBankTransferCreateRequest withSecret(String secret) {
        this.secret = secret;
        return this;
    }
    
    /**
     * The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     */
    @JsonProperty("type")
    public BankTransferTypeEnum type;
    public ProcessorBankTransferCreateRequest withType(BankTransferTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * The legal name and other information for the account holder.
     */
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public ProcessorBankTransferCreateRequest withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
}
