// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TaskFileDTOCategoryEnum - file category
type TaskFileDTOCategoryEnum string

const (
	TaskFileDTOCategoryEnumWorkfile   TaskFileDTOCategoryEnum = "WORKFILE"
	TaskFileDTOCategoryEnumTm         TaskFileDTOCategoryEnum = "TM"
	TaskFileDTOCategoryEnumDictionary TaskFileDTOCategoryEnum = "DICTIONARY"
	TaskFileDTOCategoryEnumRef        TaskFileDTOCategoryEnum = "REF"
	TaskFileDTOCategoryEnumLogFile    TaskFileDTOCategoryEnum = "LOG_FILE"
)

func (e TaskFileDTOCategoryEnum) ToPointer() *TaskFileDTOCategoryEnum {
	return &e
}

func (e *TaskFileDTOCategoryEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WORKFILE":
		fallthrough
	case "TM":
		fallthrough
	case "DICTIONARY":
		fallthrough
	case "REF":
		fallthrough
	case "LOG_FILE":
		*e = TaskFileDTOCategoryEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TaskFileDTOCategoryEnum: %v", v)
	}
}

// TaskFileDTO - describes files; remember that either url, content or token should be filled
type TaskFileDTO struct {
	// file category
	Category *TaskFileDTOCategoryEnum `json:"category,omitempty"`
	Content  *string                  `json:"content,omitempty"`
	Name     *string                  `json:"name,omitempty"`
	Token    *string                  `json:"token,omitempty"`
	URL      *string                  `json:"url,omitempty"`
}
