// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// behavior - Allows to anonymously report a person behavior. This information is fed to our machine learning platform to determine the reputational score of a person and produces a dataset; thus helping identify easily whether a candidate is reliable or not, based on all of their reputation against feedback reporters, visible via check API or user interface.
type behavior struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newBehavior(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *behavior {
	return &behavior{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// ReportBehavior - Report Behavior
// Creates a behavior item to report employee conducts that do not or might not be included in their background check. This report includes both possitive and negative behaviors and sorts them by severity.
//
// ### Reasons to report a person
//
// <table>
//
//	<tr>
//	  <td style="width: 100px"><center><b>Very High</b><br>(Score: 1)</td>
//	  <td>Rape, Drug Dealing, Sexual Harassment</td>
//	</tr>
//	<tr>
//	  <td><center><b>High</b><br>(Score: 0.8)</td>
//	  <td>Theft, Fights, Aggressive Behaviour, Identity Fraud, Drunk, Drug Possession</td>
//	</tr>
//	<tr>
//	  <td><center><b>Medium</b><br>(Score: 0.6)</td>
//	  <td>Absences</td>
//	</tr>
//	<tr>
//	  <td><center><b>Low</b><br>(Score: 0.4)</td>
//	  <td>Tardiness, Confidentiality Breach</td>
//	</tr>
//	<tr>
//	  <td><center><b>None</b><br>(Score: 0)</td>
//	  <td>Good Reputation</td>
//	</tr>
//	<tr>
//	  <td><center><b>Unknown</b></td>
//	  <td>No information</td>
//	</tr>
//
// </table>
//
// **NOTE:** If the reason of your report is not here, please contact Truora support team.
func (s *behavior) ReportBehavior(ctx context.Context, request shared.CreateBehaviorInput, security operations.ReportBehaviorSecurity) (*operations.ReportBehaviorResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/v1/behavior"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "form")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := utils.ConfigureSecurityClient(s.defaultClient, security)

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.ReportBehaviorResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 201:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out *shared.BehaviourOutput
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.BehaviourOutput = out
		}
	case httpRes.StatusCode == 400:
		switch {
		case utils.MatchContentType(contentType, `application/json`):
			var out []shared.Error
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.Errors = out
		}
	}

	return res, nil
}
