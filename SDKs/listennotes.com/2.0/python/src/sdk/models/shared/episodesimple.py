"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import podcastminimum as shared_podcastminimum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EpisodeSimple:
    r"""OK"""
    
    audio: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio'), 'exclude': lambda f: f is None }})
    r"""Audio url of this episode, which can be played directly."""  
    audio_length_sec: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audio_length_sec'), 'exclude': lambda f: f is None }})
    r"""Audio length of this episode. In seconds."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Html of this episode's full description"""  
    explicit_content: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('explicit_content'), 'exclude': lambda f: f is None }})
    r"""Whether this podcast contains explicit language."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Episode id, which can be used to further fetch detailed episode metadata via `GET /episodes/{id}`."""  
    image: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image'), 'exclude': lambda f: f is None }})
    r"""Image url for this episode.
    If an episode doesn't have its own image, then this field would be the url of the podcast artwork image.
    If you are using PRO/ENTERPRISE plan, then it's
    a high resolution image (1400x1400). If you are using FREE plan, then it's the same as **thumbnail**,
    low resolution image (300x300).
    """  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})
    r"""Web link of this episode."""  
    listennotes_edit_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_edit_url'), 'exclude': lambda f: f is None }})
    r"""Edit url of this episode where you can update the audio url if you find the audio is broken."""  
    listennotes_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('listennotes_url'), 'exclude': lambda f: f is None }})
    r"""The url of this episode on [ListenNotes.com](https://www.ListenNotes.com)."""  
    maybe_audio_invalid: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maybe_audio_invalid'), 'exclude': lambda f: f is None }})
    r"""Whether or not this episode's audio is invalid. Podcasters may delete the original audio."""  
    podcast: Optional[shared_podcastminimum.PodcastMinimum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('podcast'), 'exclude': lambda f: f is None }})  
    pub_date_ms: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pub_date_ms'), 'exclude': lambda f: f is None }})
    r"""Published date for this episode. In millisecond."""  
    thumbnail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thumbnail'), 'exclude': lambda f: f is None }})
    r"""Thumbnail image (300x300) url for this episode.
    If an episode doesn't have its own image, then this field would be the url of the podcast artwork thumbnail image.
    """  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Episode name."""  
    