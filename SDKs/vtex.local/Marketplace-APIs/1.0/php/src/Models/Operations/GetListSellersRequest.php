<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class GetListSellersRequest
{
    /**
     * HTTP Client Negotiation Accept Header. Indicates the types of responses the client can understand.
     * 
     * @var string $accept
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Accept')]
    public string $accept;
    
    /**
     * Type of the content being sent.
     * 
     * @var string $contentType
     */
	#[SpeakeasyMetadata('header:style=simple,explode=false,name=Content-Type')]
    public string $contentType;
    
    /**
     * Name of the VTEX account that belongs to the marketplace.
     * 
     * @var string $accountName
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=accountName')]
    public string $accountName;
    
    /**
     * Environment to use. Used as part of the URL.
     * 
     * @var string $environment
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=environment')]
    public string $environment;
    
    /**
     * The start number of pagination, being `0` the default value.
     * 
     * @var ?float $from
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=from')]
    public ?float $from = null;
    
    /**
     * Groups are defined by keywords that group sellers into categories defined by the marketplace.
     * 
     * @var ?string $group
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=group ')]
    public ?string $group = null;
    
    /**
     * Filters sellers by the name of who made the integration, if VTEX or an external hub. The possible values for VTEX integrations are: `vtex-sellerportal`, `vtex-seller` and `vtex-franchise`.
     * 
     * @var ?string $integration
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=integration')]
    public ?string $integration = null;
    
    /**
     * Enables to filter sellers that are active (`true`) or unactive (`false`) in the marketplace.
     * 
     * @var ?bool $isActive
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=isActive')]
    public ?bool $isActive = null;
    
    /**
     * The flag `isBetterScope` is used by the VTEX Checkout to simulate shopping carts, products, and shipping only in sellers with the field set as `true`, avoiding performance issues. When used as a query param, `isBetterScope` filters sellers that have the flag set as `true` or `false`.
     * 
     * @var ?bool $isBetterScope
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=isBetterScope')]
    public ?bool $isBetterScope = null;
    
    /**
     * When set as `true`, the list returned will be of sellers who have a VTEX store configured. When set as `false`, the list will be of sellers who do not have a VTEX store configured.
     * 
     * @var ?bool $isVtex
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=isVtex')]
    public ?bool $isVtex = null;
    
    /**
     * Search sellers by a keyword in `sellerId` or `sellerName`.
     * 
     * @var ?string $keyword
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=keyword')]
    public ?string $keyword = null;
    
    /**
     * Filters sellers available for the marketplace's sales channel (or [trade policy](https://help.vtex.com/en/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) indicated in this field.
     * 
     * @var ?string $sc
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sc')]
    public ?string $sc = null;
    
    /**
     * Filters sellers by their type, which can be regular seller (`1`) or whitelabel seller (`2`).
     * 
     * @var ?int $sellerType
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sellerType')]
    public ?int $sellerType = null;
    
    /**
     * Narrow the search filtering by the fields: `id`, `name` or `pendingoffers`. The list retrieved can be organized in an ascending (`asc`) or descending (`desc`) order. The standardized format is `{field}:{order}`, and the default value is `id:asc`.
     * 
     * @var ?string $sort
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sort')]
    public ?string $sort = null;
    
    /**
     * The end number of pagination, being `100` the default value.
     * 
     * @var ?float $to
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=to')]
    public ?float $to = null;
    
	public function __construct()
	{
		$this->accept = "";
		$this->contentType = "";
		$this->accountName = "";
		$this->environment = "";
		$this->from = null;
		$this->group = null;
		$this->integration = null;
		$this->isActive = null;
		$this->isBetterScope = null;
		$this->isVtex = null;
		$this->keyword = null;
		$this->sc = null;
		$this->sellerType = null;
		$this->sort = null;
		$this->to = null;
	}
}
