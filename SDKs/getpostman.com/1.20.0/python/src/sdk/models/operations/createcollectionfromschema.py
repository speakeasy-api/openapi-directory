"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollectionFromSchemaRequestBodyRelations:
    
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollectionFromSchemaRequestBody:
    
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    relations: Optional[list[CreateCollectionFromSchemaRequestBodyRelations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateCollectionFromSchemaRequest:
    
    api_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiId', 'style': 'simple', 'explode': False }})  
    api_version_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'apiVersionId', 'style': 'simple', 'explode': False }})  
    schema_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'schemaId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateCollectionFromSchemaRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    workspace: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'workspace', 'style': 'form', 'explode': True }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollectionFromSchema200ApplicationJSONCollection:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollectionFromSchema200ApplicationJSONRelations:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateCollectionFromSchema200ApplicationJSON:
    r"""Create collection from schema"""
    
    collection: Optional[CreateCollectionFromSchema200ApplicationJSONCollection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('collection'), 'exclude': lambda f: f is None }})  
    relations: Optional[list[CreateCollectionFromSchema200ApplicationJSONRelations]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('relations'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateCollectionFromSchemaResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_collection_from_schema_200_application_json_object: Optional[CreateCollectionFromSchema200ApplicationJSON] = dataclasses.field(default=None)
    r"""Create collection from schema"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    