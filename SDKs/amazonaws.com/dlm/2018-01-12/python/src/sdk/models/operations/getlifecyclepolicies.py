"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import getlifecyclepoliciesresponse as shared_getlifecyclepoliciesresponse
from ..shared import resourcetypevalues_enum as shared_resourcetypevalues_enum
from enum import Enum
from typing import Any, Optional

class GetLifecyclePoliciesStateEnum(str, Enum):
    r"""The activation state."""
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'


@dataclasses.dataclass
class GetLifecyclePoliciesRequest:
    
    policy_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'policyIds', 'style': 'form', 'explode': True }})
    r"""The identifiers of the data lifecycle policies."""  
    resource_types: Optional[list[shared_resourcetypevalues_enum.ResourceTypeValuesEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resourceTypes', 'style': 'form', 'explode': True }})
    r"""The resource type."""  
    state: Optional[GetLifecyclePoliciesStateEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'state', 'style': 'form', 'explode': True }})
    r"""The activation state."""  
    tags_to_add: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagsToAdd', 'style': 'form', 'explode': True }})
    r"""<p>The tags to add to objects created by the policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p> <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>"""  
    target_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'targetTags', 'style': 'form', 'explode': True }})
    r"""<p>The target tag for a policy.</p> <p>Tags are strings in the format <code>key=value</code>.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GetLifecyclePoliciesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_lifecycle_policies_response: Optional[shared_getlifecyclepoliciesresponse.GetLifecyclePoliciesResponse] = dataclasses.field(default=None)
    r"""Success"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""LimitExceededException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    