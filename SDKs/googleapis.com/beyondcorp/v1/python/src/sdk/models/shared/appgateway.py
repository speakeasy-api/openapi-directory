"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import allocatedconnection as shared_allocatedconnection
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AppGatewayHostTypeEnum(str, Enum):
    r"""Required. The type of hosting used by the AppGateway."""
    HOST_TYPE_UNSPECIFIED = 'HOST_TYPE_UNSPECIFIED'
    GCP_REGIONAL_MIG = 'GCP_REGIONAL_MIG'

class AppGatewayStateEnum(str, Enum):
    r"""Output only. The current state of the AppGateway."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DOWN = 'DOWN'

class AppGatewayTypeEnum(str, Enum):
    r"""Required. The type of network connectivity used by the AppGateway."""
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TCP_PROXY = 'TCP_PROXY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppGateway:
    r"""A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway."""
    
    allocated_connections: Optional[list[shared_allocatedconnection.AllocatedConnection]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allocatedConnections'), 'exclude': lambda f: f is None }})
    r"""Output only. A list of connections allocated for the Gateway"""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when the resource was created."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters."""  
    host_type: Optional[AppGatewayHostTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostType'), 'exclude': lambda f: f is None }})
    r"""Required. The type of hosting used by the AppGateway."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user provided metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway."""  
    state: Optional[AppGatewayStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current state of the AppGateway."""  
    type: Optional[AppGatewayTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. The type of network connectivity used by the AppGateway."""  
    uid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uid'), 'exclude': lambda f: f is None }})
    r"""Output only. A unique identifier for the instance generated by the system."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. Timestamp when the resource was last modified."""  
    uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uri'), 'exclude': lambda f: f is None }})
    r"""Output only. Server-defined URI for this resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AppGatewayInput:
    r"""A BeyondCorp AppGateway resource represents a BeyondCorp protected AppGateway to a remote application. It creates all the necessary GCP components needed for creating a BeyondCorp protected AppGateway. Multiple connectors can be authorised for a single AppGateway."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters."""  
    host_type: Optional[AppGatewayHostTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostType'), 'exclude': lambda f: f is None }})
    r"""Required. The type of hosting used by the AppGateway."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""Optional. Resource labels to represent user provided metadata."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway."""  
    type: Optional[AppGatewayTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""Required. The type of network connectivity used by the AppGateway."""  
    