"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import message as shared_message
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class GetMessagesSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    
class GetMessagesSortOrderEnum(str, Enum):
    r"""The default value is DESCENDING
    
    If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
    """
    ASCENDING = 'ASCENDING'


@dataclasses.dataclass
class GetMessagesRequest:
    
    filter: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': True }})
    r"""See the message filtering for more information."""  
    limit: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""The maximum number of messages that are returned.  The default is 1000.
    The value of `limit` is not a guarantee that a specific number of messages will be in the response, even if there are more messages available.  Consider the case where you have 150 messages and you specify `limit=50`.  It is possible that only 49 messages will be returned.  The  way to make sure that there are no more messages is to submit a new call using the `id` filter field with the `<` operator (described below).
    """  
    sort_order: Optional[GetMessagesSortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': True }})
    r"""The default value is DESCENDING
    
    If the `sortOrder` is DESCENDING, the newest messages be first in the result.  ASCENDING places the oldest messages on top of the response.
    """  
    

@dataclasses.dataclass
class GetMessagesResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Bad Request. The content or structure of your submission, or a parameter, was found to be invalid."""  
    messages: Optional[list[shared_message.Message]] = dataclasses.field(default=None)
    r"""Contains the requested array of messages"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    