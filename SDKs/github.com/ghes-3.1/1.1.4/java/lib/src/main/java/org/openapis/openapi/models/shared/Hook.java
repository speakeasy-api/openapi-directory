/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Hook - Webhooks for repositories.
 */
public class Hook {
    /**
     * Determines whether the hook is actually triggered on pushes.
     */
    @JsonProperty("active")
    public Boolean active;

    public Hook withActive(Boolean active) {
        this.active = active;
        return this;
    }
    
    @JsonProperty("config")
    public HookConfig config;

    public Hook withConfig(HookConfig config) {
        this.config = config;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Hook withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * Determines what events the hook is triggered for. Default: ['push'].
     */
    @JsonProperty("events")
    public String[] events;

    public Hook withEvents(String[] events) {
        this.events = events;
        return this;
    }
    
    /**
     * Unique identifier of the webhook.
     */
    @JsonProperty("id")
    public Long id;

    public Hook withId(Long id) {
        this.id = id;
        return this;
    }
    
    @JsonProperty("last_response")
    public HookResponse lastResponse;

    public Hook withLastResponse(HookResponse lastResponse) {
        this.lastResponse = lastResponse;
        return this;
    }
    
    /**
     * The name of a valid service, use 'web' for a webhook.
     */
    @JsonProperty("name")
    public String name;

    public Hook withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonProperty("ping_url")
    public String pingUrl;

    public Hook withPingUrl(String pingUrl) {
        this.pingUrl = pingUrl;
        return this;
    }
    
    @JsonProperty("test_url")
    public String testUrl;

    public Hook withTestUrl(String testUrl) {
        this.testUrl = testUrl;
        return this;
    }
    
    @JsonProperty("type")
    public String type;

    public Hook withType(String type) {
        this.type = type;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public Hook withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonProperty("url")
    public String url;

    public Hook withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public Hook(@JsonProperty("active") Boolean active, @JsonProperty("config") HookConfig config, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("events") String[] events, @JsonProperty("id") Long id, @JsonProperty("last_response") HookResponse lastResponse, @JsonProperty("name") String name, @JsonProperty("ping_url") String pingUrl, @JsonProperty("test_url") String testUrl, @JsonProperty("type") String type, @JsonProperty("updated_at") OffsetDateTime updatedAt, @JsonProperty("url") String url) {
        this.active = active;
        this.config = config;
        this.createdAt = createdAt;
        this.events = events;
        this.id = id;
        this.lastResponse = lastResponse;
        this.name = name;
        this.pingUrl = pingUrl;
        this.testUrl = testUrl;
        this.type = type;
        this.updatedAt = updatedAt;
        this.url = url;
  }
}
