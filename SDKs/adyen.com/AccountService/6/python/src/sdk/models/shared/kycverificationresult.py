"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import kyccheckresult as shared_kyccheckresult
from ..shared import kyclegalarrangementcheckresult as shared_kyclegalarrangementcheckresult
from ..shared import kyclegalarrangemententitycheckresult as shared_kyclegalarrangemententitycheckresult
from ..shared import kycpayoutmethodcheckresult as shared_kycpayoutmethodcheckresult
from ..shared import kycshareholdercheckresult as shared_kycshareholdercheckresult
from ..shared import kycsignatorycheckresult as shared_kycsignatorycheckresult
from ..shared import kycultimateparentcompanycheckresult as shared_kycultimateparentcompanycheckresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class KYCVerificationResult:
    
    account_holder: Optional[shared_kyccheckresult.KYCCheckResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accountHolder'), 'exclude': lambda f: f is None }})  
    legal_arrangements: Optional[list[shared_kyclegalarrangementcheckresult.KYCLegalArrangementCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalArrangements'), 'exclude': lambda f: f is None }})
    r"""The results of the checks on the legal arrangements."""  
    legal_arrangements_entities: Optional[list[shared_kyclegalarrangemententitycheckresult.KYCLegalArrangementEntityCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('legalArrangementsEntities'), 'exclude': lambda f: f is None }})
    r"""The results of the checks on the legal arrangement entities."""  
    payout_methods: Optional[list[shared_kycpayoutmethodcheckresult.KYCPayoutMethodCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutMethods'), 'exclude': lambda f: f is None }})
    r"""The results of the checks on the payout methods."""  
    shareholders: Optional[list[shared_kycshareholdercheckresult.KYCShareholderCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shareholders'), 'exclude': lambda f: f is None }})
    r"""The results of the checks on the shareholders."""  
    signatories: Optional[list[shared_kycsignatorycheckresult.KYCSignatoryCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signatories'), 'exclude': lambda f: f is None }})
    r"""The results of the checks on the signatories."""  
    ultimate_parent_company: Optional[list[shared_kycultimateparentcompanycheckresult.KYCUltimateParentCompanyCheckResult]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ultimateParentCompany'), 'exclude': lambda f: f is None }})
    r"""The result of the check on the Ultimate Parent Company."""  
    