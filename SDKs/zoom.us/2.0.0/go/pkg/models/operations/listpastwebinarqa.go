// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"time"
)

type ListPastWebinarQASecurity struct {
	OAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type ListPastWebinarQARequest struct {
	// The webinar ID or the webinar UUID.  If a webinar ID is provided in the request instead of a UUID, the response will be for the latest webinar instance.
	//
	// If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875==\"), you must **double encode** the UUID before making an API request.
	WebinarID string `pathParam:"style=simple,explode=false,name=webinarId"`
}

type ListPastWebinarQA200ApplicationXMLQuestionsQuestionDetails struct {
	// Answer submitted for the question.
	Answer *string
	// Question asked during the Q&A.
	Question *string
}

type ListPastWebinarQA200ApplicationXMLQuestions struct {
	// Email address of the user.
	Email *string
	// Name of the user. If "anonymous" option is enabled for the Q&A, the participant's  information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name            *string
	QuestionDetails []ListPastWebinarQA200ApplicationXMLQuestionsQuestionDetails
}

// ListPastWebinarQA200ApplicationXML - **HTTP Status Code:** `200` **OK**<br>
// Q&A returned successfully.
type ListPastWebinarQA200ApplicationXML struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID        *int64
	Questions []ListPastWebinarQA200ApplicationXMLQuestions
	// The start time of the Webinar.
	StartTime *time.Time
	// Webinar UUID.
	UUID *string
}

type ListPastWebinarQA200ApplicationJSONQuestionsQuestionDetails struct {
	// Answer submitted for the question.
	Answer *string `json:"answer,omitempty"`
	// Question asked during the Q&A.
	Question *string `json:"question,omitempty"`
}

type ListPastWebinarQA200ApplicationJSONQuestions struct {
	// Email address of the user.
	Email *string `json:"email,omitempty"`
	// Name of the user. If "anonymous" option is enabled for the Q&A, the participant's  information will be kept anonymous and the value of `name` field will be "Anonymous Attendee".
	Name            *string                                                       `json:"name,omitempty"`
	QuestionDetails []ListPastWebinarQA200ApplicationJSONQuestionsQuestionDetails `json:"question_details,omitempty"`
}

// ListPastWebinarQA200ApplicationJSON - **HTTP Status Code:** `200` **OK**<br>
// Q&A returned successfully.
type ListPastWebinarQA200ApplicationJSON struct {
	// Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
	ID        *int64                                         `json:"id,omitempty"`
	Questions []ListPastWebinarQA200ApplicationJSONQuestions `json:"questions,omitempty"`
	// The start time of the Webinar.
	StartTime *time.Time `json:"start_time,omitempty"`
	// Webinar UUID.
	UUID *string `json:"uuid,omitempty"`
}

type ListPastWebinarQAResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200` **OK**<br>
	// Q&A returned successfully.
	ListPastWebinarQA200ApplicationJSONObject *ListPastWebinarQA200ApplicationJSON
}
