// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// MatchSimpleAlliances - A list of alliances, the teams on the alliances, and their score.
type MatchSimpleAlliances struct {
	Blue *MatchAlliance `json:"blue,omitempty"`
	Red  *MatchAlliance `json:"red,omitempty"`
}

// MatchSimpleCompLevelEnum - The competition level the match was played at.
type MatchSimpleCompLevelEnum string

const (
	MatchSimpleCompLevelEnumQm MatchSimpleCompLevelEnum = "qm"
	MatchSimpleCompLevelEnumEf MatchSimpleCompLevelEnum = "ef"
	MatchSimpleCompLevelEnumQf MatchSimpleCompLevelEnum = "qf"
	MatchSimpleCompLevelEnumSf MatchSimpleCompLevelEnum = "sf"
	MatchSimpleCompLevelEnumF  MatchSimpleCompLevelEnum = "f"
)

func (e MatchSimpleCompLevelEnum) ToPointer() *MatchSimpleCompLevelEnum {
	return &e
}

func (e *MatchSimpleCompLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "qm":
		fallthrough
	case "ef":
		fallthrough
	case "qf":
		fallthrough
	case "sf":
		fallthrough
	case "f":
		*e = MatchSimpleCompLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MatchSimpleCompLevelEnum: %v", v)
	}
}

// MatchSimpleWinningAllianceEnum - The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
type MatchSimpleWinningAllianceEnum string

const (
	MatchSimpleWinningAllianceEnumRed     MatchSimpleWinningAllianceEnum = "red"
	MatchSimpleWinningAllianceEnumBlue    MatchSimpleWinningAllianceEnum = "blue"
	MatchSimpleWinningAllianceEnumUnknown MatchSimpleWinningAllianceEnum = ""
)

func (e MatchSimpleWinningAllianceEnum) ToPointer() *MatchSimpleWinningAllianceEnum {
	return &e
}

func (e *MatchSimpleWinningAllianceEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "red":
		fallthrough
	case "blue":
		fallthrough
	case "":
		*e = MatchSimpleWinningAllianceEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MatchSimpleWinningAllianceEnum: %v", v)
	}
}

// MatchSimple - Successful response
type MatchSimple struct {
	// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of actual match start time.
	ActualTime *int64 `json:"actual_time,omitempty"`
	// A list of alliances, the teams on the alliances, and their score.
	Alliances *MatchSimpleAlliances `json:"alliances,omitempty"`
	// The competition level the match was played at.
	CompLevel MatchSimpleCompLevelEnum `json:"comp_level"`
	// Event key of the event the match was played at.
	EventKey string `json:"event_key"`
	// TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may append the competition level if more than one match in required per set.
	Key string `json:"key"`
	// The match number of the match in the competition level.
	MatchNumber int64 `json:"match_number"`
	// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the TBA predicted match start time.
	PredictedTime *int64 `json:"predicted_time,omitempty"`
	// The set number in a series of matches where more than one match is required in the match series.
	SetNumber int64 `json:"set_number"`
	// UNIX timestamp (seconds since 1-Jan-1970 00:00:00) of the scheduled match time, as taken from the published schedule.
	Time *int64 `json:"time,omitempty"`
	// The color (red/blue) of the winning alliance. Will contain an empty string in the event of no winner, or a tie.
	WinningAlliance *MatchSimpleWinningAllianceEnum `json:"winning_alliance,omitempty"`
}
