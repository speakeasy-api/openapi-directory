"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum(str, Enum):
    r"""[optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted."""
    ONE = '1'
    TWO = '2'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum(str, Enum):
    MD5 = 'md5'
    SHA1 = 'sha1'
    SHA256 = 'sha256'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum(str, Enum):
    AES128 = 'aes128'
    AES192 = 'aes192'
    AES256 = 'aes256'
    DES = 'des'
    NULL = 'null'
    TRIPLEDES = 'tripledes'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum(str, Enum):
    MD5 = 'md5'
    SHA1 = 'sha1'
    SHA256 = 'sha256'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum(str, Enum):
    AES128 = 'aes128'
    AES192 = 'aes192'
    AES256 = 'aes256'
    DES = 'des'
    TRIPLEDES = 'tripledes'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum(str, Enum):
    DEFAULT = 'default'
    PRFMD5 = 'prfmd5'
    PRFSHA1 = 'prfsha1'
    PRFSHA256 = 'prfsha256'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies:
    r"""Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used."""
    
    child_auth_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildAuthAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childAuthAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'"""  
    child_cipher_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesChildCipherAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childCipherAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'"""  
    child_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childLifetime'), 'exclude': lambda f: f is None }})
    r"""The lifetime of the Phase 2 SA in seconds."""  
    child_pfs_group: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childPfsGroup'), 'exclude': lambda f: f is None }})
    r"""This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'"""  
    ike_auth_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeAuthAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeAuthAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'"""  
    ike_cipher_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkeCipherAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeCipherAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'"""  
    ike_diffie_hellman_group: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeDiffieHellmanGroup'), 'exclude': lambda f: f is None }})
    r"""This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'"""  
    ike_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeLifetime'), 'exclude': lambda f: f is None }})
    r"""The lifetime of the Phase 1 SA in seconds."""  
    ike_prf_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPoliciesIkePrfAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikePrfAlgo'), 'exclude': lambda f: f is None }})
    r"""[optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the VPN peer"""  
    private_subnets: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateSubnets') }})
    r"""The list of the private subnets of the VPN peer"""  
    secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret') }})
    r"""The shared secret with the VPN peer"""  
    ike_version: Optional[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIkeVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeVersion'), 'exclude': lambda f: f is None }})
    r"""[optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted."""  
    ipsec_policies: Optional[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeersIpsecPolicies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipsecPolicies'), 'exclude': lambda f: f is None }})
    r"""Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used."""  
    ipsec_policies_preset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipsecPoliciesPreset'), 'exclude': lambda f: f is None }})
    r"""One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored."""  
    local_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localId'), 'exclude': lambda f: f is None }})
    r"""[optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to."""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all']."""  
    public_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp'), 'exclude': lambda f: f is None }})
    r"""[optional] The public IP of the VPN peer"""  
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId'), 'exclude': lambda f: f is None }})
    r"""[optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody:
    
    peers: list[UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBodyPeers] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peers') }})
    r"""The list of VPN peers"""  
    

@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: UpdateOrganizationApplianceVPNThirdPartyVPNPeersRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    
class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum(str, Enum):
    r"""[optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted."""
    ONE = '1'
    TWO = '2'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum(str, Enum):
    MD5 = 'md5'
    SHA1 = 'sha1'
    SHA256 = 'sha256'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum(str, Enum):
    AES128 = 'aes128'
    AES192 = 'aes192'
    AES256 = 'aes256'
    DES = 'des'
    NULL = 'null'
    TRIPLEDES = 'tripledes'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum(str, Enum):
    MD5 = 'md5'
    SHA1 = 'sha1'
    SHA256 = 'sha256'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum(str, Enum):
    AES128 = 'aes128'
    AES192 = 'aes192'
    AES256 = 'aes256'
    DES = 'des'
    TRIPLEDES = 'tripledes'

class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum(str, Enum):
    DEFAULT = 'default'
    PRFMD5 = 'prfmd5'
    PRFSHA1 = 'prfsha1'
    PRFSHA256 = 'prfsha256'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies:
    r"""Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used."""
    
    child_auth_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildAuthAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childAuthAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the authentication algorithms to be used in Phase 2. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'"""  
    child_cipher_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesChildCipherAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childCipherAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the cipher algorithms to be used in Phase 2. The value should be an array with one or more of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des', 'null'"""  
    child_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childLifetime'), 'exclude': lambda f: f is None }})
    r"""The lifetime of the Phase 2 SA in seconds."""  
    child_pfs_group: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('childPfsGroup'), 'exclude': lambda f: f is None }})
    r"""This is the Diffie-Hellman group to be used for Perfect Forward Secrecy in Phase 2. The value should be an array with one of the following values: 'disabled','group14', 'group5', 'group2', 'group1'"""  
    ike_auth_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeAuthAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeAuthAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the authentication algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'sha256', 'sha1', 'md5'"""  
    ike_cipher_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkeCipherAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeCipherAlgo'), 'exclude': lambda f: f is None }})
    r"""This is the cipher algorithm to be used in Phase 1. The value should be an array with one of the following algorithms: 'aes256', 'aes192', 'aes128', 'tripledes', 'des'"""  
    ike_diffie_hellman_group: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeDiffieHellmanGroup'), 'exclude': lambda f: f is None }})
    r"""This is the Diffie-Hellman group to be used in Phase 1. The value should be an array with one of the following algorithms: 'group14', 'group5', 'group2', 'group1'"""  
    ike_lifetime: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeLifetime'), 'exclude': lambda f: f is None }})
    r"""The lifetime of the Phase 1 SA in seconds."""  
    ike_prf_algo: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPoliciesIkePrfAlgoEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikePrfAlgo'), 'exclude': lambda f: f is None }})
    r"""[optional] This is the pseudo-random function to be used in IKE_SA. The value should be an array with one of the following algorithms: 'prfsha256', 'prfsha1', 'prfmd5', 'default'. The 'default' option can be used to default to the Authentication algorithm."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers:
    
    ike_version: Optional[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIkeVersionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ikeVersion'), 'exclude': lambda f: f is None }})
    r"""[optional] The IKE version to be used for the IPsec VPN peer configuration. Defaults to '1' when omitted."""  
    ipsec_policies: Optional[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeersIpsecPolicies] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipsecPolicies'), 'exclude': lambda f: f is None }})
    r"""Custom IPSec policies for the VPN peer. If not included and a preset has not been chosen, the default preset for IPSec policies will be used."""  
    ipsec_policies_preset: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipsecPoliciesPreset'), 'exclude': lambda f: f is None }})
    r"""One of the following available presets: 'default', 'aws', 'azure'. If this is provided, the 'ipsecPolicies' parameter is ignored."""  
    local_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('localId'), 'exclude': lambda f: f is None }})
    r"""[optional] The local ID is used to identify the MX to the peer. This will apply to all MXs this peer applies to."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the VPN peer"""  
    network_tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('networkTags'), 'exclude': lambda f: f is None }})
    r"""A list of network tags that will connect with this peer. Use ['all'] for all networks. Use ['none'] for no networks. If not included, the default is ['all']."""  
    private_subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('privateSubnets'), 'exclude': lambda f: f is None }})
    r"""The list of the private subnets of the VPN peer"""  
    public_ip: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publicIp'), 'exclude': lambda f: f is None }})
    r"""[optional] The public IP of the VPN peer"""  
    remote_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remoteId'), 'exclude': lambda f: f is None }})
    r"""[optional] The remote ID is used to identify the connecting VPN peer. This can either be a valid IPv4 Address, FQDN or User FQDN."""  
    secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secret'), 'exclude': lambda f: f is None }})
    r"""The shared secret with the VPN peer"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON:
    r"""Successful operation"""
    
    peers: Optional[list[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSONPeers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peers'), 'exclude': lambda f: f is None }})
    r"""The list of VPN peers"""  
    

@dataclasses.dataclass
class UpdateOrganizationApplianceVPNThirdPartyVPNPeersResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_appliance_vpn_third_party_vpn_peers_200_application_json_object: Optional[UpdateOrganizationApplianceVPNThirdPartyVPNPeers200ApplicationJSON] = dataclasses.field(default=None)
    r"""Successful operation"""  
    