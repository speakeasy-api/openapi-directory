"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import diskattachment as shared_diskattachment
from ..shared import newdiskinitializeparams as shared_newdiskinitializeparams
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NewDisk:
    r"""A Persistent Disk resource that will be created and attached to each Replica in the Pool. Each Replica will have a unique persistent disk that is created and attached to that Replica in READ_WRITE mode."""
    
    attachment: Optional[shared_diskattachment.DiskAttachment] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attachment'), 'exclude': lambda f: f is None }})
    r"""Specifies how to attach a disk to a Replica."""  
    auto_delete: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoDelete'), 'exclude': lambda f: f is None }})
    r"""If true, then this disk will be deleted when the instance is deleted. The default value is true."""  
    boot: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('boot'), 'exclude': lambda f: f is None }})
    r"""If true, indicates that this is the root persistent disk."""  
    initialize_params: Optional[shared_newdiskinitializeparams.NewDiskInitializeParams] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initializeParams'), 'exclude': lambda f: f is None }})
    r"""Initialization parameters for creating a new disk."""  
    