// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum - An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
type GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum string

const (
	GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnumWithAllTags GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum = "withAllTags"
	GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnumWithAnyTags GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum = "withAnyTags"
)

func (e *GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "withAllTags":
		fallthrough
	case "withAnyTags":
		*e = GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum: %s", s)
	}
}

type GetOrganizationDevicesPowerModulesStatusesByDeviceRequest struct {
	// A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	EndingBefore *string `queryParam:"style=form,explode=true,name=endingBefore"`
	// Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches.
	NetworkIds     []string `queryParam:"style=form,explode=false,name=networkIds"`
	OrganizationID string   `pathParam:"style=simple,explode=false,name=organizationId"`
	// The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000.
	PerPage *int64 `queryParam:"style=form,explode=true,name=perPage"`
	// Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches.
	ProductTypes []string `queryParam:"style=form,explode=false,name=productTypes"`
	// Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches.
	Serials []string `queryParam:"style=form,explode=false,name=serials"`
	// A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it.
	StartingAfter *string `queryParam:"style=form,explode=true,name=startingAfter"`
	// An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches.
	Tags []string `queryParam:"style=form,explode=false,name=tags"`
	// An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected.
	TagsFilterType *GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum `queryParam:"style=form,explode=true,name=tagsFilterType"`
}

// GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONNetwork - Network info.
type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONNetwork struct {
	// ID for the network that the device is associated with.
	ID *string `json:"id,omitempty"`
}

// GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum - Device product type.
type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum string

const (
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumAppliance       GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "appliance"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumCamera          GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "camera"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumCellularGateway GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "cellularGateway"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumSensor          GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "sensor"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumSwitch          GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "switch"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumSystemsManager  GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "systemsManager"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnumWireless        GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum = "wireless"
)

func (e *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "appliance":
		fallthrough
	case "camera":
		fallthrough
	case "cellularGateway":
		fallthrough
	case "sensor":
		fallthrough
	case "switch":
		fallthrough
	case "systemsManager":
		fallthrough
	case "wireless":
		*e = GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum: %s", s)
	}
}

// GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum - Which slot the AC power supply occupies. Possible values are: 0, 1, 2.
type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum string

const (
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnumZero GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum = "0"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnumOne  GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum = "1"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnumTwo  GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum = "2"
)

func (e *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		fallthrough
	case "2":
		*e = GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum: %s", s)
	}
}

// GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum - Status of the power supply unit. Possible values are: connected, not connected, powering.
type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum string

const (
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnumConnected    GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum = "connected"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnumNotConnected GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum = "not connected"
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnumPowering     GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum = "powering"
)

func (e *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "connected":
		fallthrough
	case "not connected":
		fallthrough
	case "powering":
		*e = GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum: %s", s)
	}
}

type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlots struct {
	// The power supply unit model.
	Model *string `json:"model,omitempty"`
	// Which slot the AC power supply occupies. Possible values are: 0, 1, 2.
	Number *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum `json:"number,omitempty"`
	// The power supply unit serial number.
	Serial *string `json:"serial,omitempty"`
	// Status of the power supply unit. Possible values are: connected, not connected, powering.
	Status *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum `json:"status,omitempty"`
}

type GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON struct {
	// The device MAC address.
	Mac *string `json:"mac,omitempty"`
	// The device name.
	Name *string `json:"name,omitempty"`
	// Network info.
	Network *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONNetwork `json:"network,omitempty"`
	// Device product type.
	ProductType *GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum `json:"productType,omitempty"`
	// The device serial number.
	Serial *string `json:"serial,omitempty"`
	// Information for the device's AC power supplies.
	Slots []GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlots `json:"slots,omitempty"`
	// List of custom tags for the device.
	Tags []string `json:"tags,omitempty"`
}

type GetOrganizationDevicesPowerModulesStatusesByDeviceResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONObjects []GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON
}
