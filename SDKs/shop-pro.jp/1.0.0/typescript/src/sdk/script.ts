/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * ショップページにスクリプトタグを挿入するAPIです。
 *
 * @remarks
 *
 * スクリプトタグエンドポイントを利用する場合、以下の点にご注意ください。
 * - スクリプトを配信するサーバは、適切なCORSヘッダ(e.g. `Access-Control-Allow-Origin`) をレスポンスに付与する必要があります
 * - 登録済みスクリプトの内容を変更した場合は、都度更新リクエストにて適切な `integrity` パラメータを送信する必要があります
 * - 登録するスクリプトのURLスキームは `https` のみになります
 * - 登録・更新時にカラーミーAPIがスクリプトを取得します。スクリプトが取得できない場合は登録できません
 * - スクリプトタグAPIで挿入されたスクリプトタグは、アプリがアンインストールされると自動で削除されます
 *
 */
export class Script {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * スクリプトタグの作成
   */
  createShopScriptTag(
    req: operations.CreateShopScriptTagRequestBody,
    security: operations.CreateShopScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateShopScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateShopScriptTagRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/appstore/v1/script_tags.json";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateShopScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateShopScriptTagResponse =
        new operations.CreateShopScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createShopScriptTag200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.CreateShopScriptTag200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * スクリプトタグの削除
   */
  deleteScriptTag(
    req: operations.DeleteScriptTagRequest,
    security: operations.DeleteScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/appstore/v1/script_tags/{scriptTagId}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.DeleteScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteScriptTagResponse =
        new operations.DeleteScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
      }

      return res;
    });
  }

  /**
   * スクリプトタグの取得
   */
  getShopScriptTag(
    req: operations.GetShopScriptTagRequest,
    security: operations.GetShopScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetShopScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetShopScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/appstore/v1/script_tags/{scriptTagId}.json",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetShopScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetShopScriptTagResponse =
        new operations.GetShopScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getShopScriptTag200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetShopScriptTag200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * スクリプトタグの取得
   */
  getShopScriptTags(
    config?: AxiosRequestConfig
  ): Promise<operations.GetShopScriptTagsResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/appstore/v1/script_tags.json";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetShopScriptTagsResponse =
        new operations.GetShopScriptTagsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getShopScriptTags200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetShopScriptTags200ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * スクリプトタグの更新
   */
  updateShopScriptTag(
    req: operations.UpdateShopScriptTagRequest,
    security: operations.UpdateShopScriptTagSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateShopScriptTagResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateShopScriptTagRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/appstore/v1/script_tags/{scriptTagId}.json",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateShopScriptTagSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateShopScriptTagResponse =
        new operations.UpdateShopScriptTagResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateShopScriptTag200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.UpdateShopScriptTag200ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }
}
