// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// AddPermissionRequestBodyFunctionURLAuthTypeEnum - The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.
type AddPermissionRequestBodyFunctionURLAuthTypeEnum string

const (
	AddPermissionRequestBodyFunctionURLAuthTypeEnumNone   AddPermissionRequestBodyFunctionURLAuthTypeEnum = "NONE"
	AddPermissionRequestBodyFunctionURLAuthTypeEnumAwsIam AddPermissionRequestBodyFunctionURLAuthTypeEnum = "AWS_IAM"
)

func (e AddPermissionRequestBodyFunctionURLAuthTypeEnum) ToPointer() *AddPermissionRequestBodyFunctionURLAuthTypeEnum {
	return &e
}

func (e *AddPermissionRequestBodyFunctionURLAuthTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "AWS_IAM":
		*e = AddPermissionRequestBodyFunctionURLAuthTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddPermissionRequestBodyFunctionURLAuthTypeEnum: %v", v)
	}
}

type AddPermissionRequestBody struct {
	// The action that the principal can use on the function. For example, <code>lambda:InvokeFunction</code> or <code>lambda:GetFunction</code>.
	Action string `json:"Action"`
	// For Alexa Smart Home functions, a token that the invoker must supply.
	EventSourceToken *string `json:"EventSourceToken,omitempty"`
	// The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html">Security and auth model for Lambda function URLs</a>.
	FunctionURLAuthType *AddPermissionRequestBodyFunctionURLAuthTypeEnum `json:"FunctionUrlAuthType,omitempty"`
	// The Amazon Web Service or Amazon Web Services account that invokes the function. If you specify a service, use <code>SourceArn</code> or <code>SourceAccount</code> to limit who can invoke the function through that service.
	Principal string `json:"Principal"`
	// The identifier for your organization in Organizations. Use this to grant permissions to all the Amazon Web Services accounts under this organization.
	PrincipalOrgID *string `json:"PrincipalOrgID,omitempty"`
	// Update the policy only if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.
	RevisionID *string `json:"RevisionId,omitempty"`
	// For Amazon Web Service, the ID of the Amazon Web Services account that owns the resource. Use this together with <code>SourceArn</code> to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
	SourceAccount *string `json:"SourceAccount,omitempty"`
	// <p>For Amazon Web Services, the ARN of the Amazon Web Services resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.</p> <p>Note that Lambda configures the comparison using the <code>StringLike</code> operator.</p>
	SourceArn *string `json:"SourceArn,omitempty"`
	// A statement identifier that differentiates the statement from others in the same policy.
	StatementID string `json:"StatementId"`
}

type AddPermissionRequest struct {
	// <p>The name of the Lambda function, version, or alias.</p> <p class="title"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code> (name-only), <code>my-function:v1</code> (with alias).</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>
	FunctionName string `pathParam:"style=simple,explode=false,name=FunctionName"`
	// Specify a version or alias to add permissions to a published version of the function.
	Qualifier         *string                  `queryParam:"style=form,explode=true,name=Qualifier"`
	RequestBody       AddPermissionRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                  `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                  `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                  `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                  `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                  `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                  `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                  `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type AddPermissionResponse struct {
	// Success
	AddPermissionResponse *shared.AddPermissionResponse
	ContentType           string
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	// PolicyLengthExceededException
	PolicyLengthExceededException interface{}
	// PreconditionFailedException
	PreconditionFailedException interface{}
	// ResourceConflictException
	ResourceConflictException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ServiceException
	ServiceException interface{}
	StatusCode       int
	RawResponse      *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
}
