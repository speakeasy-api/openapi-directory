<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class BackgroundRemoval 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Remove the background of an image
     * 
     * Removes the background of a JPG/PNG image.
     * 
     * * File size: up to 12 MB
     * * Image source: File upload (binary or as base64 encoded string) or download from URL
     * * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
     * * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
     * 
     * Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RemoveBgJson $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRemovebgFormResponse
     */
	public function postRemovebgForm(
        \OpenAPI\OpenAPI\Models\Shared\RemoveBgJson $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRemovebgFormResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/removebg');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRemovebgFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeBgJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoveBgJsonResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'image/*')) {
                $response->postRemovebgForm200ImageWildcardBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove the background of an image
     * 
     * Removes the background of a JPG/PNG image.
     * 
     * * File size: up to 12 MB
     * * Image source: File upload (binary or as base64 encoded string) or download from URL
     * * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
     * * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
     * 
     * Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RemoveBgJson $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRemovebgJsonResponse
     */
	public function postRemovebgJson(
        \OpenAPI\OpenAPI\Models\Shared\RemoveBgJson $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRemovebgJsonResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/removebg');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRemovebgJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeBgJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoveBgJsonResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'image/*')) {
                $response->postRemovebgJson200ImageWildcardBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
	
    /**
     * Remove the background of an image
     * 
     * Removes the background of a JPG/PNG image.
     * 
     * * File size: up to 12 MB
     * * Image source: File upload (binary or as base64 encoded string) or download from URL
     * * Image Content: Any photo with a foreground [(e.g. people, products, animals, cars, etc.)](/supported-images)
     * * Output resolutions available: Preview (up to 0.25 megapixels), Full (up to 25 megapixels)
     * 
     * Requires either an API Key to be provided in the `X-API-Key` request header or an OAuth 2.0 access token to be provided in the `Authorization` request header.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\RemoveBgMultipart $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostRemovebgMultipartResponse
     */
	public function postRemovebgMultipart(
        \OpenAPI\OpenAPI\Models\Shared\RemoveBgMultipart $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostRemovebgMultipartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/removebg');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostRemovebgMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->removeBgJsonResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RemoveBgJsonResponse', 'json');
            }
            if (Utils\Utils::matchContentType($contentType, 'image/*')) {
                $response->postRemovebgMultipart200ImageWildcardBinaryString = $httpResponse->getBody()->getContents();
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 402 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 429) {
            if (Utils\Utils::matchContentType($contentType, '*/*')) {
                $response->body = $httpResponse->getBody()->getContents();
            }
        }

        return $response;
    }
}