"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import checkerror as shared_checkerror
from ..shared import checkinfo as shared_checkinfo
from ..shared import quotainfo as shared_quotainfo
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckResponse:
    r"""Response message for the Check method."""
    
    check_errors: Optional[list[shared_checkerror.CheckError]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkErrors'), 'exclude': lambda f: f is None }})
    r"""Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action."""  
    check_info: Optional[shared_checkinfo.CheckInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('checkInfo'), 'exclude': lambda f: f is None }})
    r"""Contains additional information about the check operation."""  
    operation_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('operationId'), 'exclude': lambda f: f is None }})
    r"""The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes."""  
    quota_info: Optional[shared_quotainfo.QuotaInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotaInfo'), 'exclude': lambda f: f is None }})
    r"""Contains the quota information for a quota check response."""  
    service_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceConfigId'), 'exclude': lambda f: f is None }})
    r"""The actual config id used to process the request."""  
    service_rollout_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serviceRolloutId'), 'exclude': lambda f: f is None }})
    r"""The current service rollout id used to process the request."""  
    