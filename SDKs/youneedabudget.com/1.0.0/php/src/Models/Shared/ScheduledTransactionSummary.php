<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class ScheduledTransactionSummary
{
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $accountId;
    
    /**
     * The scheduled transaction amount in milliunits format
     * 
     * @var int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $amount;
    
	#[\JMS\Serializer\Annotation\SerializedName('category_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $categoryId = null;
    
    /**
     * The first date for which the Scheduled Transaction was scheduled.
     * 
     * @var \DateTime $dateFirst
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_first')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $dateFirst;
    
    /**
     * The next date for which the Scheduled Transaction is scheduled.
     * 
     * @var \DateTime $dateNext
     */
	#[\JMS\Serializer\Annotation\SerializedName('date_next')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $dateNext;
    
    /**
     * Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
     * 
     * @var bool $deleted
     */
	#[\JMS\Serializer\Annotation\SerializedName('deleted')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $deleted;
    
    /**
     * The scheduled transaction flag
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ScheduledTransactionSummaryFlagColorEnum $flagColor
     */
	#[\JMS\Serializer\Annotation\SerializedName('flag_color')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ScheduledTransactionSummaryFlagColorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ScheduledTransactionSummaryFlagColorEnum $flagColor = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('frequency')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\ScheduledTransactionSummaryFrequencyEnum>')]
    public ScheduledTransactionSummaryFrequencyEnum $frequency;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
	#[\JMS\Serializer\Annotation\SerializedName('memo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $memo = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('payee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payeeId = null;
    
    /**
     * If a transfer, the account_id which the scheduled transaction transfers to
     * 
     * @var ?string $transferAccountId
     */
	#[\JMS\Serializer\Annotation\SerializedName('transfer_account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $transferAccountId = null;
    
	public function __construct()
	{
		$this->accountId = "";
		$this->amount = 0;
		$this->categoryId = null;
		$this->dateFirst = new \DateTime();
		$this->dateNext = new \DateTime();
		$this->deleted = false;
		$this->flagColor = null;
		$this->frequency = \OpenAPI\OpenAPI\Models\Shared\ScheduledTransactionSummaryFrequencyEnum::NEVER;
		$this->id = "";
		$this->memo = null;
		$this->payeeId = null;
		$this->transferAccountId = null;
	}
}
