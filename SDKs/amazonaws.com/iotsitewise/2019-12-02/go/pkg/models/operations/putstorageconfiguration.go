// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum - <p>Contains the storage configuration for time series (data streams) that aren't associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren't associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can't disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn't accept time series (data streams) that aren't associated with asset properties.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>
type PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum string

const (
	PutStorageConfigurationRequestBodyDisassociatedDataStorageEnumEnabled  PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum = "ENABLED"
	PutStorageConfigurationRequestBodyDisassociatedDataStorageEnumDisabled PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum = "DISABLED"
)

func (e PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum) ToPointer() *PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum {
	return &e
}

func (e *PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		*e = PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum: %v", v)
	}
}

// PutStorageConfigurationRequestBodyMultiLayerStorage - Contains information about the storage destination.
type PutStorageConfigurationRequestBodyMultiLayerStorage struct {
	CustomerManagedS3Storage *shared.CustomerManagedS3Storage `json:"customerManagedS3Storage,omitempty"`
}

// PutStorageConfigurationRequestBodyRetentionPeriod - How many days your data is kept in the hot tier. By default, your data is kept indefinitely in the hot tier.
type PutStorageConfigurationRequestBodyRetentionPeriod struct {
	NumberOfDays *int64 `json:"numberOfDays,omitempty"`
	Unlimited    *bool  `json:"unlimited,omitempty"`
}

// PutStorageConfigurationRequestBodyStorageTypeEnum - <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
type PutStorageConfigurationRequestBodyStorageTypeEnum string

const (
	PutStorageConfigurationRequestBodyStorageTypeEnumSitewiseDefaultStorage PutStorageConfigurationRequestBodyStorageTypeEnum = "SITEWISE_DEFAULT_STORAGE"
	PutStorageConfigurationRequestBodyStorageTypeEnumMultiLayerStorage      PutStorageConfigurationRequestBodyStorageTypeEnum = "MULTI_LAYER_STORAGE"
)

func (e PutStorageConfigurationRequestBodyStorageTypeEnum) ToPointer() *PutStorageConfigurationRequestBodyStorageTypeEnum {
	return &e
}

func (e *PutStorageConfigurationRequestBodyStorageTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SITEWISE_DEFAULT_STORAGE":
		fallthrough
	case "MULTI_LAYER_STORAGE":
		*e = PutStorageConfigurationRequestBodyStorageTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutStorageConfigurationRequestBodyStorageTypeEnum: %v", v)
	}
}

type PutStorageConfigurationRequestBody struct {
	// <p>Contains the storage configuration for time series (data streams) that aren't associated with asset properties. The <code>disassociatedDataStorage</code> can be one of the following values:</p> <ul> <li> <p> <code>ENABLED</code> – IoT SiteWise accepts time series that aren't associated with asset properties.</p> <important> <p>After the <code>disassociatedDataStorage</code> is enabled, you can't disable it.</p> </important> </li> <li> <p> <code>DISABLED</code> – IoT SiteWise doesn't accept time series (data streams) that aren't associated with asset properties.</p> </li> </ul> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-sitewise/latest/userguide/data-streams.html">Data streams</a> in the <i>IoT SiteWise User Guide</i>.</p>
	DisassociatedDataStorage *PutStorageConfigurationRequestBodyDisassociatedDataStorageEnum `json:"disassociatedDataStorage,omitempty"`
	// Contains information about the storage destination.
	MultiLayerStorage *PutStorageConfigurationRequestBodyMultiLayerStorage `json:"multiLayerStorage,omitempty"`
	// How many days your data is kept in the hot tier. By default, your data is kept indefinitely in the hot tier.
	RetentionPeriod *PutStorageConfigurationRequestBodyRetentionPeriod `json:"retentionPeriod,omitempty"`
	// <p>The storage tier that you specified for your data. The <code>storageType</code> parameter can be one of the following values:</p> <ul> <li> <p> <code>SITEWISE_DEFAULT_STORAGE</code> – IoT SiteWise saves your data into the hot tier. The hot tier is a service-managed database.</p> </li> <li> <p> <code>MULTI_LAYER_STORAGE</code> – IoT SiteWise saves your data in both the cold tier and the hot tier. The cold tier is a customer-managed Amazon S3 bucket.</p> </li> </ul>
	StorageType PutStorageConfigurationRequestBodyStorageTypeEnum `json:"storageType"`
}

type PutStorageConfigurationRequest struct {
	RequestBody       PutStorageConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type PutStorageConfigurationResponse struct {
	// ConflictingOperationException
	ConflictingOperationException interface{}
	ContentType                   string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// LimitExceededException
	LimitExceededException interface{}
	// Success
	PutStorageConfigurationResponse *shared.PutStorageConfigurationResponse
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
	// ThrottlingException
	ThrottlingException interface{}
}
