// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LicerSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type LicerRequestBodyCertificateParameters struct {
	// Date of birth in DD-MM-YYYY format
	Dob string `json:"DOB"`
	// Full name
	FullName string `json:"FullName"`
	// Policy Number
	Polid string `json:"POLID"`
	// Aadhaar number
	UID string `json:"UID"`
}

// LicerRequestBodyFormatEnum - The format of the certificate in response.
type LicerRequestBodyFormatEnum string

const (
	LicerRequestBodyFormatEnumPdf LicerRequestBodyFormatEnum = "pdf"
)

func (e *LicerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LicerRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LicerRequestBodyFormatEnum: %s", s)
	}
}

// LicerRequestBody - Request format
type LicerRequestBody struct {
	CertificateParameters *LicerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LicerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type LicerRequest struct {
	// Request format
	Request  *LicerRequestBody `request:"mediaType=application/json"`
	Security LicerSecurity
}

type Licer504ApplicationJSONErrorEnum string

const (
	Licer504ApplicationJSONErrorEnumGatewayTimeout Licer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Licer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Licer504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer504ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer504ApplicationJSONErrorDescriptionEnum string

const (
	Licer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Licer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Licer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Licer504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer504ApplicationJSON - Gateway timeout
type Licer504ApplicationJSON struct {
	Error            *Licer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer503ApplicationJSONErrorEnum string

const (
	Licer503ApplicationJSONErrorEnumServiceUnavailable Licer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Licer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Licer503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer503ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer503ApplicationJSONErrorDescriptionEnum string

const (
	Licer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Licer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Licer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Licer503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer503ApplicationJSON - Service unavailable
type Licer503ApplicationJSON struct {
	Error            *Licer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer502ApplicationJSONErrorEnum string

const (
	Licer502ApplicationJSONErrorEnumBadGatewy Licer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Licer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Licer502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer502ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer502ApplicationJSONErrorDescriptionEnum string

const (
	Licer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Licer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Licer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Licer502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer502ApplicationJSON - Bad gateway
type Licer502ApplicationJSON struct {
	Error            *Licer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer500ApplicationJSONErrorEnum string

const (
	Licer500ApplicationJSONErrorEnumInternalServerError Licer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Licer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Licer500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer500ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer500ApplicationJSONErrorDescriptionEnum string

const (
	Licer500ApplicationJSONErrorDescriptionEnumInternalServerError Licer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Licer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Licer500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer500ApplicationJSON - Internal server error
type Licer500ApplicationJSON struct {
	Error            *Licer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer404ApplicationJSONErrorEnum string

const (
	Licer404ApplicationJSONErrorEnumRecordNotFound Licer404ApplicationJSONErrorEnum = "record_not_found"
	Licer404ApplicationJSONErrorEnumURLNotFound    Licer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Licer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Licer404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer404ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer404ApplicationJSONErrorDescriptionEnum string

const (
	Licer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Licer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Licer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Licer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Licer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Licer404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer404ApplicationJSON - No record found
type Licer404ApplicationJSON struct {
	Error            *Licer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer401ApplicationJSONErrorEnum string

const (
	Licer401ApplicationJSONErrorEnumInvalidAuthentication Licer401ApplicationJSONErrorEnum = "invalid_authentication"
	Licer401ApplicationJSONErrorEnumInvalidAuthorization  Licer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Licer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Licer401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer401ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer401ApplicationJSONErrorDescriptionEnum string

const (
	Licer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Licer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Licer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Licer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Licer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Licer401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer401ApplicationJSON - Unauthorized access
type Licer401ApplicationJSON struct {
	Error            *Licer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Licer400ApplicationJSONErrorEnum string

const (
	Licer400ApplicationJSONErrorEnumMissingParameter Licer400ApplicationJSONErrorEnum = "missing_parameter"
	Licer400ApplicationJSONErrorEnumInvalidParameter Licer400ApplicationJSONErrorEnum = "invalid_parameter"
	Licer400ApplicationJSONErrorEnumInvalidFormat    Licer400ApplicationJSONErrorEnum = "invalid_format"
	Licer400ApplicationJSONErrorEnumInvalidTxnid     Licer400ApplicationJSONErrorEnum = "invalid_txnid"
	Licer400ApplicationJSONErrorEnumInvalidConsentid Licer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Licer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Licer400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer400ApplicationJSONErrorEnum: %s", s)
	}
}

type Licer400ApplicationJSONErrorDescriptionEnum string

const (
	Licer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Licer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Licer400ApplicationJSONErrorDescriptionEnumBadRequest                              Licer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Licer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Licer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Licer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Licer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Licer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Licer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Licer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Licer400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Licer400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Licer400ApplicationJSON - Bad request
type Licer400ApplicationJSON struct {
	Error            *Licer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Licer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LicerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Licer400ApplicationJSONObject *Licer400ApplicationJSON
	// Unauthorized access
	Licer401ApplicationJSONObject *Licer401ApplicationJSON
	// No record found
	Licer404ApplicationJSONObject *Licer404ApplicationJSON
	// Internal server error
	Licer500ApplicationJSONObject *Licer500ApplicationJSON
	// Bad gateway
	Licer502ApplicationJSONObject *Licer502ApplicationJSON
	// Service unavailable
	Licer503ApplicationJSONObject *Licer503ApplicationJSON
	// Gateway timeout
	Licer504ApplicationJSONObject *Licer504ApplicationJSON
}
