<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Events 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Resets all player progress on the event with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetResponse
     */
	public function gamesManagementEventsReset(
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1management/events/{eventId}/reset', \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Resets all player progress on all events for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllResponse
     */
	public function gamesManagementEventsResetAll(
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1management/events/reset');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Resets all draft events for all players. This method is only available to user accounts for your developer console.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersResponse
     */
	public function gamesManagementEventsResetAllForAllPlayers(
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1management/events/resetAllForAllPlayers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetAllForAllPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Resets the event with the given ID for all players. This method is only available to user accounts for your developer console. Only draft events can be reset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersResponse
     */
	public function gamesManagementEventsResetForAllPlayers(
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1management/events/{eventId}/resetForAllPlayers', \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetForAllPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Resets events with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft events may be reset.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersResponse
     */
	public function gamesManagementEventsResetMultipleForAllPlayers(
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/games/v1management/events/resetMultipleForAllPlayers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "eventsResetMultipleForAllRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GamesManagementEventsResetMultipleForAllPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}