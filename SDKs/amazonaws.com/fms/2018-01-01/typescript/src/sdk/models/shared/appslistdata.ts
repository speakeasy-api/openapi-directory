/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { App } from "./app";
import { Expose, Transform, Type } from "class-transformer";

/**
 * An Firewall Manager applications list.
 */
export class AppsListData extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: App })
  @Expose({ name: "AppsList" })
  @Type(() => App)
  appsList: App[];

  @SpeakeasyMetadata()
  @Expose({ name: "CreateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "ListId" })
  listId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ListName" })
  listName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "ListUpdateToken" })
  listUpdateToken?: string;

  @SpeakeasyMetadata({ elemType: App, elemDepth: 2 })
  @Expose({ name: "PreviousAppsList" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, App[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], App);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  previousAppsList?: Record<string, App[]>;
}
