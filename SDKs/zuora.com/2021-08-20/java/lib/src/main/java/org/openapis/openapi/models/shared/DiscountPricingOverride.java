/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DiscountPricingOverride - Pricing information about a discount charge.
 * 
 */
public class DiscountPricingOverride {
    /**
     * Specifies which type of charge the discount charge applies to.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applyDiscountTo")
    public DiscountPricingOverrideApplyDiscountToEnum applyDiscountTo;
    public DiscountPricingOverride withApplyDiscountTo(DiscountPricingOverrideApplyDiscountToEnum applyDiscountTo) {
        this.applyDiscountTo = applyDiscountTo;
        return this;
    }
    
    /**
     * Only applicable if the discount charge is a fixed-amount discount.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountAmount")
    public Double discountAmount;
    public DiscountPricingOverride withDiscountAmount(Double discountAmount) {
        this.discountAmount = discountAmount;
        return this;
    }
    
    /**
     * Application scope of the discount charge. For example, if the value of this field is `subscription` and the value of the `applyDiscountTo` field is `RECURRING`, the discount charge applies to all recurring charges in the same subscription as the discount charge.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountLevel")
    public DiscountPricingOverrideDiscountLevelEnum discountLevel;
    public DiscountPricingOverride withDiscountLevel(DiscountPricingOverrideDiscountLevelEnum discountLevel) {
        this.discountLevel = discountLevel;
        return this;
    }
    
    /**
     * Only applicable if the discount charge is a percentage discount.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discountPercentage")
    public Double discountPercentage;
    public DiscountPricingOverride withDiscountPercentage(Double discountPercentage) {
        this.discountPercentage = discountPercentage;
        return this;
    }
    
    /**
     * Specifies how Zuora changes the price of the charge each time the subscription renews.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priceChangeOption")
    public DiscountPricingOverridePriceChangeOptionEnum priceChangeOption;
    public DiscountPricingOverride withPriceChangeOption(DiscountPricingOverridePriceChangeOptionEnum priceChangeOption) {
        this.priceChangeOption = priceChangeOption;
        return this;
    }
    
}
