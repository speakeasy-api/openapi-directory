"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Episodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_clips_(self, request: operations.GetClipsRequest) -> operations.GetClipsResponse:
        r"""Get Clips
        Get Clips
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetClipsRequest, base_url, '/clips/{pid}', request)
        
        query_params = utils.get_query_params(operations.GetClipsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetClipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_episodes_by_category_(self, request: operations.GetEpisodesByCategoryRequest) -> operations.GetEpisodesByCategoryResponse:
        r"""List all the episodes for a category.
        Get the list of all the episodes for a given category in TV & iPlayer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEpisodesByCategoryRequest, base_url, '/categories/{category}/episodes', request)
        
        query_params = utils.get_query_params(operations.GetEpisodesByCategoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEpisodesByCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_episodes_by_group_(self, request: operations.GetEpisodesByGroupRequest) -> operations.GetEpisodesByGroupResponse:
        r"""Get episodes by group, brand or series
        Get episodes by group, brand or series
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEpisodesByGroupRequest, base_url, '/groups/{pid}/episodes', request)
        
        query_params = utils.get_query_params(operations.GetEpisodesByGroupRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEpisodesByGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_episodes_by_parent_pid_(self, request: operations.GetEpisodesByParentPIDRequest) -> operations.GetEpisodesByParentPIDResponse:
        r"""Child episodes for a given programme pid.
        Get the child episodes belonging to a given programme identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetEpisodesByParentPIDRequest, base_url, '/programmes/{pid}/episodes', request)
        
        query_params = utils.get_query_params(operations.GetEpisodesByParentPIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetEpisodesByParentPIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_onward_journey(self, request: operations.GetOnwardJourneyRequest) -> operations.GetOnwardJourneyResponse:
        r"""Get Onward Journey
        Get Onward Journey (next programme)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOnwardJourneyRequest, base_url, '/episodes/{pid}/next', request)
        
        query_params = utils.get_query_params(operations.GetOnwardJourneyRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOnwardJourneyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programme_by_pid_(self, request: operations.GetProgrammeByPIDRequest) -> operations.GetProgrammeByPIDResponse:
        r"""Episode for a given pid.
        Get the episode for a given episode identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgrammeByPIDRequest, base_url, '/episodes/{pid}', request)
        
        query_params = utils.get_query_params(operations.GetProgrammeByPIDRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammeByPIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programme_recommendations_(self, request: operations.GetProgrammeRecommendationsRequest) -> operations.GetProgrammeRecommendationsResponse:
        r"""Get programme recommendations
        Get programme recommendations
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProgrammeRecommendationsRequest, base_url, '/episodes/{pid}/recommendations', request)
        
        query_params = utils.get_query_params(operations.GetProgrammeRecommendationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammeRecommendationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_programmes_popular_(self, request: operations.GetProgrammesPopularRequest) -> operations.GetProgrammesPopularResponse:
        r"""Get programmes popular
        Get programmes popular
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups/popular/episodes'
        
        query_params = utils.get_query_params(operations.GetProgrammesPopularRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProgrammesPopularResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_trailers_pre_rolls_(self, request: operations.GetTrailersPreRollsRequest) -> operations.GetTrailersPreRollsResponse:
        r"""Get Trailers (pre-rolls)
        Get Trailers (pre-rolls)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTrailersPreRollsRequest, base_url, '/episodes/{pid}/prerolls', request)
        
        query_params = utils.get_query_params(operations.GetTrailersPreRollsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTrailersPreRollsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    def get_post_rolls(self, request: operations.GetPostRollsRequest) -> operations.GetPostRollsResponse:
        r"""Get Follow-ups (post-rolls)
        Get Follow-ups (post-rolls)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetPostRollsRequest, base_url, '/episodes/{pid}/postrolls', request)
        
        query_params = utils.get_query_params(operations.GetPostRollsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetPostRollsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.ibl = out

        return res

    