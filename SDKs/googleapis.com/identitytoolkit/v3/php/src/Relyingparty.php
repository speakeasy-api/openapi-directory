<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Relyingparty 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates the URI used by the IdP to authenticate the user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriResponse
     */
	public function identitytoolkitRelyingpartyCreateAuthUri(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/createAuthUri');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyCreateAuthUriRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyCreateAuthUriResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createAuthUriResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateAuthUriResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete user account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountResponse
     */
	public function identitytoolkitRelyingpartyDeleteAccount(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/deleteAccount');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyDeleteAccountRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDeleteAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->deleteAccountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DeleteAccountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch download user accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountResponse
     */
	public function identitytoolkitRelyingpartyDownloadAccount(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/downloadAccount');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyDownloadAccountRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyDownloadAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->downloadAccountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DownloadAccountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset password for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninResponse
     */
	public function identitytoolkitRelyingpartyEmailLinkSignin(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/emailLinkSignin');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyEmailLinkSigninRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyEmailLinkSigninResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->emailLinkSigninResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\EmailLinkSigninResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the account info.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoResponse
     */
	public function identitytoolkitRelyingpartyGetAccountInfo(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getAccountInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyGetAccountInfoRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetAccountInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAccountInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAccountInfoResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a code for user action confirmation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse
     */
	public function identitytoolkitRelyingpartyGetOobConfirmationCode(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getOobConfirmationCode');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "relyingparty", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetOobConfirmationCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getOobConfirmationCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetOobConfirmationCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get project configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigResponse
     */
	public function identitytoolkitRelyingpartyGetProjectConfig(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getProjectConfig');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetProjectConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartyGetProjectConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentitytoolkitRelyingpartyGetProjectConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get token signing public key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysResponse
     */
	public function identitytoolkitRelyingpartyGetPublicKeys(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/publicKeys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetPublicKeysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartyGetPublicKeysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, string>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get recaptcha secure param.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamResponse
     */
	public function identitytoolkitRelyingpartyGetRecaptchaParam(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/getRecaptchaParam');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyGetRecaptchaParamResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRecaptchaParamResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetRecaptchaParamResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Reset password for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordResponse
     */
	public function identitytoolkitRelyingpartyResetPassword(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/resetPassword');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyResetPasswordRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyResetPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resetPasswordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResetPasswordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send SMS verification code.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeResponse
     */
	public function identitytoolkitRelyingpartySendVerificationCode(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/sendVerificationCode');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartySendVerificationCodeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySendVerificationCodeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartySendVerificationCodeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentitytoolkitRelyingpartySendVerificationCodeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set account info for a user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoResponse
     */
	public function identitytoolkitRelyingpartySetAccountInfo(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setAccountInfo');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartySetAccountInfoRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetAccountInfoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->setAccountInfoResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SetAccountInfoResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set project configuration.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigResponse
     */
	public function identitytoolkitRelyingpartySetProjectConfig(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/setProjectConfig');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartySetProjectConfigRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySetProjectConfigResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartySetProjectConfigResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentitytoolkitRelyingpartySetProjectConfigResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sign out user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserResponse
     */
	public function identitytoolkitRelyingpartySignOutUser(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/signOutUser');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartySignOutUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignOutUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartySignOutUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentitytoolkitRelyingpartySignOutUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Signup new user.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserResponse
     */
	public function identitytoolkitRelyingpartySignupNewUser(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/signupNewUser');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartySignupNewUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartySignupNewUserResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->signupNewUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SignupNewUserResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch upload existing user accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountResponse
     */
	public function identitytoolkitRelyingpartyUploadAccount(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/uploadAccount');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyUploadAccountRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyUploadAccountResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->uploadAccountResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\UploadAccountResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies the assertion returned by the IdP.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionResponse
     */
	public function identitytoolkitRelyingpartyVerifyAssertion(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/verifyAssertion');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyVerifyAssertionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyAssertionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyAssertionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyAssertionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies the developer asserted ID token.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenResponse
     */
	public function identitytoolkitRelyingpartyVerifyCustomToken(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/verifyCustomToken');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyVerifyCustomTokenRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyCustomTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyCustomTokenResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyCustomTokenResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies the user entered password.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordResponse
     */
	public function identitytoolkitRelyingpartyVerifyPassword(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/verifyPassword');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyVerifyPasswordRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPasswordResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->verifyPasswordResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\VerifyPasswordResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Verifies ownership of a phone number and creates/updates the user account accordingly.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
     */
	public function identitytoolkitRelyingpartyVerifyPhoneNumber(
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/verifyPhoneNumber');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "identitytoolkitRelyingpartyVerifyPhoneNumberRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->identitytoolkitRelyingpartyVerifyPhoneNumberResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse', 'json');
            }
        }

        return $response;
    }
}