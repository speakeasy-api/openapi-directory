<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class FirewallActions 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get all Actions for a Firewall
     * 
     * Returns all Action objects for a Firewall. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsResponse
     */
	public function getFirewallsIdActions(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}/actions', \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get an Action for a Firewall
     * 
     * Returns a specific Action for a Firewall.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdResponse
     */
	public function getFirewallsIdActionsActionId(
        \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}/actions/{action_id}', \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetFirewallsIdActionsActionIdActionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Apply to Resources
     * 
     * Applies one Firewall to multiple resources.
     * 
     * Currently servers (public network interface) and label selectors are supported.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |-------------------------------|---------------------------------------------------------------|
     * | `firewall_already_applied`    | Firewall was already applied on resource                      |
     * | `incompatible_network_type`   | The Network type is incompatible for the given resource       |
     * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesResponse
     */
	public function postFirewallsIdActionsApplyToResources(
        \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}/actions/apply_to_resources', \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsApplyToResourcesActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Remove from Resources
     * 
     * Removes one Firewall from multiple resources.
     * 
     * Currently only Servers (and their public network interfaces) are supported.
     * 
     * #### Call specific error codes
     * 
     * | Code                                  | Description                                                            |
     * |---------------------------------------|------------------------------------------------------------------------|
     * | `firewall_already_removed`            | Firewall was already removed from the resource                         |
     * | `firewall_resource_not_found`         | The resource the Firewall should be attached to was not found          |
     * | `firewall_managed_by_label_selector`  | Firewall was applied via label selector and cannot be removed manually |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesResponse
     */
	public function postFirewallsIdActionsRemoveFromResources(
        \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}/actions/remove_from_resources', \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsRemoveFromResourcesActionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Set Rules
     * 
     * Sets the rules of a Firewall.
     * 
     * All existing rules will be overwritten. Pass an empty `rules` array to remove all rules.
     * The maximum amount of rules that can be defined is 50.
     * 
     * #### Call specific error codes
     * 
     * | Code                          | Description                                                   |
     * |-------------------------------|---------------------------------------------------------------|
     * | `firewall_resource_not_found` | The resource the Firewall should be attached to was not found |
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesResponse
     */
	public function postFirewallsIdActionsSetRules(
        \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/firewalls/{id}/actions/set_rules', \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->actionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostFirewallsIdActionsSetRulesActionsResponse', 'json');
            }
        }

        return $response;
    }
}