"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations
from typing import Any, Optional

class Conversation:
    r"""A conversation is a shared core component that Vonage APIs rely on. Conversations happen over multiple mediums and and can have associated Users through Memberships."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_conversation(self, request: operations.CreateConversationRequestBody) -> operations.CreateConversationResponse:
        r"""Create a conversation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversations'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.CreateConversation200ApplicationJSON])
                res.create_conversation_200_application_json_object = out

        return res

    def delete_conversation(self, request: operations.DeleteConversationRequest) -> operations.DeleteConversationResponse:
        r"""Delete a conversation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteConversationRequest, base_url, '/conversations/{conversation_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_conversation_200_application_json_object = out

        return res

    def list_conversations(self, request: operations.ListConversationsRequest) -> operations.ListConversationsResponse:
        r"""List conversations
        This endpoint is **DEPRECATED**. Please use [/v0.2/conversations](/api/conversation.v2#get-conversations).
        
        List all conversations associated with your application. This endpoint required an admin JWT. To find all conversations for the currently logged in user, see [GET /users/:id/conversations](#getuserConversations)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/conversations'
        
        query_params = utils.get_query_params(operations.ListConversationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListConversationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListConversations200ApplicationJSON])
                res.list_conversations_200_application_json_object = out

        return res

    def record_conversation(self, request: operations.RecordConversationRequest, server_url: Optional[str] = None) -> operations.RecordConversationResponse:
        r"""Record a conversation"""
        base_url = operations.RECORD_CONVERSATION_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.RecordConversationRequest, base_url, '/conversations/{conversation_id}/record', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RecordConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def replace_conversation(self, request: operations.ReplaceConversationRequest) -> operations.ReplaceConversationResponse:
        r"""Update a conversation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplaceConversationRequest, base_url, '/conversations/{conversation_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplaceConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ReplaceConversation200ApplicationJSON])
                res.replace_conversation_200_application_json_object = out

        return res

    def retrieve_conversation(self, request: operations.RetrieveConversationRequest) -> operations.RetrieveConversationResponse:
        r"""Retrieve a conversation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveConversationRequest, base_url, '/conversations/{conversation_id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveConversationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.RetrieveConversation200ApplicationJSON])
                res.retrieve_conversation_200_application_json_object = out

        return res

    