"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Creatives:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dfareporting_creatives_get(self, request: operations.DfareportingCreativesGetRequest, security: operations.DfareportingCreativesGetSecurity) -> operations.DfareportingCreativesGetResponse:
        r"""Gets one creative by ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativesGetRequest, base_url, '/userprofiles/{profileId}/creatives/{id}', request)
        
        query_params = utils.get_query_params(operations.DfareportingCreativesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Creative])
                res.creative = out

        return res

    def dfareporting_creatives_insert(self, request: operations.DfareportingCreativesInsertRequest, security: operations.DfareportingCreativesInsertSecurity) -> operations.DfareportingCreativesInsertResponse:
        r"""Inserts a new creative."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativesInsertRequest, base_url, '/userprofiles/{profileId}/creatives', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativesInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativesInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Creative])
                res.creative = out

        return res

    def dfareporting_creatives_list(self, request: operations.DfareportingCreativesListRequest, security: operations.DfareportingCreativesListSecurity) -> operations.DfareportingCreativesListResponse:
        r"""Retrieves a list of creatives, possibly filtered. This method supports paging."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativesListRequest, base_url, '/userprofiles/{profileId}/creatives', request)
        
        query_params = utils.get_query_params(operations.DfareportingCreativesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreativesListResponse])
                res.creatives_list_response = out

        return res

    def dfareporting_creatives_patch(self, request: operations.DfareportingCreativesPatchRequest, security: operations.DfareportingCreativesPatchSecurity) -> operations.DfareportingCreativesPatchResponse:
        r"""Updates an existing creative. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativesPatchRequest, base_url, '/userprofiles/{profileId}/creatives', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Creative])
                res.creative = out

        return res

    def dfareporting_creatives_update(self, request: operations.DfareportingCreativesUpdateRequest, security: operations.DfareportingCreativesUpdateSecurity) -> operations.DfareportingCreativesUpdateResponse:
        r"""Updates an existing creative."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DfareportingCreativesUpdateRequest, base_url, '/userprofiles/{profileId}/creatives', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "creative", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DfareportingCreativesUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DfareportingCreativesUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Creative])
                res.creative = out

        return res

    