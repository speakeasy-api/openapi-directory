// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETPutDashboardActionEnum
type GETPutDashboardActionEnum string

const (
	GETPutDashboardActionEnumPutDashboard GETPutDashboardActionEnum = "PutDashboard"
)

func (e GETPutDashboardActionEnum) ToPointer() *GETPutDashboardActionEnum {
	return &e
}

func (e *GETPutDashboardActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PutDashboard":
		*e = GETPutDashboardActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutDashboardActionEnum: %v", v)
	}
}

// GETPutDashboardVersionEnum
type GETPutDashboardVersionEnum string

const (
	GETPutDashboardVersionEnumTwoThousandAndTen0801 GETPutDashboardVersionEnum = "2010-08-01"
)

func (e GETPutDashboardVersionEnum) ToPointer() *GETPutDashboardVersionEnum {
	return &e
}

func (e *GETPutDashboardVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-08-01":
		*e = GETPutDashboardVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPutDashboardVersionEnum: %v", v)
	}
}

type GETPutDashboardRequest struct {
	Action GETPutDashboardActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.</p> <p>For more information about the syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>.</p>
	DashboardBody string `queryParam:"style=form,explode=true,name=DashboardBody"`
	// The name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, "-", and "_". This parameter is required.
	DashboardName     string                     `queryParam:"style=form,explode=true,name=DashboardName"`
	Version           GETPutDashboardVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPutDashboardResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
