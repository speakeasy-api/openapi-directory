/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class PostBuildRequest {
    /**
     * Must be the content of a tar archive compressed with gzip. The archive must include a file called 'Dockerfile' at its root. It may include any number of other files which will be accessible in the build context.
     */
    @SpeakeasyMetadata("request:mediaType=application/tar")
    public byte[] requestBody;

    public PostBuildRequest withRequestBody(byte[] requestBody) {
        this.requestBody = requestBody;
        return this;
    }
    
    /**
     * The unique ID of your organization space where you want to create or work with your containers. Run `cf space &lt;space_name&gt; --guid`, where `&lt;space_name&gt;` is the name of your space, to retrieve your space ID.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Auth-Project-Id")
    public String xAuthProjectId;

    public PostBuildRequest withXAuthProjectId(String xAuthProjectId) {
        this.xAuthProjectId = xAuthProjectId;
        return this;
    }
    
    /**
     * The Bluemix JSON web token that you receive when logging into Bluemix. Run `cf oauth-token` to retrieve your access token.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Auth-Token")
    public String xAuthToken;

    public PostBuildRequest withXAuthToken(String xAuthToken) {
        this.xAuthToken = xAuthToken;
        return this;
    }
    
    /**
     * If you set the query parameter to `nocache=true`, `nocache=True`, or `nocache=1`, the cache will not be used to build your image. To use the cache, enter `nocache=false`, `nocache=False`, or `nocache=0`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=nocache")
    public Boolean nocache;

    public PostBuildRequest withNocache(Boolean nocache) {
        this.nocache = nocache;
        return this;
    }
    
    /**
     * If set to pull=true, pull=True, or pull=1, then a newer version of the image is always attempted to be pulled even though an older version of the image exists locally. If set to pull=false, pull=False, or pull=0, then the local image will be used if one exists.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pull")
    public Boolean pull;

    public PostBuildRequest withPull(Boolean pull) {
        this.pull = pull;
        return this;
    }
    
    /**
     * You can choose whether or not to show the verbose build output to review every step during the container image build. If you set the query parameter to `q=false`, `q=False`, or `q=0`, the verbose build output is suppressed. To show the verbose build output, enter `q=true`, `q=True`, or `q=1`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=q")
    public Boolean q;

    public PostBuildRequest withQ(Boolean q) {
        this.q = q;
        return this;
    }
    
    /**
     * Tag the image with the full path to your private Bluemix registry in the following format: `t=registry.ng.bluemix.net/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt;`. This path is used to push the image to the private Bluemix registry after it is built.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=t")
    public String t;

    public PostBuildRequest withT(String t) {
        this.t = t;
        return this;
    }
    
    public PostBuildRequest(@JsonProperty("RequestBody") byte[] requestBody, @JsonProperty("X-Auth-Project-Id") String xAuthProjectId, @JsonProperty("X-Auth-Token") String xAuthToken, @JsonProperty("t") String t) {
        this.requestBody = requestBody;
        this.xAuthProjectId = xAuthProjectId;
        this.xAuthToken = xAuthToken;
        this.t = t;
  }
}
