// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetOntologyTermGraphGraphTypeEnum - graph type ('topology_graph', 'regulates_transitivity_graph' or 'neighborhood_graph')
type GetOntologyTermGraphGraphTypeEnum string

const (
	GetOntologyTermGraphGraphTypeEnumTopologyGraph              GetOntologyTermGraphGraphTypeEnum = "topology_graph"
	GetOntologyTermGraphGraphTypeEnumRegulatesTransitivityGraph GetOntologyTermGraphGraphTypeEnum = "regulates_transitivity_graph"
	GetOntologyTermGraphGraphTypeEnumNeighborhoodGraph          GetOntologyTermGraphGraphTypeEnum = "neighborhood_graph"
	GetOntologyTermGraphGraphTypeEnumNeighborhoodLimitedGraph   GetOntologyTermGraphGraphTypeEnum = "neighborhood_limited_graph"
)

func (e GetOntologyTermGraphGraphTypeEnum) ToPointer() *GetOntologyTermGraphGraphTypeEnum {
	return &e
}

func (e *GetOntologyTermGraphGraphTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "topology_graph":
		fallthrough
	case "regulates_transitivity_graph":
		fallthrough
	case "neighborhood_graph":
		fallthrough
	case "neighborhood_limited_graph":
		*e = GetOntologyTermGraphGraphTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOntologyTermGraphGraphTypeEnum: %v", v)
	}
}

type GetOntologyTermGraphRequest struct {
	// graph type ('topology_graph', 'regulates_transitivity_graph' or 'neighborhood_graph')
	GraphType *GetOntologyTermGraphGraphTypeEnum `queryParam:"style=form,explode=true,name=graph_type"`
	// CURIE identifier of a GO term, e.g. GO:0000981
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type GetOntologyTermGraphResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
