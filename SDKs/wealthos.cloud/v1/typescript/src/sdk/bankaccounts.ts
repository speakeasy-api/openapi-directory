/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * The Bank Account endpoint allows a wealth manager to create, update and retrieve the bank account details of an investor. An investor can have one or more bank accounts within the system and a default bank account should always be configured.
 *
 * @remarks
 *
 * Every bank account has an account status that represents the `active` or `inactive` status of an account. Only `active` bank accounts can be used for any transactions in the system.
 */
export class BankAccounts {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Update existing bank account details
   *
   * @remarks
   * Update an existing Bank Account. WealthOS will update only the fields sent in the request.
   */
  updateBankAccount(
    req: operations.UpdateBankAccountRequest,
    security: operations.UpdateBankAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateBankAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.UpdateBankAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/bank-accounts/v1/{bank_account_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.UpdateBankAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.UpdateBankAccountResponse =
        new operations.UpdateBankAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.updateBankAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.UpdateBankAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Create new bank account
   */
  createBankAccount(
    req: operations.CreateBankAccountRequest,
    security: operations.CreateBankAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateBankAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateBankAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tenant/bank-accounts/v1";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CreateBankAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CreateBankAccountResponse =
        new operations.CreateBankAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount201ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount201ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.createBankAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.CreateBankAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve all the bank accounts of a particular investor
   */
  getAllBankAccounts(
    req: operations.GetAllBankAccountsRequest,
    security: operations.GetAllBankAccountsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAllBankAccountsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetAllBankAccountsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/tenant/bank-accounts/v1";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetAllBankAccountsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetAllBankAccountsResponse =
        new operations.GetAllBankAccountsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts200ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts400ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts400ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts401ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts401ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts403ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts403ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts404ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts404ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts409ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts409ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts429ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts429ApplicationJSON
              );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAllBankAccounts500ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.GetAllBankAccounts500ApplicationJSON
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Retrieve existing bank account from bank account id
   */
  getBankAccount(
    req: operations.GetBankAccountRequest,
    security: operations.GetBankAccountSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetBankAccountResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetBankAccountRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/tenant/bank-accounts/v1/{bank_account_id}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.GetBankAccountSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetBankAccountResponse =
        new operations.GetBankAccountResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount200ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount200ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 400:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount400ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount400ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 401:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount401ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount401ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 403:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount403ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount403ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount404ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount404ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 409:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount409ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount409ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 429:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount429ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount429ApplicationJSON
            );
          }
          break;
        case httpRes?.status == 500:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getBankAccount500ApplicationJSONObject = utils.objectToClass(
              httpRes?.data,
              operations.GetBankAccount500ApplicationJSON
            );
          }
          break;
      }

      return res;
    });
  }
}
