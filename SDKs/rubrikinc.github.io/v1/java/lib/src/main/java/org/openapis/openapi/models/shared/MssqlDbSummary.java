/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class MssqlDbSummary {
    /**
     * For an availability database, the ID of the availability group that the database belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityGroupId")
    public String availabilityGroupId;

    public MssqlDbSummary withAvailabilityGroupId(String availabilityGroupId) {
        this.availabilityGroupId = availabilityGroupId;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public MssqlDbSummary withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public MssqlDbSummary withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public MssqlDbSummary withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
     */
    @JsonProperty("copyOnly")
    public Boolean copyOnly;

    public MssqlDbSummary withCopyOnly(Boolean copyOnly) {
        this.copyOnly = copyOnly;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currentBackupTaskInfo")
    public BackupTaskDiagnosticInfo currentBackupTaskInfo;

    public MssqlDbSummary withCurrentBackupTaskInfo(BackupTaskDiagnosticInfo currentBackupTaskInfo) {
        this.currentBackupTaskInfo = currentBackupTaskInfo;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public MssqlDbSummary withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public MssqlDbSummary withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public MssqlDbSummary withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public MssqlDbSummary withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public MssqlDbSummary withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.
     */
    @JsonProperty("hasPermissions")
    public Boolean hasPermissions;

    public MssqlDbSummary withHasPermissions(Boolean hasPermissions) {
        this.hasPermissions = hasPermissions;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public MssqlDbSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * True/false value indicating if backup task information is included in the response.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("includeBackupTaskInfo")
    public Boolean includeBackupTaskInfo;

    public MssqlDbSummary withIncludeBackupTaskInfo(Boolean includeBackupTaskInfo) {
        this.includeBackupTaskInfo = includeBackupTaskInfo;
        return this;
    }
    
    /**
     * This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    public String instanceId;

    public MssqlDbSummary withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceName")
    public String instanceName;

    public MssqlDbSummary withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public MssqlDbSummary withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public MssqlDbSummary withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    @JsonProperty("isInAvailabilityGroup")
    public Boolean isInAvailabilityGroup;

    public MssqlDbSummary withIsInAvailabilityGroup(Boolean isInAvailabilityGroup) {
        this.isInAvailabilityGroup = isInAvailabilityGroup;
        return this;
    }
    
    /**
     * Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
     */
    @JsonProperty("isLiveMount")
    public Boolean isLiveMount;

    public MssqlDbSummary withIsLiveMount(Boolean isLiveMount) {
        this.isLiveMount = isLiveMount;
        return this;
    }
    
    /**
     * Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
     */
    @JsonProperty("isLogShippingSecondary")
    public Boolean isLogShippingSecondary;

    public MssqlDbSummary withIsLogShippingSecondary(Boolean isLogShippingSecondary) {
        this.isLogShippingSecondary = isLogShippingSecondary;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.
     */
    @JsonProperty("isOnline")
    public Boolean isOnline;

    public MssqlDbSummary withIsOnline(Boolean isOnline) {
        this.isOnline = isOnline;
        return this;
    }
    
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public MssqlDbSummary withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastSnapshotTime")
    public OffsetDateTime lastSnapshotTime;

    public MssqlDbSummary withLastSnapshotTime(OffsetDateTime lastSnapshotTime) {
        this.lastSnapshotTime = lastSnapshotTime;
        return this;
    }
    
    @JsonProperty("logBackupFrequencyInSeconds")
    public Integer logBackupFrequencyInSeconds;

    public MssqlDbSummary withLogBackupFrequencyInSeconds(Integer logBackupFrequencyInSeconds) {
        this.logBackupFrequencyInSeconds = logBackupFrequencyInSeconds;
        return this;
    }
    
    /**
     * Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
     */
    @JsonProperty("logBackupRetentionHours")
    public Integer logBackupRetentionHours;

    public MssqlDbSummary withLogBackupRetentionHours(Integer logBackupRetentionHours) {
        this.logBackupRetentionHours = logBackupRetentionHours;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public MssqlDbSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
     */
    @JsonProperty("numMissedSnapshot")
    public Integer numMissedSnapshot;

    public MssqlDbSummary withNumMissedSnapshot(Integer numMissedSnapshot) {
        this.numMissedSnapshot = numMissedSnapshot;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pendingSlaDomain")
    public ManagedObjectPendingSlaInfo pendingSlaDomain;

    public MssqlDbSummary withPendingSlaDomain(ManagedObjectPendingSlaInfo pendingSlaDomain) {
        this.pendingSlaDomain = pendingSlaDomain;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public MssqlDbSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * This field is deprecated. Use the recoveryModel field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recoveryModel")
    public MssqlDbSummaryRecoveryModelEnum recoveryModel;

    public MssqlDbSummary withRecoveryModel(MssqlDbSummaryRecoveryModelEnum recoveryModel) {
        this.recoveryModel = recoveryModel;
        return this;
    }
    
    /**
     * List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.
     */
    @JsonProperty("replicas")
    public MssqlDbReplica[] replicas;

    public MssqlDbSummary withReplicas(MssqlDbReplica[] replicas) {
        this.replicas = replicas;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public MssqlDbSummary withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    @JsonProperty("rootProperties")
    public MssqlRootProperties rootProperties;

    public MssqlDbSummary withRootProperties(MssqlRootProperties rootProperties) {
        this.rootProperties = rootProperties;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public MssqlDbSummarySlaAssignmentEnum slaAssignment;

    public MssqlDbSummary withSlaAssignment(MssqlDbSummarySlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public MssqlDbSummary withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public MssqlDbSummary withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
     */
    @JsonProperty("unprotectableReasons")
    public String[] unprotectableReasons;

    public MssqlDbSummary withUnprotectableReasons(String[] unprotectableReasons) {
        this.unprotectableReasons = unprotectableReasons;
        return this;
    }
    
    public MssqlDbSummary(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("copyOnly") Boolean copyOnly, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("hasPermissions") Boolean hasPermissions, @JsonProperty("id") String id, @JsonProperty("isInAvailabilityGroup") Boolean isInAvailabilityGroup, @JsonProperty("isLiveMount") Boolean isLiveMount, @JsonProperty("isLogShippingSecondary") Boolean isLogShippingSecondary, @JsonProperty("isOnline") Boolean isOnline, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("logBackupFrequencyInSeconds") Integer logBackupFrequencyInSeconds, @JsonProperty("logBackupRetentionHours") Integer logBackupRetentionHours, @JsonProperty("name") String name, @JsonProperty("numMissedSnapshot") Integer numMissedSnapshot, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("replicas") MssqlDbReplica[] replicas, @JsonProperty("rootProperties") MssqlRootProperties rootProperties, @JsonProperty("slaAssignment") MssqlDbSummarySlaAssignmentEnum slaAssignment, @JsonProperty("unprotectableReasons") String[] unprotectableReasons) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.copyOnly = copyOnly;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.hasPermissions = hasPermissions;
        this.id = id;
        this.isInAvailabilityGroup = isInAvailabilityGroup;
        this.isLiveMount = isLiveMount;
        this.isLogShippingSecondary = isLogShippingSecondary;
        this.isOnline = isOnline;
        this.isRelic = isRelic;
        this.logBackupFrequencyInSeconds = logBackupFrequencyInSeconds;
        this.logBackupRetentionHours = logBackupRetentionHours;
        this.name = name;
        this.numMissedSnapshot = numMissedSnapshot;
        this.primaryClusterId = primaryClusterId;
        this.replicas = replicas;
        this.rootProperties = rootProperties;
        this.slaAssignment = slaAssignment;
        this.unprotectableReasons = unprotectableReasons;
  }
}
