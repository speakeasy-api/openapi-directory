"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import group as shared_group
from typing import Optional


@dataclasses.dataclass
class GetGroupsByIdsSecurity:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'apiKey', 'sub_type': 'query', 'field_name': 'api_key' }})  
    oauth2_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2_implicit: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class GetGroupsByIdsRequest:
    
    group_ids: str = dataclasses.field(metadata={'query_param': { 'field_name': 'group_ids', 'style': 'form', 'explode': True }})
    r"""The IDs of the groups to retrieve.  If more than 20 group IDs are passed, only the first 20 groups will be returned."""  
    

@dataclasses.dataclass
class GetGroupsByIdsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    groups: Optional[list[shared_group.Group]] = dataclasses.field(default=None)
    r"""The groups."""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    