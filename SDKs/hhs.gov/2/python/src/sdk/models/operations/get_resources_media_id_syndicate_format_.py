"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import syndicatemarshallerwrapped as shared_syndicatemarshallerwrapped
from typing import Optional


@dataclasses.dataclass
class GetResourcesMediaIDSyndicateFormatRequest:
    
    format: str = dataclasses.field(metadata={'path_param': { 'field_name': 'format', 'style': 'simple', 'explode': False }})
    r"""Automatically added"""  
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The id of the media to show embed code for."""  
    autoplay: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'autoplay', 'style': 'form', 'explode': False }})
    r"""If content is a video, the embeded video will auto play when loaded."""  
    css_class: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'cssClass', 'style': 'form', 'explode': False }})
    r"""The css class to target for extraction."""  
    font_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'font-size', 'style': 'form', 'explode': False }})
    r"""Set font size (in points) of p, div, and span tags."""  
    image_float: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imageFloat', 'style': 'form', 'explode': False }})
    r"""Accepts valid CSS float options, such as 'left' or 'right'. Will inject a style into the content before rendering."""  
    image_margin: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imageMargin', 'style': 'form', 'explode': False }})
    r"""Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is 'north,east,south,west' - for example '0,10,10,0' would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering."""  
    rel: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rel', 'style': 'form', 'explode': False }})
    r"""If content is a video, related items will be shown at the end of playback."""  
    strip_breaks: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripBreaks', 'style': 'form', 'explode': False }})
    r"""Remove break tags from content."""  
    strip_classes: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripClasses', 'style': 'form', 'explode': False }})
    r"""Remove class attributes from content (except 'syndicate')."""  
    strip_images: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripImages', 'style': 'form', 'explode': False }})
    r"""Remove image tags from content."""  
    strip_scripts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripScripts', 'style': 'form', 'explode': False }})
    r"""Remove script tags from content."""  
    strip_styles: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'stripStyles', 'style': 'form', 'explode': False }})
    r"""Remove in-line styles from content."""  
    

@dataclasses.dataclass
class GetResourcesMediaIDSyndicateFormatResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    syndicate_marshaller_wrapped: Optional[shared_syndicatemarshallerwrapped.SyndicateMarshallerWrapped] = dataclasses.field(default=None)
    r"""Returns the syndicated content for a given MediaItem in the specified 'format' (HTML or JSON)."""  
    