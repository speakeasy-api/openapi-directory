// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type PostNetworksIDActionsDeleteRouteAddDeleteRouteRequest struct {
	// Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
	Destination string `json:"destination"`
	// Gateway for the route. Cannot be the first IP of the networks ip_range, an IP behind a vSwitch or 172.31.1.1, as this IP is being used as a gateway for the public network interface of Servers.
	Gateway string `json:"gateway"`
}

type PostNetworksIDActionsDeleteRouteRequest struct {
	RequestBody *PostNetworksIDActionsDeleteRouteAddDeleteRouteRequest `request:"mediaType=application/json"`
	// ID of the Network
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
}

// PostNetworksIDActionsDeleteRouteActionResponseActionError - Error message for the Action if error occurred, otherwise null
type PostNetworksIDActionsDeleteRouteActionResponseActionError struct {
	// Fixed machine readable code
	Code string `json:"code"`
	// Humanized error message
	Message string `json:"message"`
}

type PostNetworksIDActionsDeleteRouteActionResponseActionResources struct {
	// ID of the Resource
	ID int64 `json:"id"`
	// Type of resource referenced
	Type string `json:"type"`
}

// PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum - Status of the Action
type PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum string

const (
	PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnumSuccess PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum = "success"
	PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnumRunning PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum = "running"
	PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnumError   PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum = "error"
)

func (e PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum) ToPointer() *PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum {
	return &e
}

func (e *PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "success":
		fallthrough
	case "running":
		fallthrough
	case "error":
		*e = PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum: %v", v)
	}
}

type PostNetworksIDActionsDeleteRouteActionResponseAction struct {
	// Command executed in the Action
	Command string `json:"command"`
	// Error message for the Action if error occurred, otherwise null
	Error PostNetworksIDActionsDeleteRouteActionResponseActionError `json:"error"`
	// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
	Finished string `json:"finished"`
	// ID of the Resource
	ID int64 `json:"id"`
	// Progress of Action in percent
	Progress float64 `json:"progress"`
	// Resources the Action relates to
	Resources []PostNetworksIDActionsDeleteRouteActionResponseActionResources `json:"resources"`
	// Point in time when the Action was started (in ISO-8601 format)
	Started string `json:"started"`
	// Status of the Action
	Status PostNetworksIDActionsDeleteRouteActionResponseActionStatusEnum `json:"status"`
}

// PostNetworksIDActionsDeleteRouteActionResponse - The `action` key contains the `delete_route` Action
type PostNetworksIDActionsDeleteRouteActionResponse struct {
	Action PostNetworksIDActionsDeleteRouteActionResponseAction `json:"action"`
}

type PostNetworksIDActionsDeleteRouteResponse struct {
	// The `action` key contains the `delete_route` Action
	ActionResponse *PostNetworksIDActionsDeleteRouteActionResponse
	ContentType    string
	StatusCode     int
	RawResponse    *http.Response
}
