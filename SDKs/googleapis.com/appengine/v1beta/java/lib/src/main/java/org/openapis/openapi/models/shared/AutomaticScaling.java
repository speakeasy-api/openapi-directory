/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AutomaticScaling - Automatic scaling is based on request rate, response latencies, and other application metrics.
 */
public class AutomaticScaling {
    /**
     * The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coolDownPeriod")
    public String coolDownPeriod;

    public AutomaticScaling withCoolDownPeriod(String coolDownPeriod) {
        this.coolDownPeriod = coolDownPeriod;
        return this;
    }
    
    /**
     * Target scaling by CPU usage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuUtilization")
    public CpuUtilization cpuUtilization;

    public AutomaticScaling withCpuUtilization(CpuUtilization cpuUtilization) {
        this.cpuUtilization = cpuUtilization;
        return this;
    }
    
    /**
     * Target scaling by user-provided metrics. Only applicable in the App Engine flexible environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetrics")
    public CustomMetric[] customMetrics;

    public AutomaticScaling withCustomMetrics(CustomMetric[] customMetrics) {
        this.customMetrics = customMetrics;
        return this;
    }
    
    /**
     * Target scaling by disk usage. Only applicable in the App Engine flexible environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diskUtilization")
    public DiskUtilization diskUtilization;

    public AutomaticScaling withDiskUtilization(DiskUtilization diskUtilization) {
        this.diskUtilization = diskUtilization;
        return this;
    }
    
    /**
     * Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxConcurrentRequests")
    public Integer maxConcurrentRequests;

    public AutomaticScaling withMaxConcurrentRequests(Integer maxConcurrentRequests) {
        this.maxConcurrentRequests = maxConcurrentRequests;
        return this;
    }
    
    /**
     * Maximum number of idle instances that should be maintained for this version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxIdleInstances")
    public Integer maxIdleInstances;

    public AutomaticScaling withMaxIdleInstances(Integer maxIdleInstances) {
        this.maxIdleInstances = maxIdleInstances;
        return this;
    }
    
    /**
     * Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxPendingLatency")
    public String maxPendingLatency;

    public AutomaticScaling withMaxPendingLatency(String maxPendingLatency) {
        this.maxPendingLatency = maxPendingLatency;
        return this;
    }
    
    /**
     * Maximum number of instances that should be started to handle requests for this version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTotalInstances")
    public Integer maxTotalInstances;

    public AutomaticScaling withMaxTotalInstances(Integer maxTotalInstances) {
        this.maxTotalInstances = maxTotalInstances;
        return this;
    }
    
    /**
     * Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minIdleInstances")
    public Integer minIdleInstances;

    public AutomaticScaling withMinIdleInstances(Integer minIdleInstances) {
        this.minIdleInstances = minIdleInstances;
        return this;
    }
    
    /**
     * Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minPendingLatency")
    public String minPendingLatency;

    public AutomaticScaling withMinPendingLatency(String minPendingLatency) {
        this.minPendingLatency = minPendingLatency;
        return this;
    }
    
    /**
     * Minimum number of running instances that should be maintained for this version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minTotalInstances")
    public Integer minTotalInstances;

    public AutomaticScaling withMinTotalInstances(Integer minTotalInstances) {
        this.minTotalInstances = minTotalInstances;
        return this;
    }
    
    /**
     * Target scaling by network usage. Only applicable in the App Engine flexible environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("networkUtilization")
    public NetworkUtilization networkUtilization;

    public AutomaticScaling withNetworkUtilization(NetworkUtilization networkUtilization) {
        this.networkUtilization = networkUtilization;
        return this;
    }
    
    /**
     * Target scaling by request utilization. Only applicable in the App Engine flexible environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestUtilization")
    public RequestUtilization requestUtilization;

    public AutomaticScaling withRequestUtilization(RequestUtilization requestUtilization) {
        this.requestUtilization = requestUtilization;
        return this;
    }
    
    /**
     * Scheduler settings for standard environment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("standardSchedulerSettings")
    public StandardSchedulerSettings standardSchedulerSettings;

    public AutomaticScaling withStandardSchedulerSettings(StandardSchedulerSettings standardSchedulerSettings) {
        this.standardSchedulerSettings = standardSchedulerSettings;
        return this;
    }
    
    public AutomaticScaling(){}
}
