/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { FormatMessage } from "./formatmessage";
import { Expose, Type } from "class-transformer";

/**
 * Reference to which the message applies.
 */
export enum StatusMessageRefersToEnum {
  Unspecified = "UNSPECIFIED",
  BreakpointSourceLocation = "BREAKPOINT_SOURCE_LOCATION",
  BreakpointCondition = "BREAKPOINT_CONDITION",
  BreakpointExpression = "BREAKPOINT_EXPRESSION",
  BreakpointAge = "BREAKPOINT_AGE",
  BreakpointCanaryFailed = "BREAKPOINT_CANARY_FAILED",
  VariableName = "VARIABLE_NAME",
  VariableValue = "VARIABLE_VALUE",
}

/**
 * Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
 */
export class StatusMessage extends SpeakeasyBase {
  /**
   * Represents a message with parameters.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  @Type(() => FormatMessage)
  description?: FormatMessage;

  /**
   * Distinguishes errors from informational messages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isError" })
  isError?: boolean;

  /**
   * Reference to which the message applies.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "refersTo" })
  refersTo?: StatusMessageRefersToEnum;
}
