"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VoiceTypeEnum(str, Enum):
    VOICE = 'voice'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Voice:
    r"""Creates a voice audio element from the provided text"""
    
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The sentence or sentences to be converted to voice audio"""  
    type: VoiceTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})  
    cache: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cache'), 'exclude': lambda f: f is None }})
    r"""Element's cache policy. When true, the cached version (if exists) is used. When false, the assets is downloaded."""  
    comment: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('comment'), 'exclude': lambda f: f is None }})
    r"""Used for adding your comments"""  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Element's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration."""  
    extra_time: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra-time'), 'exclude': lambda f: f is None }})
    r"""Element's time span added after the playback."""  
    fade_in: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fade-in'), 'exclude': lambda f: f is None }})
    r"""Adds a fade in effect to the element. Value in seconds."""  
    fade_out: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fade-out'), 'exclude': lambda f: f is None }})
    r"""Adds a fade out effect to the element. Value in seconds."""  
    muted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('muted'), 'exclude': lambda f: f is None }})
    r"""Mutes the audio"""  
    start: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start'), 'exclude': lambda f: f is None }})
    r"""Element's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array."""  
    voice: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})
    r"""The voice name to be used. Check <a href=\\"/docs/tutorial/voice-elements/\\">available voices</a>."""  
    volume: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('volume'), 'exclude': lambda f: f is None }})  
    z_index: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('z-index'), 'exclude': lambda f: f is None }})
    r"""Element's z-index. Use this property to reorganize the layering of the elements like in HTML"""  
    