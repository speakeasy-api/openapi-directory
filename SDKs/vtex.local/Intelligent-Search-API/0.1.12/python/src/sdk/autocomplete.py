"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Autocomplete:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_autocomplete_suggestions(self, request: operations.GetAutocompleteSuggestionsRequest) -> operations.GetAutocompleteSuggestionsResponse:
        r"""Get list of suggested terms and attributes similar to the search term
        Lists the suggested terms and attributes similar to the search term.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/autocomplete_suggestions'
        
        query_params = utils.get_query_params(operations.GetAutocompleteSuggestionsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAutocompleteSuggestionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutocompleteSearchSuggestions])
                res.autocomplete_search_suggestions = out
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_top_searches(self, request: operations.GetTopSearchesRequest) -> operations.GetTopSearchesResponse:
        r"""Get list of the 10 most searched terms
        Lists the 10 most searched terms.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/top_searches'
        
        query_params = utils.get_query_params(operations.GetTopSearchesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTopSearchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TopSearches])
                res.top_searches = out
        elif http_res.status_code >= 500 and http_res.status_code < 600:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    