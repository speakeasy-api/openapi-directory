/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { GamePlatformMetacritic } from "./gameplatformmetacritic";
import { Expose, Transform, Type } from "class-transformer";

export enum GameSingleEsrbRatingNameEnum {
  Everyone = "Everyone",
  Everyone10Plus = "Everyone 10+",
  Teen = "Teen",
  Mature = "Mature",
  AdultsOnly = "Adults Only",
  RatingPending = "Rating Pending",
}

export enum GameSingleEsrbRatingSlugEnum {
  Everyone = "everyone",
  Everyone10Plus = "everyone-10-plus",
  Teen = "teen",
  Mature = "mature",
  AdultsOnly = "adults-only",
  RatingPending = "rating-pending",
}

export class GameSingleEsrbRating extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: GameSingleEsrbRatingNameEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: GameSingleEsrbRatingSlugEnum;
}

export class GameSinglePlatformsPlatform extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: string;
}

export class GameSinglePlatformsRequirements extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "minimum" })
  minimum?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "recommended" })
  recommended?: string;
}

export class GameSinglePlatforms extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  @Type(() => GameSinglePlatformsPlatform)
  platform?: GameSinglePlatformsPlatform;

  @SpeakeasyMetadata()
  @Expose({ name: "released_at" })
  releasedAt?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "requirements" })
  @Type(() => GameSinglePlatformsRequirements)
  requirements?: GameSinglePlatformsRequirements;
}

export class GameSingle extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "achievements_count" })
  achievementsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "added" })
  added?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "added_by_status" })
  addedByStatus?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "additions_count" })
  additionsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "alternative_names" })
  alternativeNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "background_image" })
  backgroundImage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "background_image_additional" })
  backgroundImageAdditional?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "creators_count" })
  creatorsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "esrb_rating" })
  @Type(() => GameSingleEsrbRating)
  esrbRating?: GameSingleEsrbRating;

  @SpeakeasyMetadata()
  @Expose({ name: "game_series_count" })
  gameSeriesCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "metacritic" })
  metacritic?: number;

  @SpeakeasyMetadata({ elemType: GamePlatformMetacritic })
  @Expose({ name: "metacritic_platforms" })
  @Type(() => GamePlatformMetacritic)
  metacriticPlatforms?: GamePlatformMetacritic[];

  /**
   * For example "http://www.metacritic.com/game/playstation-4/the-witcher-3-wild-hunt"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metacritic_url" })
  metacriticUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "movies_count" })
  moviesCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "name_original" })
  nameOriginal?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "parent_achievements_count" })
  parentAchievementsCount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "parents_count" })
  parentsCount?: number;

  @SpeakeasyMetadata({ elemType: GameSinglePlatforms })
  @Expose({ name: "platforms" })
  @Type(() => GameSinglePlatforms)
  platforms?: GameSinglePlatforms[];

  /**
   * in hours
   */
  @SpeakeasyMetadata()
  @Expose({ name: "playtime" })
  playtime?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rating" })
  rating: number;

  @SpeakeasyMetadata()
  @Expose({ name: "rating_top" })
  ratingTop?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ratings" })
  ratings?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "ratings_count" })
  ratingsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "reactions" })
  reactions?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "reddit_count" })
  redditCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "reddit_description" })
  redditDescription?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reddit_logo" })
  redditLogo?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "reddit_name" })
  redditName?: string;

  /**
   * For example "https://www.reddit.com/r/uncharted/" or "uncharted"
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reddit_url" })
  redditUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "released" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  released?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "reviews_text_count" })
  reviewsTextCount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "screenshots_count" })
  screenshotsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "slug" })
  slug?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "suggestions_count" })
  suggestionsCount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "tba" })
  tba?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "twitch_count" })
  twitchCount?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  updated?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "website" })
  website?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "youtube_count" })
  youtubeCount?: string;
}
