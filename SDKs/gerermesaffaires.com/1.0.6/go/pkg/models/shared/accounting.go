// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AccountingAccountingWorkbookEnum string

const (
	AccountingAccountingWorkbookEnumCustomer    AccountingAccountingWorkbookEnum = "customer"
	AccountingAccountingWorkbookEnumProvider    AccountingAccountingWorkbookEnum = "provider"
	AccountingAccountingWorkbookEnumBank        AccountingAccountingWorkbookEnum = "bank"
	AccountingAccountingWorkbookEnumCashWoucher AccountingAccountingWorkbookEnum = "cashWoucher"
	AccountingAccountingWorkbookEnumFiscal      AccountingAccountingWorkbookEnum = "fiscal"
	AccountingAccountingWorkbookEnumInsurance   AccountingAccountingWorkbookEnum = "insurance"
	AccountingAccountingWorkbookEnumSocial      AccountingAccountingWorkbookEnum = "social"
	AccountingAccountingWorkbookEnumOther       AccountingAccountingWorkbookEnum = "other"
	AccountingAccountingWorkbookEnumPermanent   AccountingAccountingWorkbookEnum = "permanent"
)

func (e *AccountingAccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = AccountingAccountingWorkbookEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountingAccountingWorkbookEnum: %s", s)
	}
}

type AccountingAccounting struct {
	AccountedOn *string                           `json:"AccountedOn,omitempty"`
	Workbook    *AccountingAccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                           `json:"YearMonth,omitempty"`
}

type Accounting struct {
	Accounting *AccountingAccounting `json:"Accounting,omitempty"`
	Author     *string               `json:"Author,omitempty"`
	Class      []string              `json:"Class,omitempty"`
	Code       *string               `json:"Code,omitempty"`
	Comment    *string               `json:"Comment,omitempty"`
	Date       *string               `json:"Date,omitempty"`
	Extension  *string               `json:"Extension,omitempty"`
	FolderDate *string               `json:"FolderDate,omitempty"`
	ID         *string               `json:"Id,omitempty"`
	Title      *string               `json:"Title,omitempty"`
}
