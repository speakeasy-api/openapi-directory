/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class RecordingRegistrantsQuestionsGetSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class RecordingRegistrantsQuestionsGetRequest extends SpeakeasyBase {
  /**
   * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.
   *
   * @remarks
   *
   * To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.
   *
   * If a UUID starts with "/" or contains "//" (example: "/ajXp112QmuoKj4854875=="), you must **double encode** the UUID before making an API request.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: string;
}

/**
 * The type of registration question and answers.
 */
export enum RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum {
  Short = "short",
  Single = "single",
  Multiple = "multiple",
}

export class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions extends SpeakeasyBase {
  /**
   * Answer choices for the question. Can not be used with Short answer type.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answers" })
  answers?: string[];

  /**
   * State whether registrants are required to answer custom questions or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;

  /**
   * Title of the question.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  /**
   * The type of registration question and answers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestionsTypeEnum;
}

/**
 * Field name.
 */
export enum RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum {
  LastName = "last_name",
  Address = "address",
  City = "city",
  Country = "country",
  Zip = "zip",
  State = "state",
  Phone = "phone",
  Industry = "industry",
  Org = "org",
  JobTitle = "job_title",
  PurchasingTimeFrame = "purchasing_time_frame",
  RoleInPurchaseProcess = "role_in_purchase_process",
  NoOfEmployees = "no_of_employees",
  Comments = "comments",
}

export class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions extends SpeakeasyBase {
  /**
   * Field name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "field_name" })
  fieldName?: RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestionsFieldNameEnum;

  /**
   * State whether the field is required to be answered by the registrant or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "required" })
  required?: boolean;
}

/**
 * Recording Registrant Questions
 */
export class RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions extends SpeakeasyBase {
  /**
   * Array of Registrant Custom Questions
   */
  @SpeakeasyMetadata({
    elemType:
      RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions,
  })
  @Expose({ name: "custom_questions" })
  @Type(
    () =>
      RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions
  )
  customQuestions?: RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsCustomQuestions[];

  /**
   * Array of Registrant Questions
   */
  @SpeakeasyMetadata({
    elemType:
      RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions,
  })
  @Expose({ name: "questions" })
  @Type(
    () => RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions
  )
  questions?: RecordingRegistrantsQuestionsGetRecordingRegistrantQuestionsQuestions[];
}

export class RecordingRegistrantsQuestionsGetResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Recording Registrant Question object returned.
   */
  @SpeakeasyMetadata()
  recordingRegistrantQuestions?: RecordingRegistrantsQuestionsGetRecordingRegistrantQuestions;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
