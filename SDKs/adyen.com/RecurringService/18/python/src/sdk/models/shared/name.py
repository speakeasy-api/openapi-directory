"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class NameGenderEnum(str, Enum):
    r"""A person's gender (can be unknown)."""
    MALE = 'MALE'
    FEMALE = 'FEMALE'
    UNKNOWN = 'UNKNOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Name:
    
    first_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firstName') }})
    r"""A person's first name."""  
    gender: NameGenderEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gender') }})
    r"""A person's gender (can be unknown)."""  
    last_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastName') }})
    r"""A person's last name."""  
    infix: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infix'), 'exclude': lambda f: f is None }})
    r"""A person name's infix, if applicable. Maximum length: 20 characters."""  
    