// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETReplaceRouteActionEnum
type GETReplaceRouteActionEnum string

const (
	GETReplaceRouteActionEnumReplaceRoute GETReplaceRouteActionEnum = "ReplaceRoute"
)

func (e GETReplaceRouteActionEnum) ToPointer() *GETReplaceRouteActionEnum {
	return &e
}

func (e *GETReplaceRouteActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ReplaceRoute":
		*e = GETReplaceRouteActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceRouteActionEnum: %v", v)
	}
}

// GETReplaceRouteVersionEnum
type GETReplaceRouteVersionEnum string

const (
	GETReplaceRouteVersionEnumTwoThousandAndSixteen1115 GETReplaceRouteVersionEnum = "2016-11-15"
)

func (e GETReplaceRouteVersionEnum) ToPointer() *GETReplaceRouteVersionEnum {
	return &e
}

func (e *GETReplaceRouteVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2016-11-15":
		*e = GETReplaceRouteVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETReplaceRouteVersionEnum: %v", v)
	}
}

type GETReplaceRouteRequest struct {
	Action GETReplaceRouteActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// [IPv4 traffic only] The ID of a carrier gateway.
	CarrierGatewayID *string `queryParam:"style=form,explode=true,name=CarrierGatewayId"`
	// The Amazon Resource Name (ARN) of the core network.
	CoreNetworkArn *string `queryParam:"style=form,explode=true,name=CoreNetworkArn"`
	// The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
	DestinationCidrBlock *string `queryParam:"style=form,explode=true,name=DestinationCidrBlock"`
	// The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
	DestinationIpv6CidrBlock *string `queryParam:"style=form,explode=true,name=DestinationIpv6CidrBlock"`
	// The ID of the prefix list for the route.
	DestinationPrefixListID *string `queryParam:"style=form,explode=true,name=DestinationPrefixListId"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// [IPv6 traffic only] The ID of an egress-only internet gateway.
	EgressOnlyInternetGatewayID *string `queryParam:"style=form,explode=true,name=EgressOnlyInternetGatewayId"`
	// The ID of an internet gateway or virtual private gateway.
	GatewayID *string `queryParam:"style=form,explode=true,name=GatewayId"`
	// The ID of a NAT instance in your VPC.
	InstanceID *string `queryParam:"style=form,explode=true,name=InstanceId"`
	// The ID of the local gateway.
	LocalGatewayID *string `queryParam:"style=form,explode=true,name=LocalGatewayId"`
	// Specifies whether to reset the local route to its default target (<code>local</code>).
	LocalTarget *bool `queryParam:"style=form,explode=true,name=LocalTarget"`
	// [IPv4 traffic only] The ID of a NAT gateway.
	NatGatewayID *string `queryParam:"style=form,explode=true,name=NatGatewayId"`
	// The ID of a network interface.
	NetworkInterfaceID *string `queryParam:"style=form,explode=true,name=NetworkInterfaceId"`
	// The ID of the route table.
	RouteTableID string `queryParam:"style=form,explode=true,name=RouteTableId"`
	// The ID of a transit gateway.
	TransitGatewayID *string                    `queryParam:"style=form,explode=true,name=TransitGatewayId"`
	Version          GETReplaceRouteVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
	VpcEndpointID *string `queryParam:"style=form,explode=true,name=VpcEndpointId"`
	// The ID of a VPC peering connection.
	VpcPeeringConnectionID *string `queryParam:"style=form,explode=true,name=VpcPeeringConnectionId"`
	XAmzAlgorithm          *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETReplaceRouteResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
