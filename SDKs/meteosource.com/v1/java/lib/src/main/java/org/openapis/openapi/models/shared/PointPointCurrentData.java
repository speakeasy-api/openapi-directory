/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PointPointCurrentData {
    /**
     * Percentage of sky covered by clouds.
     * Unit: \%
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_cover")
    public Double cloudCover;
    public PointPointCurrentData withCloudCover(Double cloudCover) {
        this.cloudCover = cloudCover;
        return this;
    }
    
    /**
     * Current dew point temperature.
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dew_point")
    public Double dewPoint;
    public PointPointCurrentData withDewPoint(Double dewPoint) {
        this.dewPoint = dewPoint;
        return this;
    }
    
    /**
     * Feels like temperature.
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feels_like")
    public Double feelsLike;
    public PointPointCurrentData withFeelsLike(Double feelsLike) {
        this.feelsLike = feelsLike;
        return this;
    }
    
    /**
     * Relative humidity.
     * Unit: \%
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("humidity")
    public Long humidity;
    public PointPointCurrentData withHumidity(Long humidity) {
        this.humidity = humidity;
        return this;
    }
    
    /**
     * String identifier of current weather icon, e.g. `light_rain`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon")
    public String icon;
    public PointPointCurrentData withIcon(String icon) {
        this.icon = icon;
        return this;
    }
    
    /**
     * Numeric identifier of current weather icon. The following values can appear:
     * 
     * * 1 - Not available
     * * 2 - Sunny
     * * 3 - Mostly sunny
     * * 4 - Partly sunny
     * * 5 - Mostly cloudy
     * * 6 - Cloudy
     * * 7 - Overcast
     * * 8 - Overcast with low clouds
     * * 9 - Fog
     * * 10 - Light rain
     * * 11 - Rain
     * * 12 - Possible rain
     * * 13 - Rain shower
     * * 14 - Thunderstorm
     * * 15 - Local thunderstorms
     * * 16 - Light snow
     * * 17 - Snow
     * * 18 - Possible snow
     * * 19 - Snow shower
     * * 20 - Rain and snow
     * * 21 - Possible rain and snow
     * * 22 - Rain and snow
     * * 23 - Freezing rain
     * * 24 - Possible freezing rain
     * * 25 - Hail
     * * 26 - Clear (night)
     * * 27 - Mostly clear (night)
     * * 28 - Partly clear (night)
     * * 29 - Mostly cloudy (night)
     * * 30 - Cloudy (night)
     * * 31 - Overcast with low clouds (night)
     * * 32 - Rain shower (night)
     * * 33 - Local thunderstorms (night)
     * * 34 - Snow shower (night)
     * * 35 - Rain and snow (night)
     * * 36 - Possible freezing rain (night)
     * 
     * Unit: weather_ico0_36
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_num")
    public Long iconNum;
    public PointPointCurrentData withIconNum(Long iconNum) {
        this.iconNum = iconNum;
        return this;
    }
    
    /**
     * Global downward short-wave radiation flux.
     * Unit: W/m2
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("irradiance")
    public Double irradiance;
    public PointPointCurrentData withIrradiance(Double irradiance) {
        this.irradiance = irradiance;
        return this;
    }
    
    /**
     * Total column of ozone.
     * Unit: Dobson
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ozone")
    public Double ozone;
    public PointPointCurrentData withOzone(Double ozone) {
        this.ozone = ozone;
        return this;
    }
    
    @JsonProperty("precipitation")
    public PointPointCurrentPrecipitationData precipitation;
    public PointPointCurrentData withPrecipitation(PointPointCurrentPrecipitationData precipitation) {
        this.precipitation = precipitation;
        return this;
    }
    
    /**
     * Atmospheric pressure at mean sea level.
     * Units: metric = hPa, us = Hg, uk = hPa, ca = kPa
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pressure")
    public Double pressure;
    public PointPointCurrentData withPressure(Double pressure) {
        this.pressure = pressure;
        return this;
    }
    
    /**
     * Short text summary of current weather, e.g. `Light rain`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    public String summary;
    public PointPointCurrentData withSummary(String summary) {
        this.summary = summary;
        return this;
    }
    
    /**
     * Current temperature 2 metres above ground.
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    public Double temperature;
    public PointPointCurrentData withTemperature(Double temperature) {
        this.temperature = temperature;
        return this;
    }
    
    /**
     * UV index, values from zero (low risk of harm) to 11+ (extreme risk of harm).
     * Unit: uv_index
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uv_index")
    public Double uvIndex;
    public PointPointCurrentData withUvIndex(Double uvIndex) {
        this.uvIndex = uvIndex;
        return this;
    }
    
    /**
     * Visibility.
     * Units: metric = km, us = mi, uk = mi, ca = km
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visibility")
    public Double visibility;
    public PointPointCurrentData withVisibility(Double visibility) {
        this.visibility = visibility;
        return this;
    }
    
    @JsonProperty("wind")
    public PointPointCurrentWindData wind;
    public PointPointCurrentData withWind(PointPointCurrentWindData wind) {
        this.wind = wind;
        return this;
    }
    
    /**
     * Windchill temperature.
     * Units: metric = \u00b0C, us = \u00b0F, uk = \u00b0C, ca = \u00b0C
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wind_chill")
    public Double windChill;
    public PointPointCurrentData withWindChill(Double windChill) {
        this.windChill = windChill;
        return this;
    }
    
}
