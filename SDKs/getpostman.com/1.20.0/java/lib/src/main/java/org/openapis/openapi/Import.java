/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Import {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Import(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Import exported data
     * This endpoint allows you to import your exported Postman data.
     * For more information about how you can export your data, refer &lt;a href="https://go.postman.co/me/export"&gt;Export your Postman data.&lt;/a&gt;
     * 
     * On successful imports, the response will be an array with Each element contaning `id`, `name` and `uid` of entities created.
     * 
     * **Note**: Refer to examples for different scenarios.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ImportExportedDataResponse importExportedData(byte[] request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/import/exported");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "raw");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ImportExportedDataResponse res = new org.openapis.openapi.models.operations.ImportExportedDataResponse(contentType, httpRes.statusCode()) {{
            importExportedData200ApplicationJSONObject = null;
            importExportedData400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ImportExportedData200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ImportExportedData200ApplicationJSON.class);
                res.importExportedData200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ImportExportedData400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ImportExportedData400ApplicationJSON.class);
                res.importExportedData400ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Import external API specification
     * This endpoint allows you to import external API specifications into Postman.
     * 
     * Currently, this endpoint only supports the &lt;a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md"&gt;OpenAPI&lt;/a&gt; specification, for which the `importType` will be `openapi`.
     * 
     * On a successful import, the response will be an array with each element contaning `id`, `name` and `uid` of entities created.
     * 
     * Supported `type`s:
     * 
     * - string
     * - json
     * - file
     * 
     * The `input` parameter should be defined based on the `type`.
     * 
     * &gt; To import a file, request body must be form-data with `type` param set to `file`.
     * 
     * **Note**: Refer to examples for different scenarios.
     * 
     * &gt; Requires &lt;a href="#authentication"&gt;API Key&lt;/a&gt; as `X-Api-Key` request header.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ImportExternalApiSpecificationResponse importExternalApiSpecification(org.openapis.openapi.models.operations.ImportExternalApiSpecificationRequestBody request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/import/openapi");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ImportExternalApiSpecificationResponse res = new org.openapis.openapi.models.operations.ImportExternalApiSpecificationResponse(contentType, httpRes.statusCode()) {{
            importExternalApiSpecification200ApplicationJSONObject = null;
            importExternalApiSpecification400ApplicationJSONObject = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ImportExternalApiSpecification200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ImportExternalApiSpecification200ApplicationJSON.class);
                res.importExternalApiSpecification200ApplicationJSONObject = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ImportExternalApiSpecification400ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ImportExternalApiSpecification400ApplicationJSON.class);
                res.importExternalApiSpecification400ApplicationJSONObject = out;
            }
        }

        return res;
    }
}