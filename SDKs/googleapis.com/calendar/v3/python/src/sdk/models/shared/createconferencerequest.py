"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import conferencerequeststatus as shared_conferencerequeststatus
from ..shared import conferencesolutionkey as shared_conferencesolutionkey
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateConferenceRequest:
    
    conference_solution_key: Optional[shared_conferencesolutionkey.ConferenceSolutionKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('conferenceSolutionKey'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""The client-generated unique ID for this request.
    Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored.
    """  
    status: Optional[shared_conferencerequeststatus.ConferenceRequestStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})  
    