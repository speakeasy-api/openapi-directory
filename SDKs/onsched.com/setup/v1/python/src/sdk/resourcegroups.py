"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ResourceGroups:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_setup_v1_resourcegroups_id_(self, request: operations.DeleteSetupV1ResourcegroupsIDRequest) -> operations.DeleteSetupV1ResourcegroupsIDResponse:
        r"""Delete Resource Group
        <p>Use this endpoint to <b>Delete</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. The resource group is not permanently deleted and can be recovered by using the <i>PUT \u200B/setup\u200B/v1\u200B/resourcegroups\u200B/{id}\u200B/recover</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSetupV1ResourcegroupsIDRequest, base_url, '/setup/v1/resourcegroups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSetupV1ResourcegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceGroupViewModel])
                res.resource_group_view_model = out

        return res

    def get_setup_v1_resourcegroups(self, request: operations.GetSetupV1ResourcegroupsRequest) -> operations.GetSetupV1ResourcegroupsResponse:
        r"""List Resource Groups
        <p>Use this endpoint to <b>List Resource Groups</b> for the specified location. If not specified, the business location defaults to the primary business location. <b>Name</b> is a required field.</p>
        <p>Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the query parameters to filter the results further.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/resourcegroups'
        
        query_params = utils.get_query_params(operations.GetSetupV1ResourcegroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1ResourcegroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceGroupListViewModel])
                res.resource_group_list_view_model = out

        return res

    def get_setup_v1_resourcegroups_id_(self, request: operations.GetSetupV1ResourcegroupsIDRequest) -> operations.GetSetupV1ResourcegroupsIDResponse:
        r"""Get Resource Group
        <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET setup/v1/resourceGroups</i> endpoint.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSetupV1ResourcegroupsIDRequest, base_url, '/setup/v1/resourcegroups/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSetupV1ResourcegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceGroupViewModel])
                res.resource_group_view_model = out

        return res

    def post_setup_v1_resourcegroups(self, request: shared.ResourceGroupInputModel) -> operations.PostSetupV1ResourcegroupsResponse:
        r"""Create Resource Group
        <p>Use this endpoint to <b>Create</b> a resourceGroup object. Resource groups are used to categorize your resources.</p>
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/setup/v1/resourcegroups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSetupV1ResourcegroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceGroupViewModel])
                res.resource_group_view_model = out

        return res

    def put_setup_v1_resourcegroups_id_(self, request: operations.PutSetupV1ResourcegroupsIDRequest) -> operations.PutSetupV1ResourcegroupsIDResponse:
        r"""Update Resource Group
        <p>Use this endpoint to <b>Update</b> a resourceGroup object. A valid <b>resourceGroup id</b> is required. </p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1ResourcegroupsIDRequest, base_url, '/setup/v1/resourcegroups/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "resource_group_update_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1ResourcegroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceGroupViewModel])
                res.resource_group_view_model = out

        return res

    def put_setup_v1_resourcegroups_id_recover(self, request: operations.PutSetupV1ResourcegroupsIDRecoverRequest) -> operations.PutSetupV1ResourcegroupsIDRecoverResponse:
        r"""Recover Resource Group
        <p>Use this endpoint to <b>Recover</b> a deleted resourceGroup object. A valid <b>resourceGroup id</b> is required.</p>
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutSetupV1ResourcegroupsIDRecoverRequest, base_url, '/setup/v1/resourcegroups/{id}/recover', request)
        
        
        client = self._security_client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutSetupV1ResourcegroupsIDRecoverResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceViewModel])
                res.resource_view_model = out

        return res

    