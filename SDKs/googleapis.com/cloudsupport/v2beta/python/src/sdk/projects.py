"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudsupport_projects_cases_attachments_list(self, request: operations.CloudsupportProjectsCasesAttachmentsListRequest, security: operations.CloudsupportProjectsCasesAttachmentsListSecurity) -> operations.CloudsupportProjectsCasesAttachmentsListResponse:
        r"""Retrieve all attachments associated with a support case."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesAttachmentsListRequest, base_url, '/v2beta/{parent}/attachments', request)
        
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesAttachmentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesAttachmentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListAttachmentsResponse])
                res.list_attachments_response = out

        return res

    def cloudsupport_projects_cases_close(self, request: operations.CloudsupportProjectsCasesCloseRequest, security: operations.CloudsupportProjectsCasesCloseSecurity) -> operations.CloudsupportProjectsCasesCloseResponse:
        r"""Close the specified case."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesCloseRequest, base_url, '/v2beta/{name}:close', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesCloseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesCloseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Case])
                res.case = out

        return res

    def cloudsupport_projects_cases_comments_create(self, request: operations.CloudsupportProjectsCasesCommentsCreateRequest, security: operations.CloudsupportProjectsCasesCommentsCreateSecurity) -> operations.CloudsupportProjectsCasesCommentsCreateResponse:
        r"""Add a new comment to the specified Case. The comment object must have the following fields set: body."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesCommentsCreateRequest, base_url, '/v2beta/{parent}/comments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "comment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesCommentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesCommentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Comment])
                res.comment = out

        return res

    def cloudsupport_projects_cases_comments_list(self, request: operations.CloudsupportProjectsCasesCommentsListRequest, security: operations.CloudsupportProjectsCasesCommentsListSecurity) -> operations.CloudsupportProjectsCasesCommentsListResponse:
        r"""Retrieve all Comments associated with the Case object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesCommentsListRequest, base_url, '/v2beta/{parent}/comments', request)
        
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesCommentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesCommentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCommentsResponse])
                res.list_comments_response = out

        return res

    def cloudsupport_projects_cases_create(self, request: operations.CloudsupportProjectsCasesCreateRequest, security: operations.CloudsupportProjectsCasesCreateSecurity) -> operations.CloudsupportProjectsCasesCreateResponse:
        r"""Create a new case and associate it with the given Cloud resource. The case object must have the following fields set: display_name, description, classification, and severity."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesCreateRequest, base_url, '/v2beta/{parent}/cases', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "case_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Case])
                res.case = out

        return res

    def cloudsupport_projects_cases_escalate(self, request: operations.CloudsupportProjectsCasesEscalateRequest, security: operations.CloudsupportProjectsCasesEscalateSecurity) -> operations.CloudsupportProjectsCasesEscalateResponse:
        r"""Escalate a case. Escalating a case will initiate the Cloud Support escalation management process. This operation is only available to certain Customer Care tiers. Go to https://cloud.google.com/support and look for 'Technical support escalations' in the feature list to find out which tiers are able to perform escalations."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesEscalateRequest, base_url, '/v2beta/{name}:escalate', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "escalate_case_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesEscalateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesEscalateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Case])
                res.case = out

        return res

    def cloudsupport_projects_cases_get(self, request: operations.CloudsupportProjectsCasesGetRequest, security: operations.CloudsupportProjectsCasesGetSecurity) -> operations.CloudsupportProjectsCasesGetResponse:
        r"""Retrieve the specified case."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesGetRequest, base_url, '/v2beta/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Case])
                res.case = out

        return res

    def cloudsupport_projects_cases_list(self, request: operations.CloudsupportProjectsCasesListRequest, security: operations.CloudsupportProjectsCasesListSecurity) -> operations.CloudsupportProjectsCasesListResponse:
        r"""Retrieve all cases under the specified parent. Note: Listing cases under an Organization returns only the cases directly parented by that organization. To retrieve all cases under an organization, including cases parented by projects under that organization, use `cases.search`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsCasesListRequest, base_url, '/v2beta/{parent}/cases', request)
        
        query_params = utils.get_query_params(operations.CloudsupportProjectsCasesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsCasesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCasesResponse])
                res.list_cases_response = out

        return res

    def cloudsupport_projects_update_cases(self, request: operations.CloudsupportProjectsUpdateCasesRequest, security: operations.CloudsupportProjectsUpdateCasesSecurity) -> operations.CloudsupportProjectsUpdateCasesResponse:
        r"""Update the specified case. Only a subset of fields can be updated."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudsupportProjectsUpdateCasesRequest, base_url, '/v2beta/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "case_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudsupportProjectsUpdateCasesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudsupportProjectsUpdateCasesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Case])
                res.case = out

        return res

    