"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import instancegroupdetail as shared_instancegroupdetail
from ..shared import placementtype as shared_placementtype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JobFlowInstancesDetail:
    r"""Specify the type of Amazon EC2 instances that the cluster (job flow) runs on."""
    
    instance_count: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceCount') }})  
    master_instance_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterInstanceType') }})  
    slave_instance_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SlaveInstanceType') }})  
    ec2_key_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2KeyName'), 'exclude': lambda f: f is None }})  
    ec2_subnet_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ec2SubnetId'), 'exclude': lambda f: f is None }})  
    hadoop_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HadoopVersion'), 'exclude': lambda f: f is None }})  
    instance_groups: Optional[list[shared_instancegroupdetail.InstanceGroupDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InstanceGroups'), 'exclude': lambda f: f is None }})  
    keep_job_flow_alive_when_no_steps: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeepJobFlowAliveWhenNoSteps'), 'exclude': lambda f: f is None }})  
    master_instance_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterInstanceId'), 'exclude': lambda f: f is None }})  
    master_public_dns_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterPublicDnsName'), 'exclude': lambda f: f is None }})  
    normalized_instance_hours: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NormalizedInstanceHours'), 'exclude': lambda f: f is None }})  
    placement: Optional[shared_placementtype.PlacementType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Placement'), 'exclude': lambda f: f is None }})  
    termination_protected: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TerminationProtected'), 'exclude': lambda f: f is None }})  
    