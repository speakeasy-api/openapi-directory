"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Media:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_media(self, request: operations.CreateMediaRequestBody, security: operations.CreateMediaSecurity) -> operations.CreateMediaResponse:
        r"""Create media
        Uploads media file to account, acceptable media formats: bmp, gif, jpg, m4a, mp3, mp4, png, wav
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/media'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateMediaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ResourceID])
                res.resource_id = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def find_media(self, request: operations.FindMediaRequest, security: operations.FindMediaSecurity) -> operations.FindMediaResponse:
        r"""Find media
        Find media files created by user
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/media'
        
        query_params = utils.get_query_params(operations.FindMediaRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindMediaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MediaPage])
                res.media_page = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_media(self, request: operations.GetMediaRequest, security: operations.GetMediaSecurity) -> operations.GetMediaResponse:
        r"""Get a specific media
        Get media resource by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMediaRequest, base_url, '/media/{id}', request)
        
        query_params = utils.get_query_params(operations.GetMediaRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMediaResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Media])
                res.media = out
        elif http_res.status_code in [400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out

        return res

    def get_media_data(self, request: operations.GetMediaDataRequest, security: operations.GetMediaDataSecurity) -> operations.GetMediaDataResponse:
        r"""Download media by extension
        Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMediaDataRequest, base_url, '/media/{id}.{extension}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMediaDataResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'audio/m4a'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'audio/mp3'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'audio/wav'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/gif'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/jpeg'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/png'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/x-bmp'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'video/3gpp'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'video/mp4'):
                res.body = http_res.content

        return res

    def get_media_data_binary(self, request: operations.GetMediaDataBinaryRequest, security: operations.GetMediaDataBinarySecurity) -> operations.GetMediaDataBinaryResponse:
        r"""Download a MP3 media
        Download a MP3 media, endpoint returns application/binary content-type
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMediaDataBinaryRequest, base_url, '/media/{id}/file', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMediaDataBinaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'application/binary'):
                res.body = http_res.content

        return res

    def get_media_data_by_key(self, request: operations.GetMediaDataByKeyRequest, security: operations.GetMediaDataByKeySecurity) -> operations.GetMediaDataByKeyResponse:
        r"""Download media by extension
        Download a media file. Available types of files: bmp, gif, jpg, m4a, mp3, mp4, png, wav. Content type in response depends on 'extension' parameter, e.g. image/jpeg, image/png, audio/mp3, etc
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMediaDataByKeyRequest, base_url, '/media/public/{key}.{extension}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMediaDataByKeyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400, 401, 403, 404, 500]:
            if utils.match_content_type(content_type, 'audio/m4a'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'audio/mp3'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'audio/wav'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/gif'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/jpeg'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/png'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'image/x-bmp'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'video/3gpp'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'video/mp4'):
                res.body = http_res.content

        return res

    