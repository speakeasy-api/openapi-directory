"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class NodesAddonsFoldersListRequest:
    
    node_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'node_id', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the node."""  
    provider: str = dataclasses.field(metadata={'path_param': { 'field_name': 'provider', 'style': 'simple', 'explode': False }})
    r"""The unique identifier of the provider"""  
    
class NodesAddonsFoldersListAddonAttributesCategoriesEnum(str, Enum):
    DOCUMENTATION = 'documentation'
    STORAGE = 'storage'
    BIBLIOGRAPHY = 'bibliography'
    OTHER = 'other'
    SECURITY = 'security'
    CITATIONS = 'citations'


@dataclasses.dataclass
class NodesAddonsFoldersListAddonAttributes:
    r"""The properties of the addon entity."""
    
    categories: Optional[list[NodesAddonsFoldersListAddonAttributesCategoriesEnum]] = dataclasses.field(default=None)
    r"""List of categories this addon belongs to."""  
    description: Optional[str] = dataclasses.field(default=None)
    r"""The description of the service provider."""  
    name: Optional[str] = dataclasses.field(default=None)
    r"""The name of the third-party service provider."""  
    url: Optional[str] = dataclasses.field(default=None)
    r"""The URL to the third-party service provider."""  
    

@dataclasses.dataclass
class NodesAddonsFoldersListAddon:
    
    attributes: Optional[NodesAddonsFoldersListAddonAttributes] = dataclasses.field(default=None)
    r"""The properties of the addon entity."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""The identifier of the addon entity."""  
    type: Optional[str] = dataclasses.field(default=None)
    r"""The type identifier of the addon entity (`addons`)."""  
    

@dataclasses.dataclass
class NodesAddonsFoldersListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    