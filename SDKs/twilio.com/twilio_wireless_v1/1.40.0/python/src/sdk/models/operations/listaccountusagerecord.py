"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import account_usage_record_enum_granularity_enum as shared_account_usage_record_enum_granularity_enum
from ..shared import wireless_v1_account_usage_record as shared_wireless_v1_account_usage_record
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from sdk import utils
from typing import Optional

LIST_ACCOUNT_USAGE_RECORD_SERVERS = [
	"https://wireless.twilio.com",
]


@dataclasses.dataclass
class ListAccountUsageRecordSecurity:
    
    password: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'password' }})  
    username: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic', 'field_name': 'username' }})  
    

@dataclasses.dataclass
class ListAccountUsageRecordRequest:
    
    end: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'End', 'style': 'form', 'explode': True }})
    r"""Only include usage that has occurred on or before this date. Format is [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)."""  
    granularity: Optional[shared_account_usage_record_enum_granularity_enum.AccountUsageRecordEnumGranularityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Granularity', 'style': 'form', 'explode': True }})
    r"""How to summarize the usage by time. Can be: `daily`, `hourly`, or `all`. A value of `all` returns one Usage Record that describes the usage for the entire period."""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Page', 'style': 'form', 'explode': True }})
    r"""The page index. This value is simply for client state."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageSize', 'style': 'form', 'explode': True }})
    r"""How many resources to return in each list page. The default is 50, and the maximum is 1000."""  
    page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PageToken', 'style': 'form', 'explode': True }})
    r"""The page token. This is provided by the API."""  
    start: Optional[datetime] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Start', 'style': 'form', 'explode': True }})
    r"""Only include usage that has occurred on or after this date. Format is [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAccountUsageRecordListAccountUsageRecordResponseMeta:
    
    first_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('first_page_url'), 'exclude': lambda f: f is None }})  
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})  
    next_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_url'), 'exclude': lambda f: f is None }})  
    page: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page'), 'exclude': lambda f: f is None }})  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})  
    previous_page_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('previous_page_url'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ListAccountUsageRecordListAccountUsageRecordResponse:
    r"""OK"""
    
    meta: Optional[ListAccountUsageRecordListAccountUsageRecordResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    usage_records: Optional[list[shared_wireless_v1_account_usage_record.WirelessV1AccountUsageRecord]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage_records'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class ListAccountUsageRecordResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    list_account_usage_record_response: Optional[ListAccountUsageRecordListAccountUsageRecordResponse] = dataclasses.field(default=None)
    r"""OK"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    