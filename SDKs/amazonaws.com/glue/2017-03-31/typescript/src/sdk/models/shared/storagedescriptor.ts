/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Column } from "./column";
import { Order } from "./order";
import { SchemaReference } from "./schemareference";
import { SerDeInfo } from "./serdeinfo";
import { SkewedInfo } from "./skewedinfo";
import { Expose, Type } from "class-transformer";

/**
 * Describes the physical storage of table data.
 */
export class StorageDescriptor extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalLocations" })
  additionalLocations?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "BucketColumns" })
  bucketColumns?: string[];

  @SpeakeasyMetadata({ elemType: Column })
  @Expose({ name: "Columns" })
  @Type(() => Column)
  columns?: Column[];

  @SpeakeasyMetadata()
  @Expose({ name: "Compressed" })
  compressed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "InputFormat" })
  inputFormat?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Location" })
  location?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "NumberOfBuckets" })
  numberOfBuckets?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "OutputFormat" })
  outputFormat?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Parameters" })
  parameters?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "SchemaReference" })
  @Type(() => SchemaReference)
  schemaReference?: SchemaReference;

  @SpeakeasyMetadata()
  @Expose({ name: "SerdeInfo" })
  @Type(() => SerDeInfo)
  serdeInfo?: SerDeInfo;

  @SpeakeasyMetadata()
  @Expose({ name: "SkewedInfo" })
  @Type(() => SkewedInfo)
  skewedInfo?: SkewedInfo;

  @SpeakeasyMetadata({ elemType: Order })
  @Expose({ name: "SortColumns" })
  @Type(() => Order)
  sortColumns?: Order[];

  @SpeakeasyMetadata()
  @Expose({ name: "StoredAsSubDirectories" })
  storedAsSubDirectories?: boolean;
}
