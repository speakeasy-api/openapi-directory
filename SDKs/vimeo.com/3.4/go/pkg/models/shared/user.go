// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// UserAccountEnum - The user's account type:
//
// Option descriptions:
//   - `basic` - The user has a Vimeo Basic subscription.
//   - `business` - The user has a Vimeo Business subscription.
//   - `live_business` - The user has a Vimeo Business Live subscription.
//   - `live_premium` - The user has a Vimeo Premium subscription.
//   - `live_pro` - The user has a Vimeo PRO Live subscription.
//   - `plus` - The user has a Vimeo Plus subscription.
//   - `pro` - The user has a Vimeo Pro subscription.
//   - `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
//   - `producer` - The user has a Vimeo Producer subscription.
type UserAccountEnum string

const (
	UserAccountEnumBasic        UserAccountEnum = "basic"
	UserAccountEnumBusiness     UserAccountEnum = "business"
	UserAccountEnumLiveBusiness UserAccountEnum = "live_business"
	UserAccountEnumLivePremium  UserAccountEnum = "live_premium"
	UserAccountEnumLivePro      UserAccountEnum = "live_pro"
	UserAccountEnumPlus         UserAccountEnum = "plus"
	UserAccountEnumPro          UserAccountEnum = "pro"
	UserAccountEnumProUnlimited UserAccountEnum = "pro_unlimited"
	UserAccountEnumProducer     UserAccountEnum = "producer"
)

func (e *UserAccountEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "basic":
		fallthrough
	case "business":
		fallthrough
	case "live_business":
		fallthrough
	case "live_premium":
		fallthrough
	case "live_pro":
		fallthrough
	case "plus":
		fallthrough
	case "pro":
		fallthrough
	case "pro_unlimited":
		fallthrough
	case "producer":
		*e = UserAccountEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserAccountEnum: %s", s)
	}
}

// UserContentFilterEnum - The user's content filters:
//
// Option descriptions:
//   - `drugs` - Drugs or alcohol use.
//   - `language` - Profanity or sexually suggestive content.
//   - `nudity` - Nudity.
//   - `safe` - Suitable for all audiences.
//   - `unrated` - No rating.
//   - `violence` - Violent or graphic content.
type UserContentFilterEnum string

const (
	UserContentFilterEnumDrugs    UserContentFilterEnum = "drugs"
	UserContentFilterEnumLanguage UserContentFilterEnum = "language"
	UserContentFilterEnumNudity   UserContentFilterEnum = "nudity"
	UserContentFilterEnumSafe     UserContentFilterEnum = "safe"
	UserContentFilterEnumUnrated  UserContentFilterEnum = "unrated"
	UserContentFilterEnumViolence UserContentFilterEnum = "violence"
)

func (e *UserContentFilterEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "drugs":
		fallthrough
	case "language":
		fallthrough
	case "nudity":
		fallthrough
	case "safe":
		fallthrough
	case "unrated":
		fallthrough
	case "violence":
		*e = UserContentFilterEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserContentFilterEnum: %s", s)
	}
}

// UserMetadataConnectionsAlbums - Information about the albums created by this user.
type UserMetadataConnectionsAlbums struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of albums on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsAppearances - Information about the appearances of this user in other videos.
type UserMetadataConnectionsAppearances struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of appearances on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsBlock - Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
type UserMetadataConnectionsBlock struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of blocked users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// UserMetadataConnectionsCategories - Information about this user's followed categories.
type UserMetadataConnectionsCategories struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of categories on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsChannels - Information about this user's subscribed channels.
type UserMetadataConnectionsChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsFeed - Information about this user's feed.
type UserMetadataConnectionsFeed struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsFolders - Information about this user's folders.
type UserMetadataConnectionsFolders struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of folders on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsFollowers - Information about the user's followers.
type UserMetadataConnectionsFollowers struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of followers on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsFollowing - Information about the users that the current user is following.
type UserMetadataConnectionsFollowing struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of users on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsGroups - Information about the groups created by this user.
type UserMetadataConnectionsGroups struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of groups on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsLikes - Information about the videos that this user has liked.
type UserMetadataConnectionsLikes struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of likes on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsModeratedChannels - Information about the channels that this user moderates.
type UserMetadataConnectionsModeratedChannels struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of channels on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsPictures - Information about this user's portraits.
type UserMetadataConnectionsPictures struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of pictures on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsPortfolios - Information about this user's portfolios.
type UserMetadataConnectionsPortfolios struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of portfolios on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsRecommendedChannels - A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
type UserMetadataConnectionsRecommendedChannels struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of channels on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// UserMetadataConnectionsRecommendedUsers - A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
type UserMetadataConnectionsRecommendedUsers struct {
	// An array of HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options"`
	// The total number of users on this connection. This data requires a bearer token with the `private` scope.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI string `json:"uri"`
}

// UserMetadataConnectionsShared - Information about the videos that have been shared with this user.
type UserMetadataConnectionsShared struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsVideos - Information about the videos uploaded by this user.
type UserMetadataConnectionsVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsWatchedVideos - Information about the videos that this user has watched.
type UserMetadataConnectionsWatchedVideos struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnectionsWatchlater - Information about the videos that this user wants to watch later.
type UserMetadataConnectionsWatchlater struct {
	// An array of HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The total number of videos on this connection.
	Total float64 `json:"total"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

// UserMetadataConnections - The list of resource URIs related to the user.
type UserMetadataConnections struct {
	// Information about the albums created by this user.
	Albums UserMetadataConnectionsAlbums `json:"albums"`
	// Information about the appearances of this user in other videos.
	Appearances UserMetadataConnectionsAppearances `json:"appearances"`
	// Information on the users that the current user has blocked. This data requires a bearer token with the `private` scope.
	Block UserMetadataConnectionsBlock `json:"block"`
	// Information about this user's followed categories.
	Categories UserMetadataConnectionsCategories `json:"categories"`
	// Information about this user's subscribed channels.
	Channels UserMetadataConnectionsChannels `json:"channels"`
	// Information about this user's feed.
	Feed UserMetadataConnectionsFeed `json:"feed"`
	// Information about this user's folders.
	Folders UserMetadataConnectionsFolders `json:"folders"`
	// Information about the user's followers.
	Followers UserMetadataConnectionsFollowers `json:"followers"`
	// Information about the users that the current user is following.
	Following UserMetadataConnectionsFollowing `json:"following"`
	// Information about the groups created by this user.
	Groups UserMetadataConnectionsGroups `json:"groups"`
	// Information about the videos that this user has liked.
	Likes UserMetadataConnectionsLikes `json:"likes"`
	// Information about the channels that this user moderates.
	ModeratedChannels UserMetadataConnectionsModeratedChannels `json:"moderated_channels"`
	// Information about this user's portraits.
	Pictures UserMetadataConnectionsPictures `json:"pictures"`
	// Information about this user's portfolios.
	Portfolios UserMetadataConnectionsPortfolios `json:"portfolios"`
	// A collection of recommended channels for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedChannels UserMetadataConnectionsRecommendedChannels `json:"recommended_channels"`
	// A Collection of recommended users for the current user to follow. This data requires a bearer token with the `private` scope.
	RecommendedUsers UserMetadataConnectionsRecommendedUsers `json:"recommended_users"`
	// Information about the videos that have been shared with this user.
	Shared UserMetadataConnectionsShared `json:"shared"`
	// Information about the videos uploaded by this user.
	Videos UserMetadataConnectionsVideos `json:"videos"`
	// Information about the videos that this user has watched.
	WatchedVideos UserMetadataConnectionsWatchedVideos `json:"watched_videos"`
	// Information about the videos that this user wants to watch later.
	Watchlater UserMetadataConnectionsWatchlater `json:"watchlater"`
}

type UserMetadataInteractionsAddPrivacyUser struct {
	// An array of the HTTP methods permitted on this URI. This data requires a bearer token with the `private` scope.
	Options []string `json:"options,omitempty"`
	// The API URI that resolves to the connection data. This data requires a bearer token with the `private` scope.
	URI *string `json:"uri,omitempty"`
}

// UserMetadataInteractionsBlock - Information related to the block status of this user.
type UserMetadataInteractionsBlock struct {
	// Whether a user is blocking the current user.
	Added bool `json:"added"`
	// The time in ISO 8601 format when the block occurred, or the null value if no block exists.
	AddedTime string `json:"added_time"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to block or unblock the user.
	URI string `json:"uri"`
}

// UserMetadataInteractionsFollow - Information related to the followed status of this user.
type UserMetadataInteractionsFollow struct {
	// Whether a user is following the current user.
	Added bool `json:"added"`
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// The URI to follow the user.
	URI string `json:"uri"`
}

// UserMetadataInteractionsReport - Information regarding where and how to report a user.
type UserMetadataInteractionsReport struct {
	// An array of the HTTP methods permitted on this URI.
	Options []string `json:"options"`
	// List of valid reasons for reporting a video.
	Reason []string `json:"reason"`
	// The API URI that resolves to the connection data.
	URI string `json:"uri"`
}

type UserMetadataInteractions struct {
	AddPrivacyUser *UserMetadataInteractionsAddPrivacyUser `json:"add_privacy_user,omitempty"`
	// Information related to the block status of this user.
	Block UserMetadataInteractionsBlock `json:"block"`
	// Information related to the followed status of this user.
	Follow UserMetadataInteractionsFollow `json:"follow"`
	// Information regarding where and how to report a user.
	Report UserMetadataInteractionsReport `json:"report"`
}

// UserMetadata - The user's metadata.
type UserMetadata struct {
	// The list of resource URIs related to the user.
	Connections  UserMetadataConnections  `json:"connections"`
	Interactions UserMetadataInteractions `json:"interactions"`
}

// UserPreferencesVideosPrivacyCommentsEnum - The user's privacy preference for comments:
//
// Option descriptions:
//   - `anybody` - Anyone can comment on the user's videos.
//   - `contacts` - Only contacts can comment on the user's videos.
//   - `nobody` - No one can comment on the user's videos.
type UserPreferencesVideosPrivacyCommentsEnum string

const (
	UserPreferencesVideosPrivacyCommentsEnumAnybody  UserPreferencesVideosPrivacyCommentsEnum = "anybody"
	UserPreferencesVideosPrivacyCommentsEnumContacts UserPreferencesVideosPrivacyCommentsEnum = "contacts"
	UserPreferencesVideosPrivacyCommentsEnumNobody   UserPreferencesVideosPrivacyCommentsEnum = "nobody"
)

func (e *UserPreferencesVideosPrivacyCommentsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "nobody":
		*e = UserPreferencesVideosPrivacyCommentsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserPreferencesVideosPrivacyCommentsEnum: %s", s)
	}
}

// UserPreferencesVideosPrivacyEmbedEnum - The user's privacy preference for embeds:
//
// Option descriptions:
//   - `private` - Only the user can embed their own videos.
//   - `public` - Anyone can embed the user's videos.
//   - `whitelist` - Only those on the whitelist can embed the user's videos.
type UserPreferencesVideosPrivacyEmbedEnum string

const (
	UserPreferencesVideosPrivacyEmbedEnumPrivate   UserPreferencesVideosPrivacyEmbedEnum = "private"
	UserPreferencesVideosPrivacyEmbedEnumPublic    UserPreferencesVideosPrivacyEmbedEnum = "public"
	UserPreferencesVideosPrivacyEmbedEnumWhitelist UserPreferencesVideosPrivacyEmbedEnum = "whitelist"
)

func (e *UserPreferencesVideosPrivacyEmbedEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "private":
		fallthrough
	case "public":
		fallthrough
	case "whitelist":
		*e = UserPreferencesVideosPrivacyEmbedEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserPreferencesVideosPrivacyEmbedEnum: %s", s)
	}
}

// UserPreferencesVideosPrivacyViewEnum - The user's privacy preference for views:
//
// Option descriptions:
//   - `anybody` - Anyone can view the user's videos.
//   - `contacts` - Only contacts can view the user's videos.
//   - `disable` - Views are disabled for the user's videos.
//   - `nobody` - No one except the user can view the user's videos.
//   - `password` - Only those with the password can view the user's videos.
//   - `unlisted` - Anybody can view the user's videos if they have a link.
//   - `users` - Only other Vimeo members can view the user's videos.
type UserPreferencesVideosPrivacyViewEnum string

const (
	UserPreferencesVideosPrivacyViewEnumAnybody  UserPreferencesVideosPrivacyViewEnum = "anybody"
	UserPreferencesVideosPrivacyViewEnumContacts UserPreferencesVideosPrivacyViewEnum = "contacts"
	UserPreferencesVideosPrivacyViewEnumDisable  UserPreferencesVideosPrivacyViewEnum = "disable"
	UserPreferencesVideosPrivacyViewEnumNobody   UserPreferencesVideosPrivacyViewEnum = "nobody"
	UserPreferencesVideosPrivacyViewEnumPassword UserPreferencesVideosPrivacyViewEnum = "password"
	UserPreferencesVideosPrivacyViewEnumUnlisted UserPreferencesVideosPrivacyViewEnum = "unlisted"
	UserPreferencesVideosPrivacyViewEnumUsers    UserPreferencesVideosPrivacyViewEnum = "users"
)

func (e *UserPreferencesVideosPrivacyViewEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "anybody":
		fallthrough
	case "contacts":
		fallthrough
	case "disable":
		fallthrough
	case "nobody":
		fallthrough
	case "password":
		fallthrough
	case "unlisted":
		fallthrough
	case "users":
		*e = UserPreferencesVideosPrivacyViewEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserPreferencesVideosPrivacyViewEnum: %s", s)
	}
}

type UserPreferencesVideosPrivacy struct {
	// Whether other users can add the user's videos.
	Add *bool `json:"add,omitempty"`
	// The user's privacy preference for comments:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can comment on the user's videos.
	//  * `contacts` - Only contacts can comment on the user's videos.
	//  * `nobody` - No one can comment on the user's videos.
	//
	Comments *UserPreferencesVideosPrivacyCommentsEnum `json:"comments,omitempty"`
	// Whether other users can download the user's videos.
	Download *bool `json:"download,omitempty"`
	// The user's privacy preference for embeds:
	//
	// Option descriptions:
	//  * `private` - Only the user can embed their own videos.
	//  * `public` - Anyone can embed the user's videos.
	//  * `whitelist` - Only those on the whitelist can embed the user's videos.
	//
	Embed *UserPreferencesVideosPrivacyEmbedEnum `json:"embed,omitempty"`
	// The user's privacy preference for views:
	//
	// Option descriptions:
	//  * `anybody` - Anyone can view the user's videos.
	//  * `contacts` - Only contacts can view the user's videos.
	//  * `disable` - Views are disabled for the user's videos.
	//  * `nobody` - No one except the user can view the user's videos.
	//  * `password` - Only those with the password can view the user's videos.
	//  * `unlisted` - Anybody can view the user's videos if they have a link.
	//  * `users` - Only other Vimeo members can view the user's videos.
	//
	View *UserPreferencesVideosPrivacyViewEnum `json:"view,omitempty"`
}

type UserPreferencesVideos struct {
	Privacy *UserPreferencesVideosPrivacy `json:"privacy,omitempty"`
}

type UserPreferences struct {
	Videos *UserPreferencesVideos `json:"videos,omitempty"`
}

// UserUploadQuotaLifetime - Information about the user's lifetime upload usage.
type UserUploadQuotaLifetime struct {
	// The number of bytes remaining in your lifetime maximum.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload across the lifetime of your account.
	Max float64 `json:"max"`
	// The number of bytes that you've already uploaded against your lifetime limit.
	Used float64 `json:"used"`
}

// UserUploadQuotaPeriodic - Information about the user's usage for the current period.
type UserUploadQuotaPeriodic struct {
	// The number of bytes remaining in your upload quota for the current period.
	Free float64 `json:"free"`
	// The total number of bytes that you can upload per period.
	Max float64 `json:"max"`
	// The time in ISO 8601 format when your upload quota resets.
	ResetDate string `json:"reset_date"`
	// The number of bytes that you've already uploaded against your quota in the current period.
	Used float64 `json:"used"`
}

// UserUploadQuotaSpaceShowingEnum - Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
type UserUploadQuotaSpaceShowingEnum string

const (
	UserUploadQuotaSpaceShowingEnumLifetime UserUploadQuotaSpaceShowingEnum = "lifetime"
	UserUploadQuotaSpaceShowingEnumPeriodic UserUploadQuotaSpaceShowingEnum = "periodic"
)

func (e *UserUploadQuotaSpaceShowingEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifetime":
		fallthrough
	case "periodic":
		*e = UserUploadQuotaSpaceShowingEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UserUploadQuotaSpaceShowingEnum: %s", s)
	}
}

// UserUploadQuotaSpace - Information about the user's upload space remaining for the current period.
type UserUploadQuotaSpace struct {
	// The number of bytes remaining in your upload quota.
	Free float64 `json:"free"`
	// The maximum number of bytes allotted to your upload quota.
	Max float64 `json:"max"`
	// Whether the values of the upload_quota.space fields are for the lifetime quota or the periodic quota.
	Showing UserUploadQuotaSpaceShowingEnum `json:"showing"`
	// The number of bytes that you've already uploaded against your quota.
	Used float64 `json:"used"`
}

// UserUploadQuota - Appears only when the user has upload access and is looking at their own user record.
type UserUploadQuota struct {
	// Information about the user's lifetime upload usage.
	Lifetime UserUploadQuotaLifetime `json:"lifetime"`
	// Information about the user's usage for the current period.
	Periodic UserUploadQuotaPeriodic `json:"periodic"`
	// Information about the user's upload space remaining for the current period.
	Space UserUploadQuotaSpace `json:"space"`
}

type UserWebsites struct {
	// The website's description.
	Description string `json:"description"`
	// The URL of the website.
	Link string `json:"link"`
	// The name of the website.
	Name string `json:"name"`
}

// User - The moderators were removed.
type User struct {
	// The user's account type:
	//
	// Option descriptions:
	//  * `basic` - The user has a Vimeo Basic subscription.
	//  * `business` - The user has a Vimeo Business subscription.
	//  * `live_business` - The user has a Vimeo Business Live subscription.
	//  * `live_premium` - The user has a Vimeo Premium subscription.
	//  * `live_pro` - The user has a Vimeo PRO Live subscription.
	//  * `plus` - The user has a Vimeo Plus subscription.
	//  * `pro` - The user has a Vimeo Pro subscription.
	//  * `pro_unlimited` - The user has a Vimeo PRO Unlimited subscription.
	//  * `producer` - The user has a Vimeo Producer subscription.
	//
	Account UserAccountEnum `json:"account"`
	// The user's bio.
	Bio string `json:"bio"`
	// The user's content filters:
	//
	// Option descriptions:
	//  * `drugs` - Drugs or alcohol use.
	//  * `language` - Profanity or sexually suggestive content.
	//  * `nudity` - Nudity.
	//  * `safe` - Suitable for all audiences.
	//  * `unrated` - No rating.
	//  * `violence` - Violent or graphic content.
	//
	ContentFilter *UserContentFilterEnum `json:"content_filter,omitempty"`
	// The time in ISO 8601 format when the user account was created.
	CreatedTime string `json:"created_time"`
	// The user's email address. This data requires a bearer token with the `email` scope.
	Email *string `json:"email,omitempty"`
	// The absolute URL of this user's profile page.
	Link string `json:"link"`
	// The user's location.
	Location string `json:"location"`
	// The user's metadata.
	Metadata UserMetadata `json:"metadata"`
	// The user's display name.
	Name string `json:"name"`
	// The active portrait of this user.
	Pictures    Picture          `json:"pictures"`
	Preferences *UserPreferences `json:"preferences,omitempty"`
	// The user's resource key string.
	ResourceKey string `json:"resource_key"`
	// Appears only when the user has upload access and is looking at their own user record.
	UploadQuota UserUploadQuota `json:"upload_quota"`
	// The user's canonical relative URI.
	URI string `json:"uri"`
	// The user's websites.
	Websites []UserWebsites `json:"websites"`
}
