"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import alt_enum as shared_alt_enum
from ..shared import bucket as shared_bucket
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class StorageBucketsInsertSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageBucketsInsertSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageBucketsInsertSecurityOption3:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class StorageBucketsInsertSecurity:
    
    option1: Optional[StorageBucketsInsertSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[StorageBucketsInsertSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option3: Optional[StorageBucketsInsertSecurityOption3] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class StorageBucketsInsertPredefinedACLEnum(str, Enum):
    r"""Apply a predefined set of access controls to this bucket."""
    AUTHENTICATED_READ = 'authenticatedRead'
    PRIVATE = 'private'
    PROJECT_PRIVATE = 'projectPrivate'
    PUBLIC_READ = 'publicRead'
    PUBLIC_READ_WRITE = 'publicReadWrite'

class StorageBucketsInsertPredefinedDefaultObjectACLEnum(str, Enum):
    r"""Apply a predefined set of default object access controls to this bucket."""
    AUTHENTICATED_READ = 'authenticatedRead'
    BUCKET_OWNER_FULL_CONTROL = 'bucketOwnerFullControl'
    BUCKET_OWNER_READ = 'bucketOwnerRead'
    PRIVATE = 'private'
    PROJECT_PRIVATE = 'projectPrivate'
    PUBLIC_READ = 'publicRead'

class StorageBucketsInsertProjectionEnum(str, Enum):
    r"""Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full."""
    FULL = 'full'
    NO_ACL = 'noAcl'


@dataclasses.dataclass
class StorageBucketsInsertRequest:
    
    project: str = dataclasses.field(metadata={'query_param': { 'field_name': 'project', 'style': 'form', 'explode': True }})
    r"""A valid API project identifier."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for the response."""  
    bucket: Optional[shared_bucket.Bucket] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    predefined_acl: Optional[StorageBucketsInsertPredefinedACLEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'predefinedAcl', 'style': 'form', 'explode': True }})
    r"""Apply a predefined set of access controls to this bucket."""  
    predefined_default_object_acl: Optional[StorageBucketsInsertPredefinedDefaultObjectACLEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'predefinedDefaultObjectAcl', 'style': 'form', 'explode': True }})
    r"""Apply a predefined set of default object access controls to this bucket."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    projection: Optional[StorageBucketsInsertProjectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'projection', 'style': 'form', 'explode': True }})
    r"""Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""An opaque string that represents a user for quota purposes. Must not exceed 40 characters."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"media\\", \\"multipart\\", \\"resumable\\")."""  
    user_ip: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userIp', 'style': 'form', 'explode': True }})
    r"""Deprecated. Please use quotaUser instead."""  
    user_project: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userProject', 'style': 'form', 'explode': True }})
    r"""The project to be billed for this request."""  
    

@dataclasses.dataclass
class StorageBucketsInsertResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bucket: Optional[shared_bucket.Bucket] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    