// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// As2OutgoingMessageEntityProcessingResultEnum - Result of processing.
type As2OutgoingMessageEntityProcessingResultEnum string

const (
	As2OutgoingMessageEntityProcessingResultEnumNotStarted                    As2OutgoingMessageEntityProcessingResultEnum = "not_started"
	As2OutgoingMessageEntityProcessingResultEnumSendFailed                    As2OutgoingMessageEntityProcessingResultEnum = "send_failed"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccess                   As2OutgoingMessageEntityProcessingResultEnum = "send_success"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccessMdnInvalid         As2OutgoingMessageEntityProcessingResultEnum = "send_success_mdn_invalid"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccessMicMismatch        As2OutgoingMessageEntityProcessingResultEnum = "send_success_mic_mismatch"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccessMessageIDMismatch  As2OutgoingMessageEntityProcessingResultEnum = "send_success_message_id_mismatch"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccessSignatureMismatch  As2OutgoingMessageEntityProcessingResultEnum = "send_success_signature_mismatch"
	As2OutgoingMessageEntityProcessingResultEnumSendSuccessProcessingFailure  As2OutgoingMessageEntityProcessingResultEnum = "send_success_processing_failure"
	As2OutgoingMessageEntityProcessingResultEnumSendFailedUnknownHost         As2OutgoingMessageEntityProcessingResultEnum = "send_failed_unknown_host"
	As2OutgoingMessageEntityProcessingResultEnumSendFailedBadHTTPResponseCode As2OutgoingMessageEntityProcessingResultEnum = "send_failed_bad_http_response_code"
	As2OutgoingMessageEntityProcessingResultEnumSendFailedSslError            As2OutgoingMessageEntityProcessingResultEnum = "send_failed_ssl_error"
	As2OutgoingMessageEntityProcessingResultEnumSendFailedConnectionRefused   As2OutgoingMessageEntityProcessingResultEnum = "send_failed_connection_refused"
)

func (e *As2OutgoingMessageEntityProcessingResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "not_started":
		fallthrough
	case "send_failed":
		fallthrough
	case "send_success":
		fallthrough
	case "send_success_mdn_invalid":
		fallthrough
	case "send_success_mic_mismatch":
		fallthrough
	case "send_success_message_id_mismatch":
		fallthrough
	case "send_success_signature_mismatch":
		fallthrough
	case "send_success_processing_failure":
		fallthrough
	case "send_failed_unknown_host":
		fallthrough
	case "send_failed_bad_http_response_code":
		fallthrough
	case "send_failed_ssl_error":
		fallthrough
	case "send_failed_connection_refused":
		*e = As2OutgoingMessageEntityProcessingResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for As2OutgoingMessageEntityProcessingResultEnum: %s", s)
	}
}

// As2OutgoingMessageEntity - List As2 Outgoing Messages
type As2OutgoingMessageEntity struct {
	// JSON Structure of the activity log.
	ActivityLog *string `json:"activity_log,omitempty"`
	// AS2 FROM
	As2From *string `json:"as2_from,omitempty"`
	// Id of the AS2 Partner associated with this message.
	As2PartnerID *int `json:"as2_partner_id,omitempty"`
	// Id of the AS2 Station associated with this message.
	As2StationID *int `json:"as2_station_id,omitempty"`
	// AS2 TO
	As2To *string `json:"as2_to,omitempty"`
	// Filename of the file being sent.
	AttachmentFilename *string `json:"attachment_filename,omitempty"`
	// Encrypted Payload Body Size
	BodySize *string `json:"body_size,omitempty"`
	// Message creation date/time
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Date Header
	Date *string `json:"date,omitempty"`
	// URL to download the encrypted signed smime that is to sent as AS2 body
	EncryptedURI *string `json:"encrypted_uri,omitempty"`
	// HTTP Headers sent with this message.
	HTTPHeaders map[string]interface{} `json:"http_headers,omitempty"`
	// HTTP Response Code received for this message
	HTTPResponseCode *string `json:"http_response_code,omitempty"`
	// HTTP Headers received for this message.
	HTTPResponseHeaders map[string]interface{} `json:"http_response_headers,omitempty"`
	// HTTP transmission duration in seceonds
	HTTPTransmissionDuration *float64 `json:"http_transmission_duration,omitempty"`
	// Id of the AS2 Partner.
	ID *int `json:"id,omitempty"`
	// MDN message id matched?
	MdnMessageIDMatched *bool `json:"mdn_message_id_matched,omitempty"`
	// MDN MIC matched?
	MdnMicMatched *bool `json:"mdn_mic_matched,omitempty"`
	// MDN disposition indicate a successful processing?
	MdnProcessingSuccess *bool `json:"mdn_processing_success,omitempty"`
	// Did the partner give a response body?
	MdnReceived *bool `json:"mdn_received,omitempty"`
	// URL to download the http response body
	MdnResponseURI *string `json:"mdn_response_uri,omitempty"`
	// MDN signature verified?
	MdnSignatureVerified *bool `json:"mdn_signature_verified,omitempty"`
	// Is the response in MDN format?
	MdnValid *bool `json:"mdn_valid,omitempty"`
	// AS2 Message Id
	MessageID *string `json:"message_id,omitempty"`
	// AS2 Message Integrity Check SHA1
	Mic *string `json:"mic,omitempty"`
	// AS2 Message Integrity Check SHA256
	MicSha256 *string `json:"mic_sha_256,omitempty"`
	// Result of processing.
	ProcessingResult *As2OutgoingMessageEntityProcessingResultEnum `json:"processing_result,omitempty"`
	// Result of processing description.
	ProcessingResultDescription *string `json:"processing_result_description,omitempty"`
	// URL to download the original file contents
	RawURI *string `json:"raw_uri,omitempty"`
	// URL to download the file contents as smime with signature
	SmimeSignedURI *string `json:"smime_signed_uri,omitempty"`
	// URL to download the file contents encoded as smime
	SmimeURI *string `json:"smime_uri,omitempty"`
	// UUID assigned to this message.
	UUID *string `json:"uuid,omitempty"`
}
