// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SuggestFormatEnum
type SuggestFormatEnum string

const (
	SuggestFormatEnumSDK SuggestFormatEnum = "sdk"
)

func (e SuggestFormatEnum) ToPointer() *SuggestFormatEnum {
	return &e
}

func (e *SuggestFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sdk":
		*e = SuggestFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SuggestFormatEnum: %v", v)
	}
}

// SuggestPrettyEnum
type SuggestPrettyEnum string

const (
	SuggestPrettyEnumTrue SuggestPrettyEnum = "true"
)

func (e SuggestPrettyEnum) ToPointer() *SuggestPrettyEnum {
	return &e
}

func (e *SuggestPrettyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		*e = SuggestPrettyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SuggestPrettyEnum: %v", v)
	}
}

type SuggestRequest struct {
	XAmzAlgorithm     *string           `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string           `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string           `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string           `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string           `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string           `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string           `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	Format            SuggestFormatEnum `queryParam:"style=form,explode=true,name=format"`
	Pretty            SuggestPrettyEnum `queryParam:"style=form,explode=true,name=pretty"`
	// Specifies the string for which you want to get suggestions.
	Q string `queryParam:"style=form,explode=true,name=q"`
	// Specifies the maximum number of suggestions to return.
	Size *int64 `queryParam:"style=form,explode=true,name=size"`
	// Specifies the name of the suggester to use to find suggested matches.
	Suggester string `queryParam:"style=form,explode=true,name=suggester"`
}

type SuggestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// SearchException
	SearchException *shared.SearchException
	// Success
	SuggestResponse *shared.SuggestResponse
}
