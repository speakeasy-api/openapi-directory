"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class TaxSettingsResponseTaxationModeEnum(str, Enum):
    EXCLUSIVE = 'EXCLUSIVE'
    INCLUSIVE = 'INCLUSIVE'

class TaxSettingsResponseTaxationTypeEnum(str, Enum):
    NONE = 'NONE'
    SALES_TAX = 'SALES_TAX'
    VAT = 'VAT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TaxSettingsResponse:
    r"""Tax settings"""
    
    organization_uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationUuid'), 'exclude': lambda f: f is None }})  
    taxation_mode: Optional[TaxSettingsResponseTaxationModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxationMode'), 'exclude': lambda f: f is None }})  
    taxation_type: Optional[TaxSettingsResponseTaxationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxationType'), 'exclude': lambda f: f is None }})  
    