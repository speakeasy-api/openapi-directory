"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import dealer_type_enum as shared_dealer_type_enum
from ..shared import dealersresponse as shared_dealersresponse
from ..shared import error as shared_error
from ..shared import non_default_country_enum as shared_non_default_country_enum
from ..shared import sort_order_enum as shared_sort_order_enum
from typing import Optional


@dataclasses.dataclass
class GetDealersCarUkRequest:
    
    api_key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'api_key', 'style': 'form', 'explode': True }})
    r"""The API Authentication Key. Mandatory with all API calls."""  
    city: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'city', 'style': 'form', 'explode': True }})
    r"""To filter listing on City in which they are listed"""  
    country: Optional[shared_non_default_country_enum.NonDefaultCountryEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'country', 'style': 'form', 'explode': True }})
    r"""To filter listing on Country in which they are listed"""  
    county: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'county', 'style': 'form', 'explode': True }})
    r"""To filter listing on county in which they are listed"""  
    dealer_type: Optional[shared_dealer_type_enum.DealerTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'dealer_type', 'style': 'form', 'explode': True }})
    r"""Filter based on dealer type independant or franchise"""  
    facets: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'facets', 'style': 'form', 'explode': True }})
    r"""The comma separated list of fields for which facets are requested. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond."""  
    inventory_url: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'inventory_url', 'style': 'form', 'explode': True }})
    r"""inventory_url of dealer to be searched"""  
    latitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'latitude', 'style': 'form', 'explode': True }})
    r"""Latitude component of location"""  
    listing_count_range: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'listing_count_range', 'style': 'form', 'explode': True }})
    r"""To filter dealers based on their inventory size. Range can be given in the format - min-max e.g. 50-100"""  
    longitude: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'longitude', 'style': 'form', 'explode': True }})
    r"""Longitude component of location"""  
    postal_code: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'postal_code', 'style': 'form', 'explode': True }})
    r"""To filter listing on postal code around which they are listed"""  
    provider: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'provider', 'style': 'form', 'explode': True }})
    r"""boolean param to include site providers name in response"""  
    radius: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'radius', 'style': 'form', 'explode': True }})
    r"""Radius around the search location (Unit - Miles)"""  
    range_facets: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'range_facets', 'style': 'form', 'explode': True }})
    r"""The comma separated list of numeric fields for which range facets are requested. Range facets could be requested in addition to the listings for the search. Please note - The API calls with lots of range facet fields may take longer to respond."""  
    rows: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'rows', 'style': 'form', 'explode': True }})
    r"""Number of results to return. Default is 10. Max is 50"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_by', 'style': 'form', 'explode': True }})
    r"""Sort by field. Default sort field is distance from the given point"""  
    sort_order: Optional[shared_sort_order_enum.SortOrderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort_order', 'style': 'form', 'explode': True }})
    r"""Sort order - asc or desc. Default sort order is asc"""  
    start: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'start', 'style': 'form', 'explode': True }})
    r"""Page number to fetch the results for the given criteria. Default is 0. Pagination is allowed only till first 10000 results for the search and sort criteria. The page value can be only between 1 to 10000/rows"""  
    

@dataclasses.dataclass
class GetDealersCarUkResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    dealers_response: Optional[shared_dealersresponse.DealersResponse] = dataclasses.field(default=None)
    r"""List of dealers for the search"""  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    