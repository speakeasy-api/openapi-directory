<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Orders 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Marks an order as acknowledged.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeResponse
     */
	public function contentOrdersAcknowledge(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/acknowledge', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersAcknowledgeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAcknowledgeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersAcknowledgeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersAcknowledgeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sandbox only. Moves a test order from state "`inProgress`" to state "`pendingShipment`".
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderResponse
     */
	public function contentOrdersAdvancetestorder(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/testorders/{orderId}/advance', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersAdvancetestorderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersAdvanceTestOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersAdvanceTestOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels all line items in an order, making a full refund.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelResponse
     */
	public function contentOrdersCancel(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/cancel', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCancelRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCancelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCancelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Cancels a line item, making a full refund.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemResponse
     */
	public function contentOrdersCancellineitem(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/cancelLineItem', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCancelLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCancellineitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCancelLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCancelLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sandbox only. Cancels a test order for customer-initiated cancellation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerResponse
     */
	public function contentOrdersCanceltestorderbycustomer(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/testorders/{orderId}/cancelByCustomer', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCancelTestOrderByCustomerRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCanceltestorderbycustomerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCancelTestOrderByCustomerResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCancelTestOrderByCustomerResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sandbox only. Creates a test order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderResponse
     */
	public function contentOrdersCreatetestorder(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/testorders', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCreateTestOrderRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestorderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCreateTestOrderResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCreateTestOrderResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sandbox only. Creates a test return.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnResponse
     */
	public function contentOrdersCreatetestreturn(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/testreturn', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCreateTestReturnRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCreatetestreturnResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCreateTestReturnResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCreateTestReturnResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves or modifies multiple orders in a single request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchResponse
     */
	public function contentOrdersCustombatch(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/orders/batch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersCustomBatchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersCustombatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersCustomBatchResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersCustomBatchResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an order from your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetResponse
     */
	public function contentOrdersGet(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->order = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Order', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves an order using merchant order ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidResponse
     */
	public function contentOrdersGetbymerchantorderid(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/ordersbymerchantid/{merchantOrderId}', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGetbymerchantorderidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersGetByMerchantOrderIdResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersGetByMerchantOrderIdResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateResponse
     */
	public function contentOrdersGettestordertemplate(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/testordertemplates/{templateName}', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersGettestordertemplateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersGetTestOrderTemplateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersGetTestOrderTemplateResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding via Google then via an in-store return.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemResponse
     */
	public function contentOrdersInstorerefundlineitem(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/inStoreRefundLineItem', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersInStoreRefundLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersInstorerefundlineitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersInStoreRefundLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersInStoreRefundLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists the orders in your Merchant Center account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListResponse
     */
	public function contentOrdersList(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersListResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersListResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deprecated, please use returnRefundLineItem instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundResponse
     */
	public function contentOrdersRefund(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/refund', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersRefundRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRefundResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersRefundResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersRefundResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Rejects return on an line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemResponse
     */
	public function contentOrdersRejectreturnlineitem(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/rejectReturnLineItem', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersRejectReturnLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersRejectreturnlineitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersRejectReturnLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersRejectReturnLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemResponse
     */
	public function contentOrdersReturnlineitem(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/returnLineItem', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersReturnLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnlineitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersReturnLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersReturnLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemResponse
     */
	public function contentOrdersReturnrefundlineitem(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/returnRefundLineItem', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersReturnRefundLineItemRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersReturnrefundlineitemResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersReturnRefundLineItemResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersReturnRefundLineItemResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataResponse
     */
	public function contentOrdersSetlineitemmetadata(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/setLineItemMetadata', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersSetLineItemMetadataRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersSetlineitemmetadataResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersSetLineItemMetadataResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersSetLineItemMetadataResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Marks line item(s) as shipped.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsResponse
     */
	public function contentOrdersShiplineitems(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/shipLineItems', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersShipLineItemsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersShiplineitemsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersShipLineItemsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersShipLineItemsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates ship by and delivery by dates for a line item.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsResponse
     */
	public function contentOrdersUpdatelineitemshippingdetails(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/updateLineItemShippingDetails', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersUpdateLineItemShippingDetailsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatelineitemshippingdetailsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersUpdateLineItemShippingDetailsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersUpdateLineItemShippingDetailsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the merchant order ID for a given order.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidResponse
     */
	public function contentOrdersUpdatemerchantorderid(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/updateMerchantOrderId', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersUpdateMerchantOrderIdRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdatemerchantorderidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersUpdateMerchantOrderIdResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersUpdateMerchantOrderIdResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a shipment's status, carrier, and/or tracking ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentResponse
     */
	public function contentOrdersUpdateshipment(
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{merchantId}/orders/{orderId}/updateShipment', \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "ordersUpdateShipmentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ContentOrdersUpdateshipmentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->ordersUpdateShipmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\OrdersUpdateShipmentResponse', 'json');
            }
        }

        return $response;
    }
}