"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import deadletterconfig as shared_deadletterconfig
from ..shared import ecsparameters as shared_ecsparameters
from ..shared import eventbridgeparameters as shared_eventbridgeparameters
from ..shared import kinesisparameters as shared_kinesisparameters
from ..shared import retrypolicy as shared_retrypolicy
from ..shared import sagemakerpipelineparameters as shared_sagemakerpipelineparameters
from ..shared import sqsparameters as shared_sqsparameters
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Target:
    r"""The schedule's target. EventBridge Scheduler supports templated target that invoke common API operations, as well as universal targets that you can customize to invoke over 6,000 API operations across more than 270 services. You can only specify one templated or universal target for a schedule."""
    
    arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Arn') }})  
    role_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RoleArn') }})  
    dead_letter_config: Optional[shared_deadletterconfig.DeadLetterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeadLetterConfig'), 'exclude': lambda f: f is None }})  
    ecs_parameters: Optional[shared_ecsparameters.EcsParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EcsParameters'), 'exclude': lambda f: f is None }})  
    event_bridge_parameters: Optional[shared_eventbridgeparameters.EventBridgeParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventBridgeParameters'), 'exclude': lambda f: f is None }})  
    input: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Input'), 'exclude': lambda f: f is None }})  
    kinesis_parameters: Optional[shared_kinesisparameters.KinesisParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KinesisParameters'), 'exclude': lambda f: f is None }})  
    retry_policy: Optional[shared_retrypolicy.RetryPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RetryPolicy'), 'exclude': lambda f: f is None }})  
    sage_maker_pipeline_parameters: Optional[shared_sagemakerpipelineparameters.SageMakerPipelineParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SageMakerPipelineParameters'), 'exclude': lambda f: f is None }})  
    sqs_parameters: Optional[shared_sqsparameters.SqsParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SqsParameters'), 'exclude': lambda f: f is None }})  
    