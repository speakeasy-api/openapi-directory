"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import servicenowauthenticationtype_enum as shared_servicenowauthenticationtype_enum
from ..shared import servicenowbuildversiontype_enum as shared_servicenowbuildversiontype_enum
from ..shared import servicenowknowledgearticleconfiguration as shared_servicenowknowledgearticleconfiguration
from ..shared import servicenowservicecatalogconfiguration as shared_servicenowservicecatalogconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServiceNowConfiguration:
    r"""Provides the configuration information to connect to ServiceNow as your data source."""
    
    host_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HostUrl') }})  
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    service_now_build_version: shared_servicenowbuildversiontype_enum.ServiceNowBuildVersionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceNowBuildVersion') }})  
    authentication_type: Optional[shared_servicenowauthenticationtype_enum.ServiceNowAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationType'), 'exclude': lambda f: f is None }})  
    knowledge_article_configuration: Optional[shared_servicenowknowledgearticleconfiguration.ServiceNowKnowledgeArticleConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KnowledgeArticleConfiguration'), 'exclude': lambda f: f is None }})  
    service_catalog_configuration: Optional[shared_servicenowservicecatalogconfiguration.ServiceNowServiceCatalogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServiceCatalogConfiguration'), 'exclude': lambda f: f is None }})  
    