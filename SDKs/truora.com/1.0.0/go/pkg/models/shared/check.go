// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// CheckCountryEnum - ID Document country
type CheckCountryEnum string

const (
	CheckCountryEnumAll CheckCountryEnum = "ALL"
	CheckCountryEnumBr  CheckCountryEnum = "BR"
	CheckCountryEnumCl  CheckCountryEnum = "CL"
	CheckCountryEnumCo  CheckCountryEnum = "CO"
	CheckCountryEnumCr  CheckCountryEnum = "CR"
	CheckCountryEnumEc  CheckCountryEnum = "EC"
	CheckCountryEnumMx  CheckCountryEnum = "MX"
	CheckCountryEnumPe  CheckCountryEnum = "PE"
	CheckCountryEnumAr  CheckCountryEnum = "AR"
)

func (e *CheckCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ALL":
		fallthrough
	case "BR":
		fallthrough
	case "CL":
		fallthrough
	case "CO":
		fallthrough
	case "CR":
		fallthrough
	case "EC":
		fallthrough
	case "MX":
		fallthrough
	case "PE":
		fallthrough
	case "AR":
		*e = CheckCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckCountryEnum: %s", s)
	}
}

// CheckNativeCountryEnum - Person origin country
type CheckNativeCountryEnum string

const (
	CheckNativeCountryEnumAd CheckNativeCountryEnum = "ad"
	CheckNativeCountryEnumAe CheckNativeCountryEnum = "ae"
	CheckNativeCountryEnumAf CheckNativeCountryEnum = "af"
	CheckNativeCountryEnumAg CheckNativeCountryEnum = "ag"
	CheckNativeCountryEnumAi CheckNativeCountryEnum = "ai"
	CheckNativeCountryEnumAl CheckNativeCountryEnum = "al"
	CheckNativeCountryEnumAm CheckNativeCountryEnum = "am"
	CheckNativeCountryEnumAn CheckNativeCountryEnum = "an"
	CheckNativeCountryEnumAo CheckNativeCountryEnum = "ao"
	CheckNativeCountryEnumAq CheckNativeCountryEnum = "aq"
	CheckNativeCountryEnumAr CheckNativeCountryEnum = "ar"
	CheckNativeCountryEnumAs CheckNativeCountryEnum = "as"
	CheckNativeCountryEnumAt CheckNativeCountryEnum = "at"
	CheckNativeCountryEnumAu CheckNativeCountryEnum = "au"
	CheckNativeCountryEnumAw CheckNativeCountryEnum = "aw"
	CheckNativeCountryEnumAx CheckNativeCountryEnum = "ax"
	CheckNativeCountryEnumAz CheckNativeCountryEnum = "az"
	CheckNativeCountryEnumBa CheckNativeCountryEnum = "ba"
	CheckNativeCountryEnumBb CheckNativeCountryEnum = "bb"
	CheckNativeCountryEnumBd CheckNativeCountryEnum = "bd"
	CheckNativeCountryEnumBe CheckNativeCountryEnum = "be"
	CheckNativeCountryEnumBf CheckNativeCountryEnum = "bf"
	CheckNativeCountryEnumBg CheckNativeCountryEnum = "bg"
	CheckNativeCountryEnumBh CheckNativeCountryEnum = "bh"
	CheckNativeCountryEnumBi CheckNativeCountryEnum = "bi"
	CheckNativeCountryEnumBj CheckNativeCountryEnum = "bj"
	CheckNativeCountryEnumBm CheckNativeCountryEnum = "bm"
	CheckNativeCountryEnumBn CheckNativeCountryEnum = "bn"
	CheckNativeCountryEnumBo CheckNativeCountryEnum = "bo"
	CheckNativeCountryEnumBr CheckNativeCountryEnum = "br"
	CheckNativeCountryEnumBs CheckNativeCountryEnum = "bs"
	CheckNativeCountryEnumBt CheckNativeCountryEnum = "bt"
	CheckNativeCountryEnumBv CheckNativeCountryEnum = "bv"
	CheckNativeCountryEnumBw CheckNativeCountryEnum = "bw"
	CheckNativeCountryEnumBy CheckNativeCountryEnum = "by"
	CheckNativeCountryEnumBz CheckNativeCountryEnum = "bz"
	CheckNativeCountryEnumCa CheckNativeCountryEnum = "ca"
	CheckNativeCountryEnumCc CheckNativeCountryEnum = "cc"
	CheckNativeCountryEnumCd CheckNativeCountryEnum = "cd"
	CheckNativeCountryEnumCf CheckNativeCountryEnum = "cf"
	CheckNativeCountryEnumCg CheckNativeCountryEnum = "cg"
	CheckNativeCountryEnumCh CheckNativeCountryEnum = "ch"
	CheckNativeCountryEnumCi CheckNativeCountryEnum = "ci"
	CheckNativeCountryEnumCk CheckNativeCountryEnum = "ck"
	CheckNativeCountryEnumCl CheckNativeCountryEnum = "cl"
	CheckNativeCountryEnumCm CheckNativeCountryEnum = "cm"
	CheckNativeCountryEnumCn CheckNativeCountryEnum = "cn"
	CheckNativeCountryEnumCo CheckNativeCountryEnum = "co"
	CheckNativeCountryEnumCr CheckNativeCountryEnum = "cr"
	CheckNativeCountryEnumCu CheckNativeCountryEnum = "cu"
	CheckNativeCountryEnumCv CheckNativeCountryEnum = "cv"
	CheckNativeCountryEnumCx CheckNativeCountryEnum = "cx"
	CheckNativeCountryEnumCy CheckNativeCountryEnum = "cy"
	CheckNativeCountryEnumCz CheckNativeCountryEnum = "cz"
	CheckNativeCountryEnumDe CheckNativeCountryEnum = "de"
	CheckNativeCountryEnumDj CheckNativeCountryEnum = "dj"
	CheckNativeCountryEnumDk CheckNativeCountryEnum = "dk"
	CheckNativeCountryEnumDm CheckNativeCountryEnum = "dm"
	CheckNativeCountryEnumDo CheckNativeCountryEnum = "do"
	CheckNativeCountryEnumDz CheckNativeCountryEnum = "dz"
	CheckNativeCountryEnumEa CheckNativeCountryEnum = "ea"
	CheckNativeCountryEnumEc CheckNativeCountryEnum = "ec"
	CheckNativeCountryEnumEe CheckNativeCountryEnum = "ee"
	CheckNativeCountryEnumEg CheckNativeCountryEnum = "eg"
	CheckNativeCountryEnumEh CheckNativeCountryEnum = "eh"
	CheckNativeCountryEnumEr CheckNativeCountryEnum = "er"
	CheckNativeCountryEnumEs CheckNativeCountryEnum = "es"
	CheckNativeCountryEnumEt CheckNativeCountryEnum = "et"
	CheckNativeCountryEnumFi CheckNativeCountryEnum = "fi"
	CheckNativeCountryEnumFj CheckNativeCountryEnum = "fj"
	CheckNativeCountryEnumFk CheckNativeCountryEnum = "fk"
	CheckNativeCountryEnumFm CheckNativeCountryEnum = "fm"
	CheckNativeCountryEnumFo CheckNativeCountryEnum = "fo"
	CheckNativeCountryEnumFr CheckNativeCountryEnum = "fr"
	CheckNativeCountryEnumGa CheckNativeCountryEnum = "ga"
	CheckNativeCountryEnumGb CheckNativeCountryEnum = "gb"
	CheckNativeCountryEnumGd CheckNativeCountryEnum = "gd"
	CheckNativeCountryEnumGe CheckNativeCountryEnum = "ge"
	CheckNativeCountryEnumGf CheckNativeCountryEnum = "gf"
	CheckNativeCountryEnumGg CheckNativeCountryEnum = "gg"
	CheckNativeCountryEnumGh CheckNativeCountryEnum = "gh"
	CheckNativeCountryEnumGi CheckNativeCountryEnum = "gi"
	CheckNativeCountryEnumGl CheckNativeCountryEnum = "gl"
	CheckNativeCountryEnumGm CheckNativeCountryEnum = "gm"
	CheckNativeCountryEnumGn CheckNativeCountryEnum = "gn"
	CheckNativeCountryEnumGp CheckNativeCountryEnum = "gp"
	CheckNativeCountryEnumGq CheckNativeCountryEnum = "gq"
	CheckNativeCountryEnumGr CheckNativeCountryEnum = "gr"
	CheckNativeCountryEnumGs CheckNativeCountryEnum = "gs"
	CheckNativeCountryEnumGt CheckNativeCountryEnum = "gt"
	CheckNativeCountryEnumGu CheckNativeCountryEnum = "gu"
	CheckNativeCountryEnumGw CheckNativeCountryEnum = "gw"
	CheckNativeCountryEnumGy CheckNativeCountryEnum = "gy"
	CheckNativeCountryEnumHk CheckNativeCountryEnum = "hk"
	CheckNativeCountryEnumHm CheckNativeCountryEnum = "hm"
	CheckNativeCountryEnumHn CheckNativeCountryEnum = "hn"
	CheckNativeCountryEnumHr CheckNativeCountryEnum = "hr"
	CheckNativeCountryEnumHt CheckNativeCountryEnum = "ht"
	CheckNativeCountryEnumHu CheckNativeCountryEnum = "hu"
	CheckNativeCountryEnumID CheckNativeCountryEnum = "id"
	CheckNativeCountryEnumIe CheckNativeCountryEnum = "ie"
	CheckNativeCountryEnumIl CheckNativeCountryEnum = "il"
	CheckNativeCountryEnumIm CheckNativeCountryEnum = "im"
	CheckNativeCountryEnumIn CheckNativeCountryEnum = "in"
	CheckNativeCountryEnumIo CheckNativeCountryEnum = "io"
	CheckNativeCountryEnumIq CheckNativeCountryEnum = "iq"
	CheckNativeCountryEnumIr CheckNativeCountryEnum = "ir"
	CheckNativeCountryEnumIs CheckNativeCountryEnum = "is"
	CheckNativeCountryEnumIt CheckNativeCountryEnum = "it"
	CheckNativeCountryEnumJe CheckNativeCountryEnum = "je"
	CheckNativeCountryEnumJm CheckNativeCountryEnum = "jm"
	CheckNativeCountryEnumJo CheckNativeCountryEnum = "jo"
	CheckNativeCountryEnumJp CheckNativeCountryEnum = "jp"
	CheckNativeCountryEnumKe CheckNativeCountryEnum = "ke"
	CheckNativeCountryEnumKg CheckNativeCountryEnum = "kg"
	CheckNativeCountryEnumKh CheckNativeCountryEnum = "kh"
	CheckNativeCountryEnumKi CheckNativeCountryEnum = "ki"
	CheckNativeCountryEnumKm CheckNativeCountryEnum = "km"
	CheckNativeCountryEnumKn CheckNativeCountryEnum = "kn"
	CheckNativeCountryEnumKp CheckNativeCountryEnum = "kp"
	CheckNativeCountryEnumKr CheckNativeCountryEnum = "kr"
	CheckNativeCountryEnumKw CheckNativeCountryEnum = "kw"
	CheckNativeCountryEnumKy CheckNativeCountryEnum = "ky"
	CheckNativeCountryEnumKz CheckNativeCountryEnum = "kz"
	CheckNativeCountryEnumLa CheckNativeCountryEnum = "la"
	CheckNativeCountryEnumLb CheckNativeCountryEnum = "lb"
	CheckNativeCountryEnumLc CheckNativeCountryEnum = "lc"
	CheckNativeCountryEnumLi CheckNativeCountryEnum = "li"
	CheckNativeCountryEnumLk CheckNativeCountryEnum = "lk"
	CheckNativeCountryEnumLr CheckNativeCountryEnum = "lr"
	CheckNativeCountryEnumLs CheckNativeCountryEnum = "ls"
	CheckNativeCountryEnumLt CheckNativeCountryEnum = "lt"
	CheckNativeCountryEnumLu CheckNativeCountryEnum = "lu"
	CheckNativeCountryEnumLv CheckNativeCountryEnum = "lv"
	CheckNativeCountryEnumLy CheckNativeCountryEnum = "ly"
	CheckNativeCountryEnumMa CheckNativeCountryEnum = "ma"
	CheckNativeCountryEnumMc CheckNativeCountryEnum = "mc"
	CheckNativeCountryEnumMd CheckNativeCountryEnum = "md"
	CheckNativeCountryEnumMe CheckNativeCountryEnum = "me"
	CheckNativeCountryEnumMg CheckNativeCountryEnum = "mg"
	CheckNativeCountryEnumMh CheckNativeCountryEnum = "mh"
	CheckNativeCountryEnumMk CheckNativeCountryEnum = "mk"
	CheckNativeCountryEnumMl CheckNativeCountryEnum = "ml"
	CheckNativeCountryEnumMm CheckNativeCountryEnum = "mm"
	CheckNativeCountryEnumMn CheckNativeCountryEnum = "mn"
	CheckNativeCountryEnumMo CheckNativeCountryEnum = "mo"
	CheckNativeCountryEnumMp CheckNativeCountryEnum = "mp"
	CheckNativeCountryEnumMq CheckNativeCountryEnum = "mq"
	CheckNativeCountryEnumMr CheckNativeCountryEnum = "mr"
	CheckNativeCountryEnumMs CheckNativeCountryEnum = "ms"
	CheckNativeCountryEnumMt CheckNativeCountryEnum = "mt"
	CheckNativeCountryEnumMu CheckNativeCountryEnum = "mu"
	CheckNativeCountryEnumMv CheckNativeCountryEnum = "mv"
	CheckNativeCountryEnumMw CheckNativeCountryEnum = "mw"
	CheckNativeCountryEnumMx CheckNativeCountryEnum = "mx"
	CheckNativeCountryEnumMy CheckNativeCountryEnum = "my"
	CheckNativeCountryEnumMz CheckNativeCountryEnum = "mz"
	CheckNativeCountryEnumNa CheckNativeCountryEnum = "na"
	CheckNativeCountryEnumNc CheckNativeCountryEnum = "nc"
	CheckNativeCountryEnumNe CheckNativeCountryEnum = "ne"
	CheckNativeCountryEnumNf CheckNativeCountryEnum = "nf"
	CheckNativeCountryEnumNg CheckNativeCountryEnum = "ng"
	CheckNativeCountryEnumNi CheckNativeCountryEnum = "ni"
	CheckNativeCountryEnumNl CheckNativeCountryEnum = "nl"
	CheckNativeCountryEnumNo CheckNativeCountryEnum = "no"
	CheckNativeCountryEnumNp CheckNativeCountryEnum = "np"
	CheckNativeCountryEnumNr CheckNativeCountryEnum = "nr"
	CheckNativeCountryEnumNu CheckNativeCountryEnum = "nu"
	CheckNativeCountryEnumNz CheckNativeCountryEnum = "nz"
	CheckNativeCountryEnumOm CheckNativeCountryEnum = "om"
	CheckNativeCountryEnumPa CheckNativeCountryEnum = "pa"
	CheckNativeCountryEnumPe CheckNativeCountryEnum = "pe"
	CheckNativeCountryEnumPf CheckNativeCountryEnum = "pf"
	CheckNativeCountryEnumPg CheckNativeCountryEnum = "pg"
	CheckNativeCountryEnumPh CheckNativeCountryEnum = "ph"
	CheckNativeCountryEnumPk CheckNativeCountryEnum = "pk"
	CheckNativeCountryEnumPl CheckNativeCountryEnum = "pl"
	CheckNativeCountryEnumPm CheckNativeCountryEnum = "pm"
	CheckNativeCountryEnumPn CheckNativeCountryEnum = "pn"
	CheckNativeCountryEnumPr CheckNativeCountryEnum = "pr"
	CheckNativeCountryEnumPs CheckNativeCountryEnum = "ps"
	CheckNativeCountryEnumPt CheckNativeCountryEnum = "pt"
	CheckNativeCountryEnumPw CheckNativeCountryEnum = "pw"
	CheckNativeCountryEnumPy CheckNativeCountryEnum = "py"
	CheckNativeCountryEnumQa CheckNativeCountryEnum = "qa"
	CheckNativeCountryEnumRe CheckNativeCountryEnum = "re"
	CheckNativeCountryEnumRo CheckNativeCountryEnum = "ro"
	CheckNativeCountryEnumRs CheckNativeCountryEnum = "rs"
	CheckNativeCountryEnumRu CheckNativeCountryEnum = "ru"
	CheckNativeCountryEnumRw CheckNativeCountryEnum = "rw"
	CheckNativeCountryEnumSa CheckNativeCountryEnum = "sa"
	CheckNativeCountryEnumSb CheckNativeCountryEnum = "sb"
	CheckNativeCountryEnumSc CheckNativeCountryEnum = "sc"
	CheckNativeCountryEnumSd CheckNativeCountryEnum = "sd"
	CheckNativeCountryEnumSe CheckNativeCountryEnum = "se"
	CheckNativeCountryEnumSg CheckNativeCountryEnum = "sg"
	CheckNativeCountryEnumSh CheckNativeCountryEnum = "sh"
	CheckNativeCountryEnumSi CheckNativeCountryEnum = "si"
	CheckNativeCountryEnumSj CheckNativeCountryEnum = "sj"
	CheckNativeCountryEnumSk CheckNativeCountryEnum = "sk"
	CheckNativeCountryEnumSl CheckNativeCountryEnum = "sl"
	CheckNativeCountryEnumSm CheckNativeCountryEnum = "sm"
	CheckNativeCountryEnumSn CheckNativeCountryEnum = "sn"
	CheckNativeCountryEnumSo CheckNativeCountryEnum = "so"
	CheckNativeCountryEnumSr CheckNativeCountryEnum = "sr"
	CheckNativeCountryEnumSt CheckNativeCountryEnum = "st"
	CheckNativeCountryEnumSv CheckNativeCountryEnum = "sv"
	CheckNativeCountryEnumSy CheckNativeCountryEnum = "sy"
	CheckNativeCountryEnumSz CheckNativeCountryEnum = "sz"
	CheckNativeCountryEnumTc CheckNativeCountryEnum = "tc"
	CheckNativeCountryEnumTd CheckNativeCountryEnum = "td"
	CheckNativeCountryEnumTf CheckNativeCountryEnum = "tf"
	CheckNativeCountryEnumTg CheckNativeCountryEnum = "tg"
	CheckNativeCountryEnumTh CheckNativeCountryEnum = "th"
	CheckNativeCountryEnumTj CheckNativeCountryEnum = "tj"
	CheckNativeCountryEnumTk CheckNativeCountryEnum = "tk"
	CheckNativeCountryEnumTl CheckNativeCountryEnum = "tl"
	CheckNativeCountryEnumTm CheckNativeCountryEnum = "tm"
	CheckNativeCountryEnumTn CheckNativeCountryEnum = "tn"
	CheckNativeCountryEnumTo CheckNativeCountryEnum = "to"
	CheckNativeCountryEnumTr CheckNativeCountryEnum = "tr"
	CheckNativeCountryEnumTt CheckNativeCountryEnum = "tt"
	CheckNativeCountryEnumTv CheckNativeCountryEnum = "tv"
	CheckNativeCountryEnumTw CheckNativeCountryEnum = "tw"
	CheckNativeCountryEnumTz CheckNativeCountryEnum = "tz"
	CheckNativeCountryEnumUa CheckNativeCountryEnum = "ua"
	CheckNativeCountryEnumUg CheckNativeCountryEnum = "ug"
	CheckNativeCountryEnumUm CheckNativeCountryEnum = "um"
	CheckNativeCountryEnumUs CheckNativeCountryEnum = "us"
	CheckNativeCountryEnumUy CheckNativeCountryEnum = "uy"
	CheckNativeCountryEnumUz CheckNativeCountryEnum = "uz"
	CheckNativeCountryEnumVa CheckNativeCountryEnum = "va"
	CheckNativeCountryEnumVc CheckNativeCountryEnum = "vc"
	CheckNativeCountryEnumVe CheckNativeCountryEnum = "ve"
	CheckNativeCountryEnumVg CheckNativeCountryEnum = "vg"
	CheckNativeCountryEnumVi CheckNativeCountryEnum = "vi"
	CheckNativeCountryEnumVn CheckNativeCountryEnum = "vn"
	CheckNativeCountryEnumVu CheckNativeCountryEnum = "vu"
	CheckNativeCountryEnumWf CheckNativeCountryEnum = "wf"
	CheckNativeCountryEnumWs CheckNativeCountryEnum = "ws"
	CheckNativeCountryEnumYe CheckNativeCountryEnum = "ye"
	CheckNativeCountryEnumYt CheckNativeCountryEnum = "yt"
	CheckNativeCountryEnumZa CheckNativeCountryEnum = "za"
	CheckNativeCountryEnumZm CheckNativeCountryEnum = "zm"
	CheckNativeCountryEnumZw CheckNativeCountryEnum = "zw"
)

func (e *CheckNativeCountryEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ad":
		fallthrough
	case "ae":
		fallthrough
	case "af":
		fallthrough
	case "ag":
		fallthrough
	case "ai":
		fallthrough
	case "al":
		fallthrough
	case "am":
		fallthrough
	case "an":
		fallthrough
	case "ao":
		fallthrough
	case "aq":
		fallthrough
	case "ar":
		fallthrough
	case "as":
		fallthrough
	case "at":
		fallthrough
	case "au":
		fallthrough
	case "aw":
		fallthrough
	case "ax":
		fallthrough
	case "az":
		fallthrough
	case "ba":
		fallthrough
	case "bb":
		fallthrough
	case "bd":
		fallthrough
	case "be":
		fallthrough
	case "bf":
		fallthrough
	case "bg":
		fallthrough
	case "bh":
		fallthrough
	case "bi":
		fallthrough
	case "bj":
		fallthrough
	case "bm":
		fallthrough
	case "bn":
		fallthrough
	case "bo":
		fallthrough
	case "br":
		fallthrough
	case "bs":
		fallthrough
	case "bt":
		fallthrough
	case "bv":
		fallthrough
	case "bw":
		fallthrough
	case "by":
		fallthrough
	case "bz":
		fallthrough
	case "ca":
		fallthrough
	case "cc":
		fallthrough
	case "cd":
		fallthrough
	case "cf":
		fallthrough
	case "cg":
		fallthrough
	case "ch":
		fallthrough
	case "ci":
		fallthrough
	case "ck":
		fallthrough
	case "cl":
		fallthrough
	case "cm":
		fallthrough
	case "cn":
		fallthrough
	case "co":
		fallthrough
	case "cr":
		fallthrough
	case "cu":
		fallthrough
	case "cv":
		fallthrough
	case "cx":
		fallthrough
	case "cy":
		fallthrough
	case "cz":
		fallthrough
	case "de":
		fallthrough
	case "dj":
		fallthrough
	case "dk":
		fallthrough
	case "dm":
		fallthrough
	case "do":
		fallthrough
	case "dz":
		fallthrough
	case "ea":
		fallthrough
	case "ec":
		fallthrough
	case "ee":
		fallthrough
	case "eg":
		fallthrough
	case "eh":
		fallthrough
	case "er":
		fallthrough
	case "es":
		fallthrough
	case "et":
		fallthrough
	case "fi":
		fallthrough
	case "fj":
		fallthrough
	case "fk":
		fallthrough
	case "fm":
		fallthrough
	case "fo":
		fallthrough
	case "fr":
		fallthrough
	case "ga":
		fallthrough
	case "gb":
		fallthrough
	case "gd":
		fallthrough
	case "ge":
		fallthrough
	case "gf":
		fallthrough
	case "gg":
		fallthrough
	case "gh":
		fallthrough
	case "gi":
		fallthrough
	case "gl":
		fallthrough
	case "gm":
		fallthrough
	case "gn":
		fallthrough
	case "gp":
		fallthrough
	case "gq":
		fallthrough
	case "gr":
		fallthrough
	case "gs":
		fallthrough
	case "gt":
		fallthrough
	case "gu":
		fallthrough
	case "gw":
		fallthrough
	case "gy":
		fallthrough
	case "hk":
		fallthrough
	case "hm":
		fallthrough
	case "hn":
		fallthrough
	case "hr":
		fallthrough
	case "ht":
		fallthrough
	case "hu":
		fallthrough
	case "id":
		fallthrough
	case "ie":
		fallthrough
	case "il":
		fallthrough
	case "im":
		fallthrough
	case "in":
		fallthrough
	case "io":
		fallthrough
	case "iq":
		fallthrough
	case "ir":
		fallthrough
	case "is":
		fallthrough
	case "it":
		fallthrough
	case "je":
		fallthrough
	case "jm":
		fallthrough
	case "jo":
		fallthrough
	case "jp":
		fallthrough
	case "ke":
		fallthrough
	case "kg":
		fallthrough
	case "kh":
		fallthrough
	case "ki":
		fallthrough
	case "km":
		fallthrough
	case "kn":
		fallthrough
	case "kp":
		fallthrough
	case "kr":
		fallthrough
	case "kw":
		fallthrough
	case "ky":
		fallthrough
	case "kz":
		fallthrough
	case "la":
		fallthrough
	case "lb":
		fallthrough
	case "lc":
		fallthrough
	case "li":
		fallthrough
	case "lk":
		fallthrough
	case "lr":
		fallthrough
	case "ls":
		fallthrough
	case "lt":
		fallthrough
	case "lu":
		fallthrough
	case "lv":
		fallthrough
	case "ly":
		fallthrough
	case "ma":
		fallthrough
	case "mc":
		fallthrough
	case "md":
		fallthrough
	case "me":
		fallthrough
	case "mg":
		fallthrough
	case "mh":
		fallthrough
	case "mk":
		fallthrough
	case "ml":
		fallthrough
	case "mm":
		fallthrough
	case "mn":
		fallthrough
	case "mo":
		fallthrough
	case "mp":
		fallthrough
	case "mq":
		fallthrough
	case "mr":
		fallthrough
	case "ms":
		fallthrough
	case "mt":
		fallthrough
	case "mu":
		fallthrough
	case "mv":
		fallthrough
	case "mw":
		fallthrough
	case "mx":
		fallthrough
	case "my":
		fallthrough
	case "mz":
		fallthrough
	case "na":
		fallthrough
	case "nc":
		fallthrough
	case "ne":
		fallthrough
	case "nf":
		fallthrough
	case "ng":
		fallthrough
	case "ni":
		fallthrough
	case "nl":
		fallthrough
	case "no":
		fallthrough
	case "np":
		fallthrough
	case "nr":
		fallthrough
	case "nu":
		fallthrough
	case "nz":
		fallthrough
	case "om":
		fallthrough
	case "pa":
		fallthrough
	case "pe":
		fallthrough
	case "pf":
		fallthrough
	case "pg":
		fallthrough
	case "ph":
		fallthrough
	case "pk":
		fallthrough
	case "pl":
		fallthrough
	case "pm":
		fallthrough
	case "pn":
		fallthrough
	case "pr":
		fallthrough
	case "ps":
		fallthrough
	case "pt":
		fallthrough
	case "pw":
		fallthrough
	case "py":
		fallthrough
	case "qa":
		fallthrough
	case "re":
		fallthrough
	case "ro":
		fallthrough
	case "rs":
		fallthrough
	case "ru":
		fallthrough
	case "rw":
		fallthrough
	case "sa":
		fallthrough
	case "sb":
		fallthrough
	case "sc":
		fallthrough
	case "sd":
		fallthrough
	case "se":
		fallthrough
	case "sg":
		fallthrough
	case "sh":
		fallthrough
	case "si":
		fallthrough
	case "sj":
		fallthrough
	case "sk":
		fallthrough
	case "sl":
		fallthrough
	case "sm":
		fallthrough
	case "sn":
		fallthrough
	case "so":
		fallthrough
	case "sr":
		fallthrough
	case "st":
		fallthrough
	case "sv":
		fallthrough
	case "sy":
		fallthrough
	case "sz":
		fallthrough
	case "tc":
		fallthrough
	case "td":
		fallthrough
	case "tf":
		fallthrough
	case "tg":
		fallthrough
	case "th":
		fallthrough
	case "tj":
		fallthrough
	case "tk":
		fallthrough
	case "tl":
		fallthrough
	case "tm":
		fallthrough
	case "tn":
		fallthrough
	case "to":
		fallthrough
	case "tr":
		fallthrough
	case "tt":
		fallthrough
	case "tv":
		fallthrough
	case "tw":
		fallthrough
	case "tz":
		fallthrough
	case "ua":
		fallthrough
	case "ug":
		fallthrough
	case "um":
		fallthrough
	case "us":
		fallthrough
	case "uy":
		fallthrough
	case "uz":
		fallthrough
	case "va":
		fallthrough
	case "vc":
		fallthrough
	case "ve":
		fallthrough
	case "vg":
		fallthrough
	case "vi":
		fallthrough
	case "vn":
		fallthrough
	case "vu":
		fallthrough
	case "wf":
		fallthrough
	case "ws":
		fallthrough
	case "ye":
		fallthrough
	case "yt":
		fallthrough
	case "za":
		fallthrough
	case "zm":
		fallthrough
	case "zw":
		*e = CheckNativeCountryEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckNativeCountryEnum: %s", s)
	}
}

// CheckRegionEnum - Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
type CheckRegionEnum string

const (
	CheckRegionEnumDf CheckRegionEnum = "DF"
	CheckRegionEnumAc CheckRegionEnum = "AC"
	CheckRegionEnumAl CheckRegionEnum = "AL"
	CheckRegionEnumAp CheckRegionEnum = "AP"
	CheckRegionEnumAm CheckRegionEnum = "AM"
	CheckRegionEnumBa CheckRegionEnum = "BA"
	CheckRegionEnumCe CheckRegionEnum = "CE"
	CheckRegionEnumEs CheckRegionEnum = "ES"
	CheckRegionEnumGo CheckRegionEnum = "GO"
	CheckRegionEnumMa CheckRegionEnum = "MA"
	CheckRegionEnumMt CheckRegionEnum = "MT"
	CheckRegionEnumMs CheckRegionEnum = "MS"
	CheckRegionEnumMg CheckRegionEnum = "MG"
	CheckRegionEnumPa CheckRegionEnum = "PA"
	CheckRegionEnumPb CheckRegionEnum = "PB"
	CheckRegionEnumPr CheckRegionEnum = "PR"
	CheckRegionEnumPe CheckRegionEnum = "PE"
	CheckRegionEnumPi CheckRegionEnum = "PI"
	CheckRegionEnumRj CheckRegionEnum = "RJ"
	CheckRegionEnumRn CheckRegionEnum = "RN"
	CheckRegionEnumRs CheckRegionEnum = "RS"
	CheckRegionEnumRo CheckRegionEnum = "RO"
	CheckRegionEnumRr CheckRegionEnum = "RR"
	CheckRegionEnumSc CheckRegionEnum = "SC"
	CheckRegionEnumSp CheckRegionEnum = "SP"
	CheckRegionEnumSe CheckRegionEnum = "SE"
	CheckRegionEnumTo CheckRegionEnum = "TO"
)

func (e *CheckRegionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DF":
		fallthrough
	case "AC":
		fallthrough
	case "AL":
		fallthrough
	case "AP":
		fallthrough
	case "AM":
		fallthrough
	case "BA":
		fallthrough
	case "CE":
		fallthrough
	case "ES":
		fallthrough
	case "GO":
		fallthrough
	case "MA":
		fallthrough
	case "MT":
		fallthrough
	case "MS":
		fallthrough
	case "MG":
		fallthrough
	case "PA":
		fallthrough
	case "PB":
		fallthrough
	case "PR":
		fallthrough
	case "PE":
		fallthrough
	case "PI":
		fallthrough
	case "RJ":
		fallthrough
	case "RN":
		fallthrough
	case "RS":
		fallthrough
	case "RO":
		fallthrough
	case "RR":
		fallthrough
	case "SC":
		fallthrough
	case "SP":
		fallthrough
	case "SE":
		fallthrough
	case "TO":
		*e = CheckRegionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckRegionEnum: %s", s)
	}
}

// CheckStatusEnum - Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses
type CheckStatusEnum string

const (
	CheckStatusEnumNotStarted CheckStatusEnum = "not_started"
	CheckStatusEnumInProgress CheckStatusEnum = "in_progress"
	CheckStatusEnumCompleted  CheckStatusEnum = "completed"
	CheckStatusEnumError      CheckStatusEnum = "error"
	CheckStatusEnumDelayed    CheckStatusEnum = "delayed"
)

func (e *CheckStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "not_started":
		fallthrough
	case "in_progress":
		fallthrough
	case "completed":
		fallthrough
	case "error":
		fallthrough
	case "delayed":
		*e = CheckStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckStatusEnum: %s", s)
	}
}

// CheckTypeEnum - Background check type
type CheckTypeEnum string

const (
	CheckTypeEnumCompany CheckTypeEnum = "company"
	CheckTypeEnumPerson  CheckTypeEnum = "person"
	CheckTypeEnumVehicle CheckTypeEnum = "vehicle"
)

func (e *CheckTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "company":
		fallthrough
	case "person":
		fallthrough
	case "vehicle":
		*e = CheckTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckTypeEnum: %s", s)
	}
}

// Check - Represents a background check
type Check struct {
	// Person birth certificate
	BirthCertificate *string `json:"birth_certificate,omitempty"`
	// Background check ID
	CheckID string `json:"check_id"`
	// Represents the summary of a company background check
	CompanySummary *CompanySummary `json:"company_summary,omitempty"`
	// ID Document country
	Country CheckCountryEnum `json:"country"`
	// Background check creation date
	CreationDate time.Time `json:"creation_date"`
	// Person birthdate. Shown only if provided during check creation. YYYY-MM-DD format
	DateOfBirth *time.Time `json:"date_of_birth,omitempty"`
	// Person diplomatic id
	DiplomaticID *string `json:"diplomatic_id,omitempty"`
	// Person driver's license
	DriverLicense *string `json:"driver_license,omitempty"`
	// Person or entity first name. Shown only if provided during check creation
	FirstName *string `json:"first_name,omitempty"`
	// Person foreign identification
	ForeignID *string `json:"foreign_id,omitempty"`
	// [Experimental] Analyzes the probability that the results by name are attributed to a homonym. Number between 0 and 1 where 1 is the the greatest probability
	HomonymProbability *float32 `json:"homonym_probability,omitempty"`
	// Background check score including results by name only. This might contain homonym information
	HomonymScore *float32 `json:"homonym_score,omitempty"`
	// Background check scores by name for each profile group. [Deprecated for API key V1]
	HomonymScores []Score `json:"homonym_scores,omitempty"`
	// Background check score regarding results by ID number only. It is a number between 0 and 1 where 1 is the best score. This result is a weighted average of the id_scores listed under scores.
	IDScore float32 `json:"id_score"`
	// Issue date of the person ID
	IssueDate *time.Time `json:"issue_date,omitempty"`
	// Person or entity last name. Shown only if provided during check creation
	LastName *string `json:"last_name,omitempty"`
	// Vehicle license plate
	LicensePlate *string `json:"license_plate,omitempty"`
	// Person national identification
	NationalID *string `json:"national_id,omitempty"`
	// Person origin country
	NativeCountry *CheckNativeCountryEnum `json:"native_country,omitempty"`
	// Vehicle owner identification
	OwnerDocumentID *string `json:"owner_document_id,omitempty"`
	// Vehicle owner document type
	OwnerDocumentType *string `json:"owner_document_type,omitempty"`
	// Person passport
	Passport *string `json:"passport,omitempty"`
	// Vehicle license payment date
	PaymentDate *string `json:"payment_date,omitempty"`
	// Colombian PEP idenfitication for Venezuelans
	Pep *string `json:"pep,omitempty"`
	// Person phone number. Required by law in order to notify the person their background is being checked
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Person professional card number
	ProfessionalCard *string `json:"professional_card,omitempty"`
	// Temporary residence permit of the person
	Ptp *string `json:"ptp,omitempty"`
	// Region where the background is to be checked. By default, background checks in Brazil are performed in region where the person is from. Applies for some Brazil collectors only. Allowed values are: DF: Distrito Federal, AC: Acre, AL: Alagoas, AP: Amapá, AM: Amazonas, BA: Bahía, CE: Ceará, ES: Espírito Santo, GO: Goiás, MA: Maranhão, MT: Mato Grosso, MS: Mato Grosso do Sul, MG: Minas Gerais, PA: Pará, PB: Paraíba, PR: Paraná, PE: Pernambuco, PI: Piauí, RJ: Río de Janeiro, RN: Río Grande do Norte, RS: Río Grande do Sul, RO: Rondônia, RR: Roraima, SC: Santa Catarina, SP: São Paulo, SE: Sergipe, TO : Tocantins.
	//
	Region *CheckRegionEnum `json:"region,omitempty"`
	// Report ID the background check is associated with
	ReportID *string `json:"report_id,omitempty"`
	// Background check score. Number between 0 and 1 where 1 is the best score
	Score float32 `json:"score"`
	// Background check score of each profile group and dataset
	Scores []Score `json:"scores,omitempty"`
	// Result status of the background check. **Not_started** means the background check is still in queue, since there is a limit of background checks that can be processed simultaneously, **completed** means the check finished successfully, **error** means the check failed, **in_progress** means the check is currently being processed, **delayed** means the check is waiting for an additional requirement to be met, this can last up to 3 days. **Completed** and **error** are the two only final statuses
	Status CheckStatusEnum `json:"status"`
	// Database status list
	Statuses []Status `json:"statuses"`
	// Represents a background check summary
	Summary Summary `json:"summary"`
	// Person or company tax id
	TaxID *string `json:"tax_id,omitempty"`
	// Background check type
	Type CheckTypeEnum `json:"type"`
	// Background check update date
	UpdateDate *time.Time `json:"update_date,omitempty"`
	// Vehicle identification
	VehicleID *string `json:"vehicle_id,omitempty"`
	// Represents the summary of a vehicle background check
	VehicleSummary *VehicleSummary `json:"vehicle_summary,omitempty"`
	// List of parameters entered during background check creation that do not match the information obtained
	WrongInputs []WrongInput `json:"wrong_inputs,omitempty"`
}
