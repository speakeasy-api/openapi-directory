<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Distance 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get distance and travel time between two geographic points
     * 
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatResponse
     */
	public function getDistanceOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distance.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistanceOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between each pair of geographic points
     * 
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatResponse
     */
	public function getDistanceBetweenPairsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distance/betweenPairs.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetDistanceBetweenPairsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between two geographic points for a commercial vehicle
     * 
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatResponse
     */
	public function getTruckDistanceOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/distance.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between each pair of geographic points for a commercial vehicle
     * 
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatResponse
     */
	public function getTruckDistanceBetweenPairsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/distance/betweenPairs.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTruckDistanceBetweenPairsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between two geographic points
     * 
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatResponse
     */
	public function postDistanceOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distance.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDistanceOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between each pair of geographic points
     * 
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatResponse
     */
	public function postDistanceBetweenPairsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/distance/betweenPairs.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostDistanceBetweenPairsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between two geographic points
     * 
     * Represents the distance and time of the shortest or fastest path between given start and end points.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatResponse
     */
	public function postTruckDistanceOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/distance.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get distance and travel time between each pair of geographic points
     * 
     * Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatResponse
     */
	public function postTruckDistanceBetweenPairsOutputFormat(
        \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/truck/distance/betweenPairs.{outputFormat}', \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTruckDistanceBetweenPairsOutputFormatResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}