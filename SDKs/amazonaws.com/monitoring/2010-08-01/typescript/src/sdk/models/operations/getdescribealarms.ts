/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export enum GETDescribeAlarmsActionEnum {
  DescribeAlarms = "DescribeAlarms",
}

/**
 * Specify this parameter to receive information only about alarms that are currently in the state that you specify.
 */
export enum GETDescribeAlarmsStateValueEnum {
  Ok = "OK",
  Alarm = "ALARM",
  InsufficientData = "INSUFFICIENT_DATA",
}

export enum GETDescribeAlarmsVersionEnum {
  TwoThousandAndTen0801 = "2010-08-01",
}

export class GETDescribeAlarmsRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Action",
  })
  action: GETDescribeAlarmsActionEnum;

  /**
   * Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ActionPrefix",
  })
  actionPrefix?: string;

  /**
   * <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p> <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AlarmNamePrefix",
  })
  alarmNamePrefix?: string;

  /**
   * The names of the alarms to retrieve information about.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AlarmNames",
  })
  alarmNames?: string[];

  /**
   * Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=AlarmTypes",
  })
  alarmTypes?: shared.AlarmTypeEnum[];

  /**
   * <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p> <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ChildrenOfAlarmName",
  })
  childrenOfAlarmName?: string;

  /**
   * The maximum number of alarm descriptions to retrieve.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=MaxRecords",
  })
  maxRecords?: number;

  /**
   * The token returned by a previous call to indicate that there is more data available.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=NextToken",
  })
  nextToken?: string;

  /**
   * <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p> <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note> <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p> </note>
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ParentsOfAlarmName",
  })
  parentsOfAlarmName?: string;

  /**
   * Specify this parameter to receive information only about alarms that are currently in the state that you specify.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=StateValue",
  })
  stateValue?: GETDescribeAlarmsStateValueEnum;

  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Version",
  })
  version: GETDescribeAlarmsVersionEnum;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GETDescribeAlarmsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
