"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTypoToleranceRequestBodyMinWordSizeForTypos:
    
    one_typo: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oneTypo'), 'exclude': lambda f: f is None }})  
    two_typos: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('twoTypos'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateTypoToleranceRequestBody:
    
    disable_on_attributes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableOnAttributes'), 'exclude': lambda f: f is None }})  
    disable_on_words: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('disableOnWords'), 'exclude': lambda f: f is None }})  
    min_word_size_for_typos: Optional[UpdateTypoToleranceRequestBodyMinWordSizeForTypos] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minWordSizeForTypos'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class UpdateTypoToleranceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    