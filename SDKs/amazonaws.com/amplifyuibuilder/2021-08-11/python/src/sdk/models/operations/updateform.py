"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import fieldconfig as shared_fieldconfig
from ..shared import formactiontype_enum as shared_formactiontype_enum
from ..shared import formcta as shared_formcta
from ..shared import formdatatypeconfig as shared_formdatatypeconfig
from ..shared import formstyle as shared_formstyle
from ..shared import sectionalelement as shared_sectionalelement
from ..shared import updateformresponse as shared_updateformresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFormRequestBodyUpdatedForm:
    r"""Updates and saves all of the information about a form, based on form ID."""
    
    cta: Optional[shared_formcta.FormCTA] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cta'), 'exclude': lambda f: f is None }})  
    data_type: Optional[shared_formdatatypeconfig.FormDataTypeConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dataType'), 'exclude': lambda f: f is None }})  
    fields_: Optional[dict[str, shared_fieldconfig.FieldConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fields'), 'exclude': lambda f: f is None }})  
    form_action_type: Optional[shared_formactiontype_enum.FormActionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('formActionType'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    schema_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schemaVersion'), 'exclude': lambda f: f is None }})  
    sectional_elements: Optional[dict[str, shared_sectionalelement.SectionalElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sectionalElements'), 'exclude': lambda f: f is None }})  
    style: Optional[shared_formstyle.FormStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('style'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFormRequestBody:
    
    updated_form: UpdateFormRequestBodyUpdatedForm = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedForm') }})
    r"""Updates and saves all of the information about a form, based on form ID."""  
    

@dataclasses.dataclass
class UpdateFormRequest:
    
    app_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'appId', 'style': 'simple', 'explode': False }})
    r"""The unique ID for the Amplify app."""  
    environment_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'environmentName', 'style': 'simple', 'explode': False }})
    r"""The name of the backend environment that is part of the Amplify app."""  
    id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""The unique ID for the form."""  
    request_body: UpdateFormRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    client_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'clientToken', 'style': 'form', 'explode': True }})
    r"""The unique client token."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFormResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    invalid_parameter_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceConflictException"""  
    update_form_response: Optional[shared_updateformresponse.UpdateFormResponse] = dataclasses.field(default=None)
    r"""Success"""  
    