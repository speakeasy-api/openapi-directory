"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class ValidationAuthorities:
    r"""Everything about Otoroshi validation authorities"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_client_validator(self, request: shared.ValidationAuthority, security: operations.CreateClientValidatorSecurity) -> operations.CreateClientValidatorResponse:
        r"""Create one validation authorities
        Create one validation authorities
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client-validators'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateClientValidatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationAuthority])
                res.validation_authority = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def delete_client_validator(self, request: operations.DeleteClientValidatorRequest, security: operations.DeleteClientValidatorSecurity) -> operations.DeleteClientValidatorResponse:
        r"""Delete one validation authorities by id
        Delete one validation authorities by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteClientValidatorRequest, base_url, '/api/client-validators/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteClientValidatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Deleted])
                res.deleted = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_all_client_validators(self) -> operations.FindAllClientValidatorsResponse:
        r"""Get all validation authoritiess
        Get all validation authoritiess
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/client-validators'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindAllClientValidatorsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ValidationAuthority]])
                res.validation_authorities = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def find_client_validator_by_id(self, request: operations.FindClientValidatorByIDRequest, security: operations.FindClientValidatorByIDSecurity) -> operations.FindClientValidatorByIDResponse:
        r"""Get one validation authorities by id
        Get one validation authorities by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.FindClientValidatorByIDRequest, base_url, '/api/client-validators/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FindClientValidatorByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationAuthority])
                res.validation_authority = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def patch_client_validator(self, request: operations.PatchClientValidatorRequest, security: operations.PatchClientValidatorSecurity) -> operations.PatchClientValidatorResponse:
        r"""Update one validation authorities by id
        Update one validation authorities by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchClientValidatorRequest, base_url, '/api/client-validators/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchClientValidatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationAuthority])
                res.validation_authority = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    def update_client_validator(self, request: operations.UpdateClientValidatorRequest, security: operations.UpdateClientValidatorSecurity) -> operations.UpdateClientValidatorResponse:
        r"""Update one validation authorities by id
        Update one validation authorities by id
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateClientValidatorRequest, base_url, '/api/client-validators/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "validation_authority", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateClientValidatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ValidationAuthority])
                res.validation_authority = out
        elif http_res.status_code in [400, 401, 404]:
            pass

        return res

    