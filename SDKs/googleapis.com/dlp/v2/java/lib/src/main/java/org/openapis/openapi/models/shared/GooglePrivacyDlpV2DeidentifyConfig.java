/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GooglePrivacyDlpV2DeidentifyConfig - The configuration that controls how the data will change.
 */
public class GooglePrivacyDlpV2DeidentifyConfig {
    /**
     * A type of transformation that is applied over images.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imageTransformations")
    public GooglePrivacyDlpV2ImageTransformations imageTransformations;
    public GooglePrivacyDlpV2DeidentifyConfig withImageTransformations(GooglePrivacyDlpV2ImageTransformations imageTransformations) {
        this.imageTransformations = imageTransformations;
        return this;
    }
    
    /**
     * A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("infoTypeTransformations")
    public GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations;
    public GooglePrivacyDlpV2DeidentifyConfig withInfoTypeTransformations(GooglePrivacyDlpV2InfoTypeTransformations infoTypeTransformations) {
        this.infoTypeTransformations = infoTypeTransformations;
        return this;
    }
    
    /**
     * A type of transformation that is applied over structured data such as a table.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recordTransformations")
    public GooglePrivacyDlpV2RecordTransformations recordTransformations;
    public GooglePrivacyDlpV2DeidentifyConfig withRecordTransformations(GooglePrivacyDlpV2RecordTransformations recordTransformations) {
        this.recordTransformations = recordTransformations;
        return this;
    }
    
    /**
     * How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformationErrorHandling")
    public GooglePrivacyDlpV2TransformationErrorHandling transformationErrorHandling;
    public GooglePrivacyDlpV2DeidentifyConfig withTransformationErrorHandling(GooglePrivacyDlpV2TransformationErrorHandling transformationErrorHandling) {
        this.transformationErrorHandling = transformationErrorHandling;
        return this;
    }
    
}
