<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SecurityPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts a rule into a security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleResponse
     */
	public function computeSecurityPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves the list of all SecurityPolicy resources, regional and global, available to the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListResponse
     */
	public function computeSecurityPoliciesAggregatedList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/aggregated/securityPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesAggregatedListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPoliciesAggregatedList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPoliciesAggregatedList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteResponse
     */
	public function computeSecurityPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all of the ordered rules present in a single specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetResponse
     */
	public function computeSecurityPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleResponse
     */
	public function computeSecurityPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertResponse
     */
	public function computeSecurityPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the policies that have been configured for the specified project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListResponse
     */
	public function computeSecurityPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the current list of preconfigured Web Application Firewall (WAF) expressions.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsResponse
     */
	public function computeSecurityPoliciesListPreconfiguredExpressionSets(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesListPreconfiguredExpressionSetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPoliciesListPreconfiguredExpressionSetsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPoliciesListPreconfiguredExpressionSetsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request. To clear fields in the rule, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchResponse
     */
	public function computeSecurityPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleResponse
     */
	public function computeSecurityPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleResponse
     */
	public function computeSecurityPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{securityPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsResponse
     */
	public function computeSecurityPoliciesSetLabels(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{resource}/setLabels', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "globalSetLabelsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesSetLabelsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsResponse
     */
	public function computeSecurityPoliciesTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/global/securityPolicies/{resource}/testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeSecurityPoliciesTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestPermissionsResponse', 'json');
            }
        }

        return $response;
    }
}