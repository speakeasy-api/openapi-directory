<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Insight 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns address object
     * 
     * Returns NEBL address object containing information on a specific address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
     */
	public function getAddress(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}', \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetAddressResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns address balance in sats
     * 
     * Returns NEBL address balance in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceResponse
     */
	public function getAddressBalance(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}/balance', \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressBalanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns total received by address in sats
     * 
     * Returns total NEBL received by address in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedResponse
     */
	public function getAddressTotalReceived(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}/totalReceived', \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalReceivedResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressTotalReceivedResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns total sent by address in sats
     * 
     * Returns total NEBL sent by address in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentResponse
     */
	public function getAddressTotalSent(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}/totalSent', \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressTotalSentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressTotalSentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns address unconfirmed balance in sats
     * 
     * Returns NEBL address unconfirmed balance in satoshis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceResponse
     */
	public function getAddressUnconfirmedBalance(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}/unconfirmedBalance', \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressUnconfirmedBalanceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressUnconfirmedBalanceResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'float', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns all UTXOs at a given address
     * 
     * Returns information on each Unspent Transaction Output contained at an address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosResponse
     */
	public function getAddressUtxos(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/addr/{address}/utxo', \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressUtxosResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAddressUtxosResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\GetAddressUtxosResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns information regarding a Neblio block
     * 
     * Returns blockchain data for a given block based upon the block hash
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
     */
	public function getBlock(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/block/{blockhash}', \OpenAPI\OpenAPI\Models\Operations\GetBlockRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBlockResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns block hash of block
     * 
     * Returns the block hash of a block at a given block index
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexResponse
     */
	public function getBlockIndex(
        \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/block-index/{blockindex}', \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetBlockIndexResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getBlockIndexResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetBlockIndexResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns raw transaction hex
     * 
     * Returns raw transaction hex representing a NEBL transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetRawTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetRawTxResponse
     */
	public function getRawTx(
        \OpenAPI\OpenAPI\Models\Operations\GetRawTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetRawTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/rawtx/{txid}', \OpenAPI\OpenAPI\Models\Operations\GetRawTxRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetRawTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getRawTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetRawTxResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Utility API for calling several blockchain node functions
     * 
     * Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetStatusRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetStatusResponse
     */
	public function getStatus(
        \OpenAPI\OpenAPI\Models\Operations\GetStatusRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/status');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetStatusRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getStatusResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get node sync status
     * 
     * Returns information on the node's sync progress
     * 
     * @return \OpenAPI\OpenAPI\Models\Operations\GetSyncResponse
     */
	public function getSync(
    ): \OpenAPI\OpenAPI\Models\Operations\GetSyncResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/sync');
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetSyncResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getSyncResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetSyncResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns transaction object
     * 
     * Returns NEBL transaction object representing a NEBL transaction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTxResponse
     */
	public function getTx(
        \OpenAPI\OpenAPI\Models\Operations\GetTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/tx/{txid}', \OpenAPI\OpenAPI\Models\Operations\GetTxRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTxResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get transactions by block or address
     * 
     * Returns all transactions by block or address
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTxsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTxsResponse
     */
	public function getTxs(
        \OpenAPI\OpenAPI\Models\Operations\GetTxsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTxsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/txs');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTxsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTxsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getTxsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GetTxsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Broadcasts a signed raw transaction to the network (not NTP1 specific)
     * 
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\SendTxRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SendTxResponse
     */
	public function sendTx(
        \OpenAPI\OpenAPI\Models\Shared\SendTxRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SendTxResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/ins/tx/send');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendTxResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->broadcastTxResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BroadcastTxResponse', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
}