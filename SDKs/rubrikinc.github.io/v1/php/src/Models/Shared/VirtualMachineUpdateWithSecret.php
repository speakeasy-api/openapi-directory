<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * VirtualMachineUpdateWithSecret - Properties to update.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class VirtualMachineUpdateWithSecret
{
	#[\JMS\Serializer\Annotation\SerializedName('cloudInstantiationSpec')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\CloudInstantiationSpec')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?CloudInstantiationSpec $cloudInstantiationSpec = null;
    
    /**
     * Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
     * 
     * @var ?string $configuredSlaDomainId
     */
	#[\JMS\Serializer\Annotation\SerializedName('configuredSlaDomainId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $configuredSlaDomainId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('guestCredential')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\BaseGuestCredential')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?BaseGuestCredential $guestCredential = null;
    
    /**
     * User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
     * 
     * @var ?bool $isArrayIntegrationEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('isArrayIntegrationEnabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isArrayIntegrationEnabled = null;
    
    /**
     * Whether to pause or resume backups/archival for this VM.
     * 
     * @var ?bool $isVmPaused
     */
	#[\JMS\Serializer\Annotation\SerializedName('isVmPaused')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isVmPaused = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('maxNestedVsphereSnapshots')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $maxNestedVsphereSnapshots = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('postBackupScript')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VirtualMachineScriptDetail')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VirtualMachineScriptDetail $postBackupScript = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('postSnapScript')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VirtualMachineScriptDetail')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VirtualMachineScriptDetail $postSnapScript = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('preBackupScript')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VirtualMachineScriptDetail')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VirtualMachineScriptDetail $preBackupScript = null;
    
    /**
     * A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.
     * 
     * @var ?bool $shouldRefreshCacheAfterUpdate
     */
	#[\JMS\Serializer\Annotation\SerializedName('shouldRefreshCacheAfterUpdate')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $shouldRefreshCacheAfterUpdate = null;
    
    /**
     * Consistency level mandated for this VM or empty string for none.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum $snapshotConsistencyMandate
     */
	#[\JMS\Serializer\Annotation\SerializedName('snapshotConsistencyMandate')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VirtualMachineUpdateWithSecretSnapshotConsistencyMandateEnum $snapshotConsistencyMandate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('throttlingSettings')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\VmwareAdaptiveThrottlingSettings')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?VmwareAdaptiveThrottlingSettings $throttlingSettings = null;
    
	public function __construct()
	{
		$this->cloudInstantiationSpec = null;
		$this->configuredSlaDomainId = null;
		$this->guestCredential = null;
		$this->isArrayIntegrationEnabled = null;
		$this->isVmPaused = null;
		$this->maxNestedVsphereSnapshots = null;
		$this->postBackupScript = null;
		$this->postSnapScript = null;
		$this->preBackupScript = null;
		$this->shouldRefreshCacheAfterUpdate = null;
		$this->snapshotConsistencyMandate = null;
		$this->throttlingSettings = null;
	}
}
