// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

// TrackEventRequestBodyIdentificationAccount - Account identification requires an accountId, domain or both
type TrackEventRequestBodyIdentificationAccount struct {
	// Unique identifier for the account in your database
	AccountID *string `json:"accountId,omitempty"`
	// The domain associated with the account (e.g. acme-inc.com)
	Domain *string `json:"domain,omitempty"`
}

// TrackEventRequestBodyIdentificationUser - User identification requires a userId, email or both
type TrackEventRequestBodyIdentificationUser struct {
	// Email address of the user
	Email *string `json:"email,omitempty"`
	// Unique identifier for the user in your database
	UserID *string `json:"userId,omitempty"`
}

// TrackEventRequestBodyIdentification - Event identification requires a user, account or both
type TrackEventRequestBodyIdentification struct {
	// Account identification requires an accountId, domain or both
	Account *TrackEventRequestBodyIdentificationAccount `json:"account,omitempty"`
	// User identification requires a userId, email or both
	User *TrackEventRequestBodyIdentificationUser `json:"user,omitempty"`
}

// TrackEventRequestBody - Event for a user or an account
type TrackEventRequestBody struct {
	// Event identification requires a user, account or both
	Identification TrackEventRequestBodyIdentification `json:"identification"`
	// Event metadata, possible values are strings, booleans, numbers and datetimes (ISO 8601)
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Name     string                 `json:"name"`
	// If left blank this defaults to the current datetime
	TriggeredAt *string `json:"triggeredAt,omitempty"`
}

type TrackEvent500ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent500ApplicationJSON - The message specifies what is done
type TrackEvent500ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    TrackEvent500ApplicationJSONMeta `json:"meta"`
}

type TrackEvent429ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent429ApplicationJSON - The message specifies what is done
type TrackEvent429ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    TrackEvent429ApplicationJSONMeta `json:"meta"`
}

type TrackEvent403ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent403ApplicationJSON - The message specifies what is done
type TrackEvent403ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    TrackEvent403ApplicationJSONMeta `json:"meta"`
}

type TrackEvent401ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent401ApplicationJSON - The message specifies what is done
type TrackEvent401ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    TrackEvent401ApplicationJSONMeta `json:"meta"`
}

// TrackEvent400ApplicationJSONErrorsParameters - All query-, header- and path- parameters that seemed incorrect
type TrackEvent400ApplicationJSONErrorsParameters struct {
	Header map[string]string `json:"header,omitempty"`
	Path   map[string]string `json:"path,omitempty"`
	Query  map[string]string `json:"query,omitempty"`
}

// TrackEvent400ApplicationJSONErrors - Map that sums up all received values that seemed incorrect
type TrackEvent400ApplicationJSONErrors struct {
	// All input fields that seemed incorrect
	Fields map[string]string `json:"fields,omitempty"`
	// All query-, header- and path- parameters that seemed incorrect
	Parameters *TrackEvent400ApplicationJSONErrorsParameters `json:"parameters,omitempty"`
}

type TrackEvent400ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent400ApplicationJSON - The message specifies what is done
type TrackEvent400ApplicationJSON struct {
	// Map that sums up all received values that seemed incorrect
	Errors  TrackEvent400ApplicationJSONErrors `json:"errors"`
	Message string                             `json:"message"`
	Meta    TrackEvent400ApplicationJSONMeta   `json:"meta"`
}

type TrackEvent201ApplicationJSONMeta struct {
	RequestID string  `json:"requestId"`
	Status    float64 `json:"status"`
}

// TrackEvent201ApplicationJSON - The message specifies what is done
type TrackEvent201ApplicationJSON struct {
	Message string                           `json:"message"`
	Meta    TrackEvent201ApplicationJSONMeta `json:"meta"`
}

type TrackEventResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Object was created
	TrackEvent201ApplicationJSONObject *TrackEvent201ApplicationJSON
	// Bad request, some fields or parameters are incorrect
	TrackEvent400ApplicationJSONObject *TrackEvent400ApplicationJSON
	// No API Key was provided or the key is not authorised to perform the action
	TrackEvent401ApplicationJSONObject *TrackEvent401ApplicationJSON
	// The API Key provided is currently not enabled
	TrackEvent403ApplicationJSONObject *TrackEvent403ApplicationJSON
	// Too many API requests were send
	TrackEvent429ApplicationJSONObject *TrackEvent429ApplicationJSON
	// An unexpected error occurred
	TrackEvent500ApplicationJSONObject *TrackEvent500ApplicationJSON
}
