// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETModifyTrafficMirrorFilterNetworkServicesActionEnum
type GETModifyTrafficMirrorFilterNetworkServicesActionEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesActionEnumModifyTrafficMirrorFilterNetworkServices GETModifyTrafficMirrorFilterNetworkServicesActionEnum = "ModifyTrafficMirrorFilterNetworkServices"
)

func (e *GETModifyTrafficMirrorFilterNetworkServicesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyTrafficMirrorFilterNetworkServices":
		*e = GETModifyTrafficMirrorFilterNetworkServicesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesActionEnum: %s", s)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnumAmazonDNS GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum = "amazon-dns"
)

func (e *GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "amazon-dns":
		*e = GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum: %s", s)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnumAmazonDNS GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum = "amazon-dns"
)

func (e *GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "amazon-dns":
		*e = GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum: %s", s)
	}
}

// GETModifyTrafficMirrorFilterNetworkServicesVersionEnum
type GETModifyTrafficMirrorFilterNetworkServicesVersionEnum string

const (
	GETModifyTrafficMirrorFilterNetworkServicesVersionEnumTwoThousandAndSixteen1115 GETModifyTrafficMirrorFilterNetworkServicesVersionEnum = "2016-11-15"
)

func (e *GETModifyTrafficMirrorFilterNetworkServicesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2016-11-15":
		*e = GETModifyTrafficMirrorFilterNetworkServicesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GETModifyTrafficMirrorFilterNetworkServicesVersionEnum: %s", s)
	}
}

type GETModifyTrafficMirrorFilterNetworkServicesQueryParams struct {
	Action GETModifyTrafficMirrorFilterNetworkServicesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The network service, for example Amazon DNS, that you want to mirror.
	AddNetworkService []GETModifyTrafficMirrorFilterNetworkServicesAddNetworkServiceEnum `queryParam:"style=form,explode=true,name=AddNetworkService"`
	// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
	DryRun *bool `queryParam:"style=form,explode=true,name=DryRun"`
	// The network service, for example Amazon DNS, that you no longer want to mirror.
	RemoveNetworkService []GETModifyTrafficMirrorFilterNetworkServicesRemoveNetworkServiceEnum `queryParam:"style=form,explode=true,name=RemoveNetworkService"`
	// The ID of the Traffic Mirror filter.
	TrafficMirrorFilterID string                                                 `queryParam:"style=form,explode=true,name=TrafficMirrorFilterId"`
	Version               GETModifyTrafficMirrorFilterNetworkServicesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type GETModifyTrafficMirrorFilterNetworkServicesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETModifyTrafficMirrorFilterNetworkServicesRequest struct {
	QueryParams GETModifyTrafficMirrorFilterNetworkServicesQueryParams
	Headers     GETModifyTrafficMirrorFilterNetworkServicesHeaders
}

type GETModifyTrafficMirrorFilterNetworkServicesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
