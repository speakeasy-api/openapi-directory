"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleAnalyticsAdminV1betaCustomMetricMeasurementUnitEnum(str, Enum):
    r"""Required. The type for the custom metric's value."""
    MEASUREMENT_UNIT_UNSPECIFIED = 'MEASUREMENT_UNIT_UNSPECIFIED'
    STANDARD = 'STANDARD'
    CURRENCY = 'CURRENCY'
    FEET = 'FEET'
    METERS = 'METERS'
    KILOMETERS = 'KILOMETERS'
    MILES = 'MILES'
    MILLISECONDS = 'MILLISECONDS'
    SECONDS = 'SECONDS'
    MINUTES = 'MINUTES'
    HOURS = 'HOURS'

class GoogleAnalyticsAdminV1betaCustomMetricRestrictedMetricTypeEnum(str, Enum):
    RESTRICTED_METRIC_TYPE_UNSPECIFIED = 'RESTRICTED_METRIC_TYPE_UNSPECIFIED'
    COST_DATA = 'COST_DATA'
    REVENUE_DATA = 'REVENUE_DATA'

class GoogleAnalyticsAdminV1betaCustomMetricScopeEnum(str, Enum):
    r"""Required. Immutable. The scope of this custom metric."""
    METRIC_SCOPE_UNSPECIFIED = 'METRIC_SCOPE_UNSPECIFIED'
    EVENT = 'EVENT'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1betaCustomMetric:
    r"""A definition for a custom metric."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description for this custom dimension. Max length of 150 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets."""  
    measurement_unit: Optional[GoogleAnalyticsAdminV1betaCustomMetricMeasurementUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit'), 'exclude': lambda f: f is None }})
    r"""Required. The type for the custom metric's value."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Output only. Resource name for this CustomMetric resource. Format: properties/{property}/customMetrics/{customMetric}"""  
    parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterName'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics."""  
    restricted_metric_type: Optional[list[GoogleAnalyticsAdminV1betaCustomMetricRestrictedMetricTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedMetricType'), 'exclude': lambda f: f is None }})
    r"""Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit."""  
    scope: Optional[GoogleAnalyticsAdminV1betaCustomMetricScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The scope of this custom metric."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1betaCustomMetricInput:
    r"""A definition for a custom metric."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Optional. Description for this custom dimension. Max length of 150 characters."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""Required. Display name for this custom metric as shown in the Analytics UI. Max length of 82 characters, alphanumeric plus space and underscore starting with a letter. Legacy system-generated display names may contain square brackets, but updates to this field will never permit square brackets."""  
    measurement_unit: Optional[GoogleAnalyticsAdminV1betaCustomMetricMeasurementUnitEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('measurementUnit'), 'exclude': lambda f: f is None }})
    r"""Required. The type for the custom metric's value."""  
    parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameterName'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. Tagging name for this custom metric. If this is an event-scoped metric, then this is the event parameter name. May only contain alphanumeric and underscore charactes, starting with a letter. Max length of 40 characters for event-scoped metrics."""  
    restricted_metric_type: Optional[list[GoogleAnalyticsAdminV1betaCustomMetricRestrictedMetricTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('restrictedMetricType'), 'exclude': lambda f: f is None }})
    r"""Optional. Types of restricted data that this metric may contain. Required for metrics with CURRENCY measurement unit. Must be empty for metrics with a non-CURRENCY measurement unit."""  
    scope: Optional[GoogleAnalyticsAdminV1betaCustomMetricScopeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The scope of this custom metric."""  
    