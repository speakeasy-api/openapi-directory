// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PostAutomationsRequestBodyAutomationEnum - Automation type
type PostAutomationsRequestBodyAutomationEnum string

const (
	PostAutomationsRequestBodyAutomationEnumCreateFolder   PostAutomationsRequestBodyAutomationEnum = "create_folder"
	PostAutomationsRequestBodyAutomationEnumRequestFile    PostAutomationsRequestBodyAutomationEnum = "request_file"
	PostAutomationsRequestBodyAutomationEnumRequestMove    PostAutomationsRequestBodyAutomationEnum = "request_move"
	PostAutomationsRequestBodyAutomationEnumCopyNewestFile PostAutomationsRequestBodyAutomationEnum = "copy_newest_file"
	PostAutomationsRequestBodyAutomationEnumDeleteFile     PostAutomationsRequestBodyAutomationEnum = "delete_file"
	PostAutomationsRequestBodyAutomationEnumCopyFile       PostAutomationsRequestBodyAutomationEnum = "copy_file"
	PostAutomationsRequestBodyAutomationEnumMoveFile       PostAutomationsRequestBodyAutomationEnum = "move_file"
	PostAutomationsRequestBodyAutomationEnumAs2Send        PostAutomationsRequestBodyAutomationEnum = "as2_send"
	PostAutomationsRequestBodyAutomationEnumRunSync        PostAutomationsRequestBodyAutomationEnum = "run_sync"
)

func (e *PostAutomationsRequestBodyAutomationEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "create_folder":
		fallthrough
	case "request_file":
		fallthrough
	case "request_move":
		fallthrough
	case "copy_newest_file":
		fallthrough
	case "delete_file":
		fallthrough
	case "copy_file":
		fallthrough
	case "move_file":
		fallthrough
	case "as2_send":
		fallthrough
	case "run_sync":
		*e = PostAutomationsRequestBodyAutomationEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAutomationsRequestBodyAutomationEnum: %s", s)
	}
}

// PostAutomationsRequestBodyTriggerEnum - How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
type PostAutomationsRequestBodyTriggerEnum string

const (
	PostAutomationsRequestBodyTriggerEnumRealtime       PostAutomationsRequestBodyTriggerEnum = "realtime"
	PostAutomationsRequestBodyTriggerEnumDaily          PostAutomationsRequestBodyTriggerEnum = "daily"
	PostAutomationsRequestBodyTriggerEnumCustomSchedule PostAutomationsRequestBodyTriggerEnum = "custom_schedule"
	PostAutomationsRequestBodyTriggerEnumWebhook        PostAutomationsRequestBodyTriggerEnum = "webhook"
	PostAutomationsRequestBodyTriggerEnumEmail          PostAutomationsRequestBodyTriggerEnum = "email"
	PostAutomationsRequestBodyTriggerEnumAction         PostAutomationsRequestBodyTriggerEnum = "action"
)

func (e *PostAutomationsRequestBodyTriggerEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "realtime":
		fallthrough
	case "daily":
		fallthrough
	case "custom_schedule":
		fallthrough
	case "webhook":
		fallthrough
	case "email":
		fallthrough
	case "action":
		*e = PostAutomationsRequestBodyTriggerEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PostAutomationsRequestBodyTriggerEnum: %s", s)
	}
}

type PostAutomationsRequestBody struct {
	// Automation type
	Automation PostAutomationsRequestBodyAutomationEnum `multipartForm:"name=automation"`
	// Description for the this Automation.
	Description *string `multipartForm:"name=description"`
	// DEPRECATED: Destination Path. Use `destinations` instead.
	Destination *string `multipartForm:"name=destination"`
	// If set, this string in the destination path will be replaced with the value in `destination_replace_to`.
	DestinationReplaceFrom *string `multipartForm:"name=destination_replace_from"`
	// If set, this string will replace the value `destination_replace_from` in the destination filename. You can use special patterns here.
	DestinationReplaceTo *string `multipartForm:"name=destination_replace_to"`
	// A list of String destination paths or Hash of folder_path and optional file_path.
	Destinations []string `multipartForm:"name=destinations"`
	// If true, this automation will not run.
	Disabled *bool `multipartForm:"name=disabled"`
	// A list of group IDs the automation is associated with. If sent as a string, it should be comma-delimited.
	GroupIds *string `multipartForm:"name=group_ids"`
	// How often to run this automation? One of: `day`, `week`, `week_end`, `month`, `month_end`, `quarter`, `quarter_end`, `year`, `year_end`
	Interval *string `multipartForm:"name=interval"`
	// Name for this automation.
	Name *string `multipartForm:"name=name"`
	// Path on which this Automation runs.  Supports globs.
	Path *string `multipartForm:"name=path"`
	// Custom schedule for running this automation.
	Schedule map[string]interface{} `multipartForm:"name=schedule,json"`
	// Source Path
	Source *string `multipartForm:"name=source"`
	// A list of sync IDs the automation is associated with. If sent as a string, it should be comma-delimited.
	SyncIds *string `multipartForm:"name=sync_ids"`
	// How this automation is triggered to run. One of: `realtime`, `daily`, `custom_schedule`, `webhook`, `email`, or `action`.
	Trigger *PostAutomationsRequestBodyTriggerEnum `multipartForm:"name=trigger"`
	// If trigger is `action`, this is the list of action types on which to trigger the automation. Valid actions are create, read, update, destroy, move, copy
	TriggerActions []string `multipartForm:"name=trigger_actions"`
	// A list of user IDs the automation is associated with. If sent as a string, it should be comma-delimited.
	UserIds *string `multipartForm:"name=user_ids"`
	// A Hash of attributes specific to the automation type.
	Value map[string]interface{} `multipartForm:"name=value,json"`
}

type PostAutomationsRequest struct {
	Request *PostAutomationsRequestBody `request:"mediaType=multipart/form-data"`
}

type PostAutomationsResponse struct {
	// The Automations object.
	AutomationEntity *shared.AutomationEntity
	ContentType      string
	StatusCode       int
	RawResponse      *http.Response
}
