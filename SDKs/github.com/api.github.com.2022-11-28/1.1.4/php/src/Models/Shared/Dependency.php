<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class Dependency
{
    /**
     * Array of package-url (PURLs) of direct child dependencies.
     * 
     * @var ?array<string> $dependencies
     */
	#[\JMS\Serializer\Annotation\SerializedName('dependencies')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $dependencies = null;
    
    /**
     * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
     * 
     * @var ?array<string, mixed> $metadata
     */
	#[\JMS\Serializer\Annotation\SerializedName('metadata')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $metadata = null;
    
    /**
     * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
     * 
     * @var ?string $packageUrl
     */
	#[\JMS\Serializer\Annotation\SerializedName('package_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $packageUrl = null;
    
    /**
     * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DependencyRelationshipEnum $relationship
     */
	#[\JMS\Serializer\Annotation\SerializedName('relationship')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DependencyRelationshipEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DependencyRelationshipEnum $relationship = null;
    
    /**
     * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\DependencyScopeEnum $scope
     */
	#[\JMS\Serializer\Annotation\SerializedName('scope')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\DependencyScopeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DependencyScopeEnum $scope = null;
    
	public function __construct()
	{
		$this->dependencies = null;
		$this->metadata = null;
		$this->packageUrl = null;
		$this->relationship = null;
		$this->scope = null;
	}
}
