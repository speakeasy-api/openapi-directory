"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Stories:
    r"""Retrieve and submit stories."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_stories(self, request: operations.GetStoriesRequest, security: operations.GetStoriesSecurity) -> operations.GetStoriesResponse:
        r"""List stories"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stories'
        
        query_params = utils.get_query_params(operations.GetStoriesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetStories200ApplicationJSON])
                res.get_stories_200_application_json_object = out
        elif http_res.status_code == 400:
            pass

        return res

    def get_story(self, request: operations.GetStoryRequest, security: operations.GetStorySecurity) -> operations.GetStoryResponse:
        r"""Retrieve a story"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetStoryRequest, base_url, '/stories/{story_id}', request)
        
        query_params = utils.get_query_params(operations.GetStoryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def like_story(self, request: operations.LikeStoryRequest) -> operations.LikeStoryResponse:
        r"""Like a story"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.LikeStoryRequest, base_url, '/stories/{story_id}/like', request)
        
        query_params = utils.get_query_params(operations.LikeStoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.LikeStoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code == 404:
            pass

        return res

    def submit_story(self, request: operations.SubmitStoryRequestBody) -> operations.SubmitStoryResponse:
        r"""Submit a story"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stories'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitStoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code == 400:
            pass

        return res

    def unlike_story(self, request: operations.UnlikeStoryRequest) -> operations.UnlikeStoryResponse:
        r"""Unlike a story"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UnlikeStoryRequest, base_url, '/stories/{story_id}/unlike', request)
        
        query_params = utils.get_query_params(operations.UnlikeStoryRequest, request)
        
        client = self._security_client
        
        http_res = client.request('PUT', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UnlikeStoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Story])
                res.story = out
        elif http_res.status_code == 404:
            pass

        return res

    def viewed_story(self, request: operations.ViewedStoryRequest, security: operations.ViewedStorySecurity) -> operations.ViewedStoryResponse:
        r"""Record story viewed
        Records every time a user views the full story (and not just a preview or snippet),
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ViewedStoryRequest, base_url, '/stories/{story_id}/viewed', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ViewedStoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    