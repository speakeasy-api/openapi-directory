<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * UsableSubnetwork - Subnetwork which the current user has compute.subnetworks.use permission on.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class UsableSubnetwork
{
    /**
     * [Output Only] The external IPv6 address range that is assigned to this subnetwork.
     * 
     * @var ?string $externalIpv6Prefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('externalIpv6Prefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $externalIpv6Prefix = null;
    
    /**
     * [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
     * 
     * @var ?string $internalIpv6Prefix
     */
	#[\JMS\Serializer\Annotation\SerializedName('internalIpv6Prefix')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $internalIpv6Prefix = null;
    
    /**
     * The range of internal addresses that are owned by this subnetwork.
     * 
     * @var ?string $ipCidrRange
     */
	#[\JMS\Serializer\Annotation\SerializedName('ipCidrRange')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $ipCidrRange = null;
    
    /**
     * The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkIpv6AccessTypeEnum $ipv6AccessType
     */
	#[\JMS\Serializer\Annotation\SerializedName('ipv6AccessType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkIpv6AccessTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UsableSubnetworkIpv6AccessTypeEnum $ipv6AccessType = null;
    
    /**
     * Network URL.
     * 
     * @var ?string $network
     */
	#[\JMS\Serializer\Annotation\SerializedName('network')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $network = null;
    
    /**
     * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkPurposeEnum $purpose
     */
	#[\JMS\Serializer\Annotation\SerializedName('purpose')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkPurposeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UsableSubnetworkPurposeEnum $purpose = null;
    
    /**
     * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkRoleEnum $role
     */
	#[\JMS\Serializer\Annotation\SerializedName('role')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkRoleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UsableSubnetworkRoleEnum $role = null;
    
    /**
     * Secondary IP ranges.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkSecondaryRange> $secondaryIpRanges
     */
	#[\JMS\Serializer\Annotation\SerializedName('secondaryIpRanges')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkSecondaryRange>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $secondaryIpRanges = null;
    
    /**
     * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkStackTypeEnum $stackType
     */
	#[\JMS\Serializer\Annotation\SerializedName('stackType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\UsableSubnetworkStackTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?UsableSubnetworkStackTypeEnum $stackType = null;
    
    /**
     * Subnetwork URL.
     * 
     * @var ?string $subnetwork
     */
	#[\JMS\Serializer\Annotation\SerializedName('subnetwork')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $subnetwork = null;
    
	public function __construct()
	{
		$this->externalIpv6Prefix = null;
		$this->internalIpv6Prefix = null;
		$this->ipCidrRange = null;
		$this->ipv6AccessType = null;
		$this->network = null;
		$this->purpose = null;
		$this->role = null;
		$this->secondaryIpRanges = null;
		$this->stackType = null;
		$this->subnetwork = null;
	}
}
