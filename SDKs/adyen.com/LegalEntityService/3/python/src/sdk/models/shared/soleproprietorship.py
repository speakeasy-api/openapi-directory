"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import address as shared_address
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SoleProprietorshipVatAbsenceReasonEnum(str, Enum):
    r"""The reason for not providing a VAT number.
    
    Possible values: **industryExemption**, **belowTaxThreshold**.
    """
    INDUSTRY_EXEMPTION = 'industryExemption'
    BELOW_TAX_THRESHOLD = 'belowTaxThreshold'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SoleProprietorship:
    
    country_of_governing_law: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('countryOfGoverningLaw') }})
    r"""The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The legal name."""  
    registered_address: shared_address.Address = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registeredAddress') }})  
    date_of_incorporation: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dateOfIncorporation'), 'exclude': lambda f: f is None }})
    r"""The date when the legal arrangement was incorporated in YYYY-MM-DD format."""  
    doing_business_as: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('doingBusinessAs'), 'exclude': lambda f: f is None }})
    r"""The registered name, if different from the `name`."""  
    principal_place_of_business: Optional[shared_address.Address] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('principalPlaceOfBusiness'), 'exclude': lambda f: f is None }})  
    registration_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('registrationNumber'), 'exclude': lambda f: f is None }})
    r"""The registration number."""  
    vat_absence_reason: Optional[SoleProprietorshipVatAbsenceReasonEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vatAbsenceReason'), 'exclude': lambda f: f is None }})
    r"""The reason for not providing a VAT number.
    
    Possible values: **industryExemption**, **belowTaxThreshold**.
    """  
    vat_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vatNumber'), 'exclude': lambda f: f is None }})
    r"""The VAT number."""  
    