// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ReportFailureErrorCodeEnum - Error code that shows why the report was not created.
type ReportFailureErrorCodeEnum string

const (
	ReportFailureErrorCodeEnumAuthenticationError                                     ReportFailureErrorCodeEnum = "AUTHENTICATION_ERROR"
	ReportFailureErrorCodeEnumUnauthorizedAPIAccess                                   ReportFailureErrorCodeEnum = "UNAUTHORIZED_API_ACCESS"
	ReportFailureErrorCodeEnumServerError                                             ReportFailureErrorCodeEnum = "SERVER_ERROR"
	ReportFailureErrorCodeEnumValidationError                                         ReportFailureErrorCodeEnum = "VALIDATION_ERROR"
	ReportFailureErrorCodeEnumReportingFatalError                                     ReportFailureErrorCodeEnum = "REPORTING_FATAL_ERROR"
	ReportFailureErrorCodeEnumReportingTransientError                                 ReportFailureErrorCodeEnum = "REPORTING_TRANSIENT_ERROR"
	ReportFailureErrorCodeEnumReportingImcompatibleMetrics                            ReportFailureErrorCodeEnum = "REPORTING_IMCOMPATIBLE_METRICS"
	ReportFailureErrorCodeEnumReportingIllegalFilename                                ReportFailureErrorCodeEnum = "REPORTING_ILLEGAL_FILENAME"
	ReportFailureErrorCodeEnumReportingQueryNotFound                                  ReportFailureErrorCodeEnum = "REPORTING_QUERY_NOT_FOUND"
	ReportFailureErrorCodeEnumReportingBucketNotFound                                 ReportFailureErrorCodeEnum = "REPORTING_BUCKET_NOT_FOUND"
	ReportFailureErrorCodeEnumReportingCreateBucketFailed                             ReportFailureErrorCodeEnum = "REPORTING_CREATE_BUCKET_FAILED"
	ReportFailureErrorCodeEnumReportingDeleteBucketFailed                             ReportFailureErrorCodeEnum = "REPORTING_DELETE_BUCKET_FAILED"
	ReportFailureErrorCodeEnumReportingUpdateBucketPermissionFailed                   ReportFailureErrorCodeEnum = "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED"
	ReportFailureErrorCodeEnumReportingWriteBucketObjectFailed                        ReportFailureErrorCodeEnum = "REPORTING_WRITE_BUCKET_OBJECT_FAILED"
	ReportFailureErrorCodeEnumDeprecatedReportingInvalidQuery                         ReportFailureErrorCodeEnum = "DEPRECATED_REPORTING_INVALID_QUERY"
	ReportFailureErrorCodeEnumReportingInvalidQueryTooManyUnfilteredLargeGroupBys     ReportFailureErrorCodeEnum = "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS"
	ReportFailureErrorCodeEnumReportingInvalidQueryTitleMissing                       ReportFailureErrorCodeEnum = "REPORTING_INVALID_QUERY_TITLE_MISSING"
	ReportFailureErrorCodeEnumReportingInvalidQueryMissingPartnerAndAdvertiserFilters ReportFailureErrorCodeEnum = "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS"
)

func (e ReportFailureErrorCodeEnum) ToPointer() *ReportFailureErrorCodeEnum {
	return &e
}

func (e *ReportFailureErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AUTHENTICATION_ERROR":
		fallthrough
	case "UNAUTHORIZED_API_ACCESS":
		fallthrough
	case "SERVER_ERROR":
		fallthrough
	case "VALIDATION_ERROR":
		fallthrough
	case "REPORTING_FATAL_ERROR":
		fallthrough
	case "REPORTING_TRANSIENT_ERROR":
		fallthrough
	case "REPORTING_IMCOMPATIBLE_METRICS":
		fallthrough
	case "REPORTING_ILLEGAL_FILENAME":
		fallthrough
	case "REPORTING_QUERY_NOT_FOUND":
		fallthrough
	case "REPORTING_BUCKET_NOT_FOUND":
		fallthrough
	case "REPORTING_CREATE_BUCKET_FAILED":
		fallthrough
	case "REPORTING_DELETE_BUCKET_FAILED":
		fallthrough
	case "REPORTING_UPDATE_BUCKET_PERMISSION_FAILED":
		fallthrough
	case "REPORTING_WRITE_BUCKET_OBJECT_FAILED":
		fallthrough
	case "DEPRECATED_REPORTING_INVALID_QUERY":
		fallthrough
	case "REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS":
		fallthrough
	case "REPORTING_INVALID_QUERY_TITLE_MISSING":
		fallthrough
	case "REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS":
		*e = ReportFailureErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReportFailureErrorCodeEnum: %v", v)
	}
}

// ReportFailure - An explanation of a report failure.
type ReportFailure struct {
	// Error code that shows why the report was not created.
	ErrorCode *ReportFailureErrorCodeEnum `json:"errorCode,omitempty"`
}
