// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SheetsSpreadsheetsValuesAppendSecurityOption1 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type SheetsSpreadsheetsValuesAppendSecurityOption2 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type SheetsSpreadsheetsValuesAppendSecurityOption3 struct {
	Oauth2  shared.SchemeOauth2  `security:"scheme,type=oauth2"`
	Oauth2c shared.SchemeOauth2c `security:"scheme,type=oauth2"`
}

type SheetsSpreadsheetsValuesAppendSecurity struct {
	Option1 *SheetsSpreadsheetsValuesAppendSecurityOption1 `security:"option"`
	Option2 *SheetsSpreadsheetsValuesAppendSecurityOption2 `security:"option"`
	Option3 *SheetsSpreadsheetsValuesAppendSecurityOption3 `security:"option"`
}

type SheetsSpreadsheetsValuesAppendPathParams struct {
	// The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.
	Range string `pathParam:"style=simple,explode=false,name=range"`
	// The ID of the spreadsheet to update.
	SpreadsheetID string `pathParam:"style=simple,explode=false,name=spreadsheetId"`
}

// SheetsSpreadsheetsValuesAppendInsertDataOptionEnum - How the input data should be inserted.
type SheetsSpreadsheetsValuesAppendInsertDataOptionEnum string

const (
	SheetsSpreadsheetsValuesAppendInsertDataOptionEnumOverwrite  SheetsSpreadsheetsValuesAppendInsertDataOptionEnum = "OVERWRITE"
	SheetsSpreadsheetsValuesAppendInsertDataOptionEnumInsertRows SheetsSpreadsheetsValuesAppendInsertDataOptionEnum = "INSERT_ROWS"
)

func (e *SheetsSpreadsheetsValuesAppendInsertDataOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "OVERWRITE":
		fallthrough
	case "INSERT_ROWS":
		*e = SheetsSpreadsheetsValuesAppendInsertDataOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesAppendInsertDataOptionEnum: %s", s)
	}
}

// SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum - Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
type SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum string

const (
	SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnumSerialNumber    SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum = "SERIAL_NUMBER"
	SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnumFormattedString SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum = "FORMATTED_STRING"
)

func (e *SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "SERIAL_NUMBER":
		fallthrough
	case "FORMATTED_STRING":
		*e = SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum: %s", s)
	}
}

// SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum - Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
type SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum string

const (
	SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnumFormattedValue   SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum = "FORMATTED_VALUE"
	SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnumUnformattedValue SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum = "UNFORMATTED_VALUE"
	SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnumFormula          SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum = "FORMULA"
)

func (e *SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "FORMATTED_VALUE":
		fallthrough
	case "UNFORMATTED_VALUE":
		fallthrough
	case "FORMULA":
		*e = SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum: %s", s)
	}
}

// SheetsSpreadsheetsValuesAppendValueInputOptionEnum - How the input data should be interpreted.
type SheetsSpreadsheetsValuesAppendValueInputOptionEnum string

const (
	SheetsSpreadsheetsValuesAppendValueInputOptionEnumInputValueOptionUnspecified SheetsSpreadsheetsValuesAppendValueInputOptionEnum = "INPUT_VALUE_OPTION_UNSPECIFIED"
	SheetsSpreadsheetsValuesAppendValueInputOptionEnumRaw                         SheetsSpreadsheetsValuesAppendValueInputOptionEnum = "RAW"
	SheetsSpreadsheetsValuesAppendValueInputOptionEnumUserEntered                 SheetsSpreadsheetsValuesAppendValueInputOptionEnum = "USER_ENTERED"
)

func (e *SheetsSpreadsheetsValuesAppendValueInputOptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "INPUT_VALUE_OPTION_UNSPECIFIED":
		fallthrough
	case "RAW":
		fallthrough
	case "USER_ENTERED":
		*e = SheetsSpreadsheetsValuesAppendValueInputOptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SheetsSpreadsheetsValuesAppendValueInputOptionEnum: %s", s)
	}
}

type SheetsSpreadsheetsValuesAppendQueryParams struct {
	// V1 error format.
	DollarXgafv *shared.XgafvEnum `queryParam:"style=form,explode=true,name=$.xgafv"`
	// OAuth access token.
	AccessToken *string `queryParam:"style=form,explode=true,name=access_token"`
	// Data format for response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// JSONP
	Callback *string `queryParam:"style=form,explode=true,name=callback"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.
	IncludeValuesInResponse *bool `queryParam:"style=form,explode=true,name=includeValuesInResponse"`
	// How the input data should be inserted.
	InsertDataOption *SheetsSpreadsheetsValuesAppendInsertDataOptionEnum `queryParam:"style=form,explode=true,name=insertDataOption"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
	ResponseDateTimeRenderOption *SheetsSpreadsheetsValuesAppendResponseDateTimeRenderOptionEnum `queryParam:"style=form,explode=true,name=responseDateTimeRenderOption"`
	// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
	ResponseValueRenderOption *SheetsSpreadsheetsValuesAppendResponseValueRenderOptionEnum `queryParam:"style=form,explode=true,name=responseValueRenderOption"`
	// Legacy upload protocol for media (e.g. "media", "multipart").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Upload protocol for media (e.g. "raw", "multipart").
	UploadProtocol *string `queryParam:"style=form,explode=true,name=upload_protocol"`
	// How the input data should be interpreted.
	ValueInputOption *SheetsSpreadsheetsValuesAppendValueInputOptionEnum `queryParam:"style=form,explode=true,name=valueInputOption"`
}

type SheetsSpreadsheetsValuesAppendRequest struct {
	PathParams  SheetsSpreadsheetsValuesAppendPathParams
	QueryParams SheetsSpreadsheetsValuesAppendQueryParams
	Request     *shared.ValueRange `request:"mediaType=application/json"`
	Security    SheetsSpreadsheetsValuesAppendSecurity
}

type SheetsSpreadsheetsValuesAppendResponse struct {
	// Successful response
	AppendValuesResponse *shared.AppendValuesResponse
	ContentType          string
	StatusCode           int
	RawResponse          *http.Response
}
