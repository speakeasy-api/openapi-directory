// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type StoreReleasesGetLatestSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type StoreReleasesGetLatestRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
	// The name of the store
	StoreName string `pathParam:"style=simple,explode=false,name=store_name"`
}

type StoreReleasesGetLatestDefaultApplicationJSONCodeEnum string

const (
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumBadRequest          StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "BadRequest"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumConflict            StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "Conflict"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumNotAcceptable       StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "NotAcceptable"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumNotFound            StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "NotFound"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumInternalServerError StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "InternalServerError"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumUnauthorized        StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "Unauthorized"
	StoreReleasesGetLatestDefaultApplicationJSONCodeEnumTooManyRequests     StoreReleasesGetLatestDefaultApplicationJSONCodeEnum = "TooManyRequests"
)

func (e *StoreReleasesGetLatestDefaultApplicationJSONCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = StoreReleasesGetLatestDefaultApplicationJSONCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetLatestDefaultApplicationJSONCodeEnum: %s", s)
	}
}

// StoreReleasesGetLatestDefaultApplicationJSON - Error
type StoreReleasesGetLatestDefaultApplicationJSON struct {
	Code    StoreReleasesGetLatestDefaultApplicationJSONCodeEnum `json:"code"`
	Message string                                               `json:"message"`
}

// StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum - type of the distribution store currently stores type can be intune or googleplay.
type StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum string

const (
	StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnumIntune     StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum = "intune"
	StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnumGoogleplay StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum = "googleplay"
)

func (e *StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "intune":
		fallthrough
	case "googleplay":
		*e = StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum: %s", s)
	}
}

type StoreReleasesGetLatest200ApplicationJSONDistributionStores struct {
	// ID identifying a unique distribution store.
	ID *string `json:"id,omitempty"`
	// A name identifying a unique distribution store.
	Name *string `json:"name,omitempty"`
	// publishing status of the release in the store.
	PublishingStatus *string `json:"publishing_status,omitempty"`
	// type of the distribution store currently stores type can be intune or googleplay.
	Type *StoreReleasesGetLatest200ApplicationJSONDistributionStoresTypeEnum `json:"type,omitempty"`
}

// StoreReleasesGetLatest200ApplicationJSONInstallURLEnum - The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
type StoreReleasesGetLatest200ApplicationJSONInstallURLEnum string

const (
	StoreReleasesGetLatest200ApplicationJSONInstallURLEnumGroup StoreReleasesGetLatest200ApplicationJSONInstallURLEnum = "group"
	StoreReleasesGetLatest200ApplicationJSONInstallURLEnumStore StoreReleasesGetLatest200ApplicationJSONInstallURLEnum = "store"
)

func (e *StoreReleasesGetLatest200ApplicationJSONInstallURLEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "group":
		fallthrough
	case "store":
		*e = StoreReleasesGetLatest200ApplicationJSONInstallURLEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetLatest200ApplicationJSONInstallURLEnum: %s", s)
	}
}

// StoreReleasesGetLatest200ApplicationJSONStatusEnum - OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
// The release state.<br>
// <b>available</b>: The uploaded release has been distributed.<br>
// <b>unavailable</b>: The uploaded release is not visible to the user. <br>
type StoreReleasesGetLatest200ApplicationJSONStatusEnum string

const (
	StoreReleasesGetLatest200ApplicationJSONStatusEnumAvailable   StoreReleasesGetLatest200ApplicationJSONStatusEnum = "available"
	StoreReleasesGetLatest200ApplicationJSONStatusEnumUnavailable StoreReleasesGetLatest200ApplicationJSONStatusEnum = "unavailable"
)

func (e *StoreReleasesGetLatest200ApplicationJSONStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available":
		fallthrough
	case "unavailable":
		*e = StoreReleasesGetLatest200ApplicationJSONStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreReleasesGetLatest200ApplicationJSONStatusEnum: %s", s)
	}
}

// StoreReleasesGetLatest200ApplicationJSON - Details of an uploaded release
type StoreReleasesGetLatest200ApplicationJSON struct {
	// The release's minimum required Android API level.
	AndroidMinAPILevel *string `json:"android_min_api_level,omitempty"`
	// The app's display name.
	AppDisplayName *string `json:"app_display_name,omitempty"`
	// The app's name (extracted from the uploaded release).
	AppName *string `json:"app_name,omitempty"`
	// The identifier of the apps bundle.
	BundleIdentifier *string `json:"bundle_identifier,omitempty"`
	// a list of distribution stores that are associated with this release.
	DistributionStores []StoreReleasesGetLatest200ApplicationJSONDistributionStores `json:"distribution_stores,omitempty"`
	// The URL that hosts the binary for this release.
	DownloadURL *string `json:"download_url,omitempty"`
	// MD5 checksum of the release binary.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// ID identifying this unique release.
	ID *float64 `json:"id,omitempty"`
	// The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
	InstallURL *StoreReleasesGetLatest200ApplicationJSONInstallURLEnum `json:"install_url,omitempty"`
	// The release's minimum required operating system.
	MinOs *string `json:"min_os,omitempty"`
	// The release's release notes.
	ReleaseNotes *string `json:"release_notes,omitempty"`
	// The release's short version.<br>
	// For iOS: CFBundleShortVersionString from info.plist.
	// For Android: android:versionName from AppManifest.xml.
	//
	ShortVersion *string `json:"short_version,omitempty"`
	// The release's size in bytes.
	Size *float64 `json:"size,omitempty"`
	// OBSOLETE. Will be removed in next version. The availability concept is now replaced with distributed. Any 'available' release will be associated with the default distribution group of an app.</br>
	// The release state.<br>
	// <b>available</b>: The uploaded release has been distributed.<br>
	// <b>unavailable</b>: The uploaded release is not visible to the user. <br>
	//
	Status *StoreReleasesGetLatest200ApplicationJSONStatusEnum `json:"status,omitempty"`
	// UTC time in ISO 8601 format of the uploaded time.
	UploadedAt *string `json:"uploaded_at,omitempty"`
	// The release's version.<br>
	// For iOS: CFBundleVersion from info.plist.
	// For Android: android:versionCode from AppManifest.xml.
	//
	Version *string `json:"version,omitempty"`
}

type StoreReleasesGetLatestResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	StoreReleasesGetLatest200ApplicationJSONObjects []StoreReleasesGetLatest200ApplicationJSON
	// Error
	StoreReleasesGetLatestDefaultApplicationJSONObject *StoreReleasesGetLatestDefaultApplicationJSON
}
