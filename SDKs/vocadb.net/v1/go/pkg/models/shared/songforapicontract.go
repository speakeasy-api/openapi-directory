// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type SongForAPIContractDefaultNameLanguageEnum string

const (
	SongForAPIContractDefaultNameLanguageEnumUnspecified SongForAPIContractDefaultNameLanguageEnum = "Unspecified"
	SongForAPIContractDefaultNameLanguageEnumJapanese    SongForAPIContractDefaultNameLanguageEnum = "Japanese"
	SongForAPIContractDefaultNameLanguageEnumRomaji      SongForAPIContractDefaultNameLanguageEnum = "Romaji"
	SongForAPIContractDefaultNameLanguageEnumEnglish     SongForAPIContractDefaultNameLanguageEnum = "English"
)

func (e *SongForAPIContractDefaultNameLanguageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "Japanese":
		fallthrough
	case "Romaji":
		fallthrough
	case "English":
		*e = SongForAPIContractDefaultNameLanguageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongForAPIContractDefaultNameLanguageEnum: %s", s)
	}
}

type SongForAPIContractPvServicesEnum string

const (
	SongForAPIContractPvServicesEnumNothing       SongForAPIContractPvServicesEnum = "Nothing"
	SongForAPIContractPvServicesEnumNicoNicoDouga SongForAPIContractPvServicesEnum = "NicoNicoDouga"
	SongForAPIContractPvServicesEnumYoutube       SongForAPIContractPvServicesEnum = "Youtube"
	SongForAPIContractPvServicesEnumSoundCloud    SongForAPIContractPvServicesEnum = "SoundCloud"
	SongForAPIContractPvServicesEnumVimeo         SongForAPIContractPvServicesEnum = "Vimeo"
	SongForAPIContractPvServicesEnumPiapro        SongForAPIContractPvServicesEnum = "Piapro"
	SongForAPIContractPvServicesEnumBilibili      SongForAPIContractPvServicesEnum = "Bilibili"
	SongForAPIContractPvServicesEnumFile          SongForAPIContractPvServicesEnum = "File"
	SongForAPIContractPvServicesEnumLocalFile     SongForAPIContractPvServicesEnum = "LocalFile"
	SongForAPIContractPvServicesEnumCreofuga      SongForAPIContractPvServicesEnum = "Creofuga"
	SongForAPIContractPvServicesEnumBandcamp      SongForAPIContractPvServicesEnum = "Bandcamp"
)

func (e *SongForAPIContractPvServicesEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Nothing":
		fallthrough
	case "NicoNicoDouga":
		fallthrough
	case "Youtube":
		fallthrough
	case "SoundCloud":
		fallthrough
	case "Vimeo":
		fallthrough
	case "Piapro":
		fallthrough
	case "Bilibili":
		fallthrough
	case "File":
		fallthrough
	case "LocalFile":
		fallthrough
	case "Creofuga":
		fallthrough
	case "Bandcamp":
		*e = SongForAPIContractPvServicesEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongForAPIContractPvServicesEnum: %s", s)
	}
}

type SongForAPIContractSongTypeEnum string

const (
	SongForAPIContractSongTypeEnumUnspecified  SongForAPIContractSongTypeEnum = "Unspecified"
	SongForAPIContractSongTypeEnumOriginal     SongForAPIContractSongTypeEnum = "Original"
	SongForAPIContractSongTypeEnumRemaster     SongForAPIContractSongTypeEnum = "Remaster"
	SongForAPIContractSongTypeEnumRemix        SongForAPIContractSongTypeEnum = "Remix"
	SongForAPIContractSongTypeEnumCover        SongForAPIContractSongTypeEnum = "Cover"
	SongForAPIContractSongTypeEnumArrangement  SongForAPIContractSongTypeEnum = "Arrangement"
	SongForAPIContractSongTypeEnumInstrumental SongForAPIContractSongTypeEnum = "Instrumental"
	SongForAPIContractSongTypeEnumMashup       SongForAPIContractSongTypeEnum = "Mashup"
	SongForAPIContractSongTypeEnumMusicPv      SongForAPIContractSongTypeEnum = "MusicPV"
	SongForAPIContractSongTypeEnumDramaPv      SongForAPIContractSongTypeEnum = "DramaPV"
	SongForAPIContractSongTypeEnumLive         SongForAPIContractSongTypeEnum = "Live"
	SongForAPIContractSongTypeEnumIllustration SongForAPIContractSongTypeEnum = "Illustration"
	SongForAPIContractSongTypeEnumOther        SongForAPIContractSongTypeEnum = "Other"
)

func (e *SongForAPIContractSongTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Unspecified":
		fallthrough
	case "Original":
		fallthrough
	case "Remaster":
		fallthrough
	case "Remix":
		fallthrough
	case "Cover":
		fallthrough
	case "Arrangement":
		fallthrough
	case "Instrumental":
		fallthrough
	case "Mashup":
		fallthrough
	case "MusicPV":
		fallthrough
	case "DramaPV":
		fallthrough
	case "Live":
		fallthrough
	case "Illustration":
		fallthrough
	case "Other":
		*e = SongForAPIContractSongTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongForAPIContractSongTypeEnum: %s", s)
	}
}

type SongForAPIContractStatusEnum string

const (
	SongForAPIContractStatusEnumDraft    SongForAPIContractStatusEnum = "Draft"
	SongForAPIContractStatusEnumFinished SongForAPIContractStatusEnum = "Finished"
	SongForAPIContractStatusEnumApproved SongForAPIContractStatusEnum = "Approved"
	SongForAPIContractStatusEnumLocked   SongForAPIContractStatusEnum = "Locked"
)

func (e *SongForAPIContractStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Draft":
		fallthrough
	case "Finished":
		fallthrough
	case "Approved":
		fallthrough
	case "Locked":
		*e = SongForAPIContractStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SongForAPIContractStatusEnum: %s", s)
	}
}

// SongForAPIContract - OK
type SongForAPIContract struct {
	AdditionalNames     *string                                    `json:"additionalNames,omitempty"`
	Albums              []AlbumContract                            `json:"albums,omitempty"`
	ArtistString        *string                                    `json:"artistString,omitempty"`
	Artists             []ArtistForSongContract                    `json:"artists,omitempty"`
	CreateDate          *time.Time                                 `json:"createDate,omitempty"`
	DefaultName         *string                                    `json:"defaultName,omitempty"`
	DefaultNameLanguage *SongForAPIContractDefaultNameLanguageEnum `json:"defaultNameLanguage,omitempty"`
	Deleted             *bool                                      `json:"deleted,omitempty"`
	FavoritedTimes      *int                                       `json:"favoritedTimes,omitempty"`
	ID                  *int                                       `json:"id,omitempty"`
	LengthSeconds       *int                                       `json:"lengthSeconds,omitempty"`
	Lyrics              []LyricsForSongContract                    `json:"lyrics,omitempty"`
	MainPicture         *EntryThumbForAPIContract                  `json:"mainPicture,omitempty"`
	MergedTo            *int                                       `json:"mergedTo,omitempty"`
	Name                *string                                    `json:"name,omitempty"`
	Names               []LocalizedStringContract                  `json:"names,omitempty"`
	OriginalVersionID   *int                                       `json:"originalVersionId,omitempty"`
	PublishDate         *time.Time                                 `json:"publishDate,omitempty"`
	PvServices          *SongForAPIContractPvServicesEnum          `json:"pvServices,omitempty"`
	Pvs                 []PVContract                               `json:"pvs,omitempty"`
	RatingScore         *int                                       `json:"ratingScore,omitempty"`
	ReleaseEvent        *ReleaseEventForAPIContract                `json:"releaseEvent,omitempty"`
	SongType            *SongForAPIContractSongTypeEnum            `json:"songType,omitempty"`
	Status              *SongForAPIContractStatusEnum              `json:"status,omitempty"`
	Tags                []TagUsageForAPIContract                   `json:"tags,omitempty"`
	ThumbURL            *string                                    `json:"thumbUrl,omitempty"`
	Version             *int                                       `json:"version,omitempty"`
	WebLinks            []WebLinkForAPIContract                    `json:"webLinks,omitempty"`
}

type SongForAPIContractInput struct {
	AdditionalNames     *string                                    `json:"additionalNames,omitempty"`
	Albums              []AlbumContractInput                       `json:"albums,omitempty"`
	ArtistString        *string                                    `json:"artistString,omitempty"`
	Artists             []ArtistForSongContract                    `json:"artists,omitempty"`
	CreateDate          *time.Time                                 `json:"createDate,omitempty"`
	DefaultName         *string                                    `json:"defaultName,omitempty"`
	DefaultNameLanguage *SongForAPIContractDefaultNameLanguageEnum `json:"defaultNameLanguage,omitempty"`
	Deleted             *bool                                      `json:"deleted,omitempty"`
	FavoritedTimes      *int                                       `json:"favoritedTimes,omitempty"`
	ID                  *int                                       `json:"id,omitempty"`
	LengthSeconds       *int                                       `json:"lengthSeconds,omitempty"`
	Lyrics              []LyricsForSongContract                    `json:"lyrics,omitempty"`
	MainPicture         *EntryThumbForAPIContract                  `json:"mainPicture,omitempty"`
	MergedTo            *int                                       `json:"mergedTo,omitempty"`
	Name                *string                                    `json:"name,omitempty"`
	Names               []LocalizedStringContract                  `json:"names,omitempty"`
	OriginalVersionID   *int                                       `json:"originalVersionId,omitempty"`
	PublishDate         *time.Time                                 `json:"publishDate,omitempty"`
	PvServices          *SongForAPIContractPvServicesEnum          `json:"pvServices,omitempty"`
	Pvs                 []PVContract                               `json:"pvs,omitempty"`
	RatingScore         *int                                       `json:"ratingScore,omitempty"`
	ReleaseEvent        *ReleaseEventForAPIContractInput           `json:"releaseEvent,omitempty"`
	SongType            *SongForAPIContractSongTypeEnum            `json:"songType,omitempty"`
	Status              *SongForAPIContractStatusEnum              `json:"status,omitempty"`
	Tags                []TagUsageForAPIContract                   `json:"tags,omitempty"`
	ThumbURL            *string                                    `json:"thumbUrl,omitempty"`
	Version             *int                                       `json:"version,omitempty"`
	WebLinks            []WebLinkForAPIContract                    `json:"webLinks,omitempty"`
}
