// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutRepositoryTriggersXAmzTargetEnum
type PutRepositoryTriggersXAmzTargetEnum string

const (
	PutRepositoryTriggersXAmzTargetEnumCodeCommit20150413PutRepositoryTriggers PutRepositoryTriggersXAmzTargetEnum = "CodeCommit_20150413.PutRepositoryTriggers"
)

func (e *PutRepositoryTriggersXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeCommit_20150413.PutRepositoryTriggers":
		*e = PutRepositoryTriggersXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PutRepositoryTriggersXAmzTargetEnum: %s", s)
	}
}

type PutRepositoryTriggersRequest struct {
	PutRepositoryTriggersInput shared.PutRepositoryTriggersInput   `request:"mediaType=application/json"`
	XAmzAlgorithm              *string                             `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256          *string                             `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential             *string                             `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                   *string                             `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken          *string                             `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature              *string                             `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders          *string                             `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                 PutRepositoryTriggersXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutRepositoryTriggersResponse struct {
	ContentType string
	// EncryptionIntegrityChecksFailedException
	EncryptionIntegrityChecksFailedException interface{}
	// EncryptionKeyAccessDeniedException
	EncryptionKeyAccessDeniedException interface{}
	// EncryptionKeyDisabledException
	EncryptionKeyDisabledException interface{}
	// EncryptionKeyNotFoundException
	EncryptionKeyNotFoundException interface{}
	// EncryptionKeyUnavailableException
	EncryptionKeyUnavailableException interface{}
	// InvalidRepositoryNameException
	InvalidRepositoryNameException interface{}
	// InvalidRepositoryTriggerBranchNameException
	InvalidRepositoryTriggerBranchNameException interface{}
	// InvalidRepositoryTriggerCustomDataException
	InvalidRepositoryTriggerCustomDataException interface{}
	// InvalidRepositoryTriggerDestinationArnException
	InvalidRepositoryTriggerDestinationArnException interface{}
	// InvalidRepositoryTriggerEventsException
	InvalidRepositoryTriggerEventsException interface{}
	// InvalidRepositoryTriggerNameException
	InvalidRepositoryTriggerNameException interface{}
	// InvalidRepositoryTriggerRegionException
	InvalidRepositoryTriggerRegionException interface{}
	// MaximumBranchesExceededException
	MaximumBranchesExceededException interface{}
	// MaximumRepositoryTriggersExceededException
	MaximumRepositoryTriggersExceededException interface{}
	// Success
	PutRepositoryTriggersOutput *shared.PutRepositoryTriggersOutput
	// RepositoryDoesNotExistException
	RepositoryDoesNotExistException interface{}
	// RepositoryTriggerBranchNameListRequiredException
	RepositoryTriggerBranchNameListRequiredException interface{}
	// RepositoryTriggerDestinationArnRequiredException
	RepositoryTriggerDestinationArnRequiredException interface{}
	// RepositoryTriggerEventsListRequiredException
	RepositoryTriggerEventsListRequiredException interface{}
	// RepositoryTriggerNameRequiredException
	RepositoryTriggerNameRequiredException interface{}
	StatusCode                             int
	RawResponse                            *http.Response
	// RepositoryNameRequiredException
	RepositoryNameRequiredException interface{}
	// RepositoryTriggersListRequiredException
	RepositoryTriggersListRequiredException interface{}
}
