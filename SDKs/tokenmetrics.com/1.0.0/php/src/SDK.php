<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class SDK
{
	public const SERVERS = [
		'https://api.tokenmetrics.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * Correlation
     * 
     * Correlation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CorrelationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CorrelationResponse
     */
	public function correlation(
        \OpenAPI\OpenAPI\Models\Operations\CorrelationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CorrelationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/correlation');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CorrelationRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CorrelationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Indices
     * 
     * Indices
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IndicesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IndicesResponse
     */
	public function indices(
        \OpenAPI\OpenAPI\Models\Operations\IndicesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IndicesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/indices');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\IndicesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IndicesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Investor Grades
     * 
     * Investor Grades
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InvestorGradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InvestorGradesResponse
     */
	public function investorGrades(
        \OpenAPI\OpenAPI\Models\Operations\InvestorGradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InvestorGradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/investor-grades');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\InvestorGradesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InvestorGradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Market Indicator
     * 
     * Market Indicator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\MarketIndicatorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\MarketIndicatorResponse
     */
	public function marketIndicator(
        \OpenAPI\OpenAPI\Models\Operations\MarketIndicatorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\MarketIndicatorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/market-indicator');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\MarketIndicatorRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\MarketIndicatorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Price
     * 
     * Price
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PriceRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PriceResponse
     */
	public function price(
        \OpenAPI\OpenAPI\Models\Operations\PriceRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PriceResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/price');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PriceRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PriceResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Price Prediction
     * 
     * Price Prediction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PricePredictionRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PricePredictionResponse
     */
	public function pricePrediction(
        \OpenAPI\OpenAPI\Models\Operations\PricePredictionRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PricePredictionResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/price-prediction');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PricePredictionRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PricePredictionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Quantmetrics Tier 1
     * 
     * Quantmetrics Tier 1
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Response
     */
	public function quantmetricsTier1(
        \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quantmetrics-tier-1');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Quantmetrics Tier 2
     * 
     * Quantmetrics Tier 2
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Response
     */
	public function quantmetricsTier2(
        \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/quantmetrics-tier-2');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Request::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\QuantmetricsTier2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Resistance & Support
     * 
     * Resistance & Support
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ResistanceSupportRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ResistanceSupportResponse
     */
	public function resistanceSupport(
        \OpenAPI\OpenAPI\Models\Operations\ResistanceSupportRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ResistanceSupportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/resistance-support');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ResistanceSupportRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ResistanceSupportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Scenario Analysis
     * 
     * Scenario Analysis
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisResponse
     */
	public function scenarioAnalysis(
        \OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/scenario-analysis');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ScenarioAnalysisResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Sentiments
     * 
     * Sentiments
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SentimentsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\SentimentsResponse
     */
	public function sentiments(
        \OpenAPI\OpenAPI\Models\Operations\SentimentsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\SentimentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/sentiments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SentimentsRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SentimentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Tokens
     * 
     * Tokens
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TokensRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TokensResponse
     */
	public function tokens(
        \OpenAPI\OpenAPI\Models\Operations\TokensRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TokensResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/tokens');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TokensRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TokensResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Trader Grades
     * 
     * Trader Grades
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TraderGradesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TraderGradesResponse
     */
	public function traderGrades(
        \OpenAPI\OpenAPI\Models\Operations\TraderGradesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TraderGradesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/trader-grades');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TraderGradesRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TraderGradesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Trading Indicator
     * 
     * Trading Indicator
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\TradingIndicatorRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\TradingIndicatorResponse
     */
	public function tradingIndicator(
        \OpenAPI\OpenAPI\Models\Operations\TradingIndicatorRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\TradingIndicatorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/trading-indicator');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\TradingIndicatorRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\TradingIndicatorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}