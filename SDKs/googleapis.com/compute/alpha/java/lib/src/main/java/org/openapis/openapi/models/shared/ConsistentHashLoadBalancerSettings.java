/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * ConsistentHashLoadBalancerSettings - This message defines settings for a consistent hash style load balancer.
 */
public class ConsistentHashLoadBalancerSettings {
    /**
     * The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpCookie")
    public ConsistentHashLoadBalancerSettingsHttpCookie httpCookie;
    public ConsistentHashLoadBalancerSettings withHttpCookie(ConsistentHashLoadBalancerSettingsHttpCookie httpCookie) {
        this.httpCookie = httpCookie;
        return this;
    }
    
    /**
     * The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("httpHeaderName")
    public String httpHeaderName;
    public ConsistentHashLoadBalancerSettings withHttpHeaderName(String httpHeaderName) {
        this.httpHeaderName = httpHeaderName;
        return this;
    }
    
    /**
     * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minimumRingSize")
    public String minimumRingSize;
    public ConsistentHashLoadBalancerSettings withMinimumRingSize(String minimumRingSize) {
        this.minimumRingSize = minimumRingSize;
        return this;
    }
    
}
