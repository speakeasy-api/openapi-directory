// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"openapi/pkg/models/shared"
)

type RetrieveAPISecretSecurity struct {
	BasicAuth shared.SchemeBasicAuth `security:"scheme,type=http,subtype=basic"`
}

type RetrieveAPISecretPathParams struct {
	// The API key to manage secrets for
	APIKey string `pathParam:"style=simple,explode=false,name=api_key"`
	// ID of the API Secret
	SecretID string `pathParam:"style=simple,explode=false,name=secret_id"`
}

type RetrieveAPISecretRequest struct {
	PathParams RetrieveAPISecretPathParams
	Security   RetrieveAPISecretSecurity
}

type RetrieveAPISecret404ApplicationJSONType string

const (
	RetrieveAPISecret404ApplicationJSONTypeErrorAPIKeyNotFound   RetrieveAPISecret404ApplicationJSONType = "ErrorAPIKeyNotFound"
	RetrieveAPISecret404ApplicationJSONTypeErrorSecretIDNotFound RetrieveAPISecret404ApplicationJSONType = "ErrorSecretIDNotFound"
)

type RetrieveAPISecret404ApplicationJSON struct {
	ErrorAPIKeyNotFound   *shared.ErrorAPIKeyNotFound
	ErrorSecretIDNotFound *shared.ErrorSecretIDNotFound

	Type RetrieveAPISecret404ApplicationJSONType
}

func CreateRetrieveAPISecret404ApplicationJSONErrorAPIKeyNotFound(errorAPIKeyNotFound shared.ErrorAPIKeyNotFound) RetrieveAPISecret404ApplicationJSON {
	typ := RetrieveAPISecret404ApplicationJSONTypeErrorAPIKeyNotFound

	return RetrieveAPISecret404ApplicationJSON{
		ErrorAPIKeyNotFound: &errorAPIKeyNotFound,
		Type:                typ,
	}
}

func CreateRetrieveAPISecret404ApplicationJSONErrorSecretIDNotFound(errorSecretIDNotFound shared.ErrorSecretIDNotFound) RetrieveAPISecret404ApplicationJSON {
	typ := RetrieveAPISecret404ApplicationJSONTypeErrorSecretIDNotFound

	return RetrieveAPISecret404ApplicationJSON{
		ErrorSecretIDNotFound: &errorSecretIDNotFound,
		Type:                  typ,
	}
}

func (u *RetrieveAPISecret404ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	errorAPIKeyNotFound := new(shared.ErrorAPIKeyNotFound)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorAPIKeyNotFound); err == nil {
		u.ErrorAPIKeyNotFound = errorAPIKeyNotFound
		u.Type = RetrieveAPISecret404ApplicationJSONTypeErrorAPIKeyNotFound
		return nil
	}

	errorSecretIDNotFound := new(shared.ErrorSecretIDNotFound)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&errorSecretIDNotFound); err == nil {
		u.ErrorSecretIDNotFound = errorSecretIDNotFound
		u.Type = RetrieveAPISecret404ApplicationJSONTypeErrorSecretIDNotFound
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u RetrieveAPISecret404ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ErrorAPIKeyNotFound != nil {
		return json.Marshal(u.ErrorAPIKeyNotFound)
	}

	if u.ErrorSecretIDNotFound != nil {
		return json.Marshal(u.ErrorSecretIDNotFound)
	}

	return nil, nil
}

// RetrieveAPISecret401ApplicationJSON - Credentials are missing or invalid
type RetrieveAPISecret401ApplicationJSON struct {
	// More detail regarding this error, including the expected value
	Detail *string `json:"detail,omitempty"`
	// Internal Trace ID
	Instance *string `json:"instance,omitempty"`
	// Description of the error
	Title *string `json:"title,omitempty"`
	// URL for further information
	Type *string `json:"type,omitempty"`
}

type RetrieveAPISecretResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Credentials are missing or invalid
	RetrieveAPISecret401ApplicationJSONObject *RetrieveAPISecret401ApplicationJSON
	// Item not found
	RetrieveAPISecret404ApplicationJSONOneOf *RetrieveAPISecret404ApplicationJSON
	// API secret response
	SecretInfo *shared.SecretInfo
}
