/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class ProtocolMappers {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public ProtocolMappers(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Delete the mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response deleteRealmClientScopesId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.DeleteRealmClientScopesId1ProtocolMappersModelsId2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Delete the mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response deleteRealmClientsId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteRealmClientsId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/clients/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.DeleteRealmClientsId1ProtocolMappersModelsId2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Get mapper by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response getRealmClientScopesId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.GetRealmClientScopesId1ProtocolMappersModelsId2Response() {{
            protocolMapperRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation.class);
                res.protocolMapperRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get mappers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersModelsResponse getRealmClientScopesIdProtocolMappersModels(org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersModelsRequest.class, baseUrl, "/{realm}/client-scopes/{id}/protocol-mappers/models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersModelsResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersModelsResponse() {{
            protocolMapperRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation[].class);
                res.protocolMapperRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get mappers by name for a specific protocol
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse getRealmClientScopesIdProtocolMappersProtocolProtocol(org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolRequest.class, baseUrl, "/{realm}/client-scopes/{id}/protocol-mappers/protocol/{protocol}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse res = new org.openapis.openapi.models.operations.GetRealmClientScopesIdProtocolMappersProtocolProtocolResponse() {{
            protocolMapperRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation[].class);
                res.protocolMapperRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get mapper by id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsId1ProtocolMappersModelsId2Response getRealmClientsId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.GetRealmClientsId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/clients/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.GetRealmClientsId1ProtocolMappersModelsId2Response() {{
            protocolMapperRepresentation = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation.class);
                res.protocolMapperRepresentation = out;
            }
        }

        return res;
    }

    /**
     * Get mappers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersModelsResponse getRealmClientsIdProtocolMappersModels(org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersModelsRequest.class, baseUrl, "/{realm}/clients/{id}/protocol-mappers/models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersModelsResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersModelsResponse() {{
            protocolMapperRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation[].class);
                res.protocolMapperRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Get mappers by name for a specific protocol
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse getRealmClientsIdProtocolMappersProtocolProtocol(org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersProtocolProtocolRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersProtocolProtocolRequest.class, baseUrl, "/{realm}/clients/{id}/protocol-mappers/protocol/{protocol}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse res = new org.openapis.openapi.models.operations.GetRealmClientsIdProtocolMappersProtocolProtocolResponse() {{
            protocolMapperRepresentations = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ProtocolMapperRepresentation[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ProtocolMapperRepresentation[].class);
                res.protocolMapperRepresentations = out;
            }
        }

        return res;
    }

    /**
     * Create multiple mappers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse postRealmClientScopesIdProtocolMappersAddModels(org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersAddModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersAddModelsRequest.class, baseUrl, "/{realm}/client-scopes/{id}/protocol-mappers/add-models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse res = new org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersAddModelsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Create a mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersModelsResponse postRealmClientScopesIdProtocolMappersModels(org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersModelsRequest.class, baseUrl, "/{realm}/client-scopes/{id}/protocol-mappers/models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "protocolMapperRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersModelsResponse res = new org.openapis.openapi.models.operations.PostRealmClientScopesIdProtocolMappersModelsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Create multiple mappers
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersAddModelsResponse postRealmClientsIdProtocolMappersAddModels(org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersAddModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersAddModelsRequest.class, baseUrl, "/{realm}/clients/{id}/protocol-mappers/add-models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersAddModelsResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersAddModelsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Create a mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersModelsResponse postRealmClientsIdProtocolMappersModels(org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersModelsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersModelsRequest.class, baseUrl, "/{realm}/clients/{id}/protocol-mappers/models", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "protocolMapperRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersModelsResponse res = new org.openapis.openapi.models.operations.PostRealmClientsIdProtocolMappersModelsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update the mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response putRealmClientScopesId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmClientScopesId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/client-scopes/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "protocolMapperRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.PutRealmClientScopesId1ProtocolMappersModelsId2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }

    /**
     * Update the mapper
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PutRealmClientsId1ProtocolMappersModelsId2Response putRealmClientsId1ProtocolMappersModelsId2(org.openapis.openapi.models.operations.PutRealmClientsId1ProtocolMappersModelsId2Request request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PutRealmClientsId1ProtocolMappersModelsId2Request.class, baseUrl, "/{realm}/clients/{id1}/protocol-mappers/models/{id2}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "protocolMapperRepresentation", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PutRealmClientsId1ProtocolMappersModelsId2Response res = new org.openapis.openapi.models.operations.PutRealmClientsId1ProtocolMappersModelsId2Response() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if ((httpRes.statusCode() >= 200 && httpRes.statusCode() < 300)) {
        }

        return res;
    }
}