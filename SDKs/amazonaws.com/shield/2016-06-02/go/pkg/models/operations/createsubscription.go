// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// CreateSubscriptionXAmzTargetEnum
type CreateSubscriptionXAmzTargetEnum string

const (
	CreateSubscriptionXAmzTargetEnumAwsShield20160616CreateSubscription CreateSubscriptionXAmzTargetEnum = "AWSShield_20160616.CreateSubscription"
)

func (e *CreateSubscriptionXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSShield_20160616.CreateSubscription":
		*e = CreateSubscriptionXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSubscriptionXAmzTargetEnum: %s", s)
	}
}

type CreateSubscriptionRequest struct {
	RequestBody       map[string]interface{}           `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateSubscriptionXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateSubscriptionResponse struct {
	ContentType string
	// Success
	CreateSubscriptionResponse map[string]interface{}
	// InternalErrorException
	InternalErrorException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceAlreadyExistsException
	ResourceAlreadyExistsException interface{}
}
