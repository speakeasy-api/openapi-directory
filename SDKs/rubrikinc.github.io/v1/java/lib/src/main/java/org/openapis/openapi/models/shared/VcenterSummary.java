/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * VcenterSummary - Summary of the updated vCenter Server object.
 */
public class VcenterSummary {
    /**
     * Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caCerts")
    public String caCerts;

    public VcenterSummary withCaCerts(String caCerts) {
        this.caCerts = caCerts;
        return this;
    }
    
    /**
     * Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
     */
    @JsonProperty("computeVisibilityFilter")
    public ClusterVisibilityInfo[] computeVisibilityFilter;

    public VcenterSummary withComputeVisibilityFilter(ClusterVisibilityInfo[] computeVisibilityFilter) {
        this.computeVisibilityFilter = computeVisibilityFilter;
        return this;
    }
    
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public VcenterSummary withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public VcenterSummary withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainPolarisManagedId")
    public String configuredSlaDomainPolarisManagedId;

    public VcenterSummary withConfiguredSlaDomainPolarisManagedId(String configuredSlaDomainPolarisManagedId) {
        this.configuredSlaDomainPolarisManagedId = configuredSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public VcenterSummary withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    /**
     * Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conflictResolutionAuthz")
    public VcenterSummaryConflictResolutionAuthzEnum conflictResolutionAuthz;

    public VcenterSummary withConflictResolutionAuthz(VcenterSummaryConflictResolutionAuthzEnum conflictResolutionAuthz) {
        this.conflictResolutionAuthz = conflictResolutionAuthz;
        return this;
    }
    
    @JsonProperty("connectionStatus")
    public RefreshableObjectConnectionStatus connectionStatus;

    public VcenterSummary withConnectionStatus(RefreshableObjectConnectionStatus connectionStatus) {
        this.connectionStatus = connectionStatus;
        return this;
    }
    
    @JsonProperty("hostname")
    public String hostname;

    public VcenterSummary withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public VcenterSummary withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public VcenterSummary withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isIoFilterInstalled")
    public Boolean isIoFilterInstalled;

    public VcenterSummary withIsIoFilterInstalled(Boolean isIoFilterInstalled) {
        this.isIoFilterInstalled = isIoFilterInstalled;
        return this;
    }
    
    /**
     * Indicates if the vCenter is a VMC instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isVmc")
    public Boolean isVmc;

    public VcenterSummary withIsVmc(Boolean isVmc) {
        this.isVmc = isVmc;
        return this;
    }
    
    /**
     * Optional field containing the last time that a vcenter was refreshed (either lite or full).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("lastRefreshTime")
    public OffsetDateTime lastRefreshTime;

    public VcenterSummary withLastRefreshTime(OffsetDateTime lastRefreshTime) {
        this.lastRefreshTime = lastRefreshTime;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public VcenterSummary withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public VcenterSummary withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public VcenterSummary withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    @JsonProperty("username")
    public String username;

    public VcenterSummary withUsername(String username) {
        this.username = username;
        return this;
    }
    
    /**
     * Version of vCenter.
     */
    @JsonProperty("version")
    public String version;

    public VcenterSummary withVersion(String version) {
        this.version = version;
        return this;
    }
    
    public VcenterSummary(@JsonProperty("computeVisibilityFilter") ClusterVisibilityInfo[] computeVisibilityFilter, @JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("connectionStatus") RefreshableObjectConnectionStatus connectionStatus, @JsonProperty("hostname") String hostname, @JsonProperty("id") String id, @JsonProperty("name") String name, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("username") String username, @JsonProperty("version") String version) {
        this.computeVisibilityFilter = computeVisibilityFilter;
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.connectionStatus = connectionStatus;
        this.hostname = hostname;
        this.id = id;
        this.name = name;
        this.primaryClusterId = primaryClusterId;
        this.username = username;
        this.version = version;
  }
}
