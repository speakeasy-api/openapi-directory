// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// DescribeSnapshotsResultSnapshotsStateEnum - The snapshot state.
type DescribeSnapshotsResultSnapshotsStateEnum string

const (
	DescribeSnapshotsResultSnapshotsStateEnumPending     DescribeSnapshotsResultSnapshotsStateEnum = "pending"
	DescribeSnapshotsResultSnapshotsStateEnumCompleted   DescribeSnapshotsResultSnapshotsStateEnum = "completed"
	DescribeSnapshotsResultSnapshotsStateEnumError       DescribeSnapshotsResultSnapshotsStateEnum = "error"
	DescribeSnapshotsResultSnapshotsStateEnumRecoverable DescribeSnapshotsResultSnapshotsStateEnum = "recoverable"
	DescribeSnapshotsResultSnapshotsStateEnumRecovering  DescribeSnapshotsResultSnapshotsStateEnum = "recovering"
)

func (e *DescribeSnapshotsResultSnapshotsStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "error":
		fallthrough
	case "recoverable":
		fallthrough
	case "recovering":
		*e = DescribeSnapshotsResultSnapshotsStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSnapshotsResultSnapshotsStateEnum: %s", s)
	}
}

// DescribeSnapshotsResultSnapshotsStorageTierEnum - The storage tier in which the snapshot is stored. <code>standard</code> indicates that the snapshot is stored in the standard snapshot storage tier and that it is ready for use. <code>archive</code> indicates that the snapshot is currently archived and that it must be restored before it can be used.
type DescribeSnapshotsResultSnapshotsStorageTierEnum string

const (
	DescribeSnapshotsResultSnapshotsStorageTierEnumArchive  DescribeSnapshotsResultSnapshotsStorageTierEnum = "archive"
	DescribeSnapshotsResultSnapshotsStorageTierEnumStandard DescribeSnapshotsResultSnapshotsStorageTierEnum = "standard"
)

func (e *DescribeSnapshotsResultSnapshotsStorageTierEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "archive":
		fallthrough
	case "standard":
		*e = DescribeSnapshotsResultSnapshotsStorageTierEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeSnapshotsResultSnapshotsStorageTierEnum: %s", s)
	}
}

// DescribeSnapshotsResultSnapshotsTags - Describes a tag.
type DescribeSnapshotsResultSnapshotsTags struct {
	Key   *string
	Value *string
}

// DescribeSnapshotsResultSnapshots - Describes a snapshot.
type DescribeSnapshotsResultSnapshots struct {
	DataEncryptionKeyID *string
	Description         *string
	Encrypted           *bool
	KmsKeyID            *string
	OutpostArn          *string
	OwnerAlias          *string
	OwnerID             *string
	Progress            *string
	RestoreExpiryTime   *time.Time
	SnapshotID          *string
	StartTime           *time.Time
	State               *DescribeSnapshotsResultSnapshotsStateEnum
	StateMessage        *string
	StorageTier         *DescribeSnapshotsResultSnapshotsStorageTierEnum
	Tags                []DescribeSnapshotsResultSnapshotsTags
	VolumeID            *string
	VolumeSize          *int64
}

// DescribeSnapshotsResult - Success
type DescribeSnapshotsResult struct {
	NextToken *string
	Snapshots []DescribeSnapshotsResultSnapshots
}
