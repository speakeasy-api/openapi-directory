"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

SERVERS = [
    "https://autopilot.twilio.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""This is the public Twilio REST API."""

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def create_assistant(self, request: operations.CreateAssistantCreateAssistantRequest, security: operations.CreateAssistantSecurity, server_url: Optional[str] = None) -> operations.CreateAssistantResponse:
        base_url = operations.CREATE_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Assistants'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1Assistant])
                res.autopilot_v1_assistant = out

        return res

    def create_field(self, request: operations.CreateFieldRequest, security: operations.CreateFieldSecurity, server_url: Optional[str] = None) -> operations.CreateFieldResponse:
        base_url = operations.CREATE_FIELD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateFieldRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskField])
                res.autopilot_v1_assistant_task_field = out

        return res

    def create_field_type(self, request: operations.CreateFieldTypeRequest, security: operations.CreateFieldTypeSecurity, server_url: Optional[str] = None) -> operations.CreateFieldTypeResponse:
        base_url = operations.CREATE_FIELD_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateFieldTypeRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFieldTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantFieldType])
                res.autopilot_v1_assistant_field_type = out

        return res

    def create_field_value(self, request: operations.CreateFieldValueRequest, security: operations.CreateFieldValueSecurity, server_url: Optional[str] = None) -> operations.CreateFieldValueResponse:
        base_url = operations.CREATE_FIELD_VALUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateFieldValueRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateFieldValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantFieldTypeFieldValue])
                res.autopilot_v1_assistant_field_type_field_value = out

        return res

    def create_model_build(self, request: operations.CreateModelBuildRequest, security: operations.CreateModelBuildSecurity, server_url: Optional[str] = None) -> operations.CreateModelBuildResponse:
        base_url = operations.CREATE_MODEL_BUILD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateModelBuildRequest, base_url, '/v1/Assistants/{AssistantSid}/ModelBuilds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateModelBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantModelBuild])
                res.autopilot_v1_assistant_model_build = out

        return res

    def create_query(self, request: operations.CreateQueryRequest, security: operations.CreateQuerySecurity, server_url: Optional[str] = None) -> operations.CreateQueryResponse:
        base_url = operations.CREATE_QUERY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateQueryRequest, base_url, '/v1/Assistants/{AssistantSid}/Queries', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantQuery])
                res.autopilot_v1_assistant_query = out

        return res

    def create_sample(self, request: operations.CreateSampleRequest, security: operations.CreateSampleSecurity, server_url: Optional[str] = None) -> operations.CreateSampleResponse:
        base_url = operations.CREATE_SAMPLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateSampleRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskSample])
                res.autopilot_v1_assistant_task_sample = out

        return res

    def create_task(self, request: operations.CreateTaskRequest, security: operations.CreateTaskSecurity, server_url: Optional[str] = None) -> operations.CreateTaskResponse:
        base_url = operations.CREATE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateTaskRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTask])
                res.autopilot_v1_assistant_task = out

        return res

    def create_webhook(self, request: operations.CreateWebhookRequest, security: operations.CreateWebhookSecurity, server_url: Optional[str] = None) -> operations.CreateWebhookResponse:
        base_url = operations.CREATE_WEBHOOK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.CreateWebhookRequest, base_url, '/v1/Assistants/{AssistantSid}/Webhooks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantWebhook])
                res.autopilot_v1_assistant_webhook = out

        return res

    def delete_assistant(self, request: operations.DeleteAssistantRequest, security: operations.DeleteAssistantSecurity, server_url: Optional[str] = None) -> operations.DeleteAssistantResponse:
        base_url = operations.DELETE_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteAssistantRequest, base_url, '/v1/Assistants/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_field(self, request: operations.DeleteFieldRequest, security: operations.DeleteFieldSecurity, server_url: Optional[str] = None) -> operations.DeleteFieldResponse:
        base_url = operations.DELETE_FIELD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteFieldRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_field_type(self, request: operations.DeleteFieldTypeRequest, security: operations.DeleteFieldTypeSecurity, server_url: Optional[str] = None) -> operations.DeleteFieldTypeResponse:
        base_url = operations.DELETE_FIELD_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteFieldTypeRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFieldTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_field_value(self, request: operations.DeleteFieldValueRequest, security: operations.DeleteFieldValueSecurity, server_url: Optional[str] = None) -> operations.DeleteFieldValueResponse:
        base_url = operations.DELETE_FIELD_VALUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteFieldValueRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFieldValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_model_build(self, request: operations.DeleteModelBuildRequest, security: operations.DeleteModelBuildSecurity, server_url: Optional[str] = None) -> operations.DeleteModelBuildResponse:
        base_url = operations.DELETE_MODEL_BUILD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteModelBuildRequest, base_url, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteModelBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_query(self, request: operations.DeleteQueryRequest, security: operations.DeleteQuerySecurity, server_url: Optional[str] = None) -> operations.DeleteQueryResponse:
        base_url = operations.DELETE_QUERY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteQueryRequest, base_url, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_sample(self, request: operations.DeleteSampleRequest, security: operations.DeleteSampleSecurity, server_url: Optional[str] = None) -> operations.DeleteSampleResponse:
        base_url = operations.DELETE_SAMPLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteSampleRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_task(self, request: operations.DeleteTaskRequest, security: operations.DeleteTaskSecurity, server_url: Optional[str] = None) -> operations.DeleteTaskResponse:
        base_url = operations.DELETE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteTaskRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_webhook(self, request: operations.DeleteWebhookRequest, security: operations.DeleteWebhookSecurity, server_url: Optional[str] = None) -> operations.DeleteWebhookResponse:
        base_url = operations.DELETE_WEBHOOK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.DeleteWebhookRequest, base_url, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def fetch_assistant(self, request: operations.FetchAssistantRequest, security: operations.FetchAssistantSecurity, server_url: Optional[str] = None) -> operations.FetchAssistantResponse:
        base_url = operations.FETCH_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchAssistantRequest, base_url, '/v1/Assistants/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1Assistant])
                res.autopilot_v1_assistant = out

        return res

    def fetch_defaults(self, request: operations.FetchDefaultsRequest, security: operations.FetchDefaultsSecurity, server_url: Optional[str] = None) -> operations.FetchDefaultsResponse:
        base_url = operations.FETCH_DEFAULTS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDefaultsRequest, base_url, '/v1/Assistants/{AssistantSid}/Defaults', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDefaultsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantDefaults])
                res.autopilot_v1_assistant_defaults = out

        return res

    def fetch_dialogue(self, request: operations.FetchDialogueRequest, security: operations.FetchDialogueSecurity, server_url: Optional[str] = None) -> operations.FetchDialogueResponse:
        base_url = operations.FETCH_DIALOGUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchDialogueRequest, base_url, '/v1/Assistants/{AssistantSid}/Dialogues/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchDialogueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantDialogue])
                res.autopilot_v1_assistant_dialogue = out

        return res

    def fetch_field(self, request: operations.FetchFieldRequest, security: operations.FetchFieldSecurity, server_url: Optional[str] = None) -> operations.FetchFieldResponse:
        base_url = operations.FETCH_FIELD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchFieldRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskField])
                res.autopilot_v1_assistant_task_field = out

        return res

    def fetch_field_type(self, request: operations.FetchFieldTypeRequest, security: operations.FetchFieldTypeSecurity, server_url: Optional[str] = None) -> operations.FetchFieldTypeResponse:
        base_url = operations.FETCH_FIELD_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchFieldTypeRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFieldTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantFieldType])
                res.autopilot_v1_assistant_field_type = out

        return res

    def fetch_field_value(self, request: operations.FetchFieldValueRequest, security: operations.FetchFieldValueSecurity, server_url: Optional[str] = None) -> operations.FetchFieldValueResponse:
        base_url = operations.FETCH_FIELD_VALUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchFieldValueRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchFieldValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantFieldTypeFieldValue])
                res.autopilot_v1_assistant_field_type_field_value = out

        return res

    def fetch_model_build(self, request: operations.FetchModelBuildRequest, security: operations.FetchModelBuildSecurity, server_url: Optional[str] = None) -> operations.FetchModelBuildResponse:
        base_url = operations.FETCH_MODEL_BUILD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchModelBuildRequest, base_url, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchModelBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantModelBuild])
                res.autopilot_v1_assistant_model_build = out

        return res

    def fetch_query(self, request: operations.FetchQueryRequest, security: operations.FetchQuerySecurity, server_url: Optional[str] = None) -> operations.FetchQueryResponse:
        base_url = operations.FETCH_QUERY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchQueryRequest, base_url, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantQuery])
                res.autopilot_v1_assistant_query = out

        return res

    def fetch_sample(self, request: operations.FetchSampleRequest, security: operations.FetchSampleSecurity, server_url: Optional[str] = None) -> operations.FetchSampleResponse:
        base_url = operations.FETCH_SAMPLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchSampleRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskSample])
                res.autopilot_v1_assistant_task_sample = out

        return res

    def fetch_style_sheet(self, request: operations.FetchStyleSheetRequest, security: operations.FetchStyleSheetSecurity, server_url: Optional[str] = None) -> operations.FetchStyleSheetResponse:
        r"""Returns Style sheet JSON object for the Assistant"""
        base_url = operations.FETCH_STYLE_SHEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchStyleSheetRequest, base_url, '/v1/Assistants/{AssistantSid}/StyleSheet', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchStyleSheetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantStyleSheet])
                res.autopilot_v1_assistant_style_sheet = out

        return res

    def fetch_task(self, request: operations.FetchTaskRequest, security: operations.FetchTaskSecurity, server_url: Optional[str] = None) -> operations.FetchTaskResponse:
        base_url = operations.FETCH_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTask])
                res.autopilot_v1_assistant_task = out

        return res

    def fetch_task_actions(self, request: operations.FetchTaskActionsRequest, security: operations.FetchTaskActionsSecurity, server_url: Optional[str] = None) -> operations.FetchTaskActionsResponse:
        r"""Returns JSON actions for the Task."""
        base_url = operations.FETCH_TASK_ACTIONS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskActionsRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskTaskActions])
                res.autopilot_v1_assistant_task_task_actions = out

        return res

    def fetch_task_statistics(self, request: operations.FetchTaskStatisticsRequest, security: operations.FetchTaskStatisticsSecurity, server_url: Optional[str] = None) -> operations.FetchTaskStatisticsResponse:
        base_url = operations.FETCH_TASK_STATISTICS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchTaskStatisticsRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Statistics', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchTaskStatisticsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskTaskStatistics])
                res.autopilot_v1_assistant_task_task_statistics = out

        return res

    def fetch_webhook(self, request: operations.FetchWebhookRequest, security: operations.FetchWebhookSecurity, server_url: Optional[str] = None) -> operations.FetchWebhookResponse:
        base_url = operations.FETCH_WEBHOOK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.FetchWebhookRequest, base_url, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.FetchWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantWebhook])
                res.autopilot_v1_assistant_webhook = out

        return res

    def list_assistant(self, request: operations.ListAssistantRequest, security: operations.ListAssistantSecurity, server_url: Optional[str] = None) -> operations.ListAssistantResponse:
        base_url = operations.LIST_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Assistants'
        
        query_params = utils.get_query_params(operations.ListAssistantRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListAssistantListAssistantResponse])
                res.list_assistant_response = out

        return res

    def list_field(self, request: operations.ListFieldRequest, security: operations.ListFieldSecurity, server_url: Optional[str] = None) -> operations.ListFieldResponse:
        base_url = operations.LIST_FIELD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListFieldRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Fields', request)
        
        query_params = utils.get_query_params(operations.ListFieldRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFieldResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListFieldListFieldResponse])
                res.list_field_response = out

        return res

    def list_field_type(self, request: operations.ListFieldTypeRequest, security: operations.ListFieldTypeSecurity, server_url: Optional[str] = None) -> operations.ListFieldTypeResponse:
        base_url = operations.LIST_FIELD_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListFieldTypeRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes', request)
        
        query_params = utils.get_query_params(operations.ListFieldTypeRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFieldTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListFieldTypeListFieldTypeResponse])
                res.list_field_type_response = out

        return res

    def list_field_value(self, request: operations.ListFieldValueRequest, security: operations.ListFieldValueSecurity, server_url: Optional[str] = None) -> operations.ListFieldValueResponse:
        base_url = operations.LIST_FIELD_VALUE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListFieldValueRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{FieldTypeSid}/FieldValues', request)
        
        query_params = utils.get_query_params(operations.ListFieldValueRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListFieldValueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListFieldValueListFieldValueResponse])
                res.list_field_value_response = out

        return res

    def list_model_build(self, request: operations.ListModelBuildRequest, security: operations.ListModelBuildSecurity, server_url: Optional[str] = None) -> operations.ListModelBuildResponse:
        base_url = operations.LIST_MODEL_BUILD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListModelBuildRequest, base_url, '/v1/Assistants/{AssistantSid}/ModelBuilds', request)
        
        query_params = utils.get_query_params(operations.ListModelBuildRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListModelBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListModelBuildListModelBuildResponse])
                res.list_model_build_response = out

        return res

    def list_query(self, request: operations.ListQueryRequest, security: operations.ListQuerySecurity, server_url: Optional[str] = None) -> operations.ListQueryResponse:
        base_url = operations.LIST_QUERY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListQueryRequest, base_url, '/v1/Assistants/{AssistantSid}/Queries', request)
        
        query_params = utils.get_query_params(operations.ListQueryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListQueryListQueryResponse])
                res.list_query_response = out

        return res

    def list_sample(self, request: operations.ListSampleRequest, security: operations.ListSampleSecurity, server_url: Optional[str] = None) -> operations.ListSampleResponse:
        base_url = operations.LIST_SAMPLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListSampleRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples', request)
        
        query_params = utils.get_query_params(operations.ListSampleRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListSampleListSampleResponse])
                res.list_sample_response = out

        return res

    def list_task(self, request: operations.ListTaskRequest, security: operations.ListTaskSecurity, server_url: Optional[str] = None) -> operations.ListTaskResponse:
        base_url = operations.LIST_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListTaskRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks', request)
        
        query_params = utils.get_query_params(operations.ListTaskRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListTaskListTaskResponse])
                res.list_task_response = out

        return res

    def list_webhook(self, request: operations.ListWebhookRequest, security: operations.ListWebhookSecurity, server_url: Optional[str] = None) -> operations.ListWebhookResponse:
        base_url = operations.LIST_WEBHOOK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.ListWebhookRequest, base_url, '/v1/Assistants/{AssistantSid}/Webhooks', request)
        
        query_params = utils.get_query_params(operations.ListWebhookRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.ListWebhookListWebhookResponse])
                res.list_webhook_response = out

        return res

    def update_assistant(self, request: operations.UpdateAssistantRequest, security: operations.UpdateAssistantSecurity, server_url: Optional[str] = None) -> operations.UpdateAssistantResponse:
        base_url = operations.UPDATE_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateAssistantRequest, base_url, '/v1/Assistants/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1Assistant])
                res.autopilot_v1_assistant = out

        return res

    def update_defaults(self, request: operations.UpdateDefaultsRequest, security: operations.UpdateDefaultsSecurity, server_url: Optional[str] = None) -> operations.UpdateDefaultsResponse:
        base_url = operations.UPDATE_DEFAULTS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateDefaultsRequest, base_url, '/v1/Assistants/{AssistantSid}/Defaults', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateDefaultsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantDefaults])
                res.autopilot_v1_assistant_defaults = out

        return res

    def update_field_type(self, request: operations.UpdateFieldTypeRequest, security: operations.UpdateFieldTypeSecurity, server_url: Optional[str] = None) -> operations.UpdateFieldTypeResponse:
        base_url = operations.UPDATE_FIELD_TYPE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateFieldTypeRequest, base_url, '/v1/Assistants/{AssistantSid}/FieldTypes/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateFieldTypeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantFieldType])
                res.autopilot_v1_assistant_field_type = out

        return res

    def update_model_build(self, request: operations.UpdateModelBuildRequest, security: operations.UpdateModelBuildSecurity, server_url: Optional[str] = None) -> operations.UpdateModelBuildResponse:
        base_url = operations.UPDATE_MODEL_BUILD_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateModelBuildRequest, base_url, '/v1/Assistants/{AssistantSid}/ModelBuilds/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateModelBuildResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantModelBuild])
                res.autopilot_v1_assistant_model_build = out

        return res

    def update_query(self, request: operations.UpdateQueryRequest, security: operations.UpdateQuerySecurity, server_url: Optional[str] = None) -> operations.UpdateQueryResponse:
        base_url = operations.UPDATE_QUERY_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateQueryRequest, base_url, '/v1/Assistants/{AssistantSid}/Queries/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateQueryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantQuery])
                res.autopilot_v1_assistant_query = out

        return res

    def update_restore_assistant(self, request: operations.UpdateRestoreAssistantUpdateRestoreAssistantRequest, security: operations.UpdateRestoreAssistantSecurity, server_url: Optional[str] = None) -> operations.UpdateRestoreAssistantResponse:
        base_url = operations.UPDATE_RESTORE_ASSISTANT_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = base_url.removesuffix('/') + '/v1/Assistants/Restore'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateRestoreAssistantResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1RestoreAssistant])
                res.autopilot_v1_restore_assistant = out

        return res

    def update_sample(self, request: operations.UpdateSampleRequest, security: operations.UpdateSampleSecurity, server_url: Optional[str] = None) -> operations.UpdateSampleResponse:
        base_url = operations.UPDATE_SAMPLE_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateSampleRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Samples/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateSampleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskSample])
                res.autopilot_v1_assistant_task_sample = out

        return res

    def update_style_sheet(self, request: operations.UpdateStyleSheetRequest, security: operations.UpdateStyleSheetSecurity, server_url: Optional[str] = None) -> operations.UpdateStyleSheetResponse:
        r"""Updates the style sheet for an Assistant identified by `assistant_sid`."""
        base_url = operations.UPDATE_STYLE_SHEET_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateStyleSheetRequest, base_url, '/v1/Assistants/{AssistantSid}/StyleSheet', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateStyleSheetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantStyleSheet])
                res.autopilot_v1_assistant_style_sheet = out

        return res

    def update_task(self, request: operations.UpdateTaskRequest, security: operations.UpdateTaskSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskResponse:
        base_url = operations.UPDATE_TASK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTask])
                res.autopilot_v1_assistant_task = out

        return res

    def update_task_actions(self, request: operations.UpdateTaskActionsRequest, security: operations.UpdateTaskActionsSecurity, server_url: Optional[str] = None) -> operations.UpdateTaskActionsResponse:
        r"""Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}."""
        base_url = operations.UPDATE_TASK_ACTIONS_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateTaskActionsRequest, base_url, '/v1/Assistants/{AssistantSid}/Tasks/{TaskSid}/Actions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTaskActionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantTaskTaskActions])
                res.autopilot_v1_assistant_task_task_actions = out

        return res

    def update_webhook(self, request: operations.UpdateWebhookRequest, security: operations.UpdateWebhookSecurity, server_url: Optional[str] = None) -> operations.UpdateWebhookResponse:
        base_url = operations.UPDATE_WEBHOOK_SERVERS[0]
        if server_url is not None:
            base_url = server_url
        
        url = utils.generate_url(operations.UpdateWebhookRequest, base_url, '/v1/Assistants/{AssistantSid}/Webhooks/{Sid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateWebhookResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AutopilotV1AssistantWebhook])
                res.autopilot_v1_assistant_webhook = out

        return res

    