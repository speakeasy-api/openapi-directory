// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DataPointsGetStatisticsAggregatedSingleStatusEnum - Status of datapoint ("deleted"/"active"/"paused"/"spam")
type DataPointsGetStatisticsAggregatedSingleStatusEnum string

const (
	DataPointsGetStatisticsAggregatedSingleStatusEnumDeleted DataPointsGetStatisticsAggregatedSingleStatusEnum = "deleted"
	DataPointsGetStatisticsAggregatedSingleStatusEnumActive  DataPointsGetStatisticsAggregatedSingleStatusEnum = "active"
	DataPointsGetStatisticsAggregatedSingleStatusEnumPaused  DataPointsGetStatisticsAggregatedSingleStatusEnum = "paused"
	DataPointsGetStatisticsAggregatedSingleStatusEnumSpam    DataPointsGetStatisticsAggregatedSingleStatusEnum = "spam"
)

func (e *DataPointsGetStatisticsAggregatedSingleStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "deleted":
		fallthrough
	case "active":
		fallthrough
	case "paused":
		fallthrough
	case "spam":
		*e = DataPointsGetStatisticsAggregatedSingleStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetStatisticsAggregatedSingleStatusEnum: %s", s)
	}
}

// DataPointsGetStatisticsAggregatedSingleTimeFrameEnum - Timeframe of the request. See list at $timeframeList
type DataPointsGetStatisticsAggregatedSingleTimeFrameEnum string

const (
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumToday         DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "today"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumYesterday     DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "yesterday"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast7         DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last7"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast30        DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last30"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLastmonth     DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "lastmonth"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumCurrentmonth  DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "currentmonth"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumPreviousmonth DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "previousmonth"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast90        DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last90"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast120       DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last120"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast180       DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last180"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLast12months  DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "last12months"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumLastyear      DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "lastyear"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumCurrentyear   DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "currentyear"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumBeginning     DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "beginning"
	DataPointsGetStatisticsAggregatedSingleTimeFrameEnumCustom        DataPointsGetStatisticsAggregatedSingleTimeFrameEnum = "custom"
)

func (e *DataPointsGetStatisticsAggregatedSingleTimeFrameEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "today":
		fallthrough
	case "yesterday":
		fallthrough
	case "last7":
		fallthrough
	case "last30":
		fallthrough
	case "lastmonth":
		fallthrough
	case "currentmonth":
		fallthrough
	case "previousmonth":
		fallthrough
	case "last90":
		fallthrough
	case "last120":
		fallthrough
	case "last180":
		fallthrough
	case "last12months":
		fallthrough
	case "lastyear":
		fallthrough
	case "currentyear":
		fallthrough
	case "beginning":
		fallthrough
	case "custom":
		*e = DataPointsGetStatisticsAggregatedSingleTimeFrameEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetStatisticsAggregatedSingleTimeFrameEnum: %s", s)
	}
}

// DataPointsGetStatisticsAggregatedSingleTypeEnum - Type of datapoint ("tl"/"tp")
type DataPointsGetStatisticsAggregatedSingleTypeEnum string

const (
	DataPointsGetStatisticsAggregatedSingleTypeEnumTp DataPointsGetStatisticsAggregatedSingleTypeEnum = "tp"
	DataPointsGetStatisticsAggregatedSingleTypeEnumTl DataPointsGetStatisticsAggregatedSingleTypeEnum = "tl"
)

func (e *DataPointsGetStatisticsAggregatedSingleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "tp":
		fallthrough
	case "tl":
		*e = DataPointsGetStatisticsAggregatedSingleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DataPointsGetStatisticsAggregatedSingleTypeEnum: %s", s)
	}
}

type DataPointsGetStatisticsAggregatedSingleRequest struct {
	// Is the datapoint is marked as favourite
	Favourite *bool `queryParam:"style=form,explode=true,name=favourite"`
	// If using a "custom" timeFrame you can specify the starting day (YYYYMMDD)
	FromDay *string `queryParam:"style=form,explode=true,name=fromDay"`
	// If using "yesterday" or "today" timeframe you can ask for the hourly detail
	Hourly *bool `queryParam:"style=form,explode=true,name=hourly"`
	// Status of datapoint ("deleted"/"active"/"paused"/"spam")
	Status *DataPointsGetStatisticsAggregatedSingleStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// A comma separated list of tags you want to filter with.
	Tag *string `queryParam:"style=form,explode=true,name=tag"`
	// Timeframe of the request. See list at $timeframeList
	TimeFrame DataPointsGetStatisticsAggregatedSingleTimeFrameEnum `queryParam:"style=form,explode=true,name=timeFrame"`
	// If using a "custom" timeFrame you can specify the ending day (YYYYMMDD)
	ToDay *string `queryParam:"style=form,explode=true,name=toDay"`
	// Type of datapoint ("tl"/"tp")
	Type *DataPointsGetStatisticsAggregatedSingleTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type DataPointsGetStatisticsAggregatedSingleResponse struct {
	APICoreDtoAggregatedAggregatedResult *shared.APICoreDtoAggregatedAggregatedResult
	ContentType                          string
	StatusCode                           int
	RawResponse                          *http.Response
}
