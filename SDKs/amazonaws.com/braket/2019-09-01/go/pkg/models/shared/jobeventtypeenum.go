// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type JobEventTypeEnum string

const (
	JobEventTypeEnumWaitingForPriority           JobEventTypeEnum = "WAITING_FOR_PRIORITY"
	JobEventTypeEnumQueuedForExecution           JobEventTypeEnum = "QUEUED_FOR_EXECUTION"
	JobEventTypeEnumStartingInstance             JobEventTypeEnum = "STARTING_INSTANCE"
	JobEventTypeEnumDownloadingData              JobEventTypeEnum = "DOWNLOADING_DATA"
	JobEventTypeEnumRunning                      JobEventTypeEnum = "RUNNING"
	JobEventTypeEnumDeprioritizedDueToInactivity JobEventTypeEnum = "DEPRIORITIZED_DUE_TO_INACTIVITY"
	JobEventTypeEnumUploadingResults             JobEventTypeEnum = "UPLOADING_RESULTS"
	JobEventTypeEnumCompleted                    JobEventTypeEnum = "COMPLETED"
	JobEventTypeEnumFailed                       JobEventTypeEnum = "FAILED"
	JobEventTypeEnumMaxRuntimeExceeded           JobEventTypeEnum = "MAX_RUNTIME_EXCEEDED"
	JobEventTypeEnumCancelled                    JobEventTypeEnum = "CANCELLED"
)

func (e JobEventTypeEnum) ToPointer() *JobEventTypeEnum {
	return &e
}

func (e *JobEventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WAITING_FOR_PRIORITY":
		fallthrough
	case "QUEUED_FOR_EXECUTION":
		fallthrough
	case "STARTING_INSTANCE":
		fallthrough
	case "DOWNLOADING_DATA":
		fallthrough
	case "RUNNING":
		fallthrough
	case "DEPRIORITIZED_DUE_TO_INACTIVITY":
		fallthrough
	case "UPLOADING_RESULTS":
		fallthrough
	case "COMPLETED":
		fallthrough
	case "FAILED":
		fallthrough
	case "MAX_RUNTIME_EXCEEDED":
		fallthrough
	case "CANCELLED":
		*e = JobEventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JobEventTypeEnum: %v", v)
	}
}
