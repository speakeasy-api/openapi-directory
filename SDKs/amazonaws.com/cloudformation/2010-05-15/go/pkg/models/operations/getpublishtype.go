// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETPublishTypeActionEnum
type GETPublishTypeActionEnum string

const (
	GETPublishTypeActionEnumPublishType GETPublishTypeActionEnum = "PublishType"
)

func (e GETPublishTypeActionEnum) ToPointer() *GETPublishTypeActionEnum {
	return &e
}

func (e *GETPublishTypeActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PublishType":
		*e = GETPublishTypeActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublishTypeActionEnum: %v", v)
	}
}

// GETPublishTypeTypeEnum - <p>The type of the extension.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
type GETPublishTypeTypeEnum string

const (
	GETPublishTypeTypeEnumResource GETPublishTypeTypeEnum = "RESOURCE"
	GETPublishTypeTypeEnumModule   GETPublishTypeTypeEnum = "MODULE"
	GETPublishTypeTypeEnumHook     GETPublishTypeTypeEnum = "HOOK"
)

func (e GETPublishTypeTypeEnum) ToPointer() *GETPublishTypeTypeEnum {
	return &e
}

func (e *GETPublishTypeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESOURCE":
		fallthrough
	case "MODULE":
		fallthrough
	case "HOOK":
		*e = GETPublishTypeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublishTypeTypeEnum: %v", v)
	}
}

// GETPublishTypeVersionEnum
type GETPublishTypeVersionEnum string

const (
	GETPublishTypeVersionEnumTwoThousandAndTen0515 GETPublishTypeVersionEnum = "2010-05-15"
)

func (e GETPublishTypeVersionEnum) ToPointer() *GETPublishTypeVersionEnum {
	return &e
}

func (e *GETPublishTypeVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETPublishTypeVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETPublishTypeVersionEnum: %v", v)
	}
}

type GETPublishTypeRequest struct {
	Action GETPublishTypeActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The Amazon Resource Name (ARN) of the extension.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Arn *string `queryParam:"style=form,explode=true,name=Arn"`
	// <p>The version number to assign to this version of the extension.</p> <p>Use the following format, and adhere to semantic versioning when assigning a version number to your extension:</p> <p> <code>MAJOR.MINOR.PATCH</code> </p> <p>For more information, see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>.</p> <p>If you don't specify a version number, CloudFormation increments the version number by one minor version release.</p> <p>You cannot specify a version number the first time you publish a type. CloudFormation automatically sets the first version number to be <code>1.0.0</code>.</p>
	PublicVersionNumber *string `queryParam:"style=form,explode=true,name=PublicVersionNumber"`
	// <p>The type of the extension.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	Type *GETPublishTypeTypeEnum `queryParam:"style=form,explode=true,name=Type"`
	// <p>The name of the extension.</p> <p>Conditional: You must specify <code>Arn</code>, or <code>TypeName</code> and <code>Type</code>.</p>
	TypeName          *string                   `queryParam:"style=form,explode=true,name=TypeName"`
	Version           GETPublishTypeVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETPublishTypeResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
