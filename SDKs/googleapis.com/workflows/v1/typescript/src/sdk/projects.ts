/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists information about the supported locations for this service.
   */
  workflowsProjectsLocationsList(
    req: operations.WorkflowsProjectsLocationsListRequest,
    security: operations.WorkflowsProjectsLocationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}/locations", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.WorkflowsProjectsLocationsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsListResponse =
        new operations.WorkflowsProjectsLocationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listLocationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListLocationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
   */
  workflowsProjectsLocationsOperationsList(
    req: operations.WorkflowsProjectsLocationsOperationsListRequest,
    security: operations.WorkflowsProjectsLocationsOperationsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsOperationsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsOperationsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{name}/operations",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WorkflowsProjectsLocationsOperationsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsOperationsListResponse =
        new operations.WorkflowsProjectsLocationsOperationsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listOperationsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListOperationsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation returns a ALREADY_EXISTS error.
   */
  workflowsProjectsLocationsWorkflowsCreate(
    req: operations.WorkflowsProjectsLocationsWorkflowsCreateRequest,
    security: operations.WorkflowsProjectsLocationsWorkflowsCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsWorkflowsCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsWorkflowsCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/workflows",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "workflowInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WorkflowsProjectsLocationsWorkflowsCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsWorkflowsCreateResponse =
        new operations.WorkflowsProjectsLocationsWorkflowsCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow.
   */
  workflowsProjectsLocationsWorkflowsDelete(
    req: operations.WorkflowsProjectsLocationsWorkflowsDeleteRequest,
    security: operations.WorkflowsProjectsLocationsWorkflowsDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsWorkflowsDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsWorkflowsDeleteRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WorkflowsProjectsLocationsWorkflowsDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsWorkflowsDeleteResponse =
        new operations.WorkflowsProjectsLocationsWorkflowsDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Gets details of a single workflow.
   */
  workflowsProjectsLocationsWorkflowsGet(
    req: operations.WorkflowsProjectsLocationsWorkflowsGetRequest,
    security: operations.WorkflowsProjectsLocationsWorkflowsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsWorkflowsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsWorkflowsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.WorkflowsProjectsLocationsWorkflowsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsWorkflowsGetResponse =
        new operations.WorkflowsProjectsLocationsWorkflowsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.workflow = utils.objectToClass(httpRes?.data, shared.Workflow);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists workflows in a given project and location. The default order is not specified.
   */
  workflowsProjectsLocationsWorkflowsList(
    req: operations.WorkflowsProjectsLocationsWorkflowsListRequest,
    security: operations.WorkflowsProjectsLocationsWorkflowsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsWorkflowsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsWorkflowsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/workflows",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.WorkflowsProjectsLocationsWorkflowsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsWorkflowsListResponse =
        new operations.WorkflowsProjectsLocationsWorkflowsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listWorkflowsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListWorkflowsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow might be created as a result of a successful update operation. In that case, the new revision is used in new workflow executions.
   */
  workflowsProjectsLocationsWorkflowsPatch(
    req: operations.WorkflowsProjectsLocationsWorkflowsPatchRequest,
    security: operations.WorkflowsProjectsLocationsWorkflowsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.WorkflowsProjectsLocationsWorkflowsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.WorkflowsProjectsLocationsWorkflowsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "workflowInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.WorkflowsProjectsLocationsWorkflowsPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.WorkflowsProjectsLocationsWorkflowsPatchResponse =
        new operations.WorkflowsProjectsLocationsWorkflowsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
