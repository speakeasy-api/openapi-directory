// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// AnalyticsGroupByEnum - Defines the grouping of the data.
type AnalyticsGroupByEnum string

const (
	AnalyticsGroupByEnumDate       AnalyticsGroupByEnum = "date"
	AnalyticsGroupByEnumLabel      AnalyticsGroupByEnum = "label"
	AnalyticsGroupByEnumSubaccount AnalyticsGroupByEnum = "subaccount"
	AnalyticsGroupByEnumCountry    AnalyticsGroupByEnum = "country"
)

func (e *AnalyticsGroupByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "date":
		fallthrough
	case "label":
		fallthrough
	case "subaccount":
		fallthrough
	case "country":
		*e = AnalyticsGroupByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AnalyticsGroupByEnum: %s", s)
	}
}

type AnalyticsQueryParams struct {
	// End date of the statistics in the format YYYY-MM-DD. By default, the current day.
	End *string `queryParam:"style=form,explode=true,name=end"`
	// Defines the grouping of the data.
	GroupBy *AnalyticsGroupByEnum `queryParam:"style=form,explode=true,name=group_by"`
	// Shows only data of a specific label.
	Label *string `queryParam:"style=form,explode=true,name=label"`
	// Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.
	Start *string `queryParam:"style=form,explode=true,name=start"`
	// Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.
	Subaccounts *string `queryParam:"style=form,explode=true,name=subaccounts"`
}

type AnalyticsRequest struct {
	QueryParams AnalyticsQueryParams
}

// Analytics200ApplicationJSON - OK
type Analytics200ApplicationJSON struct {
	Date     *string  `json:"date,omitempty"`
	Direct   *int64   `json:"direct,omitempty"`
	Economy  *int64   `json:"economy,omitempty"`
	Hlr      *int64   `json:"hlr,omitempty"`
	Inbound  *int64   `json:"inbound,omitempty"`
	Mnp      *int64   `json:"mnp,omitempty"`
	UsageEur *float32 `json:"usage_eur,omitempty"`
	Voice    *int64   `json:"voice,omitempty"`
}

type AnalyticsResponse struct {
	// OK
	Analytics200ApplicationJSONObject *Analytics200ApplicationJSON
	ContentType                       string
	StatusCode                        int
	RawResponse                       *http.Response
}
