/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * Why the ACH transfer was declined.
 */
export enum InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum {
  AchRouteCanceled = "ach_route_canceled",
  AchRouteDisabled = "ach_route_disabled",
  BreachesLimit = "breaches_limit",
  CreditEntryRefusedByReceiver = "credit_entry_refused_by_receiver",
  DuplicateReturn = "duplicate_return",
  EntityNotActive = "entity_not_active",
  TransactionNotAllowed = "transaction_not_allowed",
  GroupLocked = "group_locked",
  InsufficientFunds = "insufficient_funds",
  NoAchRoute = "no_ach_route",
  OriginatorRequest = "originator_request",
}

/**
 * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
 */
export class InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_descriptive_date" })
  originatorCompanyDescriptiveDate: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_discretionary_data" })
  originatorCompanyDiscretionaryData: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_id" })
  originatorCompanyId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_name" })
  originatorCompanyName: string;

  /**
   * Why the ACH transfer was declined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDeclineReasonEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_id_number" })
  receiverIdNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_name" })
  receiverName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "trace_number" })
  traceNumber: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * The payment network used to process this card authorization
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum {
  Visa = "visa",
}

/**
 * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum {
  MailPhoneOrder = "mail_phone_order",
  Recurring = "recurring",
  Installment = "installment",
  UnknownMailPhoneOrder = "unknown_mail_phone_order",
  SecureElectronicCommerce = "secure_electronic_commerce",
  NonAuthenticatedSecurityTransactionAt3dsCapableMerchant = "non_authenticated_security_transaction_at_3ds_capable_merchant",
  NonAuthenticatedSecurityTransaction = "non_authenticated_security_transaction",
  NonSecureTransaction = "non_secure_transaction",
}

/**
 * The method used to enter the cardholder's primary account number and card expiration date
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum {
  Manual = "manual",
  MagneticStripeNoCvv = "magnetic_stripe_no_cvv",
  OpticalCode = "optical_code",
  IntegratedCircuitCard = "integrated_circuit_card",
  Contactless = "contactless",
  CredentialOnFile = "credential_on_file",
  MagneticStripe = "magnetic_stripe",
  ContactlessMagneticStripe = "contactless_magnetic_stripe",
  IntegratedCircuitCardNoCvv = "integrated_circuit_card_no_cvv",
}

/**
 * Fields specific to the `visa` network
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa extends SpeakeasyBase {
  /**
   * For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "electronic_commerce_indicator" })
  electronicCommerceIndicator: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaElectronicCommerceIndicatorEnum;

  /**
   * The method used to enter the cardholder's primary account number and card expiration date
   */
  @SpeakeasyMetadata()
  @Expose({ name: "point_of_service_entry_mode" })
  pointOfServiceEntryMode: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisaPointOfServiceEntryModeEnum;
}

/**
 * Fields specific to the `network`
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails extends SpeakeasyBase {
  /**
   * Fields specific to the `visa` network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "visa" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa
  )
  visa: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetailsVisa;
}

/**
 * Why the transaction was declined.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum {
  CardNotActive = "card_not_active",
  EntityNotActive = "entity_not_active",
  GroupLocked = "group_locked",
  InsufficientFunds = "insufficient_funds",
  Cvv2Mismatch = "cvv2_mismatch",
  TransactionNotAllowed = "transaction_not_allowed",
  BreachesLimit = "breaches_limit",
  WebhookDeclined = "webhook_declined",
  WebhookTimedOut = "webhook_timed_out",
  DeclinedByStandInProcessing = "declined_by_stand_in_processing",
}

/**
 * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineCurrencyEnum;

  /**
   * If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "digital_wallet_token_id" })
  digitalWalletTokenId: string;

  /**
   * The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_acceptor_id" })
  merchantAcceptorId: string;

  /**
   * The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_category_code" })
  merchantCategoryCode: string;

  /**
   * The city the merchant resides in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_city" })
  merchantCity: string;

  /**
   * The country the merchant resides in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_country" })
  merchantCountry: string;

  /**
   * The merchant descriptor of the merchant the card is transacting with.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_descriptor" })
  merchantDescriptor: string;

  /**
   * The state the merchant resides in.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "merchant_state" })
  merchantState: string;

  /**
   * The payment network used to process this card authorization
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  network: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkEnum;

  /**
   * Fields specific to the `network`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_details" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails
  )
  networkDetails: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineNetworkDetails;

  /**
   * The identifier of the Real-Time Decision sent to approve or decline this transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "real_time_decision_id" })
  realTimeDecisionId: string;

  /**
   * Why the transaction was declined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDeclineReasonEnum;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDeclineCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_acceptor_id" })
  merchantAcceptorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_category_code" })
  merchantCategoryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_city" })
  merchantCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_country" })
  merchantCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_descriptor" })
  merchantDescriptor: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_state" })
  merchantState: string;
}

/**
 * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum {
  AchDecline = "ach_decline",
  CardDecline = "card_decline",
  CheckDecline = "check_decline",
  InboundRealTimePaymentsTransferDecline = "inbound_real_time_payments_transfer_decline",
  InternationalAchDecline = "international_ach_decline",
  CardRouteDecline = "card_route_decline",
  Other = "other",
}

/**
 * Why the check was declined.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum {
  AchRouteCanceled = "ach_route_canceled",
  AchRouteDisabled = "ach_route_disabled",
  BreachesLimit = "breaches_limit",
  EntityNotActive = "entity_not_active",
  GroupLocked = "group_locked",
  InsufficientFunds = "insufficient_funds",
  UnableToLocateAccount = "unable_to_locate_account",
  UnableToProcess = "unable_to_process",
  ReferToImage = "refer_to_image",
  StopPaymentRequested = "stop_payment_requested",
  Returned = "returned",
}

/**
 * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "auxiliary_on_us" })
  auxiliaryOnUs: string;

  /**
   * Why the check was declined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDeclineReasonEnum;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * Why the transfer was declined.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum {
  AccountNumberCanceled = "account_number_canceled",
  AccountNumberDisabled = "account_number_disabled",
  GroupLocked = "group_locked",
  EntityNotActive = "entity_not_active",
  RealTimePaymentsNotEnabled = "real_time_payments_not_enabled",
}

/**
 * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The name the sender of the transfer specified as the recipient of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditor_name" })
  creditorName: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer's currency. This will always be "USD" for a Real Time Payments transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineCurrencyEnum;

  /**
   * The account number of the account that sent the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_account_number" })
  debtorAccountNumber: string;

  /**
   * The name provided by the sender of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_name" })
  debtorName: string;

  /**
   * The routing number of the account that sent the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_routing_number" })
  debtorRoutingNumber: string;

  /**
   * Why the transfer was declined.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDeclineReasonEnum;

  /**
   * Additional information included with the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittance_information" })
  remittanceInformation: string;

  /**
   * The Real Time Payments network identification of the declined transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_identification" })
  transactionIdentification: string;
}

/**
 * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
 */
export class InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline extends SpeakeasyBase {
  /**
   * The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "destination_country_code" })
  destinationCountryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destination_currency_code" })
  destinationCurrencyCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_indicator" })
  foreignExchangeIndicator: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_reference" })
  foreignExchangeReference: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_reference_indicator" })
  foreignExchangeReferenceIndicator: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_payment_amount" })
  foreignPaymentAmount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_trace_number" })
  foreignTraceNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "international_transaction_type_code" })
  internationalTransactionTypeCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_currency_code" })
  originatingCurrencyCode: string;

  @SpeakeasyMetadata()
  @Expose({
    name: "originating_depository_financial_institution_branch_country",
  })
  originatingDepositoryFinancialInstitutionBranchCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_id" })
  originatingDepositoryFinancialInstitutionId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_id_qualifier" })
  originatingDepositoryFinancialInstitutionIdQualifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_name" })
  originatingDepositoryFinancialInstitutionName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_city" })
  originatorCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_entry_description" })
  originatorCompanyEntryDescription: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_country" })
  originatorCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_identification" })
  originatorIdentification: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_name" })
  originatorName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_postal_code" })
  originatorPostalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_state_or_province" })
  originatorStateOrProvince: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_street_address" })
  originatorStreetAddress: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payment_related_information" })
  paymentRelatedInformation: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payment_related_information2" })
  paymentRelatedInformation2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_city" })
  receiverCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_country" })
  receiverCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_identification_number" })
  receiverIdentificationNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_postal_code" })
  receiverPostalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_state_or_province" })
  receiverStateOrProvince: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_street_address" })
  receiverStreetAddress: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_company_or_individual_name" })
  receivingCompanyOrIndividualName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_country" })
  receivingDepositoryFinancialInstitutionCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_id" })
  receivingDepositoryFinancialInstitutionId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_id_qualifier" })
  receivingDepositoryFinancialInstitutionIdQualifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_name" })
  receivingDepositoryFinancialInstitutionName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "trace_number" })
  traceNumber: string;
}

/**
 * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
 */
export class InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSource extends SpeakeasyBase {
  /**
   * A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_decline" })
  @Type(
    () =>
      InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline
  )
  achDecline: InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceACHDecline;

  /**
   * A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_decline" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline
  )
  cardDecline: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCardDecline;

  /**
   * A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_route_decline" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline
  )
  cardRouteDecline: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceDeprecatedCardDecline;

  /**
   * The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCategoryEnum;

  /**
   * A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_decline" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline
  )
  checkDecline: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceCheckDecline;

  /**
   * A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_real_time_payments_transfer_decline" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline
  )
  inboundRealTimePaymentsTransferDecline: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInboundRealTimePaymentsTransferDecline;

  /**
   * A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "international_ach_decline" })
  @Type(
    () =>
      InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline
  )
  internationalAchDecline: InboundACHTransferSimulationResultDeclinedTransactionDeclinedTransactionSourceInternationalACHDecline;
}

/**
 * A constant representing the object's type. For this resource it will always be `declined_transaction`.
 */
export enum InboundAchTransferSimulationResultDeclinedTransactionTypeEnum {
  DeclinedTransaction = "declined_transaction",
}

/**
 * If the ACH Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_ach_transfer`.
 */
export class InboundAchTransferSimulationResultDeclinedTransaction extends SpeakeasyBase {
  /**
   * The identifier for the Account the Declined Transaction belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultDeclinedTransactionCurrencyEnum;

  /**
   * This is the description the vendor provides.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The Declined Transaction identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route_id" })
  routeId: string;

  /**
   * The type of the route this Declined Transaction came through.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route_type" })
  routeType: string;

  /**
   * This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(
    () =>
      InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSource
  )
  source: InboundAchTransferSimulationResultDeclinedTransactionDeclinedTransactionSource;

  /**
   * A constant representing the object's type. For this resource it will always be `declined_transaction`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultDeclinedTransactionTypeEnum;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
 */
export enum InboundAchTransferSimulationResultTransactionCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceAccountTransferIntention extends SpeakeasyBase {
  /**
   * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceAccountTransferIntentionCurrencyEnum;

  /**
   * The description you chose to give the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The identifier of the Account to where the Account Transfer was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_account_id" })
  destinationAccountId: string;

  /**
   * The identifier of the Account from where the Account Transfer was sent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_account_id" })
  sourceAccountId: string;

  /**
   * The identifier of the Account Transfer that led to this Pending Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversion extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The identifier of the File containing an image of the returned check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;
}

/**
 * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * Why the transfer was returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_reason_code" })
  returnReasonCode: string;
}

/**
 * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferIntention extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber: string;

  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "routing_number" })
  routingNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "statement_descriptor" })
  statementDescriptor: string;

  /**
   * The identifier of the ACH Transfer that led to this Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferRejection extends SpeakeasyBase {
  /**
   * The identifier of the ACH Transfer that led to this Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * Why the ACH Transfer was returned.
 */
export enum InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum {
  InsufficientFund = "insufficient_fund",
  NoAccount = "no_account",
  AccountClosed = "account_closed",
  InvalidAccountNumberStructure = "invalid_account_number_structure",
  AccountFrozenEntryReturnedPerOfacInstruction = "account_frozen_entry_returned_per_ofac_instruction",
  CreditEntryRefusedByReceiver = "credit_entry_refused_by_receiver",
  UnauthorizedDebitToConsumerAccountUsingCorporateSecCode = "unauthorized_debit_to_consumer_account_using_corporate_sec_code",
  CorporateCustomerAdvisedNotAuthorized = "corporate_customer_advised_not_authorized",
  PaymentStopped = "payment_stopped",
  NonTransactionAccount = "non_transaction_account",
  UncollectedFunds = "uncollected_funds",
  RoutingNumberCheckDigitError = "routing_number_check_digit_error",
  CustomerAdvisedUnauthorizedImproperIneligibleOrIncomplete = "customer_advised_unauthorized_improper_ineligible_or_incomplete",
  AmountFieldError = "amount_field_error",
  AuthorizationRevokedByCustomer = "authorization_revoked_by_customer",
  InvalidAchRoutingNumber = "invalid_ach_routing_number",
  FileRecordEditCriteria = "file_record_edit_criteria",
  EnrInvalidIndividualName = "enr_invalid_individual_name",
  ReturnedPerOdfiRequest = "returned_per_odfi_request",
  AddendaError = "addenda_error",
  LimitedParticipationDfi = "limited_participation_dfi",
  IncorrectlyCodedOutboundInternationalPayment = "incorrectly_coded_outbound_international_payment",
  Other = "other",
}

/**
 * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferReturn extends SpeakeasyBase {
  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * Why the ACH Transfer was returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "return_reason_code" })
  returnReasonCode: InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferReturnReturnReasonCodeEnum;

  /**
   * The identifier of the Tranasaction associated with this return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * The identifier of the ACH Transfer associated with this return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance extends SpeakeasyBase {
  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accepted_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  acceptedAt: Date;

  /**
   * The identifier of the Card Dispute that was accepted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_dispute_id" })
  cardDisputeId: string;

  /**
   * The identifier of the Transaction that was created to return the disputed funds to your account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A constant representing the object's type. For this resource it will always be `card_refund`.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum {
  CardRefund = "card_refund",
}

/**
 * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCardRefund extends SpeakeasyBase {
  /**
   * The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The identifier for the Transaction this refunds, if any.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_settlement_transaction_id" })
  cardSettlementTransactionId: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceCardRefundCurrencyEnum;

  /**
   * A constant representing the object's type. For this resource it will always be `card_refund`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultTransactionTransactionSourceCardRefundTypeEnum;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund extends SpeakeasyBase {
  /**
   * The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefundCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_acceptor_id" })
  merchantAcceptorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_category_code" })
  merchantCategoryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_city" })
  merchantCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_country" })
  merchantCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_descriptor" })
  merchantDescriptor: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_state" })
  merchantState: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement extends SpeakeasyBase {
  /**
   * The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlementCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_acceptor_id" })
  merchantAcceptorId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_category_code" })
  merchantCategoryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_city" })
  merchantCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_country" })
  merchantCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_descriptor" })
  merchantDescriptor: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_state" })
  merchantState: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A constant representing the object's type. For this resource it will always be `card_settlement`.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum {
  CardSettlement = "card_settlement",
}

/**
 * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlement extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlementCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_category_code" })
  merchantCategoryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_city" })
  merchantCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_country" })
  merchantCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_name" })
  merchantName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "merchant_state" })
  merchantState: string;

  /**
   * The identifier of the Pending Transaction associated with this Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "pending_transaction_id" })
  pendingTransactionId: string;

  /**
   * The amount in the minor unit of the transaction's presentment currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presentment_amount" })
  presentmentAmount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "presentment_currency" })
  presentmentCurrency: string;

  /**
   * A constant representing the object's type. For this resource it will always be `card_settlement`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlementTypeEnum;
}

/**
 * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCategoryEnum {
  AccountTransferIntention = "account_transfer_intention",
  AchCheckConversionReturn = "ach_check_conversion_return",
  AchCheckConversion = "ach_check_conversion",
  AchTransferIntention = "ach_transfer_intention",
  AchTransferRejection = "ach_transfer_rejection",
  AchTransferReturn = "ach_transfer_return",
  CardDisputeAcceptance = "card_dispute_acceptance",
  CardRefund = "card_refund",
  CardSettlement = "card_settlement",
  CheckDepositAcceptance = "check_deposit_acceptance",
  CheckDepositReturn = "check_deposit_return",
  CheckTransferIntention = "check_transfer_intention",
  CheckTransferReturn = "check_transfer_return",
  CheckTransferRejection = "check_transfer_rejection",
  CheckTransferStopPaymentRequest = "check_transfer_stop_payment_request",
  DisputeResolution = "dispute_resolution",
  EmpyrealCashDeposit = "empyreal_cash_deposit",
  InboundAchTransfer = "inbound_ach_transfer",
  InboundAchTransferReturnIntention = "inbound_ach_transfer_return_intention",
  InboundCheck = "inbound_check",
  InboundInternationalAchTransfer = "inbound_international_ach_transfer",
  InboundRealTimePaymentsTransferConfirmation = "inbound_real_time_payments_transfer_confirmation",
  InboundWireDrawdownPaymentReversal = "inbound_wire_drawdown_payment_reversal",
  InboundWireDrawdownPayment = "inbound_wire_drawdown_payment",
  InboundWireReversal = "inbound_wire_reversal",
  InboundWireTransfer = "inbound_wire_transfer",
  InterestPayment = "interest_payment",
  InternalGeneralLedgerTransaction = "internal_general_ledger_transaction",
  InternalSource = "internal_source",
  CardRouteRefund = "card_route_refund",
  CardRouteSettlement = "card_route_settlement",
  RealTimePaymentsTransferAcknowledgement = "real_time_payments_transfer_acknowledgement",
  SampleFunds = "sample_funds",
  WireDrawdownPaymentIntention = "wire_drawdown_payment_intention",
  WireDrawdownPaymentRejection = "wire_drawdown_payment_rejection",
  WireTransferIntention = "wire_transfer_intention",
  WireTransferRejection = "wire_transfer_rejection",
  Other = "other",
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance extends SpeakeasyBase {
  /**
   * The account number printed on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber: string;

  /**
   * The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * An additional line of metadata printed on the check. This typically includes the check number for business checks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "auxiliary_on_us" })
  auxiliaryOnUs: string;

  /**
   * The ID of the Check Deposit that was accepted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_deposit_id" })
  checkDepositId: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptanceCurrencyEnum;

  /**
   * The routing number printed on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routing_number" })
  routingNumber: string;

  /**
   * The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serial_number" })
  serialNumber: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

export enum InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum {
  AchConversionNotSupported = "ach_conversion_not_supported",
  ClosedAccount = "closed_account",
  DuplicateSubmission = "duplicate_submission",
  InsufficientFunds = "insufficient_funds",
  NoAccount = "no_account",
  NotAuthorized = "not_authorized",
  StaleDated = "stale_dated",
  StopPayment = "stop_payment",
  UnknownReason = "unknown_reason",
  UnmatchedDetails = "unmatched_details",
  UnreadableImage = "unreadable_image",
}

/**
 * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturn extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The identifier of the Check Deposit that was returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_deposit_id" })
  checkDepositId: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturnCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "return_reason" })
  returnReason: InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturnReturnReasonEnum;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "returned_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  returnedAt: Date;

  /**
   * The identifier of the transaction that reversed the original check deposit transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferIntention extends SpeakeasyBase {
  /**
   * The city of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_city" })
  addressCity: string;

  /**
   * The street address of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line1" })
  addressLine1: string;

  /**
   * The second line of the address of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_line2" })
  addressLine2: string;

  /**
   * The state of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_state" })
  addressState: string;

  /**
   * The postal code of the check's destination.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "address_zip" })
  addressZip: string;

  /**
   * The transfer amount in USD cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferIntentionCurrencyEnum;

  /**
   * The name that will be printed on the check.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "recipient_name" })
  recipientName: string;

  /**
   * The identifier of the Check Transfer with which this is associated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferRejection extends SpeakeasyBase {
  /**
   * The identifier of the Check Transfer that led to this Transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferReturn extends SpeakeasyBase {
  /**
   * If available, a document with additional information about the return.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_id" })
  fileId: string;

  /**
   * The identifier of the returned Check Transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum {
  CheckTransferStopPaymentRequest = "check_transfer_stop_payment_request",
}

/**
 * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest extends SpeakeasyBase {
  /**
   * The time the stop-payment was requested.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "requested_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestedAt: Date;

  /**
   * The transaction ID of the corresponding credit transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * The ID of the check transfer that was stopped.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;

  /**
   * A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequestTypeEnum;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceDisputeResolution extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceDisputeResolutionCurrencyEnum;

  /**
   * The identifier of the Transaction that was disputed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disputed_transaction_id" })
  disputedTransactionId: string;
}

/**
 * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "bag_id" })
  bagId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "deposit_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  depositDate: Date;
}

/**
 * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceInboundACHTransfer extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_descriptive_date" })
  originatorCompanyDescriptiveDate: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_discretionary_data" })
  originatorCompanyDiscretionaryData: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_entry_description" })
  originatorCompanyEntryDescription: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_id" })
  originatorCompanyId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_name" })
  originatorCompanyName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_id_number" })
  receiverIdNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_name" })
  receiverName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "trace_number" })
  traceNumber: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundCheck extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "check_front_image_file_id" })
  checkFrontImageFileId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "check_number" })
  checkNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "check_rear_image_file_id" })
  checkRearImageFileId: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceInboundCheckCurrencyEnum;
}

/**
 * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
 */
export class InboundACHTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "destination_country_code" })
  destinationCountryCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "destination_currency_code" })
  destinationCurrencyCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_indicator" })
  foreignExchangeIndicator: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_reference" })
  foreignExchangeReference: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_exchange_reference_indicator" })
  foreignExchangeReferenceIndicator: string;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_payment_amount" })
  foreignPaymentAmount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "foreign_trace_number" })
  foreignTraceNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "international_transaction_type_code" })
  internationalTransactionTypeCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_currency_code" })
  originatingCurrencyCode: string;

  @SpeakeasyMetadata()
  @Expose({
    name: "originating_depository_financial_institution_branch_country",
  })
  originatingDepositoryFinancialInstitutionBranchCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_id" })
  originatingDepositoryFinancialInstitutionId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_id_qualifier" })
  originatingDepositoryFinancialInstitutionIdQualifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originating_depository_financial_institution_name" })
  originatingDepositoryFinancialInstitutionName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_city" })
  originatorCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_company_entry_description" })
  originatorCompanyEntryDescription: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_country" })
  originatorCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_identification" })
  originatorIdentification: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_name" })
  originatorName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_postal_code" })
  originatorPostalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_state_or_province" })
  originatorStateOrProvince: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_street_address" })
  originatorStreetAddress: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payment_related_information" })
  paymentRelatedInformation: string;

  @SpeakeasyMetadata()
  @Expose({ name: "payment_related_information2" })
  paymentRelatedInformation2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_city" })
  receiverCity: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_country" })
  receiverCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_identification_number" })
  receiverIdentificationNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_postal_code" })
  receiverPostalCode: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_state_or_province" })
  receiverStateOrProvince: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiver_street_address" })
  receiverStreetAddress: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_company_or_individual_name" })
  receivingCompanyOrIndividualName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_country" })
  receivingDepositoryFinancialInstitutionCountry: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_id" })
  receivingDepositoryFinancialInstitutionId: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_id_qualifier" })
  receivingDepositoryFinancialInstitutionIdQualifier: string;

  @SpeakeasyMetadata()
  @Expose({ name: "receiving_depository_financial_institution_name" })
  receivingDepositoryFinancialInstitutionName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "trace_number" })
  traceNumber: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The name the sender of the transfer specified as the recipient of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "creditor_name" })
  creditorName: string;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer's currency. This will always be "USD" for a Real Time Payments transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmationCurrencyEnum;

  /**
   * The account number of the account that sent the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_account_number" })
  debtorAccountNumber: string;

  /**
   * The name provided by the sender of the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_name" })
  debtorName: string;

  /**
   * The routing number of the account that sent the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "debtor_routing_number" })
  debtorRoutingNumber: string;

  /**
   * Additional information included with the transfer.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "remittance_information" })
  remittanceInformation: string;

  /**
   * The Real Time Payments network identification of the transfer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_identification" })
  transactionIdentification: string;
}

/**
 * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line1" })
  beneficiaryAddressLine1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line2" })
  beneficiaryAddressLine2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line3" })
  beneficiaryAddressLine3: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_name" })
  beneficiaryName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_reference" })
  beneficiaryReference: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "input_message_accountability_data" })
  inputMessageAccountabilityData: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line1" })
  originatorAddressLine1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line2" })
  originatorAddressLine2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line3" })
  originatorAddressLine3: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_name" })
  originatorName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information" })
  originatorToBeneficiaryInformation: string;
}

/**
 * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal extends SpeakeasyBase {
  /**
   * The amount that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The description on the reversal message from Fedwire.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The Fedwire cycle date for the wire reversal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_cycle_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  inputCycleDate: Date;

  /**
   * The Fedwire transaction identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_message_accountability_data" })
  inputMessageAccountabilityData: string;

  /**
   * The Fedwire sequence number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_sequence_number" })
  inputSequenceNumber: string;

  /**
   * The Fedwire input source identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_source" })
  inputSource: string;

  /**
   * The Fedwire cycle date for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_cycle_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  previousMessageInputCycleDate: Date;

  /**
   * The Fedwire transaction identifier for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_message_accountability_data" })
  previousMessageInputMessageAccountabilityData: string;

  /**
   * The Fedwire sequence number for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_sequence_number" })
  previousMessageInputSequenceNumber: string;

  /**
   * The Fedwire input source identifier for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_source" })
  previousMessageInputSource: string;
}

/**
 * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireReversal extends SpeakeasyBase {
  /**
   * The amount that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The description on the reversal message from Fedwire.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * Additional financial institution information included in the wire reversal.
   */
  @SpeakeasyMetadata()
  @Expose({
    name: "financial_institution_to_financial_institution_information",
  })
  financialInstitutionToFinancialInstitutionInformation: string;

  /**
   * The Fedwire cycle date for the wire reversal.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_cycle_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  inputCycleDate: Date;

  /**
   * The Fedwire transaction identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_message_accountability_data" })
  inputMessageAccountabilityData: string;

  /**
   * The Fedwire sequence number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_sequence_number" })
  inputSequenceNumber: string;

  /**
   * The Fedwire input source identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "input_source" })
  inputSource: string;

  /**
   * The Fedwire cycle date for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_cycle_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  previousMessageInputCycleDate: Date;

  /**
   * The Fedwire transaction identifier for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_message_accountability_data" })
  previousMessageInputMessageAccountabilityData: string;

  /**
   * The Fedwire sequence number for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_sequence_number" })
  previousMessageInputSequenceNumber: string;

  /**
   * The Fedwire input source identifier for the wire transfer that was reversed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_message_input_source" })
  previousMessageInputSource: string;

  /**
   * Information included in the wire reversal for the receiving financial institution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "receiver_financial_institution_information" })
  receiverFinancialInstitutionInformation: string;
}

/**
 * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireTransfer extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line1" })
  beneficiaryAddressLine1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line2" })
  beneficiaryAddressLine2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_address_line3" })
  beneficiaryAddressLine3: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_name" })
  beneficiaryName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "beneficiary_reference" })
  beneficiaryReference: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  @SpeakeasyMetadata()
  @Expose({ name: "input_message_accountability_data" })
  inputMessageAccountabilityData: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line1" })
  originatorAddressLine1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line2" })
  originatorAddressLine2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_address_line3" })
  originatorAddressLine3: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_name" })
  originatorName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information" })
  originatorToBeneficiaryInformation: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information_line1" })
  originatorToBeneficiaryInformationLine1: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information_line2" })
  originatorToBeneficiaryInformationLine2: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information_line3" })
  originatorToBeneficiaryInformationLine3: string;

  @SpeakeasyMetadata()
  @Expose({ name: "originator_to_beneficiary_information_line4" })
  originatorToBeneficiaryInformationLine4: string;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

/**
 * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInterestPayment extends SpeakeasyBase {
  /**
   * The account on which the interest was accrued.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accrued_on_account_id" })
  accruedOnAccountId: string;

  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceInterestPaymentCurrencyEnum;

  /**
   * The end of the period for which this transaction paid interest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period_end" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  periodEnd: Date;

  /**
   * The start of the period for which this transaction paid interest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "period_start" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  periodStart: Date;
}

/**
 * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
 */
export enum InboundAchTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum {
  Cad = "CAD",
  Chf = "CHF",
  Eur = "EUR",
  Gbp = "GBP",
  Jpy = "JPY",
  Usd = "USD",
}

export enum InboundAchTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum {
  BankMigration = "bank_migration",
  Cashback = "cashback",
  EmpyrealAdjustment = "empyreal_adjustment",
  Error = "error",
  ErrorCorrection = "error_correction",
  Fees = "fees",
  Interest = "interest",
  SampleFunds = "sample_funds",
  SampleFundsReturn = "sample_funds_return",
}

/**
 * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceInternalSource extends SpeakeasyBase {
  /**
   * The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionTransactionSourceInternalSourceCurrencyEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "reason" })
  reason: InboundAchTransferSimulationResultTransactionTransactionSourceInternalSourceReasonEnum;
}

/**
 * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceSampleFunds extends SpeakeasyBase {
  /**
   * Where the sample funds came from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "originator" })
  originator: string;
}

/**
 * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber: string;

  /**
   * The transfer amount in USD cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  @SpeakeasyMetadata()
  @Expose({ name: "message_to_recipient" })
  messageToRecipient: string;

  @SpeakeasyMetadata()
  @Expose({ name: "routing_number" })
  routingNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferIntention extends SpeakeasyBase {
  /**
   * The destination account number.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_number" })
  accountNumber: string;

  /**
   * The transfer amount in USD cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The message that will show on the recipient's bank statement.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message_to_recipient" })
  messageToRecipient: string;

  /**
   * The American Bankers' Association (ABA) Routing Transit Number (RTN).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "routing_number" })
  routingNumber: string;

  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferRejection extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "transfer_id" })
  transferId: string;
}

/**
 * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
 */
export class InboundAchTransferSimulationResultTransactionTransactionSource extends SpeakeasyBase {
  /**
   * A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_transfer_intention" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceAccountTransferIntention
  )
  accountTransferIntention: InboundAchTransferSimulationResultTransactionTransactionSourceAccountTransferIntention;

  /**
   * A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_check_conversion" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversion
  )
  achCheckConversion: InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversion;

  /**
   * A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_check_conversion_return" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn
  )
  achCheckConversionReturn: InboundACHTransferSimulationResultTransactionTransactionSourceACHCheckConversionReturn;

  /**
   * A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_transfer_intention" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferIntention
  )
  achTransferIntention: InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferIntention;

  /**
   * A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_transfer_rejection" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferRejection
  )
  achTransferRejection: InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferRejection;

  /**
   * A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ach_transfer_return" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferReturn
  )
  achTransferReturn: InboundACHTransferSimulationResultTransactionTransactionSourceACHTransferReturn;

  /**
   * A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_dispute_acceptance" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance
  )
  cardDisputeAcceptance: InboundAchTransferSimulationResultTransactionTransactionSourceCardDisputeAcceptance;

  /**
   * A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_refund" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCardRefund
  )
  cardRefund: InboundAchTransferSimulationResultTransactionTransactionSourceCardRefund;

  /**
   * A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_route_refund" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund
  )
  cardRouteRefund: InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardRefund;

  /**
   * A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_route_settlement" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement
  )
  cardRouteSettlement: InboundAchTransferSimulationResultTransactionTransactionSourceDeprecatedCardSettlement;

  /**
   * A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "card_settlement" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlement
  )
  cardSettlement: InboundAchTransferSimulationResultTransactionTransactionSourceCardSettlement;

  /**
   * The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category: InboundAchTransferSimulationResultTransactionTransactionSourceCategoryEnum;

  /**
   * A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_deposit_acceptance" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance
  )
  checkDepositAcceptance: InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositAcceptance;

  /**
   * A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_deposit_return" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturn
  )
  checkDepositReturn: InboundAchTransferSimulationResultTransactionTransactionSourceCheckDepositReturn;

  /**
   * A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_transfer_intention" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferIntention
  )
  checkTransferIntention: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferIntention;

  /**
   * A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_transfer_rejection" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferRejection
  )
  checkTransferRejection: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferRejection;

  /**
   * A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_transfer_return" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferReturn
  )
  checkTransferReturn: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferReturn;

  /**
   * A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "check_transfer_stop_payment_request" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest
  )
  checkTransferStopPaymentRequest: InboundAchTransferSimulationResultTransactionTransactionSourceCheckTransferStopPaymentRequest;

  /**
   * A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dispute_resolution" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceDisputeResolution
  )
  disputeResolution: InboundAchTransferSimulationResultTransactionTransactionSourceDisputeResolution;

  /**
   * A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "empyreal_cash_deposit" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit
  )
  empyrealCashDeposit: InboundAchTransferSimulationResultTransactionTransactionSourceEmpyrealCashDeposit;

  /**
   * A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_ach_transfer" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceInboundACHTransfer
  )
  inboundAchTransfer: InboundACHTransferSimulationResultTransactionTransactionSourceInboundACHTransfer;

  /**
   * A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_check" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundCheck
  )
  inboundCheck: InboundAchTransferSimulationResultTransactionTransactionSourceInboundCheck;

  /**
   * A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_international_ach_transfer" })
  @Type(
    () =>
      InboundACHTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer
  )
  inboundInternationalAchTransfer: InboundACHTransferSimulationResultTransactionTransactionSourceInboundInternationalACHTransfer;

  /**
   * A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_real_time_payments_transfer_confirmation" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation
  )
  inboundRealTimePaymentsTransferConfirmation: InboundAchTransferSimulationResultTransactionTransactionSourceInboundRealTimePaymentsTransferConfirmation;

  /**
   * A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_wire_drawdown_payment" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment
  )
  inboundWireDrawdownPayment: InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPayment;

  /**
   * A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_wire_drawdown_payment_reversal" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal
  )
  inboundWireDrawdownPaymentReversal: InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireDrawdownPaymentReversal;

  /**
   * A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_wire_reversal" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireReversal
  )
  inboundWireReversal: InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireReversal;

  /**
   * A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inbound_wire_transfer" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireTransfer
  )
  inboundWireTransfer: InboundAchTransferSimulationResultTransactionTransactionSourceInboundWireTransfer;

  /**
   * A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "interest_payment" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInterestPayment
  )
  interestPayment: InboundAchTransferSimulationResultTransactionTransactionSourceInterestPayment;

  /**
   * A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "internal_source" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceInternalSource
  )
  internalSource: InboundAchTransferSimulationResultTransactionTransactionSourceInternalSource;

  /**
   * A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sample_funds" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceSampleFunds
  )
  sampleFunds: InboundAchTransferSimulationResultTransactionTransactionSourceSampleFunds;

  /**
   * A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wire_drawdown_payment_intention" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention
  )
  wireDrawdownPaymentIntention: InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentIntention;

  /**
   * A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wire_drawdown_payment_rejection" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection
  )
  wireDrawdownPaymentRejection: InboundAchTransferSimulationResultTransactionTransactionSourceWireDrawdownPaymentRejection;

  /**
   * A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wire_transfer_intention" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferIntention
  )
  wireTransferIntention: InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferIntention;

  /**
   * A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wire_transfer_rejection" })
  @Type(
    () =>
      InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferRejection
  )
  wireTransferRejection: InboundAchTransferSimulationResultTransactionTransactionSourceWireTransferRejection;
}

/**
 * A constant representing the object's type. For this resource it will always be `transaction`.
 */
export enum InboundAchTransferSimulationResultTransactionTypeEnum {
  Transaction = "transaction",
}

/**
 * If the ACH Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_ach_transfer`.
 */
export class InboundAchTransferSimulationResultTransaction extends SpeakeasyBase {
  /**
   * The identifier for the Account the Transaction belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "account_id" })
  accountId: string;

  /**
   * The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "amount" })
  amount: number;

  /**
   * The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdAt: Date;

  /**
   * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: InboundAchTransferSimulationResultTransactionCurrencyEnum;

  /**
   * For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * The Transaction identifier.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * The identifier for the route this Transaction came through. Routes are things like cards and ACH details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route_id" })
  routeId: string;

  /**
   * The type of the route this Transaction came through.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "route_type" })
  routeType: string;

  /**
   * This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => InboundAchTransferSimulationResultTransactionTransactionSource)
  source: InboundAchTransferSimulationResultTransactionTransactionSource;

  /**
   * A constant representing the object's type. For this resource it will always be `transaction`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultTransactionTypeEnum;
}

/**
 * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.
 */
export enum InboundAchTransferSimulationResultTypeEnum {
  InboundAchTransferSimulationResult = "inbound_ach_transfer_simulation_result",
}

/**
 * The results of an inbound ACH Transfer simulation.
 */
export class InboundAchTransferSimulationResult extends SpeakeasyBase {
  /**
   * If the ACH Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_ach_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "declined_transaction" })
  @Type(() => InboundAchTransferSimulationResultDeclinedTransaction)
  declinedTransaction: InboundAchTransferSimulationResultDeclinedTransaction;

  /**
   * If the ACH Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_ach_transfer`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction" })
  @Type(() => InboundAchTransferSimulationResultTransaction)
  transaction: InboundAchTransferSimulationResultTransaction;

  /**
   * A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: InboundAchTransferSimulationResultTypeEnum;
}
