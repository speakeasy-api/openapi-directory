/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class InboundSamlSsoProfiles {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Creates an InboundSamlSsoProfile for a customer.
   */
  cloudidentityInboundSamlSsoProfilesCreate(
    req: operations.CloudidentityInboundSamlSsoProfilesCreateRequest,
    security: operations.CloudidentityInboundSamlSsoProfilesCreateSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityInboundSamlSsoProfilesCreateResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityInboundSamlSsoProfilesCreateRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/inboundSamlSsoProfiles";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "inboundSamlSsoProfileInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityInboundSamlSsoProfilesCreateSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityInboundSamlSsoProfilesCreateResponse =
        new operations.CloudidentityInboundSamlSsoProfilesCreateResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Adds an IdpCredential. Up to 2 credentials are allowed.
   */
  cloudidentityInboundSamlSsoProfilesIdpCredentialsAdd(
    req: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddRequest,
    security: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/idpCredentials:add",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "addIdpCredentialRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddResponse =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsAddResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns a list of IdpCredentials in an InboundSamlSsoProfile.
   */
  cloudidentityInboundSamlSsoProfilesIdpCredentialsList(
    req: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListRequest,
    security: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/idpCredentials",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListResponse =
        new operations.CloudidentityInboundSamlSsoProfilesIdpCredentialsListResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listIdpCredentialsResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListIdpCredentialsResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists InboundSamlSsoProfiles for a customer.
   */
  cloudidentityInboundSamlSsoProfilesList(
    req: operations.CloudidentityInboundSamlSsoProfilesListRequest,
    security: operations.CloudidentityInboundSamlSsoProfilesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CloudidentityInboundSamlSsoProfilesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CloudidentityInboundSamlSsoProfilesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v1/inboundSamlSsoProfiles";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.CloudidentityInboundSamlSsoProfilesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.CloudidentityInboundSamlSsoProfilesListResponse =
        new operations.CloudidentityInboundSamlSsoProfilesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listInboundSamlSsoProfilesResponse = utils.objectToClass(
              httpRes?.data,
              shared.ListInboundSamlSsoProfilesResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
