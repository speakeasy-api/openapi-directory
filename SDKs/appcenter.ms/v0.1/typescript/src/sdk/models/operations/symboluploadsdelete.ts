/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class SymbolUploadsDeleteSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Token",
  })
  apiToken: string;
}

export class SymbolUploadsDeleteRequest extends SpeakeasyBase {
  /**
   * The name of the application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_name",
  })
  appName: string;

  /**
   * The name of the owner
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner_name",
  })
  ownerName: string;

  /**
   * The ID of the symbol upload
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=symbol_upload_id",
  })
  symbolUploadId: string;
}

/**
 * Internal error
 */
export class SymbolUploadsDelete500ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Not found
 */
export class SymbolUploadsDelete404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Unauthorized
 */
export class SymbolUploadsDelete403ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * The origin of the symbol upload
 */
export enum SymbolUploadsDelete200ApplicationJSONOriginEnum {
  User = "User",
  System = "System",
}

/**
 * The current status for the symbol upload
 */
export enum SymbolUploadsDelete200ApplicationJSONStatusEnum {
  Created = "created",
  Committed = "committed",
  Aborted = "aborted",
  Processing = "processing",
  Indexed = "indexed",
  Failed = "failed",
}

/**
 * The type of the symbol for the current symbol upload
 */
export enum SymbolUploadsDelete200ApplicationJSONSymbolTypeEnum {
  Apple = "Apple",
  JavaScript = "JavaScript",
  Breakpad = "Breakpad",
  AndroidProguard = "AndroidProguard",
  Uwp = "UWP",
}

export class SymbolUploadsDelete200ApplicationJSONSymbolsUploaded extends SpeakeasyBase {
  /**
   * The platform the symbol is associated with
   */
  @SpeakeasyMetadata()
  @Expose({ name: "platform" })
  platform: string;

  /**
   * The symbol id of the symbol binary
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symbol_id" })
  symbolId: string;
}

/**
 * User information of the one who intitiated the symbol upload
 */
export class SymbolUploadsDelete200ApplicationJSONUser extends SpeakeasyBase {
  /**
   * The full name of the user. Might for example be first and last name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * The email of the user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;
}

/**
 * A single symbol upload entity
 */
export class SymbolUploadsDelete200ApplicationJSON extends SpeakeasyBase {
  /**
   * The application that this symbol upload belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_id" })
  appId: string;

  /**
   * The file name for the symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_name" })
  fileName?: string;

  /**
   * The size of the file in Mebibytes. This may be 0 until the status is indexed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "file_size" })
  fileSize?: number;

  /**
   * The origin of the symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: SymbolUploadsDelete200ApplicationJSONOriginEnum;

  /**
   * The current status for the symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: SymbolUploadsDelete200ApplicationJSONStatusEnum;

  /**
   * The type of the symbol for the current symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symbol_type" })
  symbolType: SymbolUploadsDelete200ApplicationJSONSymbolTypeEnum;

  /**
   * The id for the current symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "symbol_upload_id" })
  symbolUploadId: string;

  /**
   * The symbols found in the upload. This may be empty until the status is indexed
   */
  @SpeakeasyMetadata({
    elemType: SymbolUploadsDelete200ApplicationJSONSymbolsUploaded,
  })
  @Expose({ name: "symbols_uploaded" })
  @Type(() => SymbolUploadsDelete200ApplicationJSONSymbolsUploaded)
  symbolsUploaded?: SymbolUploadsDelete200ApplicationJSONSymbolsUploaded[];

  /**
   * When the symbol upload was committed, or last transaction time if not committed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  timestamp?: Date;

  /**
   * User information of the one who intitiated the symbol upload
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user" })
  @Type(() => SymbolUploadsDelete200ApplicationJSONUser)
  user?: SymbolUploadsDelete200ApplicationJSONUser;
}

export class SymbolUploadsDeleteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  symbolUploadsDelete200ApplicationJSONObject?: SymbolUploadsDelete200ApplicationJSON;

  /**
   * Unauthorized
   */
  @SpeakeasyMetadata()
  symbolUploadsDelete403ApplicationJSONObject?: SymbolUploadsDelete403ApplicationJSON;

  /**
   * Not found
   */
  @SpeakeasyMetadata()
  symbolUploadsDelete404ApplicationJSONObject?: SymbolUploadsDelete404ApplicationJSON;

  /**
   * Internal error
   */
  @SpeakeasyMetadata()
  symbolUploadsDelete500ApplicationJSONObject?: SymbolUploadsDelete500ApplicationJSON;
}
