// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// Feature - Feature represents the settings and status of any Hub Feature.
type Feature struct {
	// Output only. When the Feature resource was created.
	CreateTime *string `json:"createTime,omitempty"`
	// Output only. When the Feature resource was deleted.
	DeleteTime *string `json:"deleteTime,omitempty"`
	// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
	FleetDefaultMemberConfig map[string]interface{} `json:"fleetDefaultMemberConfig,omitempty"`
	// Labels for this Feature.
	Labels map[string]string `json:"labels,omitempty"`
	// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
	MembershipSpecs map[string]MembershipFeatureSpec `json:"membershipSpecs,omitempty"`
	// Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
	MembershipStates map[string]MembershipFeatureState `json:"membershipStates,omitempty"`
	// Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.
	Name *string `json:"name,omitempty"`
	// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
	ResourceState *FeatureResourceState `json:"resourceState,omitempty"`
	// Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
	ScopeSpecs map[string]map[string]interface{} `json:"scopeSpecs,omitempty"`
	// Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.
	ScopeStates map[string]ScopeFeatureState `json:"scopeStates,omitempty"`
	// CommonFeatureSpec contains Hub-wide configuration information
	Spec *CommonFeatureSpec `json:"spec,omitempty"`
	// CommonFeatureState contains Hub-wide Feature status information.
	State *CommonFeatureState `json:"state,omitempty"`
	// Output only. When the Feature resource was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// FeatureInput - Feature represents the settings and status of any Hub Feature.
type FeatureInput struct {
	// CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
	FleetDefaultMemberConfig map[string]interface{} `json:"fleetDefaultMemberConfig,omitempty"`
	// Labels for this Feature.
	Labels map[string]string `json:"labels,omitempty"`
	// Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
	MembershipSpecs map[string]MembershipFeatureSpecInput `json:"membershipSpecs,omitempty"`
	// FeatureResourceState describes the state of a Feature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the Feature in the Hub and across Memberships.
	ResourceState *FeatureResourceState `json:"resourceState,omitempty"`
	// Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
	ScopeSpecs map[string]map[string]interface{} `json:"scopeSpecs,omitempty"`
	// CommonFeatureSpec contains Hub-wide configuration information
	Spec *CommonFeatureSpec `json:"spec,omitempty"`
	// CommonFeatureState contains Hub-wide Feature status information.
	State *CommonFeatureState `json:"state,omitempty"`
}
