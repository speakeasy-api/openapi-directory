<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - NFL projected stats API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'http://azure-api.sportsdata.io/v3/nfl/projections',
		'https://azure-api.sportsdata.io/v3/nfl/projections',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	private ?Models\Shared\Security $_security;
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client	 
	 * @param Models\Shared\Security|null $security
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, ?Models\Shared\Security $security, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($security !== null) {
			$this->_security = $security;
			$this->_securityClient = Utils\Utils::configureSecurityClient($this->_defaultClient, $this->_security);
		}
		
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * DFS Slate Ownership Projections by SlateID
     * 
     * Slate Ownership Projections for a specific slate. Projections are for GPP format ownership. Will return an empty list if the slate is not yet projected or not a slate we have projections for.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidResponse
     */
	public function dfsSlateOwnershipProjectionsBySlateid(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlateOwnershipProjectionsBySlateID/{slateId}', \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlateOwnershipProjectionsBySlateidResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlateWithOwnershipProjection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\DfsSlateWithOwnershipProjection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DFS Slates by Date
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse
     */
	public function dfsSlatesByDate(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlatesByDate/{date}', \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByDateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * DFS Slates by Week
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse
     */
	public function dfsSlatesByWeek(
        \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/DfsSlatesByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DfsSlatesByWeekResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlates = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlate>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * IDP Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse
     */
	public function idpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/IdpPlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * IDP Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse
     */
	public function idpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/IdpPlayerGameProjectionStatsByTeam/{season}/{week}/{team}', \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * IDP Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse
     */
	public function idpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/IdpPlayerGameProjectionStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\IdpProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Injured Players
     * 
     * This endpoint provides all currently injured NFL players, along with injury details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
     */
	public function injuredPlayers(
        \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/InjuredPlayers', \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\InjuredPlayersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->players = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\Player>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Fantasy Defense Game Stats (w/ DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesResponse
     */
	public function projectedFantasyDefenseGameStatsWDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseProjectionsByGame/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseGameStatsWDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseGameProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyDefenseGameProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Fantasy Defense Season Stats (w/ ADP)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpResponse
     */
	public function projectedFantasyDefenseSeasonStatsWAdp(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/FantasyDefenseProjectionsBySeason/{season}', \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedFantasyDefenseSeasonStatsWAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->fantasyDefenseSeasonProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\FantasyDefenseSeasonProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Game Stats by Player (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse
     */
	public function projectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameProjectionStatsByPlayerID/{season}/{week}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByPlayerWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Game Stats by Team (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse
     */
	public function projectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameProjectionStatsByTeam/{season}/{week}/{team}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByTeamWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Game Stats by Week (w/ Injuries, Lineups, DFS Salaries)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse
     */
	public function projectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalaries(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerGameProjectionStatsByWeek/{season}/{week}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerGameStatsByWeekWInjuriesLineupsDfsSalariesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerGameProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerGameProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Season Stats by Player (w/ ADP)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpResponse
     */
	public function projectedPlayerSeasonStatsByPlayerWAdp(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonProjectionStatsByPlayerID/{season}/{playerid}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByPlayerWAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonProjection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PlayerSeasonProjection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Season Stats by Team (w/ ADP)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpResponse
     */
	public function projectedPlayerSeasonStatsByTeamWAdp(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonProjectionStatsByTeam/{season}/{team}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsByTeamWAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Projected Player Season Stats (w/ ADP)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpResponse
     */
	public function projectedPlayerSeasonStatsWAdp(
        \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/PlayerSeasonProjectionStats/{season}', \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ProjectedPlayerSeasonStatsWAdpResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->playerSeasonProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\PlayerSeasonProjection>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Upcoming DFS Slate Ownership Projections
     * 
     * Grabs DFS Slates which have not yet started for which we have DFS Ownership projections. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsResponse
     */
	public function upcomingDfsSlateOwnershipProjections(
        \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/{format}/UpcomingDfsSlateOwnershipProjections', \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpcomingDfsSlateOwnershipProjectionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->dfsSlateWithOwnershipProjections = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\DfsSlateWithOwnershipProjection>', 'json');
            }
        }

        return $response;
    }
}