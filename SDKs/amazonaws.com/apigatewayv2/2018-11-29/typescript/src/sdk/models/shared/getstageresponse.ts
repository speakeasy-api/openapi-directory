/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { RouteSettings } from "./routesettings";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Settings for logging access in this stage.
 */
export class GetStageResponseAccessLogSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DestinationArn" })
  destinationArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Format" })
  format?: string;
}

/**
 * Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
 */
export enum GetStageResponseDefaultRouteSettingsLoggingLevelEnum {
  Error = "ERROR",
  Info = "INFO",
  Off = "OFF",
}

/**
 * Default route settings for the stage.
 */
export class GetStageResponseDefaultRouteSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "DataTraceEnabled" })
  dataTraceEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "DetailedMetricsEnabled" })
  detailedMetricsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "LoggingLevel" })
  loggingLevel?: GetStageResponseDefaultRouteSettingsLoggingLevelEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "ThrottlingBurstLimit" })
  throttlingBurstLimit?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "ThrottlingRateLimit" })
  throttlingRateLimit?: number;
}

/**
 * Success
 */
export class GetStageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "AccessLogSettings" })
  @Type(() => GetStageResponseAccessLogSettings)
  accessLogSettings?: GetStageResponseAccessLogSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "ApiGatewayManaged" })
  apiGatewayManaged?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "AutoDeploy" })
  autoDeploy?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "ClientCertificateId" })
  clientCertificateId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CreatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  createdDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DefaultRouteSettings" })
  @Type(() => GetStageResponseDefaultRouteSettings)
  defaultRouteSettings?: GetStageResponseDefaultRouteSettings;

  @SpeakeasyMetadata()
  @Expose({ name: "DeploymentId" })
  deploymentId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "Description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastDeploymentStatusMessage" })
  lastDeploymentStatusMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdatedDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdatedDate?: Date;

  @SpeakeasyMetadata({ elemType: RouteSettings })
  @Expose({ name: "RouteSettings" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, RouteSettings> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], RouteSettings);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  routeSettings?: Record<string, RouteSettings>;

  @SpeakeasyMetadata()
  @Expose({ name: "StageName" })
  stageName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "StageVariables" })
  stageVariables?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "Tags" })
  tags?: Record<string, string>;
}
