// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// HubStateEnum - Output only. The current lifecycle state of this hub.
type HubStateEnum string

const (
	HubStateEnumStateUnspecified HubStateEnum = "STATE_UNSPECIFIED"
	HubStateEnumCreating         HubStateEnum = "CREATING"
	HubStateEnumActive           HubStateEnum = "ACTIVE"
	HubStateEnumDeleting         HubStateEnum = "DELETING"
	HubStateEnumUpdating         HubStateEnum = "UPDATING"
)

func (e HubStateEnum) ToPointer() *HubStateEnum {
	return &e
}

func (e *HubStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "CREATING":
		fallthrough
	case "ACTIVE":
		fallthrough
	case "DELETING":
		fallthrough
	case "UPDATING":
		*e = HubStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HubStateEnum: %v", v)
	}
}

// Hub - A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.
type Hub struct {
	// Output only. The time the hub was created.
	CreateTime *string `json:"createTime,omitempty"`
	// An optional description of the hub.
	Description *string `json:"description,omitempty"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `json:"labels,omitempty"`
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name *string `json:"name,omitempty"`
	// The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.
	RoutingVpcs []RoutingVPC `json:"routingVpcs,omitempty"`
	// Output only. The current lifecycle state of this hub.
	State *HubStateEnum `json:"state,omitempty"`
	// Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.
	UniqueID *string `json:"uniqueId,omitempty"`
	// Output only. The time the hub was last updated.
	UpdateTime *string `json:"updateTime,omitempty"`
}

// HubInput - A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.
type HubInput struct {
	// An optional description of the hub.
	Description *string `json:"description,omitempty"`
	// Optional labels in key:value format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
	Labels map[string]string `json:"labels,omitempty"`
	// Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
	Name *string `json:"name,omitempty"`
	// The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.
	RoutingVpcs []RoutingVPCInput `json:"routingVpcs,omitempty"`
}
