/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Userorderdetails - OK
 */
public class Userorderdetails {
    /**
     * Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.
     */
    @JsonProperty("affiliateId")
    public String affiliateId;
    public Userorderdetails withAffiliateId(String affiliateId) {
        this.affiliateId = affiliateId;
        return this;
    }
    
    /**
     * When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.
     */
    @JsonProperty("allowCancellation")
    public Boolean allowCancellation;
    public Userorderdetails withAllowCancellation(Boolean allowCancellation) {
        this.allowCancellation = allowCancellation;
        return this;
    }
    
    /**
     * When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.
     */
    @JsonProperty("allowEdition")
    public Boolean allowEdition;
    public Userorderdetails withAllowEdition(Boolean allowEdition) {
        this.allowEdition = allowEdition;
        return this;
    }
    
    /**
     * Authorized order date.
     */
    @JsonProperty("authorizedDate")
    public String authorizedDate;
    public Userorderdetails withAuthorizedDate(String authorizedDate) {
        this.authorizedDate = authorizedDate;
        return this;
    }
    
    /**
     * Call center operator responsible for the order.
     */
    @JsonProperty("callCenterOperatorData")
    public String callCenterOperatorData;
    public Userorderdetails withCallCenterOperatorData(String callCenterOperatorData) {
        this.callCenterOperatorData = callCenterOperatorData;
        return this;
    }
    
    /**
     * Reason for order cancellation.
     */
    @JsonProperty("cancelReason")
    public String cancelReason;
    public Userorderdetails withCancelReason(String cancelReason) {
        this.cancelReason = cancelReason;
        return this;
    }
    
    /**
     * Information about order cancellation, when it applies.
     */
    @JsonProperty("cancellationData")
    public UserorderdetailsCancellationData cancellationData;
    public Userorderdetails withCancellationData(UserorderdetailsCancellationData cancellationData) {
        this.cancellationData = cancellationData;
        return this;
    }
    
    /**
     * Information about changes in the order.
     */
    @JsonProperty("changesAttachment")
    public ChangesAttachment changesAttachment;
    public Userorderdetails withChangesAttachment(ChangesAttachment changesAttachment) {
        this.changesAttachment = changesAttachment;
        return this;
    }
    
    /**
     * If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.
     */
    @JsonProperty("checkedInPickupPointId")
    public String checkedInPickupPointId;
    public Userorderdetails withCheckedInPickupPointId(String checkedInPickupPointId) {
        this.checkedInPickupPointId = checkedInPickupPointId;
        return this;
    }
    
    /**
     * Information about customer's preferences.
     */
    @JsonProperty("clientPreferencesData")
    public UserorderdetailsClientPreferencesData clientPreferencesData;
    public Userorderdetails withClientPreferencesData(UserorderdetailsClientPreferencesData clientPreferencesData) {
        this.clientPreferencesData = clientPreferencesData;
        return this;
    }
    
    /**
     * Object with information on the client's profile.
     */
    @JsonProperty("clientProfileData")
    public ClientProfileData clientProfileData;
    public Userorderdetails withClientProfileData(ClientProfileData clientProfileData) {
        this.clientProfileData = clientProfileData;
        return this;
    }
    
    /**
     * Information about commercial conditions.
     */
    @JsonProperty("commercialConditionData")
    public String commercialConditionData;
    public Userorderdetails withCommercialConditionData(String commercialConditionData) {
        this.commercialConditionData = commercialConditionData;
        return this;
    }
    
    /**
     * Order's creation date.
     */
    @JsonProperty("creationDate")
    public String creationDate;
    public Userorderdetails withCreationDate(String creationDate) {
        this.creationDate = creationDate;
        return this;
    }
    
    /**
     * Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.
     */
    @JsonProperty("customData")
    public String customData;
    public Userorderdetails withCustomData(String customData) {
        this.customData = customData;
        return this;
    }
    
    /**
     * Email of the store's employee responsible for managing the order.
     */
    @JsonProperty("followUpEmail")
    public String followUpEmail;
    public Userorderdetails withFollowUpEmail(String followUpEmail) {
        this.followUpEmail = followUpEmail;
        return this;
    }
    
    /**
     * Information about gift list, when it applies.
     */
    @JsonProperty("giftRegistryData")
    public String giftRegistryData;
    public Userorderdetails withGiftRegistryData(String giftRegistryData) {
        this.giftRegistryData = giftRegistryData;
        return this;
    }
    
    /**
     * Account Hostname registered in License Manager.
     */
    @JsonProperty("hostname")
    public String hostname;
    public Userorderdetails withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * Information pertinent to the order's invoice.
     */
    @JsonProperty("invoiceData")
    public java.util.Map<String, Object> invoiceData;
    public Userorderdetails withInvoiceData(java.util.Map<String, Object> invoiceData) {
        this.invoiceData = invoiceData;
        return this;
    }
    
    /**
     * Order's invoice date.
     */
    @JsonProperty("invoicedDate")
    public String invoicedDate;
    public Userorderdetails withInvoicedDate(String invoicedDate) {
        this.invoicedDate = invoicedDate;
        return this;
    }
    
    /**
     * This field is set `true` when the order was made via inStore and `false` when it was not.
     */
    @JsonProperty("isCheckedIn")
    public Boolean isCheckedIn;
    public Userorderdetails withIsCheckedIn(Boolean isCheckedIn) {
        this.isCheckedIn = isCheckedIn;
        return this;
    }
    
    /**
     * When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.
     */
    @JsonProperty("isCompleted")
    public Boolean isCompleted;
    public Userorderdetails withIsCompleted(Boolean isCompleted) {
        this.isCompleted = isCompleted;
        return this;
    }
    
    /**
     * Metadata information about the order's items.
     */
    @JsonProperty("itemMetadata")
    public UserorderdetailsItemMetadata itemMetadata;
    public Userorderdetails withItemMetadata(UserorderdetailsItemMetadata itemMetadata) {
        this.itemMetadata = itemMetadata;
        return this;
    }
    
    /**
     * Information about order's items.
     */
    @JsonProperty("items")
    public Item[] items;
    public Userorderdetails withItems(Item[] items) {
        this.items = items;
        return this;
    }
    
    /**
     * Order's last change date.
     */
    @JsonProperty("lastChange")
    public String lastChange;
    public Userorderdetails withLastChange(String lastChange) {
        this.lastChange = lastChange;
        return this;
    }
    
    /**
     * Last sent transactional message.
     */
    @JsonProperty("lastMessage")
    public String lastMessage;
    public Userorderdetails withLastMessage(String lastMessage) {
        this.lastMessage = lastMessage;
        return this;
    }
    
    /**
     * Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.
     */
    @JsonProperty("marketingData")
    public UserorderdetailsMarketingData marketingData;
    public Userorderdetails withMarketingData(UserorderdetailsMarketingData marketingData) {
        this.marketingData = marketingData;
        return this;
    }
    
    /**
     * Details about the marketplace related to the order.
     */
    @JsonProperty("marketplace")
    public Marketplace marketplace;
    public Userorderdetails withMarketplace(Marketplace marketplace) {
        this.marketplace = marketplace;
        return this;
    }
    
    /**
     * Marketplace details object.
     */
    @JsonProperty("marketplaceItems")
    public String[] marketplaceItems;
    public Userorderdetails withMarketplaceItems(String[] marketplaceItems) {
        this.marketplaceItems = marketplaceItems;
        return this;
    }
    
    /**
     * Marketplace order ID.
     */
    @JsonProperty("marketplaceOrderId")
    public String marketplaceOrderId;
    public Userorderdetails withMarketplaceOrderId(String marketplaceOrderId) {
        this.marketplaceOrderId = marketplaceOrderId;
        return this;
    }
    
    /**
     * Marketplace services endpoint.
     */
    @JsonProperty("marketplaceServicesEndpoint")
    public String marketplaceServicesEndpoint;
    public Userorderdetails withMarketplaceServicesEndpoint(String marketplaceServicesEndpoint) {
        this.marketplaceServicesEndpoint = marketplaceServicesEndpoint;
        return this;
    }
    
    /**
     * Name of the merchant.
     */
    @JsonProperty("merchantName")
    public String merchantName;
    public Userorderdetails withMerchantName(String merchantName) {
        this.merchantName = merchantName;
        return this;
    }
    
    /**
     * Optional field with order's additional information. This field must be filled in using the following format: 
     * ```
     * {
     *     "fieldExample": "ValueExample"
     *   }
     * ```
     * 
     */
    @JsonProperty("openTextField")
    public String openTextField;
    public Userorderdetails withOpenTextField(String openTextField) {
        this.openTextField = openTextField;
        return this;
    }
    
    /**
     * [Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID. 
     */
    @JsonProperty("orderFormId")
    public String orderFormId;
    public Userorderdetails withOrderFormId(String orderFormId) {
        this.orderFormId = orderFormId;
        return this;
    }
    
    /**
     * Order's group ID.
     */
    @JsonProperty("orderGroup")
    public String orderGroup;
    public Userorderdetails withOrderGroup(String orderGroup) {
        this.orderGroup = orderGroup;
        return this;
    }
    
    /**
     * Order ID is a unique code that identifies an order.
     */
    @JsonProperty("orderId")
    public String orderId;
    public Userorderdetails withOrderId(String orderId) {
        this.orderId = orderId;
        return this;
    }
    
    /**
     * Order Origin, if `Marketplace` or `Fulfillment`.
     */
    @JsonProperty("origin")
    public String origin;
    public Userorderdetails withOrigin(String origin) {
        this.origin = origin;
        return this;
    }
    
    /**
     * Package object populated after order invoiced.
     */
    @JsonProperty("packageAttachment")
    public PackageAttachment packageAttachment;
    public Userorderdetails withPackageAttachment(PackageAttachment packageAttachment) {
        this.packageAttachment = packageAttachment;
        return this;
    }
    
    /**
     * Object with information about the payment.
     */
    @JsonProperty("paymentData")
    public PaymentData paymentData;
    public Userorderdetails withPaymentData(PaymentData paymentData) {
        this.paymentData = paymentData;
        return this;
    }
    
    /**
     * Information on promotions and taxes that apply to the order.
     */
    @JsonProperty("ratesAndBenefitsData")
    public RatesAndBenefitsData ratesAndBenefitsData;
    public Userorderdetails withRatesAndBenefitsData(RatesAndBenefitsData ratesAndBenefitsData) {
        this.ratesAndBenefitsData = ratesAndBenefitsData;
        return this;
    }
    
    /**
     * Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.
     */
    @JsonProperty("roundingError")
    public Integer roundingError;
    public Userorderdetails withRoundingError(Integer roundingError) {
        this.roundingError = roundingError;
        return this;
    }
    
    /**
     * Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.
     */
    @JsonProperty("salesChannel")
    public String salesChannel;
    public Userorderdetails withSalesChannel(String salesChannel) {
        this.salesChannel = salesChannel;
        return this;
    }
    
    /**
     * ID of the seller related to the order. It can be a VTEX seller or an external seller.
     */
    @JsonProperty("sellerOrderId")
    public String sellerOrderId;
    public Userorderdetails withSellerOrderId(String sellerOrderId) {
        this.sellerOrderId = sellerOrderId;
        return this;
    }
    
    /**
     * List of all sellers associated with the order.
     */
    @JsonProperty("sellers")
    public Seller[] sellers;
    public Userorderdetails withSellers(Seller[] sellers) {
        this.sellers = sellers;
        return this;
    }
    
    /**
     * Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.
     */
    @JsonProperty("sequence")
    public String sequence;
    public Userorderdetails withSequence(String sequence) {
        this.sequence = sequence;
        return this;
    }
    
    /**
     * Object containing shipping data.
     */
    @JsonProperty("shippingData")
    public ShippingData shippingData;
    public Userorderdetails withShippingData(ShippingData shippingData) {
        this.shippingData = shippingData;
        return this;
    }
    
    /**
     * Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).
     */
    @JsonProperty("status")
    public String status;
    public Userorderdetails withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * `Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.
     */
    @JsonProperty("statusDescription")
    public String statusDescription;
    public Userorderdetails withStatusDescription(String statusDescription) {
        this.statusDescription = statusDescription;
        return this;
    }
    
    /**
     * Object with data from the store's configuration - stored in VTEX's License Manager.
     */
    @JsonProperty("storePreferencesData")
    public StorePreferencesData storePreferencesData;
    public Userorderdetails withStorePreferencesData(StorePreferencesData storePreferencesData) {
        this.storePreferencesData = storePreferencesData;
        return this;
    }
    
    /**
     * Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).
     */
    @JsonProperty("subscriptionData")
    public UserorderdetailsSubscriptionData subscriptionData;
    public Userorderdetails withSubscriptionData(UserorderdetailsSubscriptionData subscriptionData) {
        this.subscriptionData = subscriptionData;
        return this;
    }
    
    /**
     * Order's tax information.
     */
    @JsonProperty("taxData")
    public UserorderdetailsTaxData taxData;
    public Userorderdetails withTaxData(UserorderdetailsTaxData taxData) {
        this.taxData = taxData;
        return this;
    }
    
    /**
     * List with details about orders' totals.
     */
    @JsonProperty("totals")
    public Total[] totals;
    public Userorderdetails withTotals(Total[] totals) {
        this.totals = totals;
        return this;
    }
    
    /**
     * Order's total amount.
     */
    @JsonProperty("value")
    public Integer value;
    public Userorderdetails withValue(Integer value) {
        this.value = value;
        return this;
    }
    
}
