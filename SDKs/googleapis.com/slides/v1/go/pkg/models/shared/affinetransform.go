// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AffineTransformUnitEnum - The units for translate elements.
type AffineTransformUnitEnum string

const (
	AffineTransformUnitEnumUnitUnspecified AffineTransformUnitEnum = "UNIT_UNSPECIFIED"
	AffineTransformUnitEnumEmu             AffineTransformUnitEnum = "EMU"
	AffineTransformUnitEnumPt              AffineTransformUnitEnum = "PT"
)

func (e *AffineTransformUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNIT_UNSPECIFIED":
		fallthrough
	case "EMU":
		fallthrough
	case "PT":
		*e = AffineTransformUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AffineTransformUnitEnum: %s", s)
	}
}

// AffineTransform - AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
type AffineTransform struct {
	// The X coordinate scaling element.
	ScaleX *float64 `json:"scaleX,omitempty"`
	// The Y coordinate scaling element.
	ScaleY *float64 `json:"scaleY,omitempty"`
	// The X coordinate shearing element.
	ShearX *float64 `json:"shearX,omitempty"`
	// The Y coordinate shearing element.
	ShearY *float64 `json:"shearY,omitempty"`
	// The X coordinate translation element.
	TranslateX *float64 `json:"translateX,omitempty"`
	// The Y coordinate translation element.
	TranslateY *float64 `json:"translateY,omitempty"`
	// The units for translate elements.
	Unit *AffineTransformUnitEnum `json:"unit,omitempty"`
}
