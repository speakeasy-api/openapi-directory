"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import language_enum as shared_language_enum
from ..shared import security as shared_security
from ..shared import videosearchresults as shared_videosearchresults
from datetime import date
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class SearchVideosSecurity:
    
    basic: Optional[shared_security.SchemeBasic] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'basic' }})  
    customer_access_code: Optional[str] = dataclasses.field(default=None, metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class SearchVideosAspectRatioEnum(str, Enum):
    r"""Show videos with the specified aspect ratio"""
    FOUR_3 = '4_3'
    SIXTEEN_9 = '16_9'
    NONSTANDARD = 'nonstandard'

class SearchVideosLicenseEnum(str, Enum):
    COMMERCIAL = 'commercial'
    EDITORIAL = 'editorial'

class SearchVideosPeopleAgeEnum(str, Enum):
    r"""Show videos that feature people of the specified age range"""
    INFANTS = 'infants'
    CHILDREN = 'children'
    TEENAGERS = 'teenagers'
    TWENTYS = '20s'
    THIRTYS = '30s'
    FORTYS = '40s'
    FIFTYS = '50s'
    SIXTYS = '60s'
    OLDER = 'older'

class SearchVideosPeopleEthnicityEnum(str, Enum):
    AFRICAN = 'african'
    AFRICAN_AMERICAN = 'african_american'
    BLACK = 'black'
    BRAZILIAN = 'brazilian'
    CHINESE = 'chinese'
    CAUCASIAN = 'caucasian'
    EAST_ASIAN = 'east_asian'
    HISPANIC = 'hispanic'
    JAPANESE = 'japanese'
    MIDDLE_EASTERN = 'middle_eastern'
    NATIVE_AMERICAN = 'native_american'
    PACIFIC_ISLANDER = 'pacific_islander'
    SOUTH_ASIAN = 'south_asian'
    SOUTHEAST_ASIAN = 'southeast_asian'
    OTHER = 'other'

class SearchVideosPeopleGenderEnum(str, Enum):
    r"""Show videos with people with the specified gender"""
    MALE = 'male'
    FEMALE = 'female'
    BOTH = 'both'

class SearchVideosResolutionEnum(str, Enum):
    r"""Show videos with the specified resolution"""
    FOURK = '4k'
    STANDARD_DEFINITION = 'standard_definition'
    HIGH_DEFINITION = 'high_definition'

class SearchVideosSortEnum(str, Enum):
    r"""Sort by one of these categories"""
    NEWEST = 'newest'
    POPULAR = 'popular'
    RELEVANCE = 'relevance'
    RANDOM = 'random'

class SearchVideosViewEnum(str, Enum):
    r"""Amount of detail to render in the response"""
    MINIMAL = 'minimal'
    FULL = 'full'


@dataclasses.dataclass
class SearchVideosRequest:
    
    added_date: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date', 'style': 'form', 'explode': True }})
    r"""Show videos added on the specified date"""  
    added_date_end: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date_end', 'style': 'form', 'explode': True }})
    r"""Show videos added before the specified date"""  
    added_date_start: Optional[date] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'added_date_start', 'style': 'form', 'explode': True }})
    r"""Show videos added on or after the specified date"""  
    aspect_ratio: Optional[SearchVideosAspectRatioEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'aspect_ratio', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified aspect ratio"""  
    category: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'category', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified Shutterstock-defined category; specify a category name or ID"""  
    contributor: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contributor', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified artist names or IDs"""  
    contributor_country: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'contributor_country', 'style': 'form', 'explode': True }})
    r"""Show videos from contributors in one or more specified countries"""  
    duration: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration', 'style': 'form', 'explode': True }})
    r"""(Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds"""  
    duration_from: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_from', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified duration or longer in seconds"""  
    duration_to: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'duration_to', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified duration or shorter in seconds"""  
    fps: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fps', 'style': 'form', 'explode': True }})
    r"""(Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second"""  
    fps_from: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fps_from', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified frames per second or more"""  
    fps_to: Optional[float] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fps_to', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified frames per second or fewer"""  
    keyword_safe_search: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'keyword_safe_search', 'style': 'form', 'explode': True }})
    r"""Hide results with potentially unsafe keywords"""  
    language: Optional[shared_language_enum.LanguageEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'language', 'style': 'form', 'explode': True }})
    r"""Set query and result language (uses Accept-Language header if not set)"""  
    license: Optional[list[SearchVideosLicenseEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'license', 'style': 'form', 'explode': True }})
    r"""Show only videos with the specified license or licenses"""  
    model: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'model', 'style': 'form', 'explode': True }})
    r"""Show videos with each of the specified models"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""Page number"""  
    people_age: Optional[SearchVideosPeopleAgeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'people_age', 'style': 'form', 'explode': True }})
    r"""Show videos that feature people of the specified age range"""  
    people_ethnicity: Optional[list[SearchVideosPeopleEthnicityEnum]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'people_ethnicity', 'style': 'form', 'explode': True }})
    r"""Show videos with people of the specified ethnicities"""  
    people_gender: Optional[SearchVideosPeopleGenderEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'people_gender', 'style': 'form', 'explode': True }})
    r"""Show videos with people with the specified gender"""  
    people_model_released: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'people_model_released', 'style': 'form', 'explode': True }})
    r"""Show only videos of people with a signed model release"""  
    people_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'people_number', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified number of people"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""Number of results per page"""  
    query: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'query', 'style': 'form', 'explode': True }})
    r"""One or more search terms separated by spaces; you can use NOT to filter out videos that match a term"""  
    resolution: Optional[SearchVideosResolutionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'resolution', 'style': 'form', 'explode': True }})
    r"""Show videos with the specified resolution"""  
    safe: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'safe', 'style': 'form', 'explode': True }})
    r"""Enable or disable safe search"""  
    sort: Optional[SearchVideosSortEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': True }})
    r"""Sort by one of these categories"""  
    view: Optional[SearchVideosViewEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'view', 'style': 'form', 'explode': True }})
    r"""Amount of detail to render in the response"""  
    

@dataclasses.dataclass
class SearchVideosResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    video_search_results: Optional[shared_videosearchresults.VideoSearchResults] = dataclasses.field(default=None)
    r"""OK"""  
    