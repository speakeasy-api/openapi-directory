"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import _xgafv_enum as shared__xgafv_enum
from ..shared import alt_enum as shared_alt_enum
from ..shared import deployment as shared_deployment
from ..shared import operation as shared_operation
from enum import Enum
from typing import Optional


@dataclasses.dataclass
class DeploymentmanagerDeploymentsUpdateSecurityOption1:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DeploymentmanagerDeploymentsUpdateSecurityOption2:
    
    oauth2: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    oauth2c: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DeploymentmanagerDeploymentsUpdateSecurity:
    
    option1: Optional[DeploymentmanagerDeploymentsUpdateSecurityOption1] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    option2: Optional[DeploymentmanagerDeploymentsUpdateSecurityOption2] = dataclasses.field(default=None, metadata={'security': { 'option': True }})  
    
class DeploymentmanagerDeploymentsUpdateCreatePolicyEnum(str, Enum):
    r"""Sets the policy to use for creating new resources."""
    CREATE_OR_ACQUIRE = 'CREATE_OR_ACQUIRE'
    ACQUIRE = 'ACQUIRE'

class DeploymentmanagerDeploymentsUpdateDeletePolicyEnum(str, Enum):
    r"""Sets the policy to use for deleting resources."""
    DELETE = 'DELETE'
    ABANDON = 'ABANDON'


@dataclasses.dataclass
class DeploymentmanagerDeploymentsUpdateRequest:
    
    deployment_path_parameter: str = dataclasses.field(metadata={'path_param': { 'field_name': 'deployment', 'style': 'simple', 'explode': False }})
    r"""The name of the deployment for this request."""  
    project: str = dataclasses.field(metadata={'path_param': { 'field_name': 'project', 'style': 'simple', 'explode': False }})
    r"""The project ID for this request."""  
    dollar_xgafv: Optional[shared__xgafv_enum.XgafvEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': '$.xgafv', 'style': 'form', 'explode': True }})
    r"""V1 error format."""  
    access_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'access_token', 'style': 'form', 'explode': True }})
    r"""OAuth access token."""  
    alt: Optional[shared_alt_enum.AltEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'alt', 'style': 'form', 'explode': True }})
    r"""Data format for response."""  
    callback: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'callback', 'style': 'form', 'explode': True }})
    r"""JSONP"""  
    create_policy: Optional[DeploymentmanagerDeploymentsUpdateCreatePolicyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createPolicy', 'style': 'form', 'explode': True }})
    r"""Sets the policy to use for creating new resources."""  
    delete_policy: Optional[DeploymentmanagerDeploymentsUpdateDeletePolicyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'deletePolicy', 'style': 'form', 'explode': True }})
    r"""Sets the policy to use for deleting resources."""  
    deployment1: Optional[shared_deployment.Deployment] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    fields_: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': True }})
    r"""Selector specifying which fields to include in a partial response."""  
    key: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'key', 'style': 'form', 'explode': True }})
    r"""API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."""  
    oauth_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'oauth_token', 'style': 'form', 'explode': True }})
    r"""OAuth 2.0 token for the current user."""  
    pretty_print: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prettyPrint', 'style': 'form', 'explode': True }})
    r"""Returns response with indentations and line breaks."""  
    preview: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'preview', 'style': 'form', 'explode': True }})
    r"""If set to true, updates the deployment and creates and updates the \\"shell\\" resources but does not actually alter or instantiate these resources. This allows you to preview what your deployment will look like. You can use this intent to preview how an update would affect your deployment. You must provide a `target.config` with a configuration if this is set to true. After previewing a deployment, you can deploy your resources by making a request with the `update()` or you can `cancelPreview()` to remove the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it."""  
    quota_user: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'quotaUser', 'style': 'form', 'explode': True }})
    r"""Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."""  
    upload_protocol: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'upload_protocol', 'style': 'form', 'explode': True }})
    r"""Upload protocol for media (e.g. \\"raw\\", \\"multipart\\")."""  
    upload_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'uploadType', 'style': 'form', 'explode': True }})
    r"""Legacy upload protocol for media (e.g. \\"media\\", \\"multipart\\")."""  
    

@dataclasses.dataclass
class DeploymentmanagerDeploymentsUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    operation: Optional[shared_operation.Operation] = dataclasses.field(default=None)
    r"""Successful response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    