"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contentstatus_enum as shared_contentstatus_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ContentSummary:
    r"""Summary information about the content."""
    
    content_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentArn') }})  
    content_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentId') }})  
    content_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contentType') }})  
    knowledge_base_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseArn') }})  
    knowledge_base_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('knowledgeBaseId') }})  
    metadata: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    revision_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('revisionId') }})  
    status: shared_contentstatus_enum.ContentStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    