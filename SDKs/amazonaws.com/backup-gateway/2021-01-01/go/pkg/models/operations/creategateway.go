// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateGatewayXAmzTargetEnum
type CreateGatewayXAmzTargetEnum string

const (
	CreateGatewayXAmzTargetEnumBackupOnPremisesV20210101CreateGateway CreateGatewayXAmzTargetEnum = "BackupOnPremises_v20210101.CreateGateway"
)

func (e CreateGatewayXAmzTargetEnum) ToPointer() *CreateGatewayXAmzTargetEnum {
	return &e
}

func (e *CreateGatewayXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BackupOnPremises_v20210101.CreateGateway":
		*e = CreateGatewayXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateGatewayXAmzTargetEnum: %v", v)
	}
}

type CreateGatewayRequest struct {
	CreateGatewayInput shared.CreateGatewayInput   `request:"mediaType=application/json"`
	XAmzAlgorithm      *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256  *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential     *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate           *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken  *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature      *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders  *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget         CreateGatewayXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateGatewayResponse struct {
	ContentType string
	// Success
	CreateGatewayOutput *shared.CreateGatewayOutput
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// ValidationException
	ValidationException interface{}
}
