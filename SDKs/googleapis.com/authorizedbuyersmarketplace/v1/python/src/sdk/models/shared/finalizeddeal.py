"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import deal as shared_deal
from ..shared import dealpausinginfo as shared_dealpausinginfo
from ..shared import rtbmetrics as shared_rtbmetrics
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class FinalizedDealDealServingStatusEnum(str, Enum):
    r"""Serving status of the deal."""
    DEAL_SERVING_STATUS_UNSPECIFIED = 'DEAL_SERVING_STATUS_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    ENDED = 'ENDED'
    PAUSED_BY_BUYER = 'PAUSED_BY_BUYER'
    PAUSED_BY_SELLER = 'PAUSED_BY_SELLER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FinalizedDeal:
    r"""A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it's been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved using this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, and more."""
    
    deal: Optional[shared_deal.Deal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deal'), 'exclude': lambda f: f is None }})
    r"""A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals."""  
    deal_pausing_info: Optional[shared_dealpausinginfo.DealPausingInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealPausingInfo'), 'exclude': lambda f: f is None }})
    r"""Information related to deal pausing."""  
    deal_serving_status: Optional[FinalizedDealDealServingStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dealServingStatus'), 'exclude': lambda f: f is None }})
    r"""Serving status of the deal."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name of the finalized deal. Format: `buyers/{accountId}/finalizeddeals/{finalizedDealId}`"""  
    ready_to_serve: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('readyToServe'), 'exclude': lambda f: f is None }})
    r"""Whether the Programmatic Guaranteed deal is ready for serving."""  
    rtb_metrics: Optional[shared_rtbmetrics.RtbMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rtbMetrics'), 'exclude': lambda f: f is None }})
    r"""Real-time bidding metrics. For what each metric means refer to [Report metrics](https://support.google.com/adxbuyer/answer/6115195#report-metrics)"""  
    