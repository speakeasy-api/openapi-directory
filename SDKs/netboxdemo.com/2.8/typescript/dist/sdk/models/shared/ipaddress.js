"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPAddress = exports.IPAddressStatus = exports.IPAddressStatusValueEnum = exports.IPAddressStatusLabelEnum = exports.IPAddressRole = exports.IPAddressRoleValueEnum = exports.IPAddressRoleLabelEnum = exports.IPAddressFamily = exports.IPAddressFamilyValueEnum = exports.IPAddressFamilyLabelEnum = void 0;
var utils_1 = require("../../../internal/utils");
var ipaddressinterface_1 = require("./ipaddressinterface");
var nestedipaddress_1 = require("./nestedipaddress");
var nestedtenant_1 = require("./nestedtenant");
var nestedvrf_1 = require("./nestedvrf");
var class_transformer_1 = require("class-transformer");
var IPAddressFamilyLabelEnum;
(function (IPAddressFamilyLabelEnum) {
    IPAddressFamilyLabelEnum["IPv4"] = "IPv4";
    IPAddressFamilyLabelEnum["IPv6"] = "IPv6";
})(IPAddressFamilyLabelEnum = exports.IPAddressFamilyLabelEnum || (exports.IPAddressFamilyLabelEnum = {}));
var IPAddressFamilyValueEnum;
(function (IPAddressFamilyValueEnum) {
    IPAddressFamilyValueEnum["Four"] = "4";
    IPAddressFamilyValueEnum["Six"] = "6";
})(IPAddressFamilyValueEnum = exports.IPAddressFamilyValueEnum || (exports.IPAddressFamilyValueEnum = {}));
var IPAddressFamily = /** @class */ (function (_super) {
    __extends(IPAddressFamily, _super);
    function IPAddressFamily() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label" }),
        __metadata("design:type", String)
    ], IPAddressFamily.prototype, "label", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], IPAddressFamily.prototype, "value", void 0);
    return IPAddressFamily;
}(utils_1.SpeakeasyBase));
exports.IPAddressFamily = IPAddressFamily;
var IPAddressRoleLabelEnum;
(function (IPAddressRoleLabelEnum) {
    IPAddressRoleLabelEnum["Loopback"] = "Loopback";
    IPAddressRoleLabelEnum["Secondary"] = "Secondary";
    IPAddressRoleLabelEnum["Anycast"] = "Anycast";
    IPAddressRoleLabelEnum["Vip"] = "VIP";
    IPAddressRoleLabelEnum["Vrrp"] = "VRRP";
    IPAddressRoleLabelEnum["Hsrp"] = "HSRP";
    IPAddressRoleLabelEnum["Glbp"] = "GLBP";
    IPAddressRoleLabelEnum["Carp"] = "CARP";
})(IPAddressRoleLabelEnum = exports.IPAddressRoleLabelEnum || (exports.IPAddressRoleLabelEnum = {}));
var IPAddressRoleValueEnum;
(function (IPAddressRoleValueEnum) {
    IPAddressRoleValueEnum["Loopback"] = "loopback";
    IPAddressRoleValueEnum["Secondary"] = "secondary";
    IPAddressRoleValueEnum["Anycast"] = "anycast";
    IPAddressRoleValueEnum["Vip"] = "vip";
    IPAddressRoleValueEnum["Vrrp"] = "vrrp";
    IPAddressRoleValueEnum["Hsrp"] = "hsrp";
    IPAddressRoleValueEnum["Glbp"] = "glbp";
    IPAddressRoleValueEnum["Carp"] = "carp";
})(IPAddressRoleValueEnum = exports.IPAddressRoleValueEnum || (exports.IPAddressRoleValueEnum = {}));
var IPAddressRole = /** @class */ (function (_super) {
    __extends(IPAddressRole, _super);
    function IPAddressRole() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label" }),
        __metadata("design:type", String)
    ], IPAddressRole.prototype, "label", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], IPAddressRole.prototype, "value", void 0);
    return IPAddressRole;
}(utils_1.SpeakeasyBase));
exports.IPAddressRole = IPAddressRole;
var IPAddressStatusLabelEnum;
(function (IPAddressStatusLabelEnum) {
    IPAddressStatusLabelEnum["Active"] = "Active";
    IPAddressStatusLabelEnum["Reserved"] = "Reserved";
    IPAddressStatusLabelEnum["Deprecated"] = "Deprecated";
    IPAddressStatusLabelEnum["Dhcp"] = "DHCP";
})(IPAddressStatusLabelEnum = exports.IPAddressStatusLabelEnum || (exports.IPAddressStatusLabelEnum = {}));
var IPAddressStatusValueEnum;
(function (IPAddressStatusValueEnum) {
    IPAddressStatusValueEnum["Active"] = "active";
    IPAddressStatusValueEnum["Reserved"] = "reserved";
    IPAddressStatusValueEnum["Deprecated"] = "deprecated";
    IPAddressStatusValueEnum["Dhcp"] = "dhcp";
})(IPAddressStatusValueEnum = exports.IPAddressStatusValueEnum || (exports.IPAddressStatusValueEnum = {}));
var IPAddressStatus = /** @class */ (function (_super) {
    __extends(IPAddressStatus, _super);
    function IPAddressStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "label" }),
        __metadata("design:type", String)
    ], IPAddressStatus.prototype, "label", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "value" }),
        __metadata("design:type", String)
    ], IPAddressStatus.prototype, "value", void 0);
    return IPAddressStatus;
}(utils_1.SpeakeasyBase));
exports.IPAddressStatus = IPAddressStatus;
var IPAddress = /** @class */ (function (_super) {
    __extends(IPAddress, _super);
    function IPAddress() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], IPAddress.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "created" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], IPAddress.prototype, "created", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "custom_fields" }),
        __metadata("design:type", Object)
    ], IPAddress.prototype, "customFields", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], IPAddress.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "dns_name" }),
        __metadata("design:type", String)
    ], IPAddress.prototype, "dnsName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "family" }),
        (0, class_transformer_1.Type)(function () { return IPAddressFamily; }),
        __metadata("design:type", IPAddressFamily)
    ], IPAddress.prototype, "family", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", Number)
    ], IPAddress.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "interface" }),
        (0, class_transformer_1.Type)(function () { return ipaddressinterface_1.IPAddressInterface; }),
        __metadata("design:type", ipaddressinterface_1.IPAddressInterface)
    ], IPAddress.prototype, "interface", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "last_updated" }),
        (0, class_transformer_1.Transform)(function (_a) {
            var value = _a.value;
            return new Date(value);
        }, { toClassOnly: true }),
        __metadata("design:type", Date)
    ], IPAddress.prototype, "lastUpdated", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nat_inside" }),
        (0, class_transformer_1.Type)(function () { return nestedipaddress_1.NestedIPAddress; }),
        __metadata("design:type", nestedipaddress_1.NestedIPAddress)
    ], IPAddress.prototype, "natInside", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nat_outside" }),
        (0, class_transformer_1.Type)(function () { return nestedipaddress_1.NestedIPAddress; }),
        __metadata("design:type", nestedipaddress_1.NestedIPAddress)
    ], IPAddress.prototype, "natOutside", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "role" }),
        (0, class_transformer_1.Type)(function () { return IPAddressRole; }),
        __metadata("design:type", IPAddressRole)
    ], IPAddress.prototype, "role", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        (0, class_transformer_1.Type)(function () { return IPAddressStatus; }),
        __metadata("design:type", IPAddressStatus)
    ], IPAddress.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tags" }),
        __metadata("design:type", Array)
    ], IPAddress.prototype, "tags", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "tenant" }),
        (0, class_transformer_1.Type)(function () { return nestedtenant_1.NestedTenant; }),
        __metadata("design:type", nestedtenant_1.NestedTenant)
    ], IPAddress.prototype, "tenant", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "vrf" }),
        (0, class_transformer_1.Type)(function () { return nestedvrf_1.NestedVRF; }),
        __metadata("design:type", nestedvrf_1.NestedVRF)
    ], IPAddress.prototype, "vrf", void 0);
    return IPAddress;
}(utils_1.SpeakeasyBase));
exports.IPAddress = IPAddress;
