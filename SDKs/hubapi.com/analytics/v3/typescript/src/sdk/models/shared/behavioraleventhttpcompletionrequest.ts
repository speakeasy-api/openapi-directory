/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class BehavioralEventHttpCompletionRequest extends SpeakeasyBase {
  /**
   * Email of visitor
   */
  @SpeakeasyMetadata()
  @Expose({ name: "email" })
  email?: string;

  /**
   * Internal name of the event-type to trigger
   */
  @SpeakeasyMetadata()
  @Expose({ name: "eventName" })
  eventName: string;

  /**
   * The object id that this event occurred on. Could be a contact id or a visitor id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "objectId" })
  objectId?: string;

  /**
   * The time when this event occurred (if any). If this isn't set, the current time will be used
   */
  @SpeakeasyMetadata()
  @Expose({ name: "occurredAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  occurredAt?: Date;

  /**
   * Map of properties for the event in the format property internal name - property value
   */
  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  properties: Record<string, string>;

  /**
   * User token
   */
  @SpeakeasyMetadata()
  @Expose({ name: "utk" })
  utk?: string;
}
