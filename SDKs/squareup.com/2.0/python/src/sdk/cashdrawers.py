"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class CashDrawers:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def list_cash_drawer_shift_events(self, request: operations.ListCashDrawerShiftEventsRequest, security: operations.ListCashDrawerShiftEventsSecurity) -> operations.ListCashDrawerShiftEventsResponse:
        r"""ListCashDrawerShiftEvents
        Provides a paginated list of events for a single cash drawer shift.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListCashDrawerShiftEventsRequest, base_url, '/v2/cash-drawers/shifts/{shift_id}/events', request)
        
        query_params = utils.get_query_params(operations.ListCashDrawerShiftEventsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCashDrawerShiftEventsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCashDrawerShiftEventsResponse])
                res.list_cash_drawer_shift_events_response = out

        return res

    def list_cash_drawer_shifts(self, request: operations.ListCashDrawerShiftsRequest, security: operations.ListCashDrawerShiftsSecurity) -> operations.ListCashDrawerShiftsResponse:
        r"""ListCashDrawerShifts
        Provides the details for all of the cash drawer shifts for a location
        in a date range.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/cash-drawers/shifts'
        
        query_params = utils.get_query_params(operations.ListCashDrawerShiftsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListCashDrawerShiftsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCashDrawerShiftsResponse])
                res.list_cash_drawer_shifts_response = out

        return res

    def retrieve_cash_drawer_shift(self, request: operations.RetrieveCashDrawerShiftRequest, security: operations.RetrieveCashDrawerShiftSecurity) -> operations.RetrieveCashDrawerShiftResponse:
        r"""RetrieveCashDrawerShift
        Provides the summary details for a single cash drawer shift. See
        [ListCashDrawerShiftEvents](https://developer.squareup.com/reference/square_2021-08-18/cash-drawers-api/list-cash-drawer-shift-events) for a list of cash drawer shift events.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveCashDrawerShiftRequest, base_url, '/v2/cash-drawers/shifts/{shift_id}', request)
        
        query_params = utils.get_query_params(operations.RetrieveCashDrawerShiftRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveCashDrawerShiftResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.RetrieveCashDrawerShiftResponse])
                res.retrieve_cash_drawer_shift_response = out

        return res

    