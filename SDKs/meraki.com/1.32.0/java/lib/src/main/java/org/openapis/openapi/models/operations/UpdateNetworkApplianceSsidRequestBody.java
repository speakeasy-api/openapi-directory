/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class UpdateNetworkApplianceSsidRequestBody {
    /**
     * The association control method for the SSID ('open', 'psk', '8021x-meraki' or '8021x-radius').
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authMode")
    public UpdateNetworkApplianceSsidRequestBodyAuthModeEnum authMode;

    public UpdateNetworkApplianceSsidRequestBody withAuthMode(UpdateNetworkApplianceSsidRequestBodyAuthModeEnum authMode) {
        this.authMode = authMode;
        return this;
    }
    
    /**
     * The VLAN ID of the VLAN associated to this SSID. This parameter is only valid if the network is in routed mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultVlanId")
    public Long defaultVlanId;

    public UpdateNetworkApplianceSsidRequestBody withDefaultVlanId(Long defaultVlanId) {
        this.defaultVlanId = defaultVlanId;
        return this;
    }
    
    /**
     * DHCP Enforced Deauthentication enables the disassociation of wireless clients in addition to Mandatory DHCP. This param is only valid on firmware versions &gt;= MX 17.0 where the associated LAN has Mandatory DHCP Enabled 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dhcpEnforcedDeauthentication")
    public UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication dhcpEnforcedDeauthentication;

    public UpdateNetworkApplianceSsidRequestBody withDhcpEnforcedDeauthentication(UpdateNetworkApplianceSsidRequestBodyDhcpEnforcedDeauthentication dhcpEnforcedDeauthentication) {
        this.dhcpEnforcedDeauthentication = dhcpEnforcedDeauthentication;
        return this;
    }
    
    /**
     * Whether or not the SSID is enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    public Boolean enabled;

    public UpdateNetworkApplianceSsidRequestBody withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }
    
    /**
     * The psk encryption mode for the SSID ('wep' or 'wpa'). This param is only valid if the authMode is 'psk'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("encryptionMode")
    public UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum encryptionMode;

    public UpdateNetworkApplianceSsidRequestBody withEncryptionMode(UpdateNetworkApplianceSsidRequestBodyEncryptionModeEnum encryptionMode) {
        this.encryptionMode = encryptionMode;
        return this;
    }
    
    /**
     * The name of the SSID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public UpdateNetworkApplianceSsidRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The passkey for the SSID. This param is only valid if the authMode is 'psk'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("psk")
    public String psk;

    public UpdateNetworkApplianceSsidRequestBody withPsk(String psk) {
        this.psk = psk;
        return this;
    }
    
    /**
     * The RADIUS 802.1x servers to be used for authentication. This param is only valid if the authMode is '8021x-radius'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("radiusServers")
    public UpdateNetworkApplianceSsidRequestBodyRadiusServers[] radiusServers;

    public UpdateNetworkApplianceSsidRequestBody withRadiusServers(UpdateNetworkApplianceSsidRequestBodyRadiusServers[] radiusServers) {
        this.radiusServers = radiusServers;
        return this;
    }
    
    /**
     * Boolean indicating whether the MX should advertise or hide this SSID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("visible")
    public Boolean visible;

    public UpdateNetworkApplianceSsidRequestBody withVisible(Boolean visible) {
        this.visible = visible;
        return this;
    }
    
    /**
     * The types of WPA encryption. ('WPA1 and WPA2', 'WPA2 only', 'WPA3 Transition Mode' or 'WPA3 only'). This param is only valid if (1) the authMode is 'psk' &amp; the encryptionMode is 'wpa' OR (2) the authMode is '8021x-meraki' OR (3) the authMode is '8021x-radius'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wpaEncryptionMode")
    public UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode;

    public UpdateNetworkApplianceSsidRequestBody withWpaEncryptionMode(UpdateNetworkApplianceSsidRequestBodyWpaEncryptionModeEnum wpaEncryptionMode) {
        this.wpaEncryptionMode = wpaEncryptionMode;
        return this;
    }
    
    public UpdateNetworkApplianceSsidRequestBody(){}
}
