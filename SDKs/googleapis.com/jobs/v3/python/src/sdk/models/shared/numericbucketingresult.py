"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import bucketizedcount as shared_bucketizedcount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NumericBucketingResult:
    r"""Output only. Custom numeric bucketing result."""
    
    counts: Optional[list[shared_bucketizedcount.BucketizedCount]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('counts'), 'exclude': lambda f: f is None }})
    r"""Count within each bucket. Its size is the length of NumericBucketingOption.bucket_bounds plus 1."""  
    max_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxValue'), 'exclude': lambda f: f is None }})
    r"""Stores the maximum value of the numeric field. Is populated only if [NumericBucketingOption.requires_min_max] is set to true."""  
    min_value: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('minValue'), 'exclude': lambda f: f is None }})
    r"""Stores the minimum value of the numeric field. Will be populated only if [NumericBucketingOption.requires_min_max] is set to true."""  
    