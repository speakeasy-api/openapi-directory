"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class V1Transactions:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_refund(self, request: operations.CreateRefundRequest, security: operations.CreateRefundSecurity) -> operations.CreateRefundResponse:
        r"""CreateRefund
        Issues a refund for a previously processed payment. You must issue
        a refund within 60 days of the associated payment.
        
        You cannot issue a partial refund for a split tender payment. You must
        instead issue a full or partial refund for a particular tender, by
        providing the applicable tender id to the V1CreateRefund endpoint.
        Issuing a full refund for a split tender payment refunds all tenders
        associated with the payment.
        
        Issuing a refund for a card payment is not reversible. For development
        purposes, you can create fake cash payments in Square Point of Sale and
        refund them.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateRefundRequest, base_url, '/v1/{location_id}/refunds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_create_refund_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateRefundResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Refund])
                res.v1_refund = out

        return res

    def list_orders(self, request: operations.ListOrdersRequest, security: operations.ListOrdersSecurity) -> operations.ListOrdersResponse:
        r"""ListOrders
        Provides summary information for a merchant's online store orders.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListOrdersRequest, base_url, '/v1/{location_id}/orders', request)
        
        query_params = utils.get_query_params(operations.ListOrdersRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListOrdersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1Order]])
                res.v1_orders = out

        return res

    def list_payments(self, request: operations.ListPaymentsRequest, security: operations.ListPaymentsSecurity) -> operations.ListPaymentsResponse:
        r"""ListPayments
        Provides summary information for all payments taken for a given
        Square account during a date range. Date ranges cannot exceed 1 year in
        length. See Date ranges for details of inclusive and exclusive dates.
        
        *Note**: Details for payments processed with Square Point of Sale while
        in offline mode may not be transmitted to Square for up to 72 hours.
        Offline payments have a `created_at` value that reflects the time the
        payment was originally processed, not the time it was subsequently
        transmitted to Square. Consequently, the ListPayments endpoint might
        list an offline payment chronologically between online payments that
        were seen in a previous request.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListPaymentsRequest, base_url, '/v1/{location_id}/payments', request)
        
        query_params = utils.get_query_params(operations.ListPaymentsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListPaymentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1Payment]])
                res.v1_payments = out

        return res

    def list_refunds(self, request: operations.ListRefundsRequest, security: operations.ListRefundsSecurity) -> operations.ListRefundsResponse:
        r"""ListRefunds
        Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListRefundsRequest, base_url, '/v1/{location_id}/refunds', request)
        
        query_params = utils.get_query_params(operations.ListRefundsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListRefundsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1Refund]])
                res.v1_refunds = out

        return res

    def list_settlements(self, request: operations.ListSettlementsRequest, security: operations.ListSettlementsSecurity) -> operations.ListSettlementsResponse:
        r"""ListSettlements
        Provides summary information for all deposits and withdrawals
        initiated by Square to a linked bank account during a date range. Date
        ranges cannot exceed one year in length.
        
        *Note**: the ListSettlements endpoint does not provide entry
        information.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ListSettlementsRequest, base_url, '/v1/{location_id}/settlements', request)
        
        query_params = utils.get_query_params(operations.ListSettlementsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListSettlementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.V1Settlement]])
                res.v1_settlements = out

        return res

    def retrieve_order(self, request: operations.RetrieveOrderRequest, security: operations.RetrieveOrderSecurity) -> operations.RetrieveOrderResponse:
        r"""RetrieveOrder
        Provides comprehensive information for a single online store order, including the order's history.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveOrderRequest, base_url, '/v1/{location_id}/orders/{order_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Order])
                res.v1_order = out

        return res

    def retrieve_payment(self, request: operations.RetrievePaymentRequest, security: operations.RetrievePaymentSecurity) -> operations.RetrievePaymentResponse:
        r"""RetrievePayment
        Provides comprehensive information for a single payment.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrievePaymentRequest, base_url, '/v1/{location_id}/payments/{payment_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrievePaymentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Payment])
                res.v1_payment = out

        return res

    def retrieve_settlement(self, request: operations.RetrieveSettlementRequest, security: operations.RetrieveSettlementSecurity) -> operations.RetrieveSettlementResponse:
        r"""RetrieveSettlement
        Provides comprehensive information for a single settlement.
        
        The returned `Settlement` objects include an `entries` field that lists
        the transactions that contribute to the settlement total. Most
        settlement entries correspond to a payment payout, but settlement
        entries are also generated for less common events, like refunds, manual
        adjustments, or chargeback holds.
        
        Square initiates its regular deposits as indicated in the
        [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
        help article. Details for a regular deposit are usually not available
        from Connect API endpoints before 10 p.m. PST the same day.
        
        Square does not know when an initiated settlement **completes**, only
        whether it has failed. A completed settlement is typically reflected in
        a bank account within 3 business days, but in exceptional cases it may
        take longer.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.RetrieveSettlementRequest, base_url, '/v1/{location_id}/settlements/{settlement_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RetrieveSettlementResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Settlement])
                res.v1_settlement = out

        return res

    def update_order(self, request: operations.UpdateOrderRequest, security: operations.UpdateOrderSecurity) -> operations.UpdateOrderResponse:
        r"""UpdateOrder
        Updates the details of an online store order. Every update you perform on an order corresponds to one of three actions:
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateOrderRequest, base_url, '/v1/{location_id}/orders/{order_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "v1_update_order_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateOrderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.V1Order])
                res.v1_order = out

        return res

    