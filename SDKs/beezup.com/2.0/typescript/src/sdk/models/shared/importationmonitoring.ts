/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { BeezUPCommonUserErrorMessage } from "./beezupcommonusererrormessage";
import { ImportationMonitoringLinks } from "./importationmonitoringlinks";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describe the reporting of the catalog importation
 */
export class ImportationMonitoring extends SpeakeasyBase {
  /**
   * The start date of the importation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "beginUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  beginUtcDate: Date;

  /**
   * In case of error a description will be indicated
   */
  @SpeakeasyMetadata({ elemType: BeezUPCommonUserErrorMessage })
  @Expose({ name: "errors" })
  @Type(() => BeezUPCommonUserErrorMessage)
  errors?: BeezUPCommonUserErrorMessage[];

  /**
   * The execution identifier of the catalog importation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "executionId" })
  executionId: string;

  /**
   * The last update of the reporting
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdateUtcDate" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateUtcDate: Date;

  /**
   * Applicable operations considering the state of the importation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "links" })
  @Type(() => ImportationMonitoringLinks)
  links?: ImportationMonitoringLinks;

  /**
   * Contains all steps of the importation process with a boolean. If true the step has been passed, false the step is not complete
   */
  @SpeakeasyMetadata()
  @Expose({ name: "steps" })
  steps: Record<string, boolean>;

  /**
   * Indicates if the importation was successfully completed or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "success" })
  success: boolean;

  /**
   * The user identifier
   */
  @SpeakeasyMetadata()
  @Expose({ name: "userId" })
  userId?: string;
}
