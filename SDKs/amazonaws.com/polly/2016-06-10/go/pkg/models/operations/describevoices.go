// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DescribeVoicesEngineEnum - Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis.
type DescribeVoicesEngineEnum string

const (
	DescribeVoicesEngineEnumStandard DescribeVoicesEngineEnum = "standard"
	DescribeVoicesEngineEnumNeural   DescribeVoicesEngineEnum = "neural"
)

func (e *DescribeVoicesEngineEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "standard":
		fallthrough
	case "neural":
		*e = DescribeVoicesEngineEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVoicesEngineEnum: %s", s)
	}
}

// DescribeVoicesLanguageCodeEnum -  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned.
type DescribeVoicesLanguageCodeEnum string

const (
	DescribeVoicesLanguageCodeEnumArb     DescribeVoicesLanguageCodeEnum = "arb"
	DescribeVoicesLanguageCodeEnumCmnCn   DescribeVoicesLanguageCodeEnum = "cmn-CN"
	DescribeVoicesLanguageCodeEnumCyGb    DescribeVoicesLanguageCodeEnum = "cy-GB"
	DescribeVoicesLanguageCodeEnumDaDk    DescribeVoicesLanguageCodeEnum = "da-DK"
	DescribeVoicesLanguageCodeEnumDeDe    DescribeVoicesLanguageCodeEnum = "de-DE"
	DescribeVoicesLanguageCodeEnumEnAu    DescribeVoicesLanguageCodeEnum = "en-AU"
	DescribeVoicesLanguageCodeEnumEnGb    DescribeVoicesLanguageCodeEnum = "en-GB"
	DescribeVoicesLanguageCodeEnumEnGbWls DescribeVoicesLanguageCodeEnum = "en-GB-WLS"
	DescribeVoicesLanguageCodeEnumEnIn    DescribeVoicesLanguageCodeEnum = "en-IN"
	DescribeVoicesLanguageCodeEnumEnUs    DescribeVoicesLanguageCodeEnum = "en-US"
	DescribeVoicesLanguageCodeEnumEsEs    DescribeVoicesLanguageCodeEnum = "es-ES"
	DescribeVoicesLanguageCodeEnumEsMx    DescribeVoicesLanguageCodeEnum = "es-MX"
	DescribeVoicesLanguageCodeEnumEsUs    DescribeVoicesLanguageCodeEnum = "es-US"
	DescribeVoicesLanguageCodeEnumFrCa    DescribeVoicesLanguageCodeEnum = "fr-CA"
	DescribeVoicesLanguageCodeEnumFrFr    DescribeVoicesLanguageCodeEnum = "fr-FR"
	DescribeVoicesLanguageCodeEnumIsIs    DescribeVoicesLanguageCodeEnum = "is-IS"
	DescribeVoicesLanguageCodeEnumItIt    DescribeVoicesLanguageCodeEnum = "it-IT"
	DescribeVoicesLanguageCodeEnumJaJp    DescribeVoicesLanguageCodeEnum = "ja-JP"
	DescribeVoicesLanguageCodeEnumHiIn    DescribeVoicesLanguageCodeEnum = "hi-IN"
	DescribeVoicesLanguageCodeEnumKoKr    DescribeVoicesLanguageCodeEnum = "ko-KR"
	DescribeVoicesLanguageCodeEnumNbNo    DescribeVoicesLanguageCodeEnum = "nb-NO"
	DescribeVoicesLanguageCodeEnumNlNl    DescribeVoicesLanguageCodeEnum = "nl-NL"
	DescribeVoicesLanguageCodeEnumPlPl    DescribeVoicesLanguageCodeEnum = "pl-PL"
	DescribeVoicesLanguageCodeEnumPtBr    DescribeVoicesLanguageCodeEnum = "pt-BR"
	DescribeVoicesLanguageCodeEnumPtPt    DescribeVoicesLanguageCodeEnum = "pt-PT"
	DescribeVoicesLanguageCodeEnumRoRo    DescribeVoicesLanguageCodeEnum = "ro-RO"
	DescribeVoicesLanguageCodeEnumRuRu    DescribeVoicesLanguageCodeEnum = "ru-RU"
	DescribeVoicesLanguageCodeEnumSvSe    DescribeVoicesLanguageCodeEnum = "sv-SE"
	DescribeVoicesLanguageCodeEnumTrTr    DescribeVoicesLanguageCodeEnum = "tr-TR"
	DescribeVoicesLanguageCodeEnumEnNz    DescribeVoicesLanguageCodeEnum = "en-NZ"
	DescribeVoicesLanguageCodeEnumEnZa    DescribeVoicesLanguageCodeEnum = "en-ZA"
	DescribeVoicesLanguageCodeEnumCaEs    DescribeVoicesLanguageCodeEnum = "ca-ES"
	DescribeVoicesLanguageCodeEnumDeAt    DescribeVoicesLanguageCodeEnum = "de-AT"
	DescribeVoicesLanguageCodeEnumYueCn   DescribeVoicesLanguageCodeEnum = "yue-CN"
	DescribeVoicesLanguageCodeEnumArAe    DescribeVoicesLanguageCodeEnum = "ar-AE"
	DescribeVoicesLanguageCodeEnumFiFi    DescribeVoicesLanguageCodeEnum = "fi-FI"
)

func (e *DescribeVoicesLanguageCodeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "arb":
		fallthrough
	case "cmn-CN":
		fallthrough
	case "cy-GB":
		fallthrough
	case "da-DK":
		fallthrough
	case "de-DE":
		fallthrough
	case "en-AU":
		fallthrough
	case "en-GB":
		fallthrough
	case "en-GB-WLS":
		fallthrough
	case "en-IN":
		fallthrough
	case "en-US":
		fallthrough
	case "es-ES":
		fallthrough
	case "es-MX":
		fallthrough
	case "es-US":
		fallthrough
	case "fr-CA":
		fallthrough
	case "fr-FR":
		fallthrough
	case "is-IS":
		fallthrough
	case "it-IT":
		fallthrough
	case "ja-JP":
		fallthrough
	case "hi-IN":
		fallthrough
	case "ko-KR":
		fallthrough
	case "nb-NO":
		fallthrough
	case "nl-NL":
		fallthrough
	case "pl-PL":
		fallthrough
	case "pt-BR":
		fallthrough
	case "pt-PT":
		fallthrough
	case "ro-RO":
		fallthrough
	case "ru-RU":
		fallthrough
	case "sv-SE":
		fallthrough
	case "tr-TR":
		fallthrough
	case "en-NZ":
		fallthrough
	case "en-ZA":
		fallthrough
	case "ca-ES":
		fallthrough
	case "de-AT":
		fallthrough
	case "yue-CN":
		fallthrough
	case "ar-AE":
		fallthrough
	case "fi-FI":
		*e = DescribeVoicesLanguageCodeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DescribeVoicesLanguageCodeEnum: %s", s)
	}
}

type DescribeVoicesRequest struct {
	// Specifies the engine (<code>standard</code> or <code>neural</code>) used by Amazon Polly when processing input text for speech synthesis.
	Engine *DescribeVoicesEngineEnum `queryParam:"style=form,explode=true,name=Engine"`
	// Boolean value indicating whether to return any bilingual voices that use the specified language as an additional language. For instance, if you request all languages that use US English (es-US), and there is an Italian voice that speaks both Italian (it-IT) and US English, that voice will be included if you specify <code>yes</code> but not if you specify <code>no</code>.
	IncludeAdditionalLanguageCodes *bool `queryParam:"style=form,explode=true,name=IncludeAdditionalLanguageCodes"`
	//  The language identification tag (ISO 639 code for the language name-ISO 3166 country code) for filtering the list of voices returned. If you don't specify this optional parameter, all available voices are returned.
	LanguageCode *DescribeVoicesLanguageCodeEnum `queryParam:"style=form,explode=true,name=LanguageCode"`
	// An opaque pagination token returned from the previous <code>DescribeVoices</code> operation. If present, this indicates where to continue the listing.
	NextToken         *string `queryParam:"style=form,explode=true,name=NextToken"`
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type DescribeVoicesResponse struct {
	ContentType string
	// Success
	DescribeVoicesOutput *shared.DescribeVoicesOutput
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ServiceFailureException
	ServiceFailureException interface{}
}
