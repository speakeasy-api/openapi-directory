"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Reports:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adsense_reports_generate(self, request: operations.AdsenseReportsGenerateRequest, security: operations.AdsenseReportsGenerateSecurity) -> operations.AdsenseReportsGenerateResponse:
        r"""Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \\"alt=csv\\" as a query parameter."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reports'
        
        query_params = utils.get_query_params(operations.AdsenseReportsGenerateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsenseReportsGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdsenseReportsGenerateResponse])
                res.adsense_reports_generate_response = out

        return res

    def adsense_reports_saved_generate(self, request: operations.AdsenseReportsSavedGenerateRequest, security: operations.AdsenseReportsSavedGenerateSecurity) -> operations.AdsenseReportsSavedGenerateResponse:
        r"""Generate an AdSense report based on the saved report ID sent in the query parameters."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdsenseReportsSavedGenerateRequest, base_url, '/reports/{savedReportId}', request)
        
        query_params = utils.get_query_params(operations.AdsenseReportsSavedGenerateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsenseReportsSavedGenerateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.AdsenseReportsGenerateResponse])
                res.adsense_reports_generate_response = out

        return res

    def adsense_reports_saved_list(self, request: operations.AdsenseReportsSavedListRequest, security: operations.AdsenseReportsSavedListSecurity) -> operations.AdsenseReportsSavedListResponse:
        r"""List all saved reports in this AdSense account."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/reports/saved'
        
        query_params = utils.get_query_params(operations.AdsenseReportsSavedListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdsenseReportsSavedListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SavedReports])
                res.saved_reports = out

        return res

    