"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from .ageusd import AgeUsd
from .babel_fee_controller import BabelFeeController
from .babel_fee_new_offer_controller import BabelFeeNewOfferController
from .box_consolidation_controller import BoxConsolidationController
from .paymentportal import PaymentPortal
from .peerdetection import PeerDetection
from .token_burn_controller import TokenBurnController
from .tokenprices import TokenPrices
from .tokenverification import TokenVerification

SERVERS = [
    "https://api.tokenjay.app/",
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Please see usage policies on tokenjay.app"""
    age_usd: AgeUsd
    babel_fee_controller: BabelFeeController
    babel_fee_new_offer_controller: BabelFeeNewOfferController
    box_consolidation_controller: BoxConsolidationController
    payment_portal: PaymentPortal
    r"""ErgoPay payment portal"""
    peer_detection: PeerDetection
    r"""Detecting nodes to use for submitting transactions"""
    token_burn_controller: TokenBurnController
    token_prices: TokenPrices
    token_verification: TokenVerification
    r"""Ergo Platform Genuine Tokens Verification
    https://github.com/ergoplatform/eips/blob/master/eip-0021.md - EIP-21
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        self._init_sdks()
    
    def _init_sdks(self):
        self.age_usd = AgeUsd(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.babel_fee_controller = BabelFeeController(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.babel_fee_new_offer_controller = BabelFeeNewOfferController(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.box_consolidation_controller = BoxConsolidationController(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.payment_portal = PaymentPortal(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.peer_detection = PeerDetection(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.token_burn_controller = TokenBurnController(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.token_prices = TokenPrices(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
        self.token_verification = TokenVerification(
            self._client,
            self._security_client,
            self._server_url,
            self._language,
            self._sdk_version,
            self._gen_version
        )
        
    