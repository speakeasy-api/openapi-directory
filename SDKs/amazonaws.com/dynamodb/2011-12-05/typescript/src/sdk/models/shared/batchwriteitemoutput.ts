/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { BatchWriteResponse } from "./batchwriteresponse";
import { WriteRequest } from "./writerequest";
import { Expose, Transform } from "class-transformer";

/**
 * A container for <code>BatchWriteItem</code> response
 */
export class BatchWriteItemOutput extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: BatchWriteResponse })
  @Expose({ name: "Responses" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, BatchWriteResponse> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], BatchWriteResponse);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  responses?: Record<string, BatchWriteResponse>;

  @SpeakeasyMetadata({ elemType: WriteRequest, elemDepth: 2 })
  @Expose({ name: "UnprocessedItems" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, WriteRequest[]> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], WriteRequest);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  unprocessedItems?: Record<string, WriteRequest[]>;
}
