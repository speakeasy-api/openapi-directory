// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListSchemasQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

// ListSchemasXAmzTargetEnum
type ListSchemasXAmzTargetEnum string

const (
	ListSchemasXAmzTargetEnumAmazonPersonalizeListSchemas ListSchemasXAmzTargetEnum = "AmazonPersonalize.ListSchemas"
)

func (e *ListSchemasXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonPersonalize.ListSchemas":
		*e = ListSchemasXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSchemasXAmzTargetEnum: %s", s)
	}
}

type ListSchemasHeaders struct {
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListSchemasXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListSchemasRequest struct {
	QueryParams ListSchemasQueryParams
	Headers     ListSchemasHeaders
	Request     shared.ListSchemasRequest `request:"mediaType=application/json"`
}

type ListSchemasResponse struct {
	ContentType string
	// InvalidNextTokenException
	InvalidNextTokenException interface{}
	// Success
	ListSchemasResponse *shared.ListSchemasResponse
	StatusCode          int
	RawResponse         *http.Response
}
