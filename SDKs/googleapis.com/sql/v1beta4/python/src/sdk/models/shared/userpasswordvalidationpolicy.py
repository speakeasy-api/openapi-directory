"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import passwordstatus as shared_passwordstatus
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserPasswordValidationPolicy:
    r"""User level password validation policy."""
    
    allowed_failed_attempts: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowedFailedAttempts'), 'exclude': lambda f: f is None }})
    r"""Number of failed login attempts allowed before user get locked."""  
    enable_failed_attempts_check: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enableFailedAttemptsCheck'), 'exclude': lambda f: f is None }})
    r"""If true, failed login attempts check will be enabled."""  
    enable_password_verification: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enablePasswordVerification'), 'exclude': lambda f: f is None }})
    r"""If true, the user must specify the current password before changing the password. This flag is supported only for MySQL."""  
    password_expiration_duration: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('passwordExpirationDuration'), 'exclude': lambda f: f is None }})
    r"""Expiration duration after password is updated."""  
    status: Optional[shared_passwordstatus.PasswordStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Read-only password status."""  
    