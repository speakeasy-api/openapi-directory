// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// QueryResultBatchEntityResultTypeEnum - The result type for every entity in `entity_results`.
type QueryResultBatchEntityResultTypeEnum string

const (
	QueryResultBatchEntityResultTypeEnumResultTypeUnspecified QueryResultBatchEntityResultTypeEnum = "RESULT_TYPE_UNSPECIFIED"
	QueryResultBatchEntityResultTypeEnumFull                  QueryResultBatchEntityResultTypeEnum = "FULL"
	QueryResultBatchEntityResultTypeEnumProjection            QueryResultBatchEntityResultTypeEnum = "PROJECTION"
	QueryResultBatchEntityResultTypeEnumKeyOnly               QueryResultBatchEntityResultTypeEnum = "KEY_ONLY"
)

func (e QueryResultBatchEntityResultTypeEnum) ToPointer() *QueryResultBatchEntityResultTypeEnum {
	return &e
}

func (e *QueryResultBatchEntityResultTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RESULT_TYPE_UNSPECIFIED":
		fallthrough
	case "FULL":
		fallthrough
	case "PROJECTION":
		fallthrough
	case "KEY_ONLY":
		*e = QueryResultBatchEntityResultTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryResultBatchEntityResultTypeEnum: %v", v)
	}
}

// QueryResultBatchMoreResultsEnum - The state of the query after the current batch.
type QueryResultBatchMoreResultsEnum string

const (
	QueryResultBatchMoreResultsEnumMoreResultsTypeUnspecified QueryResultBatchMoreResultsEnum = "MORE_RESULTS_TYPE_UNSPECIFIED"
	QueryResultBatchMoreResultsEnumNotFinished                QueryResultBatchMoreResultsEnum = "NOT_FINISHED"
	QueryResultBatchMoreResultsEnumMoreResultsAfterLimit      QueryResultBatchMoreResultsEnum = "MORE_RESULTS_AFTER_LIMIT"
	QueryResultBatchMoreResultsEnumMoreResultsAfterCursor     QueryResultBatchMoreResultsEnum = "MORE_RESULTS_AFTER_CURSOR"
	QueryResultBatchMoreResultsEnumNoMoreResults              QueryResultBatchMoreResultsEnum = "NO_MORE_RESULTS"
)

func (e QueryResultBatchMoreResultsEnum) ToPointer() *QueryResultBatchMoreResultsEnum {
	return &e
}

func (e *QueryResultBatchMoreResultsEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MORE_RESULTS_TYPE_UNSPECIFIED":
		fallthrough
	case "NOT_FINISHED":
		fallthrough
	case "MORE_RESULTS_AFTER_LIMIT":
		fallthrough
	case "MORE_RESULTS_AFTER_CURSOR":
		fallthrough
	case "NO_MORE_RESULTS":
		*e = QueryResultBatchMoreResultsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryResultBatchMoreResultsEnum: %v", v)
	}
}

// QueryResultBatch - A batch of results produced by a query.
type QueryResultBatch struct {
	// A cursor that points to the position after the last result in the batch.
	EndCursor *string `json:"endCursor,omitempty"`
	// The result type for every entity in `entity_results`.
	EntityResultType *QueryResultBatchEntityResultTypeEnum `json:"entityResultType,omitempty"`
	// The results for this batch.
	EntityResults []EntityResult `json:"entityResults,omitempty"`
	// The state of the query after the current batch.
	MoreResults *QueryResultBatchMoreResultsEnum `json:"moreResults,omitempty"`
	// Read timestamp this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater timestamp. Each batch's read timestamp is valid for all preceding batches. This value will not be set for eventually consistent queries in Cloud Datastore.
	ReadTime *string `json:"readTime,omitempty"`
	// A cursor that points to the position after the last skipped result. Will be set when `skipped_results` != 0.
	SkippedCursor *string `json:"skippedCursor,omitempty"`
	// The number of results skipped, typically because of an offset.
	SkippedResults *int `json:"skippedResults,omitempty"`
	// The version number of the snapshot this batch was returned from. This applies to the range of results from the query's `start_cursor` (or the beginning of the query if no cursor was given) to this batch's `end_cursor` (not the query's `end_cursor`). In a single transaction, subsequent query result batches for the same query can have a greater snapshot version number. Each batch's snapshot version is valid for all preceding batches. The value will be zero for eventually consistent queries.
	SnapshotVersion *string `json:"snapshotVersion,omitempty"`
}
