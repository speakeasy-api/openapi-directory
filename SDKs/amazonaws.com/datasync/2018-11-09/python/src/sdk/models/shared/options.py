"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import atime_enum as shared_atime_enum
from ..shared import gid_enum as shared_gid_enum
from ..shared import loglevel_enum as shared_loglevel_enum
from ..shared import mtime_enum as shared_mtime_enum
from ..shared import objecttags_enum as shared_objecttags_enum
from ..shared import overwritemode_enum as shared_overwritemode_enum
from ..shared import posixpermissions_enum as shared_posixpermissions_enum
from ..shared import preservedeletedfiles_enum as shared_preservedeletedfiles_enum
from ..shared import preservedevices_enum as shared_preservedevices_enum
from ..shared import smbsecuritydescriptorcopyflags_enum as shared_smbsecuritydescriptorcopyflags_enum
from ..shared import taskqueueing_enum as shared_taskqueueing_enum
from ..shared import transfermode_enum as shared_transfermode_enum
from ..shared import uid_enum as shared_uid_enum
from ..shared import verifymode_enum as shared_verifymode_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Options:
    r"""<p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p> <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>"""
    
    atime: Optional[shared_atime_enum.AtimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Atime'), 'exclude': lambda f: f is None }})  
    bytes_per_second: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BytesPerSecond'), 'exclude': lambda f: f is None }})  
    gid: Optional[shared_gid_enum.GidEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Gid'), 'exclude': lambda f: f is None }})  
    log_level: Optional[shared_loglevel_enum.LogLevelEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LogLevel'), 'exclude': lambda f: f is None }})  
    mtime: Optional[shared_mtime_enum.MtimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mtime'), 'exclude': lambda f: f is None }})  
    object_tags: Optional[shared_objecttags_enum.ObjectTagsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ObjectTags'), 'exclude': lambda f: f is None }})  
    overwrite_mode: Optional[shared_overwritemode_enum.OverwriteModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OverwriteMode'), 'exclude': lambda f: f is None }})  
    posix_permissions: Optional[shared_posixpermissions_enum.PosixPermissionsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PosixPermissions'), 'exclude': lambda f: f is None }})  
    preserve_deleted_files: Optional[shared_preservedeletedfiles_enum.PreserveDeletedFilesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreserveDeletedFiles'), 'exclude': lambda f: f is None }})  
    preserve_devices: Optional[shared_preservedevices_enum.PreserveDevicesEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PreserveDevices'), 'exclude': lambda f: f is None }})  
    security_descriptor_copy_flags: Optional[shared_smbsecuritydescriptorcopyflags_enum.SmbSecurityDescriptorCopyFlagsEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityDescriptorCopyFlags'), 'exclude': lambda f: f is None }})  
    task_queueing: Optional[shared_taskqueueing_enum.TaskQueueingEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TaskQueueing'), 'exclude': lambda f: f is None }})  
    transfer_mode: Optional[shared_transfermode_enum.TransferModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransferMode'), 'exclude': lambda f: f is None }})  
    uid: Optional[shared_uid_enum.UIDEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Uid'), 'exclude': lambda f: f is None }})  
    verify_mode: Optional[shared_verifymode_enum.VerifyModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VerifyMode'), 'exclude': lambda f: f is None }})  
    