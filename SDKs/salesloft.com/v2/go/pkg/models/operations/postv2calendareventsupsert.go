// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
	"openapi/pkg/types"
)

type PostV2CalendarEventsUpsertRequestBody struct {
	// Should be set to `true` for all day calendar events.
	AllDay *bool `form:"name=all_day"`
	//   List of attendees of the calendar event.
	//   Example:
	//   ```
	//     {
	//       ...
	//       "attendees": [
	//         {
	//           "name": "Alice",
	//           "email": "alice@example.com",
	//           "status": "accepted",
	//           "organizer": true
	//         },
	//         {
	//           "name": "Bob",
	//           "email": "bob@example.com",
	//           "status": "needsAction",
	//           "organizer": false
	//         }
	//       ]
	//     }
	//   ```
	//   `name`: full name of the attendee
	//
	//   `email`: email address of the attendee
	//
	//   `status`: one of the following - needsAction, accepted, tentative, declined
	//
	//   `organizer`: whether the attendee is the organizer of the calendar event
	//
	Attendees map[string]interface{} `form:"name=attendees,json"`
	//   Calendar ID of the calendar event owner.
	//   For the External Calendar connection use `external_{salesloft_user_guid}` format.
	//   Example: `external_00210d1a-df8a-459f-af75-89b953b618b0`.
	//
	CalendarID string `form:"name=calendar_id"`
	//   Cancellation time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
	//   Example: `2022-02-14T10:12:59+00:00`.
	//
	CanceledAt *string `form:"name=canceled_at"`
	// Description of the calendar event
	Description *string `form:"name=description"`
	//   End time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
	//   Example: `2022-02-14T10:12:59+00:00`.
	//
	EndTime types.Date `form:"name=end_time"`
	//   icalUID of the calendar event. Unique identifier for a calendar event across calendars.
	//
	//   Used as an upsert key.
	//
	ICalUID string `form:"name=i_cal_uid"`
	//   Id of the calendar event, different for each occurrence in a recurring series.
	//
	//   Used as an upsert key.
	//
	ID string `form:"name=id"`
	// Location of the calendar event as free-form text.
	Location *string `form:"name=location"`
	//   Email address of the organizer
	//
	Organizer *string `form:"name=organizer"`
	// Should be set to `true` if this is one of recurring series calendar event.
	Recurring *bool `form:"name=recurring"`
	//   Start time of the calendar event, as a combined date-time value in the ISO 8601 format with a time zone offset.
	//   Example: `2022-02-14T10:12:59+00:00`.
	//
	StartTime types.Date `form:"name=start_time"`
	//   Status of the calendar event. Depending on the status, the calendar event will or will not impact user's availability.
	//   Possible values: `confirmed`, `tentative`, `cancelled`.
	//   Example: `confirmed`.
	//
	Status *string `form:"name=status"`
	// Title of the calendar event
	Title *string `form:"name=title"`
}

type PostV2CalendarEventsUpsertRequest struct {
	Request PostV2CalendarEventsUpsertRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
}

type PostV2CalendarEventsUpsertResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
