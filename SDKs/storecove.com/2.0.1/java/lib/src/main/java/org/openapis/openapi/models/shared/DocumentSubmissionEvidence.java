/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * DocumentSubmissionEvidence - Success
 */
public class DocumentSubmissionEvidence {
    /**
     * An array of documents that were sent. For OpenPeppol, this is always a single document (it may contain a PDF inside). For Email, the number of documents depends on the number of attachments, which in turn depends on the country of the receiver. For email, the raw email in RFC822 format is also included.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")public DocumentSubmissionEvidenceDocument[] documents;
    public DocumentSubmissionEvidence withDocuments(DocumentSubmissionEvidenceDocument[] documents) {
        this.documents = documents;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("evidence")public DocumentSubmissionEvidenceEvidence evidence;
    public DocumentSubmissionEvidence withEvidence(DocumentSubmissionEvidenceEvidence evidence) {
        this.evidence = evidence;
        return this;
    }
    
    /**
     * The exchange network that was used to send the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("network")public DocumentSubmissionEvidenceNetworkEnum network;
    public DocumentSubmissionEvidence withNetwork(DocumentSubmissionEvidenceNetworkEnum network) {
        this.network = network;
        return this;
    }
    
    /**
     * The legal identifier of the receiver, or the tax identifier if there is no legal identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("receiver")public String receiver;
    public DocumentSubmissionEvidence withReceiver(String receiver) {
        this.receiver = receiver;
        return this;
    }
    
    /**
     * The legal identifier of the sender, or the tax identifier if there is no legal identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")public String sender;
    public DocumentSubmissionEvidence withSender(String sender) {
        this.sender = sender;
        return this;
    }
    
}
