"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import matterpermission as shared_matterpermission
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class MatterStateEnum(str, Enum):
    r"""The state of the matter."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    OPEN = 'OPEN'
    CLOSED = 'CLOSED'
    DELETED = 'DELETED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Matter:
    r"""Represents a matter. To work with Vault resources, the account must have the [required Vault privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege."""
    
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""An optional description for the matter."""  
    matter_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matterId'), 'exclude': lambda f: f is None }})
    r"""The matter ID, which is generated by the server. Leave blank when creating a matter."""  
    matter_permissions: Optional[list[shared_matterpermission.MatterPermission]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matterPermissions'), 'exclude': lambda f: f is None }})
    r"""Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of the matter."""  
    state: Optional[MatterStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The state of the matter."""  
    