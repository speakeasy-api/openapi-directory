"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import error as shared_error
from ..shared import responseformat_enum as shared_responseformat_enum
from enum import Enum
from typing import Any, Optional

class GetMetadataOfAllChannelsByEnum(str, Enum):
    r"""optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)"""
    VALUE = 'value'
    ID = 'id'


@dataclasses.dataclass
class GetMetadataOfAllChannelsRequest:
    
    by: Optional[GetMetadataOfAllChannelsByEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'by', 'style': 'form', 'explode': True }})
    r"""optionally specifies whether to return just channel names (by=id) or ChannelDetails (by=value)"""  
    format: Optional[shared_responseformat_enum.ResponseFormatEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'format', 'style': 'form', 'explode': True }})
    r"""The response format you would like"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})  
    prefix: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'prefix', 'style': 'form', 'explode': True }})
    r"""Optionally limits the query to only those channels whose name starts with the given prefix"""  
    x_ably_version: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Ably-Version', 'style': 'simple', 'explode': False }})
    r"""The version of the API you wish to use."""  
    

@dataclasses.dataclass
class GetMetadataOfAllChannelsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    error: Optional[shared_error.Error] = dataclasses.field(default=None)
    r"""Error"""  
    get_metadata_of_all_channels_2_xx_application_json_one_of: Optional[Any] = dataclasses.field(default=None)
    r"""OK"""  
    get_metadata_of_all_channels_2_xx_text_html_string: Optional[str] = dataclasses.field(default=None)
    r"""OK"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    