<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * SyncSummary - Success
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class SyncSummary
{
    /**
     * Unique identifier for the sync in Codat.
     * 
     * @var ?string $commerceSyncId
     */
	#[\JMS\Serializer\Annotation\SerializedName('commerceSyncId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $commerceSyncId = null;
    
    /**
     * Unique identifier for your SMB in Codat.
     * 
     * @var ?string $companyId
     */
	#[\JMS\Serializer\Annotation\SerializedName('companyId')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $companyId = null;
    
    /**
     * Array of containing objects data connection information for the company.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\Connection> $dataConnections
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataConnections')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\Connection>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $dataConnections = null;
    
    /**
     * Boolean indicator for data being pushed during a sync operation.
     * 
     * @var ?bool $dataPushed
     */
	#[\JMS\Serializer\Annotation\SerializedName('dataPushed')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $dataPushed = null;
    
    /**
     * Friendly error message for the sync operation.
     * 
     * @var ?string $errorMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('errorMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $errorMessage = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('syncDateRangeUtc')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\DateRange')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?DateRange $syncDateRangeUtc = null;
    
    /**
     * Exception message for the sync operation.
     * 
     * @var ?string $syncExceptionMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncExceptionMessage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncExceptionMessage = null;
    
    /**
     * Status of the sync of the company data. This is linked to status code.
     * 
     * @var ?string $syncStatus
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncStatus')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncStatus = null;
    
    /**
     * Numerical status code sync of the company data.
     * 
     * @var ?int $syncStatusCode
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncStatusCode')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $syncStatusCode = null;
    
    /**
     * In Codat's data model, dates and times are represented using the <a class="external" href="https://en.wikipedia.org/wiki/ISO_8601" target="_blank">ISO 8601 standard</a>. Date and time fields are formatted as strings; for example:
     * 
     * 
     * ```
     * 2020-10-08T22:40:50Z
     * 2021-01-01T00:00:00
     * ```
     * 
     * 
     * 
     * When syncing data that contains `DateTime` fields from Codat, make sure you support the following cases when reading time information:
     * 
     * - Coordinated Universal Time (UTC): `2021-11-15T06:00:00Z`
     * - Unqualified local time: `2021-11-15T01:00:00`
     * - UTC time offsets: `2021-11-15T01:00:00-05:00`
     * 
     * > Time zones
     * > 
     * > Not all dates from Codat will contain information about time zones.  
     * > Where it is not available from the underlying platform, Codat will return these as times local to the business whose data has been synced.
     * 
     * @var ?string $syncUtc
     */
	#[\JMS\Serializer\Annotation\SerializedName('syncUtc')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $syncUtc = null;
    
	public function __construct()
	{
		$this->commerceSyncId = null;
		$this->companyId = null;
		$this->dataConnections = null;
		$this->dataPushed = null;
		$this->errorMessage = null;
		$this->syncDateRangeUtc = null;
		$this->syncExceptionMessage = null;
		$this->syncStatus = null;
		$this->syncStatusCode = null;
		$this->syncUtc = null;
	}
}
