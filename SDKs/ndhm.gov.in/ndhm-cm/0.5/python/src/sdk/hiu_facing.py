"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class HiuFacing:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_5_subscriptions_hiu_on_notify(self, request: operations.PostV05SubscriptionsHiuOnNotifyRequest) -> operations.PostV05SubscriptionsHiuOnNotifyResponse:
        r"""Callback API for /subscriptions/hiu/notify to acknowledge receipt of notification.
        This API is called by HIU as acknowledgement to consent notifications, specifically for cases when consent is REVOKED or EXPIRED.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/subscriptions/hiu/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "hiu_subscription_notification_acknowledgment", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05SubscriptionsHiuOnNotifyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_users_auth_on_notify_json(self, request: operations.PostV05UsersAuthOnNotifyJSONRequest) -> operations.PostV05UsersAuthOnNotifyJSONResponse:
        r"""callback API from HIU/HIPs as acknowledgement of auth notification (in case of DIRECT auth)
        This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/users/auth/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "patient_auth_notification_acknowledgement", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05UsersAuthOnNotifyJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    def post_v0_5_users_auth_on_notify_raw(self, request: operations.PostV05UsersAuthOnNotifyRawRequest) -> operations.PostV05UsersAuthOnNotifyRawResponse:
        r"""callback API from HIU/HIPs as acknowledgement of auth notification (in case of DIRECT auth)
        This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.5/users/auth/on-notify'
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'raw')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV05UsersAuthOnNotifyRawResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 202:
            pass
        elif http_res.status_code in [400, 401, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorResponse])
                res.error_response = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content

        return res

    