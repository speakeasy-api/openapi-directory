<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;

use \OpenAPI\OpenAPI\Utils\SpeakeasyMetadata;
class AppsactivityActivitiesListRequest
{
    /**
     * Data format for the response.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\AltEnum $alt
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=alt')]
    public ?\OpenAPI\OpenAPI\Models\Shared\AltEnum $alt = null;
    
    /**
     * Identifies the Drive folder containing the items for which to return activities.
     * 
     * @var ?string $driveAncestorId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=drive.ancestorId')]
    public ?string $driveAncestorId = null;
    
    /**
     * Identifies the Drive item to return activities for.
     * 
     * @var ?string $driveFileId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=drive.fileId')]
    public ?string $driveFileId = null;
    
    /**
     * Selector specifying which fields to include in a partial response.
     * 
     * @var ?string $fields
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=fields')]
    public ?string $fields = null;
    
    /**
     * Indicates the strategy to use when grouping singleEvents items in the associated combinedEvent object.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Operations\AppsactivityActivitiesListGroupingStrategyEnum $groupingStrategy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=groupingStrategy')]
    public ?AppsactivityActivitiesListGroupingStrategyEnum $groupingStrategy = null;
    
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * 
     * @var ?string $key
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=key')]
    public ?string $key = null;
    
    /**
     * OAuth 2.0 token for the current user.
     * 
     * @var ?string $oauthToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=oauth_token')]
    public ?string $oauthToken = null;
    
    /**
     * The maximum number of events to return on a page. The response includes a continuation token if there are more events.
     * 
     * @var ?int $pageSize
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pageSize')]
    public ?int $pageSize = null;
    
    /**
     * A token to retrieve a specific page of results.
     * 
     * @var ?string $pageToken
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pageToken')]
    public ?string $pageToken = null;
    
    /**
     * Returns response with indentations and line breaks.
     * 
     * @var ?bool $prettyPrint
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=prettyPrint')]
    public ?bool $prettyPrint = null;
    
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * 
     * @var ?string $quotaUser
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=quotaUser')]
    public ?string $quotaUser = null;
    
    /**
     * The Google service from which to return activities. Possible values of source are: 
     * 
     * - drive.google.com
     * 
     * @var ?string $source
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=source')]
    public ?string $source = null;
    
    /**
     * The ID used for ACL checks (does not filter the resulting event list by the assigned value). Use the special value me to indicate the currently authenticated user.
     * 
     * @var ?string $userId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=userId')]
    public ?string $userId = null;
    
    /**
     * Deprecated. Please use quotaUser instead.
     * 
     * @var ?string $userIp
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=userIp')]
    public ?string $userIp = null;
    
	public function __construct()
	{
		$this->alt = null;
		$this->driveAncestorId = null;
		$this->driveFileId = null;
		$this->fields = null;
		$this->groupingStrategy = null;
		$this->key = null;
		$this->oauthToken = null;
		$this->pageSize = null;
		$this->pageToken = null;
		$this->prettyPrint = null;
		$this->quotaUser = null;
		$this->source = null;
		$this->userId = null;
		$this->userIp = null;
	}
}
