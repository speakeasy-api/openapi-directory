"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_lineroutesection as shared_tfl_api_presentation_entities_lineroutesection
from ..shared import tfl_api_presentation_entities_matchedroutesections as shared_tfl_api_presentation_entities_matchedroutesections
from ..shared import tfl_api_presentation_entities_matchedstop as shared_tfl_api_presentation_entities_matchedstop
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesRouteSearchMatch:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    lat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lat'), 'exclude': lambda f: f is None }})  
    line_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineId'), 'exclude': lambda f: f is None }})  
    line_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineName'), 'exclude': lambda f: f is None }})  
    line_route_section: Optional[list[shared_tfl_api_presentation_entities_lineroutesection.TflAPIPresentationEntitiesLineRouteSection]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineRouteSection'), 'exclude': lambda f: f is None }})  
    lon: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lon'), 'exclude': lambda f: f is None }})  
    matched_route_sections: Optional[list[shared_tfl_api_presentation_entities_matchedroutesections.TflAPIPresentationEntitiesMatchedRouteSections]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedRouteSections'), 'exclude': lambda f: f is None }})  
    matched_stops: Optional[list[shared_tfl_api_presentation_entities_matchedstop.TflAPIPresentationEntitiesMatchedStop]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchedStops'), 'exclude': lambda f: f is None }})  
    mode: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    