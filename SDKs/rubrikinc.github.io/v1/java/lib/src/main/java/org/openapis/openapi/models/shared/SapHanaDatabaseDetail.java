/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * SapHanaDatabaseDetail - If the query is successful, returns a detailed view of the SAP HANA database.
 */
public class SapHanaDatabaseDetail {
    /**
     * The ID of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainId")
    public String configuredSlaDomainId;

    public SapHanaDatabaseDetail withConfiguredSlaDomainId(String configuredSlaDomainId) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain configured directly on the Rubrik object.
     */
    @JsonProperty("configuredSlaDomainName")
    public String configuredSlaDomainName;

    public SapHanaDatabaseDetail withConfiguredSlaDomainName(String configuredSlaDomainName) {
        this.configuredSlaDomainName = configuredSlaDomainName;
        return this;
    }
    
    /**
     * Specifies whether the SLA Domain is used for protection or retention.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("configuredSlaDomainType")
    public ConfiguredSlaTypeEnum configuredSlaDomainType;

    public SapHanaDatabaseDetail withConfiguredSlaDomainType(ConfiguredSlaTypeEnum configuredSlaDomainType) {
        this.configuredSlaDomainType = configuredSlaDomainType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPathSpec")
    public SapHanaDataPathSpec dataPathSpec;

    public SapHanaDatabaseDetail withDataPathSpec(SapHanaDataPathSpec dataPathSpec) {
        this.dataPathSpec = dataPathSpec;
        return this;
    }
    
    /**
     * Data path of the SAP HANA BACKINT interface specifying the location where the BACKINT interface stores backups. Supported data path types are MANAGED_VOLUME, GCP, and LOCAL. MANAGED_VOLUME specifies a data path used by the BACKINT interface to store backups on an on-premises Rubrik CDM cluster. GCP specifies that backups are stored on Google Cloud Platform. LOCAL indicates the backup is stored locally.
     */
    @JsonProperty("dataPathType")
    public SapHanaDataPathTypeEnum dataPathType;

    public SapHanaDatabaseDetail withDataPathType(SapHanaDataPathTypeEnum dataPathType) {
        this.dataPathType = dataPathType;
        return this;
    }
    
    /**
     * Whether the database is in an ACTIVE,INACTIVE, or UNKNOWN state.
     */
    @JsonProperty("dbStatus")
    public SapHanaDatabaseDetailDbStatusEnum dbStatus;

    public SapHanaDatabaseDetail withDbStatus(SapHanaDatabaseDetailDbStatusEnum dbStatus) {
        this.dbStatus = dbStatus;
        return this;
    }
    
    /**
     * The type of SAP HANA database. Possible values are SYSTEM or TENANT. The SYSTEM database stores information about SAP HANA users and central system management. The TENANT database contains databases used by applications.
     */
    @JsonProperty("dbType")
    public SapHanaDatabaseDetailDbTypeEnum dbType;

    public SapHanaDatabaseDetail withDbType(SapHanaDatabaseDetailDbTypeEnum dbType) {
        this.dbType = dbType;
        return this;
    }
    
    /**
     * The ID of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainId")
    public String effectiveSlaDomainId;

    public SapHanaDatabaseDetail withEffectiveSlaDomainId(String effectiveSlaDomainId) {
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        return this;
    }
    
    /**
     * The name of the SLA Domain that controls the protection of the Rubrik object.
     */
    @JsonProperty("effectiveSlaDomainName")
    public String effectiveSlaDomainName;

    public SapHanaDatabaseDetail withEffectiveSlaDomainName(String effectiveSlaDomainName) {
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        return this;
    }
    
    /**
     * Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaDomainPolarisManagedId")
    public String effectiveSlaDomainPolarisManagedId;

    public SapHanaDatabaseDetail withEffectiveSlaDomainPolarisManagedId(String effectiveSlaDomainPolarisManagedId) {
        this.effectiveSlaDomainPolarisManagedId = effectiveSlaDomainPolarisManagedId;
        return this;
    }
    
    /**
     * The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectId")
    public String effectiveSlaSourceObjectId;

    public SapHanaDatabaseDetail withEffectiveSlaSourceObjectId(String effectiveSlaSourceObjectId) {
        this.effectiveSlaSourceObjectId = effectiveSlaSourceObjectId;
        return this;
    }
    
    /**
     * The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effectiveSlaSourceObjectName")
    public String effectiveSlaSourceObjectName;

    public SapHanaDatabaseDetail withEffectiveSlaSourceObjectName(String effectiveSlaSourceObjectName) {
        this.effectiveSlaSourceObjectName = effectiveSlaSourceObjectName;
        return this;
    }
    
    /**
     * Determines whether to force a full snapshot for the next backup of the SAP HANA database. Use true to force a full snapshot and false to use the default. The backup job resets the parameter to false after a successful full backup.
     */
    @JsonProperty("forceFull")
    public Boolean forceFull;

    public SapHanaDatabaseDetail withForceFull(Boolean forceFull) {
        this.forceFull = forceFull;
        return this;
    }
    
    /**
     * The ID of the Rubrik object.
     */
    @JsonProperty("id")
    public String id;

    public SapHanaDatabaseDetail withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isConfiguredSlaDomainRetentionLocked")
    public Boolean isConfiguredSlaDomainRetentionLocked;

    public SapHanaDatabaseDetail withIsConfiguredSlaDomainRetentionLocked(Boolean isConfiguredSlaDomainRetentionLocked) {
        this.isConfiguredSlaDomainRetentionLocked = isConfiguredSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isEffectiveSlaDomainRetentionLocked")
    public Boolean isEffectiveSlaDomainRetentionLocked;

    public SapHanaDatabaseDetail withIsEffectiveSlaDomainRetentionLocked(Boolean isEffectiveSlaDomainRetentionLocked) {
        this.isEffectiveSlaDomainRetentionLocked = isEffectiveSlaDomainRetentionLocked;
        return this;
    }
    
    /**
     * Specifies whether the SAP HANA database is accessible on the CDM cluster.
     */
    @JsonProperty("isRelic")
    public Boolean isRelic;

    public SapHanaDatabaseDetail withIsRelic(Boolean isRelic) {
        this.isRelic = isRelic;
        return this;
    }
    
    /**
     * The most recent recovery point for the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("latestRecoveryPoint")
    public OffsetDateTime latestRecoveryPoint;

    public SapHanaDatabaseDetail withLatestRecoveryPoint(OffsetDateTime latestRecoveryPoint) {
        this.latestRecoveryPoint = latestRecoveryPoint;
        return this;
    }
    
    /**
     * The log backup interval in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logBackupIntervalInSecs")
    public Integer logBackupIntervalInSecs;

    public SapHanaDatabaseDetail withLogBackupIntervalInSecs(Integer logBackupIntervalInSecs) {
        this.logBackupIntervalInSecs = logBackupIntervalInSecs;
        return this;
    }
    
    /**
     * The log snapshot job interval in minutes.
     */
    @JsonProperty("logSnapshotJobIntervalInMinutes")
    public Integer logSnapshotJobIntervalInMinutes;

    public SapHanaDatabaseDetail withLogSnapshotJobIntervalInMinutes(Integer logSnapshotJobIntervalInMinutes) {
        this.logSnapshotJobIntervalInMinutes = logSnapshotJobIntervalInMinutes;
        return this;
    }
    
    /**
     * The name of the Rubrik object.
     */
    @JsonProperty("name")
    public String name;

    public SapHanaDatabaseDetail withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of channels for multistream backups.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numChannels")
    public Integer numChannels;

    public SapHanaDatabaseDetail withNumChannels(Integer numChannels) {
        this.numChannels = numChannels;
        return this;
    }
    
    /**
     * The earliest recovery point for the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("oldestRecoveryPoint")
    public OffsetDateTime oldestRecoveryPoint;

    public SapHanaDatabaseDetail withOldestRecoveryPoint(OffsetDateTime oldestRecoveryPoint) {
        this.oldestRecoveryPoint = oldestRecoveryPoint;
        return this;
    }
    
    /**
     * The Prefixes of previous failed backup jobs. Prefix is an identifier used by SAP HANA BACKINT to uniquely identify backups.
     */
    @JsonProperty("previousFailedBackupPrefixes")
    public String[] previousFailedBackupPrefixes;

    public SapHanaDatabaseDetail withPreviousFailedBackupPrefixes(String[] previousFailedBackupPrefixes) {
        this.previousFailedBackupPrefixes = previousFailedBackupPrefixes;
        return this;
    }
    
    /**
     * The ID of the cluster that manages the Rubrik object.
     */
    @JsonProperty("primaryClusterId")
    public String primaryClusterId;

    public SapHanaDatabaseDetail withPrimaryClusterId(String primaryClusterId) {
        this.primaryClusterId = primaryClusterId;
        return this;
    }
    
    /**
     * The ID of the CDM cluster that protects the SAP HANA database.
     */
    @JsonProperty("primaryClusterUuid")
    public String primaryClusterUuid;

    public SapHanaDatabaseDetail withPrimaryClusterUuid(String primaryClusterUuid) {
        this.primaryClusterUuid = primaryClusterUuid;
        return this;
    }
    
    /**
     * The UTC timestamp for when the SAP HANA database was first protected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("protectionDate")
    public OffsetDateTime protectionDate;

    public SapHanaDatabaseDetail withProtectionDate(OffsetDateTime protectionDate) {
        this.protectionDate = protectionDate;
        return this;
    }
    
    /**
     * The ID of the SLA Domain whose retention policy is in use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retentionSlaDomainId")
    public String retentionSlaDomainId;

    public SapHanaDatabaseDetail withRetentionSlaDomainId(String retentionSlaDomainId) {
        this.retentionSlaDomainId = retentionSlaDomainId;
        return this;
    }
    
    /**
     * The ID of the SAP HANA system that owns the database.
     */
    @JsonProperty("sapHanaSystemId")
    public String sapHanaSystemId;

    public SapHanaDatabaseDetail withSapHanaSystemId(String sapHanaSystemId) {
        this.sapHanaSystemId = sapHanaSystemId;
        return this;
    }
    
    /**
     * Name of the SAP HANA system that owns the database.
     */
    @JsonProperty("sapHanaSystemName")
    public String sapHanaSystemName;

    public SapHanaDatabaseDetail withSapHanaSystemName(String sapHanaSystemName) {
        this.sapHanaSystemName = sapHanaSystemName;
        return this;
    }
    
    /**
     * The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.
     */
    @JsonProperty("slaAssignment")
    public SapHanaDatabaseDetailSlaAssignmentEnum slaAssignment;

    public SapHanaDatabaseDetail withSlaAssignment(SapHanaDatabaseDetailSlaAssignmentEnum slaAssignment) {
        this.slaAssignment = slaAssignment;
        return this;
    }
    
    /**
     * The UTC time when the SLA Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("slaLastUpdateTime")
    public OffsetDateTime slaLastUpdateTime;

    public SapHanaDatabaseDetail withSlaLastUpdateTime(OffsetDateTime slaLastUpdateTime) {
        this.slaLastUpdateTime = slaLastUpdateTime;
        return this;
    }
    
    /**
     * The total number of SAP HANA snapshots that have been taken.
     */
    @JsonProperty("snapshotCount")
    public Integer snapshotCount;

    public SapHanaDatabaseDetail withSnapshotCount(Integer snapshotCount) {
        this.snapshotCount = snapshotCount;
        return this;
    }
    
    public SapHanaDatabaseDetail(@JsonProperty("configuredSlaDomainId") String configuredSlaDomainId, @JsonProperty("configuredSlaDomainName") String configuredSlaDomainName, @JsonProperty("dataPathType") SapHanaDataPathTypeEnum dataPathType, @JsonProperty("dbStatus") SapHanaDatabaseDetailDbStatusEnum dbStatus, @JsonProperty("dbType") SapHanaDatabaseDetailDbTypeEnum dbType, @JsonProperty("effectiveSlaDomainId") String effectiveSlaDomainId, @JsonProperty("effectiveSlaDomainName") String effectiveSlaDomainName, @JsonProperty("forceFull") Boolean forceFull, @JsonProperty("id") String id, @JsonProperty("isRelic") Boolean isRelic, @JsonProperty("logSnapshotJobIntervalInMinutes") Integer logSnapshotJobIntervalInMinutes, @JsonProperty("name") String name, @JsonProperty("previousFailedBackupPrefixes") String[] previousFailedBackupPrefixes, @JsonProperty("primaryClusterId") String primaryClusterId, @JsonProperty("primaryClusterUuid") String primaryClusterUuid, @JsonProperty("sapHanaSystemId") String sapHanaSystemId, @JsonProperty("sapHanaSystemName") String sapHanaSystemName, @JsonProperty("slaAssignment") SapHanaDatabaseDetailSlaAssignmentEnum slaAssignment, @JsonProperty("snapshotCount") Integer snapshotCount) {
        this.configuredSlaDomainId = configuredSlaDomainId;
        this.configuredSlaDomainName = configuredSlaDomainName;
        this.dataPathType = dataPathType;
        this.dbStatus = dbStatus;
        this.dbType = dbType;
        this.effectiveSlaDomainId = effectiveSlaDomainId;
        this.effectiveSlaDomainName = effectiveSlaDomainName;
        this.forceFull = forceFull;
        this.id = id;
        this.isRelic = isRelic;
        this.logSnapshotJobIntervalInMinutes = logSnapshotJobIntervalInMinutes;
        this.name = name;
        this.previousFailedBackupPrefixes = previousFailedBackupPrefixes;
        this.primaryClusterId = primaryClusterId;
        this.primaryClusterUuid = primaryClusterUuid;
        this.sapHanaSystemId = sapHanaSystemId;
        this.sapHanaSystemName = sapHanaSystemName;
        this.slaAssignment = slaAssignment;
        this.snapshotCount = snapshotCount;
  }
}
