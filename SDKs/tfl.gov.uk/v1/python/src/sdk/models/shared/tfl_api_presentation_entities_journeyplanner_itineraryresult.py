"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import tfl_api_presentation_entities_journeyplanner_journey as shared_tfl_api_presentation_entities_journeyplanner_journey
from ..shared import tfl_api_presentation_entities_journeyplanner_journeyplannercyclehiredockingstationdata as shared_tfl_api_presentation_entities_journeyplanner_journeyplannercyclehiredockingstationdata
from ..shared import tfl_api_presentation_entities_journeyplanner_journeyvector as shared_tfl_api_presentation_entities_journeyplanner_journeyvector
from ..shared import tfl_api_presentation_entities_journeyplanner_searchcriteria as shared_tfl_api_presentation_entities_journeyplanner_searchcriteria
from ..shared import tfl_api_presentation_entities_line as shared_tfl_api_presentation_entities_line
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TflAPIPresentationEntitiesJourneyPlannerItineraryResult:
    r"""A DTO representing a list of possible journeys."""
    
    cycle_hire_docking_station_data: Optional[shared_tfl_api_presentation_entities_journeyplanner_journeyplannercyclehiredockingstationdata.TflAPIPresentationEntitiesJourneyPlannerJourneyPlannerCycleHireDockingStationData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cycleHireDockingStationData'), 'exclude': lambda f: f is None }})  
    journeys: Optional[list[shared_tfl_api_presentation_entities_journeyplanner_journey.TflAPIPresentationEntitiesJourneyPlannerJourney]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journeys'), 'exclude': lambda f: f is None }})  
    journey_vector: Optional[shared_tfl_api_presentation_entities_journeyplanner_journeyvector.TflAPIPresentationEntitiesJourneyPlannerJourneyVector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('journeyVector'), 'exclude': lambda f: f is None }})  
    lines: Optional[list[shared_tfl_api_presentation_entities_line.TflAPIPresentationEntitiesLine]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lines'), 'exclude': lambda f: f is None }})  
    recommended_max_age_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recommendedMaxAgeMinutes'), 'exclude': lambda f: f is None }})  
    search_criteria: Optional[shared_tfl_api_presentation_entities_journeyplanner_searchcriteria.TflAPIPresentationEntitiesJourneyPlannerSearchCriteria] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('searchCriteria'), 'exclude': lambda f: f is None }})  
    stop_messages: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stopMessages'), 'exclude': lambda f: f is None }})  
    