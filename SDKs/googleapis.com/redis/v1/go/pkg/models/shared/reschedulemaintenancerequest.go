// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RescheduleMaintenanceRequestRescheduleTypeEnum - Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.
type RescheduleMaintenanceRequestRescheduleTypeEnum string

const (
	RescheduleMaintenanceRequestRescheduleTypeEnumRescheduleTypeUnspecified RescheduleMaintenanceRequestRescheduleTypeEnum = "RESCHEDULE_TYPE_UNSPECIFIED"
	RescheduleMaintenanceRequestRescheduleTypeEnumImmediate                 RescheduleMaintenanceRequestRescheduleTypeEnum = "IMMEDIATE"
	RescheduleMaintenanceRequestRescheduleTypeEnumNextAvailableWindow       RescheduleMaintenanceRequestRescheduleTypeEnum = "NEXT_AVAILABLE_WINDOW"
	RescheduleMaintenanceRequestRescheduleTypeEnumSpecificTime              RescheduleMaintenanceRequestRescheduleTypeEnum = "SPECIFIC_TIME"
)

func (e *RescheduleMaintenanceRequestRescheduleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "RESCHEDULE_TYPE_UNSPECIFIED":
		fallthrough
	case "IMMEDIATE":
		fallthrough
	case "NEXT_AVAILABLE_WINDOW":
		fallthrough
	case "SPECIFIC_TIME":
		*e = RescheduleMaintenanceRequestRescheduleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for RescheduleMaintenanceRequestRescheduleTypeEnum: %s", s)
	}
}

// RescheduleMaintenanceRequest - Request for RescheduleMaintenance.
type RescheduleMaintenanceRequest struct {
	// Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as well.
	RescheduleType *RescheduleMaintenanceRequestRescheduleTypeEnum `json:"rescheduleType,omitempty"`
	// Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example `2012-11-15T16:19:00.094Z`.
	ScheduleTime *string `json:"scheduleTime,omitempty"`
}
