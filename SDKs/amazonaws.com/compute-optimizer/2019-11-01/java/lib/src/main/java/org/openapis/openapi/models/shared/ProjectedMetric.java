/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * ProjectedMetric - &lt;p&gt;Describes a projected utilization metric of a recommendation option, such as an Amazon EC2 instance. This represents the projected utilization of a recommendation option had you used that resource during the analyzed period.&lt;/p&gt; &lt;p&gt;Compare the utilization metric data of your resource against its projected utilization metric data to determine the performance difference between your current resource and the recommended option.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;Cpu&lt;/code&gt; and &lt;code&gt;Memory&lt;/code&gt; metrics are the only projected utilization metrics returned when you run the &lt;a&gt;GetEC2RecommendationProjectedMetrics&lt;/a&gt; action. Additionally, the &lt;code&gt;Memory&lt;/code&gt; metric is returned only for resources that have the unified CloudWatch agent installed on them. For more information, see &lt;a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent"&gt;Enabling Memory Utilization with the CloudWatch Agent&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */
public class ProjectedMetric {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public MetricNameEnum name;

    public ProjectedMetric withName(MetricNameEnum name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamps")
    public OffsetDateTime[] timestamps;

    public ProjectedMetric withTimestamps(OffsetDateTime[] timestamps) {
        this.timestamps = timestamps;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("values")
    public Double[] values;

    public ProjectedMetric withValues(Double[] values) {
        this.values = values;
        return this;
    }
    
    public ProjectedMetric(){}
}
