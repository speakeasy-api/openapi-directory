// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type EventTypeEnum string

const (
	EventTypeEnumAll                    EventTypeEnum = "ALL"
	EventTypeEnumTextAll                EventTypeEnum = "TEXT_ALL"
	EventTypeEnumTextSent               EventTypeEnum = "TEXT_SENT"
	EventTypeEnumTextPending            EventTypeEnum = "TEXT_PENDING"
	EventTypeEnumTextQueued             EventTypeEnum = "TEXT_QUEUED"
	EventTypeEnumTextSuccessful         EventTypeEnum = "TEXT_SUCCESSFUL"
	EventTypeEnumTextDelivered          EventTypeEnum = "TEXT_DELIVERED"
	EventTypeEnumTextInvalid            EventTypeEnum = "TEXT_INVALID"
	EventTypeEnumTextInvalidMessage     EventTypeEnum = "TEXT_INVALID_MESSAGE"
	EventTypeEnumTextUnreachable        EventTypeEnum = "TEXT_UNREACHABLE"
	EventTypeEnumTextCarrierUnreachable EventTypeEnum = "TEXT_CARRIER_UNREACHABLE"
	EventTypeEnumTextBlocked            EventTypeEnum = "TEXT_BLOCKED"
	EventTypeEnumTextCarrierBlocked     EventTypeEnum = "TEXT_CARRIER_BLOCKED"
	EventTypeEnumTextSpam               EventTypeEnum = "TEXT_SPAM"
	EventTypeEnumTextUnknown            EventTypeEnum = "TEXT_UNKNOWN"
	EventTypeEnumTextTTLExpired         EventTypeEnum = "TEXT_TTL_EXPIRED"
	EventTypeEnumVoiceAll               EventTypeEnum = "VOICE_ALL"
	EventTypeEnumVoiceInitiated         EventTypeEnum = "VOICE_INITIATED"
	EventTypeEnumVoiceRinging           EventTypeEnum = "VOICE_RINGING"
	EventTypeEnumVoiceAnswered          EventTypeEnum = "VOICE_ANSWERED"
	EventTypeEnumVoiceCompleted         EventTypeEnum = "VOICE_COMPLETED"
	EventTypeEnumVoiceBusy              EventTypeEnum = "VOICE_BUSY"
	EventTypeEnumVoiceNoAnswer          EventTypeEnum = "VOICE_NO_ANSWER"
	EventTypeEnumVoiceFailed            EventTypeEnum = "VOICE_FAILED"
	EventTypeEnumVoiceTTLExpired        EventTypeEnum = "VOICE_TTL_EXPIRED"
)

func (e EventTypeEnum) ToPointer() *EventTypeEnum {
	return &e
}

func (e *EventTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ALL":
		fallthrough
	case "TEXT_ALL":
		fallthrough
	case "TEXT_SENT":
		fallthrough
	case "TEXT_PENDING":
		fallthrough
	case "TEXT_QUEUED":
		fallthrough
	case "TEXT_SUCCESSFUL":
		fallthrough
	case "TEXT_DELIVERED":
		fallthrough
	case "TEXT_INVALID":
		fallthrough
	case "TEXT_INVALID_MESSAGE":
		fallthrough
	case "TEXT_UNREACHABLE":
		fallthrough
	case "TEXT_CARRIER_UNREACHABLE":
		fallthrough
	case "TEXT_BLOCKED":
		fallthrough
	case "TEXT_CARRIER_BLOCKED":
		fallthrough
	case "TEXT_SPAM":
		fallthrough
	case "TEXT_UNKNOWN":
		fallthrough
	case "TEXT_TTL_EXPIRED":
		fallthrough
	case "VOICE_ALL":
		fallthrough
	case "VOICE_INITIATED":
		fallthrough
	case "VOICE_RINGING":
		fallthrough
	case "VOICE_ANSWERED":
		fallthrough
	case "VOICE_COMPLETED":
		fallthrough
	case "VOICE_BUSY":
		fallthrough
	case "VOICE_NO_ANSWER":
		fallthrough
	case "VOICE_FAILED":
		fallthrough
	case "VOICE_TTL_EXPIRED":
		*e = EventTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventTypeEnum: %v", v)
	}
}
