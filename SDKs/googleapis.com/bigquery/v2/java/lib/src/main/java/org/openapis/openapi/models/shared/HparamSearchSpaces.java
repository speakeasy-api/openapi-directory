/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * HparamSearchSpaces - Hyperparameter search spaces. These should be a subset of training_options.
 */
public class HparamSearchSpaces {
    /**
     * Search space for string and enum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("activationFn")
    public StringHparamSearchSpace activationFn;
    public HparamSearchSpaces withActivationFn(StringHparamSearchSpace activationFn) {
        this.activationFn = activationFn;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("batchSize")
    public IntHparamSearchSpace batchSize;
    public HparamSearchSpaces withBatchSize(IntHparamSearchSpace batchSize) {
        this.batchSize = batchSize;
        return this;
    }
    
    /**
     * Search space for string and enum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("boosterType")
    public StringHparamSearchSpace boosterType;
    public HparamSearchSpaces withBoosterType(StringHparamSearchSpace boosterType) {
        this.boosterType = boosterType;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colsampleBylevel")
    public DoubleHparamSearchSpace colsampleBylevel;
    public HparamSearchSpaces withColsampleBylevel(DoubleHparamSearchSpace colsampleBylevel) {
        this.colsampleBylevel = colsampleBylevel;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colsampleBynode")
    public DoubleHparamSearchSpace colsampleBynode;
    public HparamSearchSpaces withColsampleBynode(DoubleHparamSearchSpace colsampleBynode) {
        this.colsampleBynode = colsampleBynode;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colsampleBytree")
    public DoubleHparamSearchSpace colsampleBytree;
    public HparamSearchSpaces withColsampleBytree(DoubleHparamSearchSpace colsampleBytree) {
        this.colsampleBytree = colsampleBytree;
        return this;
    }
    
    /**
     * Search space for string and enum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dartNormalizeType")
    public StringHparamSearchSpace dartNormalizeType;
    public HparamSearchSpaces withDartNormalizeType(StringHparamSearchSpace dartNormalizeType) {
        this.dartNormalizeType = dartNormalizeType;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dropout")
    public DoubleHparamSearchSpace dropout;
    public HparamSearchSpaces withDropout(DoubleHparamSearchSpace dropout) {
        this.dropout = dropout;
        return this;
    }
    
    /**
     * Search space for int array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hiddenUnits")
    public IntArrayHparamSearchSpace hiddenUnits;
    public HparamSearchSpaces withHiddenUnits(IntArrayHparamSearchSpace hiddenUnits) {
        this.hiddenUnits = hiddenUnits;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("l1Reg")
    public DoubleHparamSearchSpace l1Reg;
    public HparamSearchSpaces withL1Reg(DoubleHparamSearchSpace l1Reg) {
        this.l1Reg = l1Reg;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("l2Reg")
    public DoubleHparamSearchSpace l2Reg;
    public HparamSearchSpaces withL2Reg(DoubleHparamSearchSpace l2Reg) {
        this.l2Reg = l2Reg;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("learnRate")
    public DoubleHparamSearchSpace learnRate;
    public HparamSearchSpaces withLearnRate(DoubleHparamSearchSpace learnRate) {
        this.learnRate = learnRate;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxTreeDepth")
    public IntHparamSearchSpace maxTreeDepth;
    public HparamSearchSpaces withMaxTreeDepth(IntHparamSearchSpace maxTreeDepth) {
        this.maxTreeDepth = maxTreeDepth;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minSplitLoss")
    public DoubleHparamSearchSpace minSplitLoss;
    public HparamSearchSpaces withMinSplitLoss(DoubleHparamSearchSpace minSplitLoss) {
        this.minSplitLoss = minSplitLoss;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minTreeChildWeight")
    public IntHparamSearchSpace minTreeChildWeight;
    public HparamSearchSpaces withMinTreeChildWeight(IntHparamSearchSpace minTreeChildWeight) {
        this.minTreeChildWeight = minTreeChildWeight;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numClusters")
    public IntHparamSearchSpace numClusters;
    public HparamSearchSpaces withNumClusters(IntHparamSearchSpace numClusters) {
        this.numClusters = numClusters;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numFactors")
    public IntHparamSearchSpace numFactors;
    public HparamSearchSpaces withNumFactors(IntHparamSearchSpace numFactors) {
        this.numFactors = numFactors;
        return this;
    }
    
    /**
     * Search space for an int hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numParallelTree")
    public IntHparamSearchSpace numParallelTree;
    public HparamSearchSpaces withNumParallelTree(IntHparamSearchSpace numParallelTree) {
        this.numParallelTree = numParallelTree;
        return this;
    }
    
    /**
     * Search space for string and enum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("optimizer")
    public StringHparamSearchSpace optimizer;
    public HparamSearchSpaces withOptimizer(StringHparamSearchSpace optimizer) {
        this.optimizer = optimizer;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsample")
    public DoubleHparamSearchSpace subsample;
    public HparamSearchSpaces withSubsample(DoubleHparamSearchSpace subsample) {
        this.subsample = subsample;
        return this;
    }
    
    /**
     * Search space for string and enum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("treeMethod")
    public StringHparamSearchSpace treeMethod;
    public HparamSearchSpaces withTreeMethod(StringHparamSearchSpace treeMethod) {
        this.treeMethod = treeMethod;
        return this;
    }
    
    /**
     * Search space for a double hyperparameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("walsAlpha")
    public DoubleHparamSearchSpace walsAlpha;
    public HparamSearchSpaces withWalsAlpha(DoubleHparamSearchSpace walsAlpha) {
        this.walsAlpha = walsAlpha;
        return this;
    }
    
}
