"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CmHybridConfig:
    r"""Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers."""
    
    cm_account_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cmAccountId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser."""  
    cm_floodlight_config_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cmFloodlightConfigId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser."""  
    cm_floodlight_linking_authorized: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cmFloodlightLinkingAuthorized'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser."""  
    cm_syncable_site_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cmSyncableSiteIds'), 'exclude': lambda f: f is None }})
    r"""A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified."""  
    dv360_to_cm_cost_reporting_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dv360ToCmCostReportingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not to report DV360 cost to CM360."""  
    dv360_to_cm_data_sharing_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dv360ToCmDataSharingEnabled'), 'exclude': lambda f: f is None }})
    r"""Whether or not to include DV360 data in CM360 data transfer reports."""  
    