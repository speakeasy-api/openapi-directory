// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTModifyReplicationGroupShardConfigurationActionEnum
type POSTModifyReplicationGroupShardConfigurationActionEnum string

const (
	POSTModifyReplicationGroupShardConfigurationActionEnumModifyReplicationGroupShardConfiguration POSTModifyReplicationGroupShardConfigurationActionEnum = "ModifyReplicationGroupShardConfiguration"
)

func (e *POSTModifyReplicationGroupShardConfigurationActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ModifyReplicationGroupShardConfiguration":
		*e = POSTModifyReplicationGroupShardConfigurationActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTModifyReplicationGroupShardConfigurationActionEnum: %s", s)
	}
}

// POSTModifyReplicationGroupShardConfigurationVersionEnum
type POSTModifyReplicationGroupShardConfigurationVersionEnum string

const (
	POSTModifyReplicationGroupShardConfigurationVersionEnumTwoThousandAndFifteen0202 POSTModifyReplicationGroupShardConfigurationVersionEnum = "2015-02-02"
)

func (e *POSTModifyReplicationGroupShardConfigurationVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2015-02-02":
		*e = POSTModifyReplicationGroupShardConfigurationVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTModifyReplicationGroupShardConfigurationVersionEnum: %s", s)
	}
}

type POSTModifyReplicationGroupShardConfigurationQueryParams struct {
	Action  POSTModifyReplicationGroupShardConfigurationActionEnum  `queryParam:"style=form,explode=true,name=Action"`
	Version POSTModifyReplicationGroupShardConfigurationVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTModifyReplicationGroupShardConfigurationHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTModifyReplicationGroupShardConfigurationRequest struct {
	QueryParams POSTModifyReplicationGroupShardConfigurationQueryParams
	Headers     POSTModifyReplicationGroupShardConfigurationHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTModifyReplicationGroupShardConfigurationResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
