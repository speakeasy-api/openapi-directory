// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// FileDirectionEnum - Whether the File was generated by Increase or by you and sent to Increase.
type FileDirectionEnum string

const (
	FileDirectionEnumToIncrease   FileDirectionEnum = "to_increase"
	FileDirectionEnumFromIncrease FileDirectionEnum = "from_increase"
)

func (e *FileDirectionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "to_increase":
		fallthrough
	case "from_increase":
		*e = FileDirectionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FileDirectionEnum: %s", s)
	}
}

// FilePurposeEnum - What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
type FilePurposeEnum string

const (
	FilePurposeEnumCheckImageFront            FilePurposeEnum = "check_image_front"
	FilePurposeEnumCheckImageBack             FilePurposeEnum = "check_image_back"
	FilePurposeEnumForm1099Int                FilePurposeEnum = "form_1099_int"
	FilePurposeEnumFormSs4                    FilePurposeEnum = "form_ss_4"
	FilePurposeEnumIdentityDocument           FilePurposeEnum = "identity_document"
	FilePurposeEnumIncreaseStatement          FilePurposeEnum = "increase_statement"
	FilePurposeEnumOther                      FilePurposeEnum = "other"
	FilePurposeEnumTrustFormationDocument     FilePurposeEnum = "trust_formation_document"
	FilePurposeEnumDigitalWalletArtwork       FilePurposeEnum = "digital_wallet_artwork"
	FilePurposeEnumDigitalWalletAppIcon       FilePurposeEnum = "digital_wallet_app_icon"
	FilePurposeEnumEntitySupplementalDocument FilePurposeEnum = "entity_supplemental_document"
)

func (e *FilePurposeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "check_image_front":
		fallthrough
	case "check_image_back":
		fallthrough
	case "form_1099_int":
		fallthrough
	case "form_ss_4":
		fallthrough
	case "identity_document":
		fallthrough
	case "increase_statement":
		fallthrough
	case "other":
		fallthrough
	case "trust_formation_document":
		fallthrough
	case "digital_wallet_artwork":
		fallthrough
	case "digital_wallet_app_icon":
		fallthrough
	case "entity_supplemental_document":
		*e = FilePurposeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FilePurposeEnum: %s", s)
	}
}

// FileTypeEnum - A constant representing the object's type. For this resource it will always be `file`.
type FileTypeEnum string

const (
	FileTypeEnumFile FileTypeEnum = "file"
)

func (e *FileTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "file":
		*e = FileTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FileTypeEnum: %s", s)
	}
}

// File - Files are objects that represent a file hosted on Increase's servers. The file may have been uploaded by you (for example, when uploading a check image) or it may have been created by Increase (for example, an autogenerated statement PDF).
type File struct {
	// The time the File was created.
	CreatedAt time.Time `json:"created_at"`
	// A description of the File.
	Description string `json:"description"`
	// Whether the File was generated by Increase or by you and sent to Increase.
	Direction FileDirectionEnum `json:"direction"`
	// A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.
	DownloadURL string `json:"download_url"`
	// The filename that was provided upon upload or generated by Increase.
	Filename string `json:"filename"`
	// The File's identifier.
	ID string `json:"id"`
	// What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.
	Purpose FilePurposeEnum `json:"purpose"`
	// A constant representing the object's type. For this resource it will always be `file`.
	Type FileTypeEnum `json:"type"`
}
