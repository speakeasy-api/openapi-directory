/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform } from "class-transformer";

export class EntityReceiptDisbursementTotals extends SpeakeasyBase {
  /**
   * Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_candidate_disbursements" })
  cumulativeCandidateDisbursements?: number;

  /**
   * Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_candidate_receipts" })
  cumulativeCandidateReceipts?: number;

  /**
   * Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_pac_disbursements" })
  cumulativePacDisbursements?: number;

  /**
   * Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_pac_receipts" })
  cumulativePacReceipts?: number;

  /**
   * Cumulative party disbursements in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_party_disbursements" })
  cumulativePartyDisbursements?: number;

  /**
   * Cumulative party receipts in a two year period, adjusted to avoid double counting.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cumulative_party_receipts" })
  cumulativePartyReceipts?: number;

  /**
   *
   * @remarks
   * Filter records to only those that were applicable to a given
   * two-year period.The cycle begins with an odd year and is named
   * for its ending, even year.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cycle" })
  cycle?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "end_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endDate?: Date;
}
