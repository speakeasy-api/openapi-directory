/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Projects {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.
   */
  resourcesettingsProjectsSettingsGet(
    req: operations.ResourcesettingsProjectsSettingsGetRequest,
    security: operations.ResourcesettingsProjectsSettingsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResourcesettingsProjectsSettingsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResourcesettingsProjectsSettingsGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResourcesettingsProjectsSettingsGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResourcesettingsProjectsSettingsGetResponse =
        new operations.ResourcesettingsProjectsSettingsGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudResourcesettingsV1Setting = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudResourcesettingsV1Setting
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists all the settings that are available on the Cloud resource `parent`.
   */
  resourcesettingsProjectsSettingsList(
    req: operations.ResourcesettingsProjectsSettingsListRequest,
    security: operations.ResourcesettingsProjectsSettingsListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResourcesettingsProjectsSettingsListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResourcesettingsProjectsSettingsListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v1/{parent}/settings",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResourcesettingsProjectsSettingsListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResourcesettingsProjectsSettingsListResponse =
        new operations.ResourcesettingsProjectsSettingsListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudResourcesettingsV1ListSettingsResponse =
              utils.objectToClass(
                httpRes?.data,
                shared.GoogleCloudResourcesettingsV1ListSettingsResponse
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.
   */
  resourcesettingsProjectsSettingsPatch(
    req: operations.ResourcesettingsProjectsSettingsPatchRequest,
    security: operations.ResourcesettingsProjectsSettingsPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ResourcesettingsProjectsSettingsPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ResourcesettingsProjectsSettingsPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(baseURL, "/v1/{name}", req);

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "googleCloudResourcesettingsV1Setting",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ResourcesettingsProjectsSettingsPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ResourcesettingsProjectsSettingsPatchResponse =
        new operations.ResourcesettingsProjectsSettingsPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.googleCloudResourcesettingsV1Setting = utils.objectToClass(
              httpRes?.data,
              shared.GoogleCloudResourcesettingsV1Setting
            );
          }
          break;
      }

      return res;
    });
  }
}
