"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import header as shared_header
from ..shared import i18nconfig as shared_i18nconfig
from ..shared import redirect as shared_redirect
from ..shared import rewrite as shared_rewrite
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ServingConfigAppAssociationEnum(str, Enum):
    r"""How to handle well known App Association files."""
    AUTO = 'AUTO'
    NONE = 'NONE'

class ServingConfigTrailingSlashBehaviorEnum(str, Enum):
    r"""Defines how to handle a trailing slash in the URL path."""
    TRAILING_SLASH_BEHAVIOR_UNSPECIFIED = 'TRAILING_SLASH_BEHAVIOR_UNSPECIFIED'
    ADD = 'ADD'
    REMOVE = 'REMOVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ServingConfig:
    r"""The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order)."""
    
    app_association: Optional[ServingConfigAppAssociationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('appAssociation'), 'exclude': lambda f: f is None }})
    r"""How to handle well known App Association files."""  
    clean_urls: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cleanUrls'), 'exclude': lambda f: f is None }})
    r"""Defines whether to drop the file extension from uploaded files."""  
    headers: Optional[list[shared_header.Header]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers'), 'exclude': lambda f: f is None }})
    r"""An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers."""  
    i18n: Optional[shared_i18nconfig.I18nConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('i18n'), 'exclude': lambda f: f is None }})
    r"""If provided, i18n rewrites are enabled."""  
    redirects: Optional[list[shared_redirect.Redirect]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirects'), 'exclude': lambda f: f is None }})
    r"""An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path."""  
    rewrites: Optional[list[shared_rewrite.Rewrite]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rewrites'), 'exclude': lambda f: f is None }})
    r"""An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL."""  
    trailing_slash_behavior: Optional[ServingConfigTrailingSlashBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trailingSlashBehavior'), 'exclude': lambda f: f is None }})
    r"""Defines how to handle a trailing slash in the URL path."""  
    