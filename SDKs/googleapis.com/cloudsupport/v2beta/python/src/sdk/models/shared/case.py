"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import actor as shared_actor
from ..shared import caseclassification as shared_caseclassification
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CasePriorityEnum(str, Enum):
    r"""The priority of this case. If this is set, do not set severity."""
    PRIORITY_UNSPECIFIED = 'PRIORITY_UNSPECIFIED'
    P0 = 'P0'
    P1 = 'P1'
    P2 = 'P2'
    P3 = 'P3'
    P4 = 'P4'

class CaseSeverityEnum(str, Enum):
    r"""The severity of this case. Deprecated. Use priority instead."""
    SEVERITY_UNSPECIFIED = 'SEVERITY_UNSPECIFIED'
    S0 = 'S0'
    S1 = 'S1'
    S2 = 'S2'
    S3 = 'S3'
    S4 = 'S4'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CaseInput:
    r"""A support case."""
    
    classification: Optional[shared_caseclassification.CaseClassification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""A classification object with a product type and value."""  
    creator: Optional[shared_actor.ActorInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator'), 'exclude': lambda f: f is None }})
    r"""An object containing information about the effective user and authenticated principal responsible for an action."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A broad description of the issue."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The short summary of the issue reported in this case."""  
    escalated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('escalated'), 'exclude': lambda f: f is None }})
    r"""Whether the case is currently escalated."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The language the user has requested to receive support in. This should be a BCP 47 language code (e.g., `\\"en\\"`, `\\"zh-CN\\"`, `\\"zh-TW\\"`, `\\"ja\\"`, `\\"ko\\"`). If no language or an unsupported language is specified, this field defaults to English (en). Language selection during case creation may affect your available support options. For a list of supported languages and their support working hours, see: https://cloud.google.com/support/docs/language-working-hours"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name for the case."""  
    priority: Optional[CasePriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""The priority of this case. If this is set, do not set severity."""  
    severity: Optional[CaseSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""The severity of this case. Deprecated. Use priority instead."""  
    subscriber_email_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriberEmailAddresses'), 'exclude': lambda f: f is None }})
    r"""The email addresses to receive updates on this case."""  
    test_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testCase'), 'exclude': lambda f: f is None }})
    r"""Whether this case was created for internal API testing and should not be acted on by the support team."""  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }})
    r"""The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API."""  
    
class CaseStateEnum(str, Enum):
    r"""Output only. The current status of the support case."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NEW = 'NEW'
    IN_PROGRESS_GOOGLE_SUPPORT = 'IN_PROGRESS_GOOGLE_SUPPORT'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    SOLUTION_PROVIDED = 'SOLUTION_PROVIDED'
    CLOSED = 'CLOSED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Case:
    r"""A support case."""
    
    classification: Optional[shared_caseclassification.CaseClassification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""A classification object with a product type and value."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this case was created."""  
    creator: Optional[shared_actor.Actor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creator'), 'exclude': lambda f: f is None }})
    r"""An object containing information about the effective user and authenticated principal responsible for an action."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A broad description of the issue."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The short summary of the issue reported in this case."""  
    escalated: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('escalated'), 'exclude': lambda f: f is None }})
    r"""Whether the case is currently escalated."""  
    language_code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('languageCode'), 'exclude': lambda f: f is None }})
    r"""The language the user has requested to receive support in. This should be a BCP 47 language code (e.g., `\\"en\\"`, `\\"zh-CN\\"`, `\\"zh-TW\\"`, `\\"ja\\"`, `\\"ko\\"`). If no language or an unsupported language is specified, this field defaults to English (en). Language selection during case creation may affect your available support options. For a list of supported languages and their support working hours, see: https://cloud.google.com/support/docs/language-working-hours"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The resource name for the case."""  
    priority: Optional[CasePriorityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('priority'), 'exclude': lambda f: f is None }})
    r"""The priority of this case. If this is set, do not set severity."""  
    severity: Optional[CaseSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('severity'), 'exclude': lambda f: f is None }})
    r"""The severity of this case. Deprecated. Use priority instead."""  
    state: Optional[CaseStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The current status of the support case."""  
    subscriber_email_addresses: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subscriberEmailAddresses'), 'exclude': lambda f: f is None }})
    r"""The email addresses to receive updates on this case."""  
    test_case: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('testCase'), 'exclude': lambda f: f is None }})
    r"""Whether this case was created for internal API testing and should not be acted on by the support team."""  
    time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeZone'), 'exclude': lambda f: f is None }})
    r"""The timezone of the user who created the support case. It should be in a format IANA recognizes: https://www.iana.org/time-zones. There is no additional validation done by the API."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The time this case was last updated."""  
    