/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Disruptions {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * View all disruptions for all route types
   */
  disruptionsGetAllDisruptions(
    req: operations.DisruptionsGetAllDisruptionsRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetAllDisruptionsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetAllDisruptionsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/disruptions";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetAllDisruptionsResponse =
        new operations.DisruptionsGetAllDisruptionsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View a specific disruption
   */
  disruptionsGetDisruptionById(
    req: operations.DisruptionsGetDisruptionByIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetDisruptionByIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetDisruptionByIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/disruptions/{disruption_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetDisruptionByIdResponse =
        new operations.DisruptionsGetDisruptionByIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all disruption modes
   */
  disruptionsGetDisruptionModes(
    req: operations.DisruptionsGetDisruptionModesRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetDisruptionModesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetDisruptionModesRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/v3/disruptions/modes";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetDisruptionModesResponse =
        new operations.DisruptionsGetDisruptionModesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionModesResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionModesResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionModesResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionModesResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View all disruptions for a particular route
   */
  disruptionsGetDisruptionsByRoute(
    req: operations.DisruptionsGetDisruptionsByRouteRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetDisruptionsByRouteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetDisruptionsByRouteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/disruptions/route/{route_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetDisruptionsByRouteResponse =
        new operations.DisruptionsGetDisruptionsByRouteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View all disruptions for a particular route and stop
   */
  disruptionsGetDisruptionsByRouteAndStop(
    req: operations.DisruptionsGetDisruptionsByRouteAndStopRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetDisruptionsByRouteAndStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetDisruptionsByRouteAndStopRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/disruptions/route/{route_id}/stop/{stop_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetDisruptionsByRouteAndStopResponse =
        new operations.DisruptionsGetDisruptionsByRouteAndStopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * View all disruptions for a particular stop
   */
  disruptionsGetDisruptionsByStop(
    req: operations.DisruptionsGetDisruptionsByStopRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.DisruptionsGetDisruptionsByStopResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DisruptionsGetDisruptionsByStopRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v3/disruptions/stop/{stop_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DisruptionsGetDisruptionsByStopResponse =
        new operations.DisruptionsGetDisruptionsByStopResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3DisruptionsResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3DisruptionsResponse
            );
          }
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          break;
        case [400, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `text/html`)) {
            const resBody: string = JSON.stringify(httpRes?.data, null, 0);
            const out: Uint8Array = new Uint8Array(resBody.length);
            for (let i = 0; i < resBody.length; i++)
              out[i] = resBody.charCodeAt(i);
            res.body = out;
          }
          if (utils.matchContentType(contentType, `application/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          if (utils.matchContentType(contentType, `text/json`)) {
            res.v3ErrorResponse = utils.objectToClass(
              httpRes?.data,
              shared.V3ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
