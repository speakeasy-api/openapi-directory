"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import payoutpayor as shared_payoutpayor
from ..shared import payoutprincipal as shared_payoutprincipal
from ..shared import payoutschedule as shared_payoutschedule
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPaymentsForPayoutResponseV4Summary:
    
    confirmed_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('confirmedPayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout which have been confirmed."""  
    incomplete_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('incompletePayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout which are incomplete."""  
    instructed: Optional[shared_payoutprincipal.PayoutPrincipal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructed'), 'exclude': lambda f: f is None }})
    r"""Details of principal participating in a payout."""  
    instructed_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date/time at which the payout was instructed."""  
    payout_from: Optional[shared_payoutpayor.PayoutPayor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutFrom'), 'exclude': lambda f: f is None }})
    r"""Details of payor and principal participating in a payout."""  
    payout_memo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutMemo'), 'exclude': lambda f: f is None }})
    r"""The memo attached to the payout."""  
    payout_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutStatus'), 'exclude': lambda f: f is None }})
    r"""Current status of the Payout. One of the following values: ACCEPTED, REJECTED, SUBMITTED, QUOTED, INSTRUCTED, COMPLETED, INCOMPLETE, CONFIRMED, WITHDRAWN"""  
    payout_to: Optional[shared_payoutpayor.PayoutPayor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutTo'), 'exclude': lambda f: f is None }})
    r"""Details of payor and principal participating in a payout."""  
    payout_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('payoutType'), 'exclude': lambda f: f is None }})
    r"""The type of payout. One of the following values: STANDARD, AS, ON_BEHALF_OF"""  
    quoted: Optional[shared_payoutprincipal.PayoutPrincipal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quoted'), 'exclude': lambda f: f is None }})
    r"""Details of principal participating in a payout."""  
    quoted_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quotedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date/time at which the payout was quoted."""  
    released_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releasedPayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout which have been released."""  
    returned_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('returnedPayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout which have been returned."""  
    schedule: Optional[shared_payoutschedule.PayoutSchedule] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('schedule'), 'exclude': lambda f: f is None }})
    r"""Details relating to a payout that was executed via a schedule or is still waiting to be executed"""  
    submitted_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submittedDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The date/time at which the payout was submitted."""  
    submitting: Optional[shared_payoutpayor.PayoutPayor] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitting'), 'exclude': lambda f: f is None }})
    r"""Details of payor and principal participating in a payout."""  
    total_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalPayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout."""  
    withdrawn: Optional[shared_payoutprincipal.PayoutPrincipal] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawn'), 'exclude': lambda f: f is None }})
    r"""Details of principal participating in a payout."""  
    withdrawn_date_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawnDateTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    withdrawn_payments: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('withdrawnPayments'), 'exclude': lambda f: f is None }})
    r"""The count of payments within the payout which have been withdrawn."""  
    