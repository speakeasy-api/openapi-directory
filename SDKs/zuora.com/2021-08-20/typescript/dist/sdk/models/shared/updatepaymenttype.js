"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePaymentType = exports.UpdatePaymentTypeFinanceInformation = exports.UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Whether the payment was transferred to an external accounting system. Use this field for integration with accounting systems, such as NetSuite.
 *
 * @remarks
 *
 */
var UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum;
(function (UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum) {
    UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum["Processing"] = "Processing";
    UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum["Yes"] = "Yes";
    UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum["No"] = "No";
    UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum["Error"] = "Error";
    UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum["Ignore"] = "Ignore";
})(UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum = exports.UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum || (exports.UpdatePaymentTypeFinanceInformationTransferredToAccountingEnum = {}));
/**
 * Container for the finance information related to the payment.
 *
 * @remarks
 *
 * For a standalone payment, the finance information cannot be updated.
 *
 */
var UpdatePaymentTypeFinanceInformation = /** @class */ (function (_super) {
    __extends(UpdatePaymentTypeFinanceInformation, _super);
    function UpdatePaymentTypeFinanceInformation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bankAccountAccountingCode" }),
        __metadata("design:type", String)
    ], UpdatePaymentTypeFinanceInformation.prototype, "bankAccountAccountingCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transferredToAccounting" }),
        __metadata("design:type", String)
    ], UpdatePaymentTypeFinanceInformation.prototype, "transferredToAccounting", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "unappliedPaymentAccountingCode" }),
        __metadata("design:type", String)
    ], UpdatePaymentTypeFinanceInformation.prototype, "unappliedPaymentAccountingCode", void 0);
    return UpdatePaymentTypeFinanceInformation;
}(utils_1.SpeakeasyBase));
exports.UpdatePaymentTypeFinanceInformation = UpdatePaymentTypeFinanceInformation;
/**
 * Container for custom fields of a Payment object.
 *
 * @remarks
 *
 */
var UpdatePaymentType = /** @class */ (function (_super) {
    __extends(UpdatePaymentType, _super);
    function UpdatePaymentType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IntegrationId__NS" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "integrationIdNS", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "IntegrationStatus__NS" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "integrationStatusNS", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Origin__NS" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "originNS", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "SyncDate__NS" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "syncDateNS", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "Transaction__NS" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "transactionNS", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "comment" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "comment", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "financeInformation" }),
        (0, class_transformer_1.Type)(function () { return UpdatePaymentTypeFinanceInformation; }),
        __metadata("design:type", UpdatePaymentTypeFinanceInformation)
    ], UpdatePaymentType.prototype, "financeInformation", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "referenceId" }),
        __metadata("design:type", String)
    ], UpdatePaymentType.prototype, "referenceId", void 0);
    return UpdatePaymentType;
}(utils_1.SpeakeasyBase));
exports.UpdatePaymentType = UpdatePaymentType;
