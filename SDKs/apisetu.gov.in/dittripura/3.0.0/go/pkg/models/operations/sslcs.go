// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SslcsSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SslcsRequestBodyCertificateParameters struct {
	// Reference No.
	RefNo string `json:"RefNo"`
	// Token No.
	TokenNo string `json:"TokenNo"`
}

// SslcsRequestBodyFormatEnum - The format of the certificate in response.
type SslcsRequestBodyFormatEnum string

const (
	SslcsRequestBodyFormatEnumPdf SslcsRequestBodyFormatEnum = "pdf"
)

func (e *SslcsRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = SslcsRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SslcsRequestBodyFormatEnum: %s", s)
	}
}

// SslcsRequestBody - Request format
type SslcsRequestBody struct {
	CertificateParameters *SslcsRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SslcsRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Sslcs504ApplicationJSONErrorEnum string

const (
	Sslcs504ApplicationJSONErrorEnumGatewayTimeout Sslcs504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Sslcs504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Sslcs504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs504ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs504ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Sslcs504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Sslcs504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Sslcs504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs504ApplicationJSON - Gateway timeout
type Sslcs504ApplicationJSON struct {
	Error            *Sslcs504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs503ApplicationJSONErrorEnum string

const (
	Sslcs503ApplicationJSONErrorEnumServiceUnavailable Sslcs503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Sslcs503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Sslcs503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs503ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs503ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Sslcs503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Sslcs503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Sslcs503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs503ApplicationJSON - Service unavailable
type Sslcs503ApplicationJSON struct {
	Error            *Sslcs503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs502ApplicationJSONErrorEnum string

const (
	Sslcs502ApplicationJSONErrorEnumBadGatewy Sslcs502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Sslcs502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Sslcs502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs502ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs502ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Sslcs502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Sslcs502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Sslcs502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs502ApplicationJSON - Bad gateway
type Sslcs502ApplicationJSON struct {
	Error            *Sslcs502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs500ApplicationJSONErrorEnum string

const (
	Sslcs500ApplicationJSONErrorEnumInternalServerError Sslcs500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Sslcs500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Sslcs500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs500ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs500ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs500ApplicationJSONErrorDescriptionEnumInternalServerError Sslcs500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Sslcs500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Sslcs500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs500ApplicationJSON - Internal server error
type Sslcs500ApplicationJSON struct {
	Error            *Sslcs500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs404ApplicationJSONErrorEnum string

const (
	Sslcs404ApplicationJSONErrorEnumRecordNotFound Sslcs404ApplicationJSONErrorEnum = "record_not_found"
	Sslcs404ApplicationJSONErrorEnumURLNotFound    Sslcs404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Sslcs404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Sslcs404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs404ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs404ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs404ApplicationJSONErrorDescriptionEnumNoRecordFound               Sslcs404ApplicationJSONErrorDescriptionEnum = "No record found"
	Sslcs404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Sslcs404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Sslcs404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Sslcs404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs404ApplicationJSON - No record found
type Sslcs404ApplicationJSON struct {
	Error            *Sslcs404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs401ApplicationJSONErrorEnum string

const (
	Sslcs401ApplicationJSONErrorEnumInvalidAuthentication Sslcs401ApplicationJSONErrorEnum = "invalid_authentication"
	Sslcs401ApplicationJSONErrorEnumInvalidAuthorization  Sslcs401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Sslcs401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Sslcs401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs401ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs401ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Sslcs401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Sslcs401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Sslcs401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Sslcs401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Sslcs401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs401ApplicationJSON - Unauthorized access
type Sslcs401ApplicationJSON struct {
	Error            *Sslcs401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Sslcs400ApplicationJSONErrorEnum string

const (
	Sslcs400ApplicationJSONErrorEnumMissingParameter Sslcs400ApplicationJSONErrorEnum = "missing_parameter"
	Sslcs400ApplicationJSONErrorEnumInvalidParameter Sslcs400ApplicationJSONErrorEnum = "invalid_parameter"
	Sslcs400ApplicationJSONErrorEnumInvalidFormat    Sslcs400ApplicationJSONErrorEnum = "invalid_format"
	Sslcs400ApplicationJSONErrorEnumInvalidTxnid     Sslcs400ApplicationJSONErrorEnum = "invalid_txnid"
	Sslcs400ApplicationJSONErrorEnumInvalidConsentid Sslcs400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Sslcs400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Sslcs400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs400ApplicationJSONErrorEnum: %s", s)
	}
}

type Sslcs400ApplicationJSONErrorDescriptionEnum string

const (
	Sslcs400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Sslcs400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Sslcs400ApplicationJSONErrorDescriptionEnumBadRequest                              Sslcs400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Sslcs400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Sslcs400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Sslcs400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Sslcs400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Sslcs400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Sslcs400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Sslcs400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Sslcs400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Sslcs400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Sslcs400ApplicationJSON - Bad request
type Sslcs400ApplicationJSON struct {
	Error            *Sslcs400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Sslcs400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SslcsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Sslcs400ApplicationJSONObject *Sslcs400ApplicationJSON
	// Unauthorized access
	Sslcs401ApplicationJSONObject *Sslcs401ApplicationJSON
	// No record found
	Sslcs404ApplicationJSONObject *Sslcs404ApplicationJSON
	// Internal server error
	Sslcs500ApplicationJSONObject *Sslcs500ApplicationJSON
	// Bad gateway
	Sslcs502ApplicationJSONObject *Sslcs502ApplicationJSON
	// Service unavailable
	Sslcs503ApplicationJSONObject *Sslcs503ApplicationJSON
	// Gateway timeout
	Sslcs504ApplicationJSONObject *Sslcs504ApplicationJSON
}
