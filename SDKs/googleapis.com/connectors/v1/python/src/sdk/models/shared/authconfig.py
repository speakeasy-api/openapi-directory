"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import configvariable as shared_configvariable
from ..shared import oauth2clientcredentials as shared_oauth2clientcredentials
from ..shared import oauth2jwtbearer as shared_oauth2jwtbearer
from ..shared import sshpublickey as shared_sshpublickey
from ..shared import userpassword as shared_userpassword
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AuthConfigAuthTypeEnum(str, Enum):
    r"""The type of authentication configured."""
    AUTH_TYPE_UNSPECIFIED = 'AUTH_TYPE_UNSPECIFIED'
    USER_PASSWORD = 'USER_PASSWORD'
    OAUTH2_JWT_BEARER = 'OAUTH2_JWT_BEARER'
    OAUTH2_CLIENT_CREDENTIALS = 'OAUTH2_CLIENT_CREDENTIALS'
    SSH_PUBLIC_KEY = 'SSH_PUBLIC_KEY'
    OAUTH2_AUTH_CODE_FLOW = 'OAUTH2_AUTH_CODE_FLOW'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthConfig:
    r"""AuthConfig defines details of a authentication type."""
    
    additional_variables: Optional[list[shared_configvariable.ConfigVariable]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('additionalVariables'), 'exclude': lambda f: f is None }})
    r"""List containing additional auth configs."""  
    auth_type: Optional[AuthConfigAuthTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authType'), 'exclude': lambda f: f is None }})
    r"""The type of authentication configured."""  
    oauth2_client_credentials: Optional[shared_oauth2clientcredentials.Oauth2ClientCredentials] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2ClientCredentials'), 'exclude': lambda f: f is None }})
    r"""Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details."""  
    oauth2_jwt_bearer: Optional[shared_oauth2jwtbearer.Oauth2JwtBearer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('oauth2JwtBearer'), 'exclude': lambda f: f is None }})
    r"""Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details."""  
    ssh_public_key: Optional[shared_sshpublickey.SSHPublicKey] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sshPublicKey'), 'exclude': lambda f: f is None }})
    r"""Parameters to support Ssh public key Authentication."""  
    user_password: Optional[shared_userpassword.UserPassword] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userPassword'), 'exclude': lambda f: f is None }})
    r"""Parameters to support Username and Password Authentication."""  
    