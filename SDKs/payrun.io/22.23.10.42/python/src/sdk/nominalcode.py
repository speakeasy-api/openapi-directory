"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class NominalCode:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def delete_nominal_code(self, request: operations.DeleteNominalCodeRequest) -> operations.DeleteNominalCodeResponse:
        r"""Deletes the nominal codes
        Deletes the nominal code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteNominalCodeRequest, base_url, '/Employer/{EmployerId}/NominalCode/{NominalCodeId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('DELETE', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteNominalCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_nominal_code_from_employer(self, request: operations.GetNominalCodeFromEmployerRequest) -> operations.GetNominalCodeFromEmployerResponse:
        r"""Gets the nominal code
        Gets the nominal code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNominalCodeFromEmployerRequest, base_url, '/Employer/{EmployerId}/NominalCode/{NominalCodeId}', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNominalCodeFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NominalCode])
                res.nominal_code = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def get_nominal_codes_from_employer(self, request: operations.GetNominalCodesFromEmployerRequest) -> operations.GetNominalCodesFromEmployerResponse:
        r"""Gets the nominal codes
        Gets the nominal code links
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetNominalCodesFromEmployerRequest, base_url, '/Employer/{EmployerId}/NominalCodes', request)
        
        headers = utils.get_headers(request)
        
        client = self._client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetNominalCodesFromEmployerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LinkCollection])
                res.link_collection = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def post_nominal_code(self, request: operations.PostNominalCodeRequest) -> operations.PostNominalCodeResponse:
        r"""Insert nominal code
        Inserts a new nominal code
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostNominalCodeRequest, base_url, '/Employer/{EmployerId}/NominalCodes', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "nominal_code", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostNominalCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Link])
                res.link = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    def put_nominal_code(self, request: operations.PutNominalCodeRequest) -> operations.PutNominalCodeResponse:
        r"""Insert nominal code
        Inserts a new nominal code at the specified resource location
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutNominalCodeRequest, base_url, '/Employer/{EmployerId}/NominalCode/{NominalCodeId}', request)
        
        headers = utils.get_headers(request)
        req_content_type, data, form = utils.serialize_request_body(request, "nominal_code", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutNominalCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.NominalCode])
                res.nominal_code = out
        elif http_res.status_code in [400, 401, 404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ErrorModel])
                res.error_model = out

        return res

    