"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCheckCodeRequestBody:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCheckCode403ApplicationJSON:
    r"""#### Tries for this email exceeded.
    To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \
    This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.
    """
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCheckCode401ApplicationJSON:
    r"""#### Invalid API key"""
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostCheckCode200ApplicationJSON:
    r"""If success is true, the user has given the correct code. If not the code is incorrect. \ 
    Check the message for more information
    """
    
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})  
    success: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('success'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PostCheckCodeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    post_check_code_200_application_json_object: Optional[PostCheckCode200ApplicationJSON] = dataclasses.field(default=None)
    r"""If success is true, the user has given the correct code. If not the code is incorrect. \ 
    Check the message for more information
    """  
    post_check_code_401_application_json_object: Optional[PostCheckCode401ApplicationJSON] = dataclasses.field(default=None)
    r"""#### Invalid API key"""  
    post_check_code_403_application_json_object: Optional[PostCheckCode403ApplicationJSON] = dataclasses.field(default=None)
    r"""#### Tries for this email exceeded.
    To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \
    This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    