// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// RuntimeEnvironmentEnum - The environment for the runtime.
type RuntimeEnvironmentEnum string

const (
	RuntimeEnvironmentEnumEnvironmentUnspecified RuntimeEnvironmentEnum = "ENVIRONMENT_UNSPECIFIED"
	RuntimeEnvironmentEnumGen1                   RuntimeEnvironmentEnum = "GEN_1"
	RuntimeEnvironmentEnumGen2                   RuntimeEnvironmentEnum = "GEN_2"
)

func (e RuntimeEnvironmentEnum) ToPointer() *RuntimeEnvironmentEnum {
	return &e
}

func (e *RuntimeEnvironmentEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENVIRONMENT_UNSPECIFIED":
		fallthrough
	case "GEN_1":
		fallthrough
	case "GEN_2":
		*e = RuntimeEnvironmentEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuntimeEnvironmentEnum: %v", v)
	}
}

// RuntimeStageEnum - The stage of life this runtime is in, e.g., BETA, GA, etc.
type RuntimeStageEnum string

const (
	RuntimeStageEnumRuntimeStageUnspecified RuntimeStageEnum = "RUNTIME_STAGE_UNSPECIFIED"
	RuntimeStageEnumDevelopment             RuntimeStageEnum = "DEVELOPMENT"
	RuntimeStageEnumAlpha                   RuntimeStageEnum = "ALPHA"
	RuntimeStageEnumBeta                    RuntimeStageEnum = "BETA"
	RuntimeStageEnumGa                      RuntimeStageEnum = "GA"
	RuntimeStageEnumDeprecated              RuntimeStageEnum = "DEPRECATED"
	RuntimeStageEnumDecommissioned          RuntimeStageEnum = "DECOMMISSIONED"
)

func (e RuntimeStageEnum) ToPointer() *RuntimeStageEnum {
	return &e
}

func (e *RuntimeStageEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "RUNTIME_STAGE_UNSPECIFIED":
		fallthrough
	case "DEVELOPMENT":
		fallthrough
	case "ALPHA":
		fallthrough
	case "BETA":
		fallthrough
	case "GA":
		fallthrough
	case "DEPRECATED":
		fallthrough
	case "DECOMMISSIONED":
		*e = RuntimeStageEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuntimeStageEnum: %v", v)
	}
}

// Runtime - Describes a runtime and any special information (e.g., deprecation status) related to it.
type Runtime struct {
	// The user facing name, eg 'Go 1.13', 'Node.js 12', etc.
	DisplayName *string `json:"displayName,omitempty"`
	// The environment for the runtime.
	Environment *RuntimeEnvironmentEnum `json:"environment,omitempty"`
	// The name of the runtime, e.g., 'go113', 'nodejs12', etc.
	Name *string `json:"name,omitempty"`
	// The stage of life this runtime is in, e.g., BETA, GA, etc.
	Stage *RuntimeStageEnum `json:"stage,omitempty"`
	// Warning messages, e.g., a deprecation warning.
	Warnings []string `json:"warnings,omitempty"`
}
