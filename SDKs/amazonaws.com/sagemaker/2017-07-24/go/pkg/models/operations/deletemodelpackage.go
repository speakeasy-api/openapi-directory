// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// DeleteModelPackageXAmzTargetEnum
type DeleteModelPackageXAmzTargetEnum string

const (
	DeleteModelPackageXAmzTargetEnumSageMakerDeleteModelPackage DeleteModelPackageXAmzTargetEnum = "SageMaker.DeleteModelPackage"
)

func (e DeleteModelPackageXAmzTargetEnum) ToPointer() *DeleteModelPackageXAmzTargetEnum {
	return &e
}

func (e *DeleteModelPackageXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SageMaker.DeleteModelPackage":
		*e = DeleteModelPackageXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteModelPackageXAmzTargetEnum: %v", v)
	}
}

type DeleteModelPackageRequest struct {
	DeleteModelPackageInput shared.DeleteModelPackageInput   `request:"mediaType=application/json"`
	XAmzAlgorithm           *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256       *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential          *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken       *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature           *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders       *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget              DeleteModelPackageXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type DeleteModelPackageResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	StatusCode        int
	RawResponse       *http.Response
}
