/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 *  Criteria for filtering servers.
 */
export enum ListServersRequestBodyServerCriteriaEnum {
  NotDefined = "NOT_DEFINED",
  OsName = "OS_NAME",
  Strategy = "STRATEGY",
  Destination = "DESTINATION",
  ServerId = "SERVER_ID",
  AnalysisStatus = "ANALYSIS_STATUS",
  ErrorCategory = "ERROR_CATEGORY",
}

/**
 *  Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.
 */
export enum ListServersRequestBodySortEnum {
  Asc = "ASC",
  Desc = "DESC",
}

export class ListServersRequestBody extends SpeakeasyBase {
  /**
   *  Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "filterValue" })
  filterValue?: string;

  /**
   *  Specifies the group ID to filter on.
   */
  @SpeakeasyMetadata({ elemType: shared.Group })
  @Expose({ name: "groupIdFilter" })
  @Type(() => shared.Group)
  groupIdFilter?: shared.Group[];

  /**
   *  The maximum number of items to include in the response. The maximum value is 100.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "maxResults" })
  maxResults?: number;

  /**
   *  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nextToken" })
  nextToken?: string;

  /**
   *  Criteria for filtering servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serverCriteria" })
  serverCriteria?: ListServersRequestBodyServerCriteriaEnum;

  /**
   *  Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sort" })
  sort?: ListServersRequestBodySortEnum;
}

export class ListServersRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: ListServersRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * Pagination limit
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: string;

  /**
   * Pagination token
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=nextToken",
  })
  nextToken?: string;
}

export class ListServersResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  listServersResponse?: shared.ListServersResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
