"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import resourceaccesscontrol as shared_resourceaccesscontrol
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceUpdateErrorErrors:
    
    code: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""[Output Only] The error type identifier for this error."""  
    location: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('location'), 'exclude': lambda f: f is None }})
    r"""[Output Only] Indicates the field in the request that caused the error. This property is optional."""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""[Output Only] An optional, human-readable error message."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceUpdateError:
    r"""Output only. If errors are generated during update of the resource, this field will be populated."""
    
    errors: Optional[list[ResourceUpdateErrorErrors]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""[Output Only] The array of errors encountered while processing this operation."""  
    
class ResourceUpdateIntentEnum(str, Enum):
    r"""Output only. The intent of the resource: `PREVIEW`, `UPDATE`, or `CANCEL`."""
    CREATE_OR_ACQUIRE = 'CREATE_OR_ACQUIRE'
    DELETE = 'DELETE'
    ACQUIRE = 'ACQUIRE'
    UPDATE = 'UPDATE'
    ABANDON = 'ABANDON'
    CREATE = 'CREATE'

class ResourceUpdateStateEnum(str, Enum):
    r"""Output only. The state of the resource."""
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    IN_PREVIEW = 'IN_PREVIEW'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'

class ResourceUpdateWarningsCodeEnum(str, Enum):
    r"""[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."""
    DEPRECATED_RESOURCE_USED = 'DEPRECATED_RESOURCE_USED'
    NO_RESULTS_ON_PAGE = 'NO_RESULTS_ON_PAGE'
    UNREACHABLE = 'UNREACHABLE'
    NEXT_HOP_ADDRESS_NOT_ASSIGNED = 'NEXT_HOP_ADDRESS_NOT_ASSIGNED'
    NEXT_HOP_INSTANCE_NOT_FOUND = 'NEXT_HOP_INSTANCE_NOT_FOUND'
    NEXT_HOP_INSTANCE_NOT_ON_NETWORK = 'NEXT_HOP_INSTANCE_NOT_ON_NETWORK'
    NEXT_HOP_CANNOT_IP_FORWARD = 'NEXT_HOP_CANNOT_IP_FORWARD'
    NEXT_HOP_NOT_RUNNING = 'NEXT_HOP_NOT_RUNNING'
    INJECTED_KERNELS_DEPRECATED = 'INJECTED_KERNELS_DEPRECATED'
    REQUIRED_TOS_AGREEMENT = 'REQUIRED_TOS_AGREEMENT'
    DISK_SIZE_LARGER_THAN_IMAGE_SIZE = 'DISK_SIZE_LARGER_THAN_IMAGE_SIZE'
    RESOURCE_NOT_DELETED = 'RESOURCE_NOT_DELETED'
    SINGLE_INSTANCE_PROPERTY_TEMPLATE = 'SINGLE_INSTANCE_PROPERTY_TEMPLATE'
    NOT_CRITICAL_ERROR = 'NOT_CRITICAL_ERROR'
    CLEANUP_FAILED = 'CLEANUP_FAILED'
    FIELD_VALUE_OVERRIDEN = 'FIELD_VALUE_OVERRIDEN'
    RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING = 'RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING'
    MISSING_TYPE_DEPENDENCY = 'MISSING_TYPE_DEPENDENCY'
    EXTERNAL_API_WARNING = 'EXTERNAL_API_WARNING'
    SCHEMA_VALIDATION_IGNORED = 'SCHEMA_VALIDATION_IGNORED'
    UNDECLARED_PROPERTIES = 'UNDECLARED_PROPERTIES'
    EXPERIMENTAL_TYPE_USED = 'EXPERIMENTAL_TYPE_USED'
    DEPRECATED_TYPE_USED = 'DEPRECATED_TYPE_USED'
    PARTIAL_SUCCESS = 'PARTIAL_SUCCESS'
    LARGE_DEPLOYMENT_WARNING = 'LARGE_DEPLOYMENT_WARNING'
    NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE = 'NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE'
    INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB = 'INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceUpdateWarningsData:
    
    key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key'), 'exclude': lambda f: f is None }})
    r"""[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding)."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""[Output Only] A warning data value corresponding to the key."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceUpdateWarnings:
    
    code: Optional[ResourceUpdateWarningsCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code'), 'exclude': lambda f: f is None }})
    r"""[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response."""  
    data: Optional[list[ResourceUpdateWarningsData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    r"""[Output Only] Metadata about this warning in key: value format. For example: \\"data\\": [ { \\"key\\": \\"scope\\", \\"value\\": \\"zones/us-east1-d\\" }"""  
    message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message'), 'exclude': lambda f: f is None }})
    r"""[Output Only] A human-readable description of the warning code."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ResourceUpdate:
    
    access_control: Optional[shared_resourceaccesscontrol.ResourceAccessControl] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessControl'), 'exclude': lambda f: f is None }})
    r"""The access controls set on the resource."""  
    error: Optional[ResourceUpdateError] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Output only. If errors are generated during update of the resource, this field will be populated."""  
    final_properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finalProperties'), 'exclude': lambda f: f is None }})
    r"""Output only. The expanded properties of the resource with reference values expanded. Returned as serialized YAML."""  
    intent: Optional[ResourceUpdateIntentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('intent'), 'exclude': lambda f: f is None }})
    r"""Output only. The intent of the resource: `PREVIEW`, `UPDATE`, or `CANCEL`."""  
    manifest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('manifest'), 'exclude': lambda f: f is None }})
    r"""Output only. URL of the manifest representing the update configuration of this resource."""  
    properties: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('properties'), 'exclude': lambda f: f is None }})
    r"""Output only. The set of updated properties for this resource, before references are expanded. Returned as serialized YAML."""  
    state: Optional[ResourceUpdateStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the resource."""  
    warnings: Optional[list[ResourceUpdateWarnings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('warnings'), 'exclude': lambda f: f is None }})
    r"""Output only. If warning messages are generated during processing of this resource, this field will be populated."""  
    