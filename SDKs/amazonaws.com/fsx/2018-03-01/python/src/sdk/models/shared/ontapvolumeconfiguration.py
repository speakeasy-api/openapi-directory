"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import flexcacheendpointtype_enum as shared_flexcacheendpointtype_enum
from ..shared import ontapvolumetype_enum as shared_ontapvolumetype_enum
from ..shared import securitystyle_enum as shared_securitystyle_enum
from ..shared import tieringpolicy as shared_tieringpolicy
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OntapVolumeConfiguration:
    r"""The configuration of an Amazon FSx for NetApp ONTAP volume."""
    
    copy_tags_to_backups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToBackups'), 'exclude': lambda f: f is None }})  
    flex_cache_endpoint_type: Optional[shared_flexcacheendpointtype_enum.FlexCacheEndpointTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FlexCacheEndpointType'), 'exclude': lambda f: f is None }})  
    junction_path: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JunctionPath'), 'exclude': lambda f: f is None }})  
    ontap_volume_type: Optional[shared_ontapvolumetype_enum.OntapVolumeTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OntapVolumeType'), 'exclude': lambda f: f is None }})  
    security_style: Optional[shared_securitystyle_enum.SecurityStyleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityStyle'), 'exclude': lambda f: f is None }})  
    size_in_megabytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SizeInMegabytes'), 'exclude': lambda f: f is None }})  
    snapshot_policy: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapshotPolicy'), 'exclude': lambda f: f is None }})  
    storage_efficiency_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageEfficiencyEnabled'), 'exclude': lambda f: f is None }})  
    storage_virtual_machine_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageVirtualMachineId'), 'exclude': lambda f: f is None }})  
    storage_virtual_machine_root: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageVirtualMachineRoot'), 'exclude': lambda f: f is None }})  
    tiering_policy: Optional[shared_tieringpolicy.TieringPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TieringPolicy'), 'exclude': lambda f: f is None }})  
    uuid: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UUID'), 'exclude': lambda f: f is None }})  
    