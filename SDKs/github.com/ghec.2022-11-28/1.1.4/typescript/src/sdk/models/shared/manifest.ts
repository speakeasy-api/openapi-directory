/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { Dependency } from "./dependency";
import { Expose, Transform, Type } from "class-transformer";

export class ManifestFile extends SpeakeasyBase {
  /**
   * The path of the manifest file relative to the root of the Git repository.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source_location" })
  sourceLocation?: string;
}

export class Manifest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "file" })
  @Type(() => ManifestFile)
  file?: ManifestFile;

  /**
   * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metadata" })
  metadata?: Record<string, any>;

  /**
   * The name of the manifest.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * A collection of resolved package dependencies.
   */
  @SpeakeasyMetadata({ elemType: Dependency })
  @Expose({ name: "resolved" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, Dependency> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], Dependency);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  resolved?: Record<string, Dependency>;
}
