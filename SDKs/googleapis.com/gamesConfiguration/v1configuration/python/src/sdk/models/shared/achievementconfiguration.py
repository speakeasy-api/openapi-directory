"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import achievementconfigurationdetail as shared_achievementconfigurationdetail
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class AchievementConfigurationAchievementTypeEnum(str, Enum):
    r"""The type of the achievement."""
    ACHIEVEMENT_TYPE_UNSPECIFIED = 'ACHIEVEMENT_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    INCREMENTAL = 'INCREMENTAL'

class AchievementConfigurationInitialStateEnum(str, Enum):
    r"""The initial state of the achievement."""
    INITIAL_STATE_UNSPECIFIED = 'INITIAL_STATE_UNSPECIFIED'
    HIDDEN = 'HIDDEN'
    REVEALED = 'REVEALED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AchievementConfiguration:
    r"""An achievement configuration resource."""
    
    achievement_type: Optional[AchievementConfigurationAchievementTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('achievementType'), 'exclude': lambda f: f is None }})
    r"""The type of the achievement."""  
    draft: Optional[shared_achievementconfigurationdetail.AchievementConfigurationDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('draft'), 'exclude': lambda f: f is None }})
    r"""An achievement configuration detail."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The ID of the achievement."""  
    initial_state: Optional[AchievementConfigurationInitialStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('initialState'), 'exclude': lambda f: f is None }})
    r"""The initial state of the achievement."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfiguration`."""  
    published: Optional[shared_achievementconfigurationdetail.AchievementConfigurationDetail] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published'), 'exclude': lambda f: f is None }})
    r"""An achievement configuration detail."""  
    steps_to_unlock: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stepsToUnlock'), 'exclude': lambda f: f is None }})
    r"""Steps to unlock. Only applicable to incremental achievements."""  
    token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token'), 'exclude': lambda f: f is None }})
    r"""The token for this resource."""  
    