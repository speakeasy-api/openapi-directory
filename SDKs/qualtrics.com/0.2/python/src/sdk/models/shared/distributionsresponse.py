"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseMeta:
    
    http_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('httpStatus'), 'exclude': lambda f: f is None }})  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElementsHeaders:
    
    from_email: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromEmail'), 'exclude': lambda f: f is None }})  
    from_name: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fromName'), 'exclude': lambda f: f is None }})  
    reply_to_email: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('replyToEmail'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElementsMessage:
    
    library_id: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('libraryId'), 'exclude': lambda f: f is None }})  
    message_id: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageId'), 'exclude': lambda f: f is None }})  
    message_text: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messageText'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElementsRecipients:
    
    contact_id: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contactId'), 'exclude': lambda f: f is None }})  
    library_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('libraryId'), 'exclude': lambda f: f is None }})  
    mailing_list_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mailingListId'), 'exclude': lambda f: f is None }})  
    sample_id: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleId'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElementsStats:
    
    blocked: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('blocked'), 'exclude': lambda f: f is None }})  
    bounced: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bounced'), 'exclude': lambda f: f is None }})  
    complaints: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('complaints'), 'exclude': lambda f: f is None }})  
    failed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed'), 'exclude': lambda f: f is None }})  
    finished: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished'), 'exclude': lambda f: f is None }})  
    opened: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('opened'), 'exclude': lambda f: f is None }})  
    sent: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sent'), 'exclude': lambda f: f is None }})  
    skipped: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skipped'), 'exclude': lambda f: f is None }})  
    started: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElementsSurveyLink:
    
    expiration_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expirationDate'), 'exclude': lambda f: f is None }})  
    link_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('linkType'), 'exclude': lambda f: f is None }})  
    survey_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surveyId'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResultElements:
    
    created_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdDate') }})  
    custom_headers: dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customHeaders') }})  
    embedded_data: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('embeddedData') }})  
    headers: DistributionsResponseResultElementsHeaders = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('headers') }})  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})  
    message: DistributionsResponseResultElementsMessage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})  
    modified_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('modifiedDate') }})  
    organization_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organizationId') }})  
    owner_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ownerId') }})  
    parent_distribution_id: Any = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parentDistributionId') }})  
    recipients: DistributionsResponseResultElementsRecipients = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recipients') }})  
    request_status: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestStatus') }})  
    request_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestType') }})  
    send_date: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sendDate') }})  
    stats: DistributionsResponseResultElementsStats = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('stats') }})  
    survey_link: DistributionsResponseResultElementsSurveyLink = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('surveyLink') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponseResult:
    
    elements: Optional[list[DistributionsResponseResultElements]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements'), 'exclude': lambda f: f is None }})  
    next_page: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nextPage'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DistributionsResponse:
    r"""Distributions"""
    
    meta: Optional[DistributionsResponseMeta] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta'), 'exclude': lambda f: f is None }})  
    result: Optional[DistributionsResponseResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result'), 'exclude': lambda f: f is None }})  
    