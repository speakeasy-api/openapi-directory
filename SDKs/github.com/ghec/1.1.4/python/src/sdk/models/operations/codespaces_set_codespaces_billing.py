"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CodespacesSetCodespacesBillingRequestBodyVisibilityEnum(str, Enum):
    r"""Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization."""
    DISABLED = 'disabled'
    SELECTED_MEMBERS = 'selected_members'
    ALL_MEMBERS = 'all_members'
    ALL_MEMBERS_AND_OUTSIDE_COLLABORATORS = 'all_members_and_outside_collaborators'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodespacesSetCodespacesBillingRequestBody:
    
    visibility: CodespacesSetCodespacesBillingRequestBodyVisibilityEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('visibility') }})
    r"""Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization."""  
    selected_usernames: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selected_usernames'), 'exclude': lambda f: f is None }})
    r"""The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value."""  
    

@dataclasses.dataclass
class CodespacesSetCodespacesBillingRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    request_body: CodespacesSetCodespacesBillingRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class CodespacesSetCodespacesBillingResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    