// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum - The state of a CIDR block.
type AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum string

const (
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumAssociating    AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "associating"
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumAssociated     AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "associated"
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumDisassociating AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "disassociating"
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumDisassociated  AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "disassociated"
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumFailing        AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "failing"
	AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnumFailed         AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum = "failed"
)

func (e *AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		fallthrough
	case "failing":
		fallthrough
	case "failed":
		*e = AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum: %s", s)
	}
}

// AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState - The state of the CIDR block.
type AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState struct {
	State         *AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockStateStateEnum
	StatusMessage *string
}

// AssociateSubnetCidrBlockResultIpv6CidrBlockAssociation - Information about the IPv6 association.
type AssociateSubnetCidrBlockResultIpv6CidrBlockAssociation struct {
	AssociationID      *string
	Ipv6CidrBlock      *string
	Ipv6CidrBlockState *AssociateSubnetCidrBlockResultIpv6CidrBlockAssociationIpv6CidrBlockState
}

// AssociateSubnetCidrBlockResult - Success
type AssociateSubnetCidrBlockResult struct {
	Ipv6CidrBlockAssociation *AssociateSubnetCidrBlockResultIpv6CidrBlockAssociation
	SubnetID                 *string
}
