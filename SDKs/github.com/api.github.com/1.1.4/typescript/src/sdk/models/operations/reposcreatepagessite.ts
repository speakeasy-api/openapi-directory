/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
 */
export enum ReposCreatePagesSiteRequestBody2BuildTypeEnum {
  Legacy = "legacy",
  Workflow = "workflow",
}

/**
 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
 */
export enum ReposCreatePagesSiteRequestBody2SourcePathEnum {
  Root = "/",
  RootDocs = "/docs",
}

/**
 * The source branch and directory used to publish your Pages site.
 */
export class ReposCreatePagesSiteRequestBody2Source extends SpeakeasyBase {
  /**
   * The repository branch used to publish your site's source files.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branch" })
  branch: string;

  /**
   * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: ReposCreatePagesSiteRequestBody2SourcePathEnum;
}

/**
 * The source branch and directory used to publish your Pages site.
 */
export class ReposCreatePagesSiteRequestBody2 extends SpeakeasyBase {
  /**
   * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build_type" })
  buildType: ReposCreatePagesSiteRequestBody2BuildTypeEnum;

  /**
   * The source branch and directory used to publish your Pages site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => ReposCreatePagesSiteRequestBody2Source)
  source?: ReposCreatePagesSiteRequestBody2Source;
}

/**
 * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
 */
export enum ReposCreatePagesSiteRequestBody1BuildTypeEnum {
  Legacy = "legacy",
  Workflow = "workflow",
}

/**
 * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
 */
export enum ReposCreatePagesSiteRequestBody1SourcePathEnum {
  Root = "/",
  RootDocs = "/docs",
}

/**
 * The source branch and directory used to publish your Pages site.
 */
export class ReposCreatePagesSiteRequestBody1Source extends SpeakeasyBase {
  /**
   * The repository branch used to publish your site's source files.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branch" })
  branch: string;

  /**
   * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "path" })
  path?: ReposCreatePagesSiteRequestBody1SourcePathEnum;
}

/**
 * The source branch and directory used to publish your Pages site.
 */
export class ReposCreatePagesSiteRequestBody1 extends SpeakeasyBase {
  /**
   * The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build_type" })
  buildType?: ReposCreatePagesSiteRequestBody1BuildTypeEnum;

  /**
   * The source branch and directory used to publish your Pages site.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "source" })
  @Type(() => ReposCreatePagesSiteRequestBody1Source)
  source: ReposCreatePagesSiteRequestBody1Source;
}

export class ReposCreatePagesSiteRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: any;

  /**
   * The account owner of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=owner",
  })
  owner: string;

  /**
   * The name of the repository. The name is not case sensitive.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=repo",
  })
  repo: string;
}

export class ReposCreatePagesSiteResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Conflict
   */
  @SpeakeasyMetadata()
  basicError?: shared.BasicError;

  /**
   * Response
   */
  @SpeakeasyMetadata()
  page?: shared.Page;

  /**
   * Validation failed, or the endpoint has been spammed.
   */
  @SpeakeasyMetadata()
  validationError?: shared.ValidationError;
}
