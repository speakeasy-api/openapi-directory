/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["http://cdcgov.local"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * A router of public health data from multiple senders and receivers
 */
export class SDK {
  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;
  }

  /**
   * Delete an organization (and the associated receivers and senders)
   */
  deleteSettingsOrganizationsOrganizationName(
    req: operations.DeleteSettingsOrganizationsOrganizationNameRequest,
    security: operations.DeleteSettingsOrganizationsOrganizationNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSettingsOrganizationsOrganizationNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.DeleteSettingsOrganizationsOrganizationNameRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteSettingsOrganizationsOrganizationNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSettingsOrganizationsOrganizationNameResponse =
        new operations.DeleteSettingsOrganizationsOrganizationNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a receiver
   */
  deleteSettingsOrganizationsOrganizationNameReceiversReceiverName(
    req: operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest,
    security: operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/receivers/{receiverName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse =
        new operations.DeleteSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receiver = utils.objectToClass(httpRes?.data, shared.Receiver);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Delete a sender
   */
  deleteSettingsOrganizationsOrganizationNameSendersSenderName(
    req: operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest,
    security: operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/senders/{senderName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse =
        new operations.DeleteSettingsOrganizationsOrganizationNameSendersSenderNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sender = utils.objectToClass(httpRes?.data, shared.Sender);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * The settings for all organizations of the system. Must have admin access.
   */
  getSettingsOrganizations(
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/settings/organizations";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsResponse =
        new operations.GetSettingsOrganizationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organizations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.organizations = utils.objectToClass(
              httpRes?.data,
              shared.Organization,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * A single organization settings
   */
  getSettingsOrganizationsOrganizationName(
    req: operations.GetSettingsOrganizationsOrganizationNameRequest,
    security: operations.GetSettingsOrganizationsOrganizationNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsOrganizationNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetSettingsOrganizationsOrganizationNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSettingsOrganizationsOrganizationNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsOrganizationNameResponse =
        new operations.GetSettingsOrganizationsOrganizationNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * A list of receivers and their current settings
   */
  getSettingsOrganizationsOrganizationNameReceivers(
    req: operations.GetSettingsOrganizationsOrganizationNameReceiversRequest,
    security: operations.GetSettingsOrganizationsOrganizationNameReceiversSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsOrganizationNameReceiversResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/receivers",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsOrganizationNameReceiversResponse =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receivers = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.receivers = utils.objectToClass(
              httpRes?.data,
              shared.Receiver,
              resFieldDepth
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * The settings of a single of receiver
   */
  getSettingsOrganizationsOrganizationNameReceiversReceiverName(
    req: operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest,
    security: operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/receivers/{receiverName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse =
        new operations.GetSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receiver = utils.objectToClass(httpRes?.data, shared.Receiver);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * A list of senders
   */
  getSettingsOrganizationsOrganizationNameSenders(
    req: operations.GetSettingsOrganizationsOrganizationNameSendersRequest,
    security: operations.GetSettingsOrganizationsOrganizationNameSendersSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsOrganizationNameSendersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSettingsOrganizationsOrganizationNameSendersRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/senders",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSettingsOrganizationsOrganizationNameSendersSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsOrganizationNameSendersResponse =
        new operations.GetSettingsOrganizationsOrganizationNameSendersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.senders = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.senders = utils.objectToClass(
              httpRes?.data,
              shared.Sender,
              resFieldDepth
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * The settings of a single of sender
   */
  getSettingsOrganizationsOrganizationNameSendersSenderName(
    req: operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest,
    security: operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/senders/{senderName}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse =
        new operations.GetSettingsOrganizationsOrganizationNameSendersSenderNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sender = utils.objectToClass(httpRes?.data, shared.Sender);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Retrived the last modified for all settings of the system. Must have admin access.
   */
  headSettingsOrganizations(
    config?: AxiosRequestConfig
  ): Promise<operations.HeadSettingsOrganizationsResponse> {
    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/settings/organizations";

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "head",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.HeadSettingsOrganizationsResponse =
        new operations.HeadSettingsOrganizationsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Post a report to the data hub
   */
  postReports(
    req: operations.PostReportsRequest,
    security: operations.PostReportsSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PostReportsResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PostReportsRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/reports";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "string"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.PostReportsSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PostReportsResponse =
        new operations.PostReportsResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201, 400].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.report = utils.objectToClass(httpRes?.data, shared.Report);
          }
          break;
        case httpRes?.status == 500:
          break;
      }

      return res;
    });
  }

  /**
   * Create or update the direct settings associated with an organization
   */
  putSettingsOrganizationsOrganizationName(
    req: operations.PutSettingsOrganizationsOrganizationNameRequest,
    security: operations.PutSettingsOrganizationsOrganizationNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSettingsOrganizationsOrganizationNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutSettingsOrganizationsOrganizationNameRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "organizationInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PutSettingsOrganizationsOrganizationNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSettingsOrganizationsOrganizationNameResponse =
        new operations.PutSettingsOrganizationsOrganizationNameResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.organization = utils.objectToClass(
              httpRes?.data,
              shared.Organization
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a single reciever
   */
  putSettingsOrganizationsOrganizationNameReceiversReceiverName(
    req: operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest,
    security: operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/receivers/{receiverName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "receiverInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse =
        new operations.PutSettingsOrganizationsOrganizationNameReceiversReceiverNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.receiver = utils.objectToClass(httpRes?.data, shared.Receiver);
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * Update a single sender
   */
  putSettingsOrganizationsOrganizationNameSendersSenderName(
    req: operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest,
    security: operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/settings/organizations/{organizationName}/senders/{senderName}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "senderInput",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse =
        new operations.PutSettingsOrganizationsOrganizationNameSendersSenderNameResponse(
          {
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
          }
        );
      switch (true) {
        case [200, 201].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.senders = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.senders = utils.objectToClass(
              httpRes?.data,
              shared.Sender,
              resFieldDepth
            );
          }
          break;
        case [400, 401].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }
}
