/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateSourceRepositoryBranchRequestBody extends SpeakeasyBase {
  /**
   * The commit ID in an existing branch from which you want to create the new branch.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "headCommitId" })
  headCommitId?: string;
}

export class CreateSourceRepositoryBranchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSourceRepositoryBranchRequestBody;

  /**
   * The name for the branch you're creating.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=name",
  })
  name: string;

  /**
   * The name of the project in the space.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=projectName",
  })
  projectName: string;

  /**
   * The name of the repository where you want to create a branch.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=sourceRepositoryName",
  })
  sourceRepositoryName: string;

  /**
   * The name of the space.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=spaceName",
  })
  spaceName: string;
}

export class CreateSourceRepositoryBranchResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSourceRepositoryBranchResponse?: shared.CreateSourceRepositoryBranchResponse;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
