/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * PurchaseInvoice - Success
 */
public class PurchaseInvoice {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting")public PurchaseInvoiceAccountingDetails accounting;
    public PurchaseInvoice withAccounting(PurchaseInvoiceAccountingDetails accounting) {
        this.accounting = accounting;
        return this;
    }
    
    /**
     * The accounting cost code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounting_cost")public String accountingCost;
    public PurchaseInvoice withAccountingCost(String accountingCost) {
        this.accountingCost = accountingCost;
        return this;
    }
    
    /**
     * DEPRECATED - Use the allowance_charges array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowance_charge")public Double allowanceCharge;
    public PurchaseInvoice withAllowanceCharge(Double allowanceCharge) {
        this.allowanceCharge = allowanceCharge;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowance_charges")public PurchaseInvoiceAllowanceCharge[] allowanceCharges;
    public PurchaseInvoice withAllowanceCharges(PurchaseInvoiceAllowanceCharge[] allowanceCharges) {
        this.allowanceCharges = allowanceCharges;
        return this;
    }
    
    /**
     * DEPRECATED - Use amount_including_tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_including_vat")public Double amountIncludingVat;
    public PurchaseInvoice withAmountIncludingVat(Double amountIncludingVat) {
        this.amountIncludingVat = amountIncludingVat;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")public PurchaseInvoiceAttachment[] attachments;
    public PurchaseInvoice withAttachments(PurchaseInvoiceAttachment[] attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * Reference to the previous invoice this invoice relates to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_reference")public String billingReference;
    public PurchaseInvoice withBillingReference(String billingReference) {
        this.billingReference = billingReference;
        return this;
    }
    
    /**
     * Reference provided by the buyer. Used for routing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("buyer_reference")public String buyerReference;
    public PurchaseInvoice withBuyerReference(String buyerReference) {
        this.buyerReference = buyerReference;
        return this;
    }
    
    /**
     * Reference to the contract.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contract_document_reference")public String contractDocumentReference;
    public PurchaseInvoice withContractDocumentReference(String contractDocumentReference) {
        this.contractDocumentReference = contractDocumentReference;
        return this;
    }
    
    /**
     * The details of the delivery associated with this invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivery")public PurchaseInvoicePurchaseInvoiceDelivery delivery;
    public PurchaseInvoice withDelivery(PurchaseInvoicePurchaseInvoiceDelivery delivery) {
        this.delivery = delivery;
        return this;
    }
    
    /**
     * DEPRECATED. Use the new atatchments array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")public String document;
    public PurchaseInvoice withDocument(String document) {
        this.document = document;
        return this;
    }
    
    /**
     * The ISO 4217 currency for the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_currency_code")public String documentCurrencyCode;
    public PurchaseInvoice withDocumentCurrencyCode(String documentCurrencyCode) {
        this.documentCurrencyCode = documentCurrencyCode;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_totals")public PurchaseInvoiceDocumentTotals documentTotals;
    public PurchaseInvoice withDocumentTotals(PurchaseInvoiceDocumentTotals documentTotals) {
        this.documentTotals = documentTotals;
        return this;
    }
    
    /**
     * The type of document. Only "invoice" for now.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_type")public PurchaseInvoiceDocumentTypeEnum documentType;
    public PurchaseInvoice withDocumentType(PurchaseInvoiceDocumentTypeEnum documentType) {
        this.documentType = documentType;
        return this;
    }
    
    /**
     * The date the invoice must be payed by. Format "YYYY-MM-DD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_date")public String dueDate;
    public PurchaseInvoice withDueDate(String dueDate) {
        this.dueDate = dueDate;
        return this;
    }
    
    /**
     * Deprecated. Used for accountants. The id you specified for the organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_key")public String externalKey;
    public PurchaseInvoice withExternalKey(String externalKey) {
        this.externalKey = externalKey;
        return this;
    }
    
    /**
     * Deprecated. Used for the embedded portal retrieval service. The external_user_id you provided when the ShopAccount was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_user_id")public String externalUserId;
    public PurchaseInvoice withExternalUserId(String externalUserId) {
        this.externalUserId = externalUserId;
        return this;
    }
    
    /**
     * The GUID of the invoice
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")public String guid;
    public PurchaseInvoice withGuid(String guid) {
        this.guid = guid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_lines")public PurchaseInvoiceInvoiceLine[] invoiceLines;
    public PurchaseInvoice withInvoiceLines(PurchaseInvoiceInvoiceLine[] invoiceLines) {
        this.invoiceLines = invoiceLines;
        return this;
    }
    
    /**
     * The invoicenumber.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_number")public String invoiceNumber;
    public PurchaseInvoice withInvoiceNumber(String invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    
    /**
     * The type of invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_type")public PurchaseInvoiceInvoiceTypeEnum invoiceType;
    public PurchaseInvoice withInvoiceType(PurchaseInvoiceInvoiceTypeEnum invoiceType) {
        this.invoiceType = invoiceType;
        return this;
    }
    
    /**
     * The date the invoice was issued. Format "YYYY-MM-DD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issue_date")public String issueDate;
    public PurchaseInvoice withIssueDate(String issueDate) {
        this.issueDate = issueDate;
        return this;
    }
    
    /**
     * The id of the LegalEntity the invoice was received for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_entity_id")public Long legalEntityId;
    public PurchaseInvoice withLegalEntityId(Long legalEntityId) {
        this.legalEntityId = legalEntityId;
        return this;
    }
    
    /**
     * The invoice level note.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")public String note;
    public PurchaseInvoice withNote(String note) {
        this.note = note;
        return this;
    }
    
    /**
     * Reference to the order. Used for matching the invoice to an order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order_reference")public String orderReference;
    public PurchaseInvoice withOrderReference(String orderReference) {
        this.orderReference = orderReference;
        return this;
    }
    
    /**
     * DEPRECATED - Use the new payment_means_array array.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_means")public PurchaseInvoicePaymentMeansDEPRECATED paymentMeans;
    public PurchaseInvoice withPaymentMeans(PurchaseInvoicePaymentMeansDEPRECATED paymentMeans) {
        this.paymentMeans = paymentMeans;
        return this;
    }
    
    /**
     * The different payment means that can be used to pay the invoice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_means_array")public PurchaseInvoicePaymentMeans[] paymentMeansArray;
    public PurchaseInvoice withPaymentMeansArray(PurchaseInvoicePaymentMeans[] paymentMeansArray) {
        this.paymentMeansArray = paymentMeansArray;
        return this;
    }
    
    /**
     * DEPRECATED - use the payment_id property in the payment_means_array
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_means_payment_id")public String paymentMeansPaymentId;
    public PurchaseInvoice withPaymentMeansPaymentId(String paymentMeansPaymentId) {
        this.paymentMeansPaymentId = paymentMeansPaymentId;
        return this;
    }
    
    /**
     * A textual description of the payment terms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_terms_note")public String paymentTermsNote;
    public PurchaseInvoice withPaymentTermsNote(String paymentTermsNote) {
        this.paymentTermsNote = paymentTermsNote;
        return this;
    }
    
    /**
     * The end date of the period this invoice relates to. Format "YYYY-MM-DD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_end")public String periodEnd;
    public PurchaseInvoice withPeriodEnd(String periodEnd) {
        this.periodEnd = periodEnd;
        return this;
    }
    
    /**
     * The start date of the period this invoice relates to. Format "YYYY-MM-DD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("period_start")public String periodStart;
    public PurchaseInvoice withPeriodStart(String periodStart) {
        this.periodStart = periodStart;
        return this;
    }
    
    /**
     * Reference to the project.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_reference")public String projectReference;
    public PurchaseInvoice withProjectReference(String projectReference) {
        this.projectReference = projectReference;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")public PurchaseInvoiceSender sender;
    public PurchaseInvoice withSender(PurchaseInvoiceSender sender) {
        this.sender = sender;
        return this;
    }
    
    /**
     * The source the invoice was received from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")public PurchaseInvoiceInvoiceSourceEnum source;
    public PurchaseInvoice withSource(PurchaseInvoiceInvoiceSourceEnum source) {
        this.source = source;
        return this;
    }
    
    /**
     * The subtype of document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_type")public PurchaseInvoiceDocumentSubtypeEnum subType;
    public PurchaseInvoice withSubType(PurchaseInvoiceDocumentSubtypeEnum subType) {
        this.subType = subType;
        return this;
    }
    
    /**
     * Whether or not the document image (PDF) was generated by Storecove. If true, it means the invoice was received without any attachments and Storecove generated one for you. If false, the invoice will contain at least one attachment, which was received from the invoice sender.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("system_generated_primary_image")public Boolean systemGeneratedPrimaryImage;
    public PurchaseInvoice withSystemGeneratedPrimaryImage(Boolean systemGeneratedPrimaryImage) {
        this.systemGeneratedPrimaryImage = systemGeneratedPrimaryImage;
        return this;
    }
    
    /**
     * The date the invoice was issued for tax purposes. In most countries MUST match the issue_date. Format "YYYY-MM-DD".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_point_date")public String taxPointDate;
    public PurchaseInvoice withTaxPointDate(String taxPointDate) {
        this.taxPointDate = taxPointDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_subtotals")public PurchaseInvoiceTaxSubtotal[] taxSubtotals;
    public PurchaseInvoice withTaxSubtotals(PurchaseInvoiceTaxSubtotal[] taxSubtotals) {
        this.taxSubtotals = taxSubtotals;
        return this;
    }
    
    /**
     * The tax system of the invoice. Either tax_line_percentages or tax_line_amounts. The first tax system means the invoice lines contain only the tax percentages and the tax amounts are included only in the tax subtotals at the invoice level and so are only calculated at the invoice level. The tax system tax_line_amounts means that in addition to the percentage, each invoice line also contains the tax amount. The tax subtotals at the invoice level are calculated as the sum of the tax of the invoice lines. The distinction between the two tax systems has has implications for rounding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_system")public String taxSystem;
    public PurchaseInvoice withTaxSystem(String taxSystem) {
        this.taxSystem = taxSystem;
        return this;
    }
    
    /**
     * DEPRECATED - This is now part of each invoice line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vat_reverse_charge")public Boolean vatReverseCharge;
    public PurchaseInvoice withVatReverseCharge(Boolean vatReverseCharge) {
        this.vatReverseCharge = vatReverseCharge;
        return this;
    }
    
}
