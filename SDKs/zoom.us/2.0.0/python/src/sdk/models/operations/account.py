"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class AccountRequest:
    
    account_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'accountId', 'style': 'simple', 'explode': False }})
    r"""The account ID."""  
    
class Account200ApplicationXMLOptionsPayModeEnum(str, Enum):
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""
    MASTER = 'master'
    SUB = 'sub'


@dataclasses.dataclass
class Account200ApplicationXMLOptions:
    r"""Account options object."""
    
    billing_auto_renew: Optional[bool] = dataclasses.field(default=None)
    r"""Toggle whether automatic billing renewal is on or off."""  
    meeting_connector_list: Optional[list[str]] = dataclasses.field(default=None)
    r"""Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_mc` is set to `true`.
    """  
    pay_mode: Optional[Account200ApplicationXMLOptionsPayModeEnum] = dataclasses.field(default=None)
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""  
    room_connector_list: Optional[list[str]] = dataclasses.field(default=None)
    r"""Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_rc` is set to `true`.
    """  
    share_mc: Optional[bool] = dataclasses.field(default=None)
    r"""Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users."""  
    share_rc: Optional[bool] = dataclasses.field(default=None)
    r"""Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users."""  
    

@dataclasses.dataclass
class Account200ApplicationXML:
    r"""**HTTP Status Code**: `200`<br>
    Account object returned.
    """
    
    created_at: Optional[datetime] = dataclasses.field(default=None)
    r"""Account creation date and time."""  
    id: Optional[str] = dataclasses.field(default=None)
    r"""Account ID."""  
    options: Optional[Account200ApplicationXMLOptions] = dataclasses.field(default=None)
    r"""Account options object."""  
    owner_email: Optional[str] = dataclasses.field(default=None)
    r"""Account owner email."""  
    owner_id: Optional[str] = dataclasses.field(default=None)
    r"""Account owner ID."""  
    vanity_url: Optional[str] = dataclasses.field(default=None)
    r"""Account Vanity URL"""  
    
class Account200ApplicationJSONOptionsPayModeEnum(str, Enum):
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""
    MASTER = 'master'
    SUB = 'sub'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account200ApplicationJSONOptions:
    r"""Account options object."""
    
    billing_auto_renew: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('billing_auto_renew'), 'exclude': lambda f: f is None }})
    r"""Toggle whether automatic billing renewal is on or off."""  
    meeting_connector_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meeting_connector_list'), 'exclude': lambda f: f is None }})
    r"""Specify the IP addresses of the Meeting Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Meeting Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_mc` is set to `true`.
    """  
    pay_mode: Optional[Account200ApplicationJSONOptionsPayModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pay_mode'), 'exclude': lambda f: f is None }})
    r"""Payee:<br>`master` - master account holder pays.<br>`sub` - Sub account holder pays."""  
    room_connector_list: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('room_connector_list'), 'exclude': lambda f: f is None }})
    r"""Specify the IP addresses of the Room Connectors that you would like to share with the sub account. Multiple values can be separated by comma. If no value is provided in this field, all the Room Connectors of a master account will be shared with the sub account.
    
    
    **Note:** This option can only be used if the value of `share_rc` is set to `true`.
    """  
    share_mc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_mc'), 'exclude': lambda f: f is None }})
    r"""Enable/disable the option for a sub account to use shared [Meeting Connector(s)](https://support.zoom.us/hc/en-us/articles/201363093-Getting-Started-with-the-Meeting-Connector) that are set up by the master account. Meeting Connectors can only be used by On-prem users."""  
    share_rc: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('share_rc'), 'exclude': lambda f: f is None }})
    r"""Enable/disable the option for a sub account to use shared [Virtual Room Connector(s)](https://support.zoom.us/hc/en-us/articles/202134758-Getting-Started-With-Virtual-Room-Connector) that are set up by the master account. Virtual Room Connectors can only be used by On-prem users."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Account200ApplicationJSON:
    r"""**HTTP Status Code**: `200`<br>
    Account object returned.
    """
    
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Account creation date and time."""  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Account ID."""  
    options: Optional[Account200ApplicationJSONOptions] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('options'), 'exclude': lambda f: f is None }})
    r"""Account options object."""  
    owner_email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_email'), 'exclude': lambda f: f is None }})
    r"""Account owner email."""  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('owner_id'), 'exclude': lambda f: f is None }})
    r"""Account owner ID."""  
    vanity_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vanity_url'), 'exclude': lambda f: f is None }})
    r"""Account Vanity URL"""  
    

@dataclasses.dataclass
class AccountResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    account_200_application_json_object: Optional[Account200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code**: `200`<br>
    Account object returned.
    """  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    