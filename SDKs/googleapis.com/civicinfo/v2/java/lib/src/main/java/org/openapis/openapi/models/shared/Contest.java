/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contest - Information about a contest that appears on a voter's ballot.
 */
public class Contest {
    /**
     * A number specifying the position of this contest on the voter's ballot.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ballotPlacement")
    public String ballotPlacement;
    public Contest withBallotPlacement(String ballotPlacement) {
        this.ballotPlacement = ballotPlacement;
        return this;
    }
    
    /**
     * The official title on the ballot for this contest, only where available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ballotTitle")
    public String ballotTitle;
    public Contest withBallotTitle(String ballotTitle) {
        this.ballotTitle = ballotTitle;
        return this;
    }
    
    /**
     * The candidate choices for this contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidates")
    public Candidate[] candidates;
    public Contest withCandidates(Candidate[] candidates) {
        this.candidates = candidates;
        return this;
    }
    
    /**
     * Describes the geographic scope of a contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("district")
    public ElectoralDistrict district;
    public Contest withDistrict(ElectoralDistrict district) {
        this.district = district;
        return this;
    }
    
    /**
     * A description of any additional eligibility requirements for voting in this contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("electorateSpecifications")
    public String electorateSpecifications;
    public Contest withElectorateSpecifications(String electorateSpecifications) {
        this.electorateSpecifications = electorateSpecifications;
        return this;
    }
    
    /**
     * The levels of government of the office for this contest. There may be more than one in cases where a jurisdiction effectively acts at two different levels of government; for example, the mayor of the District of Columbia acts at "locality" level, but also effectively at both "administrative-area-2" and "administrative-area-1".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    public ContestLevelEnum[] level;
    public Contest withLevel(ContestLevelEnum[] level) {
        this.level = level;
        return this;
    }
    
    /**
     * The number of candidates that will be elected to office in this contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberElected")
    public String numberElected;
    public Contest withNumberElected(String numberElected) {
        this.numberElected = numberElected;
        return this;
    }
    
    /**
     * The number of candidates that a voter may vote for in this contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("numberVotingFor")
    public String numberVotingFor;
    public Contest withNumberVotingFor(String numberVotingFor) {
        this.numberVotingFor = numberVotingFor;
        return this;
    }
    
    /**
     * The name of the office for this contest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("office")
    public String office;
    public Contest withOffice(String office) {
        this.office = office;
        return this;
    }
    
    /**
     * If this is a partisan election, the name of the party/parties it is for.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryParties")
    public String[] primaryParties;
    public Contest withPrimaryParties(String[] primaryParties) {
        this.primaryParties = primaryParties;
        return this;
    }
    
    /**
     * The set of ballot responses for the referendum. A ballot response represents a line on the ballot. Common examples might include "yes" or "no" for referenda. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumBallotResponses")
    public String[] referendumBallotResponses;
    public Contest withReferendumBallotResponses(String[] referendumBallotResponses) {
        this.referendumBallotResponses = referendumBallotResponses;
        return this;
    }
    
    /**
     * Specifies a short summary of the referendum that is typically on the ballot below the title but above the text. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumBrief")
    public String referendumBrief;
    public Contest withReferendumBrief(String referendumBrief) {
        this.referendumBrief = referendumBrief;
        return this;
    }
    
    /**
     * A statement in opposition to the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumConStatement")
    public String referendumConStatement;
    public Contest withReferendumConStatement(String referendumConStatement) {
        this.referendumConStatement = referendumConStatement;
        return this;
    }
    
    /**
     * Specifies what effect abstaining (not voting) on the proposition will have (i.e. whether abstaining is considered a vote against it). This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumEffectOfAbstain")
    public String referendumEffectOfAbstain;
    public Contest withReferendumEffectOfAbstain(String referendumEffectOfAbstain) {
        this.referendumEffectOfAbstain = referendumEffectOfAbstain;
        return this;
    }
    
    /**
     * The threshold of votes that the referendum needs in order to pass, e.g. "two-thirds". This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumPassageThreshold")
    public String referendumPassageThreshold;
    public Contest withReferendumPassageThreshold(String referendumPassageThreshold) {
        this.referendumPassageThreshold = referendumPassageThreshold;
        return this;
    }
    
    /**
     * A statement in favor of the referendum. It does not necessarily appear on the ballot. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumProStatement")
    public String referendumProStatement;
    public Contest withReferendumProStatement(String referendumProStatement) {
        this.referendumProStatement = referendumProStatement;
        return this;
    }
    
    /**
     * A brief description of the referendum. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumSubtitle")
    public String referendumSubtitle;
    public Contest withReferendumSubtitle(String referendumSubtitle) {
        this.referendumSubtitle = referendumSubtitle;
        return this;
    }
    
    /**
     * The full text of the referendum. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumText")
    public String referendumText;
    public Contest withReferendumText(String referendumText) {
        this.referendumText = referendumText;
        return this;
    }
    
    /**
     * The title of the referendum (e.g. 'Proposition 42'). This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumTitle")
    public String referendumTitle;
    public Contest withReferendumTitle(String referendumTitle) {
        this.referendumTitle = referendumTitle;
        return this;
    }
    
    /**
     * A link to the referendum. This field is only populated for contests of type 'Referendum'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("referendumUrl")
    public String referendumUrl;
    public Contest withReferendumUrl(String referendumUrl) {
        this.referendumUrl = referendumUrl;
        return this;
    }
    
    /**
     * The roles which this office fulfills.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    public ContestRolesEnum[] roles;
    public Contest withRoles(ContestRolesEnum[] roles) {
        this.roles = roles;
        return this;
    }
    
    /**
     * A list of sources for this contest. If multiple sources are listed, the data has been aggregated from those sources.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sources")
    public Source[] sources;
    public Contest withSources(Source[] sources) {
        this.sources = sources;
        return this;
    }
    
    /**
     * "Yes" or "No" depending on whether this a contest being held outside the normal election cycle.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("special")
    public String special;
    public Contest withSpecial(String special) {
        this.special = special;
        return this;
    }
    
    /**
     * The type of contest. Usually this will be 'General', 'Primary', or 'Run-off' for contests with candidates. For referenda this will be 'Referendum'. For Retention contests this will typically be 'Retention'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    public String type;
    public Contest withType(String type) {
        this.type = type;
        return this;
    }
    
}
