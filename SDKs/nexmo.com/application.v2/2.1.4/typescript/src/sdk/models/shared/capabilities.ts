/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MeetingsCapability } from "./meetingscapability";
import { MessagesCapability } from "./messagescapability";
import { RtcCapability } from "./rtccapability";
import { VerifyCapability } from "./verifycapability";
import { VoiceCapability } from "./voicecapability";
import { Expose, Type } from "class-transformer";

/**
 * Your application can use multiple products. This contains the configuration for each product. This replaces the application `type` from version 1 of the Application API.
 */
export class Capabilities extends SpeakeasyBase {
  /**
   * Meetings related configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "meetings" })
  @Type(() => MeetingsCapability)
  meetings?: MeetingsCapability;

  /**
   * Messages / Dispatch related configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "messages" })
  @Type(() => MessagesCapability)
  messages?: MessagesCapability;

  /**
   * RTC / Conversation Service related configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rtc" })
  @Type(() => RtcCapability)
  rtc?: RtcCapability;

  /**
   * Specify the `vbc` capability to enable zero-rated calls for VBC number programmability service applications. This is always an empty object.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vbc" })
  vbc?: Record<string, any>;

  /**
   * Two factor authentication related configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "verify" })
  @Type(() => VerifyCapability)
  verify?: VerifyCapability;

  /**
   * Voice related configuration
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voice" })
  @Type(() => VoiceCapability)
  voice?: VoiceCapability;
}
