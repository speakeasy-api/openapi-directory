/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TimeMachineHistoricalWeather {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Returns weather data for a single location and given day in the past
   *
   * @remarks
   * ## Actual weather data for a single location and day in the past
   *
   * The output contains actual weather data for each day up to 8 years in the past, and long-term statistics of selected weather variables aggregated over 40 years.
   *
   * ### Location specification
   * The location of the weather data must be specified. There are two ways to do this:
   * 1. Specify the GPS coordinates of the location using the parameters `lat` and `lon`.
   * 2. **OR** specify the name of the place using the parameter `place_id`. To obtain the `place_id` for the location you want, please use endpoints `/find_places_prefix` (search by prefix) or `/find_places` (search by full name).
   *
   * *Note: For mountains, it is usually better to specify the `place_id` rather than the `lat` and `lon`. When you use `place_id`, you are guaranteed to receive data for the precise elevation of the peak. When you specify the coordinates, the elevation can be less precise.*
   *
   */
  timeMachineTimeMachineGet(
    req: operations.TimeMachineTimeMachineGetRequest,
    security: operations.TimeMachineTimeMachineGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.TimeMachineTimeMachineGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TimeMachineTimeMachineGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/time_machine";
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.TimeMachineTimeMachineGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TimeMachineTimeMachineGetResponse =
        new operations.TimeMachineTimeMachineGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.timeMachineTimeMachine = utils.objectToClass(
              httpRes?.data,
              shared.TimeMachineTimeMachine
            );
          }
          break;
        case [400, 402, 403, 429].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.generalRequestError = utils.objectToClass(
              httpRes?.data,
              shared.GeneralRequestError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.httpValidationError = utils.objectToClass(
              httpRes?.data,
              shared.HTTPValidationError
            );
          }
          break;
      }

      return res;
    });
  }
}
