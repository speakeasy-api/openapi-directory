"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Applications:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cancel_group_application(self, request: operations.CancelGroupApplicationRequest) -> operations.CancelGroupApplicationResponse:
        r"""Cancel a Group Application
        Cancels a group application to the carrier based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CancelGroupApplicationRequest, base_url, '/api/v1/applications/{application_id}/{version}/cancel', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CancelGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupApplicationResult])
                res.group_application_result = out

        return res

    def create_group_application(self, request: operations.CreateGroupApplicationRequest) -> operations.CreateGroupApplicationResponse:
        r"""Create new Group Application
        After creating a group, you can then create one or more new applications (one per carrier). Just pass the carrier ID and carrier group ID (if known) for the carrier associated with the application and the application type. The carrier group ID will allow us to reference the group in the carrierâ€™s system if that has already been allocated.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateGroupApplicationRequest, base_url, '/api/v1/groups/{group_id}/applications', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "application_create_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupApplicationResult])
                res.group_application_result = out

        return res

    def edit_group_application(self, request: operations.EditGroupApplicationRequest) -> operations.EditGroupApplicationResponse:
        r"""Edit a Group Application
        Edit a group application based on the ID provided. The version parameter must match the latest group application version.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.EditGroupApplicationRequest, base_url, '/api/v1/applications/{application_id}/{version}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "application_edit_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.EditGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupApplicationResult])
                res.group_application_result = out

        return res

    def get_all_applications(self, request: operations.GetAllApplicationsRequest) -> operations.GetAllApplicationsResponse:
        r"""Get All Applications
        Returns a list of all applications
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/api/v1/applications'
        
        query_params = utils.get_query_params(operations.GetAllApplicationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAllApplicationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedGroupApplicationResult])
                res.paginated_group_application_result = out

        return res

    def get_group_application(self, request: operations.GetGroupApplicationRequest) -> operations.GetGroupApplicationResponse:
        r"""Get Group Application
        Returns the latest version of a single group application based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupApplicationRequest, base_url, '/api/v1/applications/{application_id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupApplicationResult])
                res.group_application_result = out

        return res

    def get_group_applications(self, request: operations.GetGroupApplicationsRequest) -> operations.GetGroupApplicationsResponse:
        r"""Get Group Applications
        Returns a list of all applications for the given group
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupApplicationsRequest, base_url, '/api/v1/groups/{group_id}/applications', request)
        
        query_params = utils.get_query_params(operations.GetGroupApplicationsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupApplicationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.PaginatedGroupApplicationResult])
                res.paginated_group_application_result = out

        return res

    def submit_group_application(self, request: operations.SubmitGroupApplicationRequest) -> operations.SubmitGroupApplicationResponse:
        r"""Submit a Group Application
        Submits a group application to the carrier based on the ID provided.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.SubmitGroupApplicationRequest, base_url, '/api/v1/applications/{application_id}/{version}/submit', request)
        
        
        client = self._client
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SubmitGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupApplicationResult])
                res.group_application_result = out
        elif http_res.status_code == 422:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationValidationResult])
                res.application_validation_result = out

        return res

    def validate_group_application(self, request: operations.ValidateGroupApplicationRequest) -> operations.ValidateGroupApplicationResponse:
        r"""Validate Group Application
        Returns a list of errors if the group application is not valid else an empty list is returned
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ValidateGroupApplicationRequest, base_url, '/api/v1/applications/{application_id}/validate', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ValidateGroupApplicationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ApplicationValidationResult])
                res.application_validation_result = out

        return res

    