"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Transaction:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_transaction_summary(self, request: operations.GetTransactionSummaryRequest, security: operations.GetTransactionSummarySecurity) -> operations.GetTransactionSummaryResponse:
        r"""<div class=\\"msgbox_important\\"><p class=\\"msgbox_importantInDiv\\" data-mc-autonum=\\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\\"><span class=\\"autonumber\\"><span><b><span style=\\"color: #dd1e31;\\" class=\\"mcFormatColor\\">Important!</span></b></span></span> Due to EU &amp; UK Payments regulatory requirements, an additional security verification via Digital Signatures is required for certain API calls that are made on behalf of EU/UK sellers, including all <b>Finances API</b> methods. Please refer to <a href=\\"/develop/guides/digital-signatures-for-apis \\" target=\\"_blank\\">Digital Signatures for APIs</a> to learn more on the impacted APIs and the process to create signatures to be included in the HTTP payload.</p></div><br>The <b>getTransactionSummary</b> method retrieves cumulative information for monetary transactions. If applicable, the number of payments with a <code>transactionStatus</code> equal to <code>FUNDS_ON_HOLD</code> and the total monetary amount of these on-hold payments are also returned.<br><br><span class=\\"tablenote\\"><b>Note:</b> For a complete list of transaction types, refer to <a href=\\"/api-docs/sell/finances/types/pay:TransactionTypeEnum \\" target=\\"_blank \\">TransactionTypeEnum</a>.</span><br>Refer to the <a href=\\"#uri.filter \\">filter</a> field for additional information about each filter and its use.<br><br><span class=\\"tablenote\\"><b>Note:</b> Unless a <code>transactionType</code> filter is used to retrieve a specific type of transaction (e.g., <code>SALE</code>, <code>REFUND</code>, etc.,) the <a href=\\"#response.creditCount\\">creditCount</a> and <a href=\\"#response.creditAmount\\">creditAmount</a> response fields both include <i>order sales</i> and <i>seller credits</i> information. That is, the <b>count</b> and <b>value</b> fields do not distinguish between these two types monetary transactions.</span>"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/transaction_summary'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetTransactionSummaryRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionSummaryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TransactionSummaryResponse])
                res.transaction_summary_response = out
        elif http_res.status_code in [400, 500]:
            pass

        return res

    def get_transactions(self, request: operations.GetTransactionsRequest, security: operations.GetTransactionsSecurity) -> operations.GetTransactionsResponse:
        r"""<div class=\\"msgbox_important\\"><p class=\\"msgbox_importantInDiv\\" data-mc-autonum=\\"&lt;b&gt;&lt;span style=&quot;color: #dd1e31;&quot; class=&quot;mcFormatColor&quot;&gt;Important! &lt;/span&gt;&lt;/b&gt;\\"><span class=\\"autonumber\\"><span><b><span style=\\"color: #dd1e31;\\" class=\\"mcFormatColor\\">Important!</span></b></span></span> Due to EU &amp; UK Payments regulatory requirements, an additional security verification via Digital Signatures is required for certain API calls that are made on behalf of EU/UK sellers, including all <b>Finances API</b> methods. Please refer to <a href=\\"/develop/guides/digital-signatures-for-apis \\" target=\\"_blank\\">Digital Signatures for APIs</a> to learn more on the impacted APIs and the process to create signatures to be included in the HTTP payload.</p></div><br>The <b>getTransactions</b> method allows a seller to retrieve information about one or more of their monetary transactions.<br><br><span class=\\"tablenote\\"><b>Note:</b> For a complete list of transaction types, refer to <a href=\\"/api-docs/sell/finances/types/pay:TransactionTypeEnum \\" target=\\"_blank \\">TransactionTypeEnum</a>.</span><br>Numerous input filters are available which can be used individualy or combined to refine the data that are returned. For example:<ul><li><code>SALE</code> transactions for August 15, 2022;</li><li><code>RETURN</code> transactions for the month of January, 2021;</li><li>Transactions currently in a <code>transactionStatus</code> equal to <code>FUNDS_ON_HOLD</code>.</li></ul>Refer to the <a href=\\"#uri.filter \\">filter</a> field for additional information about each filter and its use.<br><br>Pagination and sort query parameters are also provided that allow users to further control how monetary transactions are displayed in the response.<br><br>If no monetary transactions match the input criteria, an http status code of <em>204 No Content</em> is returned with no response payload."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/transaction'
        
        headers = utils.get_headers(request)
        query_params = utils.get_query_params(operations.GetTransactionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTransactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Transactions])
                res.transactions = out
        elif http_res.status_code in [204, 400, 500]:
            pass

        return res

    