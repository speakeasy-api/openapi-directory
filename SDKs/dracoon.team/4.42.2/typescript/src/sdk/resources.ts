/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Client resources
 */
export class Resources {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Request list of subscription scopes
   *
   * @remarks
   * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>
   *
   * ### Description:
   * Retrieve a list of subscription scopes.
   *
   * ### Precondition:
   * Authenticated user.
   *
   * ### Postcondition:
   * List of scopes is returned.
   *
   * ### Further Information:
   * None.
   */
  requestSubscriptionScopes(
    config?: AxiosRequestConfig
  ): Promise<operations.RequestSubscriptionScopesResponse> {
    const baseURL: string = this._serverURL;
    const url: string =
      baseURL.replace(/\/$/, "") + "/v4/resources/user/notifications/scopes";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestSubscriptionScopesResponse =
        new operations.RequestSubscriptionScopesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.notificationScopeList = utils.objectToClass(
              httpRes?.data,
              shared.NotificationScopeList
            );
          }
          break;
        case httpRes?.status == 406:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Request user avatar
   *
   * @remarks
   * ### Description:
   * Get user avatar.
   *
   * ### Precondition:
   * Valid user ID and avatar UUID
   *
   * ### Postcondition:
   * Avatar is returned.
   *
   * ### Further Information:
   * None.
   */
  requestUserAvatar(
    req: operations.RequestUserAvatarRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.RequestUserAvatarResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.RequestUserAvatarRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/v4/resources/users/{user_id}/avatar/{uuid}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.RequestUserAvatarResponse =
        new operations.RequestUserAvatarResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.avatar = utils.objectToClass(httpRes?.data, shared.Avatar);
          }
          break;
        case [400, 404, 406].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.errorResponse = utils.objectToClass(
              httpRes?.data,
              shared.ErrorResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
