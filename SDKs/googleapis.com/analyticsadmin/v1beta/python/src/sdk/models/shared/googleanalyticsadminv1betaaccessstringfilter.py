"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GoogleAnalyticsAdminV1betaAccessStringFilterMatchTypeEnum(str, Enum):
    r"""The match type for this filter."""
    MATCH_TYPE_UNSPECIFIED = 'MATCH_TYPE_UNSPECIFIED'
    EXACT = 'EXACT'
    BEGINS_WITH = 'BEGINS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    CONTAINS = 'CONTAINS'
    FULL_REGEXP = 'FULL_REGEXP'
    PARTIAL_REGEXP = 'PARTIAL_REGEXP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleAnalyticsAdminV1betaAccessStringFilter:
    r"""The filter for strings."""
    
    case_sensitive: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('caseSensitive'), 'exclude': lambda f: f is None }})
    r"""If true, the string value is case sensitive."""  
    match_type: Optional[GoogleAnalyticsAdminV1betaAccessStringFilterMatchTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matchType'), 'exclude': lambda f: f is None }})
    r"""The match type for this filter."""  
    value: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value'), 'exclude': lambda f: f is None }})
    r"""The string value used for the matching."""  
    