"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class CheckPushRequestTypeOfPushProviderEnum(str, Enum):
    r"""Push provider type"""
    FIREBASE = 'firebase'
    APN = 'apn'
    HUAWEI = 'huawei'
    XIAOMI = 'xiaomi'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CheckPushRequest:
    
    apn_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apn_template'), 'exclude': lambda f: f is None }})
    r"""Push message template for APN"""  
    firebase_data_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firebase_data_template'), 'exclude': lambda f: f is None }})
    r"""Push message data template for Firebase"""  
    firebase_template: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('firebase_template'), 'exclude': lambda f: f is None }})
    r"""Push message template for Firebase"""  
    message_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id'), 'exclude': lambda f: f is None }})
    r"""Message ID to send push notification for"""  
    push_provider_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_provider_name'), 'exclude': lambda f: f is None }})
    r"""Name of push provider"""  
    push_provider_type: Optional[CheckPushRequestTypeOfPushProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('push_provider_type'), 'exclude': lambda f: f is None }})
    r"""Push provider type"""  
    skip_devices: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_devices'), 'exclude': lambda f: f is None }})
    r"""Don't require existing devices to render templates"""  
    user: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})
    r"""Represents chat user"""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})  
    