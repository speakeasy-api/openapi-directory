"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import createimageresponse as shared_createimageresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateImageRequestBodyImageTestsConfiguration:
    r"""Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it."""
    
    image_tests_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageTestsEnabled'), 'exclude': lambda f: f is None }})  
    timeout_minutes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeoutMinutes'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateImageRequestBody:
    
    client_token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientToken') }})
    r"""The idempotency token used to make this request idempotent."""  
    infrastructure_configuration_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('infrastructureConfigurationArn') }})
    r"""The Amazon Resource Name (ARN) of the infrastructure configuration that defines the environment in which your image will be built and tested."""  
    container_recipe_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('containerRecipeArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the container recipe that defines how images are configured and tested."""  
    distribution_configuration_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distributionConfigurationArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the distribution configuration that defines and configures the outputs of your pipeline."""  
    enhanced_image_metadata_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enhancedImageMetadataEnabled'), 'exclude': lambda f: f is None }})
    r"""Collects additional information about the image being created, including the operating system (OS) version and package list. This information is used to enhance the overall experience of using EC2 Image Builder. Enabled by default."""  
    image_recipe_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageRecipeArn'), 'exclude': lambda f: f is None }})
    r"""The Amazon Resource Name (ARN) of the image recipe that defines how images are configured, tested, and assessed."""  
    image_tests_configuration: Optional[CreateImageRequestBodyImageTestsConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('imageTestsConfiguration'), 'exclude': lambda f: f is None }})
    r"""Configure image tests for your pipeline build. Tests run after building the image, to verify that the AMI or container image is valid before distributing it."""  
    tags: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""The tags of the image."""  
    

@dataclasses.dataclass
class CreateImageRequest:
    
    request_body: CreateImageRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class CreateImageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    call_rate_limit_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CallRateLimitExceededException"""  
    client_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ClientException"""  
    create_image_response: Optional[shared_createimageresponse.CreateImageResponse] = dataclasses.field(default=None)
    r"""Success"""  
    forbidden_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ForbiddenException"""  
    idempotent_parameter_mismatch_exception: Optional[Any] = dataclasses.field(default=None)
    r"""IdempotentParameterMismatchException"""  
    invalid_request_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidRequestException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_in_use_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceInUseException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    service_quota_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceQuotaExceededException"""  
    service_unavailable_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceUnavailableException"""  
    