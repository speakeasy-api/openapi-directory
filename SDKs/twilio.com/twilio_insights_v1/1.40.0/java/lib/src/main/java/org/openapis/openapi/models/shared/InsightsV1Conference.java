/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * InsightsV1Conference - OK
 */
public class InsightsV1Conference {
    /**
     * The unique SID identifier of the Account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;
    public InsightsV1Conference withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * The unique SID identifier of the Conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conference_sid")
    public String conferenceSid;
    public InsightsV1Conference withConferenceSid(String conferenceSid) {
        this.conferenceSid = conferenceSid;
        return this;
    }
    
    /**
     * Duration of the between conference start event and conference end event in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connect_duration_seconds")
    public Long connectDurationSeconds;
    public InsightsV1Conference withConnectDurationSeconds(Long connectDurationSeconds) {
        this.connectDurationSeconds = connectDurationSeconds;
        return this;
    }
    
    /**
     * Conference creation date and time in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("create_time")
    public OffsetDateTime createTime;
    public InsightsV1Conference withCreateTime(OffsetDateTime createTime) {
        this.createTime = createTime;
        return this;
    }
    
    /**
     * Potential issues detected by Twilio during the conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("detected_issues")
    public Object detectedIssues;
    public InsightsV1Conference withDetectedIssues(Object detectedIssues) {
        this.detectedIssues = detectedIssues;
        return this;
    }
    
    /**
     * Conference duration in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration_seconds")
    public Long durationSeconds;
    public InsightsV1Conference withDurationSeconds(Long durationSeconds) {
        this.durationSeconds = durationSeconds;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_reason")
    public ConferenceEnumConferenceEndReasonEnum endReason;
    public InsightsV1Conference withEndReason(ConferenceEnumConferenceEndReasonEnum endReason) {
        this.endReason = endReason;
        return this;
    }
    
    /**
     * Conference end date and time in ISO 8601 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;
    public InsightsV1Conference withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Call SID of the participant whose actions ended the conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ended_by")
    public String endedBy;
    public InsightsV1Conference withEndedBy(String endedBy) {
        this.endedBy = endedBy;
        return this;
    }
    
    /**
     * Custom label for the conference resource, up to 64 characters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendly_name")
    public String friendlyName;
    public InsightsV1Conference withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Contains a dictionary of URL links to nested resources of this Conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;
    public InsightsV1Conference withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * Actual maximum number of concurrent participants in the conference.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_concurrent_participants")
    public Long maxConcurrentParticipants;
    public InsightsV1Conference withMaxConcurrentParticipants(Long maxConcurrentParticipants) {
        this.maxConcurrentParticipants = maxConcurrentParticipants;
        return this;
    }
    
    /**
     * Maximum number of concurrent participants as specified by the configuration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_participants")
    public Long maxParticipants;
    public InsightsV1Conference withMaxParticipants(Long maxParticipants) {
        this.maxParticipants = maxParticipants;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mixer_region")
    public ConferenceEnumRegionEnum mixerRegion;
    public InsightsV1Conference withMixerRegion(ConferenceEnumRegionEnum mixerRegion) {
        this.mixerRegion = mixerRegion;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mixer_region_requested")
    public ConferenceEnumRegionEnum mixerRegionRequested;
    public InsightsV1Conference withMixerRegionRequested(ConferenceEnumRegionEnum mixerRegionRequested) {
        this.mixerRegionRequested = mixerRegionRequested;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processing_state")
    public ConferenceEnumProcessingStateEnum processingState;
    public InsightsV1Conference withProcessingState(ConferenceEnumProcessingStateEnum processingState) {
        this.processingState = processingState;
        return this;
    }
    
    /**
     * Boolean. Indicates whether recording was enabled at the conference mixer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_enabled")
    public Boolean recordingEnabled;
    public InsightsV1Conference withRecordingEnabled(Boolean recordingEnabled) {
        this.recordingEnabled = recordingEnabled;
        return this;
    }
    
    /**
     * Timestamp in ISO 8601 format when the conference started. Conferences do not start until at least two participants join, at least one of whom has startConferenceOnEnter=true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public InsightsV1Conference withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public ConferenceEnumConferenceStatusEnum status;
    public InsightsV1Conference withStatus(ConferenceEnumConferenceStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Object. Contains details about conference tags including severity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tag_info")
    public Object tagInfo;
    public InsightsV1Conference withTagInfo(Object tagInfo) {
        this.tagInfo = tagInfo;
        return this;
    }
    
    /**
     * Tags for detected conference conditions and participant behaviors which may be of interest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public ConferenceEnumTagEnum[] tags;
    public InsightsV1Conference withTags(ConferenceEnumTagEnum[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Unique conference participants based on caller ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_participants")
    public Long uniqueParticipants;
    public InsightsV1Conference withUniqueParticipants(Long uniqueParticipants) {
        this.uniqueParticipants = uniqueParticipants;
        return this;
    }
    
    /**
     * The URL of this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public InsightsV1Conference withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
