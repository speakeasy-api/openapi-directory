/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Parameter } from "./parameter";
import { Expose, Type } from "class-transformer";

/**
 * Represents a Google Tag Manager Macro.
 */
export class Macro extends SpeakeasyBase {
  /**
   * GTM Account ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "accountId" })
  accountId?: string;

  /**
   * GTM Container ID.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "containerId" })
  containerId?: string;

  /**
   * For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "disablingRuleId" })
  disablingRuleId?: string[];

  /**
   * For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enablingRuleId" })
  enablingRuleId?: string[];

  /**
   * The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * The Macro ID uniquely identifies the GTM Macro.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "macroId" })
  macroId?: string;

  /**
   * Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notes" })
  notes?: string;

  /**
   * The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata({ elemType: Parameter })
  @Expose({ name: "parameter" })
  @Type(() => Parameter)
  parameter?: Parameter[];

  /**
   * Parent folder id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parentFolderId" })
  parentFolderId?: string;

  /**
   * The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleEndMs" })
  scheduleEndMs?: string;

  /**
   * The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "scheduleStartMs" })
  scheduleStartMs?: string;

  /**
   * GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}
