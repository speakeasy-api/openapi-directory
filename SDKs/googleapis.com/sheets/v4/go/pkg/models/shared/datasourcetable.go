// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DataSourceTableColumnSelectionTypeEnum - The type to select columns for the data source table. Defaults to SELECTED.
type DataSourceTableColumnSelectionTypeEnum string

const (
	DataSourceTableColumnSelectionTypeEnumDataSourceTableColumnSelectionTypeUnspecified DataSourceTableColumnSelectionTypeEnum = "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED"
	DataSourceTableColumnSelectionTypeEnumSelected                                      DataSourceTableColumnSelectionTypeEnum = "SELECTED"
	DataSourceTableColumnSelectionTypeEnumSyncAll                                       DataSourceTableColumnSelectionTypeEnum = "SYNC_ALL"
)

func (e DataSourceTableColumnSelectionTypeEnum) ToPointer() *DataSourceTableColumnSelectionTypeEnum {
	return &e
}

func (e *DataSourceTableColumnSelectionTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED":
		fallthrough
	case "SELECTED":
		fallthrough
	case "SYNC_ALL":
		*e = DataSourceTableColumnSelectionTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataSourceTableColumnSelectionTypeEnum: %v", v)
	}
}

// DataSourceTable - A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
type DataSourceTable struct {
	// The type to select columns for the data source table. Defaults to SELECTED.
	ColumnSelectionType *DataSourceTableColumnSelectionTypeEnum `json:"columnSelectionType,omitempty"`
	// Columns selected for the data source table. The column_selection_type must be SELECTED.
	Columns []DataSourceColumnReference `json:"columns,omitempty"`
	// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
	DataExecutionStatus *DataExecutionStatus `json:"dataExecutionStatus,omitempty"`
	// The ID of the data source the data source table is associated with.
	DataSourceID *string `json:"dataSourceId,omitempty"`
	// Filter specifications in the data source table.
	FilterSpecs []FilterSpec `json:"filterSpecs,omitempty"`
	// The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
	RowLimit *int `json:"rowLimit,omitempty"`
	// Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
	SortSpecs []SortSpec `json:"sortSpecs,omitempty"`
}
