/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetRecordRequest extends SpeakeasyBase {
  /**
   * The name of the feature group from which you want to retrieve a record.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=FeatureGroupName",
  })
  featureGroupName: string;

  /**
   * List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FeatureName",
  })
  featureName?: string[];

  /**
   * The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=RecordIdentifierValueAsString",
  })
  recordIdentifierValueAsString: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class GetRecordResponse extends SpeakeasyBase {
  /**
   * AccessForbidden
   */
  @SpeakeasyMetadata()
  accessForbidden?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  getRecordResponse?: shared.GetRecordResponse;

  /**
   * InternalFailure
   */
  @SpeakeasyMetadata()
  internalFailure?: any;

  /**
   * ResourceNotFound
   */
  @SpeakeasyMetadata()
  resourceNotFound?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ServiceUnavailable
   */
  @SpeakeasyMetadata()
  serviceUnavailable?: any;

  /**
   * ValidationError
   */
  @SpeakeasyMetadata()
  validationError?: any;
}
