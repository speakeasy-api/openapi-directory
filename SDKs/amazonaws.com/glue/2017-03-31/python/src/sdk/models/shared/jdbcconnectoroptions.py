"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import gluerecordtype_enum as shared_gluerecordtype_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class JDBCConnectorOptions:
    r"""Additional connection options for the connector."""
    
    data_type_mapping: Optional[dict[str, shared_gluerecordtype_enum.GlueRecordTypeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataTypeMapping'), 'exclude': lambda f: f is None }})  
    filter_predicate: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilterPredicate'), 'exclude': lambda f: f is None }})  
    job_bookmark_keys: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobBookmarkKeys'), 'exclude': lambda f: f is None }})  
    job_bookmark_keys_sort_order: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('JobBookmarkKeysSortOrder'), 'exclude': lambda f: f is None }})  
    lower_bound: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LowerBound'), 'exclude': lambda f: f is None }})  
    num_partitions: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NumPartitions'), 'exclude': lambda f: f is None }})  
    partition_column: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartitionColumn'), 'exclude': lambda f: f is None }})  
    upper_bound: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpperBound'), 'exclude': lambda f: f is None }})  
    