// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
)

// ScheduledTransactionDetailFlagColorEnum - The scheduled transaction flag
type ScheduledTransactionDetailFlagColorEnum string

const (
	ScheduledTransactionDetailFlagColorEnumRed                    ScheduledTransactionDetailFlagColorEnum = "red"
	ScheduledTransactionDetailFlagColorEnumOrange                 ScheduledTransactionDetailFlagColorEnum = "orange"
	ScheduledTransactionDetailFlagColorEnumYellow                 ScheduledTransactionDetailFlagColorEnum = "yellow"
	ScheduledTransactionDetailFlagColorEnumGreen                  ScheduledTransactionDetailFlagColorEnum = "green"
	ScheduledTransactionDetailFlagColorEnumBlue                   ScheduledTransactionDetailFlagColorEnum = "blue"
	ScheduledTransactionDetailFlagColorEnumPurple                 ScheduledTransactionDetailFlagColorEnum = "purple"
	ScheduledTransactionDetailFlagColorEnumLessThanNilGreaterThan ScheduledTransactionDetailFlagColorEnum = "<nil>"
)

func (e ScheduledTransactionDetailFlagColorEnum) ToPointer() *ScheduledTransactionDetailFlagColorEnum {
	return &e
}

func (e *ScheduledTransactionDetailFlagColorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "red":
		fallthrough
	case "orange":
		fallthrough
	case "yellow":
		fallthrough
	case "green":
		fallthrough
	case "blue":
		fallthrough
	case "purple":
		fallthrough
	case "<nil>":
		*e = ScheduledTransactionDetailFlagColorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduledTransactionDetailFlagColorEnum: %v", v)
	}
}

type ScheduledTransactionDetailFrequencyEnum string

const (
	ScheduledTransactionDetailFrequencyEnumNever           ScheduledTransactionDetailFrequencyEnum = "never"
	ScheduledTransactionDetailFrequencyEnumDaily           ScheduledTransactionDetailFrequencyEnum = "daily"
	ScheduledTransactionDetailFrequencyEnumWeekly          ScheduledTransactionDetailFrequencyEnum = "weekly"
	ScheduledTransactionDetailFrequencyEnumEveryOtherWeek  ScheduledTransactionDetailFrequencyEnum = "everyOtherWeek"
	ScheduledTransactionDetailFrequencyEnumTwiceAMonth     ScheduledTransactionDetailFrequencyEnum = "twiceAMonth"
	ScheduledTransactionDetailFrequencyEnumEvery4Weeks     ScheduledTransactionDetailFrequencyEnum = "every4Weeks"
	ScheduledTransactionDetailFrequencyEnumMonthly         ScheduledTransactionDetailFrequencyEnum = "monthly"
	ScheduledTransactionDetailFrequencyEnumEveryOtherMonth ScheduledTransactionDetailFrequencyEnum = "everyOtherMonth"
	ScheduledTransactionDetailFrequencyEnumEvery3Months    ScheduledTransactionDetailFrequencyEnum = "every3Months"
	ScheduledTransactionDetailFrequencyEnumEvery4Months    ScheduledTransactionDetailFrequencyEnum = "every4Months"
	ScheduledTransactionDetailFrequencyEnumTwiceAYear      ScheduledTransactionDetailFrequencyEnum = "twiceAYear"
	ScheduledTransactionDetailFrequencyEnumYearly          ScheduledTransactionDetailFrequencyEnum = "yearly"
	ScheduledTransactionDetailFrequencyEnumEveryOtherYear  ScheduledTransactionDetailFrequencyEnum = "everyOtherYear"
)

func (e ScheduledTransactionDetailFrequencyEnum) ToPointer() *ScheduledTransactionDetailFrequencyEnum {
	return &e
}

func (e *ScheduledTransactionDetailFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "never":
		fallthrough
	case "daily":
		fallthrough
	case "weekly":
		fallthrough
	case "everyOtherWeek":
		fallthrough
	case "twiceAMonth":
		fallthrough
	case "every4Weeks":
		fallthrough
	case "monthly":
		fallthrough
	case "everyOtherMonth":
		fallthrough
	case "every3Months":
		fallthrough
	case "every4Months":
		fallthrough
	case "twiceAYear":
		fallthrough
	case "yearly":
		fallthrough
	case "everyOtherYear":
		*e = ScheduledTransactionDetailFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduledTransactionDetailFrequencyEnum: %v", v)
	}
}

type ScheduledTransactionDetail struct {
	AccountID   string `json:"account_id"`
	AccountName string `json:"account_name"`
	// The scheduled transaction amount in milliunits format
	Amount     int64   `json:"amount"`
	CategoryID *string `json:"category_id,omitempty"`
	// The name of the category.  If a split scheduled transaction, this will be 'Split'.
	CategoryName *string `json:"category_name,omitempty"`
	// The first date for which the Scheduled Transaction was scheduled.
	DateFirst types.Date `json:"date_first"`
	// The next date for which the Scheduled Transaction is scheduled.
	DateNext types.Date `json:"date_next"`
	// Whether or not the scheduled transaction has been deleted.  Deleted scheduled transactions will only be included in delta requests.
	Deleted bool `json:"deleted"`
	// The scheduled transaction flag
	FlagColor *ScheduledTransactionDetailFlagColorEnum `json:"flag_color,omitempty"`
	Frequency ScheduledTransactionDetailFrequencyEnum  `json:"frequency"`
	ID        string                                   `json:"id"`
	Memo      *string                                  `json:"memo,omitempty"`
	PayeeID   *string                                  `json:"payee_id,omitempty"`
	PayeeName *string                                  `json:"payee_name,omitempty"`
	// If a split scheduled transaction, the subtransactions.
	Subtransactions []ScheduledSubTransaction `json:"subtransactions"`
	// If a transfer, the account_id which the scheduled transaction transfers to
	TransferAccountID *string `json:"transfer_account_id,omitempty"`
}
