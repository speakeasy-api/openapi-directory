"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Categories:
    r"""Categories enable understanding where your money goes by driving
    powerful insights in Up. All categories in Up are pre-defined
    and are automatically assigned to new purchases in most cases. A
    parent-child relationship is used to represent categories,
    however parent categories cannot be directly assigned to
    transactions.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_categories(self, request: operations.GetCategoriesRequest) -> operations.GetCategoriesResponse:
        r"""List categories
        Retrieve a list of all categories and their ancestry. The returned list
        is not paginated.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/categories'
        
        query_params = utils.get_query_params(operations.GetCategoriesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListCategoriesResponse])
                res.list_categories_response = out

        return res

    def get_categories_id_(self, request: operations.GetCategoriesIDRequest) -> operations.GetCategoriesIDResponse:
        r"""Retrieve category
        Retrieve a specific category by providing its unique identifier.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetCategoriesIDRequest, base_url, '/categories/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCategoriesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetCategoryResponse])
                res.get_category_response = out

        return res

    def patch_transactions_transaction_id_relationships_category(self, request: operations.PatchTransactionsTransactionIDRelationshipsCategoryRequest) -> operations.PatchTransactionsTransactionIDRelationshipsCategoryResponse:
        r"""Categorize transaction
        Updates the category associated with a transaction. Only transactions
        for which `isCategorizable` is set to true support this operation. The
        `id` is taken from the list exposed on `/categories` and cannot be one of
        the top-level (parent) categories. To de-categorize a transaction, set
        the entire `data` key to `null`. An HTTP `204` is returned on success.
        The associated category, along with its request URL is also exposed via
        the `category` relationship on the transaction resource returned from
        `/transactions/{id}`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchTransactionsTransactionIDRelationshipsCategoryRequest, base_url, '/transactions/{transactionId}/relationships/category', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_transaction_category_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchTransactionsTransactionIDRelationshipsCategoryResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    