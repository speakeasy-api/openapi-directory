// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type SocerSecurity struct {
	APIKey   string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-APIKEY"`
	ClientID string `security:"scheme,type=apiKey,subtype=header,name=X-APISETU-CLIENTID"`
}

type SocerRequestBodyCertificateParameters struct {
	// Application No
	ApplNo string `json:"APPL_NO"`
	// Date of birth
	Dob string `json:"DOB"`
	// Name
	FullName string `json:"FullName"`
	// Session
	Session string `json:"SESSION"`
}

// SocerRequestBodyFormatEnum - The format of the certificate in response.
type SocerRequestBodyFormatEnum string

const (
	SocerRequestBodyFormatEnumPdf SocerRequestBodyFormatEnum = "pdf"
)

func (e SocerRequestBodyFormatEnum) ToPointer() *SocerRequestBodyFormatEnum {
	return &e
}

func (e *SocerRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pdf":
		*e = SocerRequestBodyFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SocerRequestBodyFormatEnum: %v", v)
	}
}

// SocerRequestBody - Request format
type SocerRequestBody struct {
	CertificateParameters *SocerRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format SocerRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type Socer504ApplicationJSONErrorEnum string

const (
	Socer504ApplicationJSONErrorEnumGatewayTimeout Socer504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e Socer504ApplicationJSONErrorEnum) ToPointer() *Socer504ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gateway_timeout":
		*e = Socer504ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer504ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer504ApplicationJSONErrorDescriptionEnum string

const (
	Socer504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Socer504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e Socer504ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer504ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service did not respond in time":
		*e = Socer504ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer504ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer504ApplicationJSON - Gateway timeout
type Socer504ApplicationJSON struct {
	Error            *Socer504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer503ApplicationJSONErrorEnum string

const (
	Socer503ApplicationJSONErrorEnumServiceUnavailable Socer503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e Socer503ApplicationJSONErrorEnum) ToPointer() *Socer503ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "service_unavailable":
		*e = Socer503ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer503ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer503ApplicationJSONErrorDescriptionEnum string

const (
	Socer503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Socer503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e Socer503ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer503ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service is temporarily unavailable":
		*e = Socer503ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer503ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer503ApplicationJSON - Service unavailable
type Socer503ApplicationJSON struct {
	Error            *Socer503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer502ApplicationJSONErrorEnum string

const (
	Socer502ApplicationJSONErrorEnumBadGatewy Socer502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e Socer502ApplicationJSONErrorEnum) ToPointer() *Socer502ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bad_gatewy":
		*e = Socer502ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer502ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer502ApplicationJSONErrorDescriptionEnum string

const (
	Socer502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Socer502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e Socer502ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer502ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Publisher service returned an invalid response":
		*e = Socer502ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer502ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer502ApplicationJSON - Bad gateway
type Socer502ApplicationJSON struct {
	Error            *Socer502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer500ApplicationJSONErrorEnum string

const (
	Socer500ApplicationJSONErrorEnumInternalServerError Socer500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e Socer500ApplicationJSONErrorEnum) ToPointer() *Socer500ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal_server_error":
		*e = Socer500ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer500ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer500ApplicationJSONErrorDescriptionEnum string

const (
	Socer500ApplicationJSONErrorDescriptionEnumInternalServerError Socer500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e Socer500ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer500ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Internal server error":
		*e = Socer500ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer500ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer500ApplicationJSON - Internal server error
type Socer500ApplicationJSON struct {
	Error            *Socer500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer404ApplicationJSONErrorEnum string

const (
	Socer404ApplicationJSONErrorEnumRecordNotFound Socer404ApplicationJSONErrorEnum = "record_not_found"
	Socer404ApplicationJSONErrorEnumURLNotFound    Socer404ApplicationJSONErrorEnum = "url_not_found"
)

func (e Socer404ApplicationJSONErrorEnum) ToPointer() *Socer404ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Socer404ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer404ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer404ApplicationJSONErrorDescriptionEnum string

const (
	Socer404ApplicationJSONErrorDescriptionEnumNoRecordFound               Socer404ApplicationJSONErrorDescriptionEnum = "No record found"
	Socer404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Socer404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e Socer404ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer404ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Socer404ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer404ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer404ApplicationJSON - No record found
type Socer404ApplicationJSON struct {
	Error            *Socer404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer401ApplicationJSONErrorEnum string

const (
	Socer401ApplicationJSONErrorEnumInvalidAuthentication Socer401ApplicationJSONErrorEnum = "invalid_authentication"
	Socer401ApplicationJSONErrorEnumInvalidAuthorization  Socer401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e Socer401ApplicationJSONErrorEnum) ToPointer() *Socer401ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Socer401ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer401ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer401ApplicationJSONErrorDescriptionEnum string

const (
	Socer401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Socer401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Socer401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Socer401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e Socer401ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer401ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Socer401ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer401ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer401ApplicationJSON - Unauthorized access
type Socer401ApplicationJSON struct {
	Error            *Socer401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Socer400ApplicationJSONErrorEnum string

const (
	Socer400ApplicationJSONErrorEnumMissingParameter Socer400ApplicationJSONErrorEnum = "missing_parameter"
	Socer400ApplicationJSONErrorEnumInvalidParameter Socer400ApplicationJSONErrorEnum = "invalid_parameter"
	Socer400ApplicationJSONErrorEnumInvalidFormat    Socer400ApplicationJSONErrorEnum = "invalid_format"
	Socer400ApplicationJSONErrorEnumInvalidTxnid     Socer400ApplicationJSONErrorEnum = "invalid_txnid"
	Socer400ApplicationJSONErrorEnumInvalidConsentid Socer400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e Socer400ApplicationJSONErrorEnum) ToPointer() *Socer400ApplicationJSONErrorEnum {
	return &e
}

func (e *Socer400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Socer400ApplicationJSONErrorEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer400ApplicationJSONErrorEnum: %v", v)
	}
}

type Socer400ApplicationJSONErrorDescriptionEnum string

const (
	Socer400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Socer400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Socer400ApplicationJSONErrorDescriptionEnumBadRequest                              Socer400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Socer400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Socer400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Socer400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Socer400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Socer400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Socer400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e Socer400ApplicationJSONErrorDescriptionEnum) ToPointer() *Socer400ApplicationJSONErrorDescriptionEnum {
	return &e
}

func (e *Socer400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Socer400ApplicationJSONErrorDescriptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Socer400ApplicationJSONErrorDescriptionEnum: %v", v)
	}
}

// Socer400ApplicationJSON - Bad request
type Socer400ApplicationJSON struct {
	Error            *Socer400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Socer400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type SocerResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Socer400ApplicationJSONObject *Socer400ApplicationJSON
	// Unauthorized access
	Socer401ApplicationJSONObject *Socer401ApplicationJSON
	// No record found
	Socer404ApplicationJSONObject *Socer404ApplicationJSON
	// Internal server error
	Socer500ApplicationJSONObject *Socer500ApplicationJSON
	// Bad gateway
	Socer502ApplicationJSONObject *Socer502ApplicationJSON
	// Service unavailable
	Socer503ApplicationJSONObject *Socer503ApplicationJSON
	// Gateway timeout
	Socer504ApplicationJSONObject *Socer504ApplicationJSON
}
