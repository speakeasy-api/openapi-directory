/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * LivingAreaAccessibility - Accessibility features of the living area.
 */
public class LivingAreaAccessibility {
    /**
     * ADA compliant unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues, as determined by legislative policy. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adaCompliantUnit")
    public Boolean adaCompliantUnit;

    public LivingAreaAccessibility withAdaCompliantUnit(Boolean adaCompliantUnit) {
        this.adaCompliantUnit = adaCompliantUnit;
        return this;
    }
    
    /**
     * ADA compliant unit exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adaCompliantUnitException")
    public LivingAreaAccessibilityAdaCompliantUnitExceptionEnum adaCompliantUnitException;

    public LivingAreaAccessibility withAdaCompliantUnitException(LivingAreaAccessibilityAdaCompliantUnitExceptionEnum adaCompliantUnitException) {
        this.adaCompliantUnitException = adaCompliantUnitException;
        return this;
    }
    
    /**
     * Hearing-accessible doorbell. A visual indicator(s) of a knock or ring at the door.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleDoorbell")
    public Boolean hearingAccessibleDoorbell;

    public LivingAreaAccessibility withHearingAccessibleDoorbell(Boolean hearingAccessibleDoorbell) {
        this.hearingAccessibleDoorbell = hearingAccessibleDoorbell;
        return this;
    }
    
    /**
     * Hearing-accessible doorbell exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleDoorbellException")
    public LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum hearingAccessibleDoorbellException;

    public LivingAreaAccessibility withHearingAccessibleDoorbellException(LivingAreaAccessibilityHearingAccessibleDoorbellExceptionEnum hearingAccessibleDoorbellException) {
        this.hearingAccessibleDoorbellException = hearingAccessibleDoorbellException;
        return this;
    }
    
    /**
     * Hearing-accessible fire alarm. A device that gives warning of a fire through flashing lights.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleFireAlarm")
    public Boolean hearingAccessibleFireAlarm;

    public LivingAreaAccessibility withHearingAccessibleFireAlarm(Boolean hearingAccessibleFireAlarm) {
        this.hearingAccessibleFireAlarm = hearingAccessibleFireAlarm;
        return this;
    }
    
    /**
     * Hearing-accessible fire alarm exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleFireAlarmException")
    public LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum hearingAccessibleFireAlarmException;

    public LivingAreaAccessibility withHearingAccessibleFireAlarmException(LivingAreaAccessibilityHearingAccessibleFireAlarmExceptionEnum hearingAccessibleFireAlarmException) {
        this.hearingAccessibleFireAlarmException = hearingAccessibleFireAlarmException;
        return this;
    }
    
    /**
     * Hearing-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with auditory issues.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleUnit")
    public Boolean hearingAccessibleUnit;

    public LivingAreaAccessibility withHearingAccessibleUnit(Boolean hearingAccessibleUnit) {
        this.hearingAccessibleUnit = hearingAccessibleUnit;
        return this;
    }
    
    /**
     * Hearing-accessible unit exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hearingAccessibleUnitException")
    public LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum hearingAccessibleUnitException;

    public LivingAreaAccessibility withHearingAccessibleUnitException(LivingAreaAccessibilityHearingAccessibleUnitExceptionEnum hearingAccessibleUnitException) {
        this.hearingAccessibleUnitException = hearingAccessibleUnitException;
        return this;
    }
    
    /**
     * Mobility-accessible bathtub. A bathtub that accomodates the physically challenged with additional railings or hand grips, a transfer seat or lift, and/or a door to enable walking into the tub.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleBathtub")
    public Boolean mobilityAccessibleBathtub;

    public LivingAreaAccessibility withMobilityAccessibleBathtub(Boolean mobilityAccessibleBathtub) {
        this.mobilityAccessibleBathtub = mobilityAccessibleBathtub;
        return this;
    }
    
    /**
     * Mobility-accessible bathtub exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleBathtubException")
    public LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum mobilityAccessibleBathtubException;

    public LivingAreaAccessibility withMobilityAccessibleBathtubException(LivingAreaAccessibilityMobilityAccessibleBathtubExceptionEnum mobilityAccessibleBathtubException) {
        this.mobilityAccessibleBathtubException = mobilityAccessibleBathtubException;
        return this;
    }
    
    /**
     * Mobility-accessible shower. A shower with an enlarged door or access point to accommodate a wheelchair or a waterproof seat for the physically challenged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleShower")
    public Boolean mobilityAccessibleShower;

    public LivingAreaAccessibility withMobilityAccessibleShower(Boolean mobilityAccessibleShower) {
        this.mobilityAccessibleShower = mobilityAccessibleShower;
        return this;
    }
    
    /**
     * Mobility-accessible shower exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleShowerException")
    public LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum mobilityAccessibleShowerException;

    public LivingAreaAccessibility withMobilityAccessibleShowerException(LivingAreaAccessibilityMobilityAccessibleShowerExceptionEnum mobilityAccessibleShowerException) {
        this.mobilityAccessibleShowerException = mobilityAccessibleShowerException;
        return this;
    }
    
    /**
     * Mobility-accessible toilet. A toilet with a higher seat, grab bars, and/or a larger area around it to accommodate the physically challenged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleToilet")
    public Boolean mobilityAccessibleToilet;

    public LivingAreaAccessibility withMobilityAccessibleToilet(Boolean mobilityAccessibleToilet) {
        this.mobilityAccessibleToilet = mobilityAccessibleToilet;
        return this;
    }
    
    /**
     * Mobility-accessible toilet exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleToiletException")
    public LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum mobilityAccessibleToiletException;

    public LivingAreaAccessibility withMobilityAccessibleToiletException(LivingAreaAccessibilityMobilityAccessibleToiletExceptionEnum mobilityAccessibleToiletException) {
        this.mobilityAccessibleToiletException = mobilityAccessibleToiletException;
        return this;
    }
    
    /**
     * Mobility-accessible unit. A guestroom designed to accommodate the physical challenges of a guest with mobility and/or auditory and/or visual issues. Usually features enlarged doorways, roll-in showers with seats, bathroom grab bars, and communication equipment for the hearing and sight challenged.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleUnit")
    public Boolean mobilityAccessibleUnit;

    public LivingAreaAccessibility withMobilityAccessibleUnit(Boolean mobilityAccessibleUnit) {
        this.mobilityAccessibleUnit = mobilityAccessibleUnit;
        return this;
    }
    
    /**
     * Mobility-accessible unit exception.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mobilityAccessibleUnitException")
    public LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum mobilityAccessibleUnitException;

    public LivingAreaAccessibility withMobilityAccessibleUnitException(LivingAreaAccessibilityMobilityAccessibleUnitExceptionEnum mobilityAccessibleUnitException) {
        this.mobilityAccessibleUnitException = mobilityAccessibleUnitException;
        return this;
    }
    
    public LivingAreaAccessibility(){}
}
