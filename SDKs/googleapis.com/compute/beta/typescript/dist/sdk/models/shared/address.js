"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = exports.AddressStatusEnum = exports.AddressPurposeEnum = exports.AddressNetworkTierEnum = exports.AddressIpv6EndpointTypeEnum = exports.AddressIpVersionEnum = exports.AddressAddressTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
 */
var AddressAddressTypeEnum;
(function (AddressAddressTypeEnum) {
    AddressAddressTypeEnum["External"] = "EXTERNAL";
    AddressAddressTypeEnum["Internal"] = "INTERNAL";
    AddressAddressTypeEnum["UnspecifiedType"] = "UNSPECIFIED_TYPE";
})(AddressAddressTypeEnum = exports.AddressAddressTypeEnum || (exports.AddressAddressTypeEnum = {}));
/**
 * The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
 */
var AddressIpVersionEnum;
(function (AddressIpVersionEnum) {
    AddressIpVersionEnum["Ipv4"] = "IPV4";
    AddressIpVersionEnum["Ipv6"] = "IPV6";
    AddressIpVersionEnum["UnspecifiedVersion"] = "UNSPECIFIED_VERSION";
})(AddressIpVersionEnum = exports.AddressIpVersionEnum || (exports.AddressIpVersionEnum = {}));
/**
 * The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
 */
var AddressIpv6EndpointTypeEnum;
(function (AddressIpv6EndpointTypeEnum) {
    AddressIpv6EndpointTypeEnum["Netlb"] = "NETLB";
    AddressIpv6EndpointTypeEnum["Vm"] = "VM";
})(AddressIpv6EndpointTypeEnum = exports.AddressIpv6EndpointTypeEnum || (exports.AddressIpv6EndpointTypeEnum = {}));
/**
 * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
 */
var AddressNetworkTierEnum;
(function (AddressNetworkTierEnum) {
    AddressNetworkTierEnum["FixedStandard"] = "FIXED_STANDARD";
    AddressNetworkTierEnum["Premium"] = "PREMIUM";
    AddressNetworkTierEnum["Standard"] = "STANDARD";
    AddressNetworkTierEnum["StandardOverridesFixedStandard"] = "STANDARD_OVERRIDES_FIXED_STANDARD";
})(AddressNetworkTierEnum = exports.AddressNetworkTierEnum || (exports.AddressNetworkTierEnum = {}));
/**
 * The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose.
 */
var AddressPurposeEnum;
(function (AddressPurposeEnum) {
    AddressPurposeEnum["DnsResolver"] = "DNS_RESOLVER";
    AddressPurposeEnum["GceEndpoint"] = "GCE_ENDPOINT";
    AddressPurposeEnum["IpsecInterconnect"] = "IPSEC_INTERCONNECT";
    AddressPurposeEnum["NatAuto"] = "NAT_AUTO";
    AddressPurposeEnum["PrivateServiceConnect"] = "PRIVATE_SERVICE_CONNECT";
    AddressPurposeEnum["Serverless"] = "SERVERLESS";
    AddressPurposeEnum["SharedLoadbalancerVip"] = "SHARED_LOADBALANCER_VIP";
    AddressPurposeEnum["VpcPeering"] = "VPC_PEERING";
})(AddressPurposeEnum = exports.AddressPurposeEnum || (exports.AddressPurposeEnum = {}));
/**
 * [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
 */
var AddressStatusEnum;
(function (AddressStatusEnum) {
    AddressStatusEnum["InUse"] = "IN_USE";
    AddressStatusEnum["Reserved"] = "RESERVED";
    AddressStatusEnum["Reserving"] = "RESERVING";
})(AddressStatusEnum = exports.AddressStatusEnum || (exports.AddressStatusEnum = {}));
/**
 * Represents an IP Address resource. Google Compute Engine has two IP Address resources: * [Global (external and internal)](https://cloud.google.com/compute/docs/reference/rest/beta/globalAddresses) * [Regional (external and internal)](https://cloud.google.com/compute/docs/reference/rest/beta/addresses) For more information, see Reserving a static external IP address.
 */
var Address = /** @class */ (function (_super) {
    __extends(Address, _super);
    function Address() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "address" }),
        __metadata("design:type", String)
    ], Address.prototype, "address", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "addressType" }),
        __metadata("design:type", String)
    ], Address.prototype, "addressType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], Address.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], Address.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Address.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipVersion" }),
        __metadata("design:type", String)
    ], Address.prototype, "ipVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipv6EndpointType" }),
        __metadata("design:type", String)
    ], Address.prototype, "ipv6EndpointType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], Address.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], Address.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], Address.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Address.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], Address.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "networkTier" }),
        __metadata("design:type", String)
    ], Address.prototype, "networkTier", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "prefixLength" }),
        __metadata("design:type", Number)
    ], Address.prototype, "prefixLength", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "purpose" }),
        __metadata("design:type", String)
    ], Address.prototype, "purpose", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], Address.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], Address.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        __metadata("design:type", String)
    ], Address.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "subnetwork" }),
        __metadata("design:type", String)
    ], Address.prototype, "subnetwork", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "users" }),
        __metadata("design:type", Array)
    ], Address.prototype, "users", void 0);
    return Address;
}(utils_1.SpeakeasyBase));
exports.Address = Address;
