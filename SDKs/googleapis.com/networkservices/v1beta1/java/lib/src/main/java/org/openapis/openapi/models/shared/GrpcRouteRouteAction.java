/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * GrpcRouteRouteAction - Specifies how to route matched traffic.
 */
public class GrpcRouteRouteAction {
    /**
     * Optional. The destination services to which traffic should be forwarded. If multiple destinations are specified, traffic will be split between Backend Service(s) according to the weight field of these destinations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("destinations")
    public GrpcRouteDestination[] destinations;

    public GrpcRouteRouteAction withDestinations(GrpcRouteDestination[] destinations) {
        this.destinations = destinations;
        return this;
    }
    
    /**
     * The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced on a percentage of requests before sending those requests to the destination service. Similarly requests from clients can be aborted by for a percentage of requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("faultInjectionPolicy")
    public GrpcRouteFaultInjectionPolicy faultInjectionPolicy;

    public GrpcRouteRouteAction withFaultInjectionPolicy(GrpcRouteFaultInjectionPolicy faultInjectionPolicy) {
        this.faultInjectionPolicy = faultInjectionPolicy;
        return this;
    }
    
    /**
     * The specifications for retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retryPolicy")
    public GrpcRouteRetryPolicy retryPolicy;

    public GrpcRouteRouteAction withRetryPolicy(GrpcRouteRetryPolicy retryPolicy) {
        this.retryPolicy = retryPolicy;
        return this;
    }
    
    /**
     * Optional. Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeout")
    public String timeout;

    public GrpcRouteRouteAction withTimeout(String timeout) {
        this.timeout = timeout;
        return this;
    }
    
    public GrpcRouteRouteAction(){}
}
