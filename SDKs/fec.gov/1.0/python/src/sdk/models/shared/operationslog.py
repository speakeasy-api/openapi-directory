"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OperationsLog:
    
    amendment_indicator: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('amendment_indicator'), 'exclude': lambda f: f is None }})
    r"""Amendent types:
        -N   new
        -A   amendment
        -T   terminated
        -C   consolidated
        -M   multi-candidate
        -S   secondary
    
    NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
    """  
    beginning_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('beginning_image_number'), 'exclude': lambda f: f is None }})
    r"""Unique identifier for the electronic or paper report. This number is used to construct
    PDF URLs to the original document.
    """  
    candidate_committee_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('candidate_committee_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier of the registered filer."""  
    coverage_end_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_end_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Ending date of the reporting period"""  
    coverage_start_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('coverage_start_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Beginning date of the reporting period"""  
    ending_image_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ending_image_number'), 'exclude': lambda f: f is None }})
    r"""Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document."""  
    form_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('form_type'), 'exclude': lambda f: f is None }})
    r"""The form where the underlying data comes from, for example, Form 1 would appear as F1:
        - F1   Statement of Organization
        - F1M  Notification of Multicandidate Status
        - F2   Statement of Candidacy
        - F3   Report of Receipts and Disbursements for an Authorized Committee
        - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
        - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
        - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
        - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
        - F5   Report of Independent Expenditures Made and Contributions Received
        - F6   48 Hour Notice of Contributions/Loans Received
        - F7   Report of Communication Costs by Corporations and Membership Organizations
        - F8   Debt Settlement Plan
        - F9   24 Hour Notice of Disbursements for Electioneering Communications
        - F13  Report of Donations Accepted for Inaugural Committee
        - F99  Miscellaneous Text
        - FRQ  Request for Additional Information
    """  
    receipt_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('receipt_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date the FEC received the electronic or paper record"""  
    report_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_type'), 'exclude': lambda f: f is None }})
    r"""Name of report where the underlying data comes from:
        - 10D Pre-Election
        - 10G Pre-General
        - 10P Pre-Primary
        - 10R Pre-Run-Off
        - 10S Pre-Special
        - 12C Pre-Convention
        - 12G Pre-General
        - 12P Pre-Primary
        - 12R Pre-Run-Off
        - 12S Pre-Special
        - 30D Post-Election
        - 30G Post-General
        - 30P Post-Primary
        - 30R Post-Run-Off
        - 30S Post-Special
        - 60D Post-Convention
        - M1  January Monthly
        - M10 October Monthly
        - M11 November Monthly
        - M12 December Monthly
        - M2  February Monthly
        - M3  March Monthly
        - M4  April Monthly
        - M5  May Monthly
        - M6  June Monthly
        - M7  July Monthly
        - M8  August Monthly
        - M9  September Monthly
        - MY  Mid-Year Report
        - Q1  April Quarterly
        - Q2  July Quarterly
        - Q3  October Quarterly
        - TER Termination Report
        - YE  Year-End
        - ADJ COMP ADJUST AMEND
        - CA  COMPREHENSIVE AMEND
        - 90S Post Inaugural Supplement
        - 90D Post Inaugural
        - 48  48 Hour Notification
        - 24  24 Hour Notification
        - M7S July Monthly/Semi-Annual
        - MSA Monthly Semi-Annual (MY)
        - MYS Monthly Year End/Semi-Annual
        - Q2S July Quarterly/Semi-Annual
        - QSA Quarterly Semi-Annual (MY)
        - QYS Quarterly Year End/Semi-Annual
        - QYE Quarterly Semi-Annual (YE)
        - QMS Quarterly Mid-Year/ Semi-Annual
        - MSY Monthly Semi-Annual (YE)
    """  
    report_year: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('report_year'), 'exclude': lambda f: f is None }})
    r"""Forms with coverage date -
        year from the coverage ending date.
    Forms without coverage date - 
        year from the receipt date.
    """  
    status_num: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status_num'), 'exclude': lambda f: f is None }})
    r"""Status of the transactional report.
        -0- Transaction is entered 
              into the system.
              But not verified.
        -1- Transaction is verified.
    """  
    sub_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sub_id'), 'exclude': lambda f: f is None }})
    r"""A unique identifier of the transactional report."""  
    summary_data_complete_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_data_complete_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date when the report is entered into the database"""  
    summary_data_verification_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('summary_data_verification_date'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Same day or a day after the report is loaded in the database"""  
    transaction_data_complete_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('transaction_data_complete_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date when the report is processed completely"""  
    