// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type ErrorsGetRetentionSettingsSecurity struct {
	APIToken string `security:"scheme,type=apiKey,subtype=header,name=X-API-Token"`
}

type ErrorsGetRetentionSettingsRequest struct {
	// The name of the application
	AppName string `pathParam:"style=simple,explode=false,name=app_name"`
	// The name of the owner
	OwnerName string `pathParam:"style=simple,explode=false,name=owner_name"`
}

type ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum string

const (
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumBadRequest          ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "BadRequest"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumConflict            ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "Conflict"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumNotAcceptable       ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "NotAcceptable"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumNotFound            ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "NotFound"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumInternalServerError ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "InternalServerError"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumUnauthorized        ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "Unauthorized"
	ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnumTooManyRequests     ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum = "TooManyRequests"
)

func (e ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum) ToPointer() *ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum {
	return &e
}

func (e *ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BadRequest":
		fallthrough
	case "Conflict":
		fallthrough
	case "NotAcceptable":
		fallthrough
	case "NotFound":
		fallthrough
	case "InternalServerError":
		fallthrough
	case "Unauthorized":
		fallthrough
	case "TooManyRequests":
		*e = ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum: %v", v)
	}
}

type ErrorsGetRetentionSettingsDefaultApplicationJSONError struct {
	Code    ErrorsGetRetentionSettingsDefaultApplicationJSONErrorCodeEnum `json:"code"`
	Message string                                                        `json:"message"`
}

// ErrorsGetRetentionSettingsDefaultApplicationJSON - Error code with reason.
type ErrorsGetRetentionSettingsDefaultApplicationJSON struct {
	Error ErrorsGetRetentionSettingsDefaultApplicationJSONError `json:"error"`
}

type ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum int64

const (
	ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnumTwentyEight ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum = 28
)

func (e ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum) ToPointer() *ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum {
	return &e
}

func (e *ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 28:
		*e = ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum: %v", v)
	}
}

// ErrorsGetRetentionSettings200ApplicationJSON - Success
type ErrorsGetRetentionSettings200ApplicationJSON struct {
	RetentionInDays ErrorsGetRetentionSettings200ApplicationJSONRetentionInDaysEnum `json:"retention_in_days"`
}

type ErrorsGetRetentionSettingsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Success
	ErrorsGetRetentionSettings200ApplicationJSONObject *ErrorsGetRetentionSettings200ApplicationJSON
	// Error code with reason.
	ErrorsGetRetentionSettingsDefaultApplicationJSONObject *ErrorsGetRetentionSettingsDefaultApplicationJSON
}
