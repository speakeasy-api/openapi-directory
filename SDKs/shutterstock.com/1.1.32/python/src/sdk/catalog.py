"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Catalog:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_to_collection(self, request: operations.AddToCollectionRequest, security: operations.AddToCollectionSecurity) -> operations.AddToCollectionResponse:
        r"""Add items to catalog collections
        This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user's account's catalog.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddToCollectionRequest, base_url, '/v2/catalog/collections/{collection_id}/items', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_catalog_collection_items", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddToCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollection])
                res.catalog_collection = out

        return res

    def create_collection(self, request: shared.CreateCatalogCollection, security: operations.CreateCollectionSecurity) -> operations.CreateCollectionResponse:
        r"""Create catalog collections
        This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/catalog/collections'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollection])
                res.catalog_collection = out

        return res

    def delete_collection(self, request: operations.DeleteCollectionRequest, security: operations.DeleteCollectionSecurity) -> operations.DeleteCollectionResponse:
        r"""Delete catalog collections
        This endpoint deletes a catalog collection. It does not remove the assets from the user's account's catalog.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteCollectionRequest, base_url, '/v2/catalog/collections/{collection_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_from_collection(self, request: operations.DeleteFromCollectionRequest, security: operations.DeleteFromCollectionSecurity) -> operations.DeleteFromCollectionResponse:
        r"""Remove items from catalog collection
        This endpoint removes assets from a catalog collection. It does not remove the assets from the user's account's catalog.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteFromCollectionRequest, base_url, '/v2/catalog/collections/{collection_id}/items', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "remove_catalog_collection_items", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteFromCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollection])
                res.catalog_collection = out

        return res

    def get_collections(self, request: operations.GetCollectionsRequest, security: operations.GetCollectionsSecurity) -> operations.GetCollectionsResponse:
        r"""List catalog collections
        This endpoint returns a list of catalog collections.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/catalog/collections'
        
        query_params = utils.get_query_params(operations.GetCollectionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetCollectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollectionDataList])
                res.catalog_collection_data_list = out
        elif http_res.status_code == 400:
            pass

        return res

    def search_catalog(self, request: operations.SearchCatalogRequest, security: operations.SearchCatalogSecurity) -> operations.SearchCatalogResponse:
        r"""Search catalogs for assets
        This endpoint searches for assets in the account's catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v2/catalog/search'
        
        query_params = utils.get_query_params(operations.SearchCatalogRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SearchCatalogResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollectionItemDataList])
                res.catalog_collection_item_data_list = out
        elif http_res.status_code in [400, 401, 403]:
            pass

        return res

    def update_collection(self, request: operations.UpdateCollectionRequest, security: operations.UpdateCollectionSecurity) -> operations.UpdateCollectionResponse:
        r"""Update collection metadata
        This endpoint updates the metadata of a catalog collection.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateCollectionRequest, base_url, '/v2/catalog/collections/{collection_id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_catalog_collection", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateCollectionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CatalogCollection])
                res.catalog_collection = out

        return res

    