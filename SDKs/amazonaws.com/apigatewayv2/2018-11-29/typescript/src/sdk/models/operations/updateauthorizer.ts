/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
 */
export enum UpdateAuthorizerRequestBodyAuthorizerTypeEnum {
  Request = "REQUEST",
  Jwt = "JWT",
}

/**
 * Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
 */
export class UpdateAuthorizerRequestBodyJwtConfiguration extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Audience" })
  audience?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "Issuer" })
  issuer?: string;
}

export class UpdateAuthorizerRequestBody extends SpeakeasyBase {
  /**
   * Represents an Amazon Resource Name (ARN).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerCredentialsArn" })
  authorizerCredentialsArn?: string;

  /**
   * A string with a length between [1-64].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerPayloadFormatVersion" })
  authorizerPayloadFormatVersion?: string;

  /**
   * An integer with a value between [0-3600].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerResultTtlInSeconds" })
  authorizerResultTtlInSeconds?: number;

  /**
   * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerType" })
  authorizerType?: UpdateAuthorizerRequestBodyAuthorizerTypeEnum;

  /**
   * A string representation of a URI with a length between [1-2048].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorizerUri" })
  authorizerUri?: string;

  /**
   * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enableSimpleResponses" })
  enableSimpleResponses?: boolean;

  /**
   * The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identitySource" })
  identitySource?: string[];

  /**
   * A string with a length between [0-1024].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "identityValidationExpression" })
  identityValidationExpression?: string;

  /**
   * Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "jwtConfiguration" })
  @Type(() => UpdateAuthorizerRequestBodyJwtConfiguration)
  jwtConfiguration?: UpdateAuthorizerRequestBodyJwtConfiguration;

  /**
   * A string with a length between [1-128].
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

export class UpdateAuthorizerRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateAuthorizerRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The API identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=apiId",
  })
  apiId: string;

  /**
   * The authorizer identifier.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=authorizerId",
  })
  authorizerId: string;
}

export class UpdateAuthorizerResponse extends SpeakeasyBase {
  /**
   * BadRequestException
   */
  @SpeakeasyMetadata()
  badRequestException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * NotFoundException
   */
  @SpeakeasyMetadata()
  notFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * TooManyRequestsException
   */
  @SpeakeasyMetadata()
  tooManyRequestsException?: any;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateAuthorizerResponse?: shared.UpdateAuthorizerResponse;
}
