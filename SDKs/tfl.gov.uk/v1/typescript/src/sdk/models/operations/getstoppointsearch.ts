/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetStopPointSearchRequest extends SpeakeasyBase {
  /**
   * True to only return stations in that have Fares data available for single fares to another station.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=faresOnly",
  })
  faresOnly?: boolean;

  /**
   * If true, returns results including HUBs.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=includeHubs",
  })
  includeHubs?: boolean;

  /**
   * An optional, parameter separated list of the lines to filter by
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=lines" })
  lines?: string[];

  /**
   * An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
   *
   * @remarks
   *             it is possible that the flattened result set will contain more than 50 items.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=maxResults",
  })
  maxResults?: number;

  /**
   * An optional, parameter separated list of the modes to filter by
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=modes" })
  modes?: string[];

  /**
   * The query string, case-insensitive. Leading and trailing wildcards are applied automatically.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query: string;

  /**
   * If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=tflOperatedNationalRailStationsOnly",
  })
  tflOperatedNationalRailStationsOnly?: boolean;
}

export class GetStopPointSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  tflApiPresentationEntitiesSearchResponse?: shared.TflApiPresentationEntitiesSearchResponse;
}
