"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETModifyInstancePlacementActionEnum(str, Enum):
    MODIFY_INSTANCE_PLACEMENT = 'ModifyInstancePlacement'

class GETModifyInstancePlacementAffinityEnum(str, Enum):
    r"""The affinity setting for the instance."""
    DEFAULT = 'default'
    HOST = 'host'

class GETModifyInstancePlacementTenancyEnum(str, Enum):
    r"""<p>The tenancy for the instance.</p> <note> <p>For T3 instances, you can't change the tenancy from <code>dedicated</code> to <code>host</code>, or from <code>host</code> to <code>dedicated</code>. Attempting to make one of these unsupported tenancy changes results in the <code>InvalidTenancy</code> error code.</p> </note>"""
    DEDICATED = 'dedicated'
    HOST = 'host'

class GETModifyInstancePlacementVersionEnum(str, Enum):
    TWO_THOUSAND_AND_SIXTEEN_11_15 = '2016-11-15'


@dataclasses.dataclass
class GETModifyInstancePlacementRequest:
    
    action: GETModifyInstancePlacementActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    instance_id: str = dataclasses.field(metadata={'query_param': { 'field_name': 'InstanceId', 'style': 'form', 'explode': True }})
    r"""The ID of the instance that you are modifying."""  
    version: GETModifyInstancePlacementVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    affinity: Optional[GETModifyInstancePlacementAffinityEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Affinity', 'style': 'form', 'explode': True }})
    r"""The affinity setting for the instance."""  
    group_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'GroupId', 'style': 'form', 'explode': True }})
    r"""The Group Id of a placement group. You must specify the Placement Group <b>Group Id</b> to launch an instance in a shared placement group."""  
    group_name: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'GroupName', 'style': 'form', 'explode': True }})
    r"""<p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string (\\"\\").</p>"""  
    host_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HostId', 'style': 'form', 'explode': True }})
    r"""The ID of the Dedicated Host with which to associate the instance."""  
    host_resource_group_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HostResourceGroupArn', 'style': 'form', 'explode': True }})
    r"""The ARN of the host resource group in which to place the instance."""  
    partition_number: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'PartitionNumber', 'style': 'form', 'explode': True }})
    r"""The number of the partition in which to place the instance. Valid only if the placement group strategy is set to <code>partition</code>."""  
    tenancy: Optional[GETModifyInstancePlacementTenancyEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'Tenancy', 'style': 'form', 'explode': True }})
    r"""<p>The tenancy for the instance.</p> <note> <p>For T3 instances, you can't change the tenancy from <code>dedicated</code> to <code>host</code>, or from <code>host</code> to <code>dedicated</code>. Attempting to make one of these unsupported tenancy changes results in the <code>InvalidTenancy</code> error code.</p> </note>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETModifyInstancePlacementResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    