"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Members:
    r"""With these endpoints you can manage your Members.
    
    <a href=\"https://configcat.com/docs/advanced/team-collaboration\" target=\"_blank\" rel=\"noopener noreferrer\">Here</a> you can read more about Team Collaboration.
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_member_to_group(self, request: operations.AddMemberToGroupRequest) -> operations.AddMemberToGroupResponse:
        r"""Update Member Permissions
        This endpoint adds a Member identified by the `userId` to one or more Permission Groups. 
        This endpoint can also be used to move a Member between Permission Groups within a Product.
        Only a single Permission Group can be set per Product.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddMemberToGroupRequest, base_url, '/v1/organizations/{organizationId}/members/{userId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_user_to_group_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddMemberToGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_organization_member(self, request: operations.DeleteOrganizationMemberRequest) -> operations.DeleteOrganizationMemberResponse:
        r"""Delete Member from Organization
        This endpoint removes a Member identified by the `userId` from the 
        given Organization identified by the `organizationId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteOrganizationMemberRequest, base_url, '/v1/organizations/{organizationId}/members/{userId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteOrganizationMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_product_member(self, request: operations.DeleteProductMemberRequest) -> operations.DeleteProductMemberResponse:
        r"""Delete Member from Product
        This endpoint removes a Member identified by the `userId` from the 
        given Product identified by the `productId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductMemberRequest, base_url, '/v1/products/{productId}/members/{userId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_organization_members(self, request: operations.GetOrganizationMembersRequest) -> operations.GetOrganizationMembersResponse:
        r"""List Organization Members
        This endpoint returns the list of Members that belongs 
        to the given Organization, identified by the `organizationId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetOrganizationMembersRequest, base_url, '/v1/organizations/{organizationId}/members', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetOrganizationMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserModel]])
                res.user_models = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.UserModel]])
                res.user_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_product_members(self, request: operations.GetProductMembersRequest) -> operations.GetProductMembersResponse:
        r"""List Product Members
        This endpoint returns the list of Members that belongs 
        to the given Product, identified by the `productId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetProductMembersRequest, base_url, '/v1/products/{productId}/members', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProductMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MemberModel]])
                res.member_models = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.MemberModel]])
                res.member_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def invite_member(self, request: operations.InviteMemberRequest) -> operations.InviteMemberResponse:
        r"""Invite Member
        This endpoint invites a Member into the given Product identified by the `productId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.InviteMemberRequest, base_url, '/v1/products/{productId}/members/invite', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "invite_members_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InviteMemberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    