"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import apikeyautomatedtopup as shared_apikeyautomatedtopup
from ..shared import apikeycurrentpurchase as shared_apikeycurrentpurchase
from ..shared import apikeydailylimit as shared_apikeydailylimit
from ..shared import apikeydatasets as shared_apikeydatasets
from ..shared import apikeyindividuallimit as shared_apikeyindividuallimit
from ..shared import apikeynotifications as shared_apikeynotifications
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class APIKeyDetails:
    
    allowed_urls: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('allowed_urls') }})
    r"""A list of allowed URLs. An empty list means that allowed URLs are disabled."""  
    automated_topups: shared_apikeyautomatedtopup.APIKeyAutomatedTopup = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('automated_topups') }})
    r"""Automated topup status"""  
    current_purchases: list[shared_apikeycurrentpurchase.APIKeyCurrentPurchase] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('current_purchases') }})
    r"""Current balance purchases attached to key."""  
    daily_limit: shared_apikeydailylimit.APIKeyDailyLimit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('daily_limit') }})  
    individual_limit: shared_apikeyindividuallimit.APIKeyIndividualLimit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('individual_limit') }})  
    lookups_remaining: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lookups_remaining') }})  
    datasets: Optional[shared_apikeydatasets.APIKeyDatasets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('datasets'), 'exclude': lambda f: f is None }})
    r"""Indicates which datasets are available and added by default to the address responses"""  
    notifications: Optional[shared_apikeynotifications.APIKeyNotifications] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notifications'), 'exclude': lambda f: f is None }})  
    