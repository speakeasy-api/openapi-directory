/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetChannelsSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class GetChannelsRequest extends SpeakeasyBase {
  /**
   * The next page token is used to paginate through large result sets. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=next_page_token",
  })
  nextPageToken?: string;

  /**
   * The number of records returned from a single API call.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=page_size",
  })
  pageSize?: number;

  /**
   * Unique identifier of the user.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

export class GetChannels200ApplicationXMLChannelsChannelsSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  allowToAddExternalUsers?: number;

  @SpeakeasyMetadata()
  newMembersCanSeePreviousMessagesFiles?: boolean;

  @SpeakeasyMetadata()
  postingPermissions?: number;
}

export class GetChannels200ApplicationXMLChannels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  channelsSettings?: GetChannels200ApplicationXMLChannelsChannelsSettings;

  /**
   * Channel ID: Unique identifier of the Channel.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Name of the channel.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Type of the channel. The value can be one of the following:<br>
   *
   * @remarks
   * `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
   * `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
   * `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
   * `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
   * `5`: **Public channel**, similar to above, except members can invite members of other accounts.
   */
  @SpeakeasyMetadata()
  type?: number;
}

/**
 * **Status Code**: `200` <br>
 *
 * @remarks
 * User's channels returned.
 */
export class GetChannels200ApplicationXML extends SpeakeasyBase {
  /**
   * Chat Channel object(s).
   */
  @SpeakeasyMetadata({ elemType: GetChannels200ApplicationXMLChannels })
  channels?: GetChannels200ApplicationXMLChannels[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  nextPageToken?: string;

  /**
   * The number of records returned with a single API call.
   *
   * @remarks
   * Default value: 30.
   */
  @SpeakeasyMetadata()
  pageSize?: number;

  /**
   * The total number of records found.
   */
  @SpeakeasyMetadata()
  totalRecords?: number;
}

export class GetChannels200ApplicationJSONChannelsChannelsSettings extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allow_to_add_external_users" })
  allowToAddExternalUsers?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "new_members_can_see_previous_messages_files" })
  newMembersCanSeePreviousMessagesFiles?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "posting_permissions" })
  postingPermissions?: number;
}

export class GetChannels200ApplicationJSONChannels extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "channels_settings" })
  @Type(() => GetChannels200ApplicationJSONChannelsChannelsSettings)
  channelsSettings?: GetChannels200ApplicationJSONChannelsChannelsSettings;

  /**
   * Channel ID: Unique identifier of the Channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Type of the channel. The value can be one of the following:<br>
   *
   * @remarks
   * `1`: **Private channel.** In this type of channel, members must be invited to join a channel.<br>
   * `2`: **Private channel with users that belong to the same Zoom account**. Members in this channel should be invited and the members should be from the same organization.<br>
   * `3`: **Public channel.** Anyone can search for this channel and join the channel. External members cannot be invited.<br>
   * `4`: **New chat**. This is an instant channel which can be created by adding members to a new chat.<br>
   * `5`: **Public channel**, similar to above, except members can invite members of other accounts.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: number;
}

/**
 * **Status Code**: `200` <br>
 *
 * @remarks
 * User's channels returned.
 */
export class GetChannels200ApplicationJSON extends SpeakeasyBase {
  /**
   * Chat Channel object(s).
   */
  @SpeakeasyMetadata({ elemType: GetChannels200ApplicationJSONChannels })
  @Expose({ name: "channels" })
  @Type(() => GetChannels200ApplicationJSONChannels)
  channels?: GetChannels200ApplicationJSONChannels[];

  /**
   * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page_token" })
  nextPageToken?: string;

  /**
   * The number of records returned with a single API call.
   *
   * @remarks
   * Default value: 30.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  /**
   * The total number of records found.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_records" })
  totalRecords?: number;
}

export class GetChannelsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **Status Code**: `200` <br>
   *
   * @remarks
   * User's channels returned.
   */
  @SpeakeasyMetadata()
  getChannels200ApplicationJSONObject?: GetChannels200ApplicationJSON;
}
