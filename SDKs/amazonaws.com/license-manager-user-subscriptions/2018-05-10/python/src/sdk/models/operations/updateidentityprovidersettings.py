"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import activedirectoryidentityprovider as shared_activedirectoryidentityprovider
from ..shared import updateidentityprovidersettingsresponse as shared_updateidentityprovidersettingsresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIdentityProviderSettingsRequestBodyIdentityProvider:
    r"""Details about an identity provider."""
    
    active_directory_identity_provider: Optional[shared_activedirectoryidentityprovider.ActiveDirectoryIdentityProvider] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ActiveDirectoryIdentityProvider'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIdentityProviderSettingsRequestBodyUpdateSettings:
    r"""Updates the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints."""
    
    add_subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AddSubnets'), 'exclude': lambda f: f is None }})  
    remove_subnets: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemoveSubnets'), 'exclude': lambda f: f is None }})  
    security_group_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecurityGroupId'), 'exclude': lambda f: f is None }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateIdentityProviderSettingsRequestBody:
    
    identity_provider: UpdateIdentityProviderSettingsRequestBodyIdentityProvider = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IdentityProvider') }})
    r"""Details about an identity provider."""  
    product: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Product') }})
    r"""The name of the user-based subscription product."""  
    update_settings: UpdateIdentityProviderSettingsRequestBodyUpdateSettings = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UpdateSettings') }})
    r"""Updates the registered identity provider’s product related configuration settings such as the subnets to provision VPC endpoints."""  
    

@dataclasses.dataclass
class UpdateIdentityProviderSettingsRequest:
    
    request_body: UpdateIdentityProviderSettingsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateIdentityProviderSettingsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    update_identity_provider_settings_response: Optional[shared_updateidentityprovidersettingsresponse.UpdateIdentityProviderSettingsResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    