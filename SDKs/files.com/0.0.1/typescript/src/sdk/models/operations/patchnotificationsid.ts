/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class PatchNotificationsIdRequestBody extends SpeakeasyBase {
  /**
   * Custom message to include in notification emails.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=message" })
  message?: string;

  /**
   * If `true`, copying or moving resources into this path will trigger a notification, in addition to just uploads.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_on_copy" })
  notifyOnCopy?: boolean;

  /**
   * Triggers notification when deleting files from this path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_on_delete" })
  notifyOnDelete?: boolean;

  /**
   * Triggers notification when downloading files from this path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_on_download" })
  notifyOnDownload?: boolean;

  /**
   * Triggers notification when moving files to this path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_on_move" })
  notifyOnMove?: boolean;

  /**
   * Triggers notification when uploading new files to this path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_on_upload" })
  notifyOnUpload?: boolean;

  /**
   * If `true` actions initiated by the user will still result in a notification
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=notify_user_actions" })
  notifyUserActions?: boolean;

  /**
   * If `true`, enable notifications for each subfolder in this path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=recursive" })
  recursive?: boolean;

  /**
   * The time interval that notifications are aggregated by.  Can be `five_minutes`, `fifteen_minutes`, `hourly`, or `daily`.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=send_interval" })
  sendInterval?: string;

  /**
   * Notify when actions are performed by a share recipient?
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=trigger_by_share_recipients",
  })
  triggerByShareRecipients?: boolean;

  /**
   * Array of filenames (possibly with wildcards) to match for action path
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=triggering_filenames" })
  triggeringFilenames?: string[];

  /**
   * Only notify on actions made by a member of one of the specified groups
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=triggering_group_ids" })
  triggeringGroupIds?: number[];

  /**
   * Only notify on actions made one of the specified users
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=triggering_user_ids" })
  triggeringUserIds?: number[];
}

export class PatchNotificationsIdRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=multipart/form-data" })
  requestBody?: PatchNotificationsIdRequestBody;

  /**
   * Notification ID.
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

export class PatchNotificationsIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * The Notifications object.
   */
  @SpeakeasyMetadata()
  notificationEntity?: shared.NotificationEntity;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
