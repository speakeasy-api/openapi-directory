// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"time"
)

// GitCreateTagRequestBodyTagger - An object with information about the individual creating the tag.
type GitCreateTagRequestBodyTagger struct {
	// When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
	Date *time.Time `json:"date,omitempty"`
	// The email of the author of the tag
	Email string `json:"email"`
	// The name of the author of the tag
	Name string `json:"name"`
}

// GitCreateTagRequestBodyTypeEnum - The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
type GitCreateTagRequestBodyTypeEnum string

const (
	GitCreateTagRequestBodyTypeEnumCommit GitCreateTagRequestBodyTypeEnum = "commit"
	GitCreateTagRequestBodyTypeEnumTree   GitCreateTagRequestBodyTypeEnum = "tree"
	GitCreateTagRequestBodyTypeEnumBlob   GitCreateTagRequestBodyTypeEnum = "blob"
)

func (e GitCreateTagRequestBodyTypeEnum) ToPointer() *GitCreateTagRequestBodyTypeEnum {
	return &e
}

func (e *GitCreateTagRequestBodyTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "commit":
		fallthrough
	case "tree":
		fallthrough
	case "blob":
		*e = GitCreateTagRequestBodyTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitCreateTagRequestBodyTypeEnum: %v", v)
	}
}

type GitCreateTagRequestBody struct {
	// The tag message.
	Message string `json:"message"`
	// The SHA of the git object this is tagging.
	Object string `json:"object"`
	// The tag's name. This is typically a version (e.g., "v0.0.1").
	Tag string `json:"tag"`
	// An object with information about the individual creating the tag.
	Tagger *GitCreateTagRequestBodyTagger `json:"tagger,omitempty"`
	// The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
	Type GitCreateTagRequestBodyTypeEnum `json:"type"`
}

type GitCreateTagRequest struct {
	RequestBody GitCreateTagRequestBody `request:"mediaType=application/json"`
	// The account owner of the repository. The name is not case sensitive.
	Owner string `pathParam:"style=simple,explode=false,name=owner"`
	// The name of the repository. The name is not case sensitive.
	Repo string `pathParam:"style=simple,explode=false,name=repo"`
}

type GitCreateTagResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Response
	GitTag *shared.GitTag
	// Validation failed, or the endpoint has been spammed.
	ValidationError *shared.ValidationError
}
