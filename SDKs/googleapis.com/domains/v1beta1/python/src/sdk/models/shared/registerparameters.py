"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import money as shared_money
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class RegisterParametersAvailabilityEnum(str, Enum):
    r"""Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`."""
    AVAILABILITY_UNSPECIFIED = 'AVAILABILITY_UNSPECIFIED'
    AVAILABLE = 'AVAILABLE'
    UNAVAILABLE = 'UNAVAILABLE'
    UNSUPPORTED = 'UNSUPPORTED'
    UNKNOWN = 'UNKNOWN'

class RegisterParametersDomainNoticesEnum(str, Enum):
    DOMAIN_NOTICE_UNSPECIFIED = 'DOMAIN_NOTICE_UNSPECIFIED'
    HSTS_PRELOADED = 'HSTS_PRELOADED'

class RegisterParametersSupportedPrivacyEnum(str, Enum):
    CONTACT_PRIVACY_UNSPECIFIED = 'CONTACT_PRIVACY_UNSPECIFIED'
    PUBLIC_CONTACT_DATA = 'PUBLIC_CONTACT_DATA'
    PRIVATE_CONTACT_DATA = 'PRIVATE_CONTACT_DATA'
    REDACTED_CONTACT_DATA = 'REDACTED_CONTACT_DATA'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegisterParameters:
    r"""Parameters required to register a new domain."""
    
    availability: Optional[RegisterParametersAvailabilityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('availability'), 'exclude': lambda f: f is None }})
    r"""Indicates whether the domain is available for registration. This value is accurate when obtained by calling `RetrieveRegisterParameters`, but is approximate when obtained by calling `SearchDomains`."""  
    domain_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainName'), 'exclude': lambda f: f is None }})
    r"""The domain name. Unicode domain names are expressed in Punycode format."""  
    domain_notices: Optional[list[RegisterParametersDomainNoticesEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domainNotices'), 'exclude': lambda f: f is None }})
    r"""Notices about special properties of the domain."""  
    supported_privacy: Optional[list[RegisterParametersSupportedPrivacyEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('supportedPrivacy'), 'exclude': lambda f: f is None }})
    r"""Contact privacy options that the domain supports."""  
    yearly_price: Optional[shared_money.Money] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('yearlyPrice'), 'exclude': lambda f: f is None }})
    r"""Represents an amount of money with its currency type."""  
    