"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import album as shared_album
from ..shared import artist as shared_artist
from ..shared import audioassets as shared_audioassets
from ..shared import contributor as shared_contributor
from ..shared import modelrelease as shared_modelrelease
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Audio:
    r"""Audio metadata"""
    
    contributor: shared_contributor.Contributor = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('contributor') }})
    r"""Information about a contributor"""  
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Shutterstock ID of this track"""  
    media_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('media_type') }})
    r"""Media type of this track; should always be \\"audio\\" """  
    added_date: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('added_date'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Date this track was added to the Shutterstock library"""  
    affiliate_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('affiliate_url'), 'exclude': lambda f: f is None }})
    r"""Affiliate referral link; appears only for registered affiliate partners"""  
    album: Optional[shared_album.Album] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('album'), 'exclude': lambda f: f is None }})
    r"""Album metadata"""  
    artists: Optional[list[shared_artist.Artist]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('artists'), 'exclude': lambda f: f is None }})
    r"""List of artists"""  
    assets: Optional[shared_audioassets.AudioAssets] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assets'), 'exclude': lambda f: f is None }})
    r"""Files that are available as part of an audio asset"""  
    bpm: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bpm'), 'exclude': lambda f: f is None }})
    r"""BPM (beats per minute) of this track"""  
    deleted_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deleted_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Description of this track"""  
    duration: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('duration'), 'exclude': lambda f: f is None }})
    r"""Duration of this track in seconds"""  
    genres: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('genres'), 'exclude': lambda f: f is None }})
    r"""List of all genres for this track"""  
    instruments: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instruments'), 'exclude': lambda f: f is None }})
    r"""List of all instruments that appear in this track"""  
    is_adult: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_adult'), 'exclude': lambda f: f is None }})
    r"""Whether or not this track contains adult content"""  
    is_instrumental: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_instrumental'), 'exclude': lambda f: f is None }})
    r"""Whether or not this track is purely instrumental (lacking lyrics)"""  
    isrc: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isrc'), 'exclude': lambda f: f is None }})  
    keywords: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('keywords'), 'exclude': lambda f: f is None }})
    r"""List of all keywords for this track"""  
    language: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language'), 'exclude': lambda f: f is None }})
    r"""Language of this track's lyrics"""  
    lyrics: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lyrics'), 'exclude': lambda f: f is None }})
    r"""Lyrics of this track"""  
    model_releases: Optional[list[shared_modelrelease.ModelRelease]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model_releases'), 'exclude': lambda f: f is None }})
    r"""List of all model releases for this track"""  
    moods: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moods'), 'exclude': lambda f: f is None }})
    r"""List of all moods of this track"""  
    published_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('published_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this track was published"""  
    recording_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recording_version'), 'exclude': lambda f: f is None }})
    r"""Recording version of this track"""  
    releases: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('releases'), 'exclude': lambda f: f is None }})
    r"""List of all releases of this track"""  
    similar_artists: Optional[list[shared_artist.Artist]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('similar_artists'), 'exclude': lambda f: f is None }})
    r"""List of all similar artists of this track"""  
    submitted_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('submitted_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this track was submitted"""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title of this track"""  
    updated_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_time'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Time this track was last updated"""  
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})  
    vocal_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vocal_description'), 'exclude': lambda f: f is None }})
    r"""Vocal description of this track"""  
    