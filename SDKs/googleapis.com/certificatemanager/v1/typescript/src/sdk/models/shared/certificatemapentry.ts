/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * A predefined matcher for particular cases, other than SNI selection.
 */
export enum CertificateMapEntryMatcherEnum {
  MatcherUnspecified = "MATCHER_UNSPECIFIED",
  Primary = "PRIMARY",
}

/**
 * Output only. A serving state of this Certificate Map Entry.
 */
export enum CertificateMapEntryStateEnum {
  ServingStateUnspecified = "SERVING_STATE_UNSPECIFIED",
  Active = "ACTIVE",
  Pending = "PENDING",
}

/**
 * Defines a certificate map entry.
 */
export class CertificateMapEntry extends SpeakeasyBase {
  /**
   * A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/* /locations/* /certificates/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificates" })
  certificates?: string[];

  /**
   * Output only. The creation timestamp of a Certificate Map Entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "createTime" })
  createTime?: string;

  /**
   * One or more paragraphs of text description of a certificate map entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname?: string;

  /**
   * Set of labels associated with a Certificate Map Entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: CertificateMapEntryMatcherEnum;

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Output only. A serving state of this Certificate Map Entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: CertificateMapEntryStateEnum;

  /**
   * Output only. The update timestamp of a Certificate Map Entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updateTime" })
  updateTime?: string;
}

/**
 * Defines a certificate map entry.
 */
export class CertificateMapEntryInput extends SpeakeasyBase {
  /**
   * A set of Certificates defines for the given `hostname`. There can be defined up to four certificates in each Certificate Map Entry. Each certificate must match pattern `projects/* /locations/* /certificates/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificates" })
  certificates?: string[];

  /**
   * One or more paragraphs of text description of a certificate map entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression (`*.example.com`) for a set of hostnames with common suffix. Used as Server Name Indication (SNI) for selecting a proper certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hostname" })
  hostname?: string;

  /**
   * Set of labels associated with a Certificate Map Entry.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels?: Record<string, string>;

  /**
   * A predefined matcher for particular cases, other than SNI selection.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "matcher" })
  matcher?: CertificateMapEntryMatcherEnum;

  /**
   * A user-defined name of the Certificate Map Entry. Certificate Map Entry names must be unique globally and match pattern `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}
