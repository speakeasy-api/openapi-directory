// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

// GetServersIDMetricsTypeEnum - Type of metrics to get
type GetServersIDMetricsTypeEnum string

const (
	GetServersIDMetricsTypeEnumCPU     GetServersIDMetricsTypeEnum = "cpu"
	GetServersIDMetricsTypeEnumDisk    GetServersIDMetricsTypeEnum = "disk"
	GetServersIDMetricsTypeEnumNetwork GetServersIDMetricsTypeEnum = "network"
)

func (e GetServersIDMetricsTypeEnum) ToPointer() *GetServersIDMetricsTypeEnum {
	return &e
}

func (e *GetServersIDMetricsTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cpu":
		fallthrough
	case "disk":
		fallthrough
	case "network":
		*e = GetServersIDMetricsTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetServersIDMetricsTypeEnum: %v", v)
	}
}

type GetServersIDMetricsRequest struct {
	// End of period to get Metrics for (in ISO-8601 format)
	End string `queryParam:"style=form,explode=true,name=end"`
	// ID of the Server
	ID int64 `pathParam:"style=simple,explode=false,name=id"`
	// Start of period to get Metrics for (in ISO-8601 format)
	Start string `queryParam:"style=form,explode=true,name=start"`
	// Resolution of results in seconds
	Step *string `queryParam:"style=form,explode=true,name=step"`
	// Type of metrics to get
	Type GetServersIDMetricsTypeEnum `queryParam:"style=form,explode=true,name=type"`
}

type GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesType string

const (
	GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeNumber GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesType = "number"
	GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeStr    GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesType = "str"
)

type GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues struct {
	Number *float64
	Str    *string

	Type GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesType
}

func CreateGetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesNumber(number float64) GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues {
	typ := GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeNumber

	return GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesStr(str string) GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues {
	typ := GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeStr

	return GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues{
		Str:  &str,
		Type: typ,
	}
}

func (u *GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	number := new(float64)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&number); err == nil {
		u.Number = number
		u.Type = GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeNumber
		return nil
	}

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValuesTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return json.Marshal(u.Number)
	}

	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	return nil, nil
}

type GetServersIDMetrics200ApplicationJSONMetricsTimeSeries struct {
	// Metrics Timestamps with values
	Values [][]GetServersIDMetrics200ApplicationJSONMetricsTimeSeriesValues `json:"values"`
}

type GetServersIDMetrics200ApplicationJSONMetrics struct {
	// End of period of metrics reported (in ISO-8601 format)
	End string `json:"end"`
	// Start of period of metrics reported (in ISO-8601 format)
	Start string `json:"start"`
	// Resolution of results in seconds.
	Step float64 `json:"step"`
	// Hash with timeseries information, containing the name of timeseries as key
	TimeSeries map[string]GetServersIDMetrics200ApplicationJSONMetricsTimeSeries `json:"time_series"`
}

// GetServersIDMetrics200ApplicationJSON - The `metrics` key in the reply contains a metrics object with this structure
type GetServersIDMetrics200ApplicationJSON struct {
	Metrics GetServersIDMetrics200ApplicationJSONMetrics `json:"metrics"`
}

type GetServersIDMetricsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// The `metrics` key in the reply contains a metrics object with this structure
	GetServersIDMetrics200ApplicationJSONObject *GetServersIDMetrics200ApplicationJSON
}
