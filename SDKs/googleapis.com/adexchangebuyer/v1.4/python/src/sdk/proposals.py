"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Proposals:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def adexchangebuyer_proposals_get(self, request: operations.AdexchangebuyerProposalsGetRequest, security: operations.AdexchangebuyerProposalsGetSecurity) -> operations.AdexchangebuyerProposalsGetResponse:
        r"""Get a proposal given its id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerProposalsGetRequest, base_url, '/proposals/{proposalId}', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Proposal])
                res.proposal = out

        return res

    def adexchangebuyer_proposals_insert(self, request: operations.AdexchangebuyerProposalsInsertRequest, security: operations.AdexchangebuyerProposalsInsertSecurity) -> operations.AdexchangebuyerProposalsInsertResponse:
        r"""Create the given list of proposals"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/proposals/insert'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_orders_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CreateOrdersResponse])
                res.create_orders_response = out

        return res

    def adexchangebuyer_proposals_patch(self, request: operations.AdexchangebuyerProposalsPatchRequest, security: operations.AdexchangebuyerProposalsPatchSecurity) -> operations.AdexchangebuyerProposalsPatchResponse:
        r"""Update the given proposal. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerProposalsPatchRequest, base_url, '/proposals/{proposalId}/{revisionNumber}/{updateAction}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "proposal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Proposal])
                res.proposal = out

        return res

    def adexchangebuyer_proposals_search(self, request: operations.AdexchangebuyerProposalsSearchRequest, security: operations.AdexchangebuyerProposalsSearchSecurity) -> operations.AdexchangebuyerProposalsSearchResponse:
        r"""Search for proposals using pql query"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/proposals/search'
        
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsSearchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetOrdersResponse])
                res.get_orders_response = out

        return res

    def adexchangebuyer_proposals_setupcomplete(self, request: operations.AdexchangebuyerProposalsSetupcompleteRequest, security: operations.AdexchangebuyerProposalsSetupcompleteSecurity) -> operations.AdexchangebuyerProposalsSetupcompleteResponse:
        r"""Update the given proposal to indicate that setup has been completed."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerProposalsSetupcompleteRequest, base_url, '/proposals/{proposalId}/setupcomplete', request)
        
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsSetupcompleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsSetupcompleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def adexchangebuyer_proposals_update(self, request: operations.AdexchangebuyerProposalsUpdateRequest, security: operations.AdexchangebuyerProposalsUpdateSecurity) -> operations.AdexchangebuyerProposalsUpdateResponse:
        r"""Update the given proposal"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AdexchangebuyerProposalsUpdateRequest, base_url, '/proposals/{proposalId}/{revisionNumber}/{updateAction}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "proposal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.AdexchangebuyerProposalsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AdexchangebuyerProposalsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Proposal])
                res.proposal = out

        return res

    