// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CallFinalCallResultEnum - Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
type CallFinalCallResultEnum string

const (
	CallFinalCallResultEnumLa               CallFinalCallResultEnum = "LA"
	CallFinalCallResultEnumAm               CallFinalCallResultEnum = "AM"
	CallFinalCallResultEnumBusy             CallFinalCallResultEnum = "BUSY"
	CallFinalCallResultEnumDnc              CallFinalCallResultEnum = "DNC"
	CallFinalCallResultEnumXfer             CallFinalCallResultEnum = "XFER"
	CallFinalCallResultEnumNoAns            CallFinalCallResultEnum = "NO_ANS"
	CallFinalCallResultEnumXferLeg          CallFinalCallResultEnum = "XFER_LEG"
	CallFinalCallResultEnumInternalError    CallFinalCallResultEnum = "INTERNAL_ERROR"
	CallFinalCallResultEnumCarrierError     CallFinalCallResultEnum = "CARRIER_ERROR"
	CallFinalCallResultEnumCarrierTempError CallFinalCallResultEnum = "CARRIER_TEMP_ERROR"
	CallFinalCallResultEnumUndialed         CallFinalCallResultEnum = "UNDIALED"
	CallFinalCallResultEnumSd               CallFinalCallResultEnum = "SD"
	CallFinalCallResultEnumPostponed        CallFinalCallResultEnum = "POSTPONED"
	CallFinalCallResultEnumAbandoned        CallFinalCallResultEnum = "ABANDONED"
	CallFinalCallResultEnumSkipped          CallFinalCallResultEnum = "SKIPPED"
)

func (e CallFinalCallResultEnum) ToPointer() *CallFinalCallResultEnum {
	return &e
}

func (e *CallFinalCallResultEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LA":
		fallthrough
	case "AM":
		fallthrough
	case "BUSY":
		fallthrough
	case "DNC":
		fallthrough
	case "XFER":
		fallthrough
	case "NO_ANS":
		fallthrough
	case "XFER_LEG":
		fallthrough
	case "INTERNAL_ERROR":
		fallthrough
	case "CARRIER_ERROR":
		fallthrough
	case "CARRIER_TEMP_ERROR":
		fallthrough
	case "UNDIALED":
		fallthrough
	case "SD":
		fallthrough
	case "POSTPONED":
		fallthrough
	case "ABANDONED":
		fallthrough
	case "SKIPPED":
		*e = CallFinalCallResultEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CallFinalCallResultEnum: %v", v)
	}
}

// CallStateEnum - State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
type CallStateEnum string

const (
	CallStateEnumReady            CallStateEnum = "READY"
	CallStateEnumSelected         CallStateEnum = "SELECTED"
	CallStateEnumCallback         CallStateEnum = "CALLBACK"
	CallStateEnumFinished         CallStateEnum = "FINISHED"
	CallStateEnumDisabled         CallStateEnum = "DISABLED"
	CallStateEnumSkipped          CallStateEnum = "SKIPPED"
	CallStateEnumDnc              CallStateEnum = "DNC"
	CallStateEnumDup              CallStateEnum = "DUP"
	CallStateEnumInvalid          CallStateEnum = "INVALID"
	CallStateEnumTimeout          CallStateEnum = "TIMEOUT"
	CallStateEnumPeriodLimit      CallStateEnum = "PERIOD_LIMIT"
	CallStateEnumRestrictedNumber CallStateEnum = "RESTRICTED_NUMBER"
)

func (e CallStateEnum) ToPointer() *CallStateEnum {
	return &e
}

func (e *CallStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "READY":
		fallthrough
	case "SELECTED":
		fallthrough
	case "CALLBACK":
		fallthrough
	case "FINISHED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "DNC":
		fallthrough
	case "DUP":
		fallthrough
	case "INVALID":
		fallthrough
	case "TIMEOUT":
		fallthrough
	case "PERIOD_LIMIT":
		fallthrough
	case "RESTRICTED_NUMBER":
		*e = CallStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CallStateEnum: %v", v)
	}
}

// Call - Represents a call action sent or received by CallFire platform
type Call struct {
	// An internal call to an agent
	AgentCall *bool `json:"agentCall,omitempty"`
	// Map of user-defined string attributes associated with an action
	Attributes map[string]string `json:"attributes,omitempty"`
	// An id of contact batch associated with an action
	BatchID *int64 `json:"batchId,omitempty"`
	// An id of broadcast associated with an action if call is sent as part of call broadcast
	CampaignID *int64 `json:"campaignId,omitempty"`
	// Represents a contact in CallFire platform. Contains info about the people you want to contact. It allows you to store a user-defined properties for each contact
	Contact *Contact `json:"contact,omitempty"`
	// The time when the given resource was created, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	Created *int64 `json:"created,omitempty"`
	// Result of a call (LA, AM, BUSY, DNC, XFER, NO_ANS, XFER_LEG, INTERNAL_ERROR, CARRIER_ERROR, CARRIER_TEMP_ERROR, UNDIALED, SD, POSTPONED, ABANDONED, SKIPPED). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
	FinalCallResult *CallFinalCallResultEnum `json:"finalCallResult,omitempty"`
	// A sender's phone number in E.164 (11-digit) format
	FromNumber *string `json:"fromNumber,omitempty"`
	// An id of  an action
	ID *int64 `json:"id,omitempty"`
	// Is action inbound
	Inbound *bool `json:"inbound,omitempty"`
	// Labels associated with action or broadcast for this action
	Labels []string `json:"labels,omitempty"`
	// The time when the given resource was modified, formatted in unix time milliseconds (read only). Example: 1473781817000 for Sat, 05 Jan 1985 14:03:37 GMT
	Modified *int64 `json:"modified,omitempty"`
	// Notes of call added by an agent
	Notes []Note `json:"notes,omitempty"`
	// List of call records, each record contains call details like originate time, duration, cost, notes made by agents. A single contact may have a multiple phone numbers. In this case if given call was sent as a part of broadcast with configured retry logic then each call record will contain details about attempted phone number
	Records []CallRecord `json:"records,omitempty"`
	// State of an action (READY, SELECTED, CALLBACK, DISABLED, FINISHED, DNC, DUP, INVALID, TIMEOUT, PERIOD_LIMIT). See [call states and results](https://developers.callfire.com/results-responses-errors.html)
	State *CallStateEnum `json:"state,omitempty"`
	// A recipient's phone number in E.164 (11-digit) format
	ToNumber *string `json:"toNumber,omitempty"`
}
