/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
 *
 * @remarks
 *
 */
export enum GetNameConceptTypeSpecificConceptJsonConceptTypeEnum {
  NytdGeo = "nytd_geo",
  NytdPer = "nytd_per",
  NytdOrg = "nytd_org",
  NytdDes = "nytd_des",
}

/**
 * "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
 *
 * @remarks
 *
 * Optional fields are returned in result_set. They are briefly explained here:
 *
 * pages: A list of topic pages associated with a specific concept.
 * ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
 * links: A list of links from this concept to external data resources.
 * taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
 * combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
 * geocodes: For geographic concepts, the full GIS record from geonames.
 * article_list: A list of up to 10 articles associated with this concept.
 * scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
 * search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
 *
 */
export enum GetNameConceptTypeSpecificConceptJsonFieldsEnum {
  All = "all",
  Pages = "pages",
  TickerSymbol = "ticker_symbol",
  Links = "links",
  Taxonomy = "taxonomy",
  Combinations = "combinations",
  Geocodes = "geocodes",
  ArticleList = "article_list",
  ScopeNotes = "scope_notes",
  SearchApiQuery = "search_api_query",
}

export class GetNameConceptTypeSpecificConceptJsonRequest extends SpeakeasyBase {
  /**
   * The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=concept-type",
  })
  conceptType: GetNameConceptTypeSpecificConceptJsonConceptTypeEnum;

  /**
   * "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
   *
   * @remarks
   *
   * Optional fields are returned in result_set. They are briefly explained here:
   *
   * pages: A list of topic pages associated with a specific concept.
   * ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
   * links: A list of links from this concept to external data resources.
   * taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
   * combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
   * geocodes: For geographic concepts, the full GIS record from geonames.
   * article_list: A list of up to 10 articles associated with this concept.
   * scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
   * search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=fields",
  })
  fields?: GetNameConceptTypeSpecificConceptJsonFieldsEnum;

  /**
   * Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=query" })
  query: string;

  /**
   * The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding ".json" like with "Baseball.json".
   *
   * @remarks
   *
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=specific-concept",
  })
  specificConcept: string;
}

/**
 * An array of Concepts
 */
export class GetNameConceptTypeSpecificConceptJson200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "copyright" })
  copyright?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "num_results" })
  numResults?: number;

  @SpeakeasyMetadata({ elemType: shared.Concept })
  @Expose({ name: "results" })
  @Type(() => shared.Concept)
  results?: shared.Concept[];

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;
}

export class GetNameConceptTypeSpecificConceptJsonResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * An array of Concepts
   */
  @SpeakeasyMetadata()
  getNameConceptTypeSpecificConceptJSON200ApplicationJSONObject?: GetNameConceptTypeSpecificConceptJson200ApplicationJSON;
}
