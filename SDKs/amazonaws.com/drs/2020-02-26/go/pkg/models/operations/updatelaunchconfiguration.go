// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum - The state of the Recovery Instance in EC2 after the recovery operation.
type UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum string

const (
	UpdateLaunchConfigurationRequestBodyLaunchDispositionEnumStopped UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum = "STOPPED"
	UpdateLaunchConfigurationRequestBodyLaunchDispositionEnumStarted UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum = "STARTED"
)

func (e UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum) ToPointer() *UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum {
	return &e
}

func (e *UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STOPPED":
		fallthrough
	case "STARTED":
		*e = UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum: %v", v)
	}
}

// UpdateLaunchConfigurationRequestBodyLicensing - Configuration of a machine's license.
type UpdateLaunchConfigurationRequestBodyLicensing struct {
	OsByol *bool `json:"osByol,omitempty"`
}

// UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum - Whether Elastic Disaster Recovery should try to automatically choose the instance type that best matches the OS, CPU, and RAM of your Source Server.
type UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum string

const (
	UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnumNone  UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum = "NONE"
	UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnumBasic UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum = "BASIC"
)

func (e UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum) ToPointer() *UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum {
	return &e
}

func (e *UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "NONE":
		fallthrough
	case "BASIC":
		*e = UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum: %v", v)
	}
}

type UpdateLaunchConfigurationRequestBody struct {
	// Whether we should copy the Private IP of the Source Server to the Recovery Instance.
	CopyPrivateIP *bool `json:"copyPrivateIp,omitempty"`
	// Whether we want to copy the tags of the Source Server to the EC2 machine of the Recovery Instance.
	CopyTags *bool `json:"copyTags,omitempty"`
	// The state of the Recovery Instance in EC2 after the recovery operation.
	LaunchDisposition *UpdateLaunchConfigurationRequestBodyLaunchDispositionEnum `json:"launchDisposition,omitempty"`
	// Configuration of a machine's license.
	Licensing *UpdateLaunchConfigurationRequestBodyLicensing `json:"licensing,omitempty"`
	// The name of the launch configuration.
	Name *string `json:"name,omitempty"`
	// The ID of the Source Server that we want to retrieve a Launch Configuration for.
	SourceServerID string `json:"sourceServerID"`
	// Whether Elastic Disaster Recovery should try to automatically choose the instance type that best matches the OS, CPU, and RAM of your Source Server.
	TargetInstanceTypeRightSizingMethod *UpdateLaunchConfigurationRequestBodyTargetInstanceTypeRightSizingMethodEnum `json:"targetInstanceTypeRightSizingMethod,omitempty"`
}

type UpdateLaunchConfigurationRequest struct {
	RequestBody       UpdateLaunchConfigurationRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                              `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                              `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                              `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                              `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                              `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                              `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                              `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type UpdateLaunchConfigurationResponse struct {
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// InternalServerException
	InternalServerException interface{}
	// Success
	LaunchConfiguration *shared.LaunchConfiguration
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
	// UninitializedAccountException
	UninitializedAccountException interface{}
	// ValidationException
	ValidationException interface{}
}
