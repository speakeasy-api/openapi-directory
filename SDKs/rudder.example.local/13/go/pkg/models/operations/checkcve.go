// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CheckCVE200ApplicationJSONActionEnum - The id of the action
type CheckCVE200ApplicationJSONActionEnum string

const (
	CheckCVE200ApplicationJSONActionEnumCheckCve CheckCVE200ApplicationJSONActionEnum = "checkCVE"
)

func (e *CheckCVE200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "checkCVE":
		*e = CheckCVE200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckCVE200ApplicationJSONActionEnum: %s", s)
	}
}

type CheckCVE200ApplicationJSONData struct {
	CveChecks []shared.CveCheck `json:"cveChecks"`
}

// CheckCVE200ApplicationJSONResultEnum - Result of the request
type CheckCVE200ApplicationJSONResultEnum string

const (
	CheckCVE200ApplicationJSONResultEnumSuccess CheckCVE200ApplicationJSONResultEnum = "success"
	CheckCVE200ApplicationJSONResultEnumError   CheckCVE200ApplicationJSONResultEnum = "error"
)

func (e *CheckCVE200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = CheckCVE200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CheckCVE200ApplicationJSONResultEnum: %s", s)
	}
}

// CheckCVE200ApplicationJSON - CVE check result
type CheckCVE200ApplicationJSON struct {
	// The id of the action
	Action CheckCVE200ApplicationJSONActionEnum `json:"action"`
	Data   CheckCVE200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result CheckCVE200ApplicationJSONResultEnum `json:"result"`
}

type CheckCVEResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// CVE check result
	CheckCVE200ApplicationJSONObject *CheckCVE200ApplicationJSON
}
