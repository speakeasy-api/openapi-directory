"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import api_core_responses_entitiesresponse_api_core_responses_entityuri_system_int64_ as shared_api_core_responses_entitiesresponse_api_core_responses_entityuri_system_int64_
from enum import Enum
from typing import Optional

class GroupsGetDatapointsSortDirectionEnum(str, Enum):
    r"""Direction of sort \\"asc\\" or \\"desc\\" """
    ASC = 'asc'
    DESC = 'desc'

class GroupsGetDatapointsStatusEnum(str, Enum):
    r"""Status of the datapoint"""
    DELETED = 'deleted'
    ACTIVE = 'active'
    PAUSED = 'paused'
    SPAM = 'spam'

class GroupsGetDatapointsTypeEnum(str, Enum):
    r"""Type of the datapoint (\\"tp\\"/\\"tl\\")"""
    TP = 'tp'
    TL = 'tl'


@dataclasses.dataclass
class GroupsGetDatapointsRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""Id of the group"""  
    created_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdAfter', 'style': 'form', 'explode': True }})
    r"""Exclude datapoints created before this date (YYYYMMDD)"""  
    created_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'createdBefore', 'style': 'form', 'explode': True }})
    r"""Exclude datapoints created after this date (YYYYMMDD)"""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Maximum elements to retrieve. Default to 20 if not specified."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Where to start when retrieving elements. Default is 0 if not specified."""  
    only_favorites: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'onlyFavorites', 'style': 'form', 'explode': True }})
    r"""Filter fields by favourite status"""  
    sort_by: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortBy', 'style': 'form', 'explode': True }})
    r"""Field to sort by"""  
    sort_direction: Optional[GroupsGetDatapointsSortDirectionEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'sortDirection', 'style': 'form', 'explode': True }})
    r"""Direction of sort \\"asc\\" or \\"desc\\" """  
    status: Optional[GroupsGetDatapointsStatusEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    r"""Status of the datapoint"""  
    tags: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': True }})
    r"""A comma separated list of tags you want to filter with."""  
    text_search: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'textSearch', 'style': 'form', 'explode': True }})
    r"""Filter fields by this pattern"""  
    type: Optional[GroupsGetDatapointsTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'type', 'style': 'form', 'explode': True }})
    r"""Type of the datapoint (\\"tp\\"/\\"tl\\")"""  
    

@dataclasses.dataclass
class GroupsGetDatapointsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    api_core_responses_entities_response_api_core_responses_entity_uri_system_int64: Optional[shared_api_core_responses_entitiesresponse_api_core_responses_entityuri_system_int64_.APICoreResponsesEntitiesResponseAPICoreResponsesEntityURISystemInt64] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    