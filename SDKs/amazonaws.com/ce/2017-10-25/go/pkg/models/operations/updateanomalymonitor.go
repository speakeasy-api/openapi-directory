// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAnomalyMonitorXAmzTargetEnum
type UpdateAnomalyMonitorXAmzTargetEnum string

const (
	UpdateAnomalyMonitorXAmzTargetEnumAwsInsightsIndexServiceUpdateAnomalyMonitor UpdateAnomalyMonitorXAmzTargetEnum = "AWSInsightsIndexService.UpdateAnomalyMonitor"
)

func (e *UpdateAnomalyMonitorXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWSInsightsIndexService.UpdateAnomalyMonitor":
		*e = UpdateAnomalyMonitorXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAnomalyMonitorXAmzTargetEnum: %s", s)
	}
}

type UpdateAnomalyMonitorRequest struct {
	UpdateAnomalyMonitorRequest shared.UpdateAnomalyMonitorRequest `request:"mediaType=application/json"`
	XAmzAlgorithm               *string                            `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256           *string                            `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential              *string                            `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                    *string                            `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken           *string                            `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature               *string                            `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders           *string                            `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                  UpdateAnomalyMonitorXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateAnomalyMonitorResponse struct {
	ContentType string
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// UnknownMonitorException
	UnknownMonitorException interface{}
	// Success
	UpdateAnomalyMonitorResponse *shared.UpdateAnomalyMonitorResponse
}
