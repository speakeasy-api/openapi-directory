// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetSecretValueXAmzTargetEnum
type GetSecretValueXAmzTargetEnum string

const (
	GetSecretValueXAmzTargetEnumSecretsmanagerGetSecretValue GetSecretValueXAmzTargetEnum = "secretsmanager.GetSecretValue"
)

func (e *GetSecretValueXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "secretsmanager.GetSecretValue":
		*e = GetSecretValueXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSecretValueXAmzTargetEnum: %s", s)
	}
}

type GetSecretValueRequest struct {
	GetSecretValueRequest shared.GetSecretValueRequest `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                      `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                      `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                      `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                      `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                      `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                      `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                      `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            GetSecretValueXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetSecretValueResponse struct {
	ContentType string
	// DecryptionFailure
	DecryptionFailure interface{}
	// Success
	GetSecretValueResponse *shared.GetSecretValueResponse
	// InternalServiceError
	InternalServiceError interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	StatusCode                int
	RawResponse               *http.Response
}
