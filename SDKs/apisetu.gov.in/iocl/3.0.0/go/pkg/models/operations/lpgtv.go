// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type LpgtvSecurity struct {
	APIKey   shared.SchemeAPIKey   `security:"scheme,type=apiKey,subtype=header"`
	ClientID shared.SchemeClientID `security:"scheme,type=apiKey,subtype=header"`
}

type LpgtvRequestBodyCertificateParameters struct {
	// Aadhaar number
	UID string `json:"UID"`
}

// LpgtvRequestBodyFormatEnum - The format of the certificate in response.
type LpgtvRequestBodyFormatEnum string

const (
	LpgtvRequestBodyFormatEnumPdf LpgtvRequestBodyFormatEnum = "pdf"
)

func (e *LpgtvRequestBodyFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pdf":
		*e = LpgtvRequestBodyFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LpgtvRequestBodyFormatEnum: %s", s)
	}
}

// LpgtvRequestBody - Request format
type LpgtvRequestBody struct {
	CertificateParameters *LpgtvRequestBodyCertificateParameters `json:"certificateParameters,omitempty"`
	ConsentArtifact       *shared.ConsentArtifactSchema          `json:"consentArtifact,omitempty"`
	// The format of the certificate in response.
	Format LpgtvRequestBodyFormatEnum `json:"format"`
	// A unique transaction id for this request in UUID format. It is used for tracking the request.
	TxnID string `json:"txnId"`
}

type LpgtvRequest struct {
	// Request format
	Request  *LpgtvRequestBody `request:"mediaType=application/json"`
	Security LpgtvSecurity
}

type Lpgtv504ApplicationJSONErrorEnum string

const (
	Lpgtv504ApplicationJSONErrorEnumGatewayTimeout Lpgtv504ApplicationJSONErrorEnum = "gateway_timeout"
)

func (e *Lpgtv504ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "gateway_timeout":
		*e = Lpgtv504ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv504ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv504ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv504ApplicationJSONErrorDescriptionEnumPublisherServiceDidNotRespondInTime Lpgtv504ApplicationJSONErrorDescriptionEnum = "Publisher service did not respond in time"
)

func (e *Lpgtv504ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service did not respond in time":
		*e = Lpgtv504ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv504ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv504ApplicationJSON - Gateway timeout
type Lpgtv504ApplicationJSON struct {
	Error            *Lpgtv504ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv504ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv503ApplicationJSONErrorEnum string

const (
	Lpgtv503ApplicationJSONErrorEnumServiceUnavailable Lpgtv503ApplicationJSONErrorEnum = "service_unavailable"
)

func (e *Lpgtv503ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "service_unavailable":
		*e = Lpgtv503ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv503ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv503ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv503ApplicationJSONErrorDescriptionEnumPublisherServiceIsTemporarilyUnavailable Lpgtv503ApplicationJSONErrorDescriptionEnum = "Publisher service is temporarily unavailable"
)

func (e *Lpgtv503ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service is temporarily unavailable":
		*e = Lpgtv503ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv503ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv503ApplicationJSON - Service unavailable
type Lpgtv503ApplicationJSON struct {
	Error            *Lpgtv503ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv503ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv502ApplicationJSONErrorEnum string

const (
	Lpgtv502ApplicationJSONErrorEnumBadGatewy Lpgtv502ApplicationJSONErrorEnum = "bad_gatewy"
)

func (e *Lpgtv502ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "bad_gatewy":
		*e = Lpgtv502ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv502ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv502ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv502ApplicationJSONErrorDescriptionEnumPublisherServiceReturnedAnInvalidResponse Lpgtv502ApplicationJSONErrorDescriptionEnum = "Publisher service returned an invalid response"
)

func (e *Lpgtv502ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Publisher service returned an invalid response":
		*e = Lpgtv502ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv502ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv502ApplicationJSON - Bad gateway
type Lpgtv502ApplicationJSON struct {
	Error            *Lpgtv502ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv502ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv500ApplicationJSONErrorEnum string

const (
	Lpgtv500ApplicationJSONErrorEnumInternalServerError Lpgtv500ApplicationJSONErrorEnum = "internal_server_error"
)

func (e *Lpgtv500ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "internal_server_error":
		*e = Lpgtv500ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv500ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv500ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv500ApplicationJSONErrorDescriptionEnumInternalServerError Lpgtv500ApplicationJSONErrorDescriptionEnum = "Internal server error"
)

func (e *Lpgtv500ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Internal server error":
		*e = Lpgtv500ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv500ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv500ApplicationJSON - Internal server error
type Lpgtv500ApplicationJSON struct {
	Error            *Lpgtv500ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv500ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv404ApplicationJSONErrorEnum string

const (
	Lpgtv404ApplicationJSONErrorEnumRecordNotFound Lpgtv404ApplicationJSONErrorEnum = "record_not_found"
	Lpgtv404ApplicationJSONErrorEnumURLNotFound    Lpgtv404ApplicationJSONErrorEnum = "url_not_found"
)

func (e *Lpgtv404ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "record_not_found":
		fallthrough
	case "url_not_found":
		*e = Lpgtv404ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv404ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv404ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv404ApplicationJSONErrorDescriptionEnumNoRecordFound               Lpgtv404ApplicationJSONErrorDescriptionEnum = "No record found"
	Lpgtv404ApplicationJSONErrorDescriptionEnumYourAPIURLOrPathIsIncorrect Lpgtv404ApplicationJSONErrorDescriptionEnum = "Your API url or path is incorrect"
)

func (e *Lpgtv404ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "No record found":
		fallthrough
	case "Your API url or path is incorrect":
		*e = Lpgtv404ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv404ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv404ApplicationJSON - No record found
type Lpgtv404ApplicationJSON struct {
	Error            *Lpgtv404ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv404ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv401ApplicationJSONErrorEnum string

const (
	Lpgtv401ApplicationJSONErrorEnumInvalidAuthentication Lpgtv401ApplicationJSONErrorEnum = "invalid_authentication"
	Lpgtv401ApplicationJSONErrorEnumInvalidAuthorization  Lpgtv401ApplicationJSONErrorEnum = "invalid_authorization"
)

func (e *Lpgtv401ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "invalid_authentication":
		fallthrough
	case "invalid_authorization":
		*e = Lpgtv401ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv401ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv401ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv401ApplicationJSONErrorDescriptionEnumAuthenticationFailed            Lpgtv401ApplicationJSONErrorDescriptionEnum = "Authentication failed"
	Lpgtv401ApplicationJSONErrorDescriptionEnumYouAreNotAuthorizedToUseThisAPI Lpgtv401ApplicationJSONErrorDescriptionEnum = "You are not authorized to use this API"
)

func (e *Lpgtv401ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Authentication failed":
		fallthrough
	case "You are not authorized to use this API":
		*e = Lpgtv401ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv401ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv401ApplicationJSON - Unauthorized access
type Lpgtv401ApplicationJSON struct {
	Error            *Lpgtv401ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv401ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type Lpgtv400ApplicationJSONErrorEnum string

const (
	Lpgtv400ApplicationJSONErrorEnumMissingParameter Lpgtv400ApplicationJSONErrorEnum = "missing_parameter"
	Lpgtv400ApplicationJSONErrorEnumInvalidParameter Lpgtv400ApplicationJSONErrorEnum = "invalid_parameter"
	Lpgtv400ApplicationJSONErrorEnumInvalidFormat    Lpgtv400ApplicationJSONErrorEnum = "invalid_format"
	Lpgtv400ApplicationJSONErrorEnumInvalidTxnid     Lpgtv400ApplicationJSONErrorEnum = "invalid_txnid"
	Lpgtv400ApplicationJSONErrorEnumInvalidConsentid Lpgtv400ApplicationJSONErrorEnum = "invalid_consentid"
)

func (e *Lpgtv400ApplicationJSONErrorEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "missing_parameter":
		fallthrough
	case "invalid_parameter":
		fallthrough
	case "invalid_format":
		fallthrough
	case "invalid_txnid":
		fallthrough
	case "invalid_consentid":
		*e = Lpgtv400ApplicationJSONErrorEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv400ApplicationJSONErrorEnum: %s", s)
	}
}

type Lpgtv400ApplicationJSONErrorDescriptionEnum string

const (
	Lpgtv400ApplicationJSONErrorDescriptionEnumPleaseProvideAllMandatoryParameters     Lpgtv400ApplicationJSONErrorDescriptionEnum = "Please provide all mandatory parameters"
	Lpgtv400ApplicationJSONErrorDescriptionEnumBadRequest                              Lpgtv400ApplicationJSONErrorDescriptionEnum = "Bad request"
	Lpgtv400ApplicationJSONErrorDescriptionEnumTheFormatParameterIsInvalid             Lpgtv400ApplicationJSONErrorDescriptionEnum = "The format parameter is invalid"
	Lpgtv400ApplicationJSONErrorDescriptionEnumTheTxnIDParameterMustBeInUUIDFormat     Lpgtv400ApplicationJSONErrorDescriptionEnum = "The txnId parameter must be in UUID format"
	Lpgtv400ApplicationJSONErrorDescriptionEnumTheConsentIDParameterMustBeInUUIDFormat Lpgtv400ApplicationJSONErrorDescriptionEnum = "The consentId parameter must be in UUID format"
)

func (e *Lpgtv400ApplicationJSONErrorDescriptionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Please provide all mandatory parameters":
		fallthrough
	case "Bad request":
		fallthrough
	case "The format parameter is invalid":
		fallthrough
	case "The txnId parameter must be in UUID format":
		fallthrough
	case "The consentId parameter must be in UUID format":
		*e = Lpgtv400ApplicationJSONErrorDescriptionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for Lpgtv400ApplicationJSONErrorDescriptionEnum: %s", s)
	}
}

// Lpgtv400ApplicationJSON - Bad request
type Lpgtv400ApplicationJSON struct {
	Error            *Lpgtv400ApplicationJSONErrorEnum            `json:"error,omitempty"`
	ErrorDescription *Lpgtv400ApplicationJSONErrorDescriptionEnum `json:"errorDescription,omitempty"`
}

type LpgtvResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Bad request
	Lpgtv400ApplicationJSONObject *Lpgtv400ApplicationJSON
	// Unauthorized access
	Lpgtv401ApplicationJSONObject *Lpgtv401ApplicationJSON
	// No record found
	Lpgtv404ApplicationJSONObject *Lpgtv404ApplicationJSON
	// Internal server error
	Lpgtv500ApplicationJSONObject *Lpgtv500ApplicationJSON
	// Bad gateway
	Lpgtv502ApplicationJSONObject *Lpgtv502ApplicationJSON
	// Service unavailable
	Lpgtv503ApplicationJSONObject *Lpgtv503ApplicationJSON
	// Gateway timeout
	Lpgtv504ApplicationJSONObject *Lpgtv504ApplicationJSON
}
