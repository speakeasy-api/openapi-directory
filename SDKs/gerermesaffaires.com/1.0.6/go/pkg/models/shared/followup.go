// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type FollowUpClientManagementEnum string

const (
	FollowUpClientManagementEnumManager FollowUpClientManagementEnum = "manager"
	FollowUpClientManagementEnumAdn     FollowUpClientManagementEnum = "adn"
	FollowUpClientManagementEnumNull    FollowUpClientManagementEnum = "null"
)

func (e FollowUpClientManagementEnum) ToPointer() *FollowUpClientManagementEnum {
	return &e
}

func (e *FollowUpClientManagementEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "manager":
		fallthrough
	case "adn":
		fallthrough
	case "null":
		*e = FollowUpClientManagementEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FollowUpClientManagementEnum: %v", v)
	}
}

type FollowUpInvitationStatusEnum string

const (
	FollowUpInvitationStatusEnumLessThanNilGreaterThan FollowUpInvitationStatusEnum = "<nil>"
	FollowUpInvitationStatusEnumOn                     FollowUpInvitationStatusEnum = "on"
	FollowUpInvitationStatusEnumRefused                FollowUpInvitationStatusEnum = "refused"
	FollowUpInvitationStatusEnumAccepted               FollowUpInvitationStatusEnum = "accepted"
	FollowUpInvitationStatusEnumFinished               FollowUpInvitationStatusEnum = "finished"
	FollowUpInvitationStatusEnumExpired                FollowUpInvitationStatusEnum = "expired"
	FollowUpInvitationStatusEnumWaitingForValidation   FollowUpInvitationStatusEnum = "waiting for validation"
)

func (e FollowUpInvitationStatusEnum) ToPointer() *FollowUpInvitationStatusEnum {
	return &e
}

func (e *FollowUpInvitationStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "<nil>":
		fallthrough
	case "on":
		fallthrough
	case "refused":
		fallthrough
	case "accepted":
		fallthrough
	case "finished":
		fallthrough
	case "expired":
		fallthrough
	case "waiting for validation":
		*e = FollowUpInvitationStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FollowUpInvitationStatusEnum: %v", v)
	}
}

type FollowUpInvitation struct {
	Comment   *string                       `json:"Comment,omitempty"`
	PlayerEnd *string                       `json:"PlayerEnd,omitempty"`
	Status    *FollowUpInvitationStatusEnum `json:"Status,omitempty"`
}

type FollowUpLevelEnum string

const (
	FollowUpLevelEnumConfidential FollowUpLevelEnum = "confidential"
	FollowUpLevelEnumRegular      FollowUpLevelEnum = "regular"
	FollowUpLevelEnumPublic       FollowUpLevelEnum = "public"
)

func (e FollowUpLevelEnum) ToPointer() *FollowUpLevelEnum {
	return &e
}

func (e *FollowUpLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "confidential":
		fallthrough
	case "regular":
		fallthrough
	case "public":
		*e = FollowUpLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FollowUpLevelEnum: %v", v)
	}
}

type FollowUpPlayerEnum string

const (
	FollowUpPlayerEnumGuest        FollowUpPlayerEnum = "guest"
	FollowUpPlayerEnumManager      FollowUpPlayerEnum = "manager"
	FollowUpPlayerEnumCollaborator FollowUpPlayerEnum = "collaborator"
	FollowUpPlayerEnumOwner        FollowUpPlayerEnum = "owner"
	FollowUpPlayerEnumAssistant    FollowUpPlayerEnum = "assistant"
)

func (e FollowUpPlayerEnum) ToPointer() *FollowUpPlayerEnum {
	return &e
}

func (e *FollowUpPlayerEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "guest":
		fallthrough
	case "manager":
		fallthrough
	case "collaborator":
		fallthrough
	case "owner":
		fallthrough
	case "assistant":
		*e = FollowUpPlayerEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FollowUpPlayerEnum: %v", v)
	}
}

// FollowUp - the folder of a person
type FollowUp struct {
	About            *string                       `json:"About,omitempty"`
	ArchivalDate     *string                       `json:"ArchivalDate,omitempty"`
	Class            *string                       `json:"Class,omitempty"`
	ClientManagement *FollowUpClientManagementEnum `json:"ClientManagement,omitempty"`
	Home             *bool                         `json:"Home,omitempty"`
	ID               *string                       `json:"Id,omitempty"`
	Invitation       *FollowUpInvitation           `json:"Invitation,omitempty"`
	Keywords         []string                      `json:"Keywords,omitempty"`
	Level            *FollowUpLevelEnum            `json:"Level,omitempty"`
	ModificationDate *string                       `json:"ModificationDate,omitempty"`
	Name             *string                       `json:"Name,omitempty"`
	Parent           *string                       `json:"Parent,omitempty"`
	Player           *FollowUpPlayerEnum           `json:"Player,omitempty"`
}
