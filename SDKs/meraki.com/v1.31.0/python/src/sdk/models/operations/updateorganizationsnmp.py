"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class UpdateOrganizationSnmpRequestBodyV3AuthModeEnum(str, Enum):
    r"""The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'."""
    MD5 = 'MD5'
    SHA = 'SHA'

class UpdateOrganizationSnmpRequestBodyV3PrivModeEnum(str, Enum):
    r"""The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'."""
    AES128 = 'AES128'
    DES = 'DES'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOrganizationSnmpRequestBody:
    
    peer_ips: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('peerIps'), 'exclude': lambda f: f is None }})
    r"""The list of IPv4 addresses that are allowed to access the SNMP server."""  
    v2c_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v2cEnabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether SNMP version 2c is enabled for the organization."""  
    v3_auth_mode: Optional[UpdateOrganizationSnmpRequestBodyV3AuthModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3AuthMode'), 'exclude': lambda f: f is None }})
    r"""The SNMP version 3 authentication mode. Can be either 'MD5' or 'SHA'."""  
    v3_auth_pass: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3AuthPass'), 'exclude': lambda f: f is None }})
    r"""The SNMP version 3 authentication password. Must be at least 8 characters if specified."""  
    v3_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3Enabled'), 'exclude': lambda f: f is None }})
    r"""Boolean indicating whether SNMP version 3 is enabled for the organization."""  
    v3_priv_mode: Optional[UpdateOrganizationSnmpRequestBodyV3PrivModeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3PrivMode'), 'exclude': lambda f: f is None }})
    r"""The SNMP version 3 privacy mode. Can be either 'DES' or 'AES128'."""  
    v3_priv_pass: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('v3PrivPass'), 'exclude': lambda f: f is None }})
    r"""The SNMP version 3 privacy password. Must be at least 8 characters if specified."""  
    

@dataclasses.dataclass
class UpdateOrganizationSnmpRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    request_body: Optional[UpdateOrganizationSnmpRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class UpdateOrganizationSnmpResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    update_organization_snmp_200_application_json_object: Optional[dict[str, Any]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    