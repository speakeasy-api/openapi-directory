/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class RetrieveConversationRequest extends SpeakeasyBase {
  /**
   * Conversation ID
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=conversation_id",
  })
  conversationId: string;
}

export class RetrieveConversation200ApplicationJSONMembers extends SpeakeasyBase {
  /**
   * A user who joins a conversation as a member can have one channel per membership type. Channels can be `app`, `phone`, `sip`, `websocket`, or `vbc`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channel" })
  @Type(() => shared.Channel)
  channel?: shared.Channel;

  @SpeakeasyMetadata()
  @Expose({ name: "initiator" })
  @Type(() => shared.Initiator)
  initiator?: shared.Initiator;

  /**
   * Member ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "member_id" })
  memberId?: string;

  /**
   * Unique name for a user
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * The state that the member is in. Possible values are `invited`, `joined`, `left`, or `unknown`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: shared.MemberStateEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Type(() => shared.TimestampResMember)
  timestamp?: shared.TimestampResMember;

  /**
   * User ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "user_id" })
  userId?: string;
}

export class RetrieveConversation200ApplicationJSONProperties extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "video" })
  video?: boolean;
}

/**
 * Conversation Object
 */
export class RetrieveConversation200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "_links" })
  @Type(() => shared.LinksConversation)
  links?: shared.LinksConversation;

  /**
   * The API key for your account
   */
  @SpeakeasyMetadata()
  @Expose({ name: "api_key" })
  apiKey?: string;

  /**
   * The display name for the conversation. It does not have to be unique
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * Users associated to this conversation as members
   */
  @SpeakeasyMetadata({
    elemType: RetrieveConversation200ApplicationJSONMembers,
  })
  @Expose({ name: "members" })
  @Type(() => RetrieveConversation200ApplicationJSONMembers)
  members?: RetrieveConversation200ApplicationJSONMembers[];

  /**
   * Unique name for a conversation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "numbers" })
  numbers?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "properties" })
  @Type(() => RetrieveConversation200ApplicationJSONProperties)
  properties?: RetrieveConversation200ApplicationJSONProperties;

  /**
   * The last Event ID in this conversation. This ID can be used to [retrieve a specific event](#getEvent)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sequence_number" })
  sequenceNumber?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "timestamp" })
  @Type(() => shared.TimestampResConversation)
  timestamp?: shared.TimestampResConversation;

  /**
   * The unique identifier for this conversation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uuid" })
  uuid: string;
}

export class RetrieveConversationResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Retrieve a conversation
   */
  @SpeakeasyMetadata()
  retrieveConversation200ApplicationJSONObject?: RetrieveConversation200ApplicationJSON;
}
