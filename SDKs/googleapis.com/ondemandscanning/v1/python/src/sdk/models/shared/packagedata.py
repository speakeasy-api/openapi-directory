"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import binary as shared_binary
from ..shared import filelocation as shared_filelocation
from ..shared import languagepackagedependency as shared_languagepackagedependency
from ..shared import maintainer as shared_maintainer
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PackageDataPackageTypeEnum(str, Enum):
    r"""The type of package: os, maven, go, etc."""
    PACKAGE_TYPE_UNSPECIFIED = 'PACKAGE_TYPE_UNSPECIFIED'
    OS = 'OS'
    MAVEN = 'MAVEN'
    GO = 'GO'
    GO_STDLIB = 'GO_STDLIB'
    PYPI = 'PYPI'
    NPM = 'NPM'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PackageData:
    
    architecture: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('architecture'), 'exclude': lambda f: f is None }})
    r"""The architecture of the package."""  
    binary: Optional[shared_binary.Binary] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('binary'), 'exclude': lambda f: f is None }})  
    cpe_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cpeUri'), 'exclude': lambda f: f is None }})
    r"""The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar."""  
    dependency_chain: Optional[list[shared_languagepackagedependency.LanguagePackageDependency]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dependencyChain'), 'exclude': lambda f: f is None }})
    r"""The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package."""  
    file_location: Optional[list[shared_filelocation.FileLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fileLocation'), 'exclude': lambda f: f is None }})
    r"""The path to the jar file / go binary file."""  
    hash_digest: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hashDigest'), 'exclude': lambda f: f is None }})
    r"""HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages."""  
    maintainer: Optional[shared_maintainer.Maintainer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maintainer'), 'exclude': lambda f: f is None }})  
    os: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('os'), 'exclude': lambda f: f is None }})
    r"""The OS affected by a vulnerability Used to generate the cpe_uri for OS packages"""  
    os_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('osVersion'), 'exclude': lambda f: f is None }})
    r"""The version of the OS Used to generate the cpe_uri for OS packages"""  
    package: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('package'), 'exclude': lambda f: f is None }})
    r"""The package being analysed for vulnerabilities"""  
    package_type: Optional[PackageDataPackageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('packageType'), 'exclude': lambda f: f is None }})
    r"""The type of package: os, maven, go, etc."""  
    patched_cve: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('patchedCve'), 'exclude': lambda f: f is None }})
    r"""CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning"""  
    unused: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('unused'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version'), 'exclude': lambda f: f is None }})
    r"""The version of the package being analysed"""  
    