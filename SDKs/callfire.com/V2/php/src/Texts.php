<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Texts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Add batches to a text broadcast
     * 
     * Allows adding an extra batches to an already created text broadcast campaign. The batches which being  added pass the CallFire validation process (unlike in the recipients version of this API). That is why using of a scrubDuplicates flag remove duplicates from your batch. Batches may be added as a contact list id, a list of contact ids, or a list of numbers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchResponse
     */
	public function addTextBroadcastBatch(
        \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/batches', \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add recipients to a text broadcast
     * 
     * Use this API to add recipients to a text broadcast which is already created. Post a list of Recipient objects to be immediately added to the text broadcast campaign. These contacts will not go through validation process, and will be acted upon as they are added. Recipients may be added as a list of contact ids, or list of numbers
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsResponse
     */
	public function addTextBroadcastRecipients(
        \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/recipients', \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AddTextBroadcastRecipientsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Archive text broadcast
     * 
     * Archives a text broadcast (and hides it in the search results)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastResponse
     */
	public function archiveTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/archive', \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ArchiveTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create an auto reply
     * 
     * CallFire gives you possibility to set up auto reply messages for your numbers and keywords. You can set a general auto reply for anyone who texts your number, keyword, and/or include a text to match, so that the auto reply would be sent only to those who text the matched text
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TextAutoReply $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextAutoReplySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTextAutoReplyResponse
     */
	public function createTextAutoReply(
        \OpenAPI\OpenAPI\Models\Shared\TextAutoReply $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTextAutoReplySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTextAutoReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/auto-replys');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTextAutoReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a text broadcast
     * 
     * Creates a text broadcast campaign using the Text Broadcast API. Send a TextBroadcast object in the message body to detail a text broadcast campaign. A campaign can be created without contacts and with bare minimum configuration, but contacts have to be added further on to use the campaign. It supports scheduling, retry logic, pattern-based messages.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastResponse
     */
	public function createTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "textBroadcastInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resourceId = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ResourceId', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an auto reply
     * 
     * Deletes a text auto reply and removes the configuration. Can not delete a TextAutoReply which is currently active for a campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyResponse
     */
	public function deleteTextAutoReply(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/auto-replys/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTextAutoReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find auto replies
     * 
     * Find all text autoreplies created by user. Returns a paged list of TextAutoReply
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysResponse
     */
	public function findTextAutoReplys(
        \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/auto-replys');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindTextAutoReplysResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textAutoReplyPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextAutoReplyPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find text broadcasts
     * 
     * Searches for all text broadcasts created by user. Can query on label, name, and the current running status of the campaign. Returns a paged list of text broadcasts
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsResponse
     */
	public function findTextBroadcasts(
        \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindTextBroadcastsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textBroadcastPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextBroadcastPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find texts
     * 
     * Searches for texts sent or received by user. Use "campaignId=0" parameter to query for all texts sent through the POST /texts API. See [call states and results](https://developers.callfire.com/results-responses-errors.html)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FindTextsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\FindTextsResponse
     */
	public function findTexts(
        \OpenAPI\OpenAPI\Models\Operations\FindTextsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FindTextsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\FindTextsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FindTextsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FindTextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific text
     * 
     * Returns a single Text instance for a given text id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextResponse
     */
	public function getText(
        \OpenAPI\OpenAPI\Models\Operations\GetTextRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTextRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->text = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Text', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific auto reply
     * 
     * Returns a single TextAutoReply instance for a given text auto reply id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyResponse
     */
	public function getTextAutoReply(
        \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/auto-replys/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextAutoReplyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textAutoReply = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextAutoReply', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find a specific text broadcast
     * 
     * Returns a single TextBroadcast instance for a given text broadcast id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastResponse
     */
	public function getTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textBroadcast = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextBroadcast', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find batches in a text broadcast
     * 
     * This endpoint will enable the user to page through all of the batches for a particular text broadcast campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesResponse
     */
	public function getTextBroadcastBatches(
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/batches', \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastBatchesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get statistics on text broadcast
     * 
     * Returns the broadcast statistics. Example: total number of the sent/received actions, total cost, number of remaining outbound actions, error count, etc
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsResponse
     */
	public function getTextBroadcastStats(
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/stats', \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastStatsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textBroadcastStatsDto = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextBroadcastStatsDto', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Find texts in a text broadcast
     * 
     * This endpoint will enable the user to page through all of the texts for a particular text broadcast campaign
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsResponse
     */
	public function getTextBroadcastTexts(
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/texts', \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTextBroadcastTextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textPage = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextPage', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Send texts
     * 
     * Use the /texts API to send individual texts quickly. By default all texts are going out from CallFire's dedicated short code. Example: 67076, 818818 etc
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SendTextsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SendTextsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SendTextsResponse
     */
	public function sendTexts(
        \OpenAPI\OpenAPI\Models\Operations\SendTextsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SendTextsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SendTextsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\SendTextsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SendTextsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextList', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Start text broadcast
     * 
     * Starts a text broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastResponse
     */
	public function startTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/start', \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StartTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stop text broadcast
     * 
     * Stops a text broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastResponse
     */
	public function stopTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/stop', \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StopTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disable/enable undialed recipients in broadcast
     * 
     * This operation lets the user to disable/enable undialed contacts in created broadcast
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusResponse
     */
	public function toggleTextBroadcastRecipientsStatus(
        \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}/toggleRecipientsStatus', \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ToggleTextBroadcastRecipientsStatusResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a text broadcast
     * 
     * Allows modifying the configuration of existing text broadcast campaign. See TextBroadcast for more information on what can/can't be updated on this API
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastResponse
     */
	public function updateTextBroadcast(
        \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/texts/broadcasts/{id}', \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "textBroadcastInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateTextBroadcastResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->textBroadcastCreateResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TextBroadcastCreateResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->errorResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ErrorResponse', 'json');
            }
        }

        return $response;
    }
}