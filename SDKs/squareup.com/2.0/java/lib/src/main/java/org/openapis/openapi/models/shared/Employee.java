/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Employee - An employee object that is used by the external API.
 */
public class Employee {
    /**
     * A read-only timestamp in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    public String createdAt;
    public Employee withCreatedAt(String createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The employee's email address
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public Employee withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The employee's first name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    public String firstName;
    public Employee withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }
    
    /**
     * UUID for this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Employee withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Whether this employee is the owner of the merchant. Each merchant
     * has one owner employee, and that employee has full authority over
     * the account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_owner")
    public Boolean isOwner;
    public Employee withIsOwner(Boolean isOwner) {
        this.isOwner = isOwner;
        return this;
    }
    
    /**
     * The employee's last name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    public String lastName;
    public Employee withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }
    
    /**
     * A list of location IDs where this employee has access to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_ids")
    public String[] locationIds;
    public Employee withLocationIds(String[] locationIds) {
        this.locationIds = locationIds;
        return this;
    }
    
    /**
     * The employee's phone number in E.164 format, i.e. "+12125554250"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    public String phoneNumber;
    public Employee withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * Specifies the status of the employees being fetched.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Employee withStatus(String status) {
        this.status = status;
        return this;
    }
    
    /**
     * A read-only timestamp in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    public String updatedAt;
    public Employee withUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
}
