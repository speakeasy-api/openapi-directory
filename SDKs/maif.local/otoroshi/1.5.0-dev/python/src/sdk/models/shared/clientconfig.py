"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientConfig:
    r"""The configuration of the circuit breaker for a service descriptor"""
    
    backoff_factor: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backoffFactor') }})
    r"""Specify the factor to multiply the delay for each retry"""  
    call_timeout: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('callTimeout') }})
    r"""Specify how long each call should last at most in milliseconds"""  
    global_timeout: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('globalTimeout') }})
    r"""Specify how long the global call (with retries) should last at most in milliseconds"""  
    max_errors: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('maxErrors') }})
    r"""Specify how many errors can pass before opening the circuit breaker"""  
    retries: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retries') }})
    r"""Specify how many times the client will try to fetch the result of the request after an error before giving up."""  
    retry_initial_delay: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retryInitialDelay') }})
    r"""Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor"""  
    sample_interval: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sampleInterval') }})
    r"""Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted"""  
    use_circuit_breaker: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('useCircuitBreaker') }})
    r"""Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !"""  
    