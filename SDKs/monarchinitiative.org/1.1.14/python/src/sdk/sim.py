"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Sim:
    r"""Perform semantic similarity, ranking, and sufficiency scoring"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_annotation_score(self, request: operations.GetAnnotationScoreRequest) -> operations.GetAnnotationScoreResponse:
        r"""Get annotation score"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sim/score'
        
        query_params = utils.get_query_params(operations.GetAnnotationScoreRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetAnnotationScoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SufficiencyOutput])
                res.sufficiency_output = out

        return res

    def get_sim_compare(self, request: operations.GetSimCompareRequest) -> operations.GetSimCompareResponse:
        r"""Compare a reference profile vs one profiles"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sim/compare'
        
        query_params = utils.get_query_params(operations.GetSimCompareRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSimCompareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SimResult])
                res.sim_result = out

        return res

    def get_sim_search(self, request: operations.GetSimSearchRequest) -> operations.GetSimSearchResponse:
        r"""Search for phenotypically similar diseases or model genes"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sim/search'
        
        query_params = utils.get_query_params(operations.GetSimSearchRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSimSearchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SimResult])
                res.sim_result = out

        return res

    def post_annotation_score(self, request: shared.SufficiencyPostInput) -> operations.PostAnnotationScoreResponse:
        r"""Get annotation score"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sim/score'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostAnnotationScoreResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SufficiencyOutput])
                res.sufficiency_output = out

        return res

    def post_sim_compare(self, request: shared.CompareInput) -> operations.PostSimCompareResponse:
        r"""Compare a reference profile vs one or more profiles"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/sim/compare'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSimCompareResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SimResult])
                res.sim_result = out

        return res

    