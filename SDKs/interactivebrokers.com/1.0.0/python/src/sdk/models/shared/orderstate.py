"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import orderstatus_enum as shared_orderstatus_enum
from ..shared import ordertype_enum as shared_ordertype_enum
from ..shared import timeinforce_enum as shared_timeinforce_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrderStateSideEnum(str, Enum):
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrderState:
    r"""An object containing all the properties defining an order"""
    
    contract_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContractId'), 'exclude': lambda f: f is None }})  
    customer_order_id: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerOrderId'), 'exclude': lambda f: f is None }})  
    filled_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FilledQuantity'), 'exclude': lambda f: f is None }})  
    listing_exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ListingExchange'), 'exclude': lambda f: f is None }})  
    order_type: Optional[shared_ordertype_enum.OrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderType'), 'exclude': lambda f: f is None }})
    r"""Market = '1'
    Limit = '2'
    Stop = '3'
    StopLimit = '4'
    """  
    outside_rth: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutsideRTH'), 'exclude': lambda f: f is None }})  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})  
    remaining_quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RemainingQuantity'), 'exclude': lambda f: f is None }})  
    side: Optional[OrderStateSideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Side'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_orderstatus_enum.OrderStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Status of the order
    InvalidOrderStatus = '-1'
    New = '0'
    PartiallyFilled = '1'
    Filled = '2'
    DoneForTheDay = '3'
    Canceled = '4'
    Replaced = '5'
    PendingCancelReplace = '6'
    Stopped = '7'
    Rejected = '8'
    Suspended = '9'
    PendingNew = 'A'
    Calculated = 'B'
    Expired = 'C'
    AcceptedForBidding = 'D'
    PendingReplace = 'E'
    """  
    ticker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ticker'), 'exclude': lambda f: f is None }})  
    time_in_force: Optional[shared_timeinforce_enum.TimeInForceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TimeInForce'), 'exclude': lambda f: f is None }})
    r"""Defines order's active lifetime.
    Day = '0'
    GTC (Good till Cancel) = '1'
    IOC (Immediate or Cancel) = '3'
    Open = '2'
    Close = '7'
    """  
    transaction_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TransactionTime'), 'exclude': lambda f: f is None }})  
    warning: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Warning'), 'exclude': lambda f: f is None }})  
    