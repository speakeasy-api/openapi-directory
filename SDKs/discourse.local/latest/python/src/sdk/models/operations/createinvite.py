"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInviteRequestBody:
    
    custom_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_message'), 'exclude': lambda f: f is None }})
    r"""optional, for email invites"""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""required for email invites only"""  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'exclude': lambda f: f is None }})
    r"""optional, if not supplied, the invite_expiry_days site
    setting is used
    """  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    r"""optional, either this or `group_names`"""  
    group_names: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_names'), 'exclude': lambda f: f is None }})
    r"""optional, either this or `group_id`"""  
    max_redemptions_allowed: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_redemptions_allowed'), 'exclude': lambda f: f is None }})
    r"""optional, for link invites"""  
    skip_email: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('skip_email'), 'exclude': lambda f: f is None }})  
    topic_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topic_id'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateInviteRequest:
    
    api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Key', 'style': 'simple', 'explode': False }})  
    api_username: str = dataclasses.field(metadata={'header': { 'field_name': 'Api-Username', 'style': 'simple', 'explode': False }})  
    request_body: Optional[CreateInviteRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateInvite200ApplicationJSON:
    r"""success response"""
    
    created_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'exclude': lambda f: f is None }})  
    custom_message: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_message'), 'exclude': lambda f: f is None }})  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})  
    emailed: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailed'), 'exclude': lambda f: f is None }})  
    expired: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired'), 'exclude': lambda f: f is None }})  
    expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_at'), 'exclude': lambda f: f is None }})  
    groups: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('groups'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('link'), 'exclude': lambda f: f is None }})  
    topics: Optional[list[Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topics'), 'exclude': lambda f: f is None }})  
    updated_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updated_at'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class CreateInviteResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    create_invite_200_application_json_object: Optional[CreateInvite200ApplicationJSON] = dataclasses.field(default=None)
    r"""success response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    