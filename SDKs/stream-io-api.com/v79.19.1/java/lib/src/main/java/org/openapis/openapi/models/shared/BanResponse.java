/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

public class BanResponse {
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banned_by")
    public java.util.Map<String, Object> bannedBy;
    public BanResponse withBannedBy(java.util.Map<String, Object> bannedBy) {
        this.bannedBy = bannedBy;
        return this;
    }
    
    /**
     * Represents channel in chat
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public java.util.Map<String, Object> channel;
    public BanResponse withChannel(java.util.Map<String, Object> channel) {
        this.channel = channel;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;
    public BanResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires")
    public OffsetDateTime expires;
    public BanResponse withExpires(OffsetDateTime expires) {
        this.expires = expires;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    public String reason;
    public BanResponse withReason(String reason) {
        this.reason = reason;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shadow")
    public Boolean shadow;
    public BanResponse withShadow(Boolean shadow) {
        this.shadow = shadow;
        return this;
    }
    
    /**
     * Represents chat user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user")
    public java.util.Map<String, Object> user;
    public BanResponse withUser(java.util.Map<String, Object> user) {
        this.user = user;
        return this;
    }
    
}
