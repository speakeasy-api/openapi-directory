"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import validatepolicyresponse as shared_validatepolicyresponse
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Any, Optional

class ValidatePolicyRequestBodyLocaleEnum(str, Enum):
    r"""The locale to use for localizing the findings."""
    DE = 'DE'
    EN = 'EN'
    ES = 'ES'
    FR = 'FR'
    IT = 'IT'
    JA = 'JA'
    KO = 'KO'
    PT_BR = 'PT_BR'
    ZH_CN = 'ZH_CN'
    ZH_TW = 'ZH_TW'

class ValidatePolicyRequestBodyPolicyTypeEnum(str, Enum):
    r"""<p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>"""
    IDENTITY_POLICY = 'IDENTITY_POLICY'
    RESOURCE_POLICY = 'RESOURCE_POLICY'
    SERVICE_CONTROL_POLICY = 'SERVICE_CONTROL_POLICY'

class ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum(str, Enum):
    r"""<p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>"""
    AWS_S3_BUCKET = 'AWS::S3::Bucket'
    AWS_S3_ACCESS_POINT = 'AWS::S3::AccessPoint'
    AWS_S3_MULTI_REGION_ACCESS_POINT = 'AWS::S3::MultiRegionAccessPoint'
    AWS_S3_OBJECT_LAMBDA_ACCESS_POINT = 'AWS::S3ObjectLambda::AccessPoint'
    AWS_IAM_ASSUME_ROLE_POLICY_DOCUMENT = 'AWS::IAM::AssumeRolePolicyDocument'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ValidatePolicyRequestBody:
    
    policy_document: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyDocument') }})
    r"""The JSON policy document to use as the content for the policy."""  
    policy_type: ValidatePolicyRequestBodyPolicyTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('policyType') }})
    r"""<p>The type of policy to validate. Identity policies grant permissions to IAM principals. Identity policies include managed and inline policies for IAM roles, users, and groups. They also include service-control policies (SCPs) that are attached to an Amazon Web Services organization, organizational unit (OU), or an account.</p> <p>Resource policies grant permissions on Amazon Web Services resources. Resource policies include trust policies for IAM roles and bucket policies for Amazon S3 buckets. You can provide a generic input such as identity policy or resource policy or a specific input such as managed policy or Amazon S3 bucket policy. </p>"""  
    locale: Optional[ValidatePolicyRequestBodyLocaleEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('locale'), 'exclude': lambda f: f is None }})
    r"""The locale to use for localizing the findings."""  
    validate_policy_resource_type: Optional[ValidatePolicyRequestBodyValidatePolicyResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validatePolicyResourceType'), 'exclude': lambda f: f is None }})
    r"""<p>The type of resource to attach to your resource policy. Specify a value for the policy validation resource type only if the policy type is <code>RESOURCE_POLICY</code>. For example, to validate a resource policy to attach to an Amazon S3 bucket, you can choose <code>AWS::S3::Bucket</code> for the policy validation resource type.</p> <p>For resource types not supported as valid values, IAM Access Analyzer runs policy checks that apply to all resource policies. For example, to validate a resource policy to attach to a KMS key, do not specify a value for the policy validation resource type and IAM Access Analyzer will run policy checks that apply to all resource policies.</p>"""  
    

@dataclasses.dataclass
class ValidatePolicyRequest:
    
    request_body: ValidatePolicyRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    max_results: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'maxResults', 'style': 'form', 'explode': True }})
    r"""The maximum number of results to return in the response."""  
    next_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'nextToken', 'style': 'form', 'explode': True }})
    r"""A token used for pagination of results returned."""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class ValidatePolicyResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    access_denied_exception: Optional[Any] = dataclasses.field(default=None)
    r"""AccessDeniedException"""  
    internal_server_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InternalServerException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    throttling_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ThrottlingException"""  
    validate_policy_response: Optional[shared_validatepolicyresponse.ValidatePolicyResponse] = dataclasses.field(default=None)
    r"""Success"""  
    validation_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ValidationException"""  
    