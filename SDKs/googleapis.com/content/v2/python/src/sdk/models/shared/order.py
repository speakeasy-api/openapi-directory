"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import ordercustomer as shared_ordercustomer
from ..shared import orderdeliverydetails as shared_orderdeliverydetails
from ..shared import orderlegacypromotion as shared_orderlegacypromotion
from ..shared import orderlineitem as shared_orderlineitem
from ..shared import orderpaymentmethod as shared_orderpaymentmethod
from ..shared import orderpickupdetails as shared_orderpickupdetails
from ..shared import orderrefund as shared_orderrefund
from ..shared import ordershipment as shared_ordershipment
from ..shared import price as shared_price
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Order:
    r"""Order. Production access (all methods) requires the order manager role. Sandbox access does not."""
    
    acknowledged: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('acknowledged'), 'exclude': lambda f: f is None }})
    r"""Whether the order was acknowledged."""  
    channel_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('channelType'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Acceptable values are: - \\"`googleExpress`\\" - \\"`purchasesOnGoogle`\\" """  
    customer: Optional[shared_ordercustomer.OrderCustomer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('customer'), 'exclude': lambda f: f is None }})  
    delivery_details: Optional[shared_orderdeliverydetails.OrderDeliveryDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deliveryDetails'), 'exclude': lambda f: f is None }})  
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The REST ID of the order. Globally unique."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"`content#order`\\" """  
    line_items: Optional[list[shared_orderlineitem.OrderLineItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lineItems'), 'exclude': lambda f: f is None }})
    r"""Line items that are ordered."""  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantId'), 'exclude': lambda f: f is None }})  
    merchant_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantOrderId'), 'exclude': lambda f: f is None }})
    r"""Merchant-provided ID of the order."""  
    net_amount: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('netAmount'), 'exclude': lambda f: f is None }})  
    payment_method: Optional[shared_orderpaymentmethod.OrderPaymentMethod] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentMethod'), 'exclude': lambda f: f is None }})  
    payment_status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('paymentStatus'), 'exclude': lambda f: f is None }})
    r"""The status of the payment. Acceptable values are: - \\"`paymentCaptured`\\" - \\"`paymentRejected`\\" - \\"`paymentSecured`\\" - \\"`pendingAuthorization`\\" """  
    pickup_details: Optional[shared_orderpickupdetails.OrderPickupDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pickupDetails'), 'exclude': lambda f: f is None }})  
    placed_date: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('placedDate'), 'exclude': lambda f: f is None }})
    r"""The date when the order was placed, in ISO 8601 format."""  
    promotions: Optional[list[shared_orderlegacypromotion.OrderLegacyPromotion]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotions'), 'exclude': lambda f: f is None }})
    r"""The details of the merchant provided promotions applied to the order. To determine which promotions apply to which products, check the `Promotions[].Benefits[].OfferIds` field against the `LineItems[].Product.OfferId` field for each promotion. If a promotion is applied to more than 1 `offerId`, divide the discount value by the number of affected offers to determine how much discount to apply to each `offerId`. Examples: 1. To calculate the line item level discount for a single specific item: For each promotion, subtract the `Promotions[].Benefits[].Discount.value` amount from the `LineItems[].Price.value`. 2. To calculate the line item level discount for multiple quantity of a specific item: For each promotion, divide the `Promotions[].Benefits[].Discount.value` by the quantity of products and substract it from `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here."""  
    refunds: Optional[list[shared_orderrefund.OrderRefund]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refunds'), 'exclude': lambda f: f is None }})
    r"""Refunds for the order."""  
    shipments: Optional[list[shared_ordershipment.OrderShipment]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shipments'), 'exclude': lambda f: f is None }})
    r"""Shipments of the order."""  
    shipping_cost: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCost'), 'exclude': lambda f: f is None }})  
    shipping_cost_tax: Optional[shared_price.Price] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingCostTax'), 'exclude': lambda f: f is None }})  
    shipping_option: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingOption'), 'exclude': lambda f: f is None }})
    r"""Deprecated. Shipping details are provided with line items instead. Acceptable values are: - \\"`economy`\\" - \\"`expedited`\\" - \\"`oneDay`\\" - \\"`sameDay`\\" - \\"`standard`\\" - \\"`twoDay`\\" """  
    status: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""The status of the order. Acceptable values are: - \\"`canceled`\\" - \\"`delivered`\\" - \\"`inProgress`\\" - \\"`partiallyDelivered`\\" - \\"`partiallyReturned`\\" - \\"`partiallyShipped`\\" - \\"`pendingShipment`\\" - \\"`returned`\\" - \\"`shipped`\\" """  
    tax_collector: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('taxCollector'), 'exclude': lambda f: f is None }})
    r"""The party responsible for collecting and remitting taxes. Acceptable values are: - \\"`marketplaceFacilitator`\\" - \\"`merchant`\\" """  
    