/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AllocateQuotaResponse - Response message for the AllocateQuota method.
 */
public class AllocateQuotaResponse {
    /**
     * Indicates the decision of the allocate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocateErrors")
    public QuotaError[] allocateErrors;

    public AllocateQuotaResponse withAllocateErrors(QuotaError[] allocateErrors) {
        this.allocateErrors = allocateErrors;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allocateInfo")
    public AllocateInfo allocateInfo;

    public AllocateQuotaResponse withAllocateInfo(AllocateInfo allocateInfo) {
        this.allocateInfo = allocateInfo;
        return this;
    }
    
    /**
     * The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operationId")
    public String operationId;

    public AllocateQuotaResponse withOperationId(String operationId) {
        this.operationId = operationId;
        return this;
    }
    
    /**
     * Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : "serviceruntime.googleapis.com/api/consumer/quota_used_count" 2. The quota limit reached condition will be specified using the following boolean metric : "serviceruntime.googleapis.com/quota/exceeded"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quotaMetrics")
    public MetricValueSet[] quotaMetrics;

    public AllocateQuotaResponse withQuotaMetrics(MetricValueSet[] quotaMetrics) {
        this.quotaMetrics = quotaMetrics;
        return this;
    }
    
    /**
     * ID of the actual config used to process the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceConfigId")
    public String serviceConfigId;

    public AllocateQuotaResponse withServiceConfigId(String serviceConfigId) {
        this.serviceConfigId = serviceConfigId;
        return this;
    }
    
    public AllocateQuotaResponse(){}
}
