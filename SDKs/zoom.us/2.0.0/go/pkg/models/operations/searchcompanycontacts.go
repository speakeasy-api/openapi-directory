// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type SearchCompanyContactsRequest struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// The number of records to be returned with a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// Set `query_presence_status` to `true` in order to include the presence status of a contact in the response.
	QueryPresenceStatus *string `queryParam:"style=form,explode=true,name=query_presence_status"`
	// Provide the keyword - either first name, last name or email of the contact whom you have to search for.
	SearchKey string `queryParam:"style=form,explode=true,name=search_key"`
}

// SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum - Presence status of the contact in Zoom Client. The value of this field can be one of the following:
// `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
type SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum string

const (
	SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnumDoNotDisturb SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum = "Do_Not_Disturb"
	SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnumAway         SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum = "Away"
	SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnumAvailable    SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum = "Available"
	SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnumOffline      SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum = "Offline"
)

func (e *SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Do_Not_Disturb":
		fallthrough
	case "Away":
		fallthrough
	case "Available":
		fallthrough
	case "Offline":
		*e = SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum: %s", s)
	}
}

type SearchCompanyContacts200ApplicationXMLContacts struct {
	// Department of the contact as provided in the user's Zoom profile.
	Dept *string
	// Direct Number(s) of a user who has Zoom Phone license assigned.
	DirectNumbers []string
	// Email address of the contact.
	Email *string
	// Extension Number of a user who has Zoom Phone license assigned.
	ExtensionNumber *string
	// First name of the contact.
	FirstName *string
	// User ID of the contact.
	ID *string
	// Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
	ImGroupID *string
	// Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
	ImGroupName *string
	// Department of the user as provided in the user's Zoom profile.
	JobTitle *string
	// Last name of the contact.
	LastName *string
	// Location of the user as provided in the user's Zoom profile.
	Location *string
	// Phone number of the user.
	PhoneNumber *string
	// Presence status of the contact in Zoom Client. The value of this field can be one of the following:
	// `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
	PresenceStatus *SearchCompanyContacts200ApplicationXMLContactsPresenceStatusEnum
	// SIP Phone number of the user. Returned only if user has SIP phone enabled.
	SipPhoneNumber *string
}

// SearchCompanyContacts200ApplicationXML - **HTTP Status Code:** `200`<br>
// Contact returned successfully.
type SearchCompanyContacts200ApplicationXML struct {
	Contacts []SearchCompanyContacts200ApplicationXMLContacts
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string
	// The number of records returned with a single API call. Default value is `1`.
	PageSize *int64
}

// SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum - Presence status of the contact in Zoom Client. The value of this field can be one of the following:
// `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
type SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum string

const (
	SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnumDoNotDisturb SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum = "Do_Not_Disturb"
	SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnumAway         SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum = "Away"
	SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnumAvailable    SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum = "Available"
	SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnumOffline      SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum = "Offline"
)

func (e *SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Do_Not_Disturb":
		fallthrough
	case "Away":
		fallthrough
	case "Available":
		fallthrough
	case "Offline":
		*e = SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum: %s", s)
	}
}

type SearchCompanyContacts200ApplicationJSONContacts struct {
	// Department of the contact as provided in the user's Zoom profile.
	Dept *string `json:"dept,omitempty"`
	// Direct Number(s) of a user who has Zoom Phone license assigned.
	DirectNumbers []string `json:"direct_numbers,omitempty"`
	// Email address of the contact.
	Email *string `json:"email,omitempty"`
	// Extension Number of a user who has Zoom Phone license assigned.
	ExtensionNumber *string `json:"extension_number,omitempty"`
	// First name of the contact.
	FirstName *string `json:"first_name,omitempty"`
	// User ID of the contact.
	ID *string `json:"id,omitempty"`
	// Unique Identifier of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
	ImGroupID *string `json:"im_group_id,omitempty"`
	// Name of the [IM directory group](https://support.zoom.us/hc/en-us/articles/203749815-IM-Management) in which the user has been added. An IM Directory group is not the same as a channel. IM Directory allows administrators to assign users in their account to groups that display within the Contacts list on Zoom clients.
	ImGroupName *string `json:"im_group_name,omitempty"`
	// Department of the user as provided in the user's Zoom profile.
	JobTitle *string `json:"job_title,omitempty"`
	// Last name of the contact.
	LastName *string `json:"last_name,omitempty"`
	// Location of the user as provided in the user's Zoom profile.
	Location *string `json:"location,omitempty"`
	// Phone number of the user.
	PhoneNumber *string `json:"phone_number,omitempty"`
	// Presence status of the contact in Zoom Client. The value of this field can be one of the following:
	// `Do_Not_Disturb`<br> `away`<br> `Available`<br> `Offline`
	PresenceStatus *SearchCompanyContacts200ApplicationJSONContactsPresenceStatusEnum `json:"presence_status,omitempty"`
	// SIP Phone number of the user. Returned only if user has SIP phone enabled.
	SipPhoneNumber *string `json:"sip_phone_number,omitempty"`
}

// SearchCompanyContacts200ApplicationJSON - **HTTP Status Code:** `200`<br>
// Contact returned successfully.
type SearchCompanyContacts200ApplicationJSON struct {
	Contacts []SearchCompanyContacts200ApplicationJSONContacts `json:"contacts,omitempty"`
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of records returned with a single API call. Default value is `1`.
	PageSize *int64 `json:"page_size,omitempty"`
}

type SearchCompanyContactsResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// Contact returned successfully.
	SearchCompanyContacts200ApplicationJSONObject *SearchCompanyContacts200ApplicationJSON
}
