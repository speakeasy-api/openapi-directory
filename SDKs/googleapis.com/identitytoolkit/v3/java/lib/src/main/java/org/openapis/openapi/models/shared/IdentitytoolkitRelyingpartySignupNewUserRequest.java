/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * IdentitytoolkitRelyingpartySignupNewUserRequest - Request to signup new user, create anonymous user or anonymous user reauth.
 */
public class IdentitytoolkitRelyingpartySignupNewUserRequest {
    /**
     * The captcha challenge.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captchaChallenge")
    public String captchaChallenge;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withCaptchaChallenge(String captchaChallenge) {
        this.captchaChallenge = captchaChallenge;
        return this;
    }
    
    /**
     * Response to the captcha.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("captchaResponse")
    public String captchaResponse;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withCaptchaResponse(String captchaResponse) {
        this.captchaResponse = captchaResponse;
        return this;
    }
    
    /**
     * Whether to disable the user. Only can be used by service account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disabled")
    public Boolean disabled;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }
    
    /**
     * The name of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    public String displayName;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }
    
    /**
     * The email of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Mark the email as verified or not. Only can be used by service account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailVerified")
    public Boolean emailVerified;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withEmailVerified(Boolean emailVerified) {
        this.emailVerified = emailVerified;
        return this;
    }
    
    /**
     * The GITKit token of the authenticated user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    public String idToken;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withIdToken(String idToken) {
        this.idToken = idToken;
        return this;
    }
    
    /**
     * Instance id token of the app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instanceId")
    public String instanceId;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }
    
    /**
     * Privileged caller can create user with specified user id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localId")
    public String localId;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withLocalId(String localId) {
        this.localId = localId;
        return this;
    }
    
    /**
     * The new password of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    public String password;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withPassword(String password) {
        this.password = password;
        return this;
    }
    
    /**
     * Privileged caller can create user with specified phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumber")
    public String phoneNumber;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    /**
     * The photo url of the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoUrl")
    public String photoUrl;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withPhotoUrl(String photoUrl) {
        this.photoUrl = photoUrl;
        return this;
    }
    
    /**
     * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantId")
    public String tenantId;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }
    
    /**
     * Tenant project number to be used for idp discovery.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tenantProjectNumber")
    public String tenantProjectNumber;

    public IdentitytoolkitRelyingpartySignupNewUserRequest withTenantProjectNumber(String tenantProjectNumber) {
        this.tenantProjectNumber = tenantProjectNumber;
        return this;
    }
    
    public IdentitytoolkitRelyingpartySignupNewUserRequest(){}
}
