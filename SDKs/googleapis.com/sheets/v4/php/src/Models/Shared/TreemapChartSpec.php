<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * TreemapChartSpec - A Treemap chart.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class TreemapChartSpec
{
    /**
     * The data included in a domain or series.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChartData $colorData
     */
	#[\JMS\Serializer\Annotation\SerializedName('colorData')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChartData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChartData $colorData = null;
    
    /**
     * A color scale for a treemap chart.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TreemapChartColorScale $colorScale
     */
	#[\JMS\Serializer\Annotation\SerializedName('colorScale')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TreemapChartColorScale')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TreemapChartColorScale $colorScale = null;
    
    /**
     * Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\Color $headerColor
     */
	#[\JMS\Serializer\Annotation\SerializedName('headerColor')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\Color')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?Color $headerColor = null;
    
    /**
     * A color value.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ColorStyle $headerColorStyle
     */
	#[\JMS\Serializer\Annotation\SerializedName('headerColorStyle')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ColorStyle')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ColorStyle $headerColorStyle = null;
    
    /**
     * True to hide tooltips.
     * 
     * @var ?bool $hideTooltips
     */
	#[\JMS\Serializer\Annotation\SerializedName('hideTooltips')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hideTooltips = null;
    
    /**
     * The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
     * 
     * @var ?int $hintedLevels
     */
	#[\JMS\Serializer\Annotation\SerializedName('hintedLevels')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $hintedLevels = null;
    
    /**
     * The data included in a domain or series.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChartData $labels
     */
	#[\JMS\Serializer\Annotation\SerializedName('labels')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChartData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChartData $labels = null;
    
    /**
     * The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
     * 
     * @var ?int $levels
     */
	#[\JMS\Serializer\Annotation\SerializedName('levels')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $levels = null;
    
    /**
     * The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
     * 
     * @var ?float $maxValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('maxValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $maxValue = null;
    
    /**
     * The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
     * 
     * @var ?float $minValue
     */
	#[\JMS\Serializer\Annotation\SerializedName('minValue')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $minValue = null;
    
    /**
     * The data included in a domain or series.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChartData $parentLabels
     */
	#[\JMS\Serializer\Annotation\SerializedName('parentLabels')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChartData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChartData $parentLabels = null;
    
    /**
     * The data included in a domain or series.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\ChartData $sizeData
     */
	#[\JMS\Serializer\Annotation\SerializedName('sizeData')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChartData')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?ChartData $sizeData = null;
    
    /**
     * The format of a run of text in a cell. Absent values indicate that the field isn't specified.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\TextFormat $textFormat
     */
	#[\JMS\Serializer\Annotation\SerializedName('textFormat')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\TextFormat')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?TextFormat $textFormat = null;
    
	public function __construct()
	{
		$this->colorData = null;
		$this->colorScale = null;
		$this->headerColor = null;
		$this->headerColorStyle = null;
		$this->hideTooltips = null;
		$this->hintedLevels = null;
		$this->labels = null;
		$this->levels = null;
		$this->maxValue = null;
		$this->minValue = null;
		$this->parentLabels = null;
		$this->sizeData = null;
		$this->textFormat = null;
	}
}
