"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import orderstatus_enum as shared_orderstatus_enum
from ..shared import ordertype_enum as shared_ordertype_enum
from ..shared import timeinforce_enum as shared_timeinforce_enum
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum(str, Enum):
    r"""Buy = '1', Sell = '2'"""
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAccountsAccountOrdersCustomerOrderIDRequestBody:
    r"""Order Parameters"""
    
    aux_price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Aux Price'), 'exclude': lambda f: f is None }})
    r"""Required Price to support Stop and Stop Limit orders"""  
    customer_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerOrderId'), 'exclude': lambda f: f is None }})
    r"""The new order ID assigned by the customer for the modification."""  
    german_hft_algo: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GermanHftAlgo'), 'exclude': lambda f: f is None }})
    r"""By setting this bool to false the customer attests that the order is not subject to German HFT Act, was not generated using any automated algorithm, and no algorithm determined or changed financial instrument, side, quantity, order type, limit or other price, trading venue or timing of this order. Currently we cannot accept orders where this flag is set to true. Such orders will be rejected."""  
    mifid2_algo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mifid2Algo'), 'exclude': lambda f: f is None }})
    r"""This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for investment decisions"""  
    mifid2_decision_maker: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mifid2DecisionMaker'), 'exclude': lambda f: f is None }})
    r"""This field permits specification of the user's preregistered (via account management) MiFID II short code for decision makers."""  
    mifid2_execution_algo: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mifid2ExecutionAlgo'), 'exclude': lambda f: f is None }})
    r"""This field permits specification of the user's preregistered (via account management) MiFID II short code for algos that are responsible for handling/routing of the order."""  
    mifid2_execution_trader: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Mifid2ExecutionTrader'), 'exclude': lambda f: f is None }})
    r"""This field permits specification of the user's preregistered (via account management) MiFID II person responsible for handling/routing of the order"""  
    order_type: Optional[shared_ordertype_enum.OrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Order Type'), 'exclude': lambda f: f is None }})
    r"""Market = '1'
    Limit = '2'
    Stop = '3'
    StopLimit = '4'
    """  
    orig_customer_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrigCustomerOrderId'), 'exclude': lambda f: f is None }})
    r"""The order ID assigned by the customer"""  
    outside_rth: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Outside RTH'), 'exclude': lambda f: f is None }})
    r"""Indicates if order is active outside regular trading hours, where defined. 0 = no (default), 1 = yes"""  
    price: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})
    r"""The order price"""  
    quantity: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Quantity'), 'exclude': lambda f: f is None }})
    r"""The number of units in the order; contracts or shares"""  
    side: Optional[PutAccountsAccountOrdersCustomerOrderIDRequestBodySideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Side'), 'exclude': lambda f: f is None }})
    r"""Buy = '1', Sell = '2'"""  
    time_in_force: Optional[shared_timeinforce_enum.TimeInForceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Time in Force'), 'exclude': lambda f: f is None }})
    r"""Defines order's active lifetime.
    Day = '0'
    GTC (Good till Cancel) = '1'
    IOC (Immediate or Cancel) = '3'
    Open = '2'
    Close = '7'
    """  
    

@dataclasses.dataclass
class PutAccountsAccountOrdersCustomerOrderIDRequest:
    
    account: str = dataclasses.field(metadata={'path_param': { 'field_name': 'account', 'style': 'simple', 'explode': False }})
    r"""Account Number"""  
    customer_order_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'CustomerOrderId', 'style': 'simple', 'explode': False }})
    r"""Customer Order ID"""  
    request_body: PutAccountsAccountOrdersCustomerOrderIDRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Order Parameters"""  
    
class PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum(str, Enum):
    ONE = '1'
    TWO = '2'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PutAccountsAccountOrdersCustomerOrderID200ApplicationJSON:
    
    customer_order_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerOrderId'), 'exclude': lambda f: f is None }})  
    order_qty: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderQty'), 'exclude': lambda f: f is None }})  
    order_type: Optional[shared_ordertype_enum.OrderTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OrderType'), 'exclude': lambda f: f is None }})
    r"""Market = '1'
    Limit = '2'
    Stop = '3'
    StopLimit = '4'
    """  
    price: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Price'), 'exclude': lambda f: f is None }})  
    side: Optional[PutAccountsAccountOrdersCustomerOrderID200ApplicationJSONSideEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Side'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_orderstatus_enum.OrderStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})
    r"""Status of the order
    InvalidOrderStatus = '-1'
    New = '0'
    PartiallyFilled = '1'
    Filled = '2'
    DoneForTheDay = '3'
    Canceled = '4'
    Replaced = '5'
    PendingCancelReplace = '6'
    Stopped = '7'
    Rejected = '8'
    Suspended = '9'
    PendingNew = 'A'
    Calculated = 'B'
    Expired = 'C'
    AcceptedForBidding = 'D'
    PendingReplace = 'E'
    """  
    symbol: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Symbol'), 'exclude': lambda f: f is None }})  
    warning: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Warning'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class PutAccountsAccountOrdersCustomerOrderIDResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    put_accounts_account_orders_customer_order_id_200_application_json_objects: Optional[list[PutAccountsAccountOrdersCustomerOrderID200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Result of order modification attempt"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    