/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The creator's avatar.
 */
export class CommentAuthorImage extends SpeakeasyBase {
  /**
   * The creator's avatar URL.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * The author of this Comment.
 */
export class CommentAuthor extends SpeakeasyBase {
  /**
   * The display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayName" })
  displayName?: string;

  /**
   * The identifier of the creator.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * The creator's avatar.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "image" })
  @Type(() => CommentAuthorImage)
  image?: CommentAuthorImage;

  /**
   * The URL of the creator's Profile page.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Data about the blog containing this comment.
 */
export class CommentBlog extends SpeakeasyBase {
  /**
   * The identifier of the blog containing this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * Data about the comment this is in reply to.
 */
export class CommentInReplyTo extends SpeakeasyBase {
  /**
   * The identified of the parent of this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * Data about the post containing this comment.
 */
export class CommentPost extends SpeakeasyBase {
  /**
   * The identifier of the post containing this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;
}

/**
 * The status of the comment (only populated for admin users).
 */
export enum CommentStatusEnum {
  Live = "LIVE",
  Emptied = "EMPTIED",
  Pending = "PENDING",
  Spam = "SPAM",
}

/**
 * Successful response
 */
export class Comment extends SpeakeasyBase {
  /**
   * The author of this Comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "author" })
  @Type(() => CommentAuthor)
  author?: CommentAuthor;

  /**
   * Data about the blog containing this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "blog" })
  @Type(() => CommentBlog)
  blog?: CommentBlog;

  /**
   * The actual content of the comment. May include HTML markup.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "content" })
  content?: string;

  /**
   * The identifier for this resource.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Data about the comment this is in reply to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "inReplyTo" })
  @Type(() => CommentInReplyTo)
  inReplyTo?: CommentInReplyTo;

  /**
   * The kind of this entry. Always blogger#comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "kind" })
  kind?: string;

  /**
   * Data about the post containing this comment.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "post" })
  @Type(() => CommentPost)
  post?: CommentPost;

  /**
   * RFC 3339 date-time when this comment was published.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "published" })
  published?: string;

  /**
   * The API REST URL to fetch this resource from.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "selfLink" })
  selfLink?: string;

  /**
   * The status of the comment (only populated for admin users).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: CommentStatusEnum;

  /**
   * RFC 3339 date-time when this comment was last updated.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated" })
  updated?: string;
}
