"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class PostV2ThirdPartyLiveFeedItemsRequestBody:
    
    event_occurred_at: str = dataclasses.field(metadata={'form': { 'field_name': 'event_occurred_at' }})
    r"""Equality filters that are applied to the event_occurred_at field. A single filter can be used by itself or combined with other filters to create a range.
    ---CUSTOM---
    {\"keys\":[{\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"gte\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lt\",\"type\":\"iso8601 string\"},{\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\",\"name\":\"lte\",\"type\":\"iso8601 string\"}],\"type\":\"object\"}
    """  
    idempotency_key: str = dataclasses.field(metadata={'form': { 'field_name': 'idempotency_key' }})
    r"""Uniquely provided string specific to this event. This should be a value which can't be duplicated between external systems, meaning that an id is not sufficient."""  
    message: str = dataclasses.field(metadata={'form': { 'field_name': 'message' }})
    r"""The message that relates to the subject. This message should start with a lower-case past-tense verb and end with a period (e.g. \\"received a package.\\"). When live feed items are displayed to users, the subject's name is concatenated with the message and a joining space. Only <a> HTML tags with an \\"href\\" attribute are allowed. Other attributes and tags will be stripped."""  
    subject_id: int = dataclasses.field(metadata={'form': { 'field_name': 'subject_id' }})
    r"""The ID of the subject of the live feed item (i.e. the \\"person\\" id)."""  
    subject_type: str = dataclasses.field(metadata={'form': { 'field_name': 'subject_type' }})
    r"""The type of the subject of the live feed item. Currently only \\"person\\" is supported."""  
    user_guid: str = dataclasses.field(metadata={'form': { 'field_name': 'user_guid' }})
    r"""The guid for the user that this live feed item should be shown to."""  
    

@dataclasses.dataclass
class PostV2ThirdPartyLiveFeedItemsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    