<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class RegionSecurityPolicies 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Inserts a rule into a security policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleResponse
     */
	public function computeRegionSecurityPoliciesAddRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/addRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesAddRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteResponse
     */
	public function computeRegionSecurityPoliciesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all of the ordered rules present in a single specified policy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetResponse
     */
	public function computeRegionSecurityPoliciesGet(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleResponse
     */
	public function computeRegionSecurityPoliciesGetRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/getRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesGetRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyRule = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyRule', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new policy in the specified project using the data included in the request.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertResponse
     */
	public function computeRegionSecurityPoliciesInsert(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all the policies that have been configured for the specified project and region.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListResponse
     */
	public function computeRegionSecurityPoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->securityPolicyList = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\SecurityPolicyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches the specified policy with the data included in the request. To clear fields in the rule, leave the fields empty and specify them in the updateMask. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchResponse
     */
	public function computeRegionSecurityPoliciesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicy1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Patches a rule at the specified priority. To clear fields in the rule, leave the fields empty and specify them in the updateMask.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleResponse
     */
	public function computeRegionSecurityPoliciesPatchRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/patchRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "securityPolicyRule", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesPatchRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a rule at the specified priority.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleResponse
     */
	public function computeRegionSecurityPoliciesRemoveRule(
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/projects/{project}/regions/{region}/securityPolicies/{securityPolicy}/removeRule', \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ComputeRegionSecurityPoliciesRemoveRuleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
}