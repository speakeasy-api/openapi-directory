"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import vpcinfocidrblocksetdetails as shared_vpcinfocidrblocksetdetails
from ..shared import vpcinfoipv6cidrblocksetdetails as shared_vpcinfoipv6cidrblocksetdetails
from ..shared import vpcinfopeeringoptionsdetails as shared_vpcinfopeeringoptionsdetails
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AwsEc2VpcPeeringConnectionVpcInfoDetails:
    r"""Describes a VPC in a VPC peering connection."""
    
    cidr_block: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CidrBlock'), 'exclude': lambda f: f is None }})  
    cidr_block_set: Optional[list[shared_vpcinfocidrblocksetdetails.VpcInfoCidrBlockSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CidrBlockSet'), 'exclude': lambda f: f is None }})  
    ipv6_cidr_block_set: Optional[list[shared_vpcinfoipv6cidrblocksetdetails.VpcInfoIpv6CidrBlockSetDetails]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Ipv6CidrBlockSet'), 'exclude': lambda f: f is None }})  
    owner_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OwnerId'), 'exclude': lambda f: f is None }})  
    peering_options: Optional[shared_vpcinfopeeringoptionsdetails.VpcInfoPeeringOptionsDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PeeringOptions'), 'exclude': lambda f: f is None }})  
    region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Region'), 'exclude': lambda f: f is None }})  
    vpc_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcId'), 'exclude': lambda f: f is None }})  
    