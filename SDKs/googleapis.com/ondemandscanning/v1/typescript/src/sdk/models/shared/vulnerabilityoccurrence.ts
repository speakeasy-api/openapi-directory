/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Cvss } from "./cvss";
import { PackageIssue } from "./packageissue";
import { RelatedUrl } from "./relatedurl";
import { VexAssessment } from "./vexassessment";
import { Expose, Type } from "class-transformer";

/**
 * Output only. CVSS version used to populate cvss_score and severity.
 */
export enum VulnerabilityOccurrenceCvssVersionEnum {
  CvssVersionUnspecified = "CVSS_VERSION_UNSPECIFIED",
  CvssVersion2 = "CVSS_VERSION_2",
  CvssVersion3 = "CVSS_VERSION_3",
}

/**
 * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
 */
export enum VulnerabilityOccurrenceEffectiveSeverityEnum {
  SeverityUnspecified = "SEVERITY_UNSPECIFIED",
  Minimal = "MINIMAL",
  Low = "LOW",
  Medium = "MEDIUM",
  High = "HIGH",
  Critical = "CRITICAL",
}

/**
 * Output only. The note provider assigned severity of this vulnerability.
 */
export enum VulnerabilityOccurrenceSeverityEnum {
  SeverityUnspecified = "SEVERITY_UNSPECIFIED",
  Minimal = "MINIMAL",
  Low = "LOW",
  Medium = "MEDIUM",
  High = "HIGH",
  Critical = "CRITICAL",
}

/**
 * An occurrence of a severity vulnerability on a resource.
 */
export class VulnerabilityOccurrence extends SpeakeasyBase {
  /**
   * Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvssScore" })
  cvssScore?: number;

  /**
   * Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvssV2" })
  @Type(() => Cvss)
  cvssV2?: Cvss;

  /**
   * Output only. CVSS version used to populate cvss_score and severity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvssVersion" })
  cvssVersion?: VulnerabilityOccurrenceCvssVersionEnum;

  /**
   * Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "cvssv3" })
  @Type(() => Cvss)
  cvssv3?: Cvss;

  /**
   * The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "effectiveSeverity" })
  effectiveSeverity?: VulnerabilityOccurrenceEffectiveSeverityEnum;

  /**
   * Output only. Whether at least one of the affected packages has a fix available.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fixAvailable" })
  fixAvailable?: boolean;

  /**
   * Output only. A detailed description of this vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "longDescription" })
  longDescription?: string;

  /**
   * Required. The set of affected locations and their fixes (if available) within the associated resource.
   */
  @SpeakeasyMetadata({ elemType: PackageIssue })
  @Expose({ name: "packageIssue" })
  @Type(() => PackageIssue)
  packageIssue?: PackageIssue[];

  /**
   * Output only. URLs related to this vulnerability.
   */
  @SpeakeasyMetadata({ elemType: RelatedUrl })
  @Expose({ name: "relatedUrls" })
  @Type(() => RelatedUrl)
  relatedUrls?: RelatedUrl[];

  /**
   * Output only. The note provider assigned severity of this vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "severity" })
  severity?: VulnerabilityOccurrenceSeverityEnum;

  /**
   * Output only. A one sentence description of this vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "shortDescription" })
  shortDescription?: string;

  /**
   * The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  /**
   * VexAssessment provides all publisher provided Vex information that is related to this vulnerability.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vexAssessment" })
  @Type(() => VexAssessment)
  vexAssessment?: VexAssessment;
}
