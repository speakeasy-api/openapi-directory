/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PatchInstanceFilterGroupLabel } from "./patchinstancefiltergrouplabel";
import { Expose, Type } from "class-transformer";

/**
 * A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
 */
export class PatchInstanceFilter extends SpeakeasyBase {
  /**
   * Target all VM instances in the project. If true, no other criteria is permitted.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "all" })
  all?: boolean;

  /**
   * Targets VM instances matching at least one of these label sets. This allows targeting of disparate groups, for example "env=prod or env=staging".
   */
  @SpeakeasyMetadata({ elemType: PatchInstanceFilterGroupLabel })
  @Expose({ name: "groupLabels" })
  @Type(() => PatchInstanceFilterGroupLabel)
  groupLabels?: PatchInstanceFilterGroupLabel[];

  /**
   * Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix="prod-".
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instanceNamePrefixes" })
  instanceNamePrefixes?: string[];

  /**
   * Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "instances" })
  instances?: string[];

  /**
   * Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "zones" })
  zones?: string[];
}
