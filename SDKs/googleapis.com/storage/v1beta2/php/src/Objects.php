<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Objects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Concatenates a list of existing objects into a new object in the same bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeResponse
     */
	public function storageObjectsCompose(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{destinationBucket}/o/{destinationObject}/compose', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "composeRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsComposeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Copies an object to a destination in the same location. Optionally overrides metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyResponse
     */
	public function storageObjectsCopy(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "object", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsCopyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes data blobs and associated metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteResponse
     */
	public function storageObjectsDelete(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o/{object}', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Retrieves objects or their associated metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetResponse
     */
	public function storageObjectsGet(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o/{object}', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stores new data blobs and associated metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertResponse
     */
	public function storageObjectsInsert(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "raw");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsInsertResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a list of objects matching the criteria.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListResponse
     */
	public function storageObjectsList(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->objects = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Objects', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a data blob's associated metadata. This method supports patch semantics.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchResponse
     */
	public function storageObjectsPatch(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o/{object}', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "object1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a data blob's associated metadata.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateResponse
     */
	public function storageObjectsUpdate(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o/{object}', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "object1", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->object = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Object', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Watch for changes on all objects in a bucket.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllResponse
     */
	public function storageObjectsWatchAll(
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/b/{bucket}/o/watch', \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "channel", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\StorageObjectsWatchAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Channel', 'json');
            }
        }

        return $response;
    }
}