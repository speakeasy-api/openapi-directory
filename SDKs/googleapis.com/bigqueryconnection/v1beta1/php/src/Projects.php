<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/connections', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes connection and associated credential.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsDelete(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns specified connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsGet(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->connection = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Connection', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsGetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:getIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "getIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsGetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns a list of connections in the given project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsList(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/connections', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConnectionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConnectionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsSetIamPolicy(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:setIamPolicy', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "setIamPolicyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsSetIamPolicyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->policy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Policy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsTestIamPermissions(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{resource}:testIamPermissions', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "testIamPermissionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsTestIamPermissionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->testIamPermissionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TestIamPermissionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Sets the credential for the specified connection.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialResponse
     */
	public function bigqueryconnectionProjectsLocationsConnectionsUpdateCredential(
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "connectionCredential", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BigqueryconnectionProjectsLocationsConnectionsUpdateCredentialResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->empty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
}