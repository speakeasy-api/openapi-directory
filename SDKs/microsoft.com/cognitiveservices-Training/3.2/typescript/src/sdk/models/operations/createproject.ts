/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

/**
 * The type of classifier to create for this project.
 */
export enum CreateProjectClassificationTypeEnum {
  Multiclass = "Multiclass",
  Multilabel = "Multilabel",
}

export enum CreateProjectTargetExportPlatformsEnum {
  CoreML = "CoreML",
  TensorFlow = "TensorFlow",
  DockerFile = "DockerFile",
  Onnx = "ONNX",
  Vaidk = "VAIDK",
}

export class CreateProjectRequest extends SpeakeasyBase {
  /**
   * The type of classifier to create for this project.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=classificationType",
  })
  classificationType?: CreateProjectClassificationTypeEnum;

  /**
   * The description of the project.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=description",
  })
  description?: string;

  /**
   * The id of the domain to use for this project. Defaults to General.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=domainId",
  })
  domainId?: string;

  /**
   * Name of the project.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name: string;

  /**
   * List of platforms the trained model is intending exporting to.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=false;name=targetExportPlatforms",
  })
  targetExportPlatforms?: CreateProjectTargetExportPlatformsEnum[];
}

export class CreateProjectResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Error response
   */
  @SpeakeasyMetadata()
  customVisionError?: shared.CustomVisionError;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  project?: shared.Project;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
