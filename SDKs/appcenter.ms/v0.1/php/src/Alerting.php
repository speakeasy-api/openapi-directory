<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Alerting 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get project issue related to a crash group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashResponse
     */
	public function bugTrackerGetRepoIssueFromCrash(
        \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/bugtracker/crashGroup/{crash_group_id}', \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bugTrackerGetRepoIssueFromCrash200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrash200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bugTrackerGetRepoIssueFromCrashDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BugTrackerGetRepoIssueFromCrashDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get bug tracker settings for a particular app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsResponse
     */
	public function bugtrackerGetSettings(
        \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/bugtracker', \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bugtrackerGetSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettings200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bugtrackerGetSettingsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\BugtrackerGetSettingsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Email notification settings of user for a particular app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsResponse
     */
	public function notificationsGetAppEmailSettings(
        \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/notifications/emailSettings', \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsGetAppEmailSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettings200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsGetAppEmailSettingsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NotificationsGetAppEmailSettingsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Default email notification settings for the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsResponse
     */
	public function notificationsGetUserEmailSettings(
        \OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/user/notifications/emailSettings');
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsGetUserEmailSettings200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettings200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->notificationsGetUserEmailSettingsDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\NotificationsGetUserEmailSettingsDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get web hooks configured for a particular app
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\WebhooksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\WebhooksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\WebhooksListResponse
     */
	public function webhooksList(
        \OpenAPI\OpenAPI\Models\Operations\WebhooksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\WebhooksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\WebhooksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v0.1/apps/{owner_name}/{app_name}/webhooks', \OpenAPI\OpenAPI\Models\Operations\WebhooksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\WebhooksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhooksList200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WebhooksList200ApplicationJSON', 'json');
            }
        }
        else {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhooksListDefaultApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\WebhooksListDefaultApplicationJSON', 'json');
            }
        }

        return $response;
    }
}