/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import java.net.http.HttpResponse;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;

/**
 * Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.
 * 
 * Schema Response Actions have a  few different triggers to cause state transitions:
 * 
 *   - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,
 *   this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's
 *   Registration to either approved or reject the Schema Response.
 * 
 *   - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this
 *   makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that
 *   are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger
 *   will transition the Schema Response to `pending_moderation`.
 * 
 *   - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`
 *   state. This trigger is only valid for Schema Responses that are associated with a Registration that has
 *   Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 * 
 *   - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an
 *   `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.
 * 
 *   - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an
 *   `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration
 *   that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a
 *   Registration Provider.
 */
public class SchemaResponseActions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public SchemaResponseActions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * A Schema Response Action from a Schema Response
     * Retrieves a Schema Response Action by it's ID.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse getSchemaResponsesSchemaResponseIdActionsSchemaResponseActionId(org.openapis.openapi.models.operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdPathParams.class, baseUrl, "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse res = new org.openapis.openapi.models.operations.GetSchemaResponsesSchemaResponseIdActionsSchemaResponseActionIdResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Create a new Schema Response Action
     * This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.PostSchemaResponsesSchemaResponseIdActionsResponse postSchemaResponsesSchemaResponseIdActions(org.openapis.openapi.models.operations.PostSchemaResponsesSchemaResponseIdActionsRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.PostSchemaResponsesSchemaResponseIdActionsPathParams.class, baseUrl, "/schema_responses/{schema_response_id}/actions/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.PostSchemaResponsesSchemaResponseIdActionsResponse res = new org.openapis.openapi.models.operations.PostSchemaResponsesSchemaResponseIdActionsResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
        }

        return res;
    }

    /**
     * Retrieve a list of Schema Response Actions for a Schema Response
     * This retrieves a paginated list of all Schema Response Actions created for a Schema Response.
     * #### Returns
     * Returns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.
     * #### Errors
     * If the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.SchemaResponseActionReadResponse schemaResponseActionRead(org.openapis.openapi.models.operations.SchemaResponseActionReadRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.SchemaResponseActionReadPathParams.class, baseUrl, "/schema_responses/{schema_response_id}/actions/", request.pathParams, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.SchemaResponseActionReadResponse res = new org.openapis.openapi.models.operations.SchemaResponseActionReadResponse() {{
            body = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}