// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ItemPurchaseOwnershipEnum - The ownership of the purchased item.
type ItemPurchaseOwnershipEnum string

const (
	ItemPurchaseOwnershipEnumSubscription ItemPurchaseOwnershipEnum = "Subscription"
	ItemPurchaseOwnershipEnumFree         ItemPurchaseOwnershipEnum = "Free"
	ItemPurchaseOwnershipEnumRent         ItemPurchaseOwnershipEnum = "Rent"
	ItemPurchaseOwnershipEnumOwn          ItemPurchaseOwnershipEnum = "Own"
	ItemPurchaseOwnershipEnumNone         ItemPurchaseOwnershipEnum = "None"
)

func (e ItemPurchaseOwnershipEnum) ToPointer() *ItemPurchaseOwnershipEnum {
	return &e
}

func (e *ItemPurchaseOwnershipEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Subscription":
		fallthrough
	case "Free":
		fallthrough
	case "Rent":
		fallthrough
	case "Own":
		fallthrough
	case "None":
		*e = ItemPurchaseOwnershipEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemPurchaseOwnershipEnum: %v", v)
	}
}

// ItemPurchaseResolutionEnum - The resolution of the purchased item.
type ItemPurchaseResolutionEnum string

const (
	ItemPurchaseResolutionEnumSd       ItemPurchaseResolutionEnum = "SD"
	ItemPurchaseResolutionEnumHd720    ItemPurchaseResolutionEnum = "HD-720"
	ItemPurchaseResolutionEnumHd1080   ItemPurchaseResolutionEnum = "HD-1080"
	ItemPurchaseResolutionEnumHd4K     ItemPurchaseResolutionEnum = "HD-4K"
	ItemPurchaseResolutionEnumExternal ItemPurchaseResolutionEnum = "External"
	ItemPurchaseResolutionEnumUnknown  ItemPurchaseResolutionEnum = "Unknown"
)

func (e ItemPurchaseResolutionEnum) ToPointer() *ItemPurchaseResolutionEnum {
	return &e
}

func (e *ItemPurchaseResolutionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SD":
		fallthrough
	case "HD-720":
		fallthrough
	case "HD-1080":
		fallthrough
	case "HD-4K":
		fallthrough
	case "External":
		fallthrough
	case "Unknown":
		*e = ItemPurchaseResolutionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemPurchaseResolutionEnum: %v", v)
	}
}

// ItemPurchaseTypeEnum - The type of item purchased.
type ItemPurchaseTypeEnum string

const (
	ItemPurchaseTypeEnumMovie       ItemPurchaseTypeEnum = "movie"
	ItemPurchaseTypeEnumShow        ItemPurchaseTypeEnum = "show"
	ItemPurchaseTypeEnumSeason      ItemPurchaseTypeEnum = "season"
	ItemPurchaseTypeEnumEpisode     ItemPurchaseTypeEnum = "episode"
	ItemPurchaseTypeEnumProgram     ItemPurchaseTypeEnum = "program"
	ItemPurchaseTypeEnumLink        ItemPurchaseTypeEnum = "link"
	ItemPurchaseTypeEnumTrailer     ItemPurchaseTypeEnum = "trailer"
	ItemPurchaseTypeEnumChannel     ItemPurchaseTypeEnum = "channel"
	ItemPurchaseTypeEnumCustomAsset ItemPurchaseTypeEnum = "customAsset"
)

func (e ItemPurchaseTypeEnum) ToPointer() *ItemPurchaseTypeEnum {
	return &e
}

func (e *ItemPurchaseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "movie":
		fallthrough
	case "show":
		fallthrough
	case "season":
		fallthrough
	case "episode":
		fallthrough
	case "program":
		fallthrough
	case "link":
		fallthrough
	case "trailer":
		fallthrough
	case "channel":
		fallthrough
	case "customAsset":
		*e = ItemPurchaseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ItemPurchaseTypeEnum: %v", v)
	}
}

type ItemPurchase struct {
	// The identifier of the purchased item.
	ID string `json:"id"`
	// The ownership of the purchased item.
	Ownership ItemPurchaseOwnershipEnum `json:"ownership"`
	// The resolution of the purchased item.
	Resolution ItemPurchaseResolutionEnum `json:"resolution"`
	// The title of the purchased item.
	Title string `json:"title"`
	// The type of item purchased.
	Type ItemPurchaseTypeEnum `json:"type"`
}
