// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum - Defines what happens to the task upon failure.
type EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum string

const (
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumUnspecified                EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "UNSPECIFIED"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumIgnore                     EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "IGNORE"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumNone                       EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "NONE"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumFatal                      EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "FATAL"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumFixedInterval              EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "FIXED_INTERVAL"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumLinearBackoff              EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "LINEAR_BACKOFF"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumExponentialBackoff         EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "EXPONENTIAL_BACKOFF"
	EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnumRestartWorkflowWithBackoff EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum = "RESTART_WORKFLOW_WITH_BACKOFF"
)

func (e *EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UNSPECIFIED":
		fallthrough
	case "IGNORE":
		fallthrough
	case "NONE":
		fallthrough
	case "FATAL":
		fallthrough
	case "FIXED_INTERVAL":
		fallthrough
	case "LINEAR_BACKOFF":
		fallthrough
	case "EXPONENTIAL_BACKOFF":
		fallthrough
	case "RESTART_WORKFLOW_WITH_BACKOFF":
		*e = EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum: %s", s)
	}
}

// EnterpriseCrmEventbusProtoFailurePolicy - Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
type EnterpriseCrmEventbusProtoFailurePolicy struct {
	// Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.
	IntervalInSeconds *string `json:"intervalInSeconds,omitempty"`
	// Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.
	MaxNumRetries *int `json:"maxNumRetries,omitempty"`
	// Defines what happens to the task upon failure.
	RetryStrategy *EnterpriseCrmEventbusProtoFailurePolicyRetryStrategyEnum `json:"retryStrategy,omitempty"`
}
