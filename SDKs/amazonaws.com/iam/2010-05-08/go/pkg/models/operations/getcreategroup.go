// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETCreateGroupActionEnum
type GETCreateGroupActionEnum string

const (
	GETCreateGroupActionEnumCreateGroup GETCreateGroupActionEnum = "CreateGroup"
)

func (e GETCreateGroupActionEnum) ToPointer() *GETCreateGroupActionEnum {
	return &e
}

func (e *GETCreateGroupActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateGroup":
		*e = GETCreateGroupActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGroupActionEnum: %v", v)
	}
}

// GETCreateGroupVersionEnum
type GETCreateGroupVersionEnum string

const (
	GETCreateGroupVersionEnumTwoThousandAndTen0508 GETCreateGroupVersionEnum = "2010-05-08"
)

func (e GETCreateGroupVersionEnum) ToPointer() *GETCreateGroupVersionEnum {
	return &e
}

func (e *GETCreateGroupVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-08":
		*e = GETCreateGroupVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETCreateGroupVersionEnum: %v", v)
	}
}

type GETCreateGroupRequest struct {
	Action GETCreateGroupActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// <p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p>
	GroupName string `queryParam:"style=form,explode=true,name=GroupName"`
	// <p> The path to the group. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p>
	Path              *string                   `queryParam:"style=form,explode=true,name=Path"`
	Version           GETCreateGroupVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                   `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                   `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                   `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                   `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                   `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                   `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                   `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETCreateGroupResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
