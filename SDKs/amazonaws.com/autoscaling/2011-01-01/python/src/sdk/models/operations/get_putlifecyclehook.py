"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETPutLifecycleHookActionEnum(str, Enum):
    PUT_LIFECYCLE_HOOK = 'PutLifecycleHook'

class GETPutLifecycleHookVersionEnum(str, Enum):
    TWO_THOUSAND_AND_ELEVEN_01_01 = '2011-01-01'


@dataclasses.dataclass
class GETPutLifecycleHookRequest:
    
    action: GETPutLifecycleHookActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    auto_scaling_group_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'AutoScalingGroupName', 'style': 'form', 'explode': True }})
    r"""The name of the Auto Scaling group."""  
    lifecycle_hook_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'LifecycleHookName', 'style': 'form', 'explode': True }})
    r"""The name of the lifecycle hook."""  
    version: GETPutLifecycleHookVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    default_result: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'DefaultResult', 'style': 'form', 'explode': True }})
    r"""<p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p> <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>"""  
    heartbeat_timeout: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'HeartbeatTimeout', 'style': 'form', 'explode': True }})
    r"""The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour)."""  
    lifecycle_transition: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'LifecycleTransition', 'style': 'form', 'explode': True }})
    r"""<p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p> <ul> <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li> <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li> </ul> <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>"""  
    notification_metadata: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NotificationMetadata', 'style': 'form', 'explode': True }})
    r"""Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target."""  
    notification_target_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'NotificationTargetARN', 'style': 'form', 'explode': True }})
    r"""<p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p> <p>If you specify an empty string, this overrides the current ARN.</p> <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p> <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>\\"Event\\": \\"autoscaling:TEST_NOTIFICATION\\"</code>.</p>"""  
    role_arn: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'RoleARN', 'style': 'form', 'explode': True }})
    r"""<p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p> <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>"""  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETPutLifecycleHookResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    