<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TerminalActionsCompanyLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of Android apps
     * 
     * Returns a list of the Android apps that are available for the company identified in the path. 
     * These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal actions read
     * * Management API—Terminal actions read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsResponse
     */
	public function getCompaniesCompanyIdAndroidApps(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/androidApps', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidAppsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->androidAppsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AndroidAppsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of Android certificates
     * 
     * Returns a list of the Android certificates that are available for the company identified in the path.
     * Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).
     * 
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal actions read
     * * Management API—Terminal actions read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesResponse
     */
	public function getCompaniesCompanyIdAndroidCertificates(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/androidCertificates', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdAndroidCertificatesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->androidCertificatesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AndroidCertificatesResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a list of terminal actions
     * 
     * Returns the [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) that have been scheduled for the company identified in the path.The response doesn't include actions that are scheduled by Adyen.
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal actions read
     * * Management API—Terminal actions read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsResponse
     */
	public function getCompaniesCompanyIdTerminalActions(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalActions', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listExternalTerminalActionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListExternalTerminalActionsResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get terminal action
     * 
     * Returns the details of the [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) identified in the path.
     * To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Terminal actions read
     * * Management API—Terminal actions read and write
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdResponse
     */
	public function getCompaniesCompanyIdTerminalActionsActionId(
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/companies/{companyId}/terminalActions/{actionId}', \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCompaniesCompanyIdTerminalActionsActionIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->externalTerminalAction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ExternalTerminalAction', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}