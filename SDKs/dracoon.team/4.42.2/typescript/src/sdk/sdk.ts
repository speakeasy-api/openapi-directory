/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import { Auth } from "./auth";
import { Config } from "./config";
import { Downloads } from "./downloads";
import { Eventlog } from "./eventlog";
import { Groups } from "./groups";
import { Internal } from "./internal";
import * as shared from "./models/shared";
import { Nodes } from "./nodes";
import { Provisioning } from "./provisioning";
import { Public } from "./public";
import { Resources } from "./resources";
import { Roles } from "./roles";
import { Settings } from "./settings";
import { Shares } from "./shares";
import { SystemAuthConfig } from "./systemauthconfig";
import { SystemPoliciesConfig } from "./systempoliciesconfig";
import { SystemSettingsConfig } from "./systemsettingsconfig";
import { SystemStorageConfig } from "./systemstorageconfig";
import { Uploads } from "./uploads";
import { User } from "./user";
import { Users } from "./users";
import axios, { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["/api"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * The security details required to authenticate the SDK
   */
  security?: shared.Security;
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 */
export class SDK {
  /**
   * Authentication
   */
  public auth: Auth;
  /**
   * Configuration
   */
  public config: Config;
  /**
   * File download without authentication headers
   */
  public downloads: Downloads;
  /**
   * System events log
   */
  public eventlog: Eventlog;
  /**
   * User groups
   */
  public groups: Groups;
  /**
   * Internal non-public APIs
   */
  public internal: Internal;
  /**
   * File system objects (rooms, folders, files)
   */
  public nodes: Nodes;
  /**
   * Provisioning
   */
  public provisioning: Provisioning;
  /**
   * Public API (upload / download shares, software information)
   */
  public public: Public;
  /**
   * Client resources
   */
  public resources: Resources;
  /**
   * Role user management
   */
  public roles: Roles;
  /**
   * Customer settings
   */
  public settings: Settings;
  /**
   * Upload and Download Shares
   */
  public shares: Shares;
  /**
   * System settings (authentication methods)
   */
  public systemAuthConfig: SystemAuthConfig;
  /**
   * System settings (policies)
   */
  public systemPoliciesConfig: SystemPoliciesConfig;
  /**
   * System settings (mail server, logging, branding, default values etc.)
   */
  public systemSettingsConfig: SystemSettingsConfig;
  /**
   * System settings (storage)
   */
  public systemStorageConfig: SystemStorageConfig;
  /**
   * File upload without authentication headers
   */
  public uploads: Uploads;
  /**
   * User operations
   */
  public user: User;
  /**
   * User management
   */
  public users: Users;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    if (props?.security) {
      let security: shared.Security = props.security;
      if (!(props.security instanceof utils.SpeakeasyBase))
        security = new shared.Security(props.security);
      this._securityClient = utils.createSecurityClient(
        this._defaultClient,
        security
      );
    } else {
      this._securityClient = this._defaultClient;
    }

    this.auth = new Auth(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.config = new Config(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.downloads = new Downloads(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.eventlog = new Eventlog(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.groups = new Groups(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.internal = new Internal(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.nodes = new Nodes(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.provisioning = new Provisioning(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.public = new Public(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.resources = new Resources(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.roles = new Roles(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.settings = new Settings(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.shares = new Shares(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.systemAuthConfig = new SystemAuthConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.systemPoliciesConfig = new SystemPoliciesConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.systemSettingsConfig = new SystemSettingsConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.systemStorageConfig = new SystemStorageConfig(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.uploads = new Uploads(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.user = new User(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );

    this.users = new Users(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
