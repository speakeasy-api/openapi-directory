/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CompilationJobStatusEnum } from "./compilationjobstatusenum";
import { TargetDeviceEnum } from "./targetdeviceenum";
import { TargetPlatformAcceleratorEnum } from "./targetplatformacceleratorenum";
import { TargetPlatformArchEnum } from "./targetplatformarchenum";
import { TargetPlatformOsEnum } from "./targetplatformosenum";
import { Expose, Transform } from "class-transformer";

/**
 * A summary of a model compilation job.
 */
export class CompilationJobSummary extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CompilationEndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  compilationEndTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationJobArn" })
  compilationJobArn: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationJobName" })
  compilationJobName: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationJobStatus" })
  compilationJobStatus: CompilationJobStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationStartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  compilationStartTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationTargetDevice" })
  compilationTargetDevice?: TargetDeviceEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationTargetPlatformAccelerator" })
  compilationTargetPlatformAccelerator?: TargetPlatformAcceleratorEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationTargetPlatformArch" })
  compilationTargetPlatformArch?: TargetPlatformArchEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CompilationTargetPlatformOs" })
  compilationTargetPlatformOs?: TargetPlatformOsEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;
}
