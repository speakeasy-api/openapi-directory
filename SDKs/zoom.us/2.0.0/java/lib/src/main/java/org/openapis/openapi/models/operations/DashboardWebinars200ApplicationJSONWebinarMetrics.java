/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * DashboardWebinars200ApplicationJSONWebinarMetrics - Webinar metric details.
 */
public class DashboardWebinars200ApplicationJSONWebinarMetrics {
    /**
     * Custom keys and values assigned to the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_keys")
    public DashboardWebinars200ApplicationJSONWebinarMetricsCustomKeys[] customKeys;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withCustomKeys(DashboardWebinars200ApplicationJSONWebinarMetricsCustomKeys[] customKeys) {
        this.customKeys = customKeys;
        return this;
    }
    
    /**
     * Department of the host.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dept")
    public String dept;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withDept(String dept) {
        this.dept = dept;
        return this;
    }
    
    /**
     * Webinar duration, formatted as hh:mm:ss, for example: `10:00` for ten minutes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public String duration;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withDuration(String duration) {
        this.duration = duration;
        return this;
    }
    
    /**
     * User email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * Webinar end time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("end_time")
    public OffsetDateTime endTime;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }
    
    /**
     * Indicates whether or not TSP was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_3rd_party_audio")
    public Boolean has3rdPartyAudio;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHas3rdPartyAudio(Boolean has3rdPartyAudio) {
        this.has3rdPartyAudio = has3rdPartyAudio;
        return this;
    }
    
    /**
     * Indicates whether or not PSTN was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_pstn")
    public Boolean hasPstn;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasPstn(Boolean hasPstn) {
        this.hasPstn = hasPstn;
        return this;
    }
    
    /**
     * Indicates whether or not recording was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_recording")
    public Boolean hasRecording;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasRecording(Boolean hasRecording) {
        this.hasRecording = hasRecording;
        return this;
    }
    
    /**
     * Indicates whether or not screen sharing was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_screen_share")
    public Boolean hasScreenShare;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasScreenShare(Boolean hasScreenShare) {
        this.hasScreenShare = hasScreenShare;
        return this;
    }
    
    /**
     * Indicates whether or not SIP was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_sip")
    public Boolean hasSip;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasSip(Boolean hasSip) {
        this.hasSip = hasSip;
        return this;
    }
    
    /**
     * Indicates whether or not video was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_video")
    public Boolean hasVideo;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasVideo(Boolean hasVideo) {
        this.hasVideo = hasVideo;
        return this;
    }
    
    /**
     * Indicates whether or not VoIP was used for the Webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_voip")
    public Boolean hasVoip;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHasVoip(Boolean hasVoip) {
        this.hasVoip = hasVoip;
        return this;
    }
    
    /**
     * User display name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host")
    public String host;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withHost(String host) {
        this.host = host;
        return this;
    }
    
    /**
     * Webinar ID in "**long**" format(represented as int64 data type in JSON), also known as the webinar number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Webinar participant count.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participants")
    public Long participants;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withParticipants(Long participants) {
        this.participants = participants;
        return this;
    }
    
    /**
     * Webinar start time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("start_time")
    public OffsetDateTime startTime;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }
    
    /**
     * Webinar topic.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("topic")
    public String topic;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withTopic(String topic) {
        this.topic = topic;
        return this;
    }
    
    /**
     * User type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_type")
    public String userType;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withUserType(String userType) {
        this.userType = userType;
        return this;
    }
    
    /**
     * Webinar UUID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    public String uuid;
    public DashboardWebinars200ApplicationJSONWebinarMetrics withUuid(String uuid) {
        this.uuid = uuid;
        return this;
    }
    
}
