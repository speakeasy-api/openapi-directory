"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import publicuploadedfiledata as shared_publicuploadedfiledata
from ..shared import useruserpublickeylist as shared_useruserpublickeylist
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublicUploadShare:
    r"""Upload Share information"""
    
    created_at: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})
    r"""Creation date"""  
    creator_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorName') }})
    r"""&#128640; Since v4.11.0
    
    Creator name
    """  
    is_protected: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isProtected') }})
    r"""Is share protected by password"""  
    creator_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorUsername'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Creator username
    """  
    expire_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expireAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Expiration date"""  
    is_encrypted: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isEncrypted'), 'exclude': lambda f: f is None }})
    r"""Encryption state"""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Share display name (alias name)"""  
    notes: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('notes'), 'exclude': lambda f: f is None }})
    r"""User notes"""  
    remaining_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingSize'), 'exclude': lambda f: f is None }})
    r"""Remaining size"""  
    remaining_slots: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remainingSlots'), 'exclude': lambda f: f is None }})
    r"""Remaining slots"""  
    show_uploaded_files: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('showUploadedFiles'), 'exclude': lambda f: f is None }})
    r"""Allow display of already uploaded files"""  
    uploaded_files: Optional[list[shared_publicuploadedfiledata.PublicUploadedFileData]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('uploadedFiles'), 'exclude': lambda f: f is None }})
    r"""List of (public) uploaded files"""  
    user_user_public_key_list: Optional[shared_useruserpublickeylist.UserUserPublicKeyList] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userUserPublicKeyList'), 'exclude': lambda f: f is None }})
    r"""List of user public keys"""  
    