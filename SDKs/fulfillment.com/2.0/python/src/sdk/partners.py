"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Partners:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def put_orders_id_ship(self, request: operations.PutOrdersIDShipRequest, security: operations.PutOrdersIDShipSecurity) -> operations.PutOrdersIDShipResponse:
        r"""Ship an Order
        Note, this API is used to update orders and is reserved for our shipping partners.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrdersIDShipRequest, base_url, '/orders/{id}/ship', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrdersIDShipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OneordersPostResponses201ContentApplication1jsonSchema])
                res.oneorders_post_responses_201_content_application_1json_schema = out
        elif http_res.status_code == 404:
            pass

        return res

    def put_orders_id_status(self, request: operations.PutOrdersIDStatusRequest, security: operations.PutOrdersIDStatusSecurity) -> operations.PutOrdersIDStatusResponse:
        r"""Update Order Status
        Note, this API is used to update orders and is reserved for our shipping partners.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.PutOrdersIDStatusRequest, base_url, '/orders/{id}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PutOrdersIDStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.OneordersPostResponses201ContentApplication1jsonSchema])
                res.oneorders_post_responses_201_content_application_1json_schema = out
        elif http_res.status_code == 404:
            pass

        return res

    