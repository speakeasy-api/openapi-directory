/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Issue - Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
public class Issue {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_lock_reason")
    public String activeLockReason;

    public Issue withActiveLockReason(String activeLockReason) {
        this.activeLockReason = activeLockReason;
        return this;
    }
    
    /**
     * Simple User
     */
    @JsonProperty("assignee")
    public NullableSimpleUser assignee;

    public Issue withAssignee(NullableSimpleUser assignee) {
        this.assignee = assignee;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assignees")
    public SimpleUser[] assignees;

    public Issue withAssignees(SimpleUser[] assignees) {
        this.assignees = assignees;
        return this;
    }
    
    /**
     * How the author is associated with the repository.
     */
    @JsonProperty("author_association")
    public AuthorAssociationEnum authorAssociation;

    public Issue withAuthorAssociation(AuthorAssociationEnum authorAssociation) {
        this.authorAssociation = authorAssociation;
        return this;
    }
    
    /**
     * Contents of the issue
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    public String body;

    public Issue withBody(String body) {
        this.body = body;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_html")
    public String bodyHtml;

    public Issue withBodyHtml(String bodyHtml) {
        this.bodyHtml = bodyHtml;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body_text")
    public String bodyText;

    public Issue withBodyText(String bodyText) {
        this.bodyText = bodyText;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("closed_at")
    public OffsetDateTime closedAt;

    public Issue withClosedAt(OffsetDateTime closedAt) {
        this.closedAt = closedAt;
        return this;
    }
    
    /**
     * Simple User
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_by")
    public NullableSimpleUser closedBy;

    public Issue withClosedBy(NullableSimpleUser closedBy) {
        this.closedBy = closedBy;
        return this;
    }
    
    @JsonProperty("comments")
    public Long comments;

    public Issue withComments(Long comments) {
        this.comments = comments;
        return this;
    }
    
    @JsonProperty("comments_url")
    public String commentsUrl;

    public Issue withCommentsUrl(String commentsUrl) {
        this.commentsUrl = commentsUrl;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Issue withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonProperty("events_url")
    public String eventsUrl;

    public Issue withEventsUrl(String eventsUrl) {
        this.eventsUrl = eventsUrl;
        return this;
    }
    
    @JsonProperty("html_url")
    public String htmlUrl;

    public Issue withHtmlUrl(String htmlUrl) {
        this.htmlUrl = htmlUrl;
        return this;
    }
    
    @JsonProperty("id")
    public Long id;

    public Issue withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
     */
    @JsonProperty("labels")
    public Object[] labels;

    public Issue withLabels(Object[] labels) {
        this.labels = labels;
        return this;
    }
    
    @JsonProperty("labels_url")
    public String labelsUrl;

    public Issue withLabelsUrl(String labelsUrl) {
        this.labelsUrl = labelsUrl;
        return this;
    }
    
    @JsonProperty("locked")
    public Boolean locked;

    public Issue withLocked(Boolean locked) {
        this.locked = locked;
        return this;
    }
    
    /**
     * A collection of related issues and pull requests.
     */
    @JsonProperty("milestone")
    public NullableMilestone milestone;

    public Issue withMilestone(NullableMilestone milestone) {
        this.milestone = milestone;
        return this;
    }
    
    @JsonProperty("node_id")
    public String nodeId;

    public Issue withNodeId(String nodeId) {
        this.nodeId = nodeId;
        return this;
    }
    
    /**
     * Number uniquely identifying the issue within its repository
     */
    @JsonProperty("number")
    public Long number;

    public Issue withNumber(Long number) {
        this.number = number;
        return this;
    }
    
    /**
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("performed_via_github_app")
    public NullableIntegration performedViaGithubApp;

    public Issue withPerformedViaGithubApp(NullableIntegration performedViaGithubApp) {
        this.performedViaGithubApp = performedViaGithubApp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pull_request")
    public IssuePullRequest pullRequest;

    public Issue withPullRequest(IssuePullRequest pullRequest) {
        this.pullRequest = pullRequest;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reactions")
    public ReactionRollup reactions;

    public Issue withReactions(ReactionRollup reactions) {
        this.reactions = reactions;
        return this;
    }
    
    /**
     * A git repository
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("repository")
    public Repository repository;

    public Issue withRepository(Repository repository) {
        this.repository = repository;
        return this;
    }
    
    @JsonProperty("repository_url")
    public String repositoryUrl;

    public Issue withRepositoryUrl(String repositoryUrl) {
        this.repositoryUrl = repositoryUrl;
        return this;
    }
    
    /**
     * State of the issue; either 'open' or 'closed'
     */
    @JsonProperty("state")
    public String state;

    public Issue withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeline_url")
    public String timelineUrl;

    public Issue withTimelineUrl(String timelineUrl) {
        this.timelineUrl = timelineUrl;
        return this;
    }
    
    /**
     * Title of the issue
     */
    @JsonProperty("title")
    public String title;

    public Issue withTitle(String title) {
        this.title = title;
        return this;
    }
    
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public Issue withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    /**
     * URL for the issue
     */
    @JsonProperty("url")
    public String url;

    public Issue withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * Simple User
     */
    @JsonProperty("user")
    public NullableSimpleUser user;

    public Issue withUser(NullableSimpleUser user) {
        this.user = user;
        return this;
    }
    
    public Issue(@JsonProperty("assignee") NullableSimpleUser assignee, @JsonProperty("author_association") AuthorAssociationEnum authorAssociation, @JsonProperty("closed_at") OffsetDateTime closedAt, @JsonProperty("comments") Long comments, @JsonProperty("comments_url") String commentsUrl, @JsonProperty("created_at") OffsetDateTime createdAt, @JsonProperty("events_url") String eventsUrl, @JsonProperty("html_url") String htmlUrl, @JsonProperty("id") Long id, @JsonProperty("labels") Object[] labels, @JsonProperty("labels_url") String labelsUrl, @JsonProperty("locked") Boolean locked, @JsonProperty("milestone") NullableMilestone milestone, @JsonProperty("node_id") String nodeId, @JsonProperty("number") Long number, @JsonProperty("repository_url") String repositoryUrl, @JsonProperty("state") String state, @JsonProperty("title") String title, @JsonProperty("updated_at") OffsetDateTime updatedAt, @JsonProperty("url") String url, @JsonProperty("user") NullableSimpleUser user) {
        this.assignee = assignee;
        this.authorAssociation = authorAssociation;
        this.closedAt = closedAt;
        this.comments = comments;
        this.commentsUrl = commentsUrl;
        this.createdAt = createdAt;
        this.eventsUrl = eventsUrl;
        this.htmlUrl = htmlUrl;
        this.id = id;
        this.labels = labels;
        this.labelsUrl = labelsUrl;
        this.locked = locked;
        this.milestone = milestone;
        this.nodeId = nodeId;
        this.number = number;
        this.repositoryUrl = repositoryUrl;
        this.state = state;
        this.title = title;
        this.updatedAt = updatedAt;
        this.url = url;
        this.user = user;
  }
}
