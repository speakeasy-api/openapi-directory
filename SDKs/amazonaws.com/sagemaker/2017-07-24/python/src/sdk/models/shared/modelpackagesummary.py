"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import modelapprovalstatus_enum as shared_modelapprovalstatus_enum
from ..shared import modelpackagestatus_enum as shared_modelpackagestatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModelPackageSummary:
    r"""Provides summary information about a model package."""
    
    creation_time: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreationTime'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso') }})  
    model_package_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageArn') }})  
    model_package_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageName') }})  
    model_package_status: shared_modelpackagestatus_enum.ModelPackageStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageStatus') }})  
    model_approval_status: Optional[shared_modelapprovalstatus_enum.ModelApprovalStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelApprovalStatus'), 'exclude': lambda f: f is None }})  
    model_package_description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageDescription'), 'exclude': lambda f: f is None }})  
    model_package_group_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageGroupName'), 'exclude': lambda f: f is None }})  
    model_package_version: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ModelPackageVersion'), 'exclude': lambda f: f is None }})  
    