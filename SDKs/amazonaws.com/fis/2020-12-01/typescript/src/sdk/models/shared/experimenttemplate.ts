/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { ExperimentTemplateAction } from "./experimenttemplateaction";
import { ExperimentTemplateLogConfiguration } from "./experimenttemplatelogconfiguration";
import { ExperimentTemplateStopCondition } from "./experimenttemplatestopcondition";
import { ExperimentTemplateTarget } from "./experimenttemplatetarget";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Describes an experiment template.
 */
export class ExperimentTemplate extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: ExperimentTemplateAction })
  @Expose({ name: "actions" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ExperimentTemplateAction> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ExperimentTemplateAction);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  actions?: Record<string, ExperimentTemplateAction>;

  @SpeakeasyMetadata()
  @Expose({ name: "creationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "lastUpdateTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdateTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "logConfiguration" })
  @Type(() => ExperimentTemplateLogConfiguration)
  logConfiguration?: ExperimentTemplateLogConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "roleArn" })
  roleArn?: string;

  @SpeakeasyMetadata({ elemType: ExperimentTemplateStopCondition })
  @Expose({ name: "stopConditions" })
  @Type(() => ExperimentTemplateStopCondition)
  stopConditions?: ExperimentTemplateStopCondition[];

  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: ExperimentTemplateTarget })
  @Expose({ name: "targets" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, ExperimentTemplateTarget> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], ExperimentTemplateTarget);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  targets?: Record<string, ExperimentTemplateTarget>;
}
