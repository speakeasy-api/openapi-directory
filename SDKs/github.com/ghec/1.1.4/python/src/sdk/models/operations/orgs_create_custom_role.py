"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import basic_error as shared_basic_error
from ..shared import organization_custom_repository_role as shared_organization_custom_repository_role
from ..shared import validation_error as shared_validation_error
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class OrgsCreateCustomRoleRequestBodyBaseRoleEnum(str, Enum):
    r"""The system role from which this role inherits permissions."""
    READ = 'read'
    TRIAGE = 'triage'
    WRITE = 'write'
    MAINTAIN = 'maintain'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class OrgsCreateCustomRoleRequestBody:
    
    base_role: OrgsCreateCustomRoleRequestBodyBaseRoleEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('base_role') }})
    r"""The system role from which this role inherits permissions."""  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the custom role."""  
    permissions: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('permissions') }})
    r"""A list of additional permissions included in this role."""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""A short description about the intended usage of this role or what permissions it grants."""  
    

@dataclasses.dataclass
class OrgsCreateCustomRoleRequest:
    
    org: str = dataclasses.field(metadata={'path_param': { 'field_name': 'org', 'style': 'simple', 'explode': False }})
    r"""The organization name. The name is not case sensitive."""  
    request_body: OrgsCreateCustomRoleRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclasses.dataclass
class OrgsCreateCustomRoleResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    basic_error: Optional[shared_basic_error.BasicError] = dataclasses.field(default=None)
    r"""Resource not found"""  
    organization_custom_repository_role: Optional[shared_organization_custom_repository_role.OrganizationCustomRepositoryRole] = dataclasses.field(default=None)
    r"""Response"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    validation_error: Optional[shared_validation_error.ValidationError] = dataclasses.field(default=None)
    r"""Validation failed, or the endpoint has been spammed."""  
    