"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from enum import Enum
from marshmallow import fields
from sdk import utils
from typing import Optional

class ExternalEventEntityEventTypeEnum(str, Enum):
    r"""Type of event being recorded."""
    LDAP_SYNC = 'ldap_sync'
    REMOTE_SERVER_SYNC = 'remote_server_sync'
    LOCKOUT = 'lockout'
    LDAP_LOGIN = 'ldap_login'
    SAML_LOGIN = 'saml_login'
    CLIENT_LOG = 'client_log'
    PENDING_WORK = 'pending_work'

class ExternalEventEntityStatusEnum(str, Enum):
    r"""Status of event."""
    SUCCESS = 'success'
    FAILURE = 'failure'
    PARTIAL_FAILURE = 'partial_failure'
    IN_PROGRESS = 'in_progress'
    SKIPPED = 'skipped'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ExternalEventEntity:
    r"""List External Events"""
    
    body: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body'), 'exclude': lambda f: f is None }})
    r"""Event body"""  
    body_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('body_url'), 'exclude': lambda f: f is None }})
    r"""Link to log file."""  
    bytes_synced: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bytes_synced'), 'exclude': lambda f: f is None }})
    r"""For sync events, the total number of bytes synced."""  
    created_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""External event create date/time"""  
    errored_files: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errored_files'), 'exclude': lambda f: f is None }})
    r"""For sync events, the number of files that encountered errors."""  
    event_type: Optional[ExternalEventEntityEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event_type'), 'exclude': lambda f: f is None }})
    r"""Type of event being recorded."""  
    folder_behavior_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('folder_behavior_id'), 'exclude': lambda f: f is None }})
    r"""Folder Behavior ID"""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""Event ID"""  
    remote_server_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('remote_server_type'), 'exclude': lambda f: f is None }})
    r"""Associated Remote Server type, if any"""  
    status: Optional[ExternalEventEntityStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of event."""  
    successful_files: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('successful_files'), 'exclude': lambda f: f is None }})
    r"""For sync events, the number of files handled successfully."""  
    