"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EcoCertificationAwardedExceptionEnum(str, Enum):
    r"""Awarded exception."""
    EXCEPTION_UNSPECIFIED = 'EXCEPTION_UNSPECIFIED'
    UNDER_CONSTRUCTION = 'UNDER_CONSTRUCTION'
    DEPENDENT_ON_SEASON = 'DEPENDENT_ON_SEASON'
    DEPENDENT_ON_DAY_OF_WEEK = 'DEPENDENT_ON_DAY_OF_WEEK'

class EcoCertificationEcoCertificateEnum(str, Enum):
    r"""Required. The eco certificate."""
    ECO_CERTIFICATE_UNSPECIFIED = 'ECO_CERTIFICATE_UNSPECIFIED'
    ISO14001 = 'ISO14001'
    ISO50001 = 'ISO50001'
    ASIAN_ECOTOURISM = 'ASIAN_ECOTOURISM'
    BIOSPHERE_RESPOSNIBLE_TOURISM = 'BIOSPHERE_RESPOSNIBLE_TOURISM'
    BUREAU_VERITAS = 'BUREAU_VERITAS'
    CONTROL_UNION = 'CONTROL_UNION'
    EARTHCHECK = 'EARTHCHECK'
    ECO_CERTIFICATION_MALTA = 'ECO_CERTIFICATION_MALTA'
    ECOTOURISM_AUSTRALIAS_ECO = 'ECOTOURISM_AUSTRALIAS_ECO'
    GREAT_GREEN_DEAL = 'GREAT_GREEN_DEAL'
    GREEN_GLOBE = 'GREEN_GLOBE'
    GREEN_GROWTH2050 = 'GREEN_GROWTH2050'
    GREEN_KEY = 'GREEN_KEY'
    GREEN_KEY_ECO_RATING = 'GREEN_KEY_ECO_RATING'
    GREEN_SEAL = 'GREEN_SEAL'
    GREEN_STAR = 'GREEN_STAR'
    GREEN_TOURISM_ACTIVE = 'GREEN_TOURISM_ACTIVE'
    HILTON_LIGHTSTAY = 'HILTON_LIGHTSTAY'
    HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY = 'HOSTELLING_INTERNATIONALS_QUALITY_AND_SUSTAINABILITY'
    HOTELES_MAS_VERDES = 'HOTELES_MAS_VERDES'
    NORDIC_SWAN_ECOLABEL = 'NORDIC_SWAN_ECOLABEL'
    PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM = 'PREFERRED_BY_NATURE_SUSTAINABLE_TOURISM'
    SUSTAINABLE_TRAVEL_IRELAND = 'SUSTAINABLE_TRAVEL_IRELAND'
    TOF_TIGERS_INITITIVES_PUG = 'TOF_TIGERS_INITITIVES_PUG'
    TRAVELIFE = 'TRAVELIFE'
    UNITED_CERTIFICATION_SYSTEMS_LIMITED = 'UNITED_CERTIFICATION_SYSTEMS_LIMITED'
    VIREO_SRL = 'VIREO_SRL'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EcoCertification:
    r"""An eco certificate awarded to the hotel."""
    
    awarded: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awarded'), 'exclude': lambda f: f is None }})
    r"""Whether the eco certificate was awarded or not."""  
    awarded_exception: Optional[EcoCertificationAwardedExceptionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('awardedException'), 'exclude': lambda f: f is None }})
    r"""Awarded exception."""  
    eco_certificate: Optional[EcoCertificationEcoCertificateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ecoCertificate'), 'exclude': lambda f: f is None }})
    r"""Required. The eco certificate."""  
    