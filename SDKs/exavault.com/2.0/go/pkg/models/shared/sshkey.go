// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SSHKeyRelationshipsOwnerUserData struct {
	ID   *int64  `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

type SSHKeyRelationshipsOwnerUser struct {
	Data *SSHKeyRelationshipsOwnerUserData `json:"data,omitempty"`
}

type SSHKeyRelationships struct {
	OwnerUser *SSHKeyRelationshipsOwnerUser `json:"ownerUser,omitempty"`
}

// SSHKeyTypeEnum - Type of the object.
type SSHKeyTypeEnum string

const (
	SSHKeyTypeEnumSSHKey SSHKeyTypeEnum = "sshKey"
)

func (e *SSHKeyTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sshKey":
		*e = SSHKeyTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for SSHKeyTypeEnum: %s", s)
	}
}

// SSHKey - Object representing an SSH Key associated with a user.
type SSHKey struct {
	Attributes *SSHKeyAttributes `json:"attributes,omitempty"`
	// ID of the key.
	ID            *int                 `json:"id,omitempty"`
	Relationships *SSHKeyRelationships `json:"relationships,omitempty"`
	// Type of the object.
	Type *SSHKeyTypeEnum `json:"type,omitempty"`
}
