/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { CreateFileCacheLustreConfiguration } from "./createfilecachelustreconfiguration";
import { FileCacheDataRepositoryAssociation } from "./filecachedatarepositoryassociation";
import { FileCacheTypeEnum } from "./filecachetypeenum";
import { Tag } from "./tag";
import { Expose, Type } from "class-transformer";

export class CreateFileCacheRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ClientRequestToken" })
  clientRequestToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "CopyTagsToDataRepositoryAssociations" })
  copyTagsToDataRepositoryAssociations?: boolean;

  @SpeakeasyMetadata({ elemType: FileCacheDataRepositoryAssociation })
  @Expose({ name: "DataRepositoryAssociations" })
  @Type(() => FileCacheDataRepositoryAssociation)
  dataRepositoryAssociations?: FileCacheDataRepositoryAssociation[];

  @SpeakeasyMetadata()
  @Expose({ name: "FileCacheType" })
  fileCacheType: FileCacheTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "FileCacheTypeVersion" })
  fileCacheTypeVersion: string;

  @SpeakeasyMetadata()
  @Expose({ name: "KmsKeyId" })
  kmsKeyId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "LustreConfiguration" })
  @Type(() => CreateFileCacheLustreConfiguration)
  lustreConfiguration?: CreateFileCacheLustreConfiguration;

  @SpeakeasyMetadata()
  @Expose({ name: "SecurityGroupIds" })
  securityGroupIds?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "StorageCapacity" })
  storageCapacity: number;

  /**
   * A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SubnetIds" })
  subnetIds: string[];

  /**
   * A list of <code>Tag</code> values, with a maximum of 50 elements.
   */
  @SpeakeasyMetadata({ elemType: Tag })
  @Expose({ name: "Tags" })
  @Type(() => Tag)
  tags?: Tag[];
}
