/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Location - A location. See the [help center article] (https://support.google.com/business/answer/3038177) for a detailed description of these fields, or the [category endpoint](/my-business/reference/rest/v4/categories) for a list of valid business categories.
 */
public class Location {
    /**
     * Additional information that is surfaced in AdWords.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("adWordsLocationExtensions")
    public AdWordsLocationExtensions adWordsLocationExtensions;
    public Location withAdWordsLocationExtensions(AdWordsLocationExtensions adWordsLocationExtensions) {
        this.adWordsLocationExtensions = adWordsLocationExtensions;
        return this;
    }
    
    /**
     * A collection of categories that describes the business. During updates, both fields must be set. Clients are prohibited from individually updating the primary or additional categories using the update mask.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("categories")
    public Categories categories;
    public Location withCategories(Categories categories) {
        this.categories = categories;
        return this;
    }
    
    /**
     * Optional. A collection of free-form strings to allow you to tag your business. These labels are NOT user facing; only you can see them. Must be between 1-255 characters per label.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("labels")
    public String[] labels;
    public Location withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * Immutable. The language of the location. Set during creation and not updateable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    public String languageCode;
    public Location withLanguageCode(String languageCode) {
        this.languageCode = languageCode;
        return this;
    }
    
    /**
     * An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latlng")
    public LatLng latlng;
    public Location withLatlng(LatLng latlng) {
        this.latlng = latlng;
        return this;
    }
    
    /**
     * Additional non-user-editable information about the location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public Metadata metadata;
    public Location withMetadata(Metadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * Optional. More hours for a business's different departments or specific customers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("moreHours")
    public MoreHours[] moreHours;
    public Location withMoreHours(MoreHours[] moreHours) {
        this.moreHours = moreHours;
        return this;
    }
    
    /**
     * Google identifier for this location in the form: `locations/{location_id}`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Location withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Information related to the opening state of the business.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("openInfo")
    public OpenInfo openInfo;
    public Location withOpenInfo(OpenInfo openInfo) {
        this.openInfo = openInfo;
        return this;
    }
    
    /**
     * A collection of phone numbers for the business. During updates, both fields must be set. Clients may not update just the primary or additional phone numbers using the update mask. International phone format is preferred, such as "+1 415 555 0132", see more in (https://developers.google.com/style/phone-numbers#international-phone-numbers).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    public PhoneNumbers phoneNumbers;
    public Location withPhoneNumbers(PhoneNumbers phoneNumbers) {
        this.phoneNumbers = phoneNumbers;
        return this;
    }
    
    /**
     * All information pertaining to the location's profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    public Profile profile;
    public Location withProfile(Profile profile) {
        this.profile = profile;
        return this;
    }
    
    /**
     * Represents the time periods that this location is open for business. Holds a collection of TimePeriod instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regularHours")
    public BusinessHours regularHours;
    public Location withRegularHours(BusinessHours regularHours) {
        this.regularHours = regularHours;
        return this;
    }
    
    /**
     * Information of all parent and children locations related to this one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relationshipData")
    public RelationshipData relationshipData;
    public Location withRelationshipData(RelationshipData relationshipData) {
        this.relationshipData = relationshipData;
        return this;
    }
    
    /**
     * Service area businesses provide their service at the customer's location (for example, a locksmith or plumber).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceArea")
    public ServiceAreaBusiness serviceArea;
    public Location withServiceArea(ServiceAreaBusiness serviceArea) {
        this.serviceArea = serviceArea;
        return this;
    }
    
    /**
     * Optional. List of services supported by merchants. A service can be haircut, install water heater, etc. Duplicated service items will be removed automatically.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceItems")
    public ServiceItem[] serviceItems;
    public Location withServiceItems(ServiceItem[] serviceItems) {
        this.serviceItems = serviceItems;
        return this;
    }
    
    /**
     * Represents a set of time periods when a location's operational hours differ from its normal business hours.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("specialHours")
    public SpecialHours specialHours;
    public Location withSpecialHours(SpecialHours specialHours) {
        this.specialHours = specialHours;
        return this;
    }
    
    /**
     * Optional. External identifier for this location, which must be unique within a given account. This is a means of associating the location with your own records.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storeCode")
    public String storeCode;
    public Location withStoreCode(String storeCode) {
        this.storeCode = storeCode;
        return this;
    }
    
    /**
     * Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storefrontAddress")
    public PostalAddress storefrontAddress;
    public Location withStorefrontAddress(PostalAddress storefrontAddress) {
        this.storefrontAddress = storefrontAddress;
        return this;
    }
    
    /**
     * Required. Location name should reflect your business's real-world name, as used consistently on your storefront, website, and stationery, and as known to customers. Any additional information, when relevant, can be included in other fields of the resource (for example, `Address`, `Categories`). Don't add unnecessary information to your name (for example, prefer "Google" over "Google Inc. - Mountain View Corporate Headquarters"). Don't include marketing taglines, store codes, special characters, hours or closed/open status, phone numbers, website URLs, service/product information, location/address or directions, or containment information (for example, "Chase ATM in Duane Reade").
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;
    public Location withTitle(String title) {
        this.title = title;
        return this;
    }
    
    /**
     * Optional. A URL for this business. If possible, use a URL that represents this individual business location instead of a generic website/URL that represents all locations, or the brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websiteUri")
    public String websiteUri;
    public Location withWebsiteUri(String websiteUri) {
        this.websiteUri = websiteUri;
        return this;
    }
    
}
