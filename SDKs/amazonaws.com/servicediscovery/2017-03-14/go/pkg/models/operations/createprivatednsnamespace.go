// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreatePrivateDNSNamespaceXAmzTargetEnum
type CreatePrivateDNSNamespaceXAmzTargetEnum string

const (
	CreatePrivateDNSNamespaceXAmzTargetEnumRoute53AutoNamingV20170314CreatePrivateDNSNamespace CreatePrivateDNSNamespaceXAmzTargetEnum = "Route53AutoNaming_v20170314.CreatePrivateDnsNamespace"
)

func (e *CreatePrivateDNSNamespaceXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Route53AutoNaming_v20170314.CreatePrivateDnsNamespace":
		*e = CreatePrivateDNSNamespaceXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatePrivateDNSNamespaceXAmzTargetEnum: %s", s)
	}
}

type CreatePrivateDNSNamespaceRequest struct {
	CreatePrivateDNSNamespaceRequest shared.CreatePrivateDNSNamespaceRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                *string                                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                   *string                                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                         *string                                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                *string                                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                    *string                                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                *string                                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                       CreatePrivateDNSNamespaceXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreatePrivateDNSNamespaceResponse struct {
	ContentType string
	// Success
	CreatePrivateDNSNamespaceResponse *shared.CreatePrivateDNSNamespaceResponse
	// DuplicateRequest
	DuplicateRequest interface{}
	// InvalidInput
	InvalidInput interface{}
	// NamespaceAlreadyExists
	NamespaceAlreadyExists interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceLimitExceeded
	ResourceLimitExceeded interface{}
	// TooManyTagsException
	TooManyTagsException interface{}
}
