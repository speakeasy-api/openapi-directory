// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// LiveBroadcastStatusLifeCycleStatusEnum - The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
type LiveBroadcastStatusLifeCycleStatusEnum string

const (
	LiveBroadcastStatusLifeCycleStatusEnumLifeCycleStatusUnspecified LiveBroadcastStatusLifeCycleStatusEnum = "lifeCycleStatusUnspecified"
	LiveBroadcastStatusLifeCycleStatusEnumCreated                    LiveBroadcastStatusLifeCycleStatusEnum = "created"
	LiveBroadcastStatusLifeCycleStatusEnumReady                      LiveBroadcastStatusLifeCycleStatusEnum = "ready"
	LiveBroadcastStatusLifeCycleStatusEnumTesting                    LiveBroadcastStatusLifeCycleStatusEnum = "testing"
	LiveBroadcastStatusLifeCycleStatusEnumLive                       LiveBroadcastStatusLifeCycleStatusEnum = "live"
	LiveBroadcastStatusLifeCycleStatusEnumComplete                   LiveBroadcastStatusLifeCycleStatusEnum = "complete"
	LiveBroadcastStatusLifeCycleStatusEnumRevoked                    LiveBroadcastStatusLifeCycleStatusEnum = "revoked"
	LiveBroadcastStatusLifeCycleStatusEnumTestStarting               LiveBroadcastStatusLifeCycleStatusEnum = "testStarting"
	LiveBroadcastStatusLifeCycleStatusEnumLiveStarting               LiveBroadcastStatusLifeCycleStatusEnum = "liveStarting"
)

func (e *LiveBroadcastStatusLifeCycleStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "lifeCycleStatusUnspecified":
		fallthrough
	case "created":
		fallthrough
	case "ready":
		fallthrough
	case "testing":
		fallthrough
	case "live":
		fallthrough
	case "complete":
		fallthrough
	case "revoked":
		fallthrough
	case "testStarting":
		fallthrough
	case "liveStarting":
		*e = LiveBroadcastStatusLifeCycleStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveBroadcastStatusLifeCycleStatusEnum: %s", s)
	}
}

// LiveBroadcastStatusLiveBroadcastPriorityEnum - Priority of the live broadcast event (internal state).
type LiveBroadcastStatusLiveBroadcastPriorityEnum string

const (
	LiveBroadcastStatusLiveBroadcastPriorityEnumLiveBroadcastPriorityUnspecified LiveBroadcastStatusLiveBroadcastPriorityEnum = "liveBroadcastPriorityUnspecified"
	LiveBroadcastStatusLiveBroadcastPriorityEnumLow                              LiveBroadcastStatusLiveBroadcastPriorityEnum = "low"
	LiveBroadcastStatusLiveBroadcastPriorityEnumNormal                           LiveBroadcastStatusLiveBroadcastPriorityEnum = "normal"
	LiveBroadcastStatusLiveBroadcastPriorityEnumHigh                             LiveBroadcastStatusLiveBroadcastPriorityEnum = "high"
)

func (e *LiveBroadcastStatusLiveBroadcastPriorityEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "liveBroadcastPriorityUnspecified":
		fallthrough
	case "low":
		fallthrough
	case "normal":
		fallthrough
	case "high":
		*e = LiveBroadcastStatusLiveBroadcastPriorityEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveBroadcastStatusLiveBroadcastPriorityEnum: %s", s)
	}
}

// LiveBroadcastStatusPrivacyStatusEnum - The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
type LiveBroadcastStatusPrivacyStatusEnum string

const (
	LiveBroadcastStatusPrivacyStatusEnumPublic   LiveBroadcastStatusPrivacyStatusEnum = "public"
	LiveBroadcastStatusPrivacyStatusEnumUnlisted LiveBroadcastStatusPrivacyStatusEnum = "unlisted"
	LiveBroadcastStatusPrivacyStatusEnumPrivate  LiveBroadcastStatusPrivacyStatusEnum = "private"
)

func (e *LiveBroadcastStatusPrivacyStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "public":
		fallthrough
	case "unlisted":
		fallthrough
	case "private":
		*e = LiveBroadcastStatusPrivacyStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveBroadcastStatusPrivacyStatusEnum: %s", s)
	}
}

// LiveBroadcastStatusRecordingStatusEnum - The broadcast's recording status.
type LiveBroadcastStatusRecordingStatusEnum string

const (
	LiveBroadcastStatusRecordingStatusEnumLiveBroadcastRecordingStatusUnspecified LiveBroadcastStatusRecordingStatusEnum = "liveBroadcastRecordingStatusUnspecified"
	LiveBroadcastStatusRecordingStatusEnumNotRecording                            LiveBroadcastStatusRecordingStatusEnum = "notRecording"
	LiveBroadcastStatusRecordingStatusEnumRecording                               LiveBroadcastStatusRecordingStatusEnum = "recording"
	LiveBroadcastStatusRecordingStatusEnumRecorded                                LiveBroadcastStatusRecordingStatusEnum = "recorded"
)

func (e *LiveBroadcastStatusRecordingStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "liveBroadcastRecordingStatusUnspecified":
		fallthrough
	case "notRecording":
		fallthrough
	case "recording":
		fallthrough
	case "recorded":
		*e = LiveBroadcastStatusRecordingStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for LiveBroadcastStatusRecordingStatusEnum: %s", s)
	}
}

// LiveBroadcastStatus - Live broadcast state.
type LiveBroadcastStatus struct {
	// The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
	LifeCycleStatus *LiveBroadcastStatusLifeCycleStatusEnum `json:"lifeCycleStatus,omitempty"`
	// Priority of the live broadcast event (internal state).
	LiveBroadcastPriority *LiveBroadcastStatusLiveBroadcastPriorityEnum `json:"liveBroadcastPriority,omitempty"`
	// Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
	MadeForKids *bool `json:"madeForKids,omitempty"`
	// The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
	PrivacyStatus *LiveBroadcastStatusPrivacyStatusEnum `json:"privacyStatus,omitempty"`
	// The broadcast's recording status.
	RecordingStatus *LiveBroadcastStatusRecordingStatusEnum `json:"recordingStatus,omitempty"`
	// This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
	SelfDeclaredMadeForKids *bool `json:"selfDeclaredMadeForKids,omitempty"`
}
