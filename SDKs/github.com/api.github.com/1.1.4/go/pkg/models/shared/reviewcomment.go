// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type ReviewCommentLinks struct {
	// Hypermedia Link
	HTML Link `json:"html"`
	// Hypermedia Link
	PullRequest Link `json:"pull_request"`
	// Hypermedia Link
	Self Link `json:"self"`
}

// ReviewCommentSideEnum - The side of the first line of the range for a multi-line comment.
type ReviewCommentSideEnum string

const (
	ReviewCommentSideEnumLeft  ReviewCommentSideEnum = "LEFT"
	ReviewCommentSideEnumRight ReviewCommentSideEnum = "RIGHT"
)

func (e *ReviewCommentSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LEFT":
		fallthrough
	case "RIGHT":
		*e = ReviewCommentSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReviewCommentSideEnum: %s", s)
	}
}

// ReviewCommentStartSideEnum - The side of the first line of the range for a multi-line comment.
type ReviewCommentStartSideEnum string

const (
	ReviewCommentStartSideEnumLeft  ReviewCommentStartSideEnum = "LEFT"
	ReviewCommentStartSideEnumRight ReviewCommentStartSideEnum = "RIGHT"
)

func (e *ReviewCommentStartSideEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "LEFT":
		fallthrough
	case "RIGHT":
		*e = ReviewCommentStartSideEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ReviewCommentStartSideEnum: %s", s)
	}
}

// ReviewComment - Legacy Review Comment
type ReviewComment struct {
	Links ReviewCommentLinks `json:"_links"`
	// How the author is associated with the repository.
	AuthorAssociation AuthorAssociationEnum `json:"author_association"`
	Body              string                `json:"body"`
	BodyHTML          *string               `json:"body_html,omitempty"`
	BodyText          *string               `json:"body_text,omitempty"`
	CommitID          string                `json:"commit_id"`
	CreatedAt         time.Time             `json:"created_at"`
	DiffHunk          string                `json:"diff_hunk"`
	HTMLURL           string                `json:"html_url"`
	ID                int64                 `json:"id"`
	InReplyToID       *int64                `json:"in_reply_to_id,omitempty"`
	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line             *int64 `json:"line,omitempty"`
	NodeID           string `json:"node_id"`
	OriginalCommitID string `json:"original_commit_id"`
	// The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine     *int64 `json:"original_line,omitempty"`
	OriginalPosition int64  `json:"original_position"`
	// The original first line of the range for a multi-line comment.
	OriginalStartLine   *int64          `json:"original_start_line,omitempty"`
	Path                string          `json:"path"`
	Position            int64           `json:"position"`
	PullRequestReviewID int64           `json:"pull_request_review_id"`
	PullRequestURL      string          `json:"pull_request_url"`
	Reactions           *ReactionRollup `json:"reactions,omitempty"`
	// The side of the first line of the range for a multi-line comment.
	Side *ReviewCommentSideEnum `json:"side,omitempty"`
	// The first line of the range for a multi-line comment.
	StartLine *int64 `json:"start_line,omitempty"`
	// The side of the first line of the range for a multi-line comment.
	StartSide *ReviewCommentStartSideEnum `json:"start_side,omitempty"`
	UpdatedAt time.Time                   `json:"updated_at"`
	URL       string                      `json:"url"`
	// A GitHub user.
	User NullableSimpleUser `json:"user"`
}
