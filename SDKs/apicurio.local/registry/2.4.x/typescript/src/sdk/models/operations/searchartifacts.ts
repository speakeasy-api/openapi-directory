/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class SearchArtifactsRequest extends SpeakeasyBase {
  /**
   * Filter by contentId.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=contentId",
  })
  contentId?: number;

  /**
   * Filter by description.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=description",
  })
  description?: string;

  /**
   * Filter by globalId.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=globalId",
  })
  globalId?: number;

  /**
   * Filter by artifact group.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=group" })
  group?: string;

  /**
   * Filter by label.  Include one or more label to only return artifacts containing all of the
   *
   * @remarks
   * specified labels.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=labels",
  })
  labels?: string[];

  /**
   * The number of artifacts to return.  Defaults to 20.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
  limit?: number;

  /**
   * Filter by artifact name.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=offset",
  })
  offset?: number;

  /**
   * Sort order, ascending (`asc`) or descending (`desc`).
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=order" })
  order?: shared.SortOrderEnum;

  /**
   * The field to sort by.  Can be one of:
   *
   * @remarks
   *
   * * `name`
   * * `createdOn`
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=orderby",
  })
  orderby?: shared.SortByEnum;

  /**
   * Filter by one or more name/value property.  Separate each name/value pair using a colon.  For
   *
   * @remarks
   * example `properties=foo:bar` will return only artifacts with a custom property named `foo`
   * and value `bar`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=properties",
  })
  properties?: string[];
}

export class SearchArtifactsResponse extends SpeakeasyBase {
  /**
   * On a successful response, returns a result set of artifacts - one for each artifact
   *
   * @remarks
   * in the registry that matches the criteria.
   */
  @SpeakeasyMetadata()
  artifactSearchResults?: shared.ArtifactSearchResults;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Common response for all operations that can fail with an unexpected server error.
   */
  @SpeakeasyMetadata()
  error?: shared.ErrorT;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
