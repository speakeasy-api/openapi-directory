// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetCVECheckConfiguration200ApplicationJSONActionEnum - The id of the action
type GetCVECheckConfiguration200ApplicationJSONActionEnum string

const (
	GetCVECheckConfiguration200ApplicationJSONActionEnumGetCveCheckConfiguration GetCVECheckConfiguration200ApplicationJSONActionEnum = "getCVECheckConfiguration"
)

func (e *GetCVECheckConfiguration200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "getCVECheckConfiguration":
		*e = GetCVECheckConfiguration200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCVECheckConfiguration200ApplicationJSONActionEnum: %s", s)
	}
}

type GetCVECheckConfiguration200ApplicationJSONData struct {
	// Token used by to contact the API to check CVE
	APIKey *string `json:"apiKey,omitempty"`
	// Url used to check CVE
	URL *string `json:"url,omitempty"`
}

// GetCVECheckConfiguration200ApplicationJSONResultEnum - Result of the request
type GetCVECheckConfiguration200ApplicationJSONResultEnum string

const (
	GetCVECheckConfiguration200ApplicationJSONResultEnumSuccess GetCVECheckConfiguration200ApplicationJSONResultEnum = "success"
	GetCVECheckConfiguration200ApplicationJSONResultEnumError   GetCVECheckConfiguration200ApplicationJSONResultEnum = "error"
)

func (e *GetCVECheckConfiguration200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = GetCVECheckConfiguration200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCVECheckConfiguration200ApplicationJSONResultEnum: %s", s)
	}
}

// GetCVECheckConfiguration200ApplicationJSON - CVE check config
type GetCVECheckConfiguration200ApplicationJSON struct {
	// The id of the action
	Action GetCVECheckConfiguration200ApplicationJSONActionEnum `json:"action"`
	Data   GetCVECheckConfiguration200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result GetCVECheckConfiguration200ApplicationJSONResultEnum `json:"result"`
}

type GetCVECheckConfigurationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// CVE check config
	GetCVECheckConfiguration200ApplicationJSONObject *GetCVECheckConfiguration200ApplicationJSON
}
