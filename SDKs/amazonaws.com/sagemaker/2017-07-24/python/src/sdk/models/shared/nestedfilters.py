"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import filter as shared_filter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class NestedFilters:
    r"""<p>A list of nested <a>Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a>Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:\\"InputDataConfig.ChannelName\\", \\"Operator\\":\\"Equals\\", \\"Value\\":\\"train\\"}',</code> </p> </li> <li> <p> <code>'{Name:\\"InputDataConfig.DataSource.S3DataSource.S3Uri\\", \\"Operator\\":\\"Contains\\", \\"Value\\":\\"mybucket/catdata\\"}'</code> </p> </li> </ul>"""
    
    filters: list[shared_filter.Filter] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Filters') }})  
    nested_property_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NestedPropertyName') }})  
    