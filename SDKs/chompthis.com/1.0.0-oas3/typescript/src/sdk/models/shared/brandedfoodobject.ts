/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * An object containing additional information on the countries where this item is found
 */
export class BrandedFoodObjectItemsCountryDetails extends SpeakeasyBase {
  /**
   * The number of countries where English is the country's primary language
   */
  @SpeakeasyMetadata()
  @Expose({ name: "english_speaking" })
  englishSpeaking?: number;

  /**
   * The number of countries where English is not the country's primary language
   */
  @SpeakeasyMetadata()
  @Expose({ name: "non_english_speaking" })
  nonEnglishSpeaking?: number;
}

/**
 * An object containing information on an individual ingredient that was flagged as potentially not being compatible with a certain diet
 */
export class BrandedFoodObjectItemsDietFlags extends SpeakeasyBase {
  /**
   * A description of how we graded this ingredient for compatibility with the diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compatibility_description" })
  compatibilityDescription?: string;

  /**
   * A numeric representation of if we believe this ingredient is compatible with the diet. Higher values indicate more compatibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compatibility_level" })
  compatibilityLevel?: number;

  /**
   * Name of the diet with which this ingredient may not be compatible
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diet_label" })
  dietLabel?: string;

  /**
   * Ingredient name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingredient" })
  ingredient?: string;

  /**
   * Description of the ingredient
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingredient_description" })
  ingredientDescription?: string;

  /**
   * Boolean representing if the ingredient is a known allergen
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_allergen" })
  isAllergen?: boolean;

  /**
   * A description of if we believe this ingredient is compatible with the diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_compatible" })
  isCompatible?: string;
}

/**
 * An object containing information on this item's compatibility with Gluten Free diets
 */
export class BrandedFoodObjectItemsDietLabelsGlutenFree extends SpeakeasyBase {
  /**
   * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compatibility_level" })
  compatibilityLevel?: number;

  /**
   * Boolean that indicates if we are confident in how this item is graded for this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence" })
  confidence?: number;

  /**
   * Description of our confidence that this item was graded correctly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence_description" })
  confidenceDescription?: string;

  /**
   * Boolean describing if this item is compatible with this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_compatible" })
  isCompatible?: boolean;

  /**
   * Diet name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * An object containing information on this item's compatibility with the Vegan diets
 */
export class BrandedFoodObjectItemsDietLabelsVegan extends SpeakeasyBase {
  /**
   * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compatibility_level" })
  compatibilityLevel?: number;

  /**
   * Boolean that indicates if we are confident in how this item is graded for this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence" })
  confidence?: number;

  /**
   * Description of our confidence that this item was graded correctly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence_description" })
  confidenceDescription?: string;

  /**
   * Boolean describing if this item is compatible with this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_compatible" })
  isCompatible?: boolean;

  /**
   * Diet name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * An object containing information on this item's compatibility with Vegetarian diets
 */
export class BrandedFoodObjectItemsDietLabelsVegetarian extends SpeakeasyBase {
  /**
   * Numeric representation of how compatible this item is with this diet. Higher values indicate more compatibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "compatibility_level" })
  compatibilityLevel?: number;

  /**
   * Boolean that indicates if we are confident in how this item is graded for this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence" })
  confidence?: number;

  /**
   * Description of our confidence that this item was graded correctly
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confidence_description" })
  confidenceDescription?: string;

  /**
   * Boolean describing if this item is compatible with this diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_compatible" })
  isCompatible?: boolean;

  /**
   * Diet name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * An object containing this item's compatibility grades for each supported diet
 */
export class BrandedFoodObjectItemsDietLabels extends SpeakeasyBase {
  /**
   * An object containing information on this item's compatibility with Gluten Free diets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gluten_free" })
  @Type(() => BrandedFoodObjectItemsDietLabelsGlutenFree)
  glutenFree?: BrandedFoodObjectItemsDietLabelsGlutenFree;

  /**
   * An object containing information on this item's compatibility with the Vegan diets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vegan" })
  @Type(() => BrandedFoodObjectItemsDietLabelsVegan)
  vegan?: BrandedFoodObjectItemsDietLabelsVegan;

  /**
   * An object containing information on this item's compatibility with Vegetarian diets
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vegetarian" })
  @Type(() => BrandedFoodObjectItemsDietLabelsVegetarian)
  vegetarian?: BrandedFoodObjectItemsDietLabelsVegetarian;
}

/**
 * An object containing information for a specific nutrient found in this food item
 */
export class BrandedFoodObjectItemsNutrients extends SpeakeasyBase {
  /**
   * Number of observations on which the value is based
   */
  @SpeakeasyMetadata()
  @Expose({ name: "data_points" })
  dataPoints?: number;

  /**
   * Description of the nutrient source
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * The unit used for the measure of this nutrient
   */
  @SpeakeasyMetadata()
  @Expose({ name: "measurement_unit" })
  measurementUnit?: string;

  /**
   * Nutrient name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Amount of the nutrient per 100g of food
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_100g" })
  per100g?: number;

  /**
   * Nutrient rank
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rank" })
  rank?: number;
}

/**
 * An object containing basic packaging information about this item
 */
export class BrandedFoodObjectItemsPackage extends SpeakeasyBase {
  /**
   * Package quantity
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: number;

  /**
   * Package size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: string;
}

/**
 * An object containing photos of the front of this item's packaging
 */
export class BrandedFoodObjectItemsPackagingPhotosFront extends SpeakeasyBase {
  /**
   * Full-sized photo of the front of this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  /**
   * Small photo of the front of this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "small" })
  small?: string;

  /**
   * Thumbnail photo of the front of this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumb" })
  thumb?: string;
}

/**
 * An object containing photos of the ingredients on this item's packaging
 */
export class BrandedFoodObjectItemsPackagingPhotosIngredients extends SpeakeasyBase {
  /**
   * Full-sized photo of the ingredients on this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  /**
   * Small photo of the ingredients on this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "small" })
  small?: string;

  /**
   * Thumbnail photo of the ingredients on this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumb" })
  thumb?: string;
}

/**
 * An object containing photos of this item's nutrition label
 */
export class BrandedFoodObjectItemsPackagingPhotosNutrition extends SpeakeasyBase {
  /**
   * Full-sized photo of this item's nutrition label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display" })
  display?: string;

  /**
   * Small photo of this item's nutrition label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "small" })
  small?: string;

  /**
   * Thumbnail photo of this item's nutrition label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "thumb" })
  thumb?: string;
}

/**
 * A object containing a collection of photos of this item's packaging
 */
export class BrandedFoodObjectItemsPackagingPhotos extends SpeakeasyBase {
  /**
   * An object containing photos of the front of this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "front" })
  @Type(() => BrandedFoodObjectItemsPackagingPhotosFront)
  front?: BrandedFoodObjectItemsPackagingPhotosFront;

  /**
   * An object containing photos of the ingredients on this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingredients" })
  @Type(() => BrandedFoodObjectItemsPackagingPhotosIngredients)
  ingredients?: BrandedFoodObjectItemsPackagingPhotosIngredients;

  /**
   * An object containing photos of this item's nutrition label
   */
  @SpeakeasyMetadata()
  @Expose({ name: "nutrition" })
  @Type(() => BrandedFoodObjectItemsPackagingPhotosNutrition)
  nutrition?: BrandedFoodObjectItemsPackagingPhotosNutrition;
}

/**
 * An object containing serving information for this item
 */
export class BrandedFoodObjectItemsServing extends SpeakeasyBase {
  /**
   * Measurement unit for each serving (e.g. if measure is 3 tsp, the unit is tsp)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "measurement_unit" })
  measurementUnit?: string;

  /**
   * Serving size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: string;

  /**
   * Serving size description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size_fulltext" })
  sizeFulltext?: string;
}

/**
 * An object containing information for this specific item.
 */
export class BrandedFoodObjectItems extends SpeakeasyBase {
  /**
   * An array of ingredients in this item that may cause allergic reactions in people
   */
  @SpeakeasyMetadata()
  @Expose({ name: "allergens" })
  allergens?: string[];

  /**
   * EAN/UPC barcode
   */
  @SpeakeasyMetadata()
  @Expose({ name: "barcode" })
  barcode?: string;

  /**
   * The brand name that owns this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brand" })
  brand?: string;

  /**
   * An array of brands we have associated with this item. Some items are sold by more than 1 brand.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "brand_list" })
  brandList?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "categories" })
  categories?: string[];

  /**
   * An array of countries where this item is sold
   */
  @SpeakeasyMetadata()
  @Expose({ name: "countries" })
  countries?: string[];

  /**
   * An object containing additional information on the countries where this item is found
   */
  @SpeakeasyMetadata()
  @Expose({ name: "country_details" })
  @Type(() => BrandedFoodObjectItemsCountryDetails)
  countryDetails?: BrandedFoodObjectItemsCountryDetails;

  /**
   * A description of this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * An array of ingredient objects that were flagged while grading this item for compatibility with each diet
   */
  @SpeakeasyMetadata({ elemType: BrandedFoodObjectItemsDietFlags })
  @Expose({ name: "diet_flags" })
  @Type(() => BrandedFoodObjectItemsDietFlags)
  dietFlags?: BrandedFoodObjectItemsDietFlags[];

  /**
   * An object containing this item's compatibility grades for each supported diet
   */
  @SpeakeasyMetadata()
  @Expose({ name: "diet_labels" })
  @Type(() => BrandedFoodObjectItemsDietLabels)
  dietLabels?: BrandedFoodObjectItemsDietLabels;

  /**
   * A boolean indicating if we have English ingredients for this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "has_english_ingredients" })
  hasEnglishIngredients?: boolean;

  /**
   * An array of this item's ingredients
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingredient_list" })
  ingredientList?: string[];

  /**
   * This food item's ingredients from greatest quantity to least
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ingredients" })
  ingredients?: string;

  /**
   * An array of keywords that can be used to describe this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "keywords" })
  keywords?: string[];

  /**
   * An array of minerals that this item contains
   */
  @SpeakeasyMetadata()
  @Expose({ name: "minerals" })
  minerals?: string[];

  /**
   * Item name as provided by brand owner or as shown on packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * An array containing nutrient informatio objects for this food item
   */
  @SpeakeasyMetadata({ elemType: BrandedFoodObjectItemsNutrients })
  @Expose({ name: "nutrients" })
  @Type(() => BrandedFoodObjectItemsNutrients)
  nutrients?: BrandedFoodObjectItemsNutrients[];

  /**
   * An object containing basic packaging information about this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package" })
  @Type(() => BrandedFoodObjectItemsPackage)
  package?: BrandedFoodObjectItemsPackage;

  /**
   * A object containing a collection of photos of this item's packaging
   */
  @SpeakeasyMetadata()
  @Expose({ name: "packaging_photos" })
  @Type(() => BrandedFoodObjectItemsPackagingPhotos)
  packagingPhotos?: BrandedFoodObjectItemsPackagingPhotos;

  /**
   * An array of ingredients made from palm oil
   */
  @SpeakeasyMetadata()
  @Expose({ name: "palm_oil_ingredients" })
  palmOilIngredients?: string[];

  /**
   * An object containing serving information for this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "serving" })
  @Type(() => BrandedFoodObjectItemsServing)
  serving?: BrandedFoodObjectItemsServing;

  /**
   * An array of trace ingredients that may be found in this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "traces" })
  traces?: string[];

  /**
   * An array of vitamins that are found in this item
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vitamins" })
  vitamins?: string[];
}

/**
 * Please read the description of each field in this API response object example. By default, the value of each field is **null**. This indicates an unknown state or that no data exists.
 */
export class BrandedFoodObject extends SpeakeasyBase {
  /**
   * An array containing an object for each individual item returned by your API call.
   */
  @SpeakeasyMetadata({ elemType: BrandedFoodObjectItems })
  @Expose({ name: "items" })
  @Type(() => BrandedFoodObjectItems)
  items?: BrandedFoodObjectItems[];
}
