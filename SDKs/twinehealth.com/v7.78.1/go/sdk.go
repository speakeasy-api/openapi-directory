// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"net/http"
	"openapi/pkg/utils"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.twinehealth.com/pub",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// SDK - # Overview
// The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the
// [JSON API](http://jsonapi.org/format/1.0/) specification.
//
// In addition to this documentation, we also provide an
// [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) "yaml" file describing the API:
// [Fitbit Plus API Specification](swagger.yaml).
//
// # Authentication
// Authentication for the Fitbit Plus API is based on the
// [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant
// types of **client_credentials** and **refresh_token**.
//
// See [POST /oauth/token](#operation/createToken) for details on the request and response formats.
// <!-- ReDoc-Inject: <security-definitions> -->
//
// ## Building Integrations
// We will provide customers with unique client credentials for each application/integration they build, allowing us
// to enforce appropriate access controls and monitor API usage.
// The client credentials will be scoped to the organization, and allow full access to all patients and related data
// within that organization.
//
// These credentials are appropriate for creating an integration that does one of the following:
//   - background reporting/analysis
//   - synchronizing data with another system (such as an EMR)
//
// The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing
// application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to
// that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a
// federated identity provider. You would need to have a separate means of verifying a user's identity. We do not
// currently support the required password-based oauth flow to make this possible.
//
// # Paging
// The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.
//
// #### Skip-based paging
//
// Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.
//
// If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.
//
// #### Cursor-based paging
// Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.
//
// Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.
//
// We encourage the use of cursor-based paging for performance reasons.
//
// In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.
//
// It is not valid to mix the two strategies.
type SDK struct {
	// Action - An action is an actionable item in a patient's plan.
	Action *action
	// Bundle - A bundle is a collection of actions (an action plan) in a patient's plan summary.
	Bundle *bundle
	// CalendarEvent - A calendar event represents an event involving or relevant to a patient which will or has occurred on a specific date or during a specific period of time.
	CalendarEvent *calendarEvent
	// CalendarEventResponse - A calendar event response indicates the attendee's response to a calendar event.  Only `POST` for creation is allowed as the responses are updated into the corresponding calendar events.
	CalendarEventResponse *calendarEventResponse
	// Coach - A coach is a person that supports a patient
	Coach *coach
	// EmailHistory - Email history represents a single email that was sent using Fitbit Plus.
	EmailHistory *emailHistory
	// Group - A group is a cohort of patients within an organization. The creation of groups allows for the segmentation of dashboards and analytics. For example, a group might correspond to the patients in a particular practice or the employees of a particular employer.
	Group *group
	// HealthProfile - A health profile contains a set of health questions and answers for a patient.
	HealthProfile *healthProfile
	// HealthProfileAnswer - A health profile answer is the answer to a question for a patient.
	HealthProfileAnswer *healthProfileAnswer
	// HealthProfileQuestion - A health profile question contains a health question and the corresponding answer for a patient.
	HealthProfileQuestion *healthProfileQuestion
	// HealthQuestionDefinition - A health question definition specifies a health question and the corresponding answer choices.
	HealthQuestionDefinition *healthQuestionDefinition
	// Metric - A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
	Metric *metric
	// Oauth - Authentication operations
	Oauth *oauth
	// Organization - An organization is a Fitbit Plus customer. No data is accessible across organizations.
	Organization *organization
	// Patient - A patient is the core user of Fitbit Plus.
	Patient *patient
	// Plan - A plan is the set of actions and associated goals for a patient.
	Plan *plan
	// Result - A patient health result is a quantitative result for a patient.
	Result *result
	// Reward - A reward allocates a portion of the budget from the reward program activation for achieving a particular goal and sets a target date.
	Reward *reward
	// RewardEarning - A reward earning specifies the portion of a reward that was earned and at what date.
	RewardEarning *rewardEarning
	// RewardEarningFulfillment - A reward earning fulfillment specifies the portion of a reward earning that was fulfilled and at what date.
	RewardEarningFulfillment *rewardEarningFulfillment
	// RewardProgram - A reward program provides the details for a rewards program for a group. Different rewards programs can be created for different periods of time specified by the start_at and end_at dates. A reward program can activated for a patient any time between these dates. An activated reward program for a patient is called a reward program activation.
	RewardProgram *rewardProgram
	// RewardProgramActivation - A reward program activation is the activation of a reward program for a specific patient.
	RewardProgramActivation *rewardProgramActivation

	// Non-idiomatic field names below are to namespace fields from the fields names above to avoid name conflicts
	_defaultClient  HTTPClient
	_securityClient HTTPClient

	_serverURL  string
	_language   string
	_sdkVersion string
	_genVersion string
}

type SDKOption func(*SDK)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *SDK) {
		sdk._serverURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *SDK) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk._serverURL = serverURL
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *SDK) {
		sdk._defaultClient = client
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *SDK {
	sdk := &SDK{
		_language:   "go",
		_sdkVersion: "0.0.1",
		_genVersion: "internal",
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk._defaultClient == nil {
		sdk._defaultClient = &http.Client{Timeout: 60 * time.Second}
	}
	if sdk._securityClient == nil {
		sdk._securityClient = sdk._defaultClient
	}

	if sdk._serverURL == "" {
		sdk._serverURL = ServerList[0]
	}

	sdk.Action = newAction(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Bundle = newBundle(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CalendarEvent = newCalendarEvent(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.CalendarEventResponse = newCalendarEventResponse(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Coach = newCoach(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.EmailHistory = newEmailHistory(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Group = newGroup(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HealthProfile = newHealthProfile(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HealthProfileAnswer = newHealthProfileAnswer(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HealthProfileQuestion = newHealthProfileQuestion(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.HealthQuestionDefinition = newHealthQuestionDefinition(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Metric = newMetric(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Oauth = newOauth(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Organization = newOrganization(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Patient = newPatient(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Plan = newPlan(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Result = newResult(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.Reward = newReward(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RewardEarning = newRewardEarning(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RewardEarningFulfillment = newRewardEarningFulfillment(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RewardProgram = newRewardProgram(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	sdk.RewardProgramActivation = newRewardProgramActivation(
		sdk._defaultClient,
		sdk._securityClient,
		sdk._serverURL,
		sdk._language,
		sdk._sdkVersion,
		sdk._genVersion,
	)

	return sdk
}
