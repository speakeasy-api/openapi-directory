// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
	"openapi/pkg/types"
)

type GetOperationsLogStatusNumEnum string

const (
	GetOperationsLogStatusNumEnumZero GetOperationsLogStatusNumEnum = "0"
	GetOperationsLogStatusNumEnumOne  GetOperationsLogStatusNumEnum = "1"
)

func (e *GetOperationsLogStatusNumEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "0":
		fallthrough
	case "1":
		*e = GetOperationsLogStatusNumEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOperationsLogStatusNumEnum: %s", s)
	}
}

type GetOperationsLogQueryParams struct {
	// Amendent types:
	//     -N   new
	//     -A   amendment
	//     -T   terminated
	//     -C   consolidated
	//     -M   multi-candidate
	//     -S   secondary
	//
	// NULL might be new or amendment. If amendment indicator is null and the filings is the first or first in a chain treat it as if it was a new. If it is not the first or first in a chain then treat the filing as an amendment.
	//
	AmendmentIndicator []string `queryParam:"style=form,explode=true,name=amendment_indicator"`
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// Unique identifier for the electronic or paper report. This number is used to construct
	// PDF URLs to the original document.
	//
	BeginningImageNumber []string `queryParam:"style=form,explode=true,name=beginning_image_number"`
	// A unique identifier of the registered filer.
	//
	CandidateCommitteeID []string `queryParam:"style=form,explode=true,name=candidate_committee_id"`
	// The form where the underlying data comes from, for example, Form 1 would appear as F1:
	//     - F1   Statement of Organization
	//     - F1M  Notification of Multicandidate Status
	//     - F2   Statement of Candidacy
	//     - F3   Report of Receipts and Disbursements for an Authorized Committee
	//     - F3P  Report of Receipts and Disbursements by an Authorized Committee of a Candidate for     The Office of President or Vice President
	//     - F3L  Report of Contributions Bundled by Lobbyists/Registrants and Lobbyist/Registrant PACs
	//     - F3X  Report of Receipts and Disbursements for other than an Authorized Committee
	//     - F4   Report of Receipts and Disbursements for a Committee or Organization Supporting a Nomination Convention
	//     - F5   Report of Independent Expenditures Made and Contributions Received
	//     - F6   48 Hour Notice of Contributions/Loans Received
	//     - F7   Report of Communication Costs by Corporations and Membership Organizations
	//     - F8   Debt Settlement Plan
	//     - F9   24 Hour Notice of Disbursements for Electioneering Communications
	//     - F13  Report of Donations Accepted for Inaugural Committee
	//     - F99  Miscellaneous Text
	//     - FRQ  Request for Additional Information
	//
	FormType []string `queryParam:"style=form,explode=true,name=form_type"`
	// Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxCoverageEndDate *types.Date `queryParam:"style=form,explode=true,name=max_coverage_end_date"`
	// Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxReceiptDate *types.Date `queryParam:"style=form,explode=true,name=max_receipt_date"`
	// Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MaxTransactionDataCompleteDate *types.Date `queryParam:"style=form,explode=true,name=max_transaction_data_complete_date"`
	// Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinCoverageEndDate *types.Date `queryParam:"style=form,explode=true,name=min_coverage_end_date"`
	// Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinReceiptDate *types.Date `queryParam:"style=form,explode=true,name=min_receipt_date"`
	// Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD)
	//
	MinTransactionDataCompleteDate *types.Date `queryParam:"style=form,explode=true,name=min_transaction_data_complete_date"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Name of report where the underlying data comes from:
	//     - 10D Pre-Election
	//     - 10G Pre-General
	//     - 10P Pre-Primary
	//     - 10R Pre-Run-Off
	//     - 10S Pre-Special
	//     - 12C Pre-Convention
	//     - 12G Pre-General
	//     - 12P Pre-Primary
	//     - 12R Pre-Run-Off
	//     - 12S Pre-Special
	//     - 30D Post-Election
	//     - 30G Post-General
	//     - 30P Post-Primary
	//     - 30R Post-Run-Off
	//     - 30S Post-Special
	//     - 60D Post-Convention
	//     - M1  January Monthly
	//     - M10 October Monthly
	//     - M11 November Monthly
	//     - M12 December Monthly
	//     - M2  February Monthly
	//     - M3  March Monthly
	//     - M4  April Monthly
	//     - M5  May Monthly
	//     - M6  June Monthly
	//     - M7  July Monthly
	//     - M8  August Monthly
	//     - M9  September Monthly
	//     - MY  Mid-Year Report
	//     - Q1  April Quarterly
	//     - Q2  July Quarterly
	//     - Q3  October Quarterly
	//     - TER Termination Report
	//     - YE  Year-End
	//     - ADJ COMP ADJUST AMEND
	//     - CA  COMPREHENSIVE AMEND
	//     - 90S Post Inaugural Supplement
	//     - 90D Post Inaugural
	//     - 48  48 Hour Notification
	//     - 24  24 Hour Notification
	//     - M7S July Monthly/Semi-Annual
	//     - MSA Monthly Semi-Annual (MY)
	//     - MYS Monthly Year End/Semi-Annual
	//     - Q2S July Quarterly/Semi-Annual
	//     - QSA Quarterly Semi-Annual (MY)
	//     - QYS Quarterly Year End/Semi-Annual
	//     - QYE Quarterly Semi-Annual (YE)
	//     - QMS Quarterly Mid-Year/ Semi-Annual
	//     - MSY Monthly Semi-Annual (YE)
	//
	ReportType []string `queryParam:"style=form,explode=true,name=report_type"`
	// Forms with coverage date -
	//     year from the coverage ending date.
	// Forms without coverage date -
	//     year from the receipt date.
	//
	ReportYear []int `queryParam:"style=form,explode=true,name=report_year"`
	// Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
	//
	Sort []string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// Status of the transactional report.
	//     -0- Transaction is entered
	//           into the system.
	//           But not verified.
	//     -1- Transaction is verified.
	//
	StatusNum []GetOperationsLogStatusNumEnum `queryParam:"style=form,explode=true,name=status_num"`
}

type GetOperationsLogRequest struct {
	QueryParams GetOperationsLogQueryParams
}

type GetOperationsLogResponse struct {
	ContentType       string
	OperationsLogPage *shared.OperationsLogPage
	StatusCode        int
	RawResponse       *http.Response
}
