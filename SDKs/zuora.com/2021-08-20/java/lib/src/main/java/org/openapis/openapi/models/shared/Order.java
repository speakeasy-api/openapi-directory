/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.LocalDate;

/**
 * Order - Represents the order information that will be returned in the GET call.
 */
public class Order {
    /**
     * The ID of the user who created this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdBy")
    public String createdBy;
    public Order withCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }
    
    /**
     * The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdDate")
    public String createdDate;
    public Order withCreatedDate(String createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Currency code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    public String currency;
    public Order withCurrency(String currency) {
        this.currency = currency;
        return this;
    }
    
    /**
     * Container for custom fields of an Order object.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customFields")
    public java.util.Map<String, Object> customFields;
    public Order withCustomFields(java.util.Map<String, Object> customFields) {
        this.customFields = customFields;
        return this;
    }
    
    /**
     * A description of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public Order withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("existingAccountNumber")
    public String existingAccountNumber;
    public Order withExistingAccountNumber(String existingAccountNumber) {
        this.existingAccountNumber = existingAccountNumber;
        return this;
    }
    
    /**
     * The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    @JsonProperty("orderDate")
    public LocalDate orderDate;
    public Order withOrderDate(LocalDate orderDate) {
        this.orderDate = orderDate;
        return this;
    }
    
    /**
     * [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services. 
     * 
     * With the Order Line Items feature enabled, you can now launch non-subscription and hybrid monetization business models in Zuora, in addition to subscription business models. 
     * 
     * **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](https://support.zuora.com/). 
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderLineItems")
    public OrderLineItemRetrieveOrder[] orderLineItems;
    public Order withOrderLineItems(OrderLineItemRetrieveOrder[] orderLineItems) {
        this.orderLineItems = orderLineItems;
        return this;
    }
    
    /**
     * The order number of the order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orderNumber")
    public String orderNumber;
    public Order withOrderNumber(String orderNumber) {
        this.orderNumber = orderNumber;
        return this;
    }
    
    /**
     * The status of the order. If the order contains any `Pending Activation` or `Pending Acceptance` subscription, the order status will be `Pending`; otherwise the order status is `Completed`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public OrderStatusEnum status;
    public Order withStatus(OrderStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptions")
    public OrderSubscriptions[] subscriptions;
    public Order withSubscriptions(OrderSubscriptions[] subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }
    
    /**
     * The ID of the user who updated this order.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedBy")
    public String updatedBy;
    public Order withUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }
    
    /**
     * The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedDate")
    public String updatedDate;
    public Order withUpdatedDate(String updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
