/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Everything about geocoding
 */
export class GeocodingAPI {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Geocoding Endpoint
   *
   * @remarks
   *
   * ### Introduction
   *
   * ![Geocoding Example](./img/geocoding-example.png)
   *
   * _Geocoding_ describes the process of transforming an textual address representation to a coordinate (`latitude,longitude`).
   * For example the conversion from `Berlin` to `52.5170365,13.3888599`.
   *
   * _Reverse geocoding_ converts a coordinate to a textual address representation or place name. Find out more about Geocoding itself on [Wikipedia](http://en.wikipedia.org/wiki/Geocoding).
   *
   */
  getGeocode(
    req: operations.GetGeocodeRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.GetGeocodeResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetGeocodeRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/geocode";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetGeocodeResponse =
        new operations.GetGeocodeResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.geocodingResponse = utils.objectToClass(
              httpRes?.data,
              shared.GeocodingResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.ghError = utils.objectToClass(httpRes?.data, shared.GHError);
          }
          break;
      }

      return res;
    });
  }
}
