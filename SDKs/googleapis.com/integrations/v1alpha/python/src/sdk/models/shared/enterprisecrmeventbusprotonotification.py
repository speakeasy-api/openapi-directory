"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import enterprisecrmeventbusprotoaddress as shared_enterprisecrmeventbusprotoaddress
from ..shared import enterprisecrmeventbusprotobuganizernotification as shared_enterprisecrmeventbusprotobuganizernotification
from ..shared import enterprisecrmeventbusprotocustomsuspensionrequest as shared_enterprisecrmeventbusprotocustomsuspensionrequest
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmEventbusProtoNotification:
    
    buganizer_notification: Optional[shared_enterprisecrmeventbusprotobuganizernotification.EnterpriseCrmEventbusProtoBuganizerNotification] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buganizerNotification'), 'exclude': lambda f: f is None }})  
    email_address: Optional[shared_enterprisecrmeventbusprotoaddress.EnterpriseCrmEventbusProtoAddress] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emailAddress'), 'exclude': lambda f: f is None }})
    r"""Email address along with optional name and tokens. These tokens will be substituted for the variables in the form of [{var_name}], where var_name could be any string of no more than 32 bytes."""  
    escalator_queue: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('escalatorQueue'), 'exclude': lambda f: f is None }})  
    pubsub_topic: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pubsubTopic'), 'exclude': lambda f: f is None }})  
    request: Optional[shared_enterprisecrmeventbusprotocustomsuspensionrequest.EnterpriseCrmEventbusProtoCustomSuspensionRequest] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('request'), 'exclude': lambda f: f is None }})  
    