// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

type BadgeExpiryExpiryTypeEnum string

const (
	BadgeExpiryExpiryTypeEnumDate      BadgeExpiryExpiryTypeEnum = "date"
	BadgeExpiryExpiryTypeEnumTimeframe BadgeExpiryExpiryTypeEnum = "timeframe"
)

func (e *BadgeExpiryExpiryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "date":
		fallthrough
	case "timeframe":
		*e = BadgeExpiryExpiryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BadgeExpiryExpiryTypeEnum: %s", s)
	}
}

type BadgeExpiryTimeframeUnitEnum string

const (
	BadgeExpiryTimeframeUnitEnumDays   BadgeExpiryTimeframeUnitEnum = "days"
	BadgeExpiryTimeframeUnitEnumMonths BadgeExpiryTimeframeUnitEnum = "months"
	BadgeExpiryTimeframeUnitEnumYears  BadgeExpiryTimeframeUnitEnum = "years"
)

func (e *BadgeExpiryTimeframeUnitEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "days":
		fallthrough
	case "months":
		fallthrough
	case "years":
		*e = BadgeExpiryTimeframeUnitEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for BadgeExpiryTimeframeUnitEnum: %s", s)
	}
}

type BadgeExpiry struct {
	ExpirationDate  *time.Time                    `json:"expirationDate,omitempty"`
	Expires         *bool                         `json:"expires,omitempty"`
	ExpiryType      *BadgeExpiryExpiryTypeEnum    `json:"expiryType,omitempty"`
	TimeframeAmount *float64                      `json:"timeframeAmount,omitempty"`
	TimeframeUnit   *BadgeExpiryTimeframeUnitEnum `json:"timeframeUnit,omitempty"`
}
