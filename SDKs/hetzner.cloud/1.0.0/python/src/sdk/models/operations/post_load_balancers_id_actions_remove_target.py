"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestIP:
    r"""IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well."""
    
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a Subnetwork type vswitch."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestLabelSelector:
    r"""Configuration for label selector targets, required if type is `label_selector`"""
    
    selector: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('selector') }})
    r"""Label selector"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestServer:
    r"""Configuration for type Server, required if type is `server`"""
    
    id: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Server"""  
    
class PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum(str, Enum):
    r"""Type of the resource"""
    SERVER = 'server'
    LABEL_SELECTOR = 'label_selector'
    IP = 'ip'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequest:
    
    type: PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of the resource"""  
    ip: Optional[PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestIP] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip'), 'exclude': lambda f: f is None }})
    r"""IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well."""  
    label_selector: Optional[PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestLabelSelector] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label_selector'), 'exclude': lambda f: f is None }})
    r"""Configuration for label selector targets, required if type is `label_selector`"""  
    server: Optional[PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequestServer] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server'), 'exclude': lambda f: f is None }})
    r"""Configuration for type Server, required if type is `server`"""  
    

@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetRequest:
    
    id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'id', 'style': 'simple', 'explode': False }})
    r"""ID of the Load Balancer"""  
    request_body: Optional[PostLoadBalancersIDActionsRemoveTargetRemoveTargetRequest] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetActionResponseActionError:
    r"""Error message for the Action if error occurred, otherwise null"""
    
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""Fixed machine readable code"""  
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Humanized error message"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetActionResponseActionResources:
    
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of resource referenced"""  
    
class PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum(str, Enum):
    r"""Status of the Action"""
    SUCCESS = 'success'
    RUNNING = 'running'
    ERROR = 'error'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetActionResponseAction:
    
    command: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('command') }})
    r"""Command executed in the Action"""  
    error: PostLoadBalancersIDActionsRemoveTargetActionResponseActionError = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""Error message for the Action if error occurred, otherwise null"""  
    finished: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished') }})
    r"""Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null."""  
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""ID of the Resource"""  
    progress: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('progress') }})
    r"""Progress of Action in percent"""  
    resources: list[PostLoadBalancersIDActionsRemoveTargetActionResponseActionResources] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resources') }})
    r"""Resources the Action relates to"""  
    started: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('started') }})
    r"""Point in time when the Action was started (in ISO-8601 format)"""  
    status: PostLoadBalancersIDActionsRemoveTargetActionResponseActionStatusEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""Status of the Action"""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetActionResponse:
    r"""The `action` key contains the `remove_target` Action"""
    
    action: PostLoadBalancersIDActionsRemoveTargetActionResponseAction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})  
    

@dataclasses.dataclass
class PostLoadBalancersIDActionsRemoveTargetResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    action_response: Optional[PostLoadBalancersIDActionsRemoveTargetActionResponse] = dataclasses.field(default=None)
    r"""The `action` key contains the `remove_target` Action"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    