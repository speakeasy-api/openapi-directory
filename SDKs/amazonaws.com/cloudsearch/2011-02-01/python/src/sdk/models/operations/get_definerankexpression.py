"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from enum import Enum
from typing import Optional

class GETDefineRankExpressionActionEnum(str, Enum):
    DEFINE_RANK_EXPRESSION = 'DefineRankExpression'


@dataclasses.dataclass
class GETDefineRankExpressionRankExpression:
    r"""A named expression that can be evaluated at search time and used for ranking or thresholding in a search query."""
    
    rank_expression: str = dataclasses.field(metadata={'query_param': { 'field_name': 'RankExpression' }})  
    rank_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'RankName' }})  
    
class GETDefineRankExpressionVersionEnum(str, Enum):
    TWO_THOUSAND_AND_ELEVEN_02_01 = '2011-02-01'


@dataclasses.dataclass
class GETDefineRankExpressionRequest:
    
    action: GETDefineRankExpressionActionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Action', 'style': 'form', 'explode': True }})  
    domain_name: str = dataclasses.field(metadata={'query_param': { 'field_name': 'DomainName', 'style': 'form', 'explode': True }})  
    rank_expression: GETDefineRankExpressionRankExpression = dataclasses.field(metadata={'query_param': { 'field_name': 'RankExpression', 'style': 'form', 'explode': True }})
    r"""A named expression that can be evaluated at search time and used for ranking or thresholding in a search query."""  
    version: GETDefineRankExpressionVersionEnum = dataclasses.field(metadata={'query_param': { 'field_name': 'Version', 'style': 'form', 'explode': True }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class GETDefineRankExpressionResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    