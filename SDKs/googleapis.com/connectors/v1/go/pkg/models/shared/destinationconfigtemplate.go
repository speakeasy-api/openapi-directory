// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// DestinationConfigTemplatePortFieldTypeEnum - Whether port number should be provided by customers.
type DestinationConfigTemplatePortFieldTypeEnum string

const (
	DestinationConfigTemplatePortFieldTypeEnumFieldTypeUnspecified DestinationConfigTemplatePortFieldTypeEnum = "FIELD_TYPE_UNSPECIFIED"
	DestinationConfigTemplatePortFieldTypeEnumRequired             DestinationConfigTemplatePortFieldTypeEnum = "REQUIRED"
	DestinationConfigTemplatePortFieldTypeEnumOptional             DestinationConfigTemplatePortFieldTypeEnum = "OPTIONAL"
	DestinationConfigTemplatePortFieldTypeEnumNotUsed              DestinationConfigTemplatePortFieldTypeEnum = "NOT_USED"
)

func (e DestinationConfigTemplatePortFieldTypeEnum) ToPointer() *DestinationConfigTemplatePortFieldTypeEnum {
	return &e
}

func (e *DestinationConfigTemplatePortFieldTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FIELD_TYPE_UNSPECIFIED":
		fallthrough
	case "REQUIRED":
		fallthrough
	case "OPTIONAL":
		fallthrough
	case "NOT_USED":
		*e = DestinationConfigTemplatePortFieldTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DestinationConfigTemplatePortFieldTypeEnum: %v", v)
	}
}

// DestinationConfigTemplate - DestinationConfigTemplate defines required destinations supported by the Connector.
type DestinationConfigTemplate struct {
	// The default port.
	DefaultPort *int `json:"defaultPort,omitempty"`
	// Description.
	Description *string `json:"description,omitempty"`
	// Display name of the parameter.
	DisplayName *string `json:"displayName,omitempty"`
	// Whether the current destination tempalate is part of Advanced settings
	IsAdvanced *bool `json:"isAdvanced,omitempty"`
	// Key of the destination.
	Key *string `json:"key,omitempty"`
	// The maximum number of destinations supported for this key.
	Max *int `json:"max,omitempty"`
	// The minimum number of destinations supported for this key.
	Min *int `json:"min,omitempty"`
	// Whether port number should be provided by customers.
	PortFieldType *DestinationConfigTemplatePortFieldTypeEnum `json:"portFieldType,omitempty"`
	// Regex pattern for host.
	RegexPattern *string `json:"regexPattern,omitempty"`
}
