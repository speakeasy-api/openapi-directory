"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Nodes:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def sasportal_nodes_devices_sign_device(self, request: operations.SasportalNodesDevicesSignDeviceRequest, security: operations.SasportalNodesDevicesSignDeviceSecurity) -> operations.SasportalNodesDevicesSignDeviceResponse:
        r"""Signs a device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesDevicesSignDeviceRequest, base_url, '/v1alpha1/{name}:signDevice', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_sign_device_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesDevicesSignDeviceRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesDevicesSignDeviceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sas_portal_empty = out

        return res

    def sasportal_nodes_devices_update_signed(self, request: operations.SasportalNodesDevicesUpdateSignedRequest, security: operations.SasportalNodesDevicesUpdateSignedSecurity) -> operations.SasportalNodesDevicesUpdateSignedResponse:
        r"""Updates a signed device."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesDevicesUpdateSignedRequest, base_url, '/v1alpha1/{name}:updateSigned', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_update_signed_device_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesDevicesUpdateSignedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesDevicesUpdateSignedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def sasportal_nodes_nodes_delete(self, request: operations.SasportalNodesNodesDeleteRequest, security: operations.SasportalNodesNodesDeleteSecurity) -> operations.SasportalNodesNodesDeleteResponse:
        r"""Deletes a node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDeleteRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.SasportalNodesNodesDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.sas_portal_empty = out

        return res

    def sasportal_nodes_nodes_deployments_create(self, request: operations.SasportalNodesNodesDeploymentsCreateRequest, security: operations.SasportalNodesNodesDeploymentsCreateSecurity) -> operations.SasportalNodesNodesDeploymentsCreateResponse:
        r"""Creates a new deployment."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDeploymentsCreateRequest, base_url, '/v1alpha1/{parent}/deployments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_deployment_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesDeploymentsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDeploymentsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDeployment])
                res.sas_portal_deployment = out

        return res

    def sasportal_nodes_nodes_deployments_list(self, request: operations.SasportalNodesNodesDeploymentsListRequest, security: operations.SasportalNodesNodesDeploymentsListSecurity) -> operations.SasportalNodesNodesDeploymentsListResponse:
        r"""Lists deployments."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDeploymentsListRequest, base_url, '/v1alpha1/{parent}/deployments', request)
        
        query_params = utils.get_query_params(operations.SasportalNodesNodesDeploymentsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDeploymentsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListDeploymentsResponse])
                res.sas_portal_list_deployments_response = out

        return res

    def sasportal_nodes_nodes_devices_create(self, request: operations.SasportalNodesNodesDevicesCreateRequest, security: operations.SasportalNodesNodesDevicesCreateSecurity) -> operations.SasportalNodesNodesDevicesCreateResponse:
        r"""Creates a device under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDevicesCreateRequest, base_url, '/v1alpha1/{parent}/devices', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_device_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesDevicesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDevicesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def sasportal_nodes_nodes_devices_create_signed(self, request: operations.SasportalNodesNodesDevicesCreateSignedRequest, security: operations.SasportalNodesNodesDevicesCreateSignedSecurity) -> operations.SasportalNodesNodesDevicesCreateSignedResponse:
        r"""Creates a signed device under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDevicesCreateSignedRequest, base_url, '/v1alpha1/{parent}/devices:createSigned', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_create_signed_device_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesDevicesCreateSignedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDevicesCreateSignedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalDevice])
                res.sas_portal_device = out

        return res

    def sasportal_nodes_nodes_devices_list(self, request: operations.SasportalNodesNodesDevicesListRequest, security: operations.SasportalNodesNodesDevicesListSecurity) -> operations.SasportalNodesNodesDevicesListResponse:
        r"""Lists devices under a node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesDevicesListRequest, base_url, '/v1alpha1/{parent}/devices', request)
        
        query_params = utils.get_query_params(operations.SasportalNodesNodesDevicesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesDevicesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListDevicesResponse])
                res.sas_portal_list_devices_response = out

        return res

    def sasportal_nodes_nodes_get(self, request: operations.SasportalNodesNodesGetRequest, security: operations.SasportalNodesNodesGetSecurity) -> operations.SasportalNodesNodesGetResponse:
        r"""Returns a requested node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesGetRequest, base_url, '/v1alpha1/{name}', request)
        
        query_params = utils.get_query_params(operations.SasportalNodesNodesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    def sasportal_nodes_nodes_move(self, request: operations.SasportalNodesNodesMoveRequest, security: operations.SasportalNodesNodesMoveSecurity) -> operations.SasportalNodesNodesMoveResponse:
        r"""Moves a node under another node or customer."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesMoveRequest, base_url, '/v1alpha1/{name}:move', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_move_node_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesMoveRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesMoveResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalOperation])
                res.sas_portal_operation = out

        return res

    def sasportal_nodes_nodes_nodes_create(self, request: operations.SasportalNodesNodesNodesCreateRequest, security: operations.SasportalNodesNodesNodesCreateSecurity) -> operations.SasportalNodesNodesNodesCreateResponse:
        r"""Creates a new node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesNodesCreateRequest, base_url, '/v1alpha1/{parent}/nodes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_node", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesNodesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesNodesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    def sasportal_nodes_nodes_nodes_list(self, request: operations.SasportalNodesNodesNodesListRequest, security: operations.SasportalNodesNodesNodesListSecurity) -> operations.SasportalNodesNodesNodesListResponse:
        r"""Lists nodes."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesNodesListRequest, base_url, '/v1alpha1/{parent}/nodes', request)
        
        query_params = utils.get_query_params(operations.SasportalNodesNodesNodesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesNodesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalListNodesResponse])
                res.sas_portal_list_nodes_response = out

        return res

    def sasportal_nodes_nodes_patch(self, request: operations.SasportalNodesNodesPatchRequest, security: operations.SasportalNodesNodesPatchSecurity) -> operations.SasportalNodesNodesPatchResponse:
        r"""Updates an existing node."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.SasportalNodesNodesPatchRequest, base_url, '/v1alpha1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "sas_portal_node", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.SasportalNodesNodesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SasportalNodesNodesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SasPortalNode])
                res.sas_portal_node = out

        return res

    