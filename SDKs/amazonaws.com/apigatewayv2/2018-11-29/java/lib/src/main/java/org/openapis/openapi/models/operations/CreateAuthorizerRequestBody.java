/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class CreateAuthorizerRequestBody {
    /**
     * Represents an Amazon Resource Name (ARN).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizerCredentialsArn")
    public String authorizerCredentialsArn;
    public CreateAuthorizerRequestBody withAuthorizerCredentialsArn(String authorizerCredentialsArn) {
        this.authorizerCredentialsArn = authorizerCredentialsArn;
        return this;
    }
    
    /**
     * A string with a length between [1-64].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizerPayloadFormatVersion")
    public String authorizerPayloadFormatVersion;
    public CreateAuthorizerRequestBody withAuthorizerPayloadFormatVersion(String authorizerPayloadFormatVersion) {
        this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
        return this;
    }
    
    /**
     * An integer with a value between [0-3600].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizerResultTtlInSeconds")
    public Long authorizerResultTtlInSeconds;
    public CreateAuthorizerRequestBody withAuthorizerResultTtlInSeconds(Long authorizerResultTtlInSeconds) {
        this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
        return this;
    }
    
    /**
     * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
     */
    @JsonProperty("authorizerType")
    public CreateAuthorizerRequestBodyAuthorizerTypeEnum authorizerType;
    public CreateAuthorizerRequestBody withAuthorizerType(CreateAuthorizerRequestBodyAuthorizerTypeEnum authorizerType) {
        this.authorizerType = authorizerType;
        return this;
    }
    
    /**
     * A string representation of a URI with a length between [1-2048].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizerUri")
    public String authorizerUri;
    public CreateAuthorizerRequestBody withAuthorizerUri(String authorizerUri) {
        this.authorizerUri = authorizerUri;
        return this;
    }
    
    /**
     * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html"&gt;Working with AWS Lambda authorizers for HTTP APIs&lt;/a&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enableSimpleResponses")
    public Boolean enableSimpleResponses;
    public CreateAuthorizerRequestBody withEnableSimpleResponses(Boolean enableSimpleResponses) {
        this.enableSimpleResponses = enableSimpleResponses;
        return this;
    }
    
    /**
     * The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
     */
    @JsonProperty("identitySource")
    public String[] identitySource;
    public CreateAuthorizerRequestBody withIdentitySource(String[] identitySource) {
        this.identitySource = identitySource;
        return this;
    }
    
    /**
     * A string with a length between [0-1024].
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identityValidationExpression")
    public String identityValidationExpression;
    public CreateAuthorizerRequestBody withIdentityValidationExpression(String identityValidationExpression) {
        this.identityValidationExpression = identityValidationExpression;
        return this;
    }
    
    /**
     * Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtConfiguration")
    public CreateAuthorizerRequestBodyJwtConfiguration jwtConfiguration;
    public CreateAuthorizerRequestBody withJwtConfiguration(CreateAuthorizerRequestBodyJwtConfiguration jwtConfiguration) {
        this.jwtConfiguration = jwtConfiguration;
        return this;
    }
    
    /**
     * A string with a length between [1-128].
     */
    @JsonProperty("name")
    public String name;
    public CreateAuthorizerRequestBody withName(String name) {
        this.name = name;
        return this;
    }
    
}
