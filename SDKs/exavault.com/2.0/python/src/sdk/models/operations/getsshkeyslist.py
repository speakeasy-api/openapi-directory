"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import sshkeycollectionresponse as shared_sshkeycollectionresponse
from typing import Optional


@dataclasses.dataclass
class GetSSHKeysListRequest:
    
    ev_access_token: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-access-token', 'style': 'simple', 'explode': False }})
    r"""Access token required to make the API call."""  
    ev_api_key: str = dataclasses.field(metadata={'header': { 'field_name': 'ev-api-key', 'style': 'simple', 'explode': False }})
    r"""API key required to make the API call."""  
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    r"""Limits the results by the given number. Cannot be set higher than 100."""  
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    r"""Determines which item to start on for pagination. Use zero (0) to start at the beginning of the list."""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'userId', 'style': 'form', 'explode': True }})
    r"""Only return results for the given user ID. This is not the username, but the numeric ID of the user."""  
    

@dataclasses.dataclass
class GetSSHKeysListResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    ssh_key_collection_response: Optional[shared_sshkeycollectionresponse.SSHKeyCollectionResponse] = dataclasses.field(default=None)
    r"""Successful Operation"""  
    