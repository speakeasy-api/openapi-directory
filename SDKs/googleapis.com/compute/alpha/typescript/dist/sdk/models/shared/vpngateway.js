"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnGateway = exports.VpnGatewayStackTypeEnum = exports.VpnGatewayGatewayIpVersionEnum = void 0;
var utils_1 = require("../../../internal/utils");
var vpngatewayvpngatewayinterface_1 = require("./vpngatewayvpngatewayinterface");
var class_transformer_1 = require("class-transformer");
/**
 * The IP family of the gateway IPs for the HA-VPN gateway interfaces. If not specified, IPV4 will be used.
 */
var VpnGatewayGatewayIpVersionEnum;
(function (VpnGatewayGatewayIpVersionEnum) {
    VpnGatewayGatewayIpVersionEnum["Ipv4"] = "IPV4";
    VpnGatewayGatewayIpVersionEnum["Ipv6"] = "IPV6";
})(VpnGatewayGatewayIpVersionEnum = exports.VpnGatewayGatewayIpVersionEnum || (exports.VpnGatewayGatewayIpVersionEnum = {}));
/**
 * The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used.
 */
var VpnGatewayStackTypeEnum;
(function (VpnGatewayStackTypeEnum) {
    VpnGatewayStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    VpnGatewayStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(VpnGatewayStackTypeEnum = exports.VpnGatewayStackTypeEnum || (exports.VpnGatewayStackTypeEnum = {}));
/**
 * Represents a HA VPN gateway. HA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see Cloud VPN topologies .
 */
var VpnGateway = /** @class */ (function (_super) {
    __extends(VpnGateway, _super);
    function VpnGateway() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creationTimestamp" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "creationTimestamp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "description" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "description", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gatewayIpVersion" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "gatewayIpVersion", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "kind" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "kind", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labelFingerprint" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "labelFingerprint", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "labels" }),
        __metadata("design:type", Object)
    ], VpnGateway.prototype, "labels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "region" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "region", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "selfLink" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "selfLink", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], VpnGateway.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: vpngatewayvpngatewayinterface_1.VpnGatewayVpnGatewayInterface }),
        (0, class_transformer_1.Expose)({ name: "vpnInterfaces" }),
        (0, class_transformer_1.Type)(function () { return vpngatewayvpngatewayinterface_1.VpnGatewayVpnGatewayInterface; }),
        __metadata("design:type", Array)
    ], VpnGateway.prototype, "vpnInterfaces", void 0);
    return VpnGateway;
}(utils_1.SpeakeasyBase));
exports.VpnGateway = VpnGateway;
