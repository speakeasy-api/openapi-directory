// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GeocodeReverseRequestBodyOutputCaseEnum - The output case style
type GeocodeReverseRequestBodyOutputCaseEnum string

const (
	GeocodeReverseRequestBodyOutputCaseEnumCamel GeocodeReverseRequestBodyOutputCaseEnum = "camel"
)

func (e *GeocodeReverseRequestBodyOutputCaseEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "camel":
		*e = GeocodeReverseRequestBodyOutputCaseEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GeocodeReverseRequestBodyOutputCaseEnum: %s", s)
	}
}

type GeocodeReverseRequestBody struct {
	// The language to display results in, available languages are: <ul> <li>de, en, es, fr, it, pt, ru</li> </ul>
	LanguageCode *string `form:"name=language-code"`
	// The location latitude in decimal degrees format
	Latitude string `form:"name=latitude"`
	// The location longitude in decimal degrees format
	Longitude string `form:"name=longitude"`
	// The output case style
	OutputCase *GeocodeReverseRequestBodyOutputCaseEnum `form:"name=output-case"`
	// The zoom level to respond with: <br> <ul> <li>address - the most precise address available</li> <li>street - the street level</li> <li>city - the city level</li> <li>state - the state level</li> <li>country - the country level</li> </ul>
	Zoom *string `form:"name=zoom"`
}

type GeocodeReverseRequest struct {
	Request *GeocodeReverseRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
}

type GeocodeReverseResponse struct {
	// Your API request has been rejected. Check error code for details
	APIError               *shared.APIError
	ContentType            string
	GeocodeReverseResponse *shared.GeocodeReverseResponse
	StatusCode             int
	RawResponse            *http.Response
}
