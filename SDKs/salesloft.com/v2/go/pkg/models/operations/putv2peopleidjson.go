// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

type PutV2PeopleIDJSONRequestBody struct {
	// ID of the Account to link this person to
	AccountID *int64 `form:"name=account_id"`
	// City
	City *string `form:"name=city"`
	// Specific methods of communication to prevent for this person. This will prevent individual execution of these communication types as well as automatically skip cadence steps of this communication type for this person in SalesLoft. Values currently accepted: call, email, message
	ContactRestrictions []string `form:"name=contact_restrictions"`
	// Country
	Country *string `form:"name=country"`
	// Requires Salesforce.
	//
	// ID of the person in your external CRM. You must provide a crm_id_type if this is included.
	//
	// Validations will be applied to the crm_id depending on the crm_id_type. A "salesforce" ID must be exactly 18 characters. A "salesforce" ID must be either a Lead (00Q) or Contact (003) object. The type will be validated using the 18 character ID.
	//
	// This field can only be used if your application or API key has the "person:set_crm_id" scope.
	//
	//
	CrmID *string `form:"name=crm_id"`
	// The CRM that the provided crm_id is for. Must be one of: salesforce
	CrmIDType *string `form:"name=crm_id_type"`
	// Custom fields are defined by the user's team. Only fields with values are presented in the API.
	CustomFields map[string]interface{} `form:"name=custom_fields,json"`
	// Whether or not this person has opted out of all communication. Setting this value to true prevents this person from being called, emailed, or added to a cadence in SalesLoft. If this person is currently in a cadence, they will be removed.
	DoNotContact *bool `form:"name=do_not_contact"`
	// Email address
	EmailAddress *string `form:"name=email_address"`
	// First name
	FirstName *string `form:"name=first_name"`
	// Home phone without formatting
	HomePhone *string `form:"name=home_phone"`
	// ID of the Import this person is a part of. A person can be part of multiple imports, but this ID will always be the most recent Import
	ImportID *int64 `form:"name=import_id"`
	// The Job Seniority of a Person, must be one of director, executive, individual_contributor, manager, vice_president, unknown
	JobSeniority *string `form:"name=job_seniority"`
	// Last name
	LastName *string `form:"name=last_name"`
	// Linkedin URL
	LinkedinURL *string `form:"name=linkedin_url"`
	// Time locale of the person
	Locale *string `form:"name=locale"`
	// Mobile phone without formatting
	MobilePhone *string `form:"name=mobile_phone"`
	// ID of the User that owns this person
	OwnerID *int64 `form:"name=owner_id"`
	// Company industry. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
	PersonCompanyIndustry *string `form:"name=person_company_industry"`
	// Company name. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
	PersonCompanyName *string `form:"name=person_company_name"`
	// Company website. This property is specific to this person, unrelated to the company object. Updating the company object associated with this person is recommended
	PersonCompanyWebsite *string `form:"name=person_company_website"`
	// ID of the PersonStage of this person
	PersonStageID *int64 `form:"name=person_stage_id"`
	// Personal email address
	PersonalEmailAddress *string `form:"name=personal_email_address"`
	// The website of this person
	PersonalWebsite *string `form:"name=personal_website"`
	// Phone without formatting
	Phone *string `form:"name=phone"`
	// Phone extension without formatting
	PhoneExtension *string `form:"name=phone_extension"`
	// Alternate email address
	SecondaryEmailAddress *string `form:"name=secondary_email_address"`
	// State
	State *string `form:"name=state"`
	// All tags applied to this person
	Tags []string `form:"name=tags"`
	// Job title
	Title *string `form:"name=title"`
	// The twitter handle of this person
	TwitterHandle *string `form:"name=twitter_handle"`
	// Work location - city
	WorkCity *string `form:"name=work_city"`
	// Work location - country
	WorkCountry *string `form:"name=work_country"`
	// Work location - state
	WorkState *string `form:"name=work_state"`
}

type PutV2PeopleIDJSONRequest struct {
	RequestBody *PutV2PeopleIDJSONRequestBody `request:"mediaType=application/x-www-form-urlencoded"`
	// Person id
	ID string `pathParam:"style=simple,explode=false,name=id"`
}

type PutV2PeopleIDJSONResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
