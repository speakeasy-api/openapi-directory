"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import indexstatus_enum as shared_indexstatus_enum
from ..shared import keyschemaelement as shared_keyschemaelement
from ..shared import projection as shared_projection
from ..shared import provisionedthroughputdescription as shared_provisionedthroughputdescription
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GlobalSecondaryIndexDescription:
    r"""Represents the properties of a global secondary index."""
    
    backfilling: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Backfilling'), 'exclude': lambda f: f is None }})  
    index_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexArn'), 'exclude': lambda f: f is None }})  
    index_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexName'), 'exclude': lambda f: f is None }})  
    index_size_bytes: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexSizeBytes'), 'exclude': lambda f: f is None }})  
    index_status: Optional[shared_indexstatus_enum.IndexStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('IndexStatus'), 'exclude': lambda f: f is None }})  
    item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ItemCount'), 'exclude': lambda f: f is None }})  
    key_schema: Optional[list[shared_keyschemaelement.KeySchemaElement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KeySchema'), 'exclude': lambda f: f is None }})  
    projection: Optional[shared_projection.Projection] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Projection'), 'exclude': lambda f: f is None }})  
    provisioned_throughput: Optional[shared_provisionedthroughputdescription.ProvisionedThroughputDescription] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProvisionedThroughput'), 'exclude': lambda f: f is None }})  
    