/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { MetadataProperties } from "./metadataproperties";
import { TrialComponentArtifact } from "./trialcomponentartifact";
import { TrialComponentMetricSummary } from "./trialcomponentmetricsummary";
import { TrialComponentParameterValue } from "./trialcomponentparametervalue";
import { TrialComponentSource } from "./trialcomponentsource";
import { TrialComponentStatus } from "./trialcomponentstatus";
import { UserContext } from "./usercontext";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Success
 */
export class DescribeTrialComponentResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "CreatedBy" })
  @Type(() => UserContext)
  createdBy?: UserContext;

  @SpeakeasyMetadata()
  @Expose({ name: "CreationTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  creationTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "DisplayName" })
  displayName?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "EndTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  endTime?: Date;

  @SpeakeasyMetadata({ elemType: TrialComponentArtifact })
  @Expose({ name: "InputArtifacts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentArtifact> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentArtifact);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  inputArtifacts?: Record<string, TrialComponentArtifact>;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedBy" })
  @Type(() => UserContext)
  lastModifiedBy?: UserContext;

  @SpeakeasyMetadata()
  @Expose({ name: "LastModifiedTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastModifiedTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "LineageGroupArn" })
  lineageGroupArn?: string;

  /**
   * Metadata properties of the tracking entity, trial, or trial component.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MetadataProperties" })
  @Type(() => MetadataProperties)
  metadataProperties?: MetadataProperties;

  @SpeakeasyMetadata({ elemType: TrialComponentMetricSummary })
  @Expose({ name: "Metrics" })
  @Type(() => TrialComponentMetricSummary)
  metrics?: TrialComponentMetricSummary[];

  @SpeakeasyMetadata({ elemType: TrialComponentArtifact })
  @Expose({ name: "OutputArtifacts" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentArtifact> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentArtifact);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  outputArtifacts?: Record<string, TrialComponentArtifact>;

  @SpeakeasyMetadata({ elemType: TrialComponentParameterValue })
  @Expose({ name: "Parameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, TrialComponentParameterValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], TrialComponentParameterValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  parameters?: Record<string, TrialComponentParameterValue>;

  @SpeakeasyMetadata()
  @Expose({ name: "Source" })
  @Type(() => TrialComponentSource)
  source?: TrialComponentSource;

  @SpeakeasyMetadata({ elemType: TrialComponentSource })
  @Expose({ name: "Sources" })
  @Type(() => TrialComponentSource)
  sources?: TrialComponentSource[];

  @SpeakeasyMetadata()
  @Expose({ name: "StartTime" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  startTime?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "Status" })
  @Type(() => TrialComponentStatus)
  status?: TrialComponentStatus;

  @SpeakeasyMetadata()
  @Expose({ name: "TrialComponentArn" })
  trialComponentArn?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "TrialComponentName" })
  trialComponentName?: string;
}
