"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import deltatargetcompressiontype_enum as shared_deltatargetcompressiontype_enum
from ..shared import directschemachangepolicy as shared_directschemachangepolicy
from ..shared import targetformat_enum as shared_targetformat_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class S3DeltaDirectTarget:
    r"""Specifies a target that writes to a Delta Lake data source in Amazon S3."""
    
    compression: shared_deltatargetcompressiontype_enum.DeltaTargetCompressionTypeEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Compression') }})  
    format: shared_targetformat_enum.TargetFormatEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Format') }})  
    inputs: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Inputs') }})  
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name') }})  
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Path') }})  
    additional_options: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AdditionalOptions'), 'exclude': lambda f: f is None }})  
    partition_keys: Optional[list[list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PartitionKeys'), 'exclude': lambda f: f is None }})  
    schema_change_policy: Optional[shared_directschemachangepolicy.DirectSchemaChangePolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SchemaChangePolicy'), 'exclude': lambda f: f is None }})  
    