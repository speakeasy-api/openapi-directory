// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ManagedCertificateStateEnum - Output only. State of the managed certificate resource.
type ManagedCertificateStateEnum string

const (
	ManagedCertificateStateEnumStateUnspecified ManagedCertificateStateEnum = "STATE_UNSPECIFIED"
	ManagedCertificateStateEnumProvisioning     ManagedCertificateStateEnum = "PROVISIONING"
	ManagedCertificateStateEnumFailed           ManagedCertificateStateEnum = "FAILED"
	ManagedCertificateStateEnumActive           ManagedCertificateStateEnum = "ACTIVE"
)

func (e ManagedCertificateStateEnum) ToPointer() *ManagedCertificateStateEnum {
	return &e
}

func (e *ManagedCertificateStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STATE_UNSPECIFIED":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "FAILED":
		fallthrough
	case "ACTIVE":
		*e = ManagedCertificateStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedCertificateStateEnum: %v", v)
	}
}

// ManagedCertificate - Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificate struct {
	// Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.
	AuthorizationAttemptInfo []AuthorizationAttemptInfo `json:"authorizationAttemptInfo,omitempty"`
	// Immutable. Authorizations that will be used for performing domain authorization.
	DNSAuthorizations []string `json:"dnsAuthorizations,omitempty"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `json:"domains,omitempty"`
	// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig *string `json:"issuanceConfig,omitempty"`
	// Information about issues with provisioning a Managed Certificate.
	ProvisioningIssue *ProvisioningIssue `json:"provisioningIssue,omitempty"`
	// Output only. State of the managed certificate resource.
	State *ManagedCertificateStateEnum `json:"state,omitempty"`
}

// ManagedCertificateInput - Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
type ManagedCertificateInput struct {
	// Immutable. Authorizations that will be used for performing domain authorization.
	DNSAuthorizations []string `json:"dnsAuthorizations,omitempty"`
	// Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.
	Domains []string `json:"domains,omitempty"`
	// Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
	IssuanceConfig *string `json:"issuanceConfig,omitempty"`
}
