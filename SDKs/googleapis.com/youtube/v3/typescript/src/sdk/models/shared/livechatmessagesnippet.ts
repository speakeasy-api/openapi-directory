/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { LiveChatFanFundingEventDetails } from "./livechatfanfundingeventdetails";
import { LiveChatGiftMembershipReceivedDetails } from "./livechatgiftmembershipreceiveddetails";
import { LiveChatMemberMilestoneChatDetails } from "./livechatmembermilestonechatdetails";
import { LiveChatMembershipGiftingDetails } from "./livechatmembershipgiftingdetails";
import { LiveChatMessageDeletedDetails } from "./livechatmessagedeleteddetails";
import { LiveChatMessageRetractedDetails } from "./livechatmessageretracteddetails";
import { LiveChatNewSponsorDetails } from "./livechatnewsponsordetails";
import { LiveChatSuperChatDetails } from "./livechatsuperchatdetails";
import { LiveChatSuperStickerDetails } from "./livechatsuperstickerdetails";
import { LiveChatTextMessageDetails } from "./livechattextmessagedetails";
import { LiveChatUserBannedMessageDetails } from "./livechatuserbannedmessagedetails";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
 */
export enum LiveChatMessageSnippetTypeEnum {
  InvalidType = "invalidType",
  TextMessageEvent = "textMessageEvent",
  Tombstone = "tombstone",
  FanFundingEvent = "fanFundingEvent",
  ChatEndedEvent = "chatEndedEvent",
  SponsorOnlyModeStartedEvent = "sponsorOnlyModeStartedEvent",
  SponsorOnlyModeEndedEvent = "sponsorOnlyModeEndedEvent",
  NewSponsorEvent = "newSponsorEvent",
  MemberMilestoneChatEvent = "memberMilestoneChatEvent",
  MembershipGiftingEvent = "membershipGiftingEvent",
  GiftMembershipReceivedEvent = "giftMembershipReceivedEvent",
  MessageDeletedEvent = "messageDeletedEvent",
  MessageRetractedEvent = "messageRetractedEvent",
  UserBannedEvent = "userBannedEvent",
  SuperChatEvent = "superChatEvent",
  SuperStickerEvent = "superStickerEvent",
}

/**
 * Next ID: 33
 */
export class LiveChatMessageSnippet extends SpeakeasyBase {
  /**
   * The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase
   */
  @SpeakeasyMetadata()
  @Expose({ name: "authorChannelId" })
  authorChannelId?: string;

  /**
   * Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "displayMessage" })
  displayMessage?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "fanFundingEventDetails" })
  @Type(() => LiveChatFanFundingEventDetails)
  fanFundingEventDetails?: LiveChatFanFundingEventDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "giftMembershipReceivedDetails" })
  @Type(() => LiveChatGiftMembershipReceivedDetails)
  giftMembershipReceivedDetails?: LiveChatGiftMembershipReceivedDetails;

  /**
   * Whether the message has display content that should be displayed to users.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "hasDisplayContent" })
  hasDisplayContent?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "liveChatId" })
  liveChatId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "memberMilestoneChatDetails" })
  @Type(() => LiveChatMemberMilestoneChatDetails)
  memberMilestoneChatDetails?: LiveChatMemberMilestoneChatDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "membershipGiftingDetails" })
  @Type(() => LiveChatMembershipGiftingDetails)
  membershipGiftingDetails?: LiveChatMembershipGiftingDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "messageDeletedDetails" })
  @Type(() => LiveChatMessageDeletedDetails)
  messageDeletedDetails?: LiveChatMessageDeletedDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "messageRetractedDetails" })
  @Type(() => LiveChatMessageRetractedDetails)
  messageRetractedDetails?: LiveChatMessageRetractedDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "newSponsorDetails" })
  @Type(() => LiveChatNewSponsorDetails)
  newSponsorDetails?: LiveChatNewSponsorDetails;

  /**
   * The date and time when the message was orignally published.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishedAt" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  publishedAt?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "superChatDetails" })
  @Type(() => LiveChatSuperChatDetails)
  superChatDetails?: LiveChatSuperChatDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "superStickerDetails" })
  @Type(() => LiveChatSuperStickerDetails)
  superStickerDetails?: LiveChatSuperStickerDetails;

  @SpeakeasyMetadata()
  @Expose({ name: "textMessageDetails" })
  @Type(() => LiveChatTextMessageDetails)
  textMessageDetails?: LiveChatTextMessageDetails;

  /**
   * The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: LiveChatMessageSnippetTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "userBannedDetails" })
  @Type(() => LiveChatUserBannedMessageDetails)
  userBannedDetails?: LiveChatUserBannedMessageDetails;
}
