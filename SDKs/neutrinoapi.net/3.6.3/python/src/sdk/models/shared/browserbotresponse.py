"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BrowserBotResponse:
    
    content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The complete raw, decompressed and decoded page content. Usually will be either HTML, JSON or XML"""  
    elements: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elements') }})
    r"""Array containing all the elements matching the supplied selector. <br>Each element object will contain the text content, HTML content and all current element attributes"""  
    error_message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error-message') }})
    r"""Contains the error message if an error has occurred ('is-error' will be true)"""  
    exec_results: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exec-results') }})
    r"""If you executed any JavaScript this array holds the results as objects"""  
    http_redirect_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-redirect-url') }})
    r"""The redirected URL if the URL responded with an HTTP redirect"""  
    http_status_code: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-status-code') }})
    r"""The HTTP status code the URL returned"""  
    http_status_message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('http-status-message') }})
    r"""The HTTP status message the URL returned"""  
    is_error: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-error') }})
    r"""True if an error has occurred loading the page. Check the 'error-message' field for details"""  
    is_http_ok: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-http-ok') }})
    r"""True if the HTTP status is OK (200)"""  
    is_http_redirect: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-http-redirect') }})
    r"""True if the URL responded with an HTTP redirect"""  
    is_secure: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-secure') }})
    r"""True if the page is secured using TLS/SSL"""  
    is_timeout: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-timeout') }})
    r"""True if a timeout occurred while loading the page. You can set the timeout with the request parameter 'timeout'"""  
    language_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('language-code') }})
    r"""The ISO 2-letter language code of the page. Extracted from either the HTML document or via HTTP headers"""  
    load_time: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('load-time') }})
    r"""The number of seconds taken to load the page (from initial request until DOM ready)"""  
    mime_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mime-type') }})
    r"""The document MIME type"""  
    response_headers: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response-headers') }})
    r"""Map containing all the HTTP response headers the URL responded with"""  
    security_details: dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('security-details') }})
    r"""Map containing details of the TLS/SSL setup"""  
    server_ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('server-ip') }})
    r"""The HTTP servers IP address"""  
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The document title"""  
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""The page URL"""  
    