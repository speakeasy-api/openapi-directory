/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget {
    /**
     * List of health statuses of the services on this target
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("health_status")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus[] healthStatus;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withHealthStatus(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetHealthStatus[] healthStatus) {
        this.healthStatus = healthStatus;
        return this;
    }
    
    /**
     * IP targets where the traffic should be routed through. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetIp ip;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withIp(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetIp ip) {
        this.ip = ip;
        return this;
    }
    
    /**
     * Label selector and a list of selected targets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label_selector")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector labelSelector;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withLabelSelector(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetLabelSelector labelSelector) {
        this.labelSelector = labelSelector;
        return this;
    }
    
    /**
     * Server where the traffic should be routed through
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer server;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withServer(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetLoadBalancerTargetServer server) {
        this.server = server;
        return this;
    }
    
    /**
     * List of selected targets
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("targets")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetTargets[] targets;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withTargets(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetTargets[] targets) {
        this.targets = targets;
        return this;
    }
    
    /**
     * Type of the resource
     */
    @JsonProperty("type")
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum type;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withType(PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTargetTypeEnum type) {
        this.type = type;
        return this;
    }
    
    /**
     * Use the private network IP instead of the public IP. Default value is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_private_ip")
    public Boolean usePrivateIp;
    public PutLoadBalancersId200ApplicationJSONLoadBalancerLoadBalancerTarget withUsePrivateIp(Boolean usePrivateIp) {
        this.usePrivateIp = usePrivateIp;
        return this;
    }
    
}
