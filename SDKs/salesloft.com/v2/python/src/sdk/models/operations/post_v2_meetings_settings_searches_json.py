"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from typing import Optional


@dataclasses.dataclass
class PostV2MeetingsSettingsSearchesJSONRequest:
    
    calendar_type: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'calendar_type', 'style': 'form', 'explode': True }})
    r"""Filters meeting settings by calendar type"""  
    include_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include_paging_counts', 'style': 'form', 'explode': True }})
    r"""Whether to include total_pages and total_count in the metadata. Defaults to false"""  
    limit_paging_counts: Optional[bool] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit_paging_counts', 'style': 'form', 'explode': True }})
    r"""Specifies whether the max limit of 10k records should be applied to pagination counts. Affects the total_count and total_pages data"""  
    page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page', 'style': 'form', 'explode': True }})
    r"""The current page to fetch results from. Defaults to 1"""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'per_page', 'style': 'form', 'explode': True }})
    r"""How many records to show per page in the range [1, 100]. Defaults to 25"""  
    updated_at: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'updated_at', 'style': 'form', 'explode': False }})
    r"""Equality filters that are applied to the updated_at field. A single filter can be used by itself or combined with other filters to create a range.
    
    ---CUSTOM---
    {\"type\":\"object\",\"keys\":[{\"name\":\"gt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"gte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are greater than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lt\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than the provided iso8601 timestamp. The comparison is done using microsecond precision.\"},{\"name\":\"lte\",\"type\":\"iso8601 string\",\"description\":\"Returns all matching records that are less than or equal to the provided iso8601 timestamp. The comparison is done using microsecond precision.\"}]}
    """  
    user_guids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'user_guids', 'style': 'form', 'explode': False }})
    r"""Filters meeting settings by array of user_guids"""  
    

@dataclasses.dataclass
class PostV2MeetingsSettingsSearchesJSONResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    