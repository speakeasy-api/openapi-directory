<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * POSTRevenueScheduleByDateRangeType - Container for custom fields of a Revenue Schedule object.
 * 
 * 
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class POSTRevenueScheduleByDateRangeType
{
    /**
     * How you want to distribute the revenue. 
     * 
     * 
     * 
     * * Daily Distribution: Distributes revenue evenly across each day between the recognitionStart and recognitionEnd dates.
     * * Monthly Distribution (Back Load): Back loads the revenue so you distribute the monthly amount in the partial month in the end only.
     * * Monthly Distribution (Front Load): Front loads the revenue so you distribute the monthly amount in the partial month in the beginning only.
     * * Monthly Distribution (Proration by Days): Splits the revenue amount between the two partial months.
     * 
     * **Note:** To use any of the Monthly Distribution options, you must have the "Monthly recognition over time" model enabled in **Settings > Finance > Manage Revenue Recognition Models** in the Zuora UI.
     * 
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\POSTRevenueScheduleByDateRangeTypeDistributionTypeEnum $distributionType
     */
	#[\JMS\Serializer\Annotation\SerializedName('distributionType')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\POSTRevenueScheduleByDateRangeTypeDistributionTypeEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?POSTRevenueScheduleByDateRangeTypeDistributionTypeEnum $distributionType = null;
    
    /**
     * Additional information about this record.
     * 
     * 
     * 
     * @var ?string $notes
     */
	#[\JMS\Serializer\Annotation\SerializedName('notes')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $notes = null;
    
    /**
     * The end date of a recognition period in `yyyy-mm-dd` format. 
     * 
     * 
     * The maximum difference between the `recognitionStart` and `recognitionEnd` date fields is equal to 250 multiplied by the length of an accounting period.
     * 
     * 
     * @var \DateTime $recognitionEnd
     */
	#[\JMS\Serializer\Annotation\SerializedName('recognitionEnd')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $recognitionEnd;
    
    /**
     * The start date of a recognition period in `yyyy-mm-dd` format.
     * 
     * 
     * If there is a closed accounting period between the `recognitionStart` and `recognitionEnd` dates, the revenue that would be placed in the closed accounting period is instead placed in the next open accounting period.
     * 
     * 
     * @var \DateTime $recognitionStart
     */
	#[\JMS\Serializer\Annotation\SerializedName('recognitionStart')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    public \DateTime $recognitionStart;
    
    /**
     * Must specify at least one of `eventType` or `eventTypeSystemId`.
     * 
     * 
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\POSTRevenueScheduleByDateRangeTypeRevenueEvent $revenueEvent
     */
	#[\JMS\Serializer\Annotation\SerializedName('revenueEvent')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\POSTRevenueScheduleByDateRangeTypeRevenueEvent')]
    public POSTRevenueScheduleByDateRangeTypeRevenueEvent $revenueEvent;
    
	public function __construct()
	{
		$this->distributionType = null;
		$this->notes = null;
		$this->recognitionEnd = new \DateTime();
		$this->recognitionStart = new \DateTime();
		$this->revenueEvent = new \OpenAPI\OpenAPI\Models\Shared\POSTRevenueScheduleByDateRangeTypeRevenueEvent();
	}
}
