"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googleclouddialogflowv2beta1eventinput as shared_googleclouddialogflowv2beta1eventinput
from ..shared import googleclouddialogflowv2beta1inputaudioconfig as shared_googleclouddialogflowv2beta1inputaudioconfig
from ..shared import googleclouddialogflowv2beta1telephonydtmfevents as shared_googleclouddialogflowv2beta1telephonydtmfevents
from ..shared import googleclouddialogflowv2beta1textinput as shared_googleclouddialogflowv2beta1textinput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudDialogflowV2beta1QueryInput:
    r"""Represents the query input. It can contain either: 1. An audio config which instructs the speech recognizer how to process the speech audio. 2. A conversational query in the form of text. 3. An event that specifies which intent to trigger."""
    
    audio_config: Optional[shared_googleclouddialogflowv2beta1inputaudioconfig.GoogleCloudDialogflowV2beta1InputAudioConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audioConfig'), 'exclude': lambda f: f is None }})
    r"""Instructs the speech recognizer on how to process the audio content."""  
    dtmf: Optional[shared_googleclouddialogflowv2beta1telephonydtmfevents.GoogleCloudDialogflowV2beta1TelephonyDtmfEvents] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dtmf'), 'exclude': lambda f: f is None }})
    r"""A wrapper of repeated TelephonyDtmf digits."""  
    event: Optional[shared_googleclouddialogflowv2beta1eventinput.GoogleCloudDialogflowV2beta1EventInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('event'), 'exclude': lambda f: f is None }})
    r"""Events allow for matching intents by event name instead of the natural language input. For instance, input `` can trigger a personalized welcome response. The parameter `name` may be used by the agent in the response: `\\"Hello #welcome_event.name! What can I do for you today?\\"`."""  
    text: Optional[shared_googleclouddialogflowv2beta1textinput.GoogleCloudDialogflowV2beta1TextInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text'), 'exclude': lambda f: f is None }})
    r"""Represents the natural language text to be processed."""  
    