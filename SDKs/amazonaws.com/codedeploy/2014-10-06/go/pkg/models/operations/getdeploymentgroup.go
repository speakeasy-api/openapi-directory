// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetDeploymentGroupXAmzTargetEnum
type GetDeploymentGroupXAmzTargetEnum string

const (
	GetDeploymentGroupXAmzTargetEnumCodeDeploy20141006GetDeploymentGroup GetDeploymentGroupXAmzTargetEnum = "CodeDeploy_20141006.GetDeploymentGroup"
)

func (e *GetDeploymentGroupXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "CodeDeploy_20141006.GetDeploymentGroup":
		*e = GetDeploymentGroupXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGroupXAmzTargetEnum: %s", s)
	}
}

type GetDeploymentGroupHeaders struct {
	XAmzAlgorithm     *string                          `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                          `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                          `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                          `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                          `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                          `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                          `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        GetDeploymentGroupXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetDeploymentGroupRequest struct {
	Headers GetDeploymentGroupHeaders
	Request shared.GetDeploymentGroupInput `request:"mediaType=application/json"`
}

type GetDeploymentGroupResponse struct {
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// DeploymentConfigDoesNotExistException
	DeploymentConfigDoesNotExistException interface{}
	// DeploymentGroupDoesNotExistException
	DeploymentGroupDoesNotExistException interface{}
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// Success
	GetDeploymentGroupOutput *shared.GetDeploymentGroupOutput
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	StatusCode                          int
	RawResponse                         *http.Response
}
