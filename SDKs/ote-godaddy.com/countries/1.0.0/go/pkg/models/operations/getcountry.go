// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetCountryOrderEnum - The direction to sort the result country states by.
type GetCountryOrderEnum string

const (
	GetCountryOrderEnumAscending  GetCountryOrderEnum = "ascending"
	GetCountryOrderEnumDescending GetCountryOrderEnum = "descending"
)

func (e GetCountryOrderEnum) ToPointer() *GetCountryOrderEnum {
	return &e
}

func (e *GetCountryOrderEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ascending":
		fallthrough
	case "descending":
		*e = GetCountryOrderEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCountryOrderEnum: %v", v)
	}
}

// GetCountrySortEnum - The term to sort the result country states by.
type GetCountrySortEnum string

const (
	GetCountrySortEnumKey   GetCountrySortEnum = "key"
	GetCountrySortEnumLabel GetCountrySortEnum = "label"
)

func (e GetCountrySortEnum) ToPointer() *GetCountrySortEnum {
	return &e
}

func (e *GetCountrySortEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "key":
		fallthrough
	case "label":
		*e = GetCountrySortEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCountrySortEnum: %v", v)
	}
}

type GetCountryRequest struct {
	// The country key
	CountryKey string `pathParam:"style=simple,explode=false,name=countryKey"`
	// MarketId in which the request is being made, and for which responses should be localized
	MarketID string `queryParam:"style=form,explode=true,name=marketId"`
	// The direction to sort the result country states by.
	Order *GetCountryOrderEnum `queryParam:"style=form,explode=true,name=order"`
	// The term to sort the result country states by.
	Sort *GetCountrySortEnum `queryParam:"style=form,explode=true,name=sort"`
}

type GetCountryResponse struct {
	// Request was successful
	ArrayOfCountry []shared.Country
	ContentType    string
	// Country not found
	Error *shared.Error
	// Too many requests received within interval
	ErrorLimit  *shared.ErrorLimit
	StatusCode  int
	RawResponse *http.Response
}
