"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Registration:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def register(self, request: operations.RegisterRequest) -> operations.RegisterResponse:
        r"""Register a new user, creating them an account.
        
        Registration, when successful, will return an array of access tokens so the user is
        immediately signed in.
        
        It returns Catalog and Commerce scoped tokens for both Account and Profile.
        The Commerce ones are intended to allow the purchase of a subscription plan
        in the step after registration, without the user being prompted to enter
        their username and password again.
        
        An email will also be sent with a link they need to click to confirm their
        email address. This confirmation is done via the /verify-email endpoint.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/register'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "registration_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        query_params = utils.get_query_params(operations.RegisterRequest, request)
        
        client = self._client
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RegisterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.AccessToken]])
                res.access_tokens = out
        else:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ServiceError])
                res.service_error = out

        return res

    