"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

SERVERS = [
    "https://sandbox.gerermesaffaires.com/api/v1/",
    r"""Sandbox server for integrators"""
]
"""Contains the list of servers available to the SDK"""

class SDK:
    r"""Sécurisez vos données en interfaçant votre logiciel métier avec le service en ligne GererMesAffaires
    https://api.gerermesaffaires.com/ - Documentation fonctionnelle des API GererMesAffaires
    """

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 security: shared.Security = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param security: The security details required for authentication
        :type security: shared.Security
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = utils.configure_security_client(self._client, security)
        

        
    
    
    def delete_business_groups_id_spaces_space_id_(self, request: operations.DeleteBusinessGroupsIDSpacesSpaceIDRequest, security: operations.DeleteBusinessGroupsIDSpacesSpaceIDSecurity) -> operations.DeleteBusinessGroupsIDSpacesSpaceIDResponse:
        r"""Remove a customer space from partner"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteBusinessGroupsIDSpacesSpaceIDRequest, base_url, '/business-groups/{id}/spaces/{spaceId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteBusinessGroupsIDSpacesSpaceIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_(self, request: operations.DeleteSpacesIDRequest) -> operations.DeleteSpacesIDResponse:
        r"""Delete a Space (only space not delivered to customer)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDRequest, base_url, '/spaces/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_company_entities_person_id_details_designation_(self, request: operations.DeleteSpacesIDCompanyEntitiesPersonIDDetailsDesignationRequest) -> operations.DeleteSpacesIDCompanyEntitiesPersonIDDetailsDesignationResponse:
        r"""delete a contact detail for a company entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDCompanyEntitiesPersonIDDetailsDesignationRequest, base_url, '/spaces/{id}/company-entities/{personId}/details/{designation}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDCompanyEntitiesPersonIDDetailsDesignationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_groups_group_id_folders_folder_id_(self, request: operations.DeleteSpacesIDGroupsGroupIDFoldersFolderIDRequest) -> operations.DeleteSpacesIDGroupsGroupIDFoldersFolderIDResponse:
        r"""delete access to a folder for a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDGroupsGroupIDFoldersFolderIDRequest, base_url, '/spaces/{id}/groups/{groupId}/folders/{folderId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDGroupsGroupIDFoldersFolderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_groups_group_id_persons_member_id_(self, request: operations.DeleteSpacesIDGroupsGroupIDPersonsMemberIDRequest) -> operations.DeleteSpacesIDGroupsGroupIDPersonsMemberIDResponse:
        r"""Delete a person of a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDGroupsGroupIDPersonsMemberIDRequest, base_url, '/spaces/{id}/groups/{groupId}/persons/{memberId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDGroupsGroupIDPersonsMemberIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_persons_person_id_(self, request: operations.DeleteSpacesIDPersonsPersonIDRequest) -> operations.DeleteSpacesIDPersonsPersonIDResponse:
        r"""delete a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDPersonsPersonIDRequest, base_url, '/spaces/{id}/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDPersonsPersonIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_persons_person_id_details_designation_(self, request: operations.DeleteSpacesIDPersonsPersonIDDetailsDesignationRequest) -> operations.DeleteSpacesIDPersonsPersonIDDetailsDesignationResponse:
        r"""delete a contact detail for a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDPersonsPersonIDDetailsDesignationRequest, base_url, '/spaces/{id}/persons/{personId}/details/{designation}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDPersonsPersonIDDetailsDesignationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_status_code_(self, request: operations.DeleteSpacesIDStatusCodeRequest) -> operations.DeleteSpacesIDStatusCodeResponse:
        r"""delete a status of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDStatusCodeRequest, base_url, '/spaces/{id}/status/{code}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDStatusCodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_id_triggers_name_(self, request: operations.DeleteSpacesIDTriggersNameRequest, security: operations.DeleteSpacesIDTriggersNameSecurity) -> operations.DeleteSpacesIDTriggersNameResponse:
        r"""Deletes a trigger for the space id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesIDTriggersNameRequest, base_url, '/spaces/{id}/triggers/{name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesIDTriggersNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_common_folders_id_(self, request: operations.DeleteSpacesSpaceIDCommonFoldersIDRequest) -> operations.DeleteSpacesSpaceIDCommonFoldersIDResponse:
        r"""Delete a common folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDCommonFoldersIDRequest, base_url, '/spaces/{spaceId}/common-folders/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDCommonFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_bank_statements_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDResponse:
        r"""delete a bank statement"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_contractual_documents_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDResponse:
        r"""delete a contractual document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_corporate_tax_declarations_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDResponse:
        r"""delete a corporate tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_expense_proofs_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDResponse:
        r"""delete an expense proof"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_expense_reports_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDResponse:
        r"""delete an expense report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_invoices_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDResponse:
        r"""delete an invoice document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_other_taxes_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDResponse:
        r"""delete a tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_payrolls_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDResponse:
        r"""delete a payroll"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_payslips_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDResponse:
        r"""delete a payslip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_social_contracts_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDResponse:
        r"""delete a social contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_social_declarations_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDResponse:
        r"""delete a social declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_folder_id_vat_declarations_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDRequest) -> operations.DeleteSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDResponse:
        r"""delete a VAT declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_accounting_year(self, request: operations.DeleteSpacesSpaceIDFoldersIDAccountingYearRequest) -> operations.DeleteSpacesSpaceIDFoldersIDAccountingYearResponse:
        r"""delete an AccountingYear"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDAccountingYearRequest, base_url, '/spaces/{spaceId}/folders/{id}/accounting-year', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDAccountingYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_bank(self, request: operations.DeleteSpacesSpaceIDFoldersIDBankRequest) -> operations.DeleteSpacesSpaceIDFoldersIDBankResponse:
        r"""Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDBankRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDBankResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_customer(self, request: operations.DeleteSpacesSpaceIDFoldersIDCustomerRequest) -> operations.DeleteSpacesSpaceIDFoldersIDCustomerResponse:
        r"""delete a customer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDCustomerRequest, base_url, '/spaces/{spaceId}/folders/{id}/customer', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_employee(self, request: operations.DeleteSpacesSpaceIDFoldersIDEmployeeRequest) -> operations.DeleteSpacesSpaceIDFoldersIDEmployeeResponse:
        r"""Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDEmployeeRequest, base_url, '/spaces/{spaceId}/folders/{id}/employee', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_insurance(self, request: operations.DeleteSpacesSpaceIDFoldersIDInsuranceRequest) -> operations.DeleteSpacesSpaceIDFoldersIDInsuranceResponse:
        r"""Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDInsuranceRequest, base_url, '/spaces/{spaceId}/folders/{id}/insurance', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDInsuranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_loan(self, request: operations.DeleteSpacesSpaceIDFoldersIDLoanRequest) -> operations.DeleteSpacesSpaceIDFoldersIDLoanResponse:
        r"""Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDLoanRequest, base_url, '/spaces/{spaceId}/folders/{id}/loan', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDLoanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_passwords_password_id_(self, request: operations.DeleteSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest) -> operations.DeleteSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse:
        r"""delete a password"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_payrolls_payroll_id_nominative_social_declaration(self, request: operations.DeleteSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationRequest, security: operations.DeleteSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationSecurity) -> operations.DeleteSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationResponse:
        r"""delete a nominative social declaration in a folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_portfolio_portfolio_id_(self, request: operations.DeleteSpacesSpaceIDFoldersIDPortfolioPortfolioIDRequest) -> operations.DeleteSpacesSpaceIDFoldersIDPortfolioPortfolioIDResponse:
        r"""delete a secondary portfolio of a customer contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDPortfolioPortfolioIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/portfolio/{portfolioId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDPortfolioPortfolioIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_professional_vehicle(self, request: operations.DeleteSpacesSpaceIDFoldersIDProfessionalVehicleRequest) -> operations.DeleteSpacesSpaceIDFoldersIDProfessionalVehicleResponse:
        r"""delete a Professional Vehicle"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDProfessionalVehicleRequest, base_url, '/spaces/{spaceId}/folders/{id}/professional-vehicle', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDProfessionalVehicleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_provider(self, request: operations.DeleteSpacesSpaceIDFoldersIDProviderRequest) -> operations.DeleteSpacesSpaceIDFoldersIDProviderResponse:
        r"""delete a provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDProviderRequest, base_url, '/spaces/{spaceId}/folders/{id}/provider', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDProviderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_required_documents_requireddocumentid_documents_document_id_(self, request: operations.DeleteSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidDocumentsDocumentIDRequest, security: operations.DeleteSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidDocumentsDocumentIDSecurity) -> operations.DeleteSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidDocumentsDocumentIDResponse:
        r"""delete a document from a required document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidDocumentsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}/documents/{documentId}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidDocumentsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_social_regimes(self, request: operations.DeleteSpacesSpaceIDFoldersIDSocialRegimesRequest) -> operations.DeleteSpacesSpaceIDFoldersIDSocialRegimesResponse:
        r"""delete a social regime"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-regimes', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_tax_contract(self, request: operations.DeleteSpacesSpaceIDFoldersIDTaxContractRequest) -> operations.DeleteSpacesSpaceIDFoldersIDTaxContractResponse:
        r"""Delete a Folder (except Name, Class, ModificationDate and ArchivalDate) and tax contract data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDTaxContractRequest, base_url, '/spaces/{spaceId}/folders/{id}/tax-contract', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDTaxContractResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_folders_id_document_class_(self, request: operations.DeleteSpacesSpaceIDFoldersIDDocumentClassRequest) -> operations.DeleteSpacesSpaceIDFoldersIDDocumentClassResponse:
        r"""delete a class document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDFoldersIDDocumentClassRequest, base_url, '/spaces/{spaceId}/folders/{id}/{documentClass}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDFoldersIDDocumentClassResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_persons_id_guest_in_space(self, request: operations.DeleteSpacesSpaceIDPersonsIDGuestInSpaceRequest, security: operations.DeleteSpacesSpaceIDPersonsIDGuestInSpaceSecurity) -> operations.DeleteSpacesSpaceIDPersonsIDGuestInSpaceResponse:
        r"""delete the invitation of a person in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDPersonsIDGuestInSpaceRequest, base_url, '/spaces/{spaceId}/persons/{id}/guest-in-space', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDPersonsIDGuestInSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_spaces_space_id_persons_id_invitation(self, request: operations.DeleteSpacesSpaceIDPersonsIDInvitationRequest, security: operations.DeleteSpacesSpaceIDPersonsIDInvitationSecurity) -> operations.DeleteSpacesSpaceIDPersonsIDInvitationResponse:
        r"""delete the invitation of a person in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteSpacesSpaceIDPersonsIDInvitationRequest, base_url, '/spaces/{spaceId}/persons/{id}/invitation', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteSpacesSpaceIDPersonsIDInvitationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_box_menus(self) -> operations.GetBoxMenusResponse:
        r"""Returns predefined folders and workbooks of the Box for all the spaces"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/box/menus'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBoxMenusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetBoxMenus200ApplicationJSON])
                res.get_box_menus_200_application_json_object = out

        return res

    def get_business_groups(self, request: operations.GetBusinessGroupsRequest, security: operations.GetBusinessGroupsSecurity) -> operations.GetBusinessGroupsResponse:
        r"""Returns a list of groups custom ordered by name"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/business-groups'
        
        query_params = utils.get_query_params(operations.GetBusinessGroupsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBusinessGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BusinessGroup]])
                res.get_business_groups_200_application_json_all_ofs = out

        return res

    def get_business_groups_all(self, request: operations.GetBusinessGroupsAllRequest, security: operations.GetBusinessGroupsAllSecurity) -> operations.GetBusinessGroupsAllResponse:
        r"""Returns list of groups custom for managers"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/business-groups/all'
        
        query_params = utils.get_query_params(operations.GetBusinessGroupsAllRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBusinessGroupsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BusinessGroup]])
                res.get_business_groups_all_200_application_json_all_ofs = out

        return res

    def get_business_groups_id_(self, request: operations.GetBusinessGroupsIDRequest, security: operations.GetBusinessGroupsIDSecurity) -> operations.GetBusinessGroupsIDResponse:
        r"""Returns a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBusinessGroupsIDRequest, base_url, '/business-groups/{id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBusinessGroupsIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetBusinessGroupsID200ApplicationJSON])
                res.get_business_groups_id_200_application_json_object = out

        return res

    def get_business_groups_id_spaces(self, request: operations.GetBusinessGroupsIDSpacesRequest, security: operations.GetBusinessGroupsIDSpacesSecurity) -> operations.GetBusinessGroupsIDSpacesResponse:
        r"""Returns spaces of the business group with id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetBusinessGroupsIDSpacesRequest, base_url, '/business-groups/{id}/spaces', request)
        
        query_params = utils.get_query_params(operations.GetBusinessGroupsIDSpacesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetBusinessGroupsIDSpacesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetBusinessGroupsIDSpaces200ApplicationJSON]])
                res.get_business_groups_id_spaces_200_application_json_objects = out

        return res

    def get_hub_business_groups_id_menus(self, request: operations.GetHubBusinessGroupsIDMenusRequest, security: operations.GetHubBusinessGroupsIDMenusSecurity) -> operations.GetHubBusinessGroupsIDMenusResponse:
        r"""Returns predefined folders and workbooks of the Hub for all the spaces of the business group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHubBusinessGroupsIDMenusRequest, base_url, '/hub/business-groups/{Id}/menus', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHubBusinessGroupsIDMenusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHubBusinessGroupsIDMenus200ApplicationJSON])
                res.get_hub_business_groups_id_menus_200_application_json_object = out

        return res

    def get_hub_menus(self) -> operations.GetHubMenusResponse:
        r"""Returns predefined folders and workbooks of the Hub for all the spaces"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/menus'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHubMenusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHubMenus200ApplicationJSON])
                res.get_hub_menus_200_application_json_object = out

        return res

    def get_hub_menus_all(self) -> operations.GetHubMenusAllResponse:
        r"""Returns predefined folders and workbooks of the Hub for all the spaces and customer spaces"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/menus/all'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHubMenusAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHubMenusAll200ApplicationJSON])
                res.get_hub_menus_all_200_application_json_object = out

        return res

    def get_hub_spaces_space_id_menus(self, request: operations.GetHubSpacesSpaceIDMenusRequest) -> operations.GetHubSpacesSpaceIDMenusResponse:
        r"""Returns predefined folders and workbooks of the Hub for the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetHubSpacesSpaceIDMenusRequest, base_url, '/hub/spaces/{spaceId}/menus', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetHubSpacesSpaceIDMenusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetHubSpacesSpaceIDMenus200ApplicationJSON])
                res.get_hub_spaces_space_id_menus_200_application_json_object = out

        return res

    def get_menus(self) -> operations.GetMenusResponse:
        r"""Returns predefined entries"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/menus'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMenusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetMenus200ApplicationJSON])
                res.get_menus_200_application_json_object = out

        return res

    def get_profile(self, request: operations.GetProfileRequest, security: operations.GetProfileSecurity) -> operations.GetProfileResponse:
        r"""Returns status of member"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile'
        
        query_params = utils.get_query_params(operations.GetProfileRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProfileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProfile200ApplicationJSON])
                res.get_profile_200_application_json_object = out

        return res

    def get_profile_id_file(self, request: operations.GetProfileIDFileRequest) -> operations.GetProfileIDFileResponse:
        r"""Returns status of member"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile/id-file'
        
        query_params = utils.get_query_params(operations.GetProfileIDFileRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetProfileIDFileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetProfileIDFile200ApplicationJSON])
                res.get_profile_id_file_200_application_json_object = out
            if utils.match_content_type(content_type, 'multipart/form-data'):
                res.body = http_res.content

        return res

    def get_registration(self, request: operations.GetRegistrationRequest, security: operations.GetRegistrationSecurity) -> operations.GetRegistrationResponse:
        r"""Returns the method to get the validation code or the link to register after invitation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/registration'
        
        query_params = utils.get_query_params(operations.GetRegistrationRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetRegistrationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[Any])
                res.get_registration_200_application_json_one_of = out

        return res

    def get_session(self) -> operations.GetSessionResponse:
        r"""Returns member id of user logged"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/session'
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSessionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Session])
                res.session = out

        return res

    def get_spaces(self, request: operations.GetSpacesRequest) -> operations.GetSpacesResponse:
        r"""Returns spaces of my group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spaces'
        
        query_params = utils.get_query_params(operations.GetSpacesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpaces200ApplicationJSON]])
                res.get_spaces_200_application_json_objects = out

        return res

    def get_spaces_all(self, request: operations.GetSpacesAllRequest) -> operations.GetSpacesAllResponse:
        r"""Returns all spaces"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spaces/all'
        
        query_params = utils.get_query_params(operations.GetSpacesAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesAll200ApplicationJSON]])
                res.get_spaces_all_200_application_json_objects = out

        return res

    def get_spaces_id_(self, request: operations.GetSpacesIDRequest) -> operations.GetSpacesIDResponse:
        r"""Returns a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDRequest, base_url, '/spaces/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesID200ApplicationJSON])
                res.get_spaces_id_200_application_json_object = out

        return res

    def get_spaces_id_accounting_year(self, request: operations.GetSpacesIDAccountingYearRequest) -> operations.GetSpacesIDAccountingYearResponse:
        r"""Returns list of accounting years for the space {id}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDAccountingYearRequest, base_url, '/spaces/{id}/accounting-year', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDAccountingYearRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDAccountingYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDAccountingYear200ApplicationJSON]])
                res.get_spaces_id_accounting_year_200_application_json_anies = out

        return res

    def get_spaces_id_collective_decision(self, request: operations.GetSpacesIDCollectiveDecisionRequest) -> operations.GetSpacesIDCollectiveDecisionResponse:
        r"""Returns list of collective decisions for the space {id}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDCollectiveDecisionRequest, base_url, '/spaces/{id}/collective-decision', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDCollectiveDecisionRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDCollectiveDecisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDCollectiveDecision200ApplicationJSON]])
                res.get_spaces_id_collective_decision_200_application_json_anies = out

        return res

    def get_spaces_id_company_entities(self, request: operations.GetSpacesIDCompanyEntitiesRequest) -> operations.GetSpacesIDCompanyEntitiesResponse:
        r"""Returns list of company entities"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDCompanyEntitiesRequest, base_url, '/spaces/{id}/company-entities', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDCompanyEntitiesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDCompanyEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CompanyEntity]])
                res.get_spaces_id_company_entities_200_application_json_all_ofs = out

        return res

    def get_spaces_id_company_entities_all(self, request: operations.GetSpacesIDCompanyEntitiesAllRequest) -> operations.GetSpacesIDCompanyEntitiesAllResponse:
        r"""Returns list of company entities even company entities archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDCompanyEntitiesAllRequest, base_url, '/spaces/{id}/company-entities/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDCompanyEntitiesAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDCompanyEntitiesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CompanyEntity]])
                res.get_spaces_id_company_entities_all_200_application_json_all_ofs = out

        return res

    def get_spaces_id_company_entities_company_id_(self, request: operations.GetSpacesIDCompanyEntitiesCompanyIDRequest) -> operations.GetSpacesIDCompanyEntitiesCompanyIDResponse:
        r"""Returns a compay entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDCompanyEntitiesCompanyIDRequest, base_url, '/spaces/{id}/company-entities/{companyId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDCompanyEntitiesCompanyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.CompanyEntity])
                res.company_entity = out

        return res

    def get_spaces_id_company_entities_person_id_details(self, request: operations.GetSpacesIDCompanyEntitiesPersonIDDetailsRequest) -> operations.GetSpacesIDCompanyEntitiesPersonIDDetailsResponse:
        r"""Returns all details of a company entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDCompanyEntitiesPersonIDDetailsRequest, base_url, '/spaces/{id}/company-entities/{personId}/details', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDCompanyEntitiesPersonIDDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDCompanyEntitiesPersonIDDetails200ApplicationJSON]])
                res.get_spaces_id_company_entities_person_id_details_200_application_json_all_ofs = out

        return res

    def get_spaces_id_folders_folder_id_persons_member_id_(self, request: operations.GetSpacesIDFoldersFolderIDPersonsMemberIDRequest) -> operations.GetSpacesIDFoldersFolderIDPersonsMemberIDResponse:
        r"""return the access of a person in a customer contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDFoldersFolderIDPersonsMemberIDRequest, base_url, '/spaces/{id}/folders/{folderId}/persons/{memberId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDFoldersFolderIDPersonsMemberIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDFoldersFolderIDPersonsMemberID200ApplicationJSON]])
                res.get_spaces_id_folders_folder_id_persons_member_id_200_application_json_objects = out

        return res

    def get_spaces_id_groups(self, request: operations.GetSpacesIDGroupsRequest) -> operations.GetSpacesIDGroupsResponse:
        r"""Returns list of groups"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDGroupsRequest, base_url, '/spaces/{id}/groups', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDGroupsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.get_spaces_id_groups_200_application_json_all_ofs = out

        return res

    def get_spaces_id_groups_all(self, request: operations.GetSpacesIDGroupsAllRequest) -> operations.GetSpacesIDGroupsAllResponse:
        r"""Returns list of groups even archived of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDGroupsAllRequest, base_url, '/spaces/{id}/groups/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDGroupsAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDGroupsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.get_spaces_id_groups_all_200_application_json_all_ofs = out

        return res

    def get_spaces_id_groups_group_id_(self, request: operations.GetSpacesIDGroupsGroupIDRequest) -> operations.GetSpacesIDGroupsGroupIDResponse:
        r"""Returns a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDGroupsGroupIDRequest, base_url, '/spaces/{id}/groups/{groupId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDGroupsGroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesIDGroupsGroupID200ApplicationJSON])
                res.get_spaces_id_groups_group_id_200_application_json_object = out

        return res

    def get_spaces_id_legal(self, request: operations.GetSpacesIDLegalRequest) -> operations.GetSpacesIDLegalResponse:
        r"""Returns legal information of a space (except private)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDLegalRequest, base_url, '/spaces/{id}/legal', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDLegalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Legal])
                res.legal = out

        return res

    def get_spaces_id_logo(self, request: operations.GetSpacesIDLogoRequest) -> operations.GetSpacesIDLogoResponse:
        r"""Returns a space with the logo"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDLogoRequest, base_url, '/spaces/{id}/logo', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDLogoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Space])
                res.space = out
            if utils.match_content_type(content_type, 'multipart/form-data'):
                res.body = http_res.content

        return res

    def get_spaces_id_persons(self, request: operations.GetSpacesIDPersonsRequest) -> operations.GetSpacesIDPersonsResponse:
        r"""Returns list of persons"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsRequest, base_url, '/spaces/{id}/persons', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDPersonsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Person]])
                res.get_spaces_id_persons_200_application_json_all_ofs = out

        return res

    def get_spaces_id_persons_all(self, request: operations.GetSpacesIDPersonsAllRequest) -> operations.GetSpacesIDPersonsAllResponse:
        r"""Returns list of persons even persons archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsAllRequest, base_url, '/spaces/{id}/persons/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDPersonsAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Person]])
                res.get_spaces_id_persons_all_200_application_json_all_ofs = out

        return res

    def get_spaces_id_persons_person_id_(self, request: operations.GetSpacesIDPersonsPersonIDRequest) -> operations.GetSpacesIDPersonsPersonIDResponse:
        r"""Returns a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsPersonIDRequest, base_url, '/spaces/{id}/persons/{personId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsPersonIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesIDPersonsPersonID200ApplicationJSON])
                res.get_spaces_id_persons_person_id_200_application_json_object = out

        return res

    def get_spaces_id_persons_person_id_details(self, request: operations.GetSpacesIDPersonsPersonIDDetailsRequest) -> operations.GetSpacesIDPersonsPersonIDDetailsResponse:
        r"""Returns all details of a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsPersonIDDetailsRequest, base_url, '/spaces/{id}/persons/{personId}/details', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsPersonIDDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDPersonsPersonIDDetails200ApplicationJSON]])
                res.get_spaces_id_persons_person_id_details_200_application_json_all_ofs = out

        return res

    def get_spaces_id_persons_person_id_folders(self, request: operations.GetSpacesIDPersonsPersonIDFoldersRequest) -> operations.GetSpacesIDPersonsPersonIDFoldersResponse:
        r"""Returns list of folders with exceptionnal access of the person personId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsPersonIDFoldersRequest, base_url, '/spaces/{id}/persons/{personId}/folders', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDPersonsPersonIDFoldersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsPersonIDFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_id_persons_person_id_folders_200_application_json_all_ofs = out

        return res

    def get_spaces_id_persons_person_id_groups(self, request: operations.GetSpacesIDPersonsPersonIDGroupsRequest) -> operations.GetSpacesIDPersonsPersonIDGroupsResponse:
        r"""Returns list of groups of the person personId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsPersonIDGroupsRequest, base_url, '/spaces/{id}/persons/{personId}/groups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsPersonIDGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Group]])
                res.get_spaces_id_persons_person_id_groups_200_application_json_all_ofs = out

        return res

    def get_spaces_id_persons_person_id_portfolios(self, request: operations.GetSpacesIDPersonsPersonIDPortfoliosRequest) -> operations.GetSpacesIDPersonsPersonIDPortfoliosResponse:
        r"""Returns list of portfolios of the person personId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDPersonsPersonIDPortfoliosRequest, base_url, '/spaces/{id}/persons/{personId}/portfolios', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDPersonsPersonIDPortfoliosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDPersonsPersonIDPortfolios200ApplicationJSON]])
                res.get_spaces_id_persons_person_id_portfolios_200_application_json_anies = out

        return res

    def get_spaces_id_professional_vehicles(self, request: operations.GetSpacesIDProfessionalVehiclesRequest) -> operations.GetSpacesIDProfessionalVehiclesResponse:
        r"""Returns list of professionalvehicles for the space {id}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDProfessionalVehiclesRequest, base_url, '/spaces/{id}/professional-vehicles', request)
        
        query_params = utils.get_query_params(operations.GetSpacesIDProfessionalVehiclesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDProfessionalVehiclesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDProfessionalVehicles200ApplicationJSON]])
                res.get_spaces_id_professional_vehicles_200_application_json_anies = out

        return res

    def get_spaces_id_settings_nf203_logs(self, request: operations.GetSpacesIDSettingsNf203LogsRequest, security: operations.GetSpacesIDSettingsNf203LogsSecurity) -> operations.GetSpacesIDSettingsNf203LogsResponse:
        r"""Returns state of activation of logs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDSettingsNf203LogsRequest, base_url, '/spaces/{id}/settings/nf203/logs', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDSettingsNf203LogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesIDSettingsNf203Logs200ApplicationJSON])
                res.get_spaces_id_settings_nf203_logs_200_application_json_object = out

        return res

    def get_spaces_id_status(self, request: operations.GetSpacesIDStatusRequest) -> operations.GetSpacesIDStatusResponse:
        r"""Returns all status of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDStatusRequest, base_url, '/spaces/{id}/status', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDStatus200ApplicationJSON]])
                res.get_spaces_id_status_200_application_json_all_ofs = out

        return res

    def get_spaces_id_tax_contracts(self, request: operations.GetSpacesIDTaxContractsRequest) -> operations.GetSpacesIDTaxContractsResponse:
        r"""Returns list of tax contracts for the space {id}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDTaxContractsRequest, base_url, '/spaces/{id}/tax-contracts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDTaxContractsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesIDTaxContracts200ApplicationJSON]])
                res.get_spaces_id_tax_contracts_200_application_json_anies = out

        return res

    def get_spaces_id_triggers(self, request: operations.GetSpacesIDTriggersRequest, security: operations.GetSpacesIDTriggersSecurity) -> operations.GetSpacesIDTriggersResponse:
        r"""Returns list of triggers for the space {id}"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesIDTriggersRequest, base_url, '/spaces/{id}/triggers', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesIDTriggersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Trigger]])
                res.get_spaces_id_triggers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_company_entities_id_follow_ups(self, request: operations.GetSpacesSpaceIDCompanyEntitiesIDFollowUpsRequest) -> operations.GetSpacesSpaceIDCompanyEntitiesIDFollowUpsResponse:
        r"""Returns folder of the company entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDCompanyEntitiesIDFollowUpsRequest, base_url, '/spaces/{spaceId}/company-entities/{id}/follow-ups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDCompanyEntitiesIDFollowUpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_space_id_company_entities_id_follow_ups_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_customers(self, request: operations.GetSpacesSpaceIDCustomersRequest) -> operations.GetSpacesSpaceIDCustomersResponse:
        r"""Returns folder with Id and customer data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDCustomersRequest, base_url, '/spaces/{spaceId}/customers', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDCustomersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDCustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.get_spaces_space_id_customers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_customers_all(self, request: operations.GetSpacesSpaceIDCustomersAllRequest) -> operations.GetSpacesSpaceIDCustomersAllResponse:
        r"""Returns folder with Id and customer data (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDCustomersAllRequest, base_url, '/spaces/{spaceId}/customers/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDCustomersAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDCustomersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.get_spaces_space_id_customers_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_documents(self, request: operations.GetSpacesSpaceIDDocumentsRequest) -> operations.GetSpacesSpaceIDDocumentsResponse:
        r"""Returns documents of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsRequest, base_url, '/spaces/{spaceId}/documents', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDDocuments200ApplicationJSON]])
                res.get_spaces_space_id_documents_200_application_json_objects = out

        return res

    def get_spaces_space_id_documents_document_id_extend(self, request: operations.GetSpacesSpaceIDDocumentsDocumentIDExtendRequest) -> operations.GetSpacesSpaceIDDocumentsDocumentIDExtendResponse:
        r"""read the data of a document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsDocumentIDExtendRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/extend', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsDocumentIDExtendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDDocumentsDocumentIDExtend200ApplicationJSON]])
                res.get_spaces_space_id_documents_document_id_extend_200_application_json_anies = out

        return res

    def get_spaces_space_id_documents_document_id_folders(self, request: operations.GetSpacesSpaceIDDocumentsDocumentIDFoldersRequest) -> operations.GetSpacesSpaceIDDocumentsDocumentIDFoldersResponse:
        r"""Returns versions of the document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsDocumentIDFoldersRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/folders', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsDocumentIDFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsDocumentIDFolders200ApplicationJSON])
                res.get_spaces_space_id_documents_document_id_folders_200_application_json_object = out

        return res

    def get_spaces_space_id_documents_document_id_mailingprice(self, request: operations.GetSpacesSpaceIDDocumentsDocumentIDMailingpriceRequest, security: operations.GetSpacesSpaceIDDocumentsDocumentIDMailingpriceSecurity) -> operations.GetSpacesSpaceIDDocumentsDocumentIDMailingpriceResponse:
        r"""returns the number of pages and the price of the pdf to send by mail"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsDocumentIDMailingpriceRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/mailingprice', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsDocumentIDMailingpriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsDocumentIDMailingprice200ApplicationJSON])
                res.get_spaces_space_id_documents_document_id_mailingprice_200_application_json_object = out

        return res

    def get_spaces_space_id_documents_document_id_versions(self, request: operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsRequest) -> operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsResponse:
        r"""Returns versions of the document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/versions', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Document]])
                res.get_spaces_space_id_documents_document_id_versions_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_documents_document_id_versions_current(self, request: operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsCurrentRequest) -> operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsCurrentResponse:
        r"""Returns current version of the document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsCurrentRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/versions/current', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsCurrentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsDocumentIDVersionsCurrent200ApplicationJSON])
                res.get_spaces_space_id_documents_document_id_versions_current_200_application_json_object = out

        return res

    def get_spaces_space_id_documents_id_access(self, request: operations.GetSpacesSpaceIDDocumentsIDAccessRequest) -> operations.GetSpacesSpaceIDDocumentsIDAccessResponse:
        r"""Returns accesses of one document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsIDAccessRequest, base_url, '/spaces/{spaceId}/documents/{id}/access', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsIDAccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsIDAccess200ApplicationJSON])
                res.get_spaces_space_id_documents_id_access_200_application_json_object = out

        return res

    def get_spaces_space_id_documents_id_accounting(self, request: operations.GetSpacesSpaceIDDocumentsIDAccountingRequest) -> operations.GetSpacesSpaceIDDocumentsIDAccountingResponse:
        r"""Returns the document with the accounting property"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsIDAccountingRequest, base_url, '/spaces/{spaceId}/documents/{id}/accounting', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsIDAccountingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsIDAccounting200ApplicationJSON])
                res.get_spaces_space_id_documents_id_accounting_200_application_json_object = out

        return res

    def get_spaces_space_id_documents_id_download(self, request: operations.GetSpacesSpaceIDDocumentsIDDownloadRequest) -> operations.GetSpacesSpaceIDDocumentsIDDownloadResponse:
        r"""Returns content of one document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDDocumentsIDDownloadRequest, base_url, '/spaces/{spaceId}/documents/{id}/download', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDDocumentsIDDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'multipart/form-data'):
                res.body = http_res.content
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDDocumentsIDDownload200ApplicationJSON])
                res.get_spaces_space_id_documents_id_download_200_application_json_object = out

        return res

    def get_spaces_space_id_employees(self, request: operations.GetSpacesSpaceIDEmployeesRequest) -> operations.GetSpacesSpaceIDEmployeesResponse:
        r"""Returns folders with Id and employee data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDEmployeesRequest, base_url, '/spaces/{spaceId}/employees', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDEmployeesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_employees_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_employees_all(self, request: operations.GetSpacesSpaceIDEmployeesAllRequest) -> operations.GetSpacesSpaceIDEmployeesAllResponse:
        r"""Returns folders with Id and employee data (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDEmployeesAllRequest, base_url, '/spaces/{spaceId}/employees/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDEmployeesAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDEmployeesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_employees_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_employers(self, request: operations.GetSpacesSpaceIDEmployersRequest) -> operations.GetSpacesSpaceIDEmployersResponse:
        r"""Returns folders with Id and employer data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDEmployersRequest, base_url, '/spaces/{spaceId}/employers', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDEmployersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDEmployersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_employers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_employers_all(self, request: operations.GetSpacesSpaceIDEmployersAllRequest) -> operations.GetSpacesSpaceIDEmployersAllResponse:
        r"""Returns folders with Id and employer data (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDEmployersAllRequest, base_url, '/spaces/{spaceId}/employers/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDEmployersAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDEmployersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_employers_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_extend(self, request: operations.GetSpacesSpaceIDExtendRequest) -> operations.GetSpacesSpaceIDExtendResponse:
        r"""read the data of a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDExtendRequest, base_url, '/spaces/{spaceId}/extend', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDExtendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDExtend200ApplicationJSON])
                res.get_spaces_space_id_extend_200_application_json_object = out

        return res

    def get_spaces_space_id_folders(self, request: operations.GetSpacesSpaceIDFoldersRequest) -> operations.GetSpacesSpaceIDFoldersResponse:
        r"""Returns folders of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersRequest, base_url, '/spaces/{spaceId}/folders', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_space_id_folders_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_all(self, request: operations.GetSpacesSpaceIDFoldersAllRequest) -> operations.GetSpacesSpaceIDFoldersAllResponse:
        r"""Returns folders of the space (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersAllRequest, base_url, '/spaces/{spaceId}/folders/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_space_id_folders_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_folder_id_nominative_social_declarations_document_id_(self, request: operations.GetSpacesSpaceIDFoldersFolderIDNominativeSocialDeclarationsDocumentIDRequest) -> operations.GetSpacesSpaceIDFoldersFolderIDNominativeSocialDeclarationsDocumentIDResponse:
        r"""get a nominative social declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersFolderIDNominativeSocialDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/nominative-social-declarations/{documentId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersFolderIDNominativeSocialDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersFolderIDNominativeSocialDeclarationsDocumentID200ApplicationJSON])
                res.get_spaces_space_id_folders_folder_id_nominative_social_declarations_document_id_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_(self, request: operations.GetSpacesSpaceIDFoldersIDRequest) -> operations.GetSpacesSpaceIDFoldersIDResponse:
        r"""Returns folder with Id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDRequest, base_url, '/spaces/{spaceId}/folders/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersID200ApplicationJSON])
                res.get_spaces_space_id_folders_id_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_accountings(self, request: operations.GetSpacesSpaceIDFoldersIDAccountingsRequest) -> operations.GetSpacesSpaceIDFoldersIDAccountingsResponse:
        r"""Returns accountings documents of the folder (results and taxation or accountingyear)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDAccountingsRequest, base_url, '/spaces/{spaceId}/folders/{id}/accountings', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDAccountingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDAccountingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Accounting]])
                res.get_spaces_space_id_folders_id_accountings_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_accountings_journal(self, request: operations.GetSpacesSpaceIDFoldersIDAccountingsJournalRequest) -> operations.GetSpacesSpaceIDFoldersIDAccountingsJournalResponse:
        r"""journal of accountings document delivered to a customer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDAccountingsJournalRequest, base_url, '/spaces/{spaceId}/folders/{id}/accountings-journal', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDAccountingsJournalRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDAccountingsJournalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDAccountingsJournal200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_accountings_journal_200_application_json_objects = out

        return res

    def get_spaces_space_id_folders_id_bank(self, request: operations.GetSpacesSpaceIDFoldersIDBankRequest) -> operations.GetSpacesSpaceIDFoldersIDBankResponse:
        r"""Returns folder with Id and bank data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDBankRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDBankResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Bank])
                res.bank = out

        return res

    def get_spaces_space_id_folders_id_bank_statements(self, request: operations.GetSpacesSpaceIDFoldersIDBankStatementsRequest) -> operations.GetSpacesSpaceIDFoldersIDBankStatementsResponse:
        r"""Returns bank statements of the folder bank"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDBankStatementsRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank-statements', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDBankStatementsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDBankStatementsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.BankStatement]])
                res.get_spaces_space_id_folders_id_bank_statements_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_common_folders(self, request: operations.GetSpacesSpaceIDFoldersIDCommonFoldersRequest) -> operations.GetSpacesSpaceIDFoldersIDCommonFoldersResponse:
        r"""Returns common folders of a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDCommonFoldersRequest, base_url, '/spaces/{spaceId}/folders/{id}/common-folders', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDCommonFoldersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDCommonFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_space_id_folders_id_common_folders_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_common_folders_all(self, request: operations.GetSpacesSpaceIDFoldersIDCommonFoldersAllRequest) -> operations.GetSpacesSpaceIDFoldersIDCommonFoldersAllResponse:
        r"""Returns common folders (even archived) of a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDCommonFoldersAllRequest, base_url, '/spaces/{spaceId}/folders/{id}/common-folders/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDCommonFoldersAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDCommonFoldersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Folder]])
                res.get_spaces_space_id_folders_id_common_folders_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_contracting_partner(self, request: operations.GetSpacesSpaceIDFoldersIDContractingPartnerRequest) -> operations.GetSpacesSpaceIDFoldersIDContractingPartnerResponse:
        r"""Returns all contracting partners of a contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDContractingPartnerRequest, base_url, '/spaces/{spaceId}/folders/{id}/contracting-partner', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDContractingPartnerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDContractingPartner200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_contracting_partner_200_application_json_objects = out

        return res

    def get_spaces_space_id_folders_id_contracting_partner_space(self, request: operations.GetSpacesSpaceIDFoldersIDContractingPartnerSpaceRequest) -> operations.GetSpacesSpaceIDFoldersIDContractingPartnerSpaceResponse:
        r"""Returns collector space of a contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDContractingPartnerSpaceRequest, base_url, '/spaces/{spaceId}/folders/{id}/contracting-partner/space', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDContractingPartnerSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDContractingPartnerSpace200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_contracting_partner_space_200_application_json_objects = out

        return res

    def get_spaces_space_id_folders_id_contractual_documents(self, request: operations.GetSpacesSpaceIDFoldersIDContractualDocumentsRequest) -> operations.GetSpacesSpaceIDFoldersIDContractualDocumentsResponse:
        r"""Returns documents of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDContractualDocumentsRequest, base_url, '/spaces/{spaceId}/folders/{id}/contractual-documents', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDContractualDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDContractualDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ContractualDocument]])
                res.get_spaces_space_id_folders_id_contractual_documents_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_contractual_relationship(self, request: operations.GetSpacesSpaceIDFoldersIDContractualRelationshipRequest) -> operations.GetSpacesSpaceIDFoldersIDContractualRelationshipResponse:
        r"""Returns folder with Id and contractual-relationship data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDContractualRelationshipRequest, base_url, '/spaces/{spaceId}/folders/{id}/contractual-relationship', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDContractualRelationshipResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ContractualRelationship])
                res.contractual_relationship = out

        return res

    def get_spaces_space_id_folders_id_coporate_tax_declarations(self, request: operations.GetSpacesSpaceIDFoldersIDCoporateTaxDeclarationsRequest) -> operations.GetSpacesSpaceIDFoldersIDCoporateTaxDeclarationsResponse:
        r"""Returns corporate tax declarations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDCoporateTaxDeclarationsRequest, base_url, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDCoporateTaxDeclarationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDCoporateTaxDeclarationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.CorporateTaxDeclaration]])
                res.get_spaces_space_id_folders_id_coporate_tax_declarations_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_customer(self, request: operations.GetSpacesSpaceIDFoldersIDCustomerRequest) -> operations.GetSpacesSpaceIDFoldersIDCustomerResponse:
        r"""Returns folder with Id and customer data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDCustomerRequest, base_url, '/spaces/{spaceId}/folders/{id}/customer', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersIDCustomer200ApplicationJSON])
                res.get_spaces_space_id_folders_id_customer_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_deliveries_journal(self, request: operations.GetSpacesSpaceIDFoldersIDDeliveriesJournalRequest) -> operations.GetSpacesSpaceIDFoldersIDDeliveriesJournalResponse:
        r"""journal of documents delivered to a customer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDDeliveriesJournalRequest, base_url, '/spaces/{spaceId}/folders/{id}/deliveries-journal', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDDeliveriesJournalRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDDeliveriesJournalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDDeliveriesJournal200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_deliveries_journal_200_application_json_objects = out

        return res

    def get_spaces_space_id_folders_id_documents(self, request: operations.GetSpacesSpaceIDFoldersIDDocumentsRequest) -> operations.GetSpacesSpaceIDFoldersIDDocumentsResponse:
        r"""Returns documents of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDDocumentsRequest, base_url, '/spaces/{spaceId}/folders/{id}/documents', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDDocumentsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Document]])
                res.get_spaces_space_id_folders_id_documents_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_employee(self, request: operations.GetSpacesSpaceIDFoldersIDEmployeeRequest) -> operations.GetSpacesSpaceIDFoldersIDEmployeeResponse:
        r"""Returns folder with Id and employee data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDEmployeeRequest, base_url, '/spaces/{spaceId}/folders/{id}/employee', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Employee])
                res.employee = out

        return res

    def get_spaces_space_id_folders_id_expense_proofs(self, request: operations.GetSpacesSpaceIDFoldersIDExpenseProofsRequest) -> operations.GetSpacesSpaceIDFoldersIDExpenseProofsResponse:
        r"""Returns expense proofs of the folder (social, followup or exchange)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDExpenseProofsRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-proofs', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDExpenseProofsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDExpenseProofsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ExpenseProof]])
                res.get_spaces_space_id_folders_id_expense_proofs_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_expense_reports(self, request: operations.GetSpacesSpaceIDFoldersIDExpenseReportsRequest) -> operations.GetSpacesSpaceIDFoldersIDExpenseReportsResponse:
        r"""Returns expense reports of the folder (social or followup)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDExpenseReportsRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-reports', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDExpenseReportsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDExpenseReportsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ExpenseReport]])
                res.get_spaces_space_id_folders_id_expense_reports_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_expense_reports_expense_report_id_expense_proofs(self, request: operations.GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsRequest) -> operations.GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsResponse:
        r"""Returns expense proofs linked to the expenseReportId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-reports/{expenseReportId}/expense-proofs', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDExpenseReportsExpenseReportIDExpenseProofsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ExpenseProof]])
                res.get_spaces_space_id_folders_id_expense_reports_expense_report_id_expense_proofs_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_insurance(self, request: operations.GetSpacesSpaceIDFoldersIDInsuranceRequest) -> operations.GetSpacesSpaceIDFoldersIDInsuranceResponse:
        r"""Returns folder with Id and insurance data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDInsuranceRequest, base_url, '/spaces/{spaceId}/folders/{id}/insurance', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDInsuranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Insurance])
                res.insurance = out

        return res

    def get_spaces_space_id_folders_id_invoices(self, request: operations.GetSpacesSpaceIDFoldersIDInvoicesRequest) -> operations.GetSpacesSpaceIDFoldersIDInvoicesResponse:
        r"""Returns invoices of the folder (customer, provider, accountingyear or root folders customers or providers)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDInvoicesRequest, base_url, '/spaces/{spaceId}/folders/{id}/invoices', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDInvoicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDInvoicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Invoice]])
                res.get_spaces_space_id_folders_id_invoices_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_legal_entity(self, request: operations.GetSpacesSpaceIDFoldersIDLegalEntityRequest) -> operations.GetSpacesSpaceIDFoldersIDLegalEntityResponse:
        r"""Returns legal entity of a follow up folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDLegalEntityRequest, base_url, '/spaces/{spaceId}/folders/{id}/legal-entity', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDLegalEntityResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersIDLegalEntity200ApplicationJSON])
                res.get_spaces_space_id_folders_id_legal_entity_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_loan(self, request: operations.GetSpacesSpaceIDFoldersIDLoanRequest) -> operations.GetSpacesSpaceIDFoldersIDLoanResponse:
        r"""Returns folder with Id and loan data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDLoanRequest, base_url, '/spaces/{spaceId}/folders/{id}/loan', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDLoanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Loan])
                res.loan = out

        return res

    def get_spaces_space_id_folders_id_messages(self, request: operations.GetSpacesSpaceIDFoldersIDMessagesRequest) -> operations.GetSpacesSpaceIDFoldersIDMessagesResponse:
        r"""Returns messages of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDMessagesRequest, base_url, '/spaces/{spaceId}/folders/{id}/messages', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDMessagesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Message]])
                res.get_spaces_space_id_folders_id_messages_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_messages_message_id_(self, request: operations.GetSpacesSpaceIDFoldersIDMessagesMessageIDRequest) -> operations.GetSpacesSpaceIDFoldersIDMessagesMessageIDResponse:
        r"""Returns message with Id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDMessagesMessageIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/messages/{messageId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDMessagesMessageIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersIDMessagesMessageID200ApplicationJSON])
                res.get_spaces_space_id_folders_id_messages_message_id_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_nominative_social_declarations(self, request: operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarationsRequest) -> operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarationsResponse:
        r"""Returns nominative social declarations of the folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarationsRequest, base_url, '/spaces/{spaceId}/folders/{id}/nominative-social-declarations', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDNominativeSocialDeclarations200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_nominative_social_declarations_200_application_json_anies = out

        return res

    def get_spaces_space_id_folders_id_other_taxes(self, request: operations.GetSpacesSpaceIDFoldersIDOtherTaxesRequest) -> operations.GetSpacesSpaceIDFoldersIDOtherTaxesResponse:
        r"""Returns other taxes declarations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDOtherTaxesRequest, base_url, '/spaces/{spaceId}/folders/{id}/other-taxes', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDOtherTaxesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDOtherTaxesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.OtherTax]])
                res.get_spaces_space_id_folders_id_other_taxes_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_passwords(self, request: operations.GetSpacesSpaceIDFoldersIDPasswordsRequest) -> operations.GetSpacesSpaceIDFoldersIDPasswordsResponse:
        r"""Returns identifiers/passwords of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDPasswordsRequest, base_url, '/spaces/{spaceId}/folders/{id}/passwords', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDPasswordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDPasswords200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_passwords_200_application_json_anies = out

        return res

    def get_spaces_space_id_folders_id_passwords_password_id_(self, request: operations.GetSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest) -> operations.GetSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse:
        r"""Returns password with Id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersIDPasswordsPasswordID200ApplicationJSON])
                res.get_spaces_space_id_folders_id_passwords_password_id_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_payrolls(self, request: operations.GetSpacesSpaceIDFoldersIDPayrollsRequest) -> operations.GetSpacesSpaceIDFoldersIDPayrollsResponse:
        r"""Returns payrolls of the folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDPayrollsRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDPayrollsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDPayrollsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Payroll]])
                res.get_spaces_space_id_folders_id_payrolls_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_payslips(self, request: operations.GetSpacesSpaceIDFoldersIDPayslipsRequest) -> operations.GetSpacesSpaceIDFoldersIDPayslipsResponse:
        r"""Returns payslips of the folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDPayslipsRequest, base_url, '/spaces/{spaceId}/folders/{id}/payslips', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDPayslipsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDPayslipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.PaySlip]])
                res.get_spaces_space_id_folders_id_payslips_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_provider(self, request: operations.GetSpacesSpaceIDFoldersIDProviderRequest) -> operations.GetSpacesSpaceIDFoldersIDProviderResponse:
        r"""Returns folder with Id and provider data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDProviderRequest, base_url, '/spaces/{spaceId}/folders/{id}/provider', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDProviderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Provider])
                res.provider = out

        return res

    def get_spaces_space_id_folders_id_required_documents(self, request: operations.GetSpacesSpaceIDFoldersIDRequiredDocumentsRequest) -> operations.GetSpacesSpaceIDFoldersIDRequiredDocumentsResponse:
        r"""list of the required documents for a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDRequiredDocumentsRequest, base_url, '/spaces/{spaceId}/folders/{id}/required-documents', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDRequiredDocumentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDRequiredDocuments200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_required_documents_200_application_json_objects = out

        return res

    def get_spaces_space_id_folders_id_sections(self, request: operations.GetSpacesSpaceIDFoldersIDSectionsRequest) -> operations.GetSpacesSpaceIDFoldersIDSectionsResponse:
        r"""Returns sections of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDSectionsRequest, base_url, '/spaces/{spaceId}/folders/{id}/sections', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDSectionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[operations.GetSpacesSpaceIDFoldersIDSections200ApplicationJSON]])
                res.get_spaces_space_id_folders_id_sections_200_application_json_anies = out

        return res

    def get_spaces_space_id_folders_id_social_contracts(self, request: operations.GetSpacesSpaceIDFoldersIDSocialContractsRequest) -> operations.GetSpacesSpaceIDFoldersIDSocialContractsResponse:
        r"""Returns social contracts of the folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDSocialContractsRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-contracts', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDSocialContractsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDSocialContractsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialContract]])
                res.get_spaces_space_id_folders_id_social_contracts_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_social_declarations(self, request: operations.GetSpacesSpaceIDFoldersIDSocialDeclarationsRequest) -> operations.GetSpacesSpaceIDFoldersIDSocialDeclarationsResponse:
        r"""Returns social declarations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDSocialDeclarationsRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-declarations', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDSocialDeclarationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDSocialDeclarationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialDeclaration]])
                res.get_spaces_space_id_folders_id_social_declarations_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_social_regimes(self, request: operations.GetSpacesSpaceIDFoldersIDSocialRegimesRequest) -> operations.GetSpacesSpaceIDFoldersIDSocialRegimesResponse:
        r"""Returns folder with Id and social regime data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-regimes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SocialRegime])
                res.social_regime = out

        return res

    def get_spaces_space_id_folders_id_sum_invoices(self, request: operations.GetSpacesSpaceIDFoldersIDSumInvoicesRequest) -> operations.GetSpacesSpaceIDFoldersIDSumInvoicesResponse:
        r"""Returns sum of invoices of the folder (customer, provider, accountingyear or root folders customers or providers)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDSumInvoicesRequest, base_url, '/spaces/{spaceId}/folders/{id}/sum-invoices', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDSumInvoicesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDSumInvoicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDFoldersIDSumInvoices200ApplicationJSON])
                res.get_spaces_space_id_folders_id_sum_invoices_200_application_json_object = out

        return res

    def get_spaces_space_id_folders_id_vat_declarations(self, request: operations.GetSpacesSpaceIDFoldersIDVatDeclarationsRequest) -> operations.GetSpacesSpaceIDFoldersIDVatDeclarationsResponse:
        r"""Returns vat declarations"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDVatDeclarationsRequest, base_url, '/spaces/{spaceId}/folders/{id}/vat-declarations', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDFoldersIDVatDeclarationsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDVatDeclarationsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.VATDeclaration]])
                res.get_spaces_space_id_folders_id_vat_declarations_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_folders_id_document_class_(self, request: operations.GetSpacesSpaceIDFoldersIDDocumentClassRequest) -> operations.GetSpacesSpaceIDFoldersIDDocumentClassResponse:
        r"""Returns document of documentClass (without specific data) of the folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDFoldersIDDocumentClassRequest, base_url, '/spaces/{spaceId}/folders/{id}/{documentClass}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDFoldersIDDocumentClassResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Document]])
                res.get_spaces_space_id_folders_id_document_class_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_banks(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDBanksRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDBanksResponse:
        r"""Returns list of bank folders for a legal-entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDBanksRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/banks', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDBanksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Bank]])
                res.get_spaces_space_id_legal_entities_id_banks_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_banks_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDBanksAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDBanksAllResponse:
        r"""Returns folder of the banks even archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDBanksAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/banks/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDBanksAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Bank]])
                res.get_spaces_space_id_legal_entities_id_banks_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_contracts(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDContractsRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDContractsResponse:
        r"""Returns all contract folders of the legal entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDContractsRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/contracts', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDContractsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Contract]])
                res.get_spaces_space_id_legal_entities_id_contracts_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_contractual_relationships(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsResponse:
        r"""Returns folder of the others contract with legal entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/contractual-relationships', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ContractualRelationship]])
                res.get_spaces_space_id_legal_entities_id_contractual_relationships_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_contractual_relationships_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsAllResponse:
        r"""Returns folder of the others contract with legal entity (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/contractual-relationships/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDContractualRelationshipsAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ContractualRelationship]])
                res.get_spaces_space_id_legal_entities_id_contractual_relationships_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_customers(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDCustomersRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDCustomersResponse:
        r"""Returns folder of the customer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDCustomersRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/customers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDCustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.get_spaces_space_id_legal_entities_id_customers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_customers_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDCustomersAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDCustomersAllResponse:
        r"""Returns folder of the customers (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDCustomersAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/customers/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDCustomersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Customer]])
                res.get_spaces_space_id_legal_entities_id_customers_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_insurances(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesResponse:
        r"""Returns list of insurance folders for a legal-entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/insurances', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Insurance]])
                res.get_spaces_space_id_legal_entities_id_insurances_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_insurances_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesAllResponse:
        r"""Returns folder of the insurances even archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/insurances/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDInsurancesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Insurance]])
                res.get_spaces_space_id_legal_entities_id_insurances_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_loans(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDLoansRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDLoansResponse:
        r"""Returns folder of the loan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDLoansRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/loans', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDLoansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Loan]])
                res.get_spaces_space_id_legal_entities_id_loans_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_loans_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDLoansAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDLoansAllResponse:
        r"""Returns folder of the loans even archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDLoansAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/loans/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDLoansAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Loan]])
                res.get_spaces_space_id_legal_entities_id_loans_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_providers(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDProvidersRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDProvidersResponse:
        r"""Returns list of providers folders for a legal-entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDProvidersRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/providers', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Provider]])
                res.get_spaces_space_id_legal_entities_id_providers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_providers_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDProvidersAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDProvidersAllResponse:
        r"""Returns folder of the providers even archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDProvidersAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/providers/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDProvidersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Provider]])
                res.get_spaces_space_id_legal_entities_id_providers_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_social_regimes(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesResponse:
        r"""Returns list of social regimes folders for a legal-entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/social-regimes', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialRegime]])
                res.get_spaces_space_id_legal_entities_id_social_regimes_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_legal_entities_id_social_regimes_all(self, request: operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesAllRequest) -> operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesAllResponse:
        r"""Returns folder of the social regimes even archived"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesAllRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/social-regimes/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLegalEntitiesIDSocialRegimesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialRegime]])
                res.get_spaces_space_id_legal_entities_id_social_regimes_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_loans(self, request: operations.GetSpacesSpaceIDLoansRequest) -> operations.GetSpacesSpaceIDLoansResponse:
        r"""Returns list of all loan folders of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLoansRequest, base_url, '/spaces/{spaceId}/loans', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLoansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Loan]])
                res.get_spaces_space_id_loans_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_loans_all(self, request: operations.GetSpacesSpaceIDLoansAllRequest) -> operations.GetSpacesSpaceIDLoansAllResponse:
        r"""Returns list of all loan folders even archived of the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDLoansAllRequest, base_url, '/spaces/{spaceId}/loans/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDLoansAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Loan]])
                res.get_spaces_space_id_loans_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_persons_id_employees(self, request: operations.GetSpacesSpaceIDPersonsIDEmployeesRequest) -> operations.GetSpacesSpaceIDPersonsIDEmployeesResponse:
        r"""Returns folder of the employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsIDEmployeesRequest, base_url, '/spaces/{spaceId}/persons/{id}/employees', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsIDEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_persons_id_employees_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_persons_id_employees_all(self, request: operations.GetSpacesSpaceIDPersonsIDEmployeesAllRequest) -> operations.GetSpacesSpaceIDPersonsIDEmployeesAllResponse:
        r"""Returns folder of all employees (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsIDEmployeesAllRequest, base_url, '/spaces/{spaceId}/persons/{id}/employees/all', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsIDEmployeesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Employee]])
                res.get_spaces_space_id_persons_id_employees_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_persons_id_exchange(self, request: operations.GetSpacesSpaceIDPersonsIDExchangeRequest) -> operations.GetSpacesSpaceIDPersonsIDExchangeResponse:
        r"""Returns folder exchange of the person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsIDExchangeRequest, base_url, '/spaces/{spaceId}/persons/{id}/exchange', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsIDExchangeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDPersonsIDExchange200ApplicationJSON])
                res.get_spaces_space_id_persons_id_exchange_200_application_json_object = out

        return res

    def get_spaces_space_id_persons_id_follow_ups(self, request: operations.GetSpacesSpaceIDPersonsIDFollowUpsRequest) -> operations.GetSpacesSpaceIDPersonsIDFollowUpsResponse:
        r"""Returns folder of the person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsIDFollowUpsRequest, base_url, '/spaces/{spaceId}/persons/{id}/follow-ups', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsIDFollowUpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FollowUp])
                res.follow_up = out

        return res

    def get_spaces_space_id_persons_id_invitation(self, request: operations.GetSpacesSpaceIDPersonsIDInvitationRequest) -> operations.GetSpacesSpaceIDPersonsIDInvitationResponse:
        r"""Returns invitation of a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsIDInvitationRequest, base_url, '/spaces/{spaceId}/persons/{id}/invitation', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsIDInvitationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def get_spaces_space_id_persons_member_id_folders_id_(self, request: operations.GetSpacesSpaceIDPersonsMemberIDFoldersIDRequest) -> operations.GetSpacesSpaceIDPersonsMemberIDFoldersIDResponse:
        r"""Returns folderId with the access of the person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDPersonsMemberIDFoldersIDRequest, base_url, '/spaces/{spaceId}/persons/{memberId}/folders/{id}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDPersonsMemberIDFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSpacesSpaceIDPersonsMemberIDFoldersID200ApplicationJSON])
                res.get_spaces_space_id_persons_member_id_folders_id_200_application_json_object = out

        return res

    def get_spaces_space_id_providers(self, request: operations.GetSpacesSpaceIDProvidersRequest) -> operations.GetSpacesSpaceIDProvidersResponse:
        r"""Returns folder with Id and provider data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDProvidersRequest, base_url, '/spaces/{spaceId}/providers', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDProvidersRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Provider]])
                res.get_spaces_space_id_providers_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_providers_all(self, request: operations.GetSpacesSpaceIDProvidersAllRequest) -> operations.GetSpacesSpaceIDProvidersAllResponse:
        r"""Returns folder with Id and provider data (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDProvidersAllRequest, base_url, '/spaces/{spaceId}/providers/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDProvidersAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDProvidersAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Provider]])
                res.get_spaces_space_id_providers_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_social_regimes(self, request: operations.GetSpacesSpaceIDSocialRegimesRequest) -> operations.GetSpacesSpaceIDSocialRegimesResponse:
        r"""Returns folder with Id and social regime data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/social-regimes', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDSocialRegimesRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialRegime]])
                res.get_spaces_space_id_social_regimes_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_social_regimes_all(self, request: operations.GetSpacesSpaceIDSocialRegimesAllRequest) -> operations.GetSpacesSpaceIDSocialRegimesAllResponse:
        r"""Returns folder with Id and social regime data (even archived)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDSocialRegimesAllRequest, base_url, '/spaces/{spaceId}/social-regimes/all', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDSocialRegimesAllRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDSocialRegimesAllResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SocialRegime]])
                res.get_spaces_space_id_social_regimes_all_200_application_json_all_ofs = out

        return res

    def get_spaces_space_id_spaces_invoicings(self, request: operations.GetSpacesSpaceIDSpacesInvoicingsRequest) -> operations.GetSpacesSpaceIDSpacesInvoicingsResponse:
        r"""Returns CSV Invoicings of the spaces for the account of the spaceId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSpacesSpaceIDSpacesInvoicingsRequest, base_url, '/spaces/{spaceId}/spaces-invoicings', request)
        
        query_params = utils.get_query_params(operations.GetSpacesSpaceIDSpacesInvoicingsRequest, request)
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSpacesSpaceIDSpacesInvoicingsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SpacesInvoicing]])
                res.get_spaces_space_id_spaces_invoicings_200_application_json_all_ofs = out

        return res

    def patch_business_groups(self, request: operations.PatchBusinessGroupsRequestBody, security: operations.PatchBusinessGroupsSecurity) -> operations.PatchBusinessGroupsResponse:
        r"""Modifies an object"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/business-groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchBusinessGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_profile_email(self, request: Any, security: operations.PatchProfileEmailSecurity) -> operations.PatchProfileEmailResponse:
        r"""modify email of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile/email'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchProfileEmailResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_profile_mobile(self, request: Any, security: operations.PatchProfileMobileSecurity) -> operations.PatchProfileMobileResponse:
        r"""modify mobile of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile/mobile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchProfileMobileResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_profile_json(self, request: operations.PatchProfileApplicationJSON, security: operations.PatchProfileJSONSecurity) -> operations.PatchProfileJSONResponse:
        r"""modify infos of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchProfileJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_profile_multipart(self, request: operations.PatchProfileMultipartFormData1, security: operations.PatchProfileMultipartSecurity) -> operations.PatchProfileMultipartResponse:
        r"""modify infos of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchProfileMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_(self, request: operations.PatchSpacesIDRequest) -> operations.PatchSpacesIDResponse:
        r"""Modify a Space (except private)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDRequest, base_url, '/spaces/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_company_entities_company_id_(self, request: operations.PatchSpacesIDCompanyEntitiesCompanyIDRequest) -> operations.PatchSpacesIDCompanyEntitiesCompanyIDResponse:
        r"""Modify a company entity"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDCompanyEntitiesCompanyIDRequest, base_url, '/spaces/{id}/company-entities/{companyId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDCompanyEntitiesCompanyIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_folders_folder_id_persons_member_id_(self, request: operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDRequest) -> operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDResponse:
        r"""Add/Modify/Delete a person in a customer contract (except manager)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDRequest, base_url, '/spaces/{id}/folders/{folderId}/persons/{memberId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_folders_folder_id_persons_member_id_activeaccess(self, request: operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDActiveaccessRequest) -> operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDActiveaccessResponse:
        r"""open an access"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDActiveaccessRequest, base_url, '/spaces/{id}/folders/{folderId}/persons/{memberId}/activeaccess', request)
        
        
        client = self._security_client
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDActiveaccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_folders_folder_id_persons_member_id_unactiveaccess(self, request: operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDUnactiveaccessRequest) -> operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDUnactiveaccessResponse:
        r"""close an access"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDUnactiveaccessRequest, base_url, '/spaces/{id}/folders/{folderId}/persons/{memberId}/unactiveaccess', request)
        
        
        client = self._security_client
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDFoldersFolderIDPersonsMemberIDUnactiveaccessResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_groups_group_id_(self, request: operations.PatchSpacesIDGroupsGroupIDRequest) -> operations.PatchSpacesIDGroupsGroupIDResponse:
        r"""Modify a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDGroupsGroupIDRequest, base_url, '/spaces/{id}/groups/{groupId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDGroupsGroupIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_groups_group_id_folders_folder_id_(self, request: operations.PatchSpacesIDGroupsGroupIDFoldersFolderIDRequest) -> operations.PatchSpacesIDGroupsGroupIDFoldersFolderIDResponse:
        r"""Add access to a folder for a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDGroupsGroupIDFoldersFolderIDRequest, base_url, '/spaces/{id}/groups/{groupId}/folders/{folderId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDGroupsGroupIDFoldersFolderIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_groups_group_id_persons_member_id_(self, request: operations.PatchSpacesIDGroupsGroupIDPersonsMemberIDRequest) -> operations.PatchSpacesIDGroupsGroupIDPersonsMemberIDResponse:
        r"""Add a person to a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDGroupsGroupIDPersonsMemberIDRequest, base_url, '/spaces/{id}/groups/{groupId}/persons/{memberId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDGroupsGroupIDPersonsMemberIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_legal(self, request: operations.PatchSpacesIDLegalRequest) -> operations.PatchSpacesIDLegalResponse:
        r"""Modify legal information of a Space (except private)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDLegalRequest, base_url, '/spaces/{id}/legal', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "legal", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDLegalResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_persons_member_id_player(self, request: operations.PatchSpacesIDPersonsMemberIDPlayerRequest) -> operations.PatchSpacesIDPersonsMemberIDPlayerResponse:
        r"""Modify the role of a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDPersonsMemberIDPlayerRequest, base_url, '/spaces/{id}/persons/{memberId}/player', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDPersonsMemberIDPlayerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_persons_person_id_(self, request: operations.PatchSpacesIDPersonsPersonIDRequest) -> operations.PatchSpacesIDPersonsPersonIDResponse:
        r"""Modify a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDPersonsPersonIDRequest, base_url, '/spaces/{id}/persons/{personId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDPersonsPersonIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_id_portfolios_portfolio_id_persons_member_id_(self, request: operations.PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequest) -> operations.PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDResponse:
        r"""Add/Modify/Delete a person in a portfolio (except manager)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDRequest, base_url, '/spaces/{id}/portfolios/{portfolioId}/persons/{memberId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesIDPortfoliosPortfolioIDPersonsMemberIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_common_folders_id_(self, request: operations.PatchSpacesSpaceIDCommonFoldersIDRequest) -> operations.PatchSpacesSpaceIDCommonFoldersIDResponse:
        r"""Modify a common folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDCommonFoldersIDRequest, base_url, '/spaces/{spaceId}/common-folders/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDCommonFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_documents_document_id_(self, request: operations.PatchSpacesSpaceIDDocumentsDocumentIDRequest) -> operations.PatchSpacesSpaceIDDocumentsDocumentIDResponse:
        r"""modify a doc"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDDocumentsDocumentIDRequest, base_url, '/spaces/{spaceId}/documents/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDDocumentsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_bank_statements_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDResponse:
        r"""modify a bank statement"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/bank-statements/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDBankStatementsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_contractual_documents_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDResponse:
        r"""modify a contractual document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/contractual-documents/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDContractualDocumentsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_corporate_tax_declarations_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDResponse:
        r"""modify a coporate tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/corporate-tax-declarations/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDCorporateTaxDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_expense_proofs_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDResponse:
        r"""modify an expense report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/expense-proofs/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDExpenseProofsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_expense_reports_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDResponse:
        r"""modify an expense report"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/expense-reports/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDExpenseReportsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_invoices_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDResponse:
        r"""modify a invoice"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/invoices/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDInvoicesDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_other_taxes_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDResponse:
        r"""modify an other tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/other-taxes/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDOtherTaxesDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_payrolls_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDResponse:
        r"""modify a payroll"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_payslips_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDResponse:
        r"""modify a payslip"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/payslips/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDPayslipsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_social_contracts_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDResponse:
        r"""modify a social contract"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/social-contracts/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDSocialContractsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_social_declarations_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDResponse:
        r"""modify a social declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/social-declarations/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDSocialDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_folder_id_vat_declarations_document_id_(self, request: operations.PatchSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDRequest) -> operations.PatchSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDResponse:
        r"""modify a vat declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/vat-declarations/{documentId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersFolderIDVatDeclarationsDocumentIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_(self, request: operations.PatchSpacesSpaceIDFoldersIDRequest) -> operations.PatchSpacesSpaceIDFoldersIDResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDRequest, base_url, '/spaces/{spaceId}/folders/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_accounting_year(self, request: operations.PatchSpacesSpaceIDFoldersIDAccountingYearRequest) -> operations.PatchSpacesSpaceIDFoldersIDAccountingYearResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and AccountingYear data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDAccountingYearRequest, base_url, '/spaces/{spaceId}/folders/{id}/accounting-year', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDAccountingYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_bank(self, request: operations.PatchSpacesSpaceIDFoldersIDBankRequest) -> operations.PatchSpacesSpaceIDFoldersIDBankResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Bank data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDBankRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDBankResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_collective_decision(self, request: operations.PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequest) -> operations.PatchSpacesSpaceIDFoldersIDCollectiveDecisionResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Collective Decision data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDCollectiveDecisionRequest, base_url, '/spaces/{spaceId}/folders/{id}/collective-decision', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDCollectiveDecisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_customer(self, request: operations.PatchSpacesSpaceIDFoldersIDCustomerRequest) -> operations.PatchSpacesSpaceIDFoldersIDCustomerResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Customer data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDCustomerRequest, base_url, '/spaces/{spaceId}/folders/{id}/customer', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDCustomerResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_documents_document_id_detach(self, request: operations.PatchSpacesSpaceIDFoldersIDDocumentsDocumentIDDetachRequest) -> operations.PatchSpacesSpaceIDFoldersIDDocumentsDocumentIDDetachResponse:
        r"""Detach a doc of a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDDocumentsDocumentIDDetachRequest, base_url, '/spaces/{spaceId}/folders/{id}/documents/{documentId}/detach', request)
        
        
        client = self._security_client
        
        http_res = client.request('PATCH', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDDocumentsDocumentIDDetachResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_employee(self, request: operations.PatchSpacesSpaceIDFoldersIDEmployeeRequest) -> operations.PatchSpacesSpaceIDFoldersIDEmployeeResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Employee data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDEmployeeRequest, base_url, '/spaces/{spaceId}/folders/{id}/employee', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDEmployeeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_insurance(self, request: operations.PatchSpacesSpaceIDFoldersIDInsuranceRequest) -> operations.PatchSpacesSpaceIDFoldersIDInsuranceResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Insurance data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDInsuranceRequest, base_url, '/spaces/{spaceId}/folders/{id}/insurance', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDInsuranceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_loan(self, request: operations.PatchSpacesSpaceIDFoldersIDLoanRequest) -> operations.PatchSpacesSpaceIDFoldersIDLoanResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Loan data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDLoanRequest, base_url, '/spaces/{spaceId}/folders/{id}/loan', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDLoanResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_messages_message_id_(self, request: operations.PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequest) -> operations.PatchSpacesSpaceIDFoldersIDMessagesMessageIDResponse:
        r"""Modify a Message"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDMessagesMessageIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/messages/{messageId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDMessagesMessageIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_passwords_password_id_(self, request: operations.PatchSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest) -> operations.PatchSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse:
        r"""Modify a Password"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDPasswordsPasswordIDRequest, base_url, '/spaces/{spaceId}/folders/{id}/passwords/{passwordId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDPasswordsPasswordIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_professional_vehicle(self, request: operations.PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequest) -> operations.PatchSpacesSpaceIDFoldersIDProfessionalVehicleResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Professional Vehicle data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDProfessionalVehicleRequest, base_url, '/spaces/{spaceId}/folders/{id}/professional-vehicle', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDProfessionalVehicleResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_provider(self, request: operations.PatchSpacesSpaceIDFoldersIDProviderRequest) -> operations.PatchSpacesSpaceIDFoldersIDProviderResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Provider data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDProviderRequest, base_url, '/spaces/{spaceId}/folders/{id}/provider', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDProviderResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_required_documents_requireddocumentid_(self, request: operations.PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequest) -> operations.PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidResponse:
        r"""Modify the status of a requireddocument"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidRequest, base_url, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_social_regimes(self, request: operations.PatchSpacesSpaceIDFoldersIDSocialRegimesRequest) -> operations.PatchSpacesSpaceIDFoldersIDSocialRegimesResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Social Regime data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-regimes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_folders_id_tax_contract(self, request: operations.PatchSpacesSpaceIDFoldersIDTaxContractRequest) -> operations.PatchSpacesSpaceIDFoldersIDTaxContractResponse:
        r"""Modify a Folder (except Name, Class, ModificationDate and ArchivalDate) and Tax Contract data"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDFoldersIDTaxContractRequest, base_url, '/spaces/{spaceId}/folders/{id}/tax-contract', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDFoldersIDTaxContractResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_persons_id_call_for_document(self, request: operations.PatchSpacesSpaceIDPersonsIDCallForDocumentRequest, security: operations.PatchSpacesSpaceIDPersonsIDCallForDocumentSecurity) -> operations.PatchSpacesSpaceIDPersonsIDCallForDocumentResponse:
        r"""modify the invitation of a person to collect documents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDPersonsIDCallForDocumentRequest, base_url, '/spaces/{spaceId}/persons/{id}/call-for-document', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_collect", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDPersonsIDCallForDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_persons_id_guest_in_space(self, request: operations.PatchSpacesSpaceIDPersonsIDGuestInSpaceRequest, security: operations.PatchSpacesSpaceIDPersonsIDGuestInSpaceSecurity) -> operations.PatchSpacesSpaceIDPersonsIDGuestInSpaceResponse:
        r"""invite a person in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDPersonsIDGuestInSpaceRequest, base_url, '/spaces/{spaceId}/persons/{id}/guest-in-space', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_invitation", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDPersonsIDGuestInSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_persons_id_invitation(self, request: operations.PatchSpacesSpaceIDPersonsIDInvitationRequest, security: operations.PatchSpacesSpaceIDPersonsIDInvitationSecurity) -> operations.PatchSpacesSpaceIDPersonsIDInvitationResponse:
        r"""modify an invitation"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDPersonsIDInvitationRequest, base_url, '/spaces/{spaceId}/persons/{id}/invitation', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDPersonsIDInvitationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def patch_spaces_space_id_persons_member_id_folders_id_(self, request: operations.PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequest) -> operations.PatchSpacesSpaceIDPersonsMemberIDFoldersIDResponse:
        r"""Modify an access"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PatchSpacesSpaceIDPersonsMemberIDFoldersIDRequest, base_url, '/spaces/{spaceId}/persons/{memberId}/folders/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PATCH', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PatchSpacesSpaceIDPersonsMemberIDFoldersIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_business_groups(self, request: operations.PostBusinessGroupsRequestBody, security: operations.PostBusinessGroupsSecurity) -> operations.PostBusinessGroupsResponse:
        r"""Adds a group (only for managers and ADN collaborators)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/business-groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBusinessGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostBusinessGroups201ApplicationJSON])
                res.post_business_groups_201_application_json_object = out

        return res

    def post_business_groups_id_spaces_space_id_legal_entities_person_id_customers_folder_id_guest_in_space(self, request: operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpaceRequest, security: operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpaceSecurity) -> operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpaceResponse:
        r"""send an invitation to manager the private space of personId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpaceRequest, base_url, '/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/guest-in-space', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDGuestInSpace201ApplicationJSON])
                res.post_business_groups_id_spaces_space_id_legal_entities_person_id_customers_folder_id_guest_in_space_201_application_json_object = out

        return res

    def post_business_groups_id_spaces_space_id_legal_entities_person_id_customers_folder_id_spaces(self, request: operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequest, security: operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesSecurity) -> operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesResponse:
        r"""Add a Space in a group"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesRequest, base_url, '/business-groups/{id}/spaces/{spaceId}/legal-entities/{personId}/customers/{folderId}/spaces', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpacesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostBusinessGroupsIDSpacesSpaceIDLegalEntitiesPersonIDCustomersFolderIDSpaces201ApplicationJSON])
                res.post_business_groups_id_spaces_space_id_legal_entities_person_id_customers_folder_id_spaces_201_application_json_object = out

        return res

    def post_hub_documents_json(self, request: operations.PostHubDocumentsApplicationJSON, security: operations.PostHubDocumentsJSONSecurity) -> operations.PostHubDocumentsJSONResponse:
        r"""Add a document (this document is analyzed to be saved in the correct folder and correct space)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/documents'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubDocumentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubDocumentsJSON201ApplicationJSON])
                res.post_hub_documents_json_201_application_json_object = out

        return res

    def post_hub_documents_multipart(self, request: operations.PostHubDocumentsMultipartFormData1, security: operations.PostHubDocumentsMultipartSecurity) -> operations.PostHubDocumentsMultipartResponse:
        r"""Add a document (this document is analyzed to be saved in the correct folder and correct space)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/documents'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubDocumentsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubDocumentsMultipart201ApplicationJSON])
                res.post_hub_documents_multipart_201_application_json_object = out

        return res

    def post_hub_payslips_json(self, request: operations.PostHubPayslipsApplicationJSON, security: operations.PostHubPayslipsJSONSecurity) -> operations.PostHubPayslipsJSONResponse:
        r"""Add a payslip (this document is analyzed to be saved in the correct folder and correct space)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/payslips'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubPayslipsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubPayslipsJSON201ApplicationJSON])
                res.post_hub_payslips_json_201_application_json_object = out

        return res

    def post_hub_payslips_multipart(self, request: operations.PostHubPayslipsMultipartFormData1, security: operations.PostHubPayslipsMultipartSecurity) -> operations.PostHubPayslipsMultipartResponse:
        r"""Add a payslip (this document is analyzed to be saved in the correct folder and correct space)"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/hub/payslips'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubPayslipsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubPayslipsMultipart201ApplicationJSON])
                res.post_hub_payslips_multipart_201_application_json_object = out

        return res

    def post_hub_spaces_space_id_documents_json(self, request: operations.PostHubSpacesSpaceIDDocumentsJSONRequest, security: operations.PostHubSpacesSpaceIDDocumentsJSONSecurity) -> operations.PostHubSpacesSpaceIDDocumentsJSONResponse:
        r"""Add a document in a space (this document is analyzed to be saved in the correct folder)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostHubSpacesSpaceIDDocumentsJSONRequest, base_url, '/hub/spaces/{spaceId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubSpacesSpaceIDDocumentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubSpacesSpaceIDDocumentsJSON201ApplicationJSON])
                res.post_hub_spaces_space_id_documents_json_201_application_json_object = out

        return res

    def post_hub_spaces_space_id_documents_multipart(self, request: operations.PostHubSpacesSpaceIDDocumentsMultipartRequest, security: operations.PostHubSpacesSpaceIDDocumentsMultipartSecurity) -> operations.PostHubSpacesSpaceIDDocumentsMultipartResponse:
        r"""Add a document in a space (this document is analyzed to be saved in the correct folder)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostHubSpacesSpaceIDDocumentsMultipartRequest, base_url, '/hub/spaces/{spaceId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubSpacesSpaceIDDocumentsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubSpacesSpaceIDDocumentsMultipart201ApplicationJSON])
                res.post_hub_spaces_space_id_documents_multipart_201_application_json_object = out

        return res

    def post_hub_spaces_space_id_payslips_json(self, request: operations.PostHubSpacesSpaceIDPayslipsJSONRequest, security: operations.PostHubSpacesSpaceIDPayslipsJSONSecurity) -> operations.PostHubSpacesSpaceIDPayslipsJSONResponse:
        r"""Add a payslip in a space (this document is analyzed to be saved in the correct folder)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostHubSpacesSpaceIDPayslipsJSONRequest, base_url, '/hub/spaces/{spaceId}/payslips', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubSpacesSpaceIDPayslipsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubSpacesSpaceIDPayslipsJSON201ApplicationJSON])
                res.post_hub_spaces_space_id_payslips_json_201_application_json_object = out

        return res

    def post_hub_spaces_space_id_payslips_multipart(self, request: operations.PostHubSpacesSpaceIDPayslipsMultipartRequest, security: operations.PostHubSpacesSpaceIDPayslipsMultipartSecurity) -> operations.PostHubSpacesSpaceIDPayslipsMultipartResponse:
        r"""Add a payslip in a space (this document is analyzed to be saved in the correct folder)"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostHubSpacesSpaceIDPayslipsMultipartRequest, base_url, '/hub/spaces/{spaceId}/payslips', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostHubSpacesSpaceIDPayslipsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostHubSpacesSpaceIDPayslipsMultipart201ApplicationJSON])
                res.post_hub_spaces_space_id_payslips_multipart_201_application_json_object = out

        return res

    def post_menus_menu_id_documents_json(self, request: operations.PostMenusMenuIDDocumentsJSONRequest, security: operations.PostMenusMenuIDDocumentsJSONSecurity) -> operations.PostMenusMenuIDDocumentsJSONResponse:
        r"""add a document to the target menuId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMenusMenuIDDocumentsJSONRequest, base_url, '/menus/{menuId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMenusMenuIDDocumentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostMenusMenuIDDocumentsJSON201ApplicationJSON])
                res.post_menus_menu_id_documents_json_201_application_json_object = out

        return res

    def post_menus_menu_id_documents_multipart(self, request: operations.PostMenusMenuIDDocumentsMultipartRequest, security: operations.PostMenusMenuIDDocumentsMultipartSecurity) -> operations.PostMenusMenuIDDocumentsMultipartResponse:
        r"""add a document to the target menuId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostMenusMenuIDDocumentsMultipartRequest, base_url, '/menus/{menuId}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostMenusMenuIDDocumentsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostMenusMenuIDDocumentsMultipart201ApplicationJSON])
                res.post_menus_menu_id_documents_multipart_201_application_json_object = out

        return res

    def post_profile_json(self, request: operations.PostProfileApplicationJSON, security: operations.PostProfileJSONSecurity) -> operations.PostProfileJSONResponse:
        r"""create infos of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostProfileJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_profile_multipart(self, request: operations.PostProfileMultipartFormData1, security: operations.PostProfileMultipartSecurity) -> operations.PostProfileMultipartResponse:
        r"""create infos of profile"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/profile'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostProfileMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_registration(self, request: operations.PostRegistrationRequestBody, security: operations.PostRegistrationSecurity) -> operations.PostRegistrationResponse:
        r"""complete the invitation"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/registration'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostRegistrationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostRegistration201ApplicationJSON])
                res.post_registration_201_application_json_object = out

        return res

    def post_spaces(self, request: operations.PostSpacesRequestBody, security: operations.PostSpacesSecurity) -> operations.PostSpacesResponse:
        r"""Add a Space in my group"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/spaces'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpaces201ApplicationJSON])
                res.post_spaces_201_application_json_object = out

        return res

    def post_spaces_id_accounting_year(self, request: operations.PostSpacesIDAccountingYearRequest, security: operations.PostSpacesIDAccountingYearSecurity) -> operations.PostSpacesIDAccountingYearResponse:
        r"""Create a accounting year for the space id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDAccountingYearRequest, base_url, '/spaces/{id}/accounting-year', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDAccountingYearResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDAccountingYear201ApplicationJSON])
                res.post_spaces_id_accounting_year_201_application_json_object = out

        return res

    def post_spaces_id_collective_decision(self, request: operations.PostSpacesIDCollectiveDecisionRequest, security: operations.PostSpacesIDCollectiveDecisionSecurity) -> operations.PostSpacesIDCollectiveDecisionResponse:
        r"""Create a colletive decision for the space id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDCollectiveDecisionRequest, base_url, '/spaces/{id}/collective-decision', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDCollectiveDecisionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDCollectiveDecision201ApplicationJSON])
                res.post_spaces_id_collective_decision_201_application_json_object = out

        return res

    def post_spaces_id_company_entities(self, request: operations.PostSpacesIDCompanyEntitiesRequest, security: operations.PostSpacesIDCompanyEntitiesSecurity) -> operations.PostSpacesIDCompanyEntitiesResponse:
        r"""Add a Company Entity in a Space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDCompanyEntitiesRequest, base_url, '/spaces/{id}/company-entities', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDCompanyEntitiesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDCompanyEntities201ApplicationJSON])
                res.post_spaces_id_company_entities_201_application_json_object = out

        return res

    def post_spaces_id_company_entities_person_id_details(self, request: operations.PostSpacesIDCompanyEntitiesPersonIDDetailsRequest) -> operations.PostSpacesIDCompanyEntitiesPersonIDDetailsResponse:
        r"""Replace or Add a contact detail for a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDCompanyEntitiesPersonIDDetailsRequest, base_url, '/spaces/{id}/company-entities/{personId}/details', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDCompanyEntitiesPersonIDDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_id_documents_download(self, request: operations.PostSpacesIDDocumentsDownloadRequest, security: operations.PostSpacesIDDocumentsDownloadSecurity) -> operations.PostSpacesIDDocumentsDownloadResponse:
        r"""create an archive with documents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDDocumentsDownloadRequest, base_url, '/spaces/{id}/documents/download', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDDocumentsDownloadResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDDocumentsDownload201ApplicationJSON])
                res.post_spaces_id_documents_download_201_application_json_object = out
            if utils.match_content_type(content_type, 'multipart/form-data'):
                res.body = http_res.content

        return res

    def post_spaces_id_folders_folder_id_persons_person_id_guest_in_space(self, request: operations.PostSpacesIDFoldersFolderIDPersonsPersonIDGuestInSpaceRequest, security: operations.PostSpacesIDFoldersFolderIDPersonsPersonIDGuestInSpaceSecurity) -> operations.PostSpacesIDFoldersFolderIDPersonsPersonIDGuestInSpaceResponse:
        r"""invite a owner in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDFoldersFolderIDPersonsPersonIDGuestInSpaceRequest, base_url, '/spaces/{id}/folders/{folderId}/persons/{personId}/guest-in-space', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "invitation_person", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDFoldersFolderIDPersonsPersonIDGuestInSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_id_groups(self, request: operations.PostSpacesIDGroupsRequest, security: operations.PostSpacesIDGroupsSecurity) -> operations.PostSpacesIDGroupsResponse:
        r"""Add a group in a Space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDGroupsRequest, base_url, '/spaces/{id}/groups', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDGroups201ApplicationJSON])
                res.post_spaces_id_groups_201_application_json_object = out

        return res

    def post_spaces_id_persons(self, request: operations.PostSpacesIDPersonsRequest, security: operations.PostSpacesIDPersonsSecurity) -> operations.PostSpacesIDPersonsResponse:
        r"""Add a Person in a Space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDPersonsRequest, base_url, '/spaces/{id}/persons', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDPersonsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDPersons201ApplicationJSON])
                res.post_spaces_id_persons_201_application_json_object = out

        return res

    def post_spaces_id_persons_person_id_details(self, request: operations.PostSpacesIDPersonsPersonIDDetailsRequest) -> operations.PostSpacesIDPersonsPersonIDDetailsResponse:
        r"""Replace or Add a contact detail for a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDPersonsPersonIDDetailsRequest, base_url, '/spaces/{id}/persons/{personId}/details', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDPersonsPersonIDDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_id_persons_person_id_portfolios(self, request: operations.PostSpacesIDPersonsPersonIDPortfoliosRequest, security: operations.PostSpacesIDPersonsPersonIDPortfoliosSecurity) -> operations.PostSpacesIDPersonsPersonIDPortfoliosResponse:
        r"""Create a portfolio for the person personId"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDPersonsPersonIDPortfoliosRequest, base_url, '/spaces/{id}/persons/{personId}/portfolios', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDPersonsPersonIDPortfoliosResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDPersonsPersonIDPortfolios201ApplicationJSON])
                res.post_spaces_id_persons_person_id_portfolios_201_application_json_object = out

        return res

    def post_spaces_id_professional_vehicles(self, request: operations.PostSpacesIDProfessionalVehiclesRequest, security: operations.PostSpacesIDProfessionalVehiclesSecurity) -> operations.PostSpacesIDProfessionalVehiclesResponse:
        r"""Create a professional vehicle for the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDProfessionalVehiclesRequest, base_url, '/spaces/{id}/professional-vehicles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDProfessionalVehiclesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDProfessionalVehicles201ApplicationJSON])
                res.post_spaces_id_professional_vehicles_201_application_json_object = out

        return res

    def post_spaces_id_settings_nf203_logs(self, request: operations.PostSpacesIDSettingsNf203LogsRequest, security: operations.PostSpacesIDSettingsNf203LogsSecurity) -> operations.PostSpacesIDSettingsNf203LogsResponse:
        r"""Enable/Disable logs"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDSettingsNf203LogsRequest, base_url, '/spaces/{id}/settings/nf203/logs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDSettingsNf203LogsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_id_status(self, request: operations.PostSpacesIDStatusRequest) -> operations.PostSpacesIDStatusResponse:
        r"""Replace or Add a status"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDStatusRequest, base_url, '/spaces/{id}/status', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_id_tax_contracts(self, request: operations.PostSpacesIDTaxContractsRequest, security: operations.PostSpacesIDTaxContractsSecurity) -> operations.PostSpacesIDTaxContractsResponse:
        r"""Create a tax contract for the space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDTaxContractsRequest, base_url, '/spaces/{id}/tax-contracts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDTaxContractsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesIDTaxContracts201ApplicationJSON])
                res.post_spaces_id_tax_contracts_201_application_json_object = out

        return res

    def post_spaces_id_triggers_name_(self, request: operations.PostSpacesIDTriggersNameRequest, security: operations.PostSpacesIDTriggersNameSecurity) -> operations.PostSpacesIDTriggersNameResponse:
        r"""Creates a trigger for the space id"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesIDTriggersNameRequest, base_url, '/spaces/{id}/triggers/{name}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesIDTriggersNameResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_space_id_documents_document_id_extend(self, request: operations.PostSpacesSpaceIDDocumentsDocumentIDExtendRequest, security: operations.PostSpacesSpaceIDDocumentsDocumentIDExtendSecurity) -> operations.PostSpacesSpaceIDDocumentsDocumentIDExtendResponse:
        r"""Add a data to a document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDDocumentsDocumentIDExtendRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/extend', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDDocumentsDocumentIDExtendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDDocumentsDocumentIDExtend201ApplicationJSON])
                res.post_spaces_space_id_documents_document_id_extend_201_application_json_object = out

        return res

    def post_spaces_space_id_documents_document_id_mailing(self, request: operations.PostSpacesSpaceIDDocumentsDocumentIDMailingRequest, security: operations.PostSpacesSpaceIDDocumentsDocumentIDMailingSecurity) -> operations.PostSpacesSpaceIDDocumentsDocumentIDMailingResponse:
        r"""send by mail a document"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDDocumentsDocumentIDMailingRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/mailing', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDDocumentsDocumentIDMailingResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDDocumentsDocumentIDMailing200ApplicationJSON])
                res.post_spaces_space_id_documents_document_id_mailing_200_application_json_object = out

        return res

    def post_spaces_space_id_documents_document_id_versions_json(self, request: operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSONRequest, security: operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSONSecurity) -> operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSONResponse:
        r"""Add a version to a document and set it as current"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSONRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsJSON201ApplicationJSON])
                res.post_spaces_space_id_documents_document_id_versions_json_201_application_json_object = out

        return res

    def post_spaces_space_id_documents_document_id_versions_multipart(self, request: operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipartRequest, security: operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipartSecurity) -> operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipartResponse:
        r"""Add a version to a document and set it as current"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipartRequest, base_url, '/spaces/{spaceId}/documents/{documentId}/versions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDDocumentsDocumentIDVersionsMultipart201ApplicationJSON])
                res.post_spaces_space_id_documents_document_id_versions_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_extend(self, request: operations.PostSpacesSpaceIDExtendRequest, security: operations.PostSpacesSpaceIDExtendSecurity) -> operations.PostSpacesSpaceIDExtendResponse:
        r"""Add a data to a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDExtendRequest, base_url, '/spaces/{spaceId}/extend', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDExtendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDExtend201ApplicationJSON])
                res.post_spaces_space_id_extend_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_folder_id_payrolls_document_id_refresh(self, request: operations.PostSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRefreshRequest) -> operations.PostSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRefreshResponse:
        r"""recalculate a payroll"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRefreshRequest, base_url, '/spaces/{spaceId}/folders/{folderId}/payrolls/{documentId}/refresh', request)
        
        
        client = self._security_client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRefreshResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersFolderIDPayrollsDocumentIDRefresh201ApplicationJSON])
                res.post_spaces_space_id_folders_folder_id_payrolls_document_id_refresh_201_application_json_object = out
        elif http_res.status_code == 204:
            pass

        return res

    def post_spaces_space_id_folders_id_bank_statements_json(self, request: operations.PostSpacesSpaceIDFoldersIDBankStatementsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDBankStatementsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDBankStatementsJSONResponse:
        r"""Add a bank statement in a folder bank"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDBankStatementsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank-statements', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDBankStatementsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDBankStatementsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_bank_statements_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_bank_statements_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipartResponse:
        r"""Add a bank statement in a folder bank"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/bank-statements', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDBankStatementsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_bank_statements_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_common_folders(self, request: operations.PostSpacesSpaceIDFoldersIDCommonFoldersRequest, security: operations.PostSpacesSpaceIDFoldersIDCommonFoldersSecurity) -> operations.PostSpacesSpaceIDFoldersIDCommonFoldersResponse:
        r"""Add a common folder in another folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDCommonFoldersRequest, base_url, '/spaces/{spaceId}/folders/{id}/common-folders', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDCommonFoldersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDCommonFolders201ApplicationJSON])
                res.post_spaces_space_id_folders_id_common_folders_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_contractual_documents_json(self, request: operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSONResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/contractual-documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDContractualDocumentsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_contractual_documents_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_contractual_documents_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/contractual-documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDContractualDocumentsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_contractual_documents_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_coporate_tax_declarations_json(self, request: operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONResponse:
        r"""Add a corporate tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_coporate_tax_declarations_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_coporate_tax_declarations_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartResponse:
        r"""Add a corporate tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/coporate-tax-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDCoporateTaxDeclarationsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_coporate_tax_declarations_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_documents_json(self, request: operations.PostSpacesSpaceIDFoldersIDDocumentsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDDocumentsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDDocumentsJSONResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDDocumentsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDDocumentsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDDocumentsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_documents_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_documents_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDDocumentsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDDocumentsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDDocumentsMultipartResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDDocumentsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/documents', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDDocumentsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDDocumentsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_documents_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_expense_proofs_json(self, request: operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSONResponse:
        r"""Add a expense proof in a folder followup or exchange"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-proofs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDExpenseProofsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_expense_proofs_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_expense_proofs_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipartResponse:
        r"""Add a expense proof in a folder followup or exchange"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-proofs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDExpenseProofsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_expense_proofs_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_expense_reports_json(self, request: operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSONResponse:
        r"""Add a expense report in a folder followup"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-reports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDExpenseReportsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_expense_reports_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_expense_reports_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipartResponse:
        r"""Add a expense report in a folder followup"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/expense-reports', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDExpenseReportsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_expense_reports_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_invoices_json(self, request: operations.PostSpacesSpaceIDFoldersIDInvoicesJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDInvoicesJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDInvoicesJSONResponse:
        r"""Add a invoice in a folder of a customer or a provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDInvoicesJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/invoices', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDInvoicesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDInvoicesJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_invoices_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_invoices_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDInvoicesMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDInvoicesMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDInvoicesMultipartResponse:
        r"""Add a invoice in a folder of a customer or a provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDInvoicesMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/invoices', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDInvoicesMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDInvoicesMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_invoices_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_messages(self, request: operations.PostSpacesSpaceIDFoldersIDMessagesRequest, security: operations.PostSpacesSpaceIDFoldersIDMessagesSecurity) -> operations.PostSpacesSpaceIDFoldersIDMessagesResponse:
        r"""Write a message in the journal of a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDMessagesRequest, base_url, '/spaces/{spaceId}/folders/{id}/messages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_space_id_folders_id_other_taxes_json(self, request: operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSONResponse:
        r"""Add a tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/other-taxes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDOtherTaxesJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_other_taxes_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_other_taxes_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipartResponse:
        r"""Add a tax declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/other-taxes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDOtherTaxesMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_other_taxes_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_passwords(self, request: operations.PostSpacesSpaceIDFoldersIDPasswordsRequest, security: operations.PostSpacesSpaceIDFoldersIDPasswordsSecurity) -> operations.PostSpacesSpaceIDFoldersIDPasswordsResponse:
        r"""Write a identifier/password in aa folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPasswordsRequest, base_url, '/spaces/{spaceId}/folders/{id}/passwords', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPasswordsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_space_id_folders_id_payrolls_payroll_id_nominative_social_declaration_json(self, request: operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSONResponse:
        r"""Add a nominative social declaration in a folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payrolls_payroll_id_nominative_social_declaration_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_payrolls_payroll_id_nominative_social_declaration_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipartResponse:
        r"""Add a nominative social declaration in a folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls/{payrollId}/nominative-social-declaration', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayrollsPayrollIDNominativeSocialDeclarationMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payrolls_payroll_id_nominative_social_declaration_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_payrolls_json(self, request: operations.PostSpacesSpaceIDFoldersIDPayrollsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDPayrollsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayrollsJSONResponse:
        r"""Add a payroll in a folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayrollsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayrollsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayrollsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payrolls_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_payrolls_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDPayrollsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDPayrollsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayrollsMultipartResponse:
        r"""Add a payroll in a folder social"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayrollsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/payrolls', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayrollsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayrollsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payrolls_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_payslips_json(self, request: operations.PostSpacesSpaceIDFoldersIDPayslipsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDPayslipsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayslipsJSONResponse:
        r"""Add a payslip in a folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayslipsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/payslips', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayslipsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayslipsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payslips_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_payslips_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDPayslipsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDPayslipsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDPayslipsMultipartResponse:
        r"""Add a payslip in a folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDPayslipsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/payslips', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDPayslipsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDPayslipsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_payslips_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_required_documents_requireddocumentid_json(self, request: operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSONResponse:
        r"""Add a required document to a line"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_required_documents_requireddocumentid_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_required_documents_requireddocumentid_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipartResponse:
        r"""Add a required document to a line"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/required-documents/{requireddocumentid}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDRequiredDocumentsRequireddocumentidMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_required_documents_requireddocumentid_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_social_contracts_json(self, request: operations.PostSpacesSpaceIDFoldersIDSocialContractsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDSocialContractsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDSocialContractsJSONResponse:
        r"""Add a social contract in a folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDSocialContractsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-contracts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDSocialContractsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDSocialContractsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_social_contracts_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_social_contracts_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipartResponse:
        r"""Add a social contract in a folder employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-contracts', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDSocialContractsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_social_contracts_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_social_declarations_json(self, request: operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONResponse:
        r"""Add a social declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_social_declarations_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_social_declarations_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipartResponse:
        r"""Add a social declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/social-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDSocialDeclarationsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_social_declarations_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_vat_declarations_json(self, request: operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSONResponse:
        r"""Add a vat declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/vat-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDVatDeclarationsJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_vat_declarations_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_vat_declarations_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartResponse:
        r"""Add a vat declaration"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/vat-declarations', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDVatDeclarationsMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_vat_declarations_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_document_class_json(self, request: operations.PostSpacesSpaceIDFoldersIDDocumentClassJSONRequest, security: operations.PostSpacesSpaceIDFoldersIDDocumentClassJSONSecurity) -> operations.PostSpacesSpaceIDFoldersIDDocumentClassJSONResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDDocumentClassJSONRequest, base_url, '/spaces/{spaceId}/folders/{id}/{documentClass}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDDocumentClassJSONResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDDocumentClassJSON201ApplicationJSON])
                res.post_spaces_space_id_folders_id_document_class_json_201_application_json_object = out

        return res

    def post_spaces_space_id_folders_id_document_class_multipart(self, request: operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipartRequest, security: operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipartSecurity) -> operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipartResponse:
        r"""Add a document in a folder"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipartRequest, base_url, '/spaces/{spaceId}/folders/{id}/{documentClass}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'multipart')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDFoldersIDDocumentClassMultipart201ApplicationJSON])
                res.post_spaces_space_id_folders_id_document_class_multipart_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_banks(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDBanksRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDBanksSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDBanksResponse:
        r"""Add a folder for a bank"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDBanksRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/banks', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDBanksResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDBanks201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_banks_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_customers(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDCustomersRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDCustomersSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDCustomersResponse:
        r"""Add a folder for a customer"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDCustomersRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/customers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDCustomersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDCustomers201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_customers_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_insurances(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDInsurancesRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDInsurancesSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDInsurancesResponse:
        r"""Add a folder for a insurance"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDInsurancesRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/insurances', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDInsurancesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDInsurances201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_insurances_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_loans(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDLoansRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDLoansSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDLoansResponse:
        r"""Add a folder for a loan"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDLoansRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/loans', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDLoansResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDLoans201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_loans_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_providers(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDProvidersRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDProvidersSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDProvidersResponse:
        r"""Add a folder for a provider"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDProvidersRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/providers', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDProvidersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDProviders201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_providers_201_application_json_object = out

        return res

    def post_spaces_space_id_legal_entities_id_social_regimes(self, request: operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimesRequest, security: operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimesSecurity) -> operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimesResponse:
        r"""Add a folder for a social regime"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimesRequest, base_url, '/spaces/{spaceId}/legal-entities/{id}/social-regimes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDLegalEntitiesIDSocialRegimes201ApplicationJSON])
                res.post_spaces_space_id_legal_entities_id_social_regimes_201_application_json_object = out

        return res

    def post_spaces_space_id_persons_id_call_for_document(self, request: operations.PostSpacesSpaceIDPersonsIDCallForDocumentRequest, security: operations.PostSpacesSpaceIDPersonsIDCallForDocumentSecurity) -> operations.PostSpacesSpaceIDPersonsIDCallForDocumentResponse:
        r"""invite a person to collect documents"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDPersonsIDCallForDocumentRequest, base_url, '/spaces/{spaceId}/persons/{id}/call-for-document', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "call_for_document", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDPersonsIDCallForDocumentResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDPersonsIDCallForDocument201ApplicationJSON])
                res.post_spaces_space_id_persons_id_call_for_document_201_application_json_object = out

        return res

    def post_spaces_space_id_persons_id_employees(self, request: operations.PostSpacesSpaceIDPersonsIDEmployeesRequest, security: operations.PostSpacesSpaceIDPersonsIDEmployeesSecurity) -> operations.PostSpacesSpaceIDPersonsIDEmployeesResponse:
        r"""Add a folder for a employee"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDPersonsIDEmployeesRequest, base_url, '/spaces/{spaceId}/persons/{id}/employees', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDPersonsIDEmployeesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            res.headers = http_res.headers
            
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDPersonsIDEmployees201ApplicationJSON])
                res.post_spaces_space_id_persons_id_employees_201_application_json_object = out

        return res

    def post_spaces_space_id_persons_id_guest_in_space(self, request: operations.PostSpacesSpaceIDPersonsIDGuestInSpaceRequest, security: operations.PostSpacesSpaceIDPersonsIDGuestInSpaceSecurity) -> operations.PostSpacesSpaceIDPersonsIDGuestInSpaceResponse:
        r"""invite a person in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDPersonsIDGuestInSpaceRequest, base_url, '/spaces/{spaceId}/persons/{id}/guest-in-space', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "guest_in_space", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDPersonsIDGuestInSpaceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_spaces_space_id_persons_id_invitation(self, request: operations.PostSpacesSpaceIDPersonsIDInvitationRequest, security: operations.PostSpacesSpaceIDPersonsIDInvitationSecurity) -> operations.PostSpacesSpaceIDPersonsIDInvitationResponse:
        r"""create an invitation in a space for a person"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDPersonsIDInvitationRequest, base_url, '/spaces/{spaceId}/persons/{id}/invitation', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDPersonsIDInvitationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDPersonsIDInvitation201ApplicationJSON])
                res.post_spaces_space_id_persons_id_invitation_201_application_json_object = out

        return res

    def post_spaces_space_id_persons_id_invitation_invitation_id_send(self, request: operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSendRequest, security: operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSendSecurity) -> operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSendResponse:
        r"""send the invitation of a person in a space"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSendRequest, base_url, '/spaces/{spaceId}/persons/{id}/invitation/{invitationId}/send', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSendResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.PostSpacesSpaceIDPersonsIDInvitationInvitationIDSend201ApplicationJSON])
                res.post_spaces_space_id_persons_id_invitation_invitation_id_send_201_application_json_object = out

        return res

    