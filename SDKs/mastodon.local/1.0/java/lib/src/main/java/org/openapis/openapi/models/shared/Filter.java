/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Filter - Represents a user-defined filter for determining which statuses should not be shown to the user.
 * https://docs.joinmastodon.org/entities/filter/
 */
public class Filter {
    /**
     * The contexts in which the filter should be applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public FilterContextEnum[] context;

    public Filter withContext(FilterContextEnum[] context) {
        this.context = context;
        return this;
    }
    
    /**
     * When the filter should no longer be applied. ISO 8601 Datetime, or null if the filter does not expire
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    public String expiresAt;

    public Filter withExpiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * The ID of the filter in the database. Cast from an integer, but not guaranteed to be a number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Filter withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Should matching entities in home and notifications be dropped by the server?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("irreversible")
    public Boolean irreversible;

    public Filter withIrreversible(Boolean irreversible) {
        this.irreversible = irreversible;
        return this;
    }
    
    /**
     * The text to be filtered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phrase")
    public String phrase;

    public Filter withPhrase(String phrase) {
        this.phrase = phrase;
        return this;
    }
    
    /**
     * Should the filter consider word boundaries?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("whole_word")
    public Boolean wholeWord;

    public Filter withWholeWord(Boolean wholeWord) {
        this.wholeWord = wholeWord;
        return this;
    }
    
    public Filter(){}
}
