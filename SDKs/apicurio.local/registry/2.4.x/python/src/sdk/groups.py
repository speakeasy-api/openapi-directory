"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Groups:
    r"""Registry artifacts can be collected together using groups. This section includes all of the primary operations related to groups."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_group(self, request: shared.CreateGroupMetaData) -> operations.CreateGroupResponse:
        r"""Create a new group
        Creates a new group.
        
        This operation can fail for the following reasons:
        
        * A server error occurred (HTTP error `500`)
        * The group already exist (HTTP error `409`)
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateGroupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupMetaData])
                res.group_meta_data = out
        elif http_res.status_code in [409, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def delete_group_by_id(self, request: operations.DeleteGroupByIDRequest) -> operations.DeleteGroupByIDResponse:
        r"""Delete a group by the specified ID.
        Deletes a group by identifier.
        
        This operation can fail for the following reasons:
        
        * A server error occurred (HTTP error `500`)
        * The group does not exist (HTTP error `404`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteGroupByIDRequest, base_url, '/groups/{groupId}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteGroupByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def get_group_by_id(self, request: operations.GetGroupByIDRequest) -> operations.GetGroupByIDResponse:
        r"""Get a group by the specified ID.
        Returns a group using the specified id.
        
        This operation can fail for the following reasons:
        
        * No group exists with the specified ID (HTTP error `404`)
        * A server error occurred (HTTP error `500`)
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetGroupByIDRequest, base_url, '/groups/{groupId}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetGroupByIDResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupMetaData])
                res.group_meta_data = out
        elif http_res.status_code in [404, 500]:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    def list_groups(self, request: operations.ListGroupsRequest) -> operations.ListGroupsResponse:
        r"""List groups
        Returns a list of all groups.  This list is paged.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/groups'
        
        query_params = utils.get_query_params(operations.ListGroupsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListGroupsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GroupSearchResults])
                res.group_search_results = out
        elif http_res.status_code == 500:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Error])
                res.error = out

        return res

    