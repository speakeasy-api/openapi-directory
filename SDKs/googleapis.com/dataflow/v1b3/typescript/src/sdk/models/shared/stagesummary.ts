/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MetricUpdate } from "./metricupdate";
import { ProgressTimeseries } from "./progresstimeseries";
import { StragglerSummary } from "./stragglersummary";
import { Expose, Type } from "class-transformer";

/**
 * State of this stage.
 */
export enum StageSummaryStateEnum {
  ExecutionStateUnknown = "EXECUTION_STATE_UNKNOWN",
  ExecutionStateNotStarted = "EXECUTION_STATE_NOT_STARTED",
  ExecutionStateRunning = "EXECUTION_STATE_RUNNING",
  ExecutionStateSucceeded = "EXECUTION_STATE_SUCCEEDED",
  ExecutionStateFailed = "EXECUTION_STATE_FAILED",
  ExecutionStateCancelled = "EXECUTION_STATE_CANCELLED",
}

/**
 * Information about a particular execution stage of a job.
 */
export class StageSummary extends SpeakeasyBase {
  /**
   * End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endTime" })
  endTime?: string;

  /**
   * Metrics for this stage.
   */
  @SpeakeasyMetadata({ elemType: MetricUpdate })
  @Expose({ name: "metrics" })
  @Type(() => MetricUpdate)
  metrics?: MetricUpdate[];

  /**
   * Information about the progress of some component of job execution.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "progress" })
  @Type(() => ProgressTimeseries)
  progress?: ProgressTimeseries;

  /**
   * ID of this stage
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stageId" })
  stageId?: string;

  /**
   * Start time of this stage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "startTime" })
  startTime?: string;

  /**
   * State of this stage.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "state" })
  state?: StageSummaryStateEnum;

  /**
   * Summarized straggler identification details.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "stragglerSummary" })
  @Type(() => StragglerSummary)
  stragglerSummary?: StragglerSummary;
}
