/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

/**
 * <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p> </note>
 */
export enum UpdateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum {
  None = "none",
  All = "all",
  High = "high",
}

export class UpdateSlackChannelConfigurationRequestBody extends SpeakeasyBase {
  /**
   * The channel ID in Slack. This ID identifies a channel within a Slack workspace.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelId" })
  channelId: string;

  /**
   * The Slack channel name that you want to update.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelName" })
  channelName?: string;

  /**
   * The Amazon Resource Name (ARN) of an IAM role that you want to use to perform operations on Amazon Web Services. For more information, see <a href="https://docs.aws.amazon.com/awssupport/latest/user/support-app-permissions.html">Managing access to the Amazon Web Services Support App</a> in the <i>Amazon Web Services Support User Guide</i>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "channelRoleArn" })
  channelRoleArn?: string;

  /**
   * Whether you want to get notified when a support case has a new correspondence.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyOnAddCorrespondenceToCase" })
  notifyOnAddCorrespondenceToCase?: boolean;

  /**
   * <p>The case severity for a support case that you want to receive notifications.</p> <p>If you specify <code>high</code> or <code>all</code>, at least one of the following parameters must be <code>true</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <p>If you specify <code>none</code>, any of the following parameters that you specify in your request must be <code>false</code>:</p> <ul> <li> <p> <code>notifyOnAddCorrespondenceToCase</code> </p> </li> <li> <p> <code>notifyOnCreateOrReopenCase</code> </p> </li> <li> <p> <code>notifyOnResolveCase</code> </p> </li> </ul> <note> <p>If you don't specify these parameters in your request, the Amazon Web Services Support App uses the current values by default.</p> </note>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyOnCaseSeverity" })
  notifyOnCaseSeverity?: UpdateSlackChannelConfigurationRequestBodyNotifyOnCaseSeverityEnum;

  /**
   * Whether you want to get notified when a support case is created or reopened.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyOnCreateOrReopenCase" })
  notifyOnCreateOrReopenCase?: boolean;

  /**
   * Whether you want to get notified when a support case is resolved.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "notifyOnResolveCase" })
  notifyOnResolveCase?: boolean;

  /**
   * The team ID in Slack. This ID uniquely identifies a Slack workspace, such as <code>T012ABCDEFG</code>.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "teamId" })
  teamId: string;
}

export class UpdateSlackChannelConfigurationRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: UpdateSlackChannelConfigurationRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;
}

export class UpdateSlackChannelConfigurationResponse extends SpeakeasyBase {
  /**
   * AccessDeniedException
   */
  @SpeakeasyMetadata()
  accessDeniedException?: any;

  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * ResourceNotFoundException
   */
  @SpeakeasyMetadata()
  resourceNotFoundException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  updateSlackChannelConfigurationResult?: shared.UpdateSlackChannelConfigurationResult;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
