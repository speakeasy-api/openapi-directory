// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// NotificationNotificationTypeEnum - Type of the notification.
type NotificationNotificationTypeEnum string

const (
	NotificationNotificationTypeEnumUnknown                    NotificationNotificationTypeEnum = "unknown"
	NotificationNotificationTypeEnumTestNotification           NotificationNotificationTypeEnum = "testNotification"
	NotificationNotificationTypeEnumProductApproval            NotificationNotificationTypeEnum = "productApproval"
	NotificationNotificationTypeEnumInstallFailure             NotificationNotificationTypeEnum = "installFailure"
	NotificationNotificationTypeEnumAppUpdate                  NotificationNotificationTypeEnum = "appUpdate"
	NotificationNotificationTypeEnumNewPermissions             NotificationNotificationTypeEnum = "newPermissions"
	NotificationNotificationTypeEnumAppRestricionsSchemaChange NotificationNotificationTypeEnum = "appRestricionsSchemaChange"
	NotificationNotificationTypeEnumProductAvailabilityChange  NotificationNotificationTypeEnum = "productAvailabilityChange"
	NotificationNotificationTypeEnumNewDevice                  NotificationNotificationTypeEnum = "newDevice"
	NotificationNotificationTypeEnumDeviceReportUpdate         NotificationNotificationTypeEnum = "deviceReportUpdate"
)

func (e *NotificationNotificationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "unknown":
		fallthrough
	case "testNotification":
		fallthrough
	case "productApproval":
		fallthrough
	case "installFailure":
		fallthrough
	case "appUpdate":
		fallthrough
	case "newPermissions":
		fallthrough
	case "appRestricionsSchemaChange":
		fallthrough
	case "productAvailabilityChange":
		fallthrough
	case "newDevice":
		fallthrough
	case "deviceReportUpdate":
		*e = NotificationNotificationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for NotificationNotificationTypeEnum: %s", s)
	}
}

// Notification - A notification of one event relating to an enterprise.
type Notification struct {
	// An event generated when a new app version is uploaded to Google Play and its app restrictions schema changed. To fetch the app restrictions schema for an app, use Products.getAppRestrictionsSchema on the EMM API.
	AppRestrictionsSchemaChangeEvent *AppRestrictionsSchemaChangeEvent `json:"appRestrictionsSchemaChangeEvent,omitempty"`
	// An event generated when a new version of an app is uploaded to Google Play. Notifications are sent for new public versions only: alpha, beta, or canary versions do not generate this event. To fetch up-to-date version history for an app, use Products.Get on the EMM API.
	AppUpdateEvent *AppUpdateEvent `json:"appUpdateEvent,omitempty"`
	// An event generated when an updated device report is available.
	DeviceReportUpdateEvent *DeviceReportUpdateEvent `json:"deviceReportUpdateEvent,omitempty"`
	// The ID of the enterprise for which the notification is sent. This will always be present.
	EnterpriseID *string `json:"enterpriseId,omitempty"`
	// An event generated when an app installation failed on a device
	InstallFailureEvent *InstallFailureEvent `json:"installFailureEvent,omitempty"`
	// An event generated when a new device is ready to be managed.
	NewDeviceEvent *NewDeviceEvent `json:"newDeviceEvent,omitempty"`
	// An event generated when new permissions are added to an app.
	NewPermissionsEvent *NewPermissionsEvent `json:"newPermissionsEvent,omitempty"`
	// Type of the notification.
	NotificationType *NotificationNotificationTypeEnum `json:"notificationType,omitempty"`
	// An event generated when a product's approval status is changed.
	ProductApprovalEvent *ProductApprovalEvent `json:"productApprovalEvent,omitempty"`
	// An event generated whenever a product's availability changes.
	ProductAvailabilityChangeEvent *ProductAvailabilityChangeEvent `json:"productAvailabilityChangeEvent,omitempty"`
	// The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.
	TimestampMillis *string `json:"timestampMillis,omitempty"`
}
