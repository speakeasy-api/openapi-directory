"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Conference:
    r"""API methods responsible for managing conference rooms"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def post_v0_1_conference_deaf_(self, request: shared.ConferenceDeafParameters, security: operations.PostV01ConferenceDeafSecurity) -> operations.PostV01ConferenceDeafResponse:
        r"""/v0.1/ConferenceDeaf/
        Blocks audio to one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceDeaf/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceDeafResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceDeafResponse])
                res.conference_deaf_response = out

        return res

    def post_v0_1_conference_hangup_(self, request: shared.ConferenceHangupParameters, security: operations.PostV01ConferenceHangupSecurity) -> operations.PostV01ConferenceHangupResponse:
        r"""/v0.1/ConferenceHangup/
        Kicks one or more conference members, without playing the kick sound
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceHangup/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceHangupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceHangupResponse])
                res.conference_hangup_response = out

        return res

    def post_v0_1_conference_kick_(self, request: shared.ConferenceKickParameters, security: operations.PostV01ConferenceKickSecurity) -> operations.PostV01ConferenceKickResponse:
        r"""/v0.1/ConferenceKick/
        Kicks one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceKick/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceKickResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceKickResponse])
                res.conference_kick_response = out

        return res

    def post_v0_1_conference_list_(self, request: shared.ConferenceListParameters, security: operations.PostV01ConferenceListSecurity) -> operations.PostV01ConferenceListResponse:
        r"""/v0.1/ConferenceList/
        Returns a list of all established conferences
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceList/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceListResponse])
                res.conference_list_response = out

        return res

    def post_v0_1_conference_list_members_(self, request: shared.ConferenceListMembersParameters, security: operations.PostV01ConferenceListMembersSecurity) -> operations.PostV01ConferenceListMembersResponse:
        r"""/v0.1/ConferenceListMembers/
        Retrieves the member list for a given conference
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceListMembers/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceListMembersResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceListMembersResponse])
                res.conference_list_members_response = out

        return res

    def post_v0_1_conference_mute_(self, request: shared.ConferenceMuteParameters, security: operations.PostV01ConferenceMuteSecurity) -> operations.PostV01ConferenceMuteResponse:
        r"""/v0.1/ConferenceMute/
        Blocks audio from one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceMute/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceMuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceMuteResponse])
                res.conference_mute_response = out

        return res

    def post_v0_1_conference_play_(self, request: shared.ConferencePlayParameters, security: operations.PostV01ConferencePlaySecurity) -> operations.PostV01ConferencePlayResponse:
        r"""/v0.1/ConferencePlay/
        Plays media to one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferencePlay/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferencePlayResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferencePlayResponse])
                res.conference_play_response = out

        return res

    def post_v0_1_conference_record_start_(self, request: shared.ConferenceRecordStartParameters, security: operations.PostV01ConferenceRecordStartSecurity) -> operations.PostV01ConferenceRecordStartResponse:
        r"""/v0.1/ConferenceRecordStart/
        Initiates a conference recording
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceRecordStart/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceRecordStartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceRecordStartResponse])
                res.conference_record_start_response = out

        return res

    def post_v0_1_conference_record_stop_(self, request: shared.ConferenceRecordStopParameters, security: operations.PostV01ConferenceRecordStopSecurity) -> operations.PostV01ConferenceRecordStopResponse:
        r"""/v0.1/ConferenceRecordStop/
        Stops a conference recording
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceRecordStop/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceRecordStopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceRecordStopResponse])
                res.conference_record_stop_response = out

        return res

    def post_v0_1_conference_speak_(self, request: shared.ConferenceSpeakParameters, security: operations.PostV01ConferenceSpeakSecurity) -> operations.PostV01ConferenceSpeakResponse:
        r"""/v0.1/ConferenceSpeak/
        Plays synthesized speech into a conference
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceSpeak/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceSpeakResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceSpeakResponse])
                res.conference_speak_response = out

        return res

    def post_v0_1_conference_undeaf_(self, request: shared.ConferenceUndeafParameters, security: operations.PostV01ConferenceUndeafSecurity) -> operations.PostV01ConferenceUndeafResponse:
        r"""/v0.1/ConferenceUndeaf/
        Restores audio to one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceUndeaf/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceUndeafResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceUndeafResponse])
                res.conference_undeaf_response = out

        return res

    def post_v0_1_conference_unmute_(self, request: shared.ConferenceUnmuteParameters, security: operations.PostV01ConferenceUnmuteSecurity) -> operations.PostV01ConferenceUnmuteResponse:
        r"""/v0.1/ConferenceUnmute/
        Restores audio from one or more conference members
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v0.1/ConferenceUnmute/'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostV01ConferenceUnmuteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ConferenceUnmuteResponse])
                res.conference_unmute_response = out

        return res

    