/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export enum GetLegalSearchAoCategoryEnum {
  F = "F",
  V = "V",
  D = "D",
  R = "R",
  W = "W",
  C = "C",
  S = "S",
}

export enum GetLegalSearchAoRequestorTypeEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
  Seven = "7",
  Eight = "8",
  Nine = "9",
  Ten = "10",
  Eleven = "11",
  Twelve = "12",
  Thirteen = "13",
  Fourteen = "14",
  Fifteen = "15",
  Sixteen = "16",
}

export enum GetLegalSearchCaseDocCategoryIDEnum {
  One = "1",
  Two = "2",
  Three = "3",
  Four = "4",
  Five = "5",
  Six = "6",
}

export class GetLegalSearchRequest extends SpeakeasyBase {
  /**
   *
   * @remarks
   * Admin fine committee ID
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_committee_id",
  })
  afCommitteeId?: string;

  /**
   *
   * @remarks
   * Final Determination fine amount
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_fd_fine_amount",
  })
  afFdFineAmount?: number;

  /**
   *
   * @remarks
   * The latest Final Determination date
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_max_fd_date;dateTimeFormat=YYYY-MM-DD",
  })
  afMaxFdDate?: Date;

  /**
   *
   * @remarks
   * The latest Reason to Believe date
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_max_rtb_date;dateTimeFormat=YYYY-MM-DD",
  })
  afMaxRtbDate?: Date;

  /**
   *
   * @remarks
   * The earliest Final Determination date
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_min_fd_date;dateTimeFormat=YYYY-MM-DD",
  })
  afMinFdDate?: Date;

  /**
   *
   * @remarks
   * The earliest Reason to Believe date
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_min_rtb_date;dateTimeFormat=YYYY-MM-DD",
  })
  afMinRtbDate?: Date;

  /**
   *
   * @remarks
   * Admin fine committee name
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_name",
  })
  afName?: string[];

  /**
   *
   * @remarks
   * Admin fine report year
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_report_year",
  })
  afReportYear?: string;

  /**
   *
   * @remarks
   * Reason to Believe fine amount
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=af_rtb_fine_amount",
  })
  afRtbFineAmount?: number;

  /**
   *
   * @remarks
   * Category of the document
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_category",
  })
  aoCategory?: GetLegalSearchAoCategoryEnum[];

  /**
   *
   * @remarks
   * Require all citations to be in document (default behavior is any)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_citation_require_all",
  })
  aoCitationRequireAll?: boolean;

  /**
   *
   * @remarks
   * Name of commenter or representative
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_entity_name",
  })
  aoEntityName?: string[];

  /**
   *
   * @remarks
   * AO is pending
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_is_pending",
  })
  aoIsPending?: boolean;

  /**
   *
   * @remarks
   * Latest issue date of advisory opinion
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_max_issue_date;dateTimeFormat=YYYY-MM-DD",
  })
  aoMaxIssueDate?: Date;

  /**
   *
   * @remarks
   * Latest request date of advisory opinion
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_max_request_date;dateTimeFormat=YYYY-MM-DD",
  })
  aoMaxRequestDate?: Date;

  /**
   *
   * @remarks
   * Earliest issue date of advisory opinion
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_min_issue_date;dateTimeFormat=YYYY-MM-DD",
  })
  aoMinIssueDate?: Date;

  /**
   *
   * @remarks
   * Earliest request date of advisory opinion
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_min_request_date;dateTimeFormat=YYYY-MM-DD",
  })
  aoMinRequestDate?: Date;

  /**
   *
   * @remarks
   * Force advisory opinion name
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_name",
  })
  aoName?: string[];

  /**
   *
   * @remarks
   * Force advisory opinion number
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=ao_no" })
  aoNo?: string[];

  /**
   *
   * @remarks
   * Regulatory citations
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_regulatory_citation",
  })
  aoRegulatoryCitation?: string[];

  /**
   *
   * @remarks
   * The requestor of the advisory opinion
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_requestor",
  })
  aoRequestor?: string;

  /**
   *
   * @remarks
   * Code of the advisory opinion requestor type.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_requestor_type",
  })
  aoRequestorType?: GetLegalSearchAoRequestorTypeEnum[];

  /**
   *
   * @remarks
   * Status of AO (pending, withdrawn, or final)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_status",
  })
  aoStatus?: string;

  /**
   *
   * @remarks
   * Statutory citations
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ao_statutory_citation",
  })
  aoStatutoryCitation?: string[];

  /**
   *
   * @remarks
   * API key for https://api.data.gov. Get one at https://api.data.gov/signup.
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=api_key",
  })
  apiKey: string;

  /**
   *
   * @remarks
   * Require all citations to be in document (default behavior is any)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_citation_require_all",
  })
  caseCitationRequireAll?: boolean;

  /**
   *
   * @remarks
   * Cases dispositions
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_dispositions",
  })
  caseDispositions?: string[];

  /**
   * Select one or more case_doc_category_id to filter by corresponding CASE_DOCUMENT_CATEGORY:
   *
   * @remarks
   *         - 1 - Conciliation Agreements
   *         - 2 - Complaint, Responses, Designation of Counsel and Extensions of Timee
   *         - 3 - General Counsel Reports, Briefs, Notifications and Responses
   *         - 4 - Certifications
   *         - 5 - Civil Penalties, Disgorgements and Other Payments
   *         - 6 - Statements of Reasons
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_doc_category_id",
  })
  caseDocCategoryId?: GetLegalSearchCaseDocCategoryIDEnum[];

  /**
   *
   * @remarks
   * Cases election cycles
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_election_cycles",
  })
  caseElectionCycles?: number;

  /**
   *
   * @remarks
   * The latest date closed of case
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_max_close_date;dateTimeFormat=YYYY-MM-DD",
  })
  caseMaxCloseDate?: Date;

  /**
   *
   * @remarks
   * The latest date opened of case
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_max_open_date;dateTimeFormat=YYYY-MM-DD",
  })
  caseMaxOpenDate?: Date;

  /**
   *
   * @remarks
   * The earliest date closed of case
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_min_close_date;dateTimeFormat=YYYY-MM-DD",
  })
  caseMinCloseDate?: Date;

  /**
   *
   * @remarks
   * The earliest date opened of case
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_min_open_date;dateTimeFormat=YYYY-MM-DD",
  })
  caseMinOpenDate?: Date;

  /**
   *
   * @remarks
   * Enforcement matter case number
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_no",
  })
  caseNo?: string[];

  /**
   *
   * @remarks
   * Regulatory citations
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_regulatory_citation",
  })
  caseRegulatoryCitation?: string[];

  /**
   *
   * @remarks
   * Cases respondents
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_respondents",
  })
  caseRespondents?: string;

  /**
   *
   * @remarks
   * Statutory citations
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=case_statutory_citation",
  })
  caseStatutoryCitation?: string[];

  /**
   *
   * @remarks
   * Get results starting from this index
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=from_hit",
  })
  fromHit?: number;

  /**
   *
   * @remarks
   * Number of results to return (max 10)
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=hits_returned",
  })
  hitsReturned?: number;

  /**
   *
   * @remarks
   * Type of MUR : current or archived
   *
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=mur_type",
  })
  murType?: string;

  /**
   *
   * @remarks
   * Text to search legal documents for
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=q" })
  q?: string;

  /**
   *
   * @remarks
   * Provide a field to sort by. Use `-` for descending order. ex: `-case_no`
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: string;

  /**
   * Legal Document type to refine search by
   *
   * @remarks
   *     - statutes
   *     - regulations
   *     - advisory_opinions
   *     - murs
   *     - admin_fines
   *
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vote_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  voteDate?: Date;
}

export class GetLegalSearchDefaultApplicationJSONAdminFinesDocuments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  documentDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "document_id" })
  documentId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdminFines extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "challenge_outcome" })
  challengeOutcome?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "challenge_receipt_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  challengeReceiptDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "check_amount" })
  checkAmount?: number;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes,
  })
  @Expose({ name: "commission_votes" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes)
  commissionVotes?: GetLegalSearchDefaultApplicationJSONAdminFinesCommissionVotes[];

  @SpeakeasyMetadata()
  @Expose({ name: "committee_id" })
  committeeId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "doc_id" })
  docId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdminFinesDocuments,
  })
  @Expose({ name: "documents" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdminFinesDocuments)
  documents?: GetLegalSearchDefaultApplicationJSONAdminFinesDocuments[];

  @SpeakeasyMetadata()
  @Expose({ name: "final_determination_amount" })
  finalDeterminationAmount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "final_determination_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  finalDeterminationDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "petition_court_decision_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  petitionCourtDecisionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "petition_court_filing_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  petitionCourtFilingDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "reason_to_believe_action_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  reasonToBelieveActionDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "reason_to_believe_fine_amount" })
  reasonToBelieveFineAmount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "report_type" })
  reportType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "report_year" })
  reportYear?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "treasury_referral_amount" })
  treasuryReferralAmount?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "treasury_referral_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  treasuryReferralDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vote_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  voteDate?: Date;
}

export class GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdrsDispositions extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations,
  })
  @Expose({ name: "citations" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations)
  citations?: GetLegalSearchDefaultApplicationJSONAdrsDispositionsCitations[];

  @SpeakeasyMetadata()
  @Expose({ name: "disposition" })
  disposition?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "respondent" })
  respondent?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdrsDocuments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  documentDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "document_id" })
  documentId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdrsParticipants extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "citations" })
  citations?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdrs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "close_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  closeDate?: Date;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes,
  })
  @Expose({ name: "commission_votes" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes)
  commissionVotes?: GetLegalSearchDefaultApplicationJSONAdrsCommissionVotes[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdrsDispositions,
  })
  @Expose({ name: "dispositions" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrsDispositions)
  dispositions?: GetLegalSearchDefaultApplicationJSONAdrsDispositions[];

  @SpeakeasyMetadata()
  @Expose({ name: "doc_id" })
  docId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdrsDocuments,
  })
  @Expose({ name: "documents" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrsDocuments)
  documents?: GetLegalSearchDefaultApplicationJSONAdrsDocuments[];

  @SpeakeasyMetadata()
  @Expose({ name: "election_cycles" })
  electionCycles?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  openDate?: Date;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdrsParticipants,
  })
  @Expose({ name: "participants" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrsParticipants)
  participants?: GetLegalSearchDefaultApplicationJSONAdrsParticipants[];

  @SpeakeasyMetadata()
  @Expose({ name: "respondents" })
  respondents?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "subjects" })
  subjects?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  date?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_id" })
  documentId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "part" })
  part?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "section" })
  section?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: number;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "section" })
  section?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: number;
}

export class GetLegalSearchDefaultApplicationJSONAdvisoryOpinions extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations,
  })
  @Expose({ name: "ao_citations" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations)
  aoCitations?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAoCitations[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy,
  })
  @Expose({ name: "aos_cited_by" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy)
  aosCitedBy?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsAosCitedBy[];

  @SpeakeasyMetadata()
  @Expose({ name: "commenter_names" })
  commenterNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments,
  })
  @Expose({ name: "documents" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments)
  documents?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsDocuments[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities,
  })
  @Expose({ name: "entities" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities)
  entities?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsEntities[];

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "is_pending" })
  isPending?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "issue_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  issueDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata({
    elemType:
      GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations,
  })
  @Expose({ name: "regulatory_citations" })
  @Type(
    () =>
      GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations
  )
  regulatoryCitations?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsRegulatoryCitations[];

  @SpeakeasyMetadata()
  @Expose({ name: "representative_names" })
  representativeNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "request_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  requestDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "requestor_names" })
  requestorNames?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "requestor_types" })
  requestorTypes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  @SpeakeasyMetadata({
    elemType:
      GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations,
  })
  @Expose({ name: "statutory_citations" })
  @Type(
    () => GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations
  )
  statutoryCitations?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinionsStatutoryCitations[];

  @SpeakeasyMetadata()
  @Expose({ name: "summary" })
  summary?: string;
}

export class GetLegalSearchDefaultApplicationJSONMursCommissionVotes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "action" })
  action?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "vote_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  voteDate?: Date;
}

export class GetLegalSearchDefaultApplicationJSONMursDispositionsCitations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "text" })
  text?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONMursDispositions extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONMursDispositionsCitations,
  })
  @Expose({ name: "citations" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMursDispositionsCitations)
  citations?: GetLegalSearchDefaultApplicationJSONMursDispositionsCitations[];

  @SpeakeasyMetadata()
  @Expose({ name: "disposition" })
  disposition?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "penalty" })
  penalty?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "respondent" })
  respondent?: string;
}

export class GetLegalSearchDefaultApplicationJSONMursDocuments extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  documentDate?: Date;

  @SpeakeasyMetadata()
  @Expose({ name: "document_id" })
  documentId?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "length" })
  length?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export enum GetLegalSearchDefaultApplicationJSONMursMurTypeEnum {
  Current = "current",
  Archived = "archived",
}

export class GetLegalSearchDefaultApplicationJSONMursParticipants extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "citations" })
  citations?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "role" })
  role?: string;
}

export class GetLegalSearchDefaultApplicationJSONMurs extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "close_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  closeDate?: Date;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONMursCommissionVotes,
  })
  @Expose({ name: "commission_votes" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMursCommissionVotes)
  commissionVotes?: GetLegalSearchDefaultApplicationJSONMursCommissionVotes[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONMursDispositions,
  })
  @Expose({ name: "dispositions" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMursDispositions)
  dispositions?: GetLegalSearchDefaultApplicationJSONMursDispositions[];

  @SpeakeasyMetadata()
  @Expose({ name: "doc_id" })
  docId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONMursDocuments,
  })
  @Expose({ name: "documents" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMursDocuments)
  documents?: GetLegalSearchDefaultApplicationJSONMursDocuments[];

  @SpeakeasyMetadata()
  @Expose({ name: "election_cycles" })
  electionCycles?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "mur_type" })
  murType?: GetLegalSearchDefaultApplicationJSONMursMurTypeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "open_date" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  openDate?: Date;

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONMursParticipants,
  })
  @Expose({ name: "participants" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMursParticipants)
  participants?: GetLegalSearchDefaultApplicationJSONMursParticipants[];

  @SpeakeasyMetadata()
  @Expose({ name: "respondents" })
  respondents?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "subjects" })
  subjects?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONRegulations extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "doc_id" })
  docId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

export class GetLegalSearchDefaultApplicationJSONStatutes extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "chapter" })
  chapter?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "doc_id" })
  docId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "document_highlights" })
  documentHighlights?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "highlights" })
  highlights?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "no" })
  no?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * Legal search results
 */
export class GetLegalSearchDefaultApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdminFines,
  })
  @Expose({ name: "admin_fines" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdminFines)
  adminFines?: GetLegalSearchDefaultApplicationJSONAdminFines[];

  @SpeakeasyMetadata({ elemType: GetLegalSearchDefaultApplicationJSONAdrs })
  @Expose({ name: "adrs" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdrs)
  adrs?: GetLegalSearchDefaultApplicationJSONAdrs[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONAdvisoryOpinions,
  })
  @Expose({ name: "advisory_opinions" })
  @Type(() => GetLegalSearchDefaultApplicationJSONAdvisoryOpinions)
  advisoryOpinions?: GetLegalSearchDefaultApplicationJSONAdvisoryOpinions[];

  @SpeakeasyMetadata({ elemType: GetLegalSearchDefaultApplicationJSONMurs })
  @Expose({ name: "murs" })
  @Type(() => GetLegalSearchDefaultApplicationJSONMurs)
  murs?: GetLegalSearchDefaultApplicationJSONMurs[];

  @SpeakeasyMetadata({
    elemType: GetLegalSearchDefaultApplicationJSONRegulations,
  })
  @Expose({ name: "regulations" })
  @Type(() => GetLegalSearchDefaultApplicationJSONRegulations)
  regulations?: GetLegalSearchDefaultApplicationJSONRegulations[];

  @SpeakeasyMetadata({ elemType: GetLegalSearchDefaultApplicationJSONStatutes })
  @Expose({ name: "statutes" })
  @Type(() => GetLegalSearchDefaultApplicationJSONStatutes)
  statutes?: GetLegalSearchDefaultApplicationJSONStatutes[];

  /**
   * Total number of Admin Fines matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_admin_fines" })
  totalAdminFines?: number;

  /**
   * Total number of ADRs matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_adrs" })
  totalAdrs?: number;

  /**
   * Total number of Advisory Opinions matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_advisory_opinions" })
  totalAdvisoryOpinions?: number;

  /**
   * Total number of legal documents matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_all" })
  totalAll?: number;

  /**
   * Total number of MURs matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_murs" })
  totalMurs?: number;

  /**
   * Total number of Regulations matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_regulations" })
  totalRegulations?: number;

  /**
   * Total number of Statutes matching the search criteria
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_statutes" })
  totalStatutes?: number;
}

export class GetLegalSearchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Legal search results
   */
  @SpeakeasyMetadata()
  getLegalSearchDefaultApplicationJSONObject?: GetLegalSearchDefaultApplicationJSON;
}
