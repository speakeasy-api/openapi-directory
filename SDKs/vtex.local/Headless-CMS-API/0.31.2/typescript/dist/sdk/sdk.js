"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var pages_1 = require("./pages");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    "https://vtex.local",
    "https://{account}.myvtex.com",
    "https://{workspace}--{account}.myvtex.com",
];
/**
 *
 * @remarks
 * The VTEX Headless CMS is a no-code management system for storefront content.
 * That means you can store your content as structured data in a layer decoupled from the frontend and
 * use the VTEX Headless CMS to access and deliver your content to your storefront project.
 *
 * Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API
 * to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).
 *
 * **Servers**
 * - `https://{account}.myvtex.com/`
 * - `https://{workspace}--{account}.myvtex.com/`
 *
 * **Server variables**
 * - `accountName`: Name of your VTEX account.
 * - `workspace`: Name of your VTEX workspace.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        this._securityClient = this._defaultClient;
        this.pages = new pages_1.Pages(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
