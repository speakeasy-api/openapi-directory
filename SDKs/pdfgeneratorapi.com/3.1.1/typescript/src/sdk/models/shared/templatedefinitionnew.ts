/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Component } from "./component";
import { Expose, Type } from "class-transformer";

/**
 * Defines template page size
 */
export enum TemplateDefinitionNewLayoutFormatEnum {
  A4 = "A4",
  Letter = "letter",
  Custom = "custom",
}

/**
 * Page margins in units
 */
export class TemplateDefinitionNewLayoutMargins extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "bottom" })
  bottom?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "left" })
  left?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "right" })
  right?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "top" })
  top?: number;
}

/**
 * Page orientation
 */
export enum TemplateDefinitionNewLayoutOrientationEnum {
  Portrait = "portrait",
  Landscape = "landscape",
}

/**
 * Defines template page size
 */
export enum TemplateDefinitionNewLayoutRepeatLayoutFormatEnum {
  A4 = "A4",
  Letter = "letter",
  Custom = "custom",
}

/**
 * Defines page size if layout is repeated on the page e.g sheet labels
 */
export class TemplateDefinitionNewLayoutRepeatLayout extends SpeakeasyBase {
  /**
   * Defines template page size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: TemplateDefinitionNewLayoutRepeatLayoutFormatEnum;

  /**
   * Page height in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * Page width in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

/**
 * Page rotation in degrees
 */
export enum TemplateDefinitionNewLayoutRotaionEnum {
  Zero = "0",
  Ninety = "90",
  OneHundredAndEighty = "180",
  TwoHundredAndSeventy = "270",
}

/**
 * Measure unit
 */
export enum TemplateDefinitionNewLayoutUnitEnum {
  Cm = "cm",
  In = "in",
}

/**
 * Defines template layout (e.g page format, margins).
 */
export class TemplateDefinitionNewLayout extends SpeakeasyBase {
  /**
   * Defines how many pages or labels should be empty
   */
  @SpeakeasyMetadata()
  @Expose({ name: "emptyLabels" })
  emptyLabels?: number;

  /**
   * Defines template page size
   */
  @SpeakeasyMetadata()
  @Expose({ name: "format" })
  format?: TemplateDefinitionNewLayoutFormatEnum;

  /**
   * Page height in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  /**
   * Page margins in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "margins" })
  @Type(() => TemplateDefinitionNewLayoutMargins)
  margins?: TemplateDefinitionNewLayoutMargins;

  /**
   * Page orientation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "orientation" })
  orientation?: TemplateDefinitionNewLayoutOrientationEnum;

  /**
   * Defines page size if layout is repeated on the page e.g sheet labels
   */
  @SpeakeasyMetadata()
  @Expose({ name: "repeatLayout" })
  @Type(() => TemplateDefinitionNewLayoutRepeatLayout)
  repeatLayout?: TemplateDefinitionNewLayoutRepeatLayout;

  /**
   * Page rotation in degrees
   */
  @SpeakeasyMetadata()
  @Expose({ name: "rotaion" })
  rotaion?: TemplateDefinitionNewLayoutRotaionEnum;

  /**
   * Measure unit
   */
  @SpeakeasyMetadata()
  @Expose({ name: "unit" })
  unit?: TemplateDefinitionNewLayoutUnitEnum;

  /**
   * Page width in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

export class TemplateDefinitionNewPagesMargins extends SpeakeasyBase {
  /**
   * Page or label margin from bottom
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bottom" })
  bottom?: number;

  /**
   * Page or label margin from right
   */
  @SpeakeasyMetadata()
  @Expose({ name: "right" })
  right?: number;
}

export class TemplateDefinitionNewPages extends SpeakeasyBase {
  @SpeakeasyMetadata({ elemType: Component })
  @Expose({ name: "components" })
  @Type(() => Component)
  components?: Component[];

  /**
   * Page height in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "height" })
  height?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "margins" })
  @Type(() => TemplateDefinitionNewPagesMargins)
  margins?: TemplateDefinitionNewPagesMargins;

  /**
   * Page width in units
   */
  @SpeakeasyMetadata()
  @Expose({ name: "width" })
  width?: number;
}

/**
 * Template configuration
 */
export class TemplateDefinitionNew extends SpeakeasyBase {
  /**
   * Indicates if the template is a draft or published.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "isDraft" })
  isDraft?: boolean;

  /**
   * Defines template layout (e.g page format, margins).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "layout" })
  @Type(() => TemplateDefinitionNewLayout)
  layout?: TemplateDefinitionNewLayout;

  /**
   * Template name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Defines page or label size, margins and components on page or label
   */
  @SpeakeasyMetadata({ elemType: TemplateDefinitionNewPages })
  @Expose({ name: "pages" })
  @Type(() => TemplateDefinitionNewPages)
  pages?: TemplateDefinitionNewPages[];

  /**
   * A list of tags assigned to a template
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];
}
