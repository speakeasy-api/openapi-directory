/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PreviewUnderstandAssistant - Created
 */
public class PreviewUnderstandAssistant {
    /**
     * The unique ID of the Account that created this Assistant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;
    public PreviewUnderstandAssistant withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * Space-separated list of callback events that will trigger callbacks.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_events")
    public String callbackEvents;
    public PreviewUnderstandAssistant withCallbackEvents(String callbackEvents) {
        this.callbackEvents = callbackEvents;
        return this;
    }
    
    /**
     * A user-provided URL to send event callbacks to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    public String callbackUrl;
    public PreviewUnderstandAssistant withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * The date that this resource was created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;
    public PreviewUnderstandAssistant withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date that this resource was last updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;
    public PreviewUnderstandAssistant withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * A text description for the Assistant. It is non-unique and can up to 255 characters long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendly_name")
    public String friendlyName;
    public PreviewUnderstandAssistant withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * The unique ID (Sid) of the latest model build. Null if no model has been built.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_model_build_sid")
    public String latestModelBuildSid;
    public PreviewUnderstandAssistant withLatestModelBuildSid(String latestModelBuildSid) {
        this.latestModelBuildSid = latestModelBuildSid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public java.util.Map<String, Object> links;
    public PreviewUnderstandAssistant withLinks(java.util.Map<String, Object> links) {
        this.links = links;
        return this;
    }
    
    /**
     * A boolean that specifies whether queries should be logged for 30 days further training. If false, no queries will be stored, if true, queries will be stored for 30 days and deleted thereafter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("log_queries")
    public Boolean logQueries;
    public PreviewUnderstandAssistant withLogQueries(Boolean logQueries) {
        this.logQueries = logQueries;
        return this;
    }
    
    /**
     * A 34 character string that uniquely identifies this resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;
    public PreviewUnderstandAssistant withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * A user-provided string that uniquely identifies this resource as an alternative to the sid. You can use the unique name in the URL path. Unique up to 64 characters long.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_name")
    public String uniqueName;
    public PreviewUnderstandAssistant withUniqueName(String uniqueName) {
        this.uniqueName = uniqueName;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;
    public PreviewUnderstandAssistant withUrl(String url) {
        this.url = url;
        return this;
    }
    
}
