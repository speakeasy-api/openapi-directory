// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum - The resource type. Note that the <code>tgw-peering</code> resource type has been deprecated.
type AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum string

const (
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumVpc                  AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "vpc"
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumVpn                  AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "vpn"
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumDirectConnectGateway AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "direct-connect-gateway"
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumConnect              AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "connect"
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumPeering              AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "peering"
	AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnumTgwPeering           AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum = "tgw-peering"
)

func (e AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum) ToPointer() *AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum {
	return &e
}

func (e *AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vpc":
		fallthrough
	case "vpn":
		fallthrough
	case "direct-connect-gateway":
		fallthrough
	case "connect":
		fallthrough
	case "peering":
		fallthrough
	case "tgw-peering":
		*e = AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum: %v", v)
	}
}

// AssociateTransitGatewayRouteTableResultAssociationStateEnum - The state of the association.
type AssociateTransitGatewayRouteTableResultAssociationStateEnum string

const (
	AssociateTransitGatewayRouteTableResultAssociationStateEnumAssociating    AssociateTransitGatewayRouteTableResultAssociationStateEnum = "associating"
	AssociateTransitGatewayRouteTableResultAssociationStateEnumAssociated     AssociateTransitGatewayRouteTableResultAssociationStateEnum = "associated"
	AssociateTransitGatewayRouteTableResultAssociationStateEnumDisassociating AssociateTransitGatewayRouteTableResultAssociationStateEnum = "disassociating"
	AssociateTransitGatewayRouteTableResultAssociationStateEnumDisassociated  AssociateTransitGatewayRouteTableResultAssociationStateEnum = "disassociated"
)

func (e AssociateTransitGatewayRouteTableResultAssociationStateEnum) ToPointer() *AssociateTransitGatewayRouteTableResultAssociationStateEnum {
	return &e
}

func (e *AssociateTransitGatewayRouteTableResultAssociationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "associating":
		fallthrough
	case "associated":
		fallthrough
	case "disassociating":
		fallthrough
	case "disassociated":
		*e = AssociateTransitGatewayRouteTableResultAssociationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AssociateTransitGatewayRouteTableResultAssociationStateEnum: %v", v)
	}
}

// AssociateTransitGatewayRouteTableResultAssociation - The ID of the association.
type AssociateTransitGatewayRouteTableResultAssociation struct {
	ResourceID                 *string
	ResourceType               *AssociateTransitGatewayRouteTableResultAssociationResourceTypeEnum
	State                      *AssociateTransitGatewayRouteTableResultAssociationStateEnum
	TransitGatewayAttachmentID *string
	TransitGatewayRouteTableID *string
}

// AssociateTransitGatewayRouteTableResult - Success
type AssociateTransitGatewayRouteTableResult struct {
	Association *AssociateTransitGatewayRouteTableResultAssociation
}
