/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { EnterpriseCrmFrontendsEventbusProtoEventParameters } from "./enterprisecrmfrontendseventbusprotoeventparameters";
import { GoogleCloudIntegrationsV1alphaIntegrationVersionInput } from "./googlecloudintegrationsv1alphaintegrationversion";
import { GoogleCloudIntegrationsV1alphaValueType } from "./googlecloudintegrationsv1alphavaluetype";
import { Expose, Transform, Type } from "class-transformer";

/**
 * The request for testing an integration.
 */
export class GoogleCloudIntegrationsV1alphaTestIntegrationsRequestInput extends SpeakeasyBase {
  /**
   * Required. This is used to identify the client on whose behalf the event will be executed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  /**
   * Optional. custom deadline of the rpc
   */
  @SpeakeasyMetadata()
  @Expose({ name: "deadlineSecondsTime" })
  deadlineSecondsTime?: string;

  /**
   * Optional. Input parameters used during integration execution.
   */
  @SpeakeasyMetadata({ elemType: GoogleCloudIntegrationsV1alphaValueType })
  @Expose({ name: "inputParameters" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, GoogleCloudIntegrationsV1alphaValueType> = {};
      for (const key in value) {
        obj[key] = objectToClass(
          value[key],
          GoogleCloudIntegrationsV1alphaValueType
        );
      }
      return obj;
    },
    { toClassOnly: true }
  )
  inputParameters?: Record<string, GoogleCloudIntegrationsV1alphaValueType>;

  /**
   * The integration version definition.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "integrationVersion" })
  @Type(() => GoogleCloudIntegrationsV1alphaIntegrationVersionInput)
  integrationVersion?: GoogleCloudIntegrationsV1alphaIntegrationVersionInput;

  /**
   * LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parameters" })
  @Type(() => EnterpriseCrmFrontendsEventbusProtoEventParameters)
  parameters?: EnterpriseCrmFrontendsEventbusProtoEventParameters;

  /**
   * Optional. Can be specified in the event request, otherwise false (default). If true, enables tasks with condition "test_mode = true". If false, disables tasks with condition "test_mode = true" if global test mode (set by platform) is also false {@link EventBusConfig}.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "testMode" })
  testMode?: boolean;

  /**
   * Required. The trigger id of the integration trigger config. If both trigger_id and client_id is present, the integration is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "triggerId" })
  triggerId?: string;
}
