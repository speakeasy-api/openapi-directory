"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Experiments:
    r"""Experiment Rest Controller"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_experiment_using_post(self, request: operations.CreateExperimentUsingPOSTRequest) -> operations.CreateExperimentUsingPOSTResponse:
        r"""createExperiment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateExperimentUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/experiments', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "experiment_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateExperimentUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExperimentModel])
                res.experiment_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def delete_experiment_using_delete(self, request: operations.DELETEExperimentUsingDELETERequest) -> operations.DELETEExperimentUsingDELETEResponse:
        r"""deleteExperiment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DELETEExperimentUsingDELETERequest, base_url, '/restv2/game/{apiKey}/manage/experiments/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DELETEExperimentUsingDELETEResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code in [200, 400]:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def do_action_experiment_using_post(self, request: operations.DoActionExperimentUsingPOSTRequest) -> operations.DoActionExperimentUsingPOSTResponse:
        r"""doActionExperiment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DoActionExperimentUsingPOSTRequest, base_url, '/restv2/game/{apiKey}/manage/experiments/{id}/{action}', request)
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DoActionExperimentUsingPOSTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExperimentModel])
                res.experiment_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_experiment_using_get(self, request: operations.GETExperimentUsingGETRequest) -> operations.GETExperimentUsingGETResponse:
        r"""getExperiment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETExperimentUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/experiments/{id}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETExperimentUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExperimentModel])
                res.experiment_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def get_experiments_using_get(self, request: operations.GETExperimentsUsingGETRequest) -> operations.GETExperimentsUsingGETResponse:
        r"""getExperiments"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GETExperimentsUsingGETRequest, base_url, '/restv2/game/{apiKey}/manage/experiments', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GETExperimentsUsingGETResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.ExperimentModel]])
                res.experiment_models = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    def update_experiment_using_put(self, request: operations.UpdateExperimentUsingPUTRequest) -> operations.UpdateExperimentUsingPUTResponse:
        r"""updateExperiment"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateExperimentUsingPUTRequest, base_url, '/restv2/game/{apiKey}/manage/experiments/{id}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "experiment_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateExperimentUsingPUTResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ExperimentModel])
                res.experiment_model = out
        elif http_res.status_code == 400:
            if utils.match_content_type(content_type, 'application/json;charset=UTF-8'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.MessageModel])
                res.message_model = out
        elif http_res.status_code in [403, 404]:
            pass

        return res

    