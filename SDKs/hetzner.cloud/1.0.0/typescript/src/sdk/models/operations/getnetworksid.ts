/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetNetworksIdRequest extends SpeakeasyBase {
  /**
   * ID of the network
   */
  @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=id" })
  id: number;
}

/**
 * Protection configuration for the Network
 */
export class GetNetworksId200ApplicationJSONNetworkProtection extends SpeakeasyBase {
  /**
   * If true, prevents the Network from being deleted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "delete" })
  delete: boolean;
}

export class GetNetworksId200ApplicationJSONNetworkRoutes extends SpeakeasyBase {
  /**
   * Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination" })
  destination: string;

  /**
   * Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gateway" })
  gateway: string;
}

/**
 * Type of Subnetwork
 */
export enum GetNetworksId200ApplicationJSONNetworkSubnetsTypeEnum {
  Cloud = "cloud",
  Server = "server",
  Vswitch = "vswitch",
}

export class GetNetworksId200ApplicationJSONNetworkSubnets extends SpeakeasyBase {
  /**
   * Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gateway" })
  gateway: string;

  /**
   * Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_range" })
  ipRange?: string;

  /**
   * Name of Network zone. The Location object contains the `network_zone` property each Location belongs to.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "network_zone" })
  networkZone: string;

  /**
   * Type of Subnetwork
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: GetNetworksId200ApplicationJSONNetworkSubnetsTypeEnum;
}

export class GetNetworksId200ApplicationJSONNetwork extends SpeakeasyBase {
  /**
   * Point in time when the Network was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * ID of the Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * IPv4 prefix of the whole Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ip_range" })
  ipRange: string;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, any>;

  /**
   * Array of IDs of Load Balancers attached to this Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "load_balancers" })
  loadBalancers?: number[];

  /**
   * Name of the Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Protection configuration for the Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "protection" })
  @Type(() => GetNetworksId200ApplicationJSONNetworkProtection)
  protection: GetNetworksId200ApplicationJSONNetworkProtection;

  /**
   * Array of routes set in this Network
   */
  @SpeakeasyMetadata({ elemType: GetNetworksId200ApplicationJSONNetworkRoutes })
  @Expose({ name: "routes" })
  @Type(() => GetNetworksId200ApplicationJSONNetworkRoutes)
  routes: GetNetworksId200ApplicationJSONNetworkRoutes[];

  /**
   * Array of IDs of Servers attached to this Network
   */
  @SpeakeasyMetadata()
  @Expose({ name: "servers" })
  servers: number[];

  /**
   * Array subnets allocated in this Network
   */
  @SpeakeasyMetadata({
    elemType: GetNetworksId200ApplicationJSONNetworkSubnets,
  })
  @Expose({ name: "subnets" })
  @Type(() => GetNetworksId200ApplicationJSONNetworkSubnets)
  subnets: GetNetworksId200ApplicationJSONNetworkSubnets[];
}

/**
 * The `network` key contains the network
 */
export class GetNetworksId200ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "network" })
  @Type(() => GetNetworksId200ApplicationJSONNetwork)
  network?: GetNetworksId200ApplicationJSONNetwork;
}

export class GetNetworksIdResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The `network` key contains the network
   */
  @SpeakeasyMetadata()
  getNetworksId200ApplicationJSONObject?: GetNetworksId200ApplicationJSON;
}
