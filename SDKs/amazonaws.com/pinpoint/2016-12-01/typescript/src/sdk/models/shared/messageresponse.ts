/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { EndpointMessageResult } from "./endpointmessageresult";
import { MessageResult } from "./messageresult";
import { Expose, Transform } from "class-transformer";

/**
 * Provides information about the results of a request to send a message to an endpoint address.
 */
export class MessageResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "ApplicationId" })
  applicationId: string;

  @SpeakeasyMetadata({ elemType: EndpointMessageResult })
  @Expose({ name: "EndpointResult" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, EndpointMessageResult> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], EndpointMessageResult);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  endpointResult?: Record<string, EndpointMessageResult>;

  @SpeakeasyMetadata()
  @Expose({ name: "RequestId" })
  requestId?: string;

  @SpeakeasyMetadata({ elemType: MessageResult })
  @Expose({ name: "Result" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, MessageResult> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], MessageResult);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  result?: Record<string, MessageResult>;
}
