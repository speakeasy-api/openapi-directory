/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;

/**
 * This is the public Twilio REST API.
 */
public class SDK {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://notify.twilio.com",
	};
    /**
	 * CREATE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BINDING_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * CREATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_CREDENTIAL_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * CREATE_NOTIFICATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_NOTIFICATION_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * DELETE_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_BINDING_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * DELETE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_CREDENTIAL_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * FETCH_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BINDING_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * FETCH_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_CREDENTIAL_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * LIST_BINDING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BINDING_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * LIST_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_CREDENTIAL_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * UPDATE_CREDENTIAL_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_CREDENTIAL_SERVERS = {
        "https://notify.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://notify.twilio.com",
    };
	
  		

	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	
	private String _serverUrl;
	private String _language = "java";
	private String _sdkVersion = "0.0.1";
	private String _genVersion = "internal";
	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private HTTPClient client;
		
		private String serverUrl;
		private java.util.Map<String, String> params = new java.util.HashMap<String, String>();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.client = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.serverUrl = serverUrl;
			this.params = params;
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public SDK build() throws Exception {
			return new SDK(this.client, this.serverUrl, this.params);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private SDK(HTTPClient client, String serverUrl, java.util.Map<String, String> params) throws Exception {
		this._defaultClient = client;
		
		if (this._defaultClient == null) {
			this._defaultClient = new SpeakeasyHTTPClient();
		}
		
		if (this._securityClient == null) {
			this._securityClient = this._defaultClient;
		}

		if (serverUrl != null && !serverUrl.isBlank()) {
			this._serverUrl = org.openapis.openapi.utils.Utils.templateUrl(serverUrl, params);
		}
		
		if (this._serverUrl == null) {
			this._serverUrl = SERVERS[0];
		}

		if (this._serverUrl.endsWith("/")) {
            this._serverUrl = this._serverUrl.substring(0, this._serverUrl.length() - 1);
        }

		
	}

    public org.openapis.openapi.models.operations.CreateBindingResponse createBinding(org.openapis.openapi.models.operations.CreateBindingRequest request, org.openapis.openapi.models.operations.CreateBindingSecurity security) throws Exception {
        return this.createBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateBindingResponse createBinding(org.openapis.openapi.models.operations.CreateBindingRequest request, org.openapis.openapi.models.operations.CreateBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateBindingRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Bindings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateBindingResponse res = new org.openapis.openapi.models.operations.CreateBindingResponse(contentType, httpRes.statusCode()) {{
            notifyV1ServiceBinding = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1ServiceBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1ServiceBinding.class);
                res.notifyV1ServiceBinding = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security) throws Exception {
        return this.createCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateCredentialResponse createCredential(org.openapis.openapi.models.operations.CreateCredentialCreateCredentialRequest request, org.openapis.openapi.models.operations.CreateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateCredentialResponse res = new org.openapis.openapi.models.operations.CreateCredentialResponse(contentType, httpRes.statusCode()) {{
            notifyV1Credential = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Credential.class);
                res.notifyV1Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateNotificationResponse createNotification(org.openapis.openapi.models.operations.CreateNotificationRequest request, org.openapis.openapi.models.operations.CreateNotificationSecurity security) throws Exception {
        return this.createNotification(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateNotificationResponse createNotification(org.openapis.openapi.models.operations.CreateNotificationRequest request, org.openapis.openapi.models.operations.CreateNotificationSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_NOTIFICATION_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateNotificationRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Notifications", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateNotificationResponse res = new org.openapis.openapi.models.operations.CreateNotificationResponse(contentType, httpRes.statusCode()) {{
            notifyV1ServiceNotification = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1ServiceNotification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1ServiceNotification.class);
                res.notifyV1ServiceNotification = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    public org.openapis.openapi.models.operations.CreateServiceResponse createService(org.openapis.openapi.models.operations.CreateServiceCreateServiceRequest request, org.openapis.openapi.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = CREATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateServiceResponse res = new org.openapis.openapi.models.operations.CreateServiceResponse(contentType, httpRes.statusCode()) {{
            notifyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Service.class);
                res.notifyV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteBindingResponse deleteBinding(org.openapis.openapi.models.operations.DeleteBindingRequest request, org.openapis.openapi.models.operations.DeleteBindingSecurity security) throws Exception {
        return this.deleteBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteBindingResponse deleteBinding(org.openapis.openapi.models.operations.DeleteBindingRequest request, org.openapis.openapi.models.operations.DeleteBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteBindingRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteBindingResponse res = new org.openapis.openapi.models.operations.DeleteBindingResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security) throws Exception {
        return this.deleteCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteCredentialResponse deleteCredential(org.openapis.openapi.models.operations.DeleteCredentialRequest request, org.openapis.openapi.models.operations.DeleteCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteCredentialResponse res = new org.openapis.openapi.models.operations.DeleteCredentialResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    public org.openapis.openapi.models.operations.DeleteServiceResponse deleteService(org.openapis.openapi.models.operations.DeleteServiceRequest request, org.openapis.openapi.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = DELETE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteServiceResponse res = new org.openapis.openapi.models.operations.DeleteServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchBindingResponse fetchBinding(org.openapis.openapi.models.operations.FetchBindingRequest request, org.openapis.openapi.models.operations.FetchBindingSecurity security) throws Exception {
        return this.fetchBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchBindingResponse fetchBinding(org.openapis.openapi.models.operations.FetchBindingRequest request, org.openapis.openapi.models.operations.FetchBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchBindingRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Bindings/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchBindingResponse res = new org.openapis.openapi.models.operations.FetchBindingResponse(contentType, httpRes.statusCode()) {{
            notifyV1ServiceBinding = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1ServiceBinding out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1ServiceBinding.class);
                res.notifyV1ServiceBinding = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security) throws Exception {
        return this.fetchCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchCredentialResponse fetchCredential(org.openapis.openapi.models.operations.FetchCredentialRequest request, org.openapis.openapi.models.operations.FetchCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchCredentialResponse res = new org.openapis.openapi.models.operations.FetchCredentialResponse(contentType, httpRes.statusCode()) {{
            notifyV1Credential = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Credential.class);
                res.notifyV1Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    public org.openapis.openapi.models.operations.FetchServiceResponse fetchService(org.openapis.openapi.models.operations.FetchServiceRequest request, org.openapis.openapi.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = FETCH_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.FetchServiceResponse res = new org.openapis.openapi.models.operations.FetchServiceResponse(contentType, httpRes.statusCode()) {{
            notifyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Service.class);
                res.notifyV1Service = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListBindingResponse listBinding(org.openapis.openapi.models.operations.ListBindingRequest request, org.openapis.openapi.models.operations.ListBindingSecurity security) throws Exception {
        return this.listBinding(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListBindingResponse listBinding(org.openapis.openapi.models.operations.ListBindingRequest request, org.openapis.openapi.models.operations.ListBindingSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_BINDING_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ListBindingRequest.class, baseUrl, "/v1/Services/{ServiceSid}/Bindings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListBindingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListBindingResponse res = new org.openapis.openapi.models.operations.ListBindingResponse(contentType, httpRes.statusCode()) {{
            listBindingResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListBindingListBindingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListBindingListBindingResponse.class);
                res.listBindingResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security) throws Exception {
        return this.listCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListCredentialResponse listCredential(org.openapis.openapi.models.operations.ListCredentialRequest request, org.openapis.openapi.models.operations.ListCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Credentials");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListCredentialRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListCredentialResponse res = new org.openapis.openapi.models.operations.ListCredentialResponse(contentType, httpRes.statusCode()) {{
            listCredentialResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListCredentialListCredentialResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListCredentialListCredentialResponse.class);
                res.listCredentialResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    public org.openapis.openapi.models.operations.ListServiceResponse listService(org.openapis.openapi.models.operations.ListServiceRequest request, org.openapis.openapi.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = LIST_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ListServiceResponse res = new org.openapis.openapi.models.operations.ListServiceResponse(contentType, httpRes.statusCode()) {{
            listServiceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security) throws Exception {
        return this.updateCredential(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateCredentialResponse updateCredential(org.openapis.openapi.models.operations.UpdateCredentialRequest request, org.openapis.openapi.models.operations.UpdateCredentialSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_CREDENTIAL_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateCredentialRequest.class, baseUrl, "/v1/Credentials/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateCredentialResponse res = new org.openapis.openapi.models.operations.UpdateCredentialResponse(contentType, httpRes.statusCode()) {{
            notifyV1Credential = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Credential out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Credential.class);
                res.notifyV1Credential = out;
            }
        }

        return res;
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    public org.openapis.openapi.models.operations.UpdateServiceResponse updateService(org.openapis.openapi.models.operations.UpdateServiceRequest request, org.openapis.openapi.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = UPDATE_SERVICE_SERVERS[0];
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateServiceResponse res = new org.openapis.openapi.models.operations.UpdateServiceResponse(contentType, httpRes.statusCode()) {{
            notifyV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.NotifyV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.NotifyV1Service.class);
                res.notifyV1Service = out;
            }
        }

        return res;
    }
}