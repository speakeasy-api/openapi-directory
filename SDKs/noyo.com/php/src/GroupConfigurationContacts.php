<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class GroupConfigurationContacts 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Create new Contact
     * 
     * Create a new contact for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateContactResponse
     */
	public function createContact(
        \OpenAPI\OpenAPI\Models\Operations\CreateContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/contacts', \OpenAPI\OpenAPI\Models\Operations\CreateContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactCreateRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Edit a Contact
     * 
     * Edit and existing contact for a group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\EditContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\EditContactResponse
     */
	public function editContact(
        \OpenAPI\OpenAPI\Models\Operations\EditContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\EditContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/contacts/{contact_id}/{version}', \OpenAPI\OpenAPI\Models\Operations\EditContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactEditRequest", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_defaultClient->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\EditContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get Contact
     * 
     * Returns the latest version of a single contact based on the ID provided.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
     */
	public function getContact(
        \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/contacts/{contact_id}', \OpenAPI\OpenAPI\Models\Operations\GetContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get all Group Contacts
     * 
     * Returns a list of all contacts for a given group
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse
     */
	public function getContactList(
        \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/groups/{group_id}/contacts', \OpenAPI\OpenAPI\Models\Operations\GetContactListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetContactListRequest::class, $request, null));
        
        $httpResponse = $this->_defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedContactResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PaginatedContactResult', 'json');
            }
        }

        return $response;
    }
}