<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Reservations 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Acknowledgment reservation
     * 
     * Acknowledges reservations made by reservation ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationResponse
     */
	public function acknowledgmentReservation(
        \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations/{reservationId}/acknowledge', \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\AcknowledgmentReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Cancel reservation
     * 
     * Cancels reservation by reservation ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CancelReservationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CancelReservationResponse
     */
	public function cancelReservation(
        \OpenAPI\OpenAPI\Models\Operations\CancelReservationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CancelReservationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations/{reservationId}/cancel', \OpenAPI\OpenAPI\Models\Operations\CancelReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CancelReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Confirm reservation
     * 
     * Confirms reservation by reservation ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationResponse
     */
	public function confirmReservation(
        \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations/{reservationId}/confirm', \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ConfirmReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Create reservation
     * 
     * Creates [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateReservationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateReservationResponse
     */
	public function createReservation(
        \OpenAPI\OpenAPI\Models\Operations\CreateReservationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateReservationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateReservationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createReservation200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\CreateReservation200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reservation by ID
     * 
     * Lists reservation's information by ID.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReservationByIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReservationByIdResponse
     */
	public function reservationById(
        \OpenAPI\OpenAPI\Models\Operations\ReservationByIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReservationByIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations/{reservationId}', \OpenAPI\OpenAPI\Models\Operations\ReservationByIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReservationByIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            $response->headers = $httpResponse->getHeaders();
            
            if (Utils\Utils::matchContentType($contentType, 'application/json; charset=utf-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->reservationById200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ReservationById200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List reservation by warehouse and SKU
     * 
     * Lists reservations in your store, by searching through warehouse and SKU.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuResponse
     */
	public function reservationbyWarehouseandSku(
        \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api/logistics/pvt/inventory/reservations/{warehouseId}/{skuId}', \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReservationbyWarehouseandSkuResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
}