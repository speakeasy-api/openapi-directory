/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LocationPolicyLocation } from "./locationpolicylocation";
import { Expose, Transform } from "class-transformer";

/**
 * Strategy for distributing VMs across zones in a region.
 */
export enum LocationPolicyTargetShapeEnum {
  Any = "ANY",
  AnySingleZone = "ANY_SINGLE_ZONE",
  Balanced = "BALANCED",
}

/**
 * Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region).
 */
export class LocationPolicy extends SpeakeasyBase {
  /**
   * Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a.
   */
  @SpeakeasyMetadata({ elemType: LocationPolicyLocation })
  @Expose({ name: "locations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LocationPolicyLocation> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LocationPolicyLocation);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  locations?: Record<string, LocationPolicyLocation>;

  /**
   * Strategy for distributing VMs across zones in a region.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "targetShape" })
  targetShape?: LocationPolicyTargetShapeEnum;
}
