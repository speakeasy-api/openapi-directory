// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetAccessPolicyXAmzTargetEnum
type GetAccessPolicyXAmzTargetEnum string

const (
	GetAccessPolicyXAmzTargetEnumOpenSearchServerlessGetAccessPolicy GetAccessPolicyXAmzTargetEnum = "OpenSearchServerless.GetAccessPolicy"
)

func (e GetAccessPolicyXAmzTargetEnum) ToPointer() *GetAccessPolicyXAmzTargetEnum {
	return &e
}

func (e *GetAccessPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OpenSearchServerless.GetAccessPolicy":
		*e = GetAccessPolicyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAccessPolicyXAmzTargetEnum: %v", v)
	}
}

type GetAccessPolicyRequest struct {
	GetAccessPolicyRequest shared.GetAccessPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm          *string                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256      *string                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential         *string                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate               *string                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken      *string                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature          *string                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders      *string                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget             GetAccessPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type GetAccessPolicyResponse struct {
	ContentType string
	// Success
	GetAccessPolicyResponse *shared.GetAccessPolicyResponse
	// InternalServerException
	InternalServerException interface{}
	StatusCode              int
	RawResponse             *http.Response
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// ValidationException
	ValidationException interface{}
}
