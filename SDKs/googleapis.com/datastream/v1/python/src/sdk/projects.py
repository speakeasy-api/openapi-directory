"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def datastream_projects_locations_connection_profiles_create(self, request: operations.DatastreamProjectsLocationsConnectionProfilesCreateRequest, security: operations.DatastreamProjectsLocationsConnectionProfilesCreateSecurity) -> operations.DatastreamProjectsLocationsConnectionProfilesCreateResponse:
        r"""Use this method to create a connection profile in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsConnectionProfilesCreateRequest, base_url, '/v1/{parent}/connectionProfiles', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "connection_profile_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsConnectionProfilesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsConnectionProfilesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datastream_projects_locations_connection_profiles_discover(self, request: operations.DatastreamProjectsLocationsConnectionProfilesDiscoverRequest, security: operations.DatastreamProjectsLocationsConnectionProfilesDiscoverSecurity) -> operations.DatastreamProjectsLocationsConnectionProfilesDiscoverResponse:
        r"""Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsConnectionProfilesDiscoverRequest, base_url, '/v1/{parent}/connectionProfiles:discover', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "discover_connection_profile_request_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsConnectionProfilesDiscoverRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsConnectionProfilesDiscoverResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DiscoverConnectionProfileResponse])
                res.discover_connection_profile_response = out

        return res

    def datastream_projects_locations_connection_profiles_list(self, request: operations.DatastreamProjectsLocationsConnectionProfilesListRequest, security: operations.DatastreamProjectsLocationsConnectionProfilesListSecurity) -> operations.DatastreamProjectsLocationsConnectionProfilesListResponse:
        r"""Use this method to list connection profiles created in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsConnectionProfilesListRequest, base_url, '/v1/{parent}/connectionProfiles', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsConnectionProfilesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsConnectionProfilesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListConnectionProfilesResponse])
                res.list_connection_profiles_response = out

        return res

    def datastream_projects_locations_fetch_static_ips(self, request: operations.DatastreamProjectsLocationsFetchStaticIpsRequest, security: operations.DatastreamProjectsLocationsFetchStaticIpsSecurity) -> operations.DatastreamProjectsLocationsFetchStaticIpsResponse:
        r"""The FetchStaticIps API call exposes the static IP addresses used by Datastream."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsFetchStaticIpsRequest, base_url, '/v1/{name}:fetchStaticIps', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsFetchStaticIpsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsFetchStaticIpsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.FetchStaticIpsResponse])
                res.fetch_static_ips_response = out

        return res

    def datastream_projects_locations_list(self, request: operations.DatastreamProjectsLocationsListRequest, security: operations.DatastreamProjectsLocationsListSecurity) -> operations.DatastreamProjectsLocationsListResponse:
        r"""Lists information about the supported locations for this service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsListRequest, base_url, '/v1/{name}/locations', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListLocationsResponse])
                res.list_locations_response = out

        return res

    def datastream_projects_locations_operations_cancel(self, request: operations.DatastreamProjectsLocationsOperationsCancelRequest, security: operations.DatastreamProjectsLocationsOperationsCancelSecurity) -> operations.DatastreamProjectsLocationsOperationsCancelResponse:
        r"""Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsOperationsCancelRequest, base_url, '/v1/{name}:cancel', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsOperationsCancelRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsOperationsCancelResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.empty = out

        return res

    def datastream_projects_locations_operations_list(self, request: operations.DatastreamProjectsLocationsOperationsListRequest, security: operations.DatastreamProjectsLocationsOperationsListSecurity) -> operations.DatastreamProjectsLocationsOperationsListResponse:
        r"""Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsOperationsListRequest, base_url, '/v1/{name}/operations', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsOperationsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsOperationsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListOperationsResponse])
                res.list_operations_response = out

        return res

    def datastream_projects_locations_private_connections_create(self, request: operations.DatastreamProjectsLocationsPrivateConnectionsCreateRequest, security: operations.DatastreamProjectsLocationsPrivateConnectionsCreateSecurity) -> operations.DatastreamProjectsLocationsPrivateConnectionsCreateResponse:
        r"""Use this method to create a private connectivity configuration."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsPrivateConnectionsCreateRequest, base_url, '/v1/{parent}/privateConnections', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "private_connection_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsPrivateConnectionsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsPrivateConnectionsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datastream_projects_locations_private_connections_list(self, request: operations.DatastreamProjectsLocationsPrivateConnectionsListRequest, security: operations.DatastreamProjectsLocationsPrivateConnectionsListSecurity) -> operations.DatastreamProjectsLocationsPrivateConnectionsListResponse:
        r"""Use this method to list private connectivity configurations in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsPrivateConnectionsListRequest, base_url, '/v1/{parent}/privateConnections', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsPrivateConnectionsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsPrivateConnectionsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListPrivateConnectionsResponse])
                res.list_private_connections_response = out

        return res

    def datastream_projects_locations_private_connections_routes_create(self, request: operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest, security: operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateSecurity) -> operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateResponse:
        r"""Use this method to create a route for a private connectivity configuration in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest, base_url, '/v1/{parent}/routes', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "route_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsPrivateConnectionsRoutesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datastream_projects_locations_private_connections_routes_list(self, request: operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest, security: operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListSecurity) -> operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListResponse:
        r"""Use this method to list routes created for a private connectivity configuration in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest, base_url, '/v1/{parent}/routes', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsPrivateConnectionsRoutesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListRoutesResponse])
                res.list_routes_response = out

        return res

    def datastream_projects_locations_streams_create(self, request: operations.DatastreamProjectsLocationsStreamsCreateRequest, security: operations.DatastreamProjectsLocationsStreamsCreateSecurity) -> operations.DatastreamProjectsLocationsStreamsCreateResponse:
        r"""Use this method to create a stream."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsCreateRequest, base_url, '/v1/{parent}/streams', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "stream_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datastream_projects_locations_streams_delete(self, request: operations.DatastreamProjectsLocationsStreamsDeleteRequest, security: operations.DatastreamProjectsLocationsStreamsDeleteSecurity) -> operations.DatastreamProjectsLocationsStreamsDeleteResponse:
        r"""Use this method to delete a stream."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsDeleteRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def datastream_projects_locations_streams_list(self, request: operations.DatastreamProjectsLocationsStreamsListRequest, security: operations.DatastreamProjectsLocationsStreamsListSecurity) -> operations.DatastreamProjectsLocationsStreamsListResponse:
        r"""Use this method to list streams in a project and location."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsListRequest, base_url, '/v1/{parent}/streams', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListStreamsResponse])
                res.list_streams_response = out

        return res

    def datastream_projects_locations_streams_objects_get(self, request: operations.DatastreamProjectsLocationsStreamsObjectsGetRequest, security: operations.DatastreamProjectsLocationsStreamsObjectsGetSecurity) -> operations.DatastreamProjectsLocationsStreamsObjectsGetResponse:
        r"""Use this method to get details about a stream object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsObjectsGetRequest, base_url, '/v1/{name}', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsObjectsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsObjectsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StreamObject])
                res.stream_object = out

        return res

    def datastream_projects_locations_streams_objects_list(self, request: operations.DatastreamProjectsLocationsStreamsObjectsListRequest, security: operations.DatastreamProjectsLocationsStreamsObjectsListSecurity) -> operations.DatastreamProjectsLocationsStreamsObjectsListResponse:
        r"""Use this method to list the objects of a specific stream."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsObjectsListRequest, base_url, '/v1/{parent}/objects', request)
        
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsObjectsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsObjectsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListStreamObjectsResponse])
                res.list_stream_objects_response = out

        return res

    def datastream_projects_locations_streams_objects_lookup(self, request: operations.DatastreamProjectsLocationsStreamsObjectsLookupRequest, security: operations.DatastreamProjectsLocationsStreamsObjectsLookupSecurity) -> operations.DatastreamProjectsLocationsStreamsObjectsLookupResponse:
        r"""Use this method to look up a stream object by its source object identifier."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsObjectsLookupRequest, base_url, '/v1/{parent}/objects:lookup', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lookup_stream_object_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsObjectsLookupRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsObjectsLookupResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StreamObject])
                res.stream_object = out

        return res

    def datastream_projects_locations_streams_objects_start_backfill_job(self, request: operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest, security: operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobSecurity) -> operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobResponse:
        r"""Use this method to start a backfill job for the specified stream object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest, base_url, '/v1/{object}:startBackfillJob', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsObjectsStartBackfillJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StartBackfillJobResponse])
                res.start_backfill_job_response = out

        return res

    def datastream_projects_locations_streams_objects_stop_backfill_job(self, request: operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest, security: operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobSecurity) -> operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobResponse:
        r"""Use this method to stop a backfill job for the specified stream object."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest, base_url, '/v1/{object}:stopBackfillJob', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsObjectsStopBackfillJobResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StopBackfillJobResponse])
                res.stop_backfill_job_response = out

        return res

    def datastream_projects_locations_streams_patch(self, request: operations.DatastreamProjectsLocationsStreamsPatchRequest, security: operations.DatastreamProjectsLocationsStreamsPatchSecurity) -> operations.DatastreamProjectsLocationsStreamsPatchResponse:
        r"""Use this method to update the configuration of a stream."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DatastreamProjectsLocationsStreamsPatchRequest, base_url, '/v1/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "stream_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DatastreamProjectsLocationsStreamsPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DatastreamProjectsLocationsStreamsPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    