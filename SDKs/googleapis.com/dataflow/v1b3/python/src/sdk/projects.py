"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Any, Optional

class Projects:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def dataflow_projects_delete_snapshots(self, request: operations.DataflowProjectsDeleteSnapshotsRequest, security: operations.DataflowProjectsDeleteSnapshotsSecurity) -> operations.DataflowProjectsDeleteSnapshotsResponse:
        r"""Deletes a snapshot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsDeleteSnapshotsRequest, base_url, '/v1b3/projects/{projectId}/snapshots', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsDeleteSnapshotsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsDeleteSnapshotsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_snapshot_response = out

        return res

    def dataflow_projects_jobs_aggregated(self, request: operations.DataflowProjectsJobsAggregatedRequest, security: operations.DataflowProjectsJobsAggregatedSecurity) -> operations.DataflowProjectsJobsAggregatedResponse:
        r"""List the jobs of a project across all regions."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsAggregatedRequest, base_url, '/v1b3/projects/{projectId}/jobs:aggregated', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsJobsAggregatedRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsAggregatedResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobsResponse])
                res.list_jobs_response = out

        return res

    def dataflow_projects_jobs_create(self, request: operations.DataflowProjectsJobsCreateRequest, security: operations.DataflowProjectsJobsCreateSecurity) -> operations.DataflowProjectsJobsCreateResponse:
        r"""Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsCreateRequest, base_url, '/v1b3/projects/{projectId}/jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_jobs_debug_get_config(self, request: operations.DataflowProjectsJobsDebugGetConfigRequest, security: operations.DataflowProjectsJobsDebugGetConfigSecurity) -> operations.DataflowProjectsJobsDebugGetConfigResponse:
        r"""Get encoded debug configuration for component. Not cacheable."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsDebugGetConfigRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_debug_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsDebugGetConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsDebugGetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDebugConfigResponse])
                res.get_debug_config_response = out

        return res

    def dataflow_projects_jobs_debug_send_capture(self, request: operations.DataflowProjectsJobsDebugSendCaptureRequest, security: operations.DataflowProjectsJobsDebugSendCaptureSecurity) -> operations.DataflowProjectsJobsDebugSendCaptureResponse:
        r"""Send encoded debug capture data for component."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsDebugSendCaptureRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "send_debug_capture_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsDebugSendCaptureRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsDebugSendCaptureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.send_debug_capture_response = out

        return res

    def dataflow_projects_jobs_get(self, request: operations.DataflowProjectsJobsGetRequest, security: operations.DataflowProjectsJobsGetSecurity) -> operations.DataflowProjectsJobsGetResponse:
        r"""Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsGetRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsJobsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_jobs_get_metrics(self, request: operations.DataflowProjectsJobsGetMetricsRequest, security: operations.DataflowProjectsJobsGetMetricsSecurity) -> operations.DataflowProjectsJobsGetMetricsResponse:
        r"""Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsGetMetricsRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/metrics', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsJobsGetMetricsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsGetMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobMetrics])
                res.job_metrics = out

        return res

    def dataflow_projects_jobs_list(self, request: operations.DataflowProjectsJobsListRequest, security: operations.DataflowProjectsJobsListSecurity) -> operations.DataflowProjectsJobsListResponse:
        r"""List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsListRequest, base_url, '/v1b3/projects/{projectId}/jobs', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobsResponse])
                res.list_jobs_response = out

        return res

    def dataflow_projects_jobs_messages_list(self, request: operations.DataflowProjectsJobsMessagesListRequest, security: operations.DataflowProjectsJobsMessagesListSecurity) -> operations.DataflowProjectsJobsMessagesListResponse:
        r"""Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsMessagesListRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/messages', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsJobsMessagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsMessagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobMessagesResponse])
                res.list_job_messages_response = out

        return res

    def dataflow_projects_jobs_snapshot(self, request: operations.DataflowProjectsJobsSnapshotRequest, security: operations.DataflowProjectsJobsSnapshotSecurity) -> operations.DataflowProjectsJobsSnapshotResponse:
        r"""Snapshot the state of a streaming job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsSnapshotRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}:snapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snapshot_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsSnapshotRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Snapshot])
                res.snapshot = out

        return res

    def dataflow_projects_jobs_update(self, request: operations.DataflowProjectsJobsUpdateRequest, security: operations.DataflowProjectsJobsUpdateSecurity) -> operations.DataflowProjectsJobsUpdateResponse:
        r"""Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsUpdateRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_jobs_work_items_lease(self, request: operations.DataflowProjectsJobsWorkItemsLeaseRequest, security: operations.DataflowProjectsJobsWorkItemsLeaseSecurity) -> operations.DataflowProjectsJobsWorkItemsLeaseResponse:
        r"""Leases a dataflow WorkItem to run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsWorkItemsLeaseRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lease_work_item_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsWorkItemsLeaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsWorkItemsLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LeaseWorkItemResponse])
                res.lease_work_item_response = out

        return res

    def dataflow_projects_jobs_work_items_report_status(self, request: operations.DataflowProjectsJobsWorkItemsReportStatusRequest, security: operations.DataflowProjectsJobsWorkItemsReportStatusSecurity) -> operations.DataflowProjectsJobsWorkItemsReportStatusResponse:
        r"""Reports the status of dataflow WorkItems leased by a worker."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsJobsWorkItemsReportStatusRequest, base_url, '/v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report_work_item_status_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsJobsWorkItemsReportStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsJobsWorkItemsReportStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportWorkItemStatusResponse])
                res.report_work_item_status_response = out

        return res

    def dataflow_projects_locations_flex_templates_launch(self, request: operations.DataflowProjectsLocationsFlexTemplatesLaunchRequest, security: operations.DataflowProjectsLocationsFlexTemplatesLaunchSecurity) -> operations.DataflowProjectsLocationsFlexTemplatesLaunchResponse:
        r"""Launch a job with a FlexTemplate."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsFlexTemplatesLaunchRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "launch_flex_template_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsFlexTemplatesLaunchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsFlexTemplatesLaunchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LaunchFlexTemplateResponse])
                res.launch_flex_template_response = out

        return res

    def dataflow_projects_locations_jobs_create(self, request: operations.DataflowProjectsLocationsJobsCreateRequest, security: operations.DataflowProjectsLocationsJobsCreateSecurity) -> operations.DataflowProjectsLocationsJobsCreateResponse:
        r"""Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`. Do not enter confidential information when you supply string values using the API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsCreateRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_locations_jobs_debug_get_config(self, request: operations.DataflowProjectsLocationsJobsDebugGetConfigRequest, security: operations.DataflowProjectsLocationsJobsDebugGetConfigSecurity) -> operations.DataflowProjectsLocationsJobsDebugGetConfigResponse:
        r"""Get encoded debug configuration for component. Not cacheable."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsDebugGetConfigRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_debug_config_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsDebugGetConfigRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsDebugGetConfigResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetDebugConfigResponse])
                res.get_debug_config_response = out

        return res

    def dataflow_projects_locations_jobs_debug_send_capture(self, request: operations.DataflowProjectsLocationsJobsDebugSendCaptureRequest, security: operations.DataflowProjectsLocationsJobsDebugSendCaptureSecurity) -> operations.DataflowProjectsLocationsJobsDebugSendCaptureResponse:
        r"""Send encoded debug capture data for component."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsDebugSendCaptureRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "send_debug_capture_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsDebugSendCaptureRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsDebugSendCaptureResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.send_debug_capture_response = out

        return res

    def dataflow_projects_locations_jobs_get(self, request: operations.DataflowProjectsLocationsJobsGetRequest, security: operations.DataflowProjectsLocationsJobsGetSecurity) -> operations.DataflowProjectsLocationsJobsGetResponse:
        r"""Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsGetRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_locations_jobs_get_execution_details(self, request: operations.DataflowProjectsLocationsJobsGetExecutionDetailsRequest, security: operations.DataflowProjectsLocationsJobsGetExecutionDetailsSecurity) -> operations.DataflowProjectsLocationsJobsGetExecutionDetailsResponse:
        r"""Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsGetExecutionDetailsRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsGetExecutionDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsGetExecutionDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobExecutionDetails])
                res.job_execution_details = out

        return res

    def dataflow_projects_locations_jobs_get_metrics(self, request: operations.DataflowProjectsLocationsJobsGetMetricsRequest, security: operations.DataflowProjectsLocationsJobsGetMetricsSecurity) -> operations.DataflowProjectsLocationsJobsGetMetricsResponse:
        r"""Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsGetMetricsRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsGetMetricsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsGetMetricsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.JobMetrics])
                res.job_metrics = out

        return res

    def dataflow_projects_locations_jobs_list(self, request: operations.DataflowProjectsLocationsJobsListRequest, security: operations.DataflowProjectsLocationsJobsListSecurity) -> operations.DataflowProjectsLocationsJobsListResponse:
        r"""List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsListRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobsResponse])
                res.list_jobs_response = out

        return res

    def dataflow_projects_locations_jobs_messages_list(self, request: operations.DataflowProjectsLocationsJobsMessagesListRequest, security: operations.DataflowProjectsLocationsJobsMessagesListSecurity) -> operations.DataflowProjectsLocationsJobsMessagesListResponse:
        r"""Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsMessagesListRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsMessagesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsMessagesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListJobMessagesResponse])
                res.list_job_messages_response = out

        return res

    def dataflow_projects_locations_jobs_snapshot(self, request: operations.DataflowProjectsLocationsJobsSnapshotRequest, security: operations.DataflowProjectsLocationsJobsSnapshotSecurity) -> operations.DataflowProjectsLocationsJobsSnapshotResponse:
        r"""Snapshot the state of a streaming job."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsSnapshotRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "snapshot_job_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsSnapshotRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsSnapshotResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Snapshot])
                res.snapshot = out

        return res

    def dataflow_projects_locations_jobs_snapshots_list(self, request: operations.DataflowProjectsLocationsJobsSnapshotsListRequest, security: operations.DataflowProjectsLocationsJobsSnapshotsListSecurity) -> operations.DataflowProjectsLocationsJobsSnapshotsListResponse:
        r"""Lists snapshots."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsSnapshotsListRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsSnapshotsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsSnapshotsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSnapshotsResponse])
                res.list_snapshots_response = out

        return res

    def dataflow_projects_locations_jobs_stages_get_execution_details(self, request: operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest, security: operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsSecurity) -> operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse:
        r"""Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsStagesGetExecutionDetailsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.StageExecutionDetails])
                res.stage_execution_details = out

        return res

    def dataflow_projects_locations_jobs_update(self, request: operations.DataflowProjectsLocationsJobsUpdateRequest, security: operations.DataflowProjectsLocationsJobsUpdateSecurity) -> operations.DataflowProjectsLocationsJobsUpdateResponse:
        r"""Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsUpdateRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "job_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_locations_jobs_work_items_lease(self, request: operations.DataflowProjectsLocationsJobsWorkItemsLeaseRequest, security: operations.DataflowProjectsLocationsJobsWorkItemsLeaseSecurity) -> operations.DataflowProjectsLocationsJobsWorkItemsLeaseResponse:
        r"""Leases a dataflow WorkItem to run."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsWorkItemsLeaseRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "lease_work_item_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsWorkItemsLeaseRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsWorkItemsLeaseResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LeaseWorkItemResponse])
                res.lease_work_item_response = out

        return res

    def dataflow_projects_locations_jobs_work_items_report_status(self, request: operations.DataflowProjectsLocationsJobsWorkItemsReportStatusRequest, security: operations.DataflowProjectsLocationsJobsWorkItemsReportStatusSecurity) -> operations.DataflowProjectsLocationsJobsWorkItemsReportStatusResponse:
        r"""Reports the status of dataflow WorkItems leased by a worker."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsJobsWorkItemsReportStatusRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "report_work_item_status_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsJobsWorkItemsReportStatusRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsJobsWorkItemsReportStatusResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ReportWorkItemStatusResponse])
                res.report_work_item_status_response = out

        return res

    def dataflow_projects_locations_snapshots_delete(self, request: operations.DataflowProjectsLocationsSnapshotsDeleteRequest, security: operations.DataflowProjectsLocationsSnapshotsDeleteSecurity) -> operations.DataflowProjectsLocationsSnapshotsDeleteResponse:
        r"""Deletes a snapshot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsSnapshotsDeleteRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsSnapshotsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsSnapshotsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[dict[str, Any]])
                res.delete_snapshot_response = out

        return res

    def dataflow_projects_locations_snapshots_get(self, request: operations.DataflowProjectsLocationsSnapshotsGetRequest, security: operations.DataflowProjectsLocationsSnapshotsGetSecurity) -> operations.DataflowProjectsLocationsSnapshotsGetResponse:
        r"""Gets information about a snapshot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsSnapshotsGetRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsSnapshotsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsSnapshotsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Snapshot])
                res.snapshot = out

        return res

    def dataflow_projects_locations_snapshots_list(self, request: operations.DataflowProjectsLocationsSnapshotsListRequest, security: operations.DataflowProjectsLocationsSnapshotsListSecurity) -> operations.DataflowProjectsLocationsSnapshotsListResponse:
        r"""Lists snapshots."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsSnapshotsListRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/snapshots', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsSnapshotsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsSnapshotsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSnapshotsResponse])
                res.list_snapshots_response = out

        return res

    def dataflow_projects_locations_templates_create(self, request: operations.DataflowProjectsLocationsTemplatesCreateRequest, security: operations.DataflowProjectsLocationsTemplatesCreateSecurity) -> operations.DataflowProjectsLocationsTemplatesCreateResponse:
        r"""Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsTemplatesCreateRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/templates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_job_from_template_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_locations_templates_get(self, request: operations.DataflowProjectsLocationsTemplatesGetRequest, security: operations.DataflowProjectsLocationsTemplatesGetSecurity) -> operations.DataflowProjectsLocationsTemplatesGetResponse:
        r"""Get the template associated with a template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsTemplatesGetRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/templates:get', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsTemplatesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsTemplatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTemplateResponse])
                res.get_template_response = out

        return res

    def dataflow_projects_locations_templates_launch(self, request: operations.DataflowProjectsLocationsTemplatesLaunchRequest, security: operations.DataflowProjectsLocationsTemplatesLaunchSecurity) -> operations.DataflowProjectsLocationsTemplatesLaunchResponse:
        r"""Launch a template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsTemplatesLaunchRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/templates:launch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "launch_template_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsTemplatesLaunchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsTemplatesLaunchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LaunchTemplateResponse])
                res.launch_template_response = out

        return res

    def dataflow_projects_locations_worker_messages(self, request: operations.DataflowProjectsLocationsWorkerMessagesRequest, security: operations.DataflowProjectsLocationsWorkerMessagesSecurity) -> operations.DataflowProjectsLocationsWorkerMessagesResponse:
        r"""Send a worker_message to the service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsLocationsWorkerMessagesRequest, base_url, '/v1b3/projects/{projectId}/locations/{location}/WorkerMessages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "send_worker_messages_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsLocationsWorkerMessagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsLocationsWorkerMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendWorkerMessagesResponse])
                res.send_worker_messages_response = out

        return res

    def dataflow_projects_snapshots_get(self, request: operations.DataflowProjectsSnapshotsGetRequest, security: operations.DataflowProjectsSnapshotsGetSecurity) -> operations.DataflowProjectsSnapshotsGetResponse:
        r"""Gets information about a snapshot."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsSnapshotsGetRequest, base_url, '/v1b3/projects/{projectId}/snapshots/{snapshotId}', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsSnapshotsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsSnapshotsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Snapshot])
                res.snapshot = out

        return res

    def dataflow_projects_snapshots_list(self, request: operations.DataflowProjectsSnapshotsListRequest, security: operations.DataflowProjectsSnapshotsListSecurity) -> operations.DataflowProjectsSnapshotsListResponse:
        r"""Lists snapshots."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsSnapshotsListRequest, base_url, '/v1b3/projects/{projectId}/snapshots', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsSnapshotsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsSnapshotsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListSnapshotsResponse])
                res.list_snapshots_response = out

        return res

    def dataflow_projects_templates_create(self, request: operations.DataflowProjectsTemplatesCreateRequest, security: operations.DataflowProjectsTemplatesCreateSecurity) -> operations.DataflowProjectsTemplatesCreateResponse:
        r"""Creates a Cloud Dataflow job from a template. Do not enter confidential information when you supply string values using the API."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsTemplatesCreateRequest, base_url, '/v1b3/projects/{projectId}/templates', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_job_from_template_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsTemplatesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsTemplatesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Job])
                res.job = out

        return res

    def dataflow_projects_templates_get(self, request: operations.DataflowProjectsTemplatesGetRequest, security: operations.DataflowProjectsTemplatesGetSecurity) -> operations.DataflowProjectsTemplatesGetResponse:
        r"""Get the template associated with a template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsTemplatesGetRequest, base_url, '/v1b3/projects/{projectId}/templates:get', request)
        
        query_params = utils.get_query_params(operations.DataflowProjectsTemplatesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsTemplatesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.GetTemplateResponse])
                res.get_template_response = out

        return res

    def dataflow_projects_templates_launch(self, request: operations.DataflowProjectsTemplatesLaunchRequest, security: operations.DataflowProjectsTemplatesLaunchSecurity) -> operations.DataflowProjectsTemplatesLaunchResponse:
        r"""Launch a template."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsTemplatesLaunchRequest, base_url, '/v1b3/projects/{projectId}/templates:launch', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "launch_template_parameters", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsTemplatesLaunchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsTemplatesLaunchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LaunchTemplateResponse])
                res.launch_template_response = out

        return res

    def dataflow_projects_worker_messages(self, request: operations.DataflowProjectsWorkerMessagesRequest, security: operations.DataflowProjectsWorkerMessagesSecurity) -> operations.DataflowProjectsWorkerMessagesResponse:
        r"""Send a worker_message to the service."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DataflowProjectsWorkerMessagesRequest, base_url, '/v1b3/projects/{projectId}/WorkerMessages', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "send_worker_messages_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.DataflowProjectsWorkerMessagesRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DataflowProjectsWorkerMessagesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.SendWorkerMessagesResponse])
                res.send_worker_messages_response = out

        return res

    