/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { ProtocolMapperRepresentation } from "./protocolmapperrepresentation";
import { ResourceServerRepresentation } from "./resourceserverrepresentation";
import { Expose, Type } from "class-transformer";

/**
 * success
 */
export class ClientRepresentation extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "access" })
  access?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "adminUrl" })
  adminUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "alwaysDisplayInConsole" })
  alwaysDisplayInConsole?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  attributes?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "authenticationFlowBindingOverrides" })
  authenticationFlowBindingOverrides?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "authorizationServicesEnabled" })
  authorizationServicesEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "authorizationSettings" })
  @Type(() => ResourceServerRepresentation)
  authorizationSettings?: ResourceServerRepresentation;

  @SpeakeasyMetadata()
  @Expose({ name: "baseUrl" })
  baseUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "bearerOnly" })
  bearerOnly?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "clientAuthenticatorType" })
  clientAuthenticatorType?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "clientId" })
  clientId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "consentRequired" })
  consentRequired?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "defaultClientScopes" })
  defaultClientScopes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "defaultRoles" })
  defaultRoles?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "directAccessGrantsEnabled" })
  directAccessGrantsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "frontchannelLogout" })
  frontchannelLogout?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "fullScopeAllowed" })
  fullScopeAllowed?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "implicitFlowEnabled" })
  implicitFlowEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "nodeReRegistrationTimeout" })
  nodeReRegistrationTimeout?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "notBefore" })
  notBefore?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "optionalClientScopes" })
  optionalClientScopes?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "protocol" })
  protocol?: string;

  @SpeakeasyMetadata({ elemType: ProtocolMapperRepresentation })
  @Expose({ name: "protocolMappers" })
  @Type(() => ProtocolMapperRepresentation)
  protocolMappers?: ProtocolMapperRepresentation[];

  @SpeakeasyMetadata()
  @Expose({ name: "publicClient" })
  publicClient?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "redirectUris" })
  redirectUris?: string[];

  @SpeakeasyMetadata()
  @Expose({ name: "registeredNodes" })
  registeredNodes?: Record<string, any>;

  @SpeakeasyMetadata()
  @Expose({ name: "registrationAccessToken" })
  registrationAccessToken?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "rootUrl" })
  rootUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "secret" })
  secret?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "serviceAccountsEnabled" })
  serviceAccountsEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "standardFlowEnabled" })
  standardFlowEnabled?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "surrogateAuthRequired" })
  surrogateAuthRequired?: boolean;

  @SpeakeasyMetadata()
  @Expose({ name: "webOrigins" })
  webOrigins?: string[];
}
