// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// POSTDescribePoliciesActionEnum
type POSTDescribePoliciesActionEnum string

const (
	POSTDescribePoliciesActionEnumDescribePolicies POSTDescribePoliciesActionEnum = "DescribePolicies"
)

func (e *POSTDescribePoliciesActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DescribePolicies":
		*e = POSTDescribePoliciesActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribePoliciesActionEnum: %s", s)
	}
}

// POSTDescribePoliciesVersionEnum
type POSTDescribePoliciesVersionEnum string

const (
	POSTDescribePoliciesVersionEnumTwoThousandAndEleven0101 POSTDescribePoliciesVersionEnum = "2011-01-01"
)

func (e *POSTDescribePoliciesVersionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "2011-01-01":
		*e = POSTDescribePoliciesVersionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for POSTDescribePoliciesVersionEnum: %s", s)
	}
}

type POSTDescribePoliciesQueryParams struct {
	Action POSTDescribePoliciesActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// Pagination limit
	MaxRecords *string `queryParam:"style=form,explode=true,name=MaxRecords"`
	// Pagination token
	NextToken *string                         `queryParam:"style=form,explode=true,name=NextToken"`
	Version   POSTDescribePoliciesVersionEnum `queryParam:"style=form,explode=true,name=Version"`
}

type POSTDescribePoliciesHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type POSTDescribePoliciesRequest struct {
	QueryParams POSTDescribePoliciesQueryParams
	Headers     POSTDescribePoliciesHeaders
	Request     []byte `request:"mediaType=text/xml"`
}

type POSTDescribePoliciesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
