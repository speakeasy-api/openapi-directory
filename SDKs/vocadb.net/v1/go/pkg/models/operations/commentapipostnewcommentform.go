// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CommentAPIPostNewCommentFormEntryTypeEnum - Entry type.
type CommentAPIPostNewCommentFormEntryTypeEnum string

const (
	CommentAPIPostNewCommentFormEntryTypeEnumUndefined          CommentAPIPostNewCommentFormEntryTypeEnum = "Undefined"
	CommentAPIPostNewCommentFormEntryTypeEnumAlbum              CommentAPIPostNewCommentFormEntryTypeEnum = "Album"
	CommentAPIPostNewCommentFormEntryTypeEnumArtist             CommentAPIPostNewCommentFormEntryTypeEnum = "Artist"
	CommentAPIPostNewCommentFormEntryTypeEnumDiscussionTopic    CommentAPIPostNewCommentFormEntryTypeEnum = "DiscussionTopic"
	CommentAPIPostNewCommentFormEntryTypeEnumPv                 CommentAPIPostNewCommentFormEntryTypeEnum = "PV"
	CommentAPIPostNewCommentFormEntryTypeEnumReleaseEvent       CommentAPIPostNewCommentFormEntryTypeEnum = "ReleaseEvent"
	CommentAPIPostNewCommentFormEntryTypeEnumReleaseEventSeries CommentAPIPostNewCommentFormEntryTypeEnum = "ReleaseEventSeries"
	CommentAPIPostNewCommentFormEntryTypeEnumSong               CommentAPIPostNewCommentFormEntryTypeEnum = "Song"
	CommentAPIPostNewCommentFormEntryTypeEnumSongList           CommentAPIPostNewCommentFormEntryTypeEnum = "SongList"
	CommentAPIPostNewCommentFormEntryTypeEnumTag                CommentAPIPostNewCommentFormEntryTypeEnum = "Tag"
	CommentAPIPostNewCommentFormEntryTypeEnumUser               CommentAPIPostNewCommentFormEntryTypeEnum = "User"
	CommentAPIPostNewCommentFormEntryTypeEnumVenue              CommentAPIPostNewCommentFormEntryTypeEnum = "Venue"
)

func (e *CommentAPIPostNewCommentFormEntryTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Undefined":
		fallthrough
	case "Album":
		fallthrough
	case "Artist":
		fallthrough
	case "DiscussionTopic":
		fallthrough
	case "PV":
		fallthrough
	case "ReleaseEvent":
		fallthrough
	case "ReleaseEventSeries":
		fallthrough
	case "Song":
		fallthrough
	case "SongList":
		fallthrough
	case "Tag":
		fallthrough
	case "User":
		fallthrough
	case "Venue":
		*e = CommentAPIPostNewCommentFormEntryTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CommentAPIPostNewCommentFormEntryTypeEnum: %s", s)
	}
}

type CommentAPIPostNewCommentFormPathParams struct {
	// Entry type.
	EntryType CommentAPIPostNewCommentFormEntryTypeEnum `pathParam:"style=simple,explode=false,name=entryType"`
}

type CommentAPIPostNewCommentFormRequest struct {
	PathParams CommentAPIPostNewCommentFormPathParams
	// Comment data. Message, entry and author must be specified. Author must match the logged in user.
	Request shared.CommentForAPIContract `request:"mediaType=application/x-www-form-urlencoded"`
}

type CommentAPIPostNewCommentFormResponse struct {
	Body []byte
	// OK
	CommentForAPIContract *shared.CommentForAPIContract
	ContentType           string
	StatusCode            int
	RawResponse           *http.Response
}
