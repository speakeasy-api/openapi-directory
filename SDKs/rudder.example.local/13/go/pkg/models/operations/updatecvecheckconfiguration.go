// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// UpdateCVECheckConfigurationRequestBody - CVE check config
type UpdateCVECheckConfigurationRequestBody struct {
	// Token used by to contact the API to check CVE
	APIKey *string `json:"apiKey,omitempty"`
	// Url used to check CVE
	URL *string `json:"url,omitempty"`
}

type UpdateCVECheckConfigurationRequest struct {
	Request *UpdateCVECheckConfigurationRequestBody `request:"mediaType=application/json"`
}

// UpdateCVECheckConfiguration200ApplicationJSONActionEnum - The id of the action
type UpdateCVECheckConfiguration200ApplicationJSONActionEnum string

const (
	UpdateCVECheckConfiguration200ApplicationJSONActionEnumUpdateCveCheckConfiguration UpdateCVECheckConfiguration200ApplicationJSONActionEnum = "updateCVECheckConfiguration"
)

func (e *UpdateCVECheckConfiguration200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "updateCVECheckConfiguration":
		*e = UpdateCVECheckConfiguration200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCVECheckConfiguration200ApplicationJSONActionEnum: %s", s)
	}
}

type UpdateCVECheckConfiguration200ApplicationJSONData struct {
	// Token used by to contact the API to check CVE
	APIKey *string `json:"apiKey,omitempty"`
	// Url used to check CVE
	URL *string `json:"url,omitempty"`
}

// UpdateCVECheckConfiguration200ApplicationJSONResultEnum - Result of the request
type UpdateCVECheckConfiguration200ApplicationJSONResultEnum string

const (
	UpdateCVECheckConfiguration200ApplicationJSONResultEnumSuccess UpdateCVECheckConfiguration200ApplicationJSONResultEnum = "success"
	UpdateCVECheckConfiguration200ApplicationJSONResultEnumError   UpdateCVECheckConfiguration200ApplicationJSONResultEnum = "error"
)

func (e *UpdateCVECheckConfiguration200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = UpdateCVECheckConfiguration200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCVECheckConfiguration200ApplicationJSONResultEnum: %s", s)
	}
}

// UpdateCVECheckConfiguration200ApplicationJSON - new CVE check config
type UpdateCVECheckConfiguration200ApplicationJSON struct {
	// The id of the action
	Action UpdateCVECheckConfiguration200ApplicationJSONActionEnum `json:"action"`
	Data   UpdateCVECheckConfiguration200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result UpdateCVECheckConfiguration200ApplicationJSONResultEnum `json:"result"`
}

type UpdateCVECheckConfigurationResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// new CVE check config
	UpdateCVECheckConfiguration200ApplicationJSONObject *UpdateCVECheckConfiguration200ApplicationJSON
}
