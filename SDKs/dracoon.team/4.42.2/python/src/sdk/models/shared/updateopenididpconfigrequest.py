"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class UpdateOpenIDIdpConfigRequestFlowEnum(str, Enum):
    r"""&#128640; Since v4.11.0
    
    Flow, which is used at authentication
    """
    AUTHORIZATION_CODE = 'authorization_code'
    HYBRID = 'hybrid'

class UpdateOpenIDIdpConfigRequestUserInfoSourceEnum(str, Enum):
    r"""&#128640; Since v4.23.0
    
    Source, which is used to get user information at the import or update of a user.
    """
    USER_INFO_ENDPOINT = 'user_info_endpoint'
    ID_TOKEN = 'id_token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateOpenIDIdpConfigRequest:
    r"""Request model for updating an OpenID Connect IDP configuration"""
    
    authorization_end_point_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('authorizationEndPointUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the authorization endpoint"""  
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""ID of the OpenID client"""  
    client_secret: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientSecret'), 'exclude': lambda f: f is None }})
    r"""Secret, which client uses at authentication."""  
    fallback_mapping_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fallbackMappingClaim'), 'exclude': lambda f: f is None }})
    r"""Name of the claim which is used for the user mapping fallback."""  
    flow: Optional[UpdateOpenIDIdpConfigRequestFlowEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('flow'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.11.0
    
    Flow, which is used at authentication
    """  
    issuer: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('issuer'), 'exclude': lambda f: f is None }})
    r"""Issuer identifier of the IDP
    
    The value is a case sensitive URL.
    """  
    jwks_end_point_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwksEndPointUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the JWKS endpoint"""  
    mapping_claim: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mappingClaim'), 'exclude': lambda f: f is None }})
    r"""Name of the claim which is used for the user mapping."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""Name of the IDP"""  
    pkce_challenge_method: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pkceChallengeMethod'), 'exclude': lambda f: f is None }})
    r"""PKCE code challenge method.
    
    cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
    """  
    pkce_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pkceEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines whether PKCE is enabled.
    
    cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
    """  
    redirect_uris: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('redirectUris'), 'exclude': lambda f: f is None }})
    r"""URIs, to which a user is redirected after authorization."""  
    reset_fallback_mapping_claim: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('resetFallbackMappingClaim'), 'exclude': lambda f: f is None }})
    r"""Set `true` to reset `fallbackMappingClaim`."""  
    scopes: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes'), 'exclude': lambda f: f is None }})
    r"""List of requested scopes
    
    Usually `openid` and the names of the requested claims.
    """  
    token_end_point_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokenEndPointUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the token endpoint"""  
    user_import_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userImportEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines if a DRACOON account is automatically created for a new user
    
    who successfully logs on with his / her AD / IDP account.
    """  
    user_import_group: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userImportGroup'), 'exclude': lambda f: f is None }})
    r"""User group that is assigned to users who are created by automatic import.
    
    Reset with `0`
    """  
    user_info_end_point_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInfoEndPointUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the user info endpoint"""  
    user_info_source: Optional[UpdateOpenIDIdpConfigRequestUserInfoSourceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userInfoSource'), 'exclude': lambda f: f is None }})
    r"""&#128640; Since v4.23.0
    
    Source, which is used to get user information at the import or update of a user.
    """  
    user_management_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userManagementUrl'), 'exclude': lambda f: f is None }})
    r"""URL of the user management UI.
    
    Use empty string to remove.
    """  
    user_update_enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('userUpdateEnabled'), 'exclude': lambda f: f is None }})
    r"""Determines if the DRACOON account is updated with data from AD / IDP.
    
    For OpenID Connect, the scopes `email` and `profile` are needed.
    """  
    