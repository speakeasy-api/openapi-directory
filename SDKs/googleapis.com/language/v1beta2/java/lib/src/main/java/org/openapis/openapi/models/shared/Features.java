/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Features - All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input. Next ID: 11
 */
public class Features {
    /**
     * Model options available for classification requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classificationModelOptions")
    public ClassificationModelOptions classificationModelOptions;
    public Features withClassificationModelOptions(ClassificationModelOptions classificationModelOptions) {
        this.classificationModelOptions = classificationModelOptions;
        return this;
    }
    
    /**
     * Classify the full document into categories. If this is true, the API will use the default model which classifies into a [predefined taxonomy](https://cloud.google.com/natural-language/docs/categories).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("classifyText")
    public Boolean classifyText;
    public Features withClassifyText(Boolean classifyText) {
        this.classifyText = classifyText;
        return this;
    }
    
    /**
     * Extract document-level sentiment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extractDocumentSentiment")
    public Boolean extractDocumentSentiment;
    public Features withExtractDocumentSentiment(Boolean extractDocumentSentiment) {
        this.extractDocumentSentiment = extractDocumentSentiment;
        return this;
    }
    
    /**
     * Extract entities.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extractEntities")
    public Boolean extractEntities;
    public Features withExtractEntities(Boolean extractEntities) {
        this.extractEntities = extractEntities;
        return this;
    }
    
    /**
     * Extract entities and their associated sentiment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extractEntitySentiment")
    public Boolean extractEntitySentiment;
    public Features withExtractEntitySentiment(Boolean extractEntitySentiment) {
        this.extractEntitySentiment = extractEntitySentiment;
        return this;
    }
    
    /**
     * Extract syntax information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extractSyntax")
    public Boolean extractSyntax;
    public Features withExtractSyntax(Boolean extractSyntax) {
        this.extractSyntax = extractSyntax;
        return this;
    }
    
}
