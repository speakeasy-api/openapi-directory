/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class SearchArtifactsQueryParams {
    /**
     * Filter by contentId.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contentId")
    public Long contentId;
    public SearchArtifactsQueryParams withContentId(Long contentId) {
        this.contentId = contentId;
        return this;
    }
    
    /**
     * Filter by description.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=description")
    public String description;
    public SearchArtifactsQueryParams withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Filter by globalId.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=globalId")
    public Long globalId;
    public SearchArtifactsQueryParams withGlobalId(Long globalId) {
        this.globalId = globalId;
        return this;
    }
    
    /**
     * Filter by artifact group.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=group")
    public String group;
    public SearchArtifactsQueryParams withGroup(String group) {
        this.group = group;
        return this;
    }
    
    /**
     * Filter by label.  Include one or more label to only return artifacts containing all of the
     * specified labels.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=labels")
    public String[] labels;
    public SearchArtifactsQueryParams withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * The number of artifacts to return.  Defaults to 20.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public SearchArtifactsQueryParams withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Filter by artifact name.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    public String name;
    public SearchArtifactsQueryParams withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The number of artifacts to skip before starting to collect the result set.  Defaults to 0.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    public Long offset;
    public SearchArtifactsQueryParams withOffset(Long offset) {
        this.offset = offset;
        return this;
    }
    
    /**
     * Sort order, ascending (`asc`) or descending (`desc`).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    public org.openapis.openapi.models.shared.SortOrderEnum order;
    public SearchArtifactsQueryParams withOrder(org.openapis.openapi.models.shared.SortOrderEnum order) {
        this.order = order;
        return this;
    }
    
    /**
     * The field to sort by.  Can be one of:
     * 
     * * `name`
     * * `createdOn`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=orderby")
    public org.openapis.openapi.models.shared.SortByEnum orderby;
    public SearchArtifactsQueryParams withOrderby(org.openapis.openapi.models.shared.SortByEnum orderby) {
        this.orderby = orderby;
        return this;
    }
    
    /**
     * Filter by one or more name/value property.  Separate each name/value pair using a colon.  For
     * example `properties=foo:bar` will return only artifacts with a custom property named `foo`
     * and value `bar`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=properties")
    public String[] properties;
    public SearchArtifactsQueryParams withProperties(String[] properties) {
        this.properties = properties;
        return this;
    }
    
}
