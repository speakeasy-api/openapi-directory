/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccountSettings200ApplicationJSONAccountSettingsInMeeting - Account Settings: In Meeting.
 */
public class AccountSettings200ApplicationJSONAccountSettingsInMeeting {
    /**
     * Identify guest participants in a meeting or webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alert_guest_join")
    public Boolean alertGuestJoin;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAlertGuestJoin(Boolean alertGuestJoin) {
        this.alertGuestJoin = alertGuestJoin;
        return this;
    }
    
    /**
     * Allow live streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_live_streaming")
    public Boolean allowLiveStreaming;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAllowLiveStreaming(Boolean allowLiveStreaming) {
        this.allowLiveStreaming = allowLiveStreaming;
        return this;
    }
    
    /**
     * If the value of this field is set to `true`, meeting participants and webinar panelists can be allowed to rename themselves during a meeting or a webinar.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_participants_to_rename")
    public Boolean allowParticipantsToRename;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAllowParticipantsToRename(Boolean allowParticipantsToRename) {
        this.allowParticipantsToRename = allowParticipantsToRename;
        return this;
    }
    
    /**
     * Show the Zoom desktop application when sharing screens. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_show_zoom_windows")
    public Boolean allowShowZoomWindows;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAllowShowZoomWindows(Boolean allowShowZoomWindows) {
        this.allowShowZoomWindows = allowShowZoomWindows;
        return this;
    }
    
    /**
     * Allow participants to use annotation tools to add information to shared screens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annotation")
    public Boolean annotation;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAnnotation(Boolean annotation) {
        this.annotation = annotation;
        return this;
    }
    
    /**
     * Allow an anonymous Q&amp;A in a webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anonymous_question_answer")
    public Boolean anonymousQuestionAnswer;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAnonymousQuestionAnswer(Boolean anonymousQuestionAnswer) {
        this.anonymousQuestionAnswer = anonymousQuestionAnswer;
        return this;
    }
    
    /**
     * Allow host to put attendee on hold.
     * 
     * **This field has been deprecated and is no longer supported.**
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendee_on_hold")
    public Boolean attendeeOnHold;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAttendeeOnHold(Boolean attendeeOnHold) {
        this.attendeeOnHold = attendeeOnHold;
        return this;
    }
    
    /**
     * Enable users to see and add contacts to the "auto-answer group" in the chat contact list. Any call from members of this group will automatically be answered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_answer")
    public Boolean autoAnswer;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAutoAnswer(Boolean autoAnswer) {
        this.autoAnswer = autoAnswer;
        return this;
    }
    
    /**
     * Automatically save all in-meeting chats so that the host does not need to manually save the chat transcript after the meeting starts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_saving_chat")
    public Boolean autoSavingChat;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withAutoSavingChat(Boolean autoSavingChat) {
        this.autoSavingChat = autoSavingChat;
        return this;
    }
    
    /**
     * Allow host to split meeting participants into separate, smaller rooms.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("breakout_room")
    public Boolean breakoutRoom;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withBreakoutRoom(Boolean breakoutRoom) {
        this.breakoutRoom = breakoutRoom;
        return this;
    }
    
    /**
     * Allow meeting participants to send a message that is visible to all participants.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chat")
    public Boolean chat;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withChat(Boolean chat) {
        this.chat = chat;
        return this;
    }
    
    /**
     * Allow a host to type closed captions. Enable a host to assign a participant or third party device to add closed captions. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_caption")
    public Boolean closedCaption;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withClosedCaption(Boolean closedCaption) {
        this.closedCaption = closedCaption;
        return this;
    }
    
    /**
     * Allow the host to add co-hosts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("co_host")
    public Boolean coHost;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withCoHost(Boolean coHost) {
        this.coHost = coHost;
        return this;
    }
    
    /**
     * If set to `true`, account owners and admins on paid accounts can [select data center regions](https://support.zoom.us/hc/en-us/articles/360042411451-Selecting-data-center-regions-for-hosted-meetings-and-webinars) to use for hosting their real-time meeting and webinar traffic. These regions can be provided in the `data_center_regions` field. If set to `false`, the regions cannot be customized and the default regions will be used.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_data_center_regions")
    public Boolean customDataCenterRegions;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withCustomDataCenterRegions(Boolean customDataCenterRegions) {
        this.customDataCenterRegions = customDataCenterRegions;
        return this;
    }
    
    /**
     * Custom live streaming.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_live_streaming_service")
    public Boolean customLiveStreamingService;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withCustomLiveStreamingService(Boolean customLiveStreamingService) {
        this.customLiveStreamingService = customLiveStreamingService;
        return this;
    }
    
    /**
     * Custom service instructions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_service_instructions")
    public String customServiceInstructions;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withCustomServiceInstructions(String customServiceInstructions) {
        this.customServiceInstructions = customServiceInstructions;
        return this;
    }
    
    /**
     * If you have set the value of `custom_data_center_regions` to `true`, specify the data center regions that you would like to opt in to (country codes from among: ["EU", "HK", "AU", "IN", "LA", "TY", "CN", "US", "CA"]).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_center_regions")
    public AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum dataCenterRegions;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withDataCenterRegions(AccountSettings200ApplicationJSONAccountSettingsInMeetingDataCenterRegionsEnum dataCenterRegions) {
        this.dataCenterRegions = dataCenterRegions;
        return this;
    }
    
    /**
     * DSCP audio.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dscp_audio")
    public Long dscpAudio;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withDscpAudio(Long dscpAudio) {
        this.dscpAudio = dscpAudio;
        return this;
    }
    
    /**
     * DSCP marking.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dscp_marking")
    public Boolean dscpMarking;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withDscpMarking(Boolean dscpMarking) {
        this.dscpMarking = dscpMarking;
        return this;
    }
    
    /**
     * DSCP video.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dscp_video")
    public Long dscpVideo;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withDscpVideo(Long dscpVideo) {
        this.dscpVideo = dscpVideo;
        return this;
    }
    
    /**
     * Zoom requires encryption for all data between the Zoom cloud, Zoom client, and Zoom Room. Require encryption for 3rd party endpoints (H323/SIP).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("e2e_encryption")
    public Boolean e2eEncryption;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withE2eEncryption(Boolean e2eEncryption) {
        this.e2eEncryption = e2eEncryption;
        return this;
    }
    
    /**
     * Play sound when participants join or leave.&lt;br&gt;`host` - Heard by host only.&lt;br&gt;`all` - Heard by host and all attendees.&lt;br&gt;`none` - Disable.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entry_exit_chime")
    public AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum entryExitChime;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withEntryExitChime(AccountSettings200ApplicationJSONAccountSettingsInMeetingEntryExitChimeEnum entryExitChime) {
        this.entryExitChime = entryExitChime;
        return this;
    }
    
    /**
     * Allow another user to take control of your camera during a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("far_end_camera_control")
    public Boolean farEndCameraControl;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withFarEndCameraControl(Boolean farEndCameraControl) {
        this.farEndCameraControl = farEndCameraControl;
        return this;
    }
    
    /**
     * Add a "Feedback" tab to the Windows Settings or Mac Preferences dialog. Enable users to provide feedback to Zoom at the end of the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("feedback")
    public Boolean feedback;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withFeedback(Boolean feedback) {
        this.feedback = feedback;
        return this;
    }
    
    /**
     * Indicates whether [in-meeting file transfer](https://support.zoom.us/hc/en-us/articles/209605493-In-meeting-file-transfer) setting has been enabled on the account or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_transfer")
    public Boolean fileTransfer;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withFileTransfer(Boolean fileTransfer) {
        this.fileTransfer = fileTransfer;
        return this;
    }
    
    /**
     * Activate higher quality video for host and participants.
     * Please note: This will use more bandwidth.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_hd")
    public Boolean groupHd;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withGroupHd(Boolean groupHd) {
        this.groupHd = groupHd;
        return this;
    }
    
    /**
     * Enable or disable meeting reactions. &lt;br&gt;
     * `true`: Allow meeting participants to communicate without interrupting by reacting with an emoji that shows on their video.&lt;br&gt;
     * `false`: Do not enable meeting reactions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting_reactions")
    public Boolean meetingReactions;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withMeetingReactions(Boolean meetingReactions) {
        this.meetingReactions = meetingReactions;
        return this;
    }
    
    /**
     * Allow users to select original sound in their client settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_audio")
    public Boolean originalAudio;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withOriginalAudio(Boolean originalAudio) {
        this.originalAudio = originalAudio;
        return this;
    }
    
    /**
     * Peer to peer connection while only two people are in a meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p2p_connetion")
    public Boolean p2pConnetion;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withP2pConnetion(Boolean p2pConnetion) {
        this.p2pConnetion = p2pConnetion;
        return this;
    }
    
    /**
     * Peer to peer listening ports range.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("p2p_ports")
    public Boolean p2pPorts;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withP2pPorts(Boolean p2pPorts) {
        this.p2pPorts = p2pPorts;
        return this;
    }
    
    /**
     * Add "Polls" to the meeting controls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("polling")
    public Boolean polling;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withPolling(Boolean polling) {
        this.polling = polling;
        return this;
    }
    
    /**
     * The listening ports range, separated by a comma (ex 55,56). The ports range must be between 1 to 65535.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ports_range")
    public String portsRange;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withPortsRange(String portsRange) {
        this.portsRange = portsRange;
        return this;
    }
    
    /**
     * Display a thumbs up or down survey at the end of each meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_meeting_feedback")
    public Boolean postMeetingFeedback;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withPostMeetingFeedback(Boolean postMeetingFeedback) {
        this.postMeetingFeedback = postMeetingFeedback;
        return this;
    }
    
    /**
     * Allow a meeting participant to send a private message to another participant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_chat")
    public Boolean privateChat;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withPrivateChat(Boolean privateChat) {
        this.privateChat = privateChat;
        return this;
    }
    
    /**
     * Record and play their own voice.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_play_own_voice")
    public Boolean recordPlayOwnVoice;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withRecordPlayOwnVoice(Boolean recordPlayOwnVoice) {
        this.recordPlayOwnVoice = recordPlayOwnVoice;
        return this;
    }
    
    /**
     * Allow users to request remote control.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remote_control")
    public Boolean remoteControl;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withRemoteControl(Boolean remoteControl) {
        this.remoteControl = remoteControl;
        return this;
    }
    
    /**
     * Indicates whether the [**Request permission to unmute participants**](https://support.zoom.us/hc/en-us/articles/203435537-Muting-and-unmuting-participants-in-a-meeting#h_01EGK4XFWS1SJGZ71MYGKF7260) option has been enabled for the account or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_permission_to_unmute")
    public Boolean requestPermissionToUnmute;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withRequestPermissionToUnmute(Boolean requestPermissionToUnmute) {
        this.requestPermissionToUnmute = requestPermissionToUnmute;
        return this;
    }
    
    /**
     * Allow screen sharing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("screen_sharing")
    public Boolean screenSharing;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withScreenSharing(Boolean screenSharing) {
        this.screenSharing = screenSharing;
        return this;
    }
    
    /**
     * Only show the default email when sending email invites.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sending_default_email_invites")
    public Boolean sendingDefaultEmailInvites;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withSendingDefaultEmailInvites(Boolean sendingDefaultEmailInvites) {
        this.sendingDefaultEmailInvites = sendingDefaultEmailInvites;
        return this;
    }
    
    /**
     * If the value of this field is set to `true`, you will allow participants to join a meeting directly from their browser and bypass the Zoom application download process. This is a workaround for participants who are unable to download, install, or run applications. Note that the meeting experience from the browser is limited.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_a_join_from_your_browser_link")
    public Boolean showAJoinFromYourBrowserLink;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withShowAJoinFromYourBrowserLink(Boolean showAJoinFromYourBrowserLink) {
        this.showAJoinFromYourBrowserLink = showAJoinFromYourBrowserLink;
        return this;
    }
    
    /**
     * Always show the meeting control toolbar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_meeting_control_toolbar")
    public Boolean showMeetingControlToolbar;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withShowMeetingControlToolbar(Boolean showMeetingControlToolbar) {
        this.showMeetingControlToolbar = showMeetingControlToolbar;
        return this;
    }
    
    /**
     * Allow users to select stereo audio in their client settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stereo_audio")
    public Boolean stereoAudio;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withStereoAudio(Boolean stereoAudio) {
        this.stereoAudio = stereoAudio;
        return this;
    }
    
    /**
     * Use HTML formatted email for the Outlook plugin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("use_html_format_email")
    public Boolean useHtmlFormatEmail;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withUseHtmlFormatEmail(Boolean useHtmlFormatEmail) {
        this.useHtmlFormatEmail = useHtmlFormatEmail;
        return this;
    }
    
    /**
     * Allow users to replace their background with any selected image. Choose or upload an image in the Zoom desktop application settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_background")
    public Boolean virtualBackground;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withVirtualBackground(Boolean virtualBackground) {
        this.virtualBackground = virtualBackground;
        return this;
    }
    
    /**
     * Settings to manage virtual background.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_background_settings")
    public AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettings virtualBackgroundSettings;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withVirtualBackgroundSettings(AccountSettings200ApplicationJSONAccountSettingsInMeetingVirtualBackgroundSettings virtualBackgroundSettings) {
        this.virtualBackgroundSettings = virtualBackgroundSettings;
        return this;
    }
    
    /**
     * Add a watermark when viewing a shared screen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("watermark")
    public Boolean watermark;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWatermark(Boolean watermark) {
        this.watermark = watermark;
        return this;
    }
    
    /**
     * Allow a Q&amp;A in a webinar.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webinar_question_answer")
    public Boolean webinarQuestionAnswer;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWebinarQuestionAnswer(Boolean webinarQuestionAnswer) {
        this.webinarQuestionAnswer = webinarQuestionAnswer;
        return this;
    }
    
    /**
     * Allow participants to share a whiteboard that includes annotation tools.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("whiteboard")
    public Boolean whiteboard;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWhiteboard(Boolean whiteboard) {
        this.whiteboard = whiteboard;
        return this;
    }
    
    /**
     * Indicates who can share their screen or content during meetings. The value can be one of the following: &lt;br&gt;
     * `host`: Only host can share the screen.&lt;br&gt;
     * `all`: Both hosts and attendees can share their screen during meetings. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("who_can_share_screen")
    public AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum whoCanShareScreen;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWhoCanShareScreen(AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenEnum whoCanShareScreen) {
        this.whoCanShareScreen = whoCanShareScreen;
        return this;
    }
    
    /**
     * Indicates who is allowed to start sharing screen when someone else in the meeting is sharing their screen. The value can be one of the following:&lt;br&gt;
     * `host`: Only a host can share the screen when someone else is sharing.&lt;br&gt;
     * `all`: Anyone in the meeting is allowed to start sharing their screen when someone else is sharing. For Webinar, the hosts and panelists can start screen sharing, but not the attendees.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("who_can_share_screen_when_someone_is_sharing")
    public AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum whoCanShareScreenWhenSomeoneIsSharing;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWhoCanShareScreenWhenSomeoneIsSharing(AccountSettings200ApplicationJSONAccountSettingsInMeetingWhoCanShareScreenWhenSomeoneIsSharingEnum whoCanShareScreenWhenSomeoneIsSharing) {
        this.whoCanShareScreenWhenSomeoneIsSharing = whoCanShareScreenWhenSomeoneIsSharing;
        return this;
    }
    
    /**
     * Workplace by facebook.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workplace_by_facebook")
    public Boolean workplaceByFacebook;
    public AccountSettings200ApplicationJSONAccountSettingsInMeeting withWorkplaceByFacebook(Boolean workplaceByFacebook) {
        this.workplaceByFacebook = workplaceByFacebook;
        return this;
    }
    
}
