// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateAuthorizerRequestBodyAuthorizerTypeEnum - The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
type UpdateAuthorizerRequestBodyAuthorizerTypeEnum string

const (
	UpdateAuthorizerRequestBodyAuthorizerTypeEnumRequest UpdateAuthorizerRequestBodyAuthorizerTypeEnum = "REQUEST"
	UpdateAuthorizerRequestBodyAuthorizerTypeEnumJwt     UpdateAuthorizerRequestBodyAuthorizerTypeEnum = "JWT"
)

func (e *UpdateAuthorizerRequestBodyAuthorizerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "REQUEST":
		fallthrough
	case "JWT":
		*e = UpdateAuthorizerRequestBodyAuthorizerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAuthorizerRequestBodyAuthorizerTypeEnum: %s", s)
	}
}

// UpdateAuthorizerRequestBodyJwtConfiguration - Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
type UpdateAuthorizerRequestBodyJwtConfiguration struct {
	Audience []string `json:"Audience,omitempty"`
	Issuer   *string  `json:"Issuer,omitempty"`
}

type UpdateAuthorizerRequestBody struct {
	// Represents an Amazon Resource Name (ARN).
	AuthorizerCredentialsArn *string `json:"authorizerCredentialsArn,omitempty"`
	// A string with a length between [1-64].
	AuthorizerPayloadFormatVersion *string `json:"authorizerPayloadFormatVersion,omitempty"`
	// An integer with a value between [0-3600].
	AuthorizerResultTTLInSeconds *int64 `json:"authorizerResultTtlInSeconds,omitempty"`
	// The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
	AuthorizerType *UpdateAuthorizerRequestBodyAuthorizerTypeEnum `json:"authorizerType,omitempty"`
	// A string representation of a URI with a length between [1-2048].
	AuthorizerURI *string `json:"authorizerUri,omitempty"`
	// Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>
	EnableSimpleResponses *bool `json:"enableSimpleResponses,omitempty"`
	// The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
	IdentitySource []string `json:"identitySource,omitempty"`
	// A string with a length between [0-1024].
	IdentityValidationExpression *string `json:"identityValidationExpression,omitempty"`
	// Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
	JwtConfiguration *UpdateAuthorizerRequestBodyJwtConfiguration `json:"jwtConfiguration,omitempty"`
	// A string with a length between [1-128].
	Name *string `json:"name,omitempty"`
}

type UpdateAuthorizerRequest struct {
	RequestBody       UpdateAuthorizerRequestBody `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                     `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                     `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                     `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                     `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                     `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                     `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                     `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	// The API identifier.
	APIID string `pathParam:"style=simple,explode=false,name=apiId"`
	// The authorizer identifier.
	AuthorizerID string `pathParam:"style=simple,explode=false,name=authorizerId"`
}

type UpdateAuthorizerResponse struct {
	// BadRequestException
	BadRequestException interface{}
	// ConflictException
	ConflictException interface{}
	ContentType       string
	// NotFoundException
	NotFoundException interface{}
	StatusCode        int
	RawResponse       *http.Response
	// TooManyRequestsException
	TooManyRequestsException interface{}
	// Success
	UpdateAuthorizerResponse *shared.UpdateAuthorizerResponse
}
