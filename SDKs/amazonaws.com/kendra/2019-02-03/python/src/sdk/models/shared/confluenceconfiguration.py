"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import confluenceattachmentconfiguration as shared_confluenceattachmentconfiguration
from ..shared import confluenceauthenticationtype_enum as shared_confluenceauthenticationtype_enum
from ..shared import confluenceblogconfiguration as shared_confluenceblogconfiguration
from ..shared import confluencepageconfiguration as shared_confluencepageconfiguration
from ..shared import confluencespaceconfiguration as shared_confluencespaceconfiguration
from ..shared import confluenceversion_enum as shared_confluenceversion_enum
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from ..shared import proxyconfiguration as shared_proxyconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfluenceConfiguration:
    r"""Provides the configuration information to connect to Confluence as your data source."""
    
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    server_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ServerUrl') }})  
    version: shared_confluenceversion_enum.ConfluenceVersionEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version') }})  
    attachment_configuration: Optional[shared_confluenceattachmentconfiguration.ConfluenceAttachmentConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AttachmentConfiguration'), 'exclude': lambda f: f is None }})  
    authentication_type: Optional[shared_confluenceauthenticationtype_enum.ConfluenceAuthenticationTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationType'), 'exclude': lambda f: f is None }})  
    blog_configuration: Optional[shared_confluenceblogconfiguration.ConfluenceBlogConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlogConfiguration'), 'exclude': lambda f: f is None }})  
    exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionPatterns'), 'exclude': lambda f: f is None }})  
    inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionPatterns'), 'exclude': lambda f: f is None }})  
    page_configuration: Optional[shared_confluencepageconfiguration.ConfluencePageConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PageConfiguration'), 'exclude': lambda f: f is None }})  
    proxy_configuration: Optional[shared_proxyconfiguration.ProxyConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProxyConfiguration'), 'exclude': lambda f: f is None }})  
    space_configuration: Optional[shared_confluencespaceconfiguration.ConfluenceSpaceConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SpaceConfiguration'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    