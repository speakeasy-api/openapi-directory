"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import googlecloudmlv1_builtinalgorithmoutput as shared_googlecloudmlv1_builtinalgorithmoutput
from ..shared import googlecloudmlv1_hyperparameteroutput as shared_googlecloudmlv1_hyperparameteroutput
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudMlV1TrainingOutput:
    r"""Represents results of a training job. Output only."""
    
    built_in_algorithm_output: Optional[shared_googlecloudmlv1_builtinalgorithmoutput.GoogleCloudMlV1BuiltInAlgorithmOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('builtInAlgorithmOutput'), 'exclude': lambda f: f is None }})
    r"""Represents output related to a built-in algorithm Job."""  
    completed_trial_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedTrialCount'), 'exclude': lambda f: f is None }})
    r"""The number of hyperparameter tuning trials that completed successfully. Only set for hyperparameter tuning jobs."""  
    consumed_ml_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumedMLUnits'), 'exclude': lambda f: f is None }})
    r"""The amount of ML units consumed by the job."""  
    hyperparameter_metric_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperparameterMetricTag'), 'exclude': lambda f: f is None }})
    r"""The TensorFlow summary tag name used for optimizing hyperparameter tuning trials. See [`HyperparameterSpec.hyperparameterMetricTag`](#HyperparameterSpec.FIELDS.hyperparameter_metric_tag) for more information. Only set for hyperparameter tuning jobs."""  
    is_built_in_algorithm_job: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isBuiltInAlgorithmJob'), 'exclude': lambda f: f is None }})
    r"""Whether this job is a built-in Algorithm job."""  
    is_hyperparameter_tuning_job: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isHyperparameterTuningJob'), 'exclude': lambda f: f is None }})
    r"""Whether this job is a hyperparameter tuning job."""  
    trials: Optional[list[shared_googlecloudmlv1_hyperparameteroutput.GoogleCloudMlV1HyperparameterOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trials'), 'exclude': lambda f: f is None }})
    r"""Results for individual Hyperparameter trials. Only set for hyperparameter tuning jobs."""  
    web_access_uris: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('webAccessUris'), 'exclude': lambda f: f is None }})
    r"""Output only. URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GoogleCloudMlV1TrainingOutputInput:
    r"""Represents results of a training job. Output only."""
    
    built_in_algorithm_output: Optional[shared_googlecloudmlv1_builtinalgorithmoutput.GoogleCloudMlV1BuiltInAlgorithmOutput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('builtInAlgorithmOutput'), 'exclude': lambda f: f is None }})
    r"""Represents output related to a built-in algorithm Job."""  
    completed_trial_count: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completedTrialCount'), 'exclude': lambda f: f is None }})
    r"""The number of hyperparameter tuning trials that completed successfully. Only set for hyperparameter tuning jobs."""  
    consumed_ml_units: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumedMLUnits'), 'exclude': lambda f: f is None }})
    r"""The amount of ML units consumed by the job."""  
    hyperparameter_metric_tag: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperparameterMetricTag'), 'exclude': lambda f: f is None }})
    r"""The TensorFlow summary tag name used for optimizing hyperparameter tuning trials. See [`HyperparameterSpec.hyperparameterMetricTag`](#HyperparameterSpec.FIELDS.hyperparameter_metric_tag) for more information. Only set for hyperparameter tuning jobs."""  
    is_built_in_algorithm_job: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isBuiltInAlgorithmJob'), 'exclude': lambda f: f is None }})
    r"""Whether this job is a built-in Algorithm job."""  
    is_hyperparameter_tuning_job: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isHyperparameterTuningJob'), 'exclude': lambda f: f is None }})
    r"""Whether this job is a hyperparameter tuning job."""  
    trials: Optional[list[shared_googlecloudmlv1_hyperparameteroutput.GoogleCloudMlV1HyperparameterOutput]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trials'), 'exclude': lambda f: f is None }})
    r"""Results for individual Hyperparameter trials. Only set for hyperparameter tuning jobs."""  
    