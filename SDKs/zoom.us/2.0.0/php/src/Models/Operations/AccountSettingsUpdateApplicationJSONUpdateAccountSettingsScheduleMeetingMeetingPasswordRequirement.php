<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Operations;


/**
 * AccountSettingsUpdateApplicationJSONUpdateAccountSettingsScheduleMeetingMeetingPasswordRequirement - Account wide meeting/webinar [password requirements](https://support.zoom.us/hc/en-us/articles/360033559832-Meeting-and-webinar-passwords#h_a427384b-e383-4f80-864d-794bf0a37604).
 * 
 * @package OpenAPI\OpenAPI\Models\Operations
 * @access public
 */
class AccountSettingsUpdateApplicationJSONUpdateAccountSettingsScheduleMeetingMeetingPasswordRequirement
{
	#[\JMS\Serializer\Annotation\SerializedName('consecutive_characters_length')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Operations\AccountSettingsUpdateApplicationJSONUpdateAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?AccountSettingsUpdateApplicationJSONUpdateAccountSettingsScheduleMeetingMeetingPasswordRequirementConsecutiveCharactersLengthEnum $consecutiveCharactersLength = null;
    
    /**
     * If set to `true`, the password must contain at least 1 letter (such as a,b,c...).
     * 
     * 
     * 
     * @var ?bool $haveLetter
     */
	#[\JMS\Serializer\Annotation\SerializedName('have_letter')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $haveLetter = null;
    
    /**
     * If set to `true`, the password must contain at least 1 number (such as 1,2,3...).
     * 
     * @var ?bool $haveNumber
     */
	#[\JMS\Serializer\Annotation\SerializedName('have_number')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $haveNumber = null;
    
    /**
     * If set to `true`, the password must have at least 1 special character (!,@,#...).
     * 
     * @var ?bool $haveSpecialCharacter
     */
	#[\JMS\Serializer\Annotation\SerializedName('have_special_character')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $haveSpecialCharacter = null;
    
    /**
     * If set to `true`, the password must include both uppercase and lowercase characters.
     * 
     * @var ?bool $haveUpperAndLowerCharacters
     */
	#[\JMS\Serializer\Annotation\SerializedName('have_upper_and_lower_characters')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $haveUpperAndLowerCharacters = null;
    
    /**
     * The minimum length that the meeting/webinar password needs to have.
     * 
     * @var ?int $length
     */
	#[\JMS\Serializer\Annotation\SerializedName('length')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $length = null;
    
    /**
     * If set to `true`, the password must only contain numbers and no other characters.
     * 
     * @var ?bool $onlyAllowNumeric
     */
	#[\JMS\Serializer\Annotation\SerializedName('only_allow_numeric')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $onlyAllowNumeric = null;
    
    /**
     * If set to `true`, users will be informed if the provided password is weak.
     * 
     * @var ?bool $weakEnhanceDetection
     */
	#[\JMS\Serializer\Annotation\SerializedName('weak_enhance_detection')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $weakEnhanceDetection = null;
    
	public function __construct()
	{
		$this->consecutiveCharactersLength = null;
		$this->haveLetter = null;
		$this->haveNumber = null;
		$this->haveSpecialCharacter = null;
		$this->haveUpperAndLowerCharacters = null;
		$this->length = null;
		$this->onlyAllowNumeric = null;
		$this->weakEnhanceDetection = null;
	}
}
