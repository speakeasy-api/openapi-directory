<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Services 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Enables multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. Operation response type: `google.protobuf.Empty`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableResponse
     */
	public function serviceusageServicesBatchEnable(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/services:batchEnable', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "batchEnableServicesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesBatchEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates or updates multiple admin overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsImportAdminOverrides(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerQuotaMetrics:importAdminOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importAdminOverridesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportAdminOverridesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates or updates multiple consumer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsImportConsumerOverrides(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerQuotaMetrics:importConsumerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "importConsumerOverridesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsImportConsumerOverridesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an admin override. An admin override is applied by an administrator of a parent folder or parent organization of the consumer receiving the override. An admin override is intended to limit the amount of quota the consumer can use out of the total quota pool allocated to all children of the folder or organization.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/adminOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "quotaOverride", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all admin overrides on this limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsAdminOverridesList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/adminOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsAdminOverridesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listAdminOverridesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListAdminOverridesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a consumer override. A consumer override is applied to the consumer on its own authority to limit its own quota usage. Consumer overrides cannot be used to grant more quota than would be allowed by admin overrides, producer overrides, or the default limit of the service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreate(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "quotaOverride", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes a consumer override.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDelete(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all consumer overrides on this limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerOverrides', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConsumerOverridesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConsumerOverridesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates a consumer override.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatch(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "quotaOverride", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsConsumerOverridesPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a summary of quota information for a specific quota limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsLimitsGet(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsLimitsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->consumerQuotaLimit = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ConsumerQuotaLimit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieves a summary of all quota information visible to the service consumer, organized by service metric. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListResponse
     */
	public function serviceusageServicesConsumerQuotaMetricsList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/consumerQuotaMetrics', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesConsumerQuotaMetricsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listConsumerQuotaMetricsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListConsumerQuotaMetricsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Disables a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a `FAILED_PRECONDITION` status if the target service is not currently enabled. Operation response type: `google.protobuf.Empty`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableResponse
     */
	public function serviceusageServicesDisable(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:disable', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesDisableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Enables a service so that it can be used with a project. Operation response type: `google.protobuf.Empty`
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableResponse
     */
	public function serviceusageServicesEnable(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{name}:enable', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesEnableResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Generates service identity for service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityResponse
     */
	public function serviceusageServicesGenerateServiceIdentity(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}:generateServiceIdentity', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesGenerateServiceIdentityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->operation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\Operation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the `servicemanagement.services.bind` permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListResponse
     */
	public function serviceusageServicesList(
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1beta1/{parent}/services', \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ServiceusageServicesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listServicesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListServicesResponse', 'json');
            }
        }

        return $response;
    }
}