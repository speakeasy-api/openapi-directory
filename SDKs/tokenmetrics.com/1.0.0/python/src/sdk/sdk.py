"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

SERVERS = [
    "https://api.tokenmetrics.com",
]
"""Contains the list of servers available to the SDK"""

class SDK:

    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str = SERVERS[0]
    _language: str = "python"
    _sdk_version: str = "0.0.1"
    _gen_version: str = "internal"

    def __init__(self,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        self._client = requests_http.Session()
        
        
        if server_url is not None:
            if url_params is not None:
                self._server_url = utils.template_url(server_url, url_params)
            else:
                self._server_url = server_url

        if client is not None:
            self._client = client
        
        self._security_client = self._client
        

        
    
    
    def correlation(self, request: operations.CorrelationRequest) -> operations.CorrelationResponse:
        r"""Correlation
        Correlation
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/correlation'
        
        query_params = utils.get_query_params(operations.CorrelationRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CorrelationResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def indices(self, request: operations.IndicesRequest) -> operations.IndicesResponse:
        r"""Indices
        Indices
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/indices'
        
        query_params = utils.get_query_params(operations.IndicesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.IndicesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def investor_grades(self, request: operations.InvestorGradesRequest) -> operations.InvestorGradesResponse:
        r"""Investor Grades
        Investor Grades
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/investor-grades'
        
        query_params = utils.get_query_params(operations.InvestorGradesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.InvestorGradesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def market_indicator(self, request: operations.MarketIndicatorRequest) -> operations.MarketIndicatorResponse:
        r"""Market Indicator
        Market Indicator
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/market-indicator'
        
        query_params = utils.get_query_params(operations.MarketIndicatorRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.MarketIndicatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def price(self, request: operations.PriceRequest) -> operations.PriceResponse:
        r"""Price
        Price
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/price'
        
        query_params = utils.get_query_params(operations.PriceRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PriceResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def price_prediction(self, request: operations.PricePredictionRequest) -> operations.PricePredictionResponse:
        r"""Price Prediction
        Price Prediction
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/price-prediction'
        
        query_params = utils.get_query_params(operations.PricePredictionRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PricePredictionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def quantmetrics_tier1(self, request: operations.QuantmetricsTier1Request) -> operations.QuantmetricsTier1Response:
        r"""Quantmetrics Tier 1
        Quantmetrics Tier 1
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/quantmetrics-tier-1'
        
        query_params = utils.get_query_params(operations.QuantmetricsTier1Request, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuantmetricsTier1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def quantmetrics_tier2(self, request: operations.QuantmetricsTier2Request) -> operations.QuantmetricsTier2Response:
        r"""Quantmetrics Tier 2
        Quantmetrics Tier 2
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/quantmetrics-tier-2'
        
        query_params = utils.get_query_params(operations.QuantmetricsTier2Request, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.QuantmetricsTier2Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def resistance_support(self, request: operations.ResistanceSupportRequest) -> operations.ResistanceSupportResponse:
        r"""Resistance & Support
        Resistance & Support
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/resistance-support'
        
        query_params = utils.get_query_params(operations.ResistanceSupportRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ResistanceSupportResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def scenario_analysis(self, request: operations.ScenarioAnalysisRequest) -> operations.ScenarioAnalysisResponse:
        r"""Scenario Analysis
        Scenario Analysis
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/scenario-analysis'
        
        query_params = utils.get_query_params(operations.ScenarioAnalysisRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ScenarioAnalysisResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def sentiments(self, request: operations.SentimentsRequest) -> operations.SentimentsResponse:
        r"""Sentiments
        Sentiments
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/sentiments'
        
        query_params = utils.get_query_params(operations.SentimentsRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.SentimentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def tokens(self, request: operations.TokensRequest) -> operations.TokensResponse:
        r"""Tokens
        Tokens
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/tokens'
        
        query_params = utils.get_query_params(operations.TokensRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TokensResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def trader_grades(self, request: operations.TraderGradesRequest) -> operations.TraderGradesResponse:
        r"""Trader Grades
        Trader Grades
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/trader-grades'
        
        query_params = utils.get_query_params(operations.TraderGradesRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TraderGradesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def trading_indicator(self, request: operations.TradingIndicatorRequest) -> operations.TradingIndicatorResponse:
        r"""Trading Indicator
        Trading Indicator
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v1/trading-indicator'
        
        query_params = utils.get_query_params(operations.TradingIndicatorRequest, request)
        
        client = self._client
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TradingIndicatorResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    