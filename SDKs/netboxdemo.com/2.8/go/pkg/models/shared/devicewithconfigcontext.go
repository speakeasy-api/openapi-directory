// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"openapi/pkg/types"
	"time"
)

type DeviceWithConfigContextFaceLabelEnum string

const (
	DeviceWithConfigContextFaceLabelEnumFront DeviceWithConfigContextFaceLabelEnum = "Front"
	DeviceWithConfigContextFaceLabelEnumRear  DeviceWithConfigContextFaceLabelEnum = "Rear"
)

func (e *DeviceWithConfigContextFaceLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Front":
		fallthrough
	case "Rear":
		*e = DeviceWithConfigContextFaceLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceWithConfigContextFaceLabelEnum: %s", s)
	}
}

type DeviceWithConfigContextFaceValueEnum string

const (
	DeviceWithConfigContextFaceValueEnumFront DeviceWithConfigContextFaceValueEnum = "front"
	DeviceWithConfigContextFaceValueEnumRear  DeviceWithConfigContextFaceValueEnum = "rear"
)

func (e *DeviceWithConfigContextFaceValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "front":
		fallthrough
	case "rear":
		*e = DeviceWithConfigContextFaceValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceWithConfigContextFaceValueEnum: %s", s)
	}
}

type DeviceWithConfigContextFace struct {
	Label DeviceWithConfigContextFaceLabelEnum `json:"label"`
	Value DeviceWithConfigContextFaceValueEnum `json:"value"`
}

type DeviceWithConfigContextStatusLabelEnum string

const (
	DeviceWithConfigContextStatusLabelEnumOffline         DeviceWithConfigContextStatusLabelEnum = "Offline"
	DeviceWithConfigContextStatusLabelEnumActive          DeviceWithConfigContextStatusLabelEnum = "Active"
	DeviceWithConfigContextStatusLabelEnumPlanned         DeviceWithConfigContextStatusLabelEnum = "Planned"
	DeviceWithConfigContextStatusLabelEnumStaged          DeviceWithConfigContextStatusLabelEnum = "Staged"
	DeviceWithConfigContextStatusLabelEnumFailed          DeviceWithConfigContextStatusLabelEnum = "Failed"
	DeviceWithConfigContextStatusLabelEnumInventory       DeviceWithConfigContextStatusLabelEnum = "Inventory"
	DeviceWithConfigContextStatusLabelEnumDecommissioning DeviceWithConfigContextStatusLabelEnum = "Decommissioning"
)

func (e *DeviceWithConfigContextStatusLabelEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Offline":
		fallthrough
	case "Active":
		fallthrough
	case "Planned":
		fallthrough
	case "Staged":
		fallthrough
	case "Failed":
		fallthrough
	case "Inventory":
		fallthrough
	case "Decommissioning":
		*e = DeviceWithConfigContextStatusLabelEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceWithConfigContextStatusLabelEnum: %s", s)
	}
}

type DeviceWithConfigContextStatusValueEnum string

const (
	DeviceWithConfigContextStatusValueEnumOffline         DeviceWithConfigContextStatusValueEnum = "offline"
	DeviceWithConfigContextStatusValueEnumActive          DeviceWithConfigContextStatusValueEnum = "active"
	DeviceWithConfigContextStatusValueEnumPlanned         DeviceWithConfigContextStatusValueEnum = "planned"
	DeviceWithConfigContextStatusValueEnumStaged          DeviceWithConfigContextStatusValueEnum = "staged"
	DeviceWithConfigContextStatusValueEnumFailed          DeviceWithConfigContextStatusValueEnum = "failed"
	DeviceWithConfigContextStatusValueEnumInventory       DeviceWithConfigContextStatusValueEnum = "inventory"
	DeviceWithConfigContextStatusValueEnumDecommissioning DeviceWithConfigContextStatusValueEnum = "decommissioning"
)

func (e *DeviceWithConfigContextStatusValueEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "offline":
		fallthrough
	case "active":
		fallthrough
	case "planned":
		fallthrough
	case "staged":
		fallthrough
	case "failed":
		fallthrough
	case "inventory":
		fallthrough
	case "decommissioning":
		*e = DeviceWithConfigContextStatusValueEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for DeviceWithConfigContextStatusValueEnum: %s", s)
	}
}

type DeviceWithConfigContextStatus struct {
	Label DeviceWithConfigContextStatusLabelEnum `json:"label"`
	Value DeviceWithConfigContextStatusValueEnum `json:"value"`
}

type DeviceWithConfigContext struct {
	// A unique tag used to identify this device
	AssetTag         *string                      `json:"asset_tag,omitempty"`
	Cluster          *NestedCluster               `json:"cluster,omitempty"`
	Comments         *string                      `json:"comments,omitempty"`
	ConfigContext    map[string]string            `json:"config_context,omitempty"`
	Created          *types.Date                  `json:"created,omitempty"`
	CustomFields     map[string]interface{}       `json:"custom_fields,omitempty"`
	DeviceRole       NestedDeviceRole             `json:"device_role"`
	DeviceType       NestedDeviceType             `json:"device_type"`
	DisplayName      *string                      `json:"display_name,omitempty"`
	Face             *DeviceWithConfigContextFace `json:"face,omitempty"`
	ID               *int64                       `json:"id,omitempty"`
	LastUpdated      *time.Time                   `json:"last_updated,omitempty"`
	LocalContextData *string                      `json:"local_context_data,omitempty"`
	Name             *string                      `json:"name,omitempty"`
	ParentDevice     *NestedDevice                `json:"parent_device,omitempty"`
	Platform         *NestedPlatform              `json:"platform,omitempty"`
	// The lowest-numbered unit occupied by the device
	Position       *int64                         `json:"position,omitempty"`
	PrimaryIP      *NestedIPAddress               `json:"primary_ip,omitempty"`
	PrimaryIp4     *NestedIPAddress               `json:"primary_ip4,omitempty"`
	PrimaryIp6     *NestedIPAddress               `json:"primary_ip6,omitempty"`
	Rack           *NestedRack                    `json:"rack,omitempty"`
	Serial         *string                        `json:"serial,omitempty"`
	Site           NestedSite                     `json:"site"`
	Status         *DeviceWithConfigContextStatus `json:"status,omitempty"`
	Tags           []string                       `json:"tags,omitempty"`
	Tenant         *NestedTenant                  `json:"tenant,omitempty"`
	VcPosition     *int64                         `json:"vc_position,omitempty"`
	VcPriority     *int64                         `json:"vc_priority,omitempty"`
	VirtualChassis *NestedVirtualChassis          `json:"virtual_chassis,omitempty"`
}
