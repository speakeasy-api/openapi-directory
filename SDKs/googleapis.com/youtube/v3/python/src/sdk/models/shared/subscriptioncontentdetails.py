"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SubscriptionContentDetailsActivityTypeEnum(str, Enum):
    r"""The type of activity this subscription is for (only uploads, everything)."""
    SUBSCRIPTION_ACTIVITY_TYPE_UNSPECIFIED = 'subscriptionActivityTypeUnspecified'
    ALL = 'all'
    UPLOADS = 'uploads'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SubscriptionContentDetails:
    r"""Details about the content to witch a subscription refers."""
    
    activity_type: Optional[SubscriptionContentDetailsActivityTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('activityType'), 'exclude': lambda f: f is None }})
    r"""The type of activity this subscription is for (only uploads, everything)."""  
    new_item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newItemCount'), 'exclude': lambda f: f is None }})
    r"""The number of new items in the subscription since its content was last read."""  
    total_item_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalItemCount'), 'exclude': lambda f: f is None }})
    r"""The approximate number of items that the subscription points to."""  
    