"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Errors = void 0;
var utils = __importStar(require("../internal/utils"));
var operations = __importStar(require("./models/operations"));
var shared = __importStar(require("./models/shared"));
var Errors = /** @class */ (function () {
    function Errors(defaultClient, securityClient, serverURL, language, sdkVersion, genVersion) {
        this._defaultClient = defaultClient;
        this._securityClient = securityClient;
        this._serverURL = serverURL;
        this._language = language;
        this._sdkVersion = sdkVersion;
        this._genVersion = genVersion;
    }
    /**
     * List of app builds
     */
    Errors.prototype.errorsAppBuildsList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsAppBuildsListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/availableAppBuilds", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsAppBuildsListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsAppBuildsListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsAppBuildsList200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsAppBuildsList200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsAppBuildsListDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsAppBuildsListDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get all available versions in the time range.
     */
    Errors.prototype.errorsAvailableVersions = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsAvailableVersionsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/available_versions", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsAvailableVersionsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsAvailableVersionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsAvailableVersions200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsAvailableVersions200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsAvailableVersionsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsAvailableVersionsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Count of crashes or errors by day in the time range based the selected versions. If SingleErrorTypeParameter is not provided, defaults to handlederror.
     */
    Errors.prototype.errorsCountsPerDay = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsCountsPerDayRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorCountsPerDay", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsCountsPerDaySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsCountsPerDayResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsCountsPerDay200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsCountsPerDay200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsCountsPerDayDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsCountsPerDayDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Delete a specific error and related attachments and blobs for an app. Searchable data will not be deleted immediately and may take up to 30 days.
     */
    Errors.prototype.errorsDeleteError = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsDeleteErrorRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsDeleteErrorSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "delete" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsDeleteErrorResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsDeleteError200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsDeleteError200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsDeleteErrorDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsDeleteErrorDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error attachment location.
     */
    Errors.prototype.errorsErrorAttachmentLocation = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorAttachmentLocationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/location", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorAttachmentLocationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorAttachmentLocationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachmentLocation200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachmentLocation200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachmentLocationDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachmentLocationDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error attachment text.
     */
    Errors.prototype.errorsErrorAttachmentText = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorAttachmentTextRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments/{attachmentId}/text", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorAttachmentTextSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorAttachmentTextResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachmentText200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachmentText200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachmentTextDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachmentTextDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List error attachments.
     */
    Errors.prototype.errorsErrorAttachments = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorAttachmentsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/attachments", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorAttachmentsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorAttachmentsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachments200ApplicationJSONObjects = [];
                        var resFieldDepth = utils.getResFieldDepth(res);
                        res.errorsErrorAttachments200ApplicationJSONObjects =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachments200ApplicationJSON, resFieldDepth);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorAttachmentsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorAttachmentsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Download details for a specific error.
     */
    Errors.prototype.errorsErrorDownload = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorDownloadRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/download", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorDownloadSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorDownloadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorDownload200ApplicationJSONFileObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorDownloadDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorDownloadDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error groups list based on search parameters
     */
    Errors.prototype.errorsErrorGroupsSearch = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorGroupsSearchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/search", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorGroupsSearchSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorGroupsSearchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorGroupsSearch200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorGroupsSearch200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorGroupsSearchDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorGroupsSearchDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error location.
     */
    Errors.prototype.errorsErrorLocation = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorLocationRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/location", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorLocationSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorLocationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorLocation200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorLocation200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorLocationDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorLocationDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Errors list based on search parameters
     */
    Errors.prototype.errorsErrorSearch = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorSearchRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/search", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorSearchSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorSearchResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorSearch200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorSearch200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorSearchDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorSearchDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error Stacktrace details.
     */
    Errors.prototype.errorsErrorStackTrace = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsErrorStackTraceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}/stacktrace", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsErrorStackTraceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsErrorStackTraceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.diagnosticsStackTrace = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DiagnosticsStackTrace);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsErrorStackTraceDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsErrorStackTraceDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error details.
     */
    Errors.prototype.errorsGetErrorDetails = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGetErrorDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/{errorId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGetErrorDetailsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGetErrorDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGetErrorDetails200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGetErrorDetails200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGetErrorDetailsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGetErrorDetailsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Count of errors by day in the time range of the selected error group with selected version
     */
    Errors.prototype.errorsGroupCountsPerDay = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupCountsPerDayRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorCountsPerDay", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupCountsPerDaySecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupCountsPerDayResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupCountsPerDay200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupCountsPerDay200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupCountsPerDayDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupCountsPerDayDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Error group details
     */
    Errors.prototype.errorsGroupDetails = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupDetailsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupDetails200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupDetails200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupDetailsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupDetailsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Percentage of error-free devices by day in the time range. Api will return -1 if crash devices is greater than active devices
     */
    Errors.prototype.errorsGroupErrorFreeDevicePercentages = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupErrorFreeDevicePercentagesRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errorfreeDevicePercentages", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupErrorFreeDevicePercentagesSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupErrorFreeDevicePercentagesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupErrorFreeDevicePercentages200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupErrorFreeDevicePercentages200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupErrorFreeDevicePercentagesDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupErrorFreeDevicePercentagesDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Gets the stack trace for the error group.
     */
    Errors.prototype.errorsGroupErrorStackTrace = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupErrorStackTraceRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/stacktrace", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupErrorStackTraceSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupErrorStackTraceResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.diagnosticsStackTrace = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, shared.DiagnosticsStackTrace);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupErrorStackTraceDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupErrorStackTraceDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * List of error groups
     */
    Errors.prototype.errorsGroupList = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupListRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupListSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupListResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupList200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupList200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupListDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupListDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Top models of the selected error group.
     */
    Errors.prototype.errorsGroupModelCounts = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupModelCountsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/models", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupModelCountsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupModelCountsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupModelCounts200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupModelCounts200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupModelCountsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupModelCountsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Top OSes of the selected error group.
     */
    Errors.prototype.errorsGroupOperatingSystemCounts = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGroupOperatingSystemCountsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/operatingSystems", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGroupOperatingSystemCountsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGroupOperatingSystemCountsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupOperatingSystemCounts200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupOperatingSystemCounts200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGroupOperatingSystemCountsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGroupOperatingSystemCountsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Latest error details.
     */
    Errors.prototype.errorsLatestErrorDetails = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsLatestErrorDetailsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors/latest", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsLatestErrorDetailsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsLatestErrorDetailsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsLatestErrorDetails200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsLatestErrorDetails200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsLatestErrorDetailsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsLatestErrorDetailsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get all errors for group
     */
    Errors.prototype.errorsListForGroup = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsListForGroupRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}/errors", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsListForGroupSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsListForGroupResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsListForGroup200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsListForGroup200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsListForGroupDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsListForGroupDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Get session logs by error ID
     */
    Errors.prototype.errorsListSessionLogs = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsListSessionLogsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/{errorId}/sessionLogs", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsListSessionLogsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var queryParams = utils.serializeQueryParams(req);
        var r = client.request(__assign({ url: url + queryParams, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsListSessionLogsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsListSessionLogs200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsListSessionLogs200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsListSessionLogsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsListSessionLogsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * Update error group state
     */
    Errors.prototype.errorsUpdateState = function (req, security, config) {
        var _a;
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsUpdateStateRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/errorGroups/{errorGroupId}", req);
        var _b = [{}, {}], reqBodyHeaders = _b[0], reqBody = _b[1];
        try {
            _a = utils.serializeRequestBody(req, "requestBody", "json"), reqBodyHeaders = _a[0], reqBody = _a[1];
        }
        catch (e) {
            if (e instanceof Error) {
                throw new Error("Error serializing request body, cause: ".concat(e.message));
            }
        }
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsUpdateStateSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var headers = __assign(__assign({}, reqBodyHeaders), config === null || config === void 0 ? void 0 : config.headers);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        var r = client.request(__assign({ url: url, method: "patch", headers: headers, data: reqBody }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsUpdateStateResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsUpdateState200ApplicationJSONObject = utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsUpdateState200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsUpdateStateDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsUpdateStateDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    /**
     * gets the retention settings in days
     *
     * @remarks
     * gets the retention settings in days
     */
    Errors.prototype.errorsGetRetentionSettings = function (req, security, config) {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ErrorsGetRetentionSettingsRequest(req);
        }
        var baseURL = this._serverURL;
        var url = utils.generateURL(baseURL, "/v0.1/apps/{owner_name}/{app_name}/errors/retention_settings", req);
        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ErrorsGetRetentionSettingsSecurity(security);
        }
        var client = utils.createSecurityClient(this._defaultClient, security);
        var r = client.request(__assign({ url: url, method: "get" }, config));
        return r.then(function (httpRes) {
            var _a, _b;
            var contentType = (_b = (_a = httpRes === null || httpRes === void 0 ? void 0 : httpRes.headers) === null || _a === void 0 ? void 0 : _a["content-type"]) !== null && _b !== void 0 ? _b : "";
            if ((httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == null)
                throw new Error("status code not found in response: ".concat(httpRes));
            var res = new operations.ErrorsGetRetentionSettingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
            switch (true) {
                case (httpRes === null || httpRes === void 0 ? void 0 : httpRes.status) == 200:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGetRetentionSettings200ApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGetRetentionSettings200ApplicationJSON);
                    }
                    break;
                default:
                    if (utils.matchContentType(contentType, "application/json")) {
                        res.errorsGetRetentionSettingsDefaultApplicationJSONObject =
                            utils.objectToClass(httpRes === null || httpRes === void 0 ? void 0 : httpRes.data, operations.ErrorsGetRetentionSettingsDefaultApplicationJSON);
                    }
                    break;
            }
            return res;
        });
    };
    return Errors;
}());
exports.Errors = Errors;
