<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class UsersMerchantLevel 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a list of users
     * 
     * Returns a list of users associated with the `merchantId` specified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Users read and write
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersResponse
     */
	public function getMerchantsMerchantIdUsers(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/users', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listMerchantUsersResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ListMerchantUsersResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get user details
     * 
     * Returns user details for the `userId` and the `merchantId` specified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Users read and write
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdResponse
     */
	public function getMerchantsMerchantIdUsersUserId(
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetMerchantsMerchantIdUsersUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a user
     * 
     * Updates user details for the `userId` and the `merchantId` specified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Users read and write
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdResponse
     */
	public function patchMerchantsMerchantIdUsersUserId(
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/users/{userId}', \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateMerchantUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchMerchantsMerchantIdUsersUserIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->user = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\User', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new user
     * 
     * Creates a user for the `merchantId` specified in the path.
     * 
     * To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):
     * * Management API—Users read and write
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersResponse
     */
	public function postMerchantsMerchantIdUsers(
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/merchants/{merchantId}/users', \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createMerchantUserRequest", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostMerchantsMerchantIdUsersResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createUserResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CreateUserResponse', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->restServiceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\RestServiceError', 'json');
            }
        }

        return $response;
    }
}