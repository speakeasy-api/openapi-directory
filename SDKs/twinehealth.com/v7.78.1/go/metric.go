// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"context"
	"fmt"
	"net/http"
	"openapi/pkg/models/operations"
	"openapi/pkg/models/shared"
	"openapi/pkg/utils"
	"strings"
)

// metric - A metric is a quantitative result for a patient. For example, vital signs, lab results, etc. are all metrics.
type metric struct {
	defaultClient  HTTPClient
	securityClient HTTPClient
	serverURL      string
	language       string
	sdkVersion     string
	genVersion     string
}

func newMetric(defaultClient, securityClient HTTPClient, serverURL, language, sdkVersion, genVersion string) *metric {
	return &metric{
		defaultClient:  defaultClient,
		securityClient: securityClient,
		serverURL:      serverURL,
		language:       language,
		sdkVersion:     sdkVersion,
		genVersion:     genVersion,
	}
}

// CreatePatientHealthMetric - Create patient health metrics
// Create one or more patient health metrics.
//
// Example for creating a patient health result with a patient specified using `meta.query` instead of `id`:
//
// ```JSON
//
//	{
//	  "data": {
//	    "type": "patient_health_metric",
//	     "attributes": {
//	       "code": {
//	         "system": "LOINC",
//	         "value": "13457-7"
//	       },
//	       "type": "ldl_cholesterol",
//	       "occurred_at": "2017-03-14T11:00:57.000Z",
//	       "value": 121,
//	       "unit": "mg/dl"
//	    },
//	    "relationships": {
//	      "patient": {
//	        "data": {
//	          "type": "patient",
//	          "meta": {
//	            "query": {
//	              "identifier": {
//	                "system": "medical-record-number",
//	                "value": "121212"
//	              },
//	              "organization": "58c4554710123c5c40dbab81"
//	            }
//	          }
//	        }
//	      }
//	    }
//	  }
//	}
//
// ```
func (s *metric) CreatePatientHealthMetric(ctx context.Context, request operations.CreatePatientHealthMetricRequest) (*operations.CreatePatientHealthMetricResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/patient_health_metric"

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, "Request", "json")
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	if bodyReader == nil {
		return nil, fmt.Errorf("request body is required")
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	req.Header.Set("Content-Type", reqContentType)

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.CreatePatientHealthMetricResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.CreatePatientHealthMetricResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.CreatePatientHealthMetricResponse = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 409:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.CreateOrUpdateErrorResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.CreateOrUpdateErrorResponse = out
		}
	}

	return res, nil
}

// FetchPatientHealthMetric - Get a patient health metric
// Get the plan summary for a patient.
func (s *metric) FetchPatientHealthMetric(ctx context.Context, request operations.FetchPatientHealthMetricRequest) (*operations.FetchPatientHealthMetricResponse, error) {
	baseURL := s.serverURL
	url := utils.GenerateURL(ctx, baseURL, "/patient_health_metric/{id}", request.PathParams, nil)

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.FetchPatientHealthMetricResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.FetchPatientHealthMetricResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FetchPatientHealthMetricResponse = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.FetchErrorResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FetchErrorResponse = out
		}
	}

	return res, nil
}

// FetchPatientHealthMetrics - List patient health metrics
// Get a list of patient health metrics.
func (s *metric) FetchPatientHealthMetrics(ctx context.Context, request operations.FetchPatientHealthMetricsRequest) (*operations.FetchPatientHealthMetricsResponse, error) {
	baseURL := s.serverURL
	url := strings.TrimSuffix(baseURL, "/") + "/patient_health_metric"

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}

	if err := utils.PopulateQueryParams(ctx, req, request.QueryParams, nil); err != nil {
		return nil, fmt.Errorf("error populating query params: %w", err)
	}

	client := s.defaultClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}
	defer httpRes.Body.Close()

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.FetchPatientHealthMetricsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.FetchPatientHealthMetricResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FetchPatientHealthMetricResponse = out
		}
	case httpRes.StatusCode == 401:
		fallthrough
	case httpRes.StatusCode == 403:
		fallthrough
	case httpRes.StatusCode == 409:
		switch {
		case utils.MatchContentType(contentType, `application/vnd.api+json`):
			var out *shared.FetchErrorResponse
			if err := utils.UnmarshalJsonFromResponseBody(httpRes.Body, &out); err != nil {
				return nil, err
			}

			res.FetchErrorResponse = out
		}
	}

	return res, nil
}
