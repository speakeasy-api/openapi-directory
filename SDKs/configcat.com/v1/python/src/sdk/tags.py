"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Tags:
    r"""With these endpoints you can manage Tags. Tags are stored under a Product. You can  and add a Tag to a Feature Flag or Setting using the [Update Flag](#operation/update-setting) endpoint."""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_tag(self, request: operations.CreateTagRequest) -> operations.CreateTagResponse:
        r"""Create Tag
        This endpoint creates a new Tag in a specified Product 
        identified by the `productId` parameter, which can be obtained from the [List Products](#operation/get-products) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.CreateTagRequest, base_url, '/v1/products/{productId}/tags', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "create_tag_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 201:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModelHaljson])
                res.tag_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModel])
                res.tag_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def delete_tag(self, request: operations.DeleteTagRequest) -> operations.DeleteTagResponse:
        r"""Delete Tag
        This endpoint deletes a Tag identified by the `tagId` parameter. To remove a Tag from a Feature Flag or Setting use the [Update Flag](#operation/update-setting) endpoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteTagRequest, base_url, '/v1/tags/{tagId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_settings_by_tag(self, request: operations.GetSettingsByTagRequest) -> operations.GetSettingsByTagResponse:
        r"""List Settings by Tag
        This endpoint returns the list of the Settings that 
        has the specified Tag, identified by the `tagId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSettingsByTagRequest, base_url, '/v1/tags/{tagId}/settings', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSettingsByTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SettingModelHaljson]])
                res.setting_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.SettingModel]])
                res.setting_models = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_tag(self, request: operations.GetTagRequest) -> operations.GetTagResponse:
        r"""Get Tag
        This endpoint returns the metadata of a Tag 
        identified by the `tagId`.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagRequest, base_url, '/v1/tags/{tagId}', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModelHaljson])
                res.tag_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModel])
                res.tag_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    def get_tags(self, request: operations.GetTagsRequest) -> operations.GetTagsResponse:
        r"""List Tags
        This endpoint returns the list of the Tags in a 
        specified Product, identified by the `productId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetTagsRequest, base_url, '/v1/products/{productId}/tags', request)
        
        
        client = self._security_client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetTagsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagModelHaljson]])
                res.tag_model_haljsons = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.TagModel]])
                res.tag_models = out
        elif http_res.status_code in [401, 429]:
            pass

        return res

    def update_tag(self, request: operations.UpdateTagRequest) -> operations.UpdateTagResponse:
        r"""Update Tag
        This endpoint updates a Tag identified by the `tagId` parameter.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateTagRequest, base_url, '/v1/tags/{tagId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "update_tag_model", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        
        client = self._security_client
        
        http_res = client.request('PUT', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateTagResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/hal+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModelHaljson])
                res.tag_model_haljson = out
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagModel])
                res.tag_model = out
        elif http_res.status_code in [400, 401, 404, 429]:
            pass

        return res

    