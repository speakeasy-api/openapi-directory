<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


class SaveTransactionWithId
{
	#[\JMS\Serializer\Annotation\SerializedName('account_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $accountId = null;
    
    /**
     * The transaction amount in milliunits format.  Split transaction amounts cannot be changed and if a different amount is supplied it will be ignored.
     * 
     * @var ?int $amount
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $amount = null;
    
    /**
     * Whether or not the transaction is approved.  If not supplied, transaction will be unapproved by default.
     * 
     * @var ?bool $approved
     */
	#[\JMS\Serializer\Annotation\SerializedName('approved')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $approved = null;
    
    /**
     * The category for the transaction.  To configure a split transaction, you can specify null for `category_id` and provide a `subtransactions` array as part of the transaction object.  If an existing transaction is a split, the `category_id` cannot be changed.  Credit Card Payment categories are not permitted and will be ignored if supplied.
     * 
     * @var ?string $categoryId
     */
	#[\JMS\Serializer\Annotation\SerializedName('category_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $categoryId = null;
    
    /**
     * The cleared status of the transaction
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SaveTransactionWithIdClearedEnum $cleared
     */
	#[\JMS\Serializer\Annotation\SerializedName('cleared')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SaveTransactionWithIdClearedEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SaveTransactionWithIdClearedEnum $cleared = null;
    
    /**
     * The transaction date in ISO format (e.g. 2016-12-01).  Future dates (scheduled transactions) are not permitted.  Split transaction dates cannot be changed and if a different date is supplied it will be ignored.
     * 
     * @var ?\DateTime $date
     */
	#[\JMS\Serializer\Annotation\SerializedName('date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d', '', '|Y-m-d'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $date = null;
    
    /**
     * The transaction flag
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\SaveTransactionWithIdFlagColorEnum $flagColor
     */
	#[\JMS\Serializer\Annotation\SerializedName('flag_color')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\SaveTransactionWithIdFlagColorEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?SaveTransactionWithIdFlagColorEnum $flagColor = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $id = null;
    
    /**
     * If specified, the new transaction will be assigned this `import_id` and considered "imported".  We will also attempt to match this imported transaction to an existing "user-entered" transation on the same account, with the same amount, and with a date +/-10 days from the imported transaction date.<br><br>Transactions imported through File Based Import or Direct Import (not through the API) are assigned an import_id in the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'. For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.  Using a consistent format will prevent duplicates through Direct Import and File Based Import.<br><br>If import_id is omitted or specified as null, the transaction will be treated as a "user-entered" transaction. As such, it will be eligible to be matched against transactions later being imported (via DI, FBI, or API).
     * 
     * @var ?string $importId
     */
	#[\JMS\Serializer\Annotation\SerializedName('import_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $importId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('memo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $memo = null;
    
    /**
     * The payee for the transaction.  To create a transfer between two accounts, use the account transfer payee pointing to the target account.  Account transfer payees are specified as `tranfer_payee_id` on the account resource.
     * 
     * @var ?string $payeeId
     */
	#[\JMS\Serializer\Annotation\SerializedName('payee_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payeeId = null;
    
    /**
     * The payee name.  If a `payee_name` value is provided and `payee_id` has a null value, the `payee_name` value will be used to resolve the payee by either (1) a matching payee rename rule (only if `import_id` is also specified) or (2) a payee with the same name or (3) creation of a new payee.
     * 
     * @var ?string $payeeName
     */
	#[\JMS\Serializer\Annotation\SerializedName('payee_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $payeeName = null;
    
    /**
     * An array of subtransactions to configure a transaction as a split.  Updating `subtransactions` on an existing split transaction is not supported.
     * 
     * @var ?array<\OpenAPI\OpenAPI\Models\Shared\SaveSubTransaction> $subtransactions
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtransactions')]
    #[\JMS\Serializer\Annotation\Type('array<OpenAPI\OpenAPI\Models\Shared\SaveSubTransaction>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $subtransactions = null;
    
	public function __construct()
	{
		$this->accountId = null;
		$this->amount = null;
		$this->approved = null;
		$this->categoryId = null;
		$this->cleared = null;
		$this->date = null;
		$this->flagColor = null;
		$this->id = null;
		$this->importId = null;
		$this->memo = null;
		$this->payeeId = null;
		$this->payeeName = null;
		$this->subtransactions = null;
	}
}
