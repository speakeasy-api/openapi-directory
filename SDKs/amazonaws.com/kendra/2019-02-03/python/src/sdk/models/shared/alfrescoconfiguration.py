"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alfrescoentity_enum as shared_alfrescoentity_enum
from ..shared import datasourcetoindexfieldmapping as shared_datasourcetoindexfieldmapping
from ..shared import datasourcevpcconfiguration as shared_datasourcevpcconfiguration
from ..shared import s3path as shared_s3path
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AlfrescoConfiguration:
    r"""<p>Provides the configuration information to connect to Alfresco as your data source.</p> <note> <p>Alfresco data source connector is currently in preview mode. Basic authentication is currently supported. If you would like to use Alfresco connector in production, contact <a href=\\"http://aws.amazon.com/contact-us/\\">Support</a>.</p> </note>"""
    
    secret_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SecretArn') }})  
    site_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SiteId') }})  
    site_url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SiteUrl') }})  
    ssl_certificate_s3_path: shared_s3path.S3Path = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SslCertificateS3Path') }})  
    blog_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('BlogFieldMappings'), 'exclude': lambda f: f is None }})  
    crawl_comments: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlComments'), 'exclude': lambda f: f is None }})  
    crawl_system_folders: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CrawlSystemFolders'), 'exclude': lambda f: f is None }})  
    document_library_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentLibraryFieldMappings'), 'exclude': lambda f: f is None }})  
    entity_filter: Optional[list[shared_alfrescoentity_enum.AlfrescoEntityEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EntityFilter'), 'exclude': lambda f: f is None }})  
    exclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ExclusionPatterns'), 'exclude': lambda f: f is None }})  
    inclusion_patterns: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('InclusionPatterns'), 'exclude': lambda f: f is None }})  
    vpc_configuration: Optional[shared_datasourcevpcconfiguration.DataSourceVpcConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfiguration'), 'exclude': lambda f: f is None }})  
    wiki_field_mappings: Optional[list[shared_datasourcetoindexfieldmapping.DataSourceToIndexFieldMapping]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WikiFieldMappings'), 'exclude': lambda f: f is None }})  
    