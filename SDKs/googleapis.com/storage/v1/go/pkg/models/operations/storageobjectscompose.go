// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type StorageObjectsComposeSecurityOption1 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageObjectsComposeSecurityOption2 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageObjectsComposeSecurityOption3 struct {
	Oauth2  string `security:"scheme,type=oauth2,name=Authorization"`
	Oauth2c string `security:"scheme,type=oauth2,name=Authorization"`
}

type StorageObjectsComposeSecurity struct {
	Option1 *StorageObjectsComposeSecurityOption1 `security:"option"`
	Option2 *StorageObjectsComposeSecurityOption2 `security:"option"`
	Option3 *StorageObjectsComposeSecurityOption3 `security:"option"`
}

// StorageObjectsComposeDestinationPredefinedACLEnum - Apply a predefined set of access controls to the destination object.
type StorageObjectsComposeDestinationPredefinedACLEnum string

const (
	StorageObjectsComposeDestinationPredefinedACLEnumAuthenticatedRead      StorageObjectsComposeDestinationPredefinedACLEnum = "authenticatedRead"
	StorageObjectsComposeDestinationPredefinedACLEnumBucketOwnerFullControl StorageObjectsComposeDestinationPredefinedACLEnum = "bucketOwnerFullControl"
	StorageObjectsComposeDestinationPredefinedACLEnumBucketOwnerRead        StorageObjectsComposeDestinationPredefinedACLEnum = "bucketOwnerRead"
	StorageObjectsComposeDestinationPredefinedACLEnumPrivate                StorageObjectsComposeDestinationPredefinedACLEnum = "private"
	StorageObjectsComposeDestinationPredefinedACLEnumProjectPrivate         StorageObjectsComposeDestinationPredefinedACLEnum = "projectPrivate"
	StorageObjectsComposeDestinationPredefinedACLEnumPublicRead             StorageObjectsComposeDestinationPredefinedACLEnum = "publicRead"
)

func (e *StorageObjectsComposeDestinationPredefinedACLEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "authenticatedRead":
		fallthrough
	case "bucketOwnerFullControl":
		fallthrough
	case "bucketOwnerRead":
		fallthrough
	case "private":
		fallthrough
	case "projectPrivate":
		fallthrough
	case "publicRead":
		*e = StorageObjectsComposeDestinationPredefinedACLEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageObjectsComposeDestinationPredefinedACLEnum: %s", s)
	}
}

type StorageObjectsComposeRequest struct {
	ComposeRequest *shared.ComposeRequest `request:"mediaType=application/json"`
	// Data format for the response.
	Alt *shared.AltEnum `queryParam:"style=form,explode=true,name=alt"`
	// Name of the bucket containing the source objects. The destination object is stored in this bucket.
	DestinationBucket string `pathParam:"style=simple,explode=false,name=destinationBucket"`
	// Name of the new object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
	DestinationObject string `pathParam:"style=simple,explode=false,name=destinationObject"`
	// Apply a predefined set of access controls to the destination object.
	DestinationPredefinedACL *StorageObjectsComposeDestinationPredefinedACLEnum `queryParam:"style=form,explode=true,name=destinationPredefinedAcl"`
	// Selector specifying which fields to include in a partial response.
	Fields *string `queryParam:"style=form,explode=true,name=fields"`
	// Makes the operation conditional on whether the object's current generation matches the given value. Setting to 0 makes the operation succeed only if there are no live versions of the object.
	IfGenerationMatch *string `queryParam:"style=form,explode=true,name=ifGenerationMatch"`
	// Makes the operation conditional on whether the object's current metageneration matches the given value.
	IfMetagenerationMatch *string `queryParam:"style=form,explode=true,name=ifMetagenerationMatch"`
	// API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
	Key *string `queryParam:"style=form,explode=true,name=key"`
	// Resource name of the Cloud KMS key, of the form projects/my-project/locations/global/keyRings/my-kr/cryptoKeys/my-key, that will be used to encrypt the object. Overrides the object metadata's kms_key_name value, if any.
	KmsKeyName *string `queryParam:"style=form,explode=true,name=kmsKeyName"`
	// OAuth 2.0 token for the current user.
	OauthToken *string `queryParam:"style=form,explode=true,name=oauth_token"`
	// Returns response with indentations and line breaks.
	PrettyPrint *bool `queryParam:"style=form,explode=true,name=prettyPrint"`
	// An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
	QuotaUser *string `queryParam:"style=form,explode=true,name=quotaUser"`
	// Upload protocol for media (e.g. "media", "multipart", "resumable").
	UploadType *string `queryParam:"style=form,explode=true,name=uploadType"`
	// Deprecated. Please use quotaUser instead.
	UserIP *string `queryParam:"style=form,explode=true,name=userIp"`
	// The project to be billed for this request. Required for Requester Pays buckets.
	UserProject *string `queryParam:"style=form,explode=true,name=userProject"`
}

type StorageObjectsComposeResponse struct {
	ContentType string
	// Successful response
	Object      *shared.Object
	StatusCode  int
	RawResponse *http.Response
}
