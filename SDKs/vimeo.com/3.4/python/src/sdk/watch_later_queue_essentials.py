"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class WatchLaterQueueEssentials:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def add_video_to_watch_later(self, request: operations.AddVideoToWatchLaterRequest, security: operations.AddVideoToWatchLaterSecurity) -> operations.AddVideoToWatchLaterResponse:
        r"""Add a video to a user's Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToWatchLaterRequest, base_url, '/users/{user_id}/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToWatchLaterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def add_video_to_watch_later_alt1(self, request: operations.AddVideoToWatchLaterAlt1Request, security: operations.AddVideoToWatchLaterAlt1Security) -> operations.AddVideoToWatchLaterAlt1Response:
        r"""Add a video to a user's Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.AddVideoToWatchLaterAlt1Request, base_url, '/me/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.AddVideoToWatchLaterAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def check_watch_later_queue(self, request: operations.CheckWatchLaterQueueRequest, security: operations.CheckWatchLaterQueueSecurity) -> operations.CheckWatchLaterQueueResponse:
        r"""Check if a user has added a specific video to their Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckWatchLaterQueueRequest, base_url, '/users/{user_id}/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckWatchLaterQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def check_watch_later_queue_alt1(self, request: operations.CheckWatchLaterQueueAlt1Request, security: operations.CheckWatchLaterQueueAlt1Security) -> operations.CheckWatchLaterQueueAlt1Response:
        r"""Check if a user has added a specific video to their Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CheckWatchLaterQueueAlt1Request, base_url, '/me/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CheckWatchLaterQueueAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Video])
                res.video = out
        elif http_res.status_code == 404:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.LegacyError])
                res.legacy_error = out

        return res

    def delete_video_from_watch_later(self, request: operations.DeleteVideoFromWatchLaterRequest, security: operations.DeleteVideoFromWatchLaterSecurity) -> operations.DeleteVideoFromWatchLaterResponse:
        r"""Remove a video from a user's Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromWatchLaterRequest, base_url, '/users/{user_id}/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromWatchLaterResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def delete_video_from_watch_later_alt1(self, request: operations.DeleteVideoFromWatchLaterAlt1Request, security: operations.DeleteVideoFromWatchLaterAlt1Security) -> operations.DeleteVideoFromWatchLaterAlt1Response:
        r"""Remove a video from a user's Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteVideoFromWatchLaterAlt1Request, base_url, '/me/watchlater/{video_id}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteVideoFromWatchLaterAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_watch_later_queue(self, request: operations.GetWatchLaterQueueRequest, security: operations.GetWatchLaterQueueSecurity) -> operations.GetWatchLaterQueueResponse:
        r"""Get all the videos in a user's Watch Later queue"""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWatchLaterQueueRequest, base_url, '/users/{user_id}/watchlater', request)
        
        query_params = utils.get_query_params(operations.GetWatchLaterQueueRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWatchLaterQueueResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code == 304:
            pass

        return res

    def get_watch_later_queue_alt1(self, request: operations.GetWatchLaterQueueAlt1Request, security: operations.GetWatchLaterQueueAlt1Security) -> operations.GetWatchLaterQueueAlt1Response:
        r"""Get all the videos in a user's Watch Later queue"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/me/watchlater'
        
        query_params = utils.get_query_params(operations.GetWatchLaterQueueAlt1Request, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWatchLaterQueueAlt1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/vnd.vimeo.video+json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Video]])
                res.videos = out
        elif http_res.status_code == 304:
            pass

        return res

    