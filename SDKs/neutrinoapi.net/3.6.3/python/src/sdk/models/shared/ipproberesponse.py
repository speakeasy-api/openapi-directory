"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IPProbeResponse:
    
    as_age: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-age') }})
    r"""The age of the autonomous system (AS) in number of years since registration"""  
    as_cidr: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-cidr') }})
    r"""The autonomous system (AS) CIDR range"""  
    as_country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-country-code') }})
    r"""The autonomous system (AS) ISO 2-letter country code"""  
    as_country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-country-code3') }})
    r"""The autonomous system (AS) ISO 3-letter country code"""  
    as_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-description') }})
    r"""The autonomous system (AS) description / company name"""  
    as_domains: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('as-domains') }})
    r"""Array of all the domains associated with the autonomous system (AS)"""  
    asn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('asn') }})
    r"""The autonomous system (AS) number"""  
    city: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('city') }})
    r"""Full city name (if detectable)"""  
    continent_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('continent-code') }})
    r"""ISO 2-letter continent code"""  
    country: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country') }})
    r"""Full country name"""  
    country_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code') }})
    r"""ISO 2-letter country code"""  
    country_code3: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('country-code3') }})
    r"""ISO 3-letter country code"""  
    currency_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currency-code') }})
    r"""ISO 4217 currency code associated with the country"""  
    host_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('host-domain') }})
    r"""The IPs host domain"""  
    hostname: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hostname') }})
    r"""The IPs full hostname (PTR)"""  
    ip: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ip') }})
    r"""The IP address"""  
    is_bogon: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-bogon') }})
    r"""True if this is a bogon IP address such as a private network, local network or reserved address"""  
    is_hosting: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-hosting') }})
    r"""True if this IP belongs to a hosting company. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types"""  
    is_isp: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-isp') }})
    r"""True if this IP belongs to an internet service provider. Note that this can still be true even if the provider type is VPN/proxy, this occurs in the case that the IP is detected as both types"""  
    is_proxy: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-proxy') }})
    r"""True if this IP ia a proxy"""  
    is_v4_mapped: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-v4-mapped') }})
    r"""True if this is a <a href=\\"https://en.wikipedia.org/wiki/IPv6#IPv4-mapped_IPv6_addresses\\">IPv4 mapped IPv6 address</a>"""  
    is_v6: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-v6') }})
    r"""True if this is a IPv6 address. False if IPv4"""  
    is_vpn: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is-vpn') }})
    r"""True if this IP ia a VPN"""  
    provider_description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider-description') }})
    r"""A description of the provider (usually extracted from the providers website)"""  
    provider_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider-domain') }})
    r"""The domain name of the provider"""  
    provider_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider-type') }})
    r"""The detected provider type, possible values are: <br> <ul> <li>isp - IP belongs to an internet service provider. This includes both mobile, home and business internet providers</li> <li>hosting - IP belongs to a hosting company. This includes website hosting, cloud computing platforms and colocation facilities</li> <li>vpn - IP belongs to a VPN provider</li> <li>proxy - IP belongs to a proxy service. This includes HTTP/SOCKS proxies and browser based proxies</li> <li>university - IP belongs to a university/college/campus</li> <li>government - IP belongs to a government department. This includes military facilities</li> <li>commercial - IP belongs to a commercial entity such as a corporate headquarters or company office</li> <li>unknown - could not identify the provider type</li> </ul>"""  
    provider_website: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider-website') }})
    r"""The website URL for the provider"""  
    region: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region') }})
    r"""Full region name (if detectable)"""  
    region_code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('region-code') }})
    r"""ISO 3166-2 region code (if detectable)"""  
    valid: bool = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('valid') }})
    r"""True if this is a valid IPv4 or IPv6 address"""  
    vpn_domain: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vpn-domain') }})
    r"""The domain of the VPN provider (may be empty if the VPN domain is not detectable)"""  
    