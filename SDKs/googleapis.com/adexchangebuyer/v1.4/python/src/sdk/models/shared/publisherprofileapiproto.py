"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import mobileapplication as shared_mobileapplication
from ..shared import publisherprovidedforecast as shared_publisherprovidedforecast
from ..shared import seller as shared_seller
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PublisherProfileAPIProto:
    
    audience: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('audience'), 'exclude': lambda f: f is None }})
    r"""Publisher provided info on its audience."""  
    buyer_pitch_statement: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('buyerPitchStatement'), 'exclude': lambda f: f is None }})
    r"""A pitch statement for the buyer"""  
    direct_contact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('directContact'), 'exclude': lambda f: f is None }})
    r"""Direct contact for the publisher profile."""  
    exchange: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('exchange'), 'exclude': lambda f: f is None }})
    r"""Exchange where this publisher profile is from. E.g. AdX, Rubicon etc..."""  
    forecast_inventory: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('forecastInventory'), 'exclude': lambda f: f is None }})  
    google_plus_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('googlePlusLink'), 'exclude': lambda f: f is None }})
    r"""Link to publisher's Google+ page."""  
    is_parent: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isParent'), 'exclude': lambda f: f is None }})
    r"""True, if this is the parent profile, which represents all domains owned by the publisher."""  
    is_published: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isPublished'), 'exclude': lambda f: f is None }})
    r"""True, if this profile is published. Deprecated for state."""  
    kind: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('kind'), 'exclude': lambda f: f is None }})
    r"""Identifies what kind of resource this is. Value: the fixed string \\"adexchangebuyer#publisherProfileApiProto\\"."""  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logoUrl'), 'exclude': lambda f: f is None }})
    r"""The url to the logo for the publisher."""  
    media_kit_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mediaKitLink'), 'exclude': lambda f: f is None }})
    r"""The url for additional marketing and sales materials."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})  
    overview: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('overview'), 'exclude': lambda f: f is None }})
    r"""Publisher provided overview."""  
    profile_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profileId'), 'exclude': lambda f: f is None }})
    r"""The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher."""  
    programmatic_contact: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('programmaticContact'), 'exclude': lambda f: f is None }})
    r"""Programmatic contact for the publisher profile."""  
    publisher_app_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherAppIds'), 'exclude': lambda f: f is None }})
    r"""The list of app IDs represented in this publisher profile. Empty if this is a parent profile. Deprecated in favor of publisher_app."""  
    publisher_apps: Optional[list[shared_mobileapplication.MobileApplication]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherApps'), 'exclude': lambda f: f is None }})
    r"""The list of apps represented in this publisher profile. Empty if this is a parent profile."""  
    publisher_domains: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherDomains'), 'exclude': lambda f: f is None }})
    r"""The list of domains represented in this publisher profile. Empty if this is a parent profile."""  
    publisher_profile_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProfileId'), 'exclude': lambda f: f is None }})
    r"""Unique Id for publisher profile."""  
    publisher_provided_forecast: Optional[shared_publisherprovidedforecast.PublisherProvidedForecast] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('publisherProvidedForecast'), 'exclude': lambda f: f is None }})
    r"""This message carries publisher provided forecasting information."""  
    rate_card_info_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rateCardInfoLink'), 'exclude': lambda f: f is None }})
    r"""Link to publisher rate card"""  
    sample_page_link: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('samplePageLink'), 'exclude': lambda f: f is None }})
    r"""Link for a sample content page."""  
    seller: Optional[shared_seller.Seller] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seller'), 'exclude': lambda f: f is None }})  
    state: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""State of the publisher profile."""  
    top_headlines: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('topHeadlines'), 'exclude': lambda f: f is None }})
    r"""Publisher provided key metrics and rankings."""  
    