"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import meetingscapability as shared_meetingscapability
from ..shared import messagescapability as shared_messagescapability
from ..shared import rtccapability as shared_rtccapability
from ..shared import verifycapability as shared_verifycapability
from ..shared import voicecapability as shared_voicecapability
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Capabilities:
    r"""Your application can use multiple products. This contains the configuration for each product. This replaces the application `type` from version 1 of the Application API."""
    
    meetings: Optional[shared_meetingscapability.MeetingsCapability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meetings'), 'exclude': lambda f: f is None }})
    r"""Meetings related configuration"""  
    messages: Optional[shared_messagescapability.MessagesCapability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('messages'), 'exclude': lambda f: f is None }})
    r"""Messages / Dispatch related configuration"""  
    rtc: Optional[shared_rtccapability.RtcCapability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rtc'), 'exclude': lambda f: f is None }})
    r"""RTC / Conversation Service related configuration"""  
    vbc: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('vbc'), 'exclude': lambda f: f is None }})
    r"""Specify the `vbc` capability to enable zero-rated calls for VBC number programmability service applications. This is always an empty object."""  
    verify: Optional[shared_verifycapability.VerifyCapability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verify'), 'exclude': lambda f: f is None }})
    r"""Two factor authentication related configuration"""  
    voice: Optional[shared_voicecapability.VoiceCapability] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice'), 'exclude': lambda f: f is None }})
    r"""Voice related configuration"""  
    