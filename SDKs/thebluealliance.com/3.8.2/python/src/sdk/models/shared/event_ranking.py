"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import wlt_record as shared_wlt_record
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventRankingExtraStatsInfo:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the field used in the `extra_stats` array."""  
    precision: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision') }})
    r"""Integer expressing the number of digits of precision in the number provided in `sort_orders`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventRankingRankings:
    
    dq: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dq') }})
    r"""Number of times disqualified."""  
    matches_played: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('matches_played') }})
    r"""Number of matches played by this team."""  
    rank: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rank') }})
    r"""The team's rank at the event as provided by FIRST."""  
    record: shared_wlt_record.WLTRecord = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('record') }})
    r"""A Win-Loss-Tie record for a team, or an alliance."""  
    team_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('team_key') }})
    r"""The team with this rank."""  
    extra_stats: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra_stats'), 'exclude': lambda f: f is None }})
    r"""Additional special data on the team's performance calculated by TBA."""  
    qual_average: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('qual_average'), 'exclude': lambda f: f is None }})
    r"""The average match score during qualifications. Year specific. May be null if not relevant for a given year."""  
    sort_orders: Optional[list[float]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_orders'), 'exclude': lambda f: f is None }})
    r"""Additional year-specific information, may be null. See parent `sort_order_info` for details."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventRankingSortOrderInfo:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Name of the field used in the `sort_order` array."""  
    precision: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('precision') }})
    r"""Integer expressing the number of digits of precision in the number provided in `sort_orders`."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EventRanking:
    r"""Successful response"""
    
    rankings: list[EventRankingRankings] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rankings') }})
    r"""List of rankings at the event."""  
    sort_order_info: list[EventRankingSortOrderInfo] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sort_order_info') }})
    r"""List of year-specific values provided in the `sort_orders` array for each team."""  
    extra_stats_info: Optional[list[EventRankingExtraStatsInfo]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('extra_stats_info'), 'exclude': lambda f: f is None }})
    r"""List of special TBA-generated values provided in the `extra_stats` array for each item."""  
    