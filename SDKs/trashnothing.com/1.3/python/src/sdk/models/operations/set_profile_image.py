"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import currentuser as shared_currentuser
from ..shared import photoresult as shared_photoresult
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class SetProfileImageRequestBodyPhoto:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    photo: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'photo' }})  
    

@dataclasses.dataclass
class SetProfileImageRequestBody:
    
    crop: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'crop' }})
    r"""If the photo needs to be cropped, a JSON encoded object with the crop arguments can be passed. The supported crop arguments are below.  All arguments except rotate are required. <br /><br /> - **original_width**: Original width of the photo before being cropped or rotated (in pixels).<br /> - **original_height**: Original height of the photo before being cropped or rotated (in pixels).<br /> - **x**: The x-coordinate of the top left corner of the cropped area.<br /> - **y**: The y-coordinate of the top left corner of the cropped area.<br /> - **size**: The size of the square cropped area.<br /> - **rotate**: (optional) The number of degrees to rotate the image before cropping.
      Currently only 90, 180 and 270 are supported which correspond to rotate left, rotate upside down and rotate right.
    <br />
    """  
    device_pixel_ratio: Optional[float] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'device_pixel_ratio' }})
    r"""Client device pixel ratio used to determine thumbnail size (default 1.0)."""  
    photo: Optional[SetProfileImageRequestBodyPhoto] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Photo to upload."""  
    photo_id: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'photo_id' }})
    r"""Photo to use (if already uploaded)."""  
    set_default: Optional[int] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'set_default' }})
    r"""Whether or not to set the photo as the users' default profile image.  Set to 1 to enable and 0 to disable."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SetProfileImage200ApplicationJSON:
    r"""The updated user and the photo."""
    
    photo: Optional[shared_photoresult.PhotoResult] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('photo'), 'exclude': lambda f: f is None }})
    r"""The result of uploading or editing a photo."""  
    user: Optional[shared_currentuser.CurrentUser] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class SetProfileImageResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    set_profile_image_200_application_json_object: Optional[SetProfileImage200ApplicationJSON] = dataclasses.field(default=None)
    r"""The updated user and the photo."""  
    