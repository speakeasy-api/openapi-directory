"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import borders as shared_borders
from ..shared import color as shared_color
from ..shared import colorstyle as shared_colorstyle
from ..shared import numberformat as shared_numberformat
from ..shared import padding as shared_padding
from ..shared import textformat as shared_textformat
from ..shared import textrotation as shared_textrotation
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class CellFormatHorizontalAlignmentEnum(str, Enum):
    r"""The horizontal alignment of the value in the cell."""
    HORIZONTAL_ALIGN_UNSPECIFIED = 'HORIZONTAL_ALIGN_UNSPECIFIED'
    LEFT = 'LEFT'
    CENTER = 'CENTER'
    RIGHT = 'RIGHT'

class CellFormatHyperlinkDisplayTypeEnum(str, Enum):
    r"""If one exists, how a hyperlink should be displayed in the cell."""
    HYPERLINK_DISPLAY_TYPE_UNSPECIFIED = 'HYPERLINK_DISPLAY_TYPE_UNSPECIFIED'
    LINKED = 'LINKED'
    PLAIN_TEXT = 'PLAIN_TEXT'

class CellFormatTextDirectionEnum(str, Enum):
    r"""The direction of the text in the cell."""
    TEXT_DIRECTION_UNSPECIFIED = 'TEXT_DIRECTION_UNSPECIFIED'
    LEFT_TO_RIGHT = 'LEFT_TO_RIGHT'
    RIGHT_TO_LEFT = 'RIGHT_TO_LEFT'

class CellFormatVerticalAlignmentEnum(str, Enum):
    r"""The vertical alignment of the value in the cell."""
    VERTICAL_ALIGN_UNSPECIFIED = 'VERTICAL_ALIGN_UNSPECIFIED'
    TOP = 'TOP'
    MIDDLE = 'MIDDLE'
    BOTTOM = 'BOTTOM'

class CellFormatWrapStrategyEnum(str, Enum):
    r"""The wrap strategy for the value in the cell."""
    WRAP_STRATEGY_UNSPECIFIED = 'WRAP_STRATEGY_UNSPECIFIED'
    OVERFLOW_CELL = 'OVERFLOW_CELL'
    LEGACY_WRAP = 'LEGACY_WRAP'
    CLIP = 'CLIP'
    WRAP = 'WRAP'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CellFormat:
    r"""The format of a cell."""
    
    background_color: Optional[shared_color.Color] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundColor'), 'exclude': lambda f: f is None }})
    r"""Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ..."""  
    background_color_style: Optional[shared_colorstyle.ColorStyle] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('backgroundColorStyle'), 'exclude': lambda f: f is None }})
    r"""A color value."""  
    borders: Optional[shared_borders.Borders] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('borders'), 'exclude': lambda f: f is None }})
    r"""The borders of the cell."""  
    horizontal_alignment: Optional[CellFormatHorizontalAlignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('horizontalAlignment'), 'exclude': lambda f: f is None }})
    r"""The horizontal alignment of the value in the cell."""  
    hyperlink_display_type: Optional[CellFormatHyperlinkDisplayTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperlinkDisplayType'), 'exclude': lambda f: f is None }})
    r"""If one exists, how a hyperlink should be displayed in the cell."""  
    number_format: Optional[shared_numberformat.NumberFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberFormat'), 'exclude': lambda f: f is None }})
    r"""The number format of a cell."""  
    padding: Optional[shared_padding.Padding] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('padding'), 'exclude': lambda f: f is None }})
    r"""The amount of padding around the cell, in pixels. When updating padding, every field must be specified."""  
    text_direction: Optional[CellFormatTextDirectionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textDirection'), 'exclude': lambda f: f is None }})
    r"""The direction of the text in the cell."""  
    text_format: Optional[shared_textformat.TextFormat] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textFormat'), 'exclude': lambda f: f is None }})
    r"""The format of a run of text in a cell. Absent values indicate that the field isn't specified."""  
    text_rotation: Optional[shared_textrotation.TextRotation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('textRotation'), 'exclude': lambda f: f is None }})
    r"""The rotation applied to text in a cell."""  
    vertical_alignment: Optional[CellFormatVerticalAlignmentEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('verticalAlignment'), 'exclude': lambda f: f is None }})
    r"""The vertical alignment of the value in the cell."""  
    wrap_strategy: Optional[CellFormatWrapStrategyEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wrapStrategy'), 'exclude': lambda f: f is None }})
    r"""The wrap strategy for the value in the cell."""  
    