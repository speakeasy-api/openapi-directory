"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import nestedvirtualmachine as shared_nestedvirtualmachine
from ..shared import nestedvlan as shared_nestedvlan
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class VirtualMachineInterfaceModeLabelEnum(str, Enum):
    ACCESS = 'Access'
    TAGGED = 'Tagged'
    TAGGED_ALL_ = 'Tagged (All)'

class VirtualMachineInterfaceModeValueEnum(str, Enum):
    ACCESS = 'access'
    TAGGED = 'tagged'
    TAGGED_ALL = 'tagged-all'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineInterfaceMode:
    
    label: VirtualMachineInterfaceModeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: VirtualMachineInterfaceModeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    
class VirtualMachineInterfaceTypeLabelEnum(str, Enum):
    VIRTUAL = 'Virtual'

class VirtualMachineInterfaceTypeValueEnum(str, Enum):
    VIRTUAL = 'virtual'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineInterfaceType:
    
    label: VirtualMachineInterfaceTypeLabelEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label') }})  
    value: VirtualMachineInterfaceTypeValueEnum = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class VirtualMachineInterface:
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})  
    virtual_machine: shared_nestedvirtualmachine.NestedVirtualMachine = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('virtual_machine') }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})  
    mac_address: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac_address'), 'exclude': lambda f: f is None }})  
    mode: Optional[VirtualMachineInterfaceMode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mode'), 'exclude': lambda f: f is None }})  
    mtu: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mtu'), 'exclude': lambda f: f is None }})  
    tagged_vlans: Optional[list[shared_nestedvlan.NestedVLAN]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tagged_vlans'), 'exclude': lambda f: f is None }})  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})  
    type: Optional[VirtualMachineInterfaceType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})  
    untagged_vlan: Optional[shared_nestedvlan.NestedVLAN] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('untagged_vlan'), 'exclude': lambda f: f is None }})  
    