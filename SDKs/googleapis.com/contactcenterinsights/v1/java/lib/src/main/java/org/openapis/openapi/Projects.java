/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class Projects {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Projects(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Creates an analysis. The long running operation is done when the analysis has completed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse contactcenterinsightsProjectsLocationsConversationsAnalysesCreate(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest.class, baseUrl, "/v1/{parent}/analyses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1AnalysisInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesCreateResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Lists analyses.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse contactcenterinsightsProjectsLocationsConversationsAnalysesList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest.class, baseUrl, "/v1/{parent}/analyses", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsAnalysesListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListAnalysesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListAnalysesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListAnalysesResponse.class);
                res.googleCloudContactcenterinsightsV1ListAnalysesResponse = out;
            }
        }

        return res;
    }

    /**
     * Analyzes multiple conversations in a single request.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse contactcenterinsightsProjectsLocationsConversationsBulkAnalyze(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest.class, baseUrl, "/v1/{parent}/conversations:bulkAnalyze", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1BulkAnalyzeConversationsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsBulkAnalyzeResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Gets conversation statistics.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse contactcenterinsightsProjectsLocationsConversationsCalculateStats(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest.class, baseUrl, "/v1/{location}/conversations:calculateStats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCalculateStatsResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1CalculateStatsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1CalculateStatsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1CalculateStatsResponse.class);
                res.googleCloudContactcenterinsightsV1CalculateStatsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a conversation.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse contactcenterinsightsProjectsLocationsConversationsCreate(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest.class, baseUrl, "/v1/{parent}/conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1ConversationInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsCreateResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1Conversation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1Conversation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1Conversation.class);
                res.googleCloudContactcenterinsightsV1Conversation = out;
            }
        }

        return res;
    }

    /**
     * Imports conversations and processes them according to the user's configuration.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse contactcenterinsightsProjectsLocationsConversationsIngest(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest.class, baseUrl, "/v1/{parent}/conversations:ingest", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1IngestConversationsRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsIngestResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Lists conversations.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListResponse contactcenterinsightsProjectsLocationsConversationsList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListRequest.class, baseUrl, "/v1/{parent}/conversations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListConversationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListConversationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListConversationsResponse.class);
                res.googleCloudContactcenterinsightsV1ListConversationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Create a longrunning conversation upload operation. This method differs from CreateConversation by allowing audio transcription and optional DLP redaction.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadResponse contactcenterinsightsProjectsLocationsConversationsUpload(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadRequest.class, baseUrl, "/v1/{parent}/conversations:upload", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1UploadConversationRequestInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsConversationsUploadResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Export insights data to a destination defined in the request body.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse contactcenterinsightsProjectsLocationsInsightsdataExport(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest.class, baseUrl, "/v1/{parent}/insightsdata:export", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1ExportInsightsDataRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsInsightsdataExportResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Gets an issue model's statistics.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse contactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStats(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest.class, baseUrl, "/v1/{issueModel}:calculateIssueModelStats", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCalculateIssueModelStatsResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse.class);
                res.googleCloudContactcenterinsightsV1CalculateIssueModelStatsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates an issue model.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse contactcenterinsightsProjectsLocationsIssueModelsCreate(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest.class, baseUrl, "/v1/{parent}/issueModels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1IssueModelInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsCreateResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse contactcenterinsightsProjectsLocationsIssueModelsDeploy(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeploySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest.class, baseUrl, "/v1/{name}:deploy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1DeployIssueModelRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsDeployResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Lists issues.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse contactcenterinsightsProjectsLocationsIssueModelsIssuesList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest.class, baseUrl, "/v1/{parent}/issues", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsIssuesListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListIssuesResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListIssuesResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListIssuesResponse.class);
                res.googleCloudContactcenterinsightsV1ListIssuesResponse = out;
            }
        }

        return res;
    }

    /**
     * Lists issue models.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse contactcenterinsightsProjectsLocationsIssueModelsList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest.class, baseUrl, "/v1/{parent}/issueModels", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListIssueModelsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListIssueModelsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListIssueModelsResponse.class);
                res.googleCloudContactcenterinsightsV1ListIssueModelsResponse = out;
            }
        }

        return res;
    }

    /**
     * Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse contactcenterinsightsProjectsLocationsIssueModelsUndeploy(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeploySecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest.class, baseUrl, "/v1/{name}:undeploy", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1UndeployIssueModelRequest", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsIssueModelsUndeployResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningOperation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningOperation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningOperation.class);
                res.googleLongrunningOperation = out;
            }
        }

        return res;
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse contactcenterinsightsProjectsLocationsOperationsCancel(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest.class, baseUrl, "/v1/{name}:cancel", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsCancelResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListResponse contactcenterinsightsProjectsLocationsOperationsList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListRequest.class, baseUrl, "/v1/{name}/operations", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsOperationsListResponse(contentType, httpRes.statusCode()) {{
            googleLongrunningListOperationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleLongrunningListOperationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleLongrunningListOperationsResponse.class);
                res.googleLongrunningListOperationsResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a phrase matcher.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse contactcenterinsightsProjectsLocationsPhraseMatchersCreate(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest.class, baseUrl, "/v1/{parent}/phraseMatchers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1PhraseMatcherInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersCreateResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1PhraseMatcher = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1PhraseMatcher out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1PhraseMatcher.class);
                res.googleCloudContactcenterinsightsV1PhraseMatcher = out;
            }
        }

        return res;
    }

    /**
     * Lists phrase matchers.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse contactcenterinsightsProjectsLocationsPhraseMatchersList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest.class, baseUrl, "/v1/{parent}/phraseMatchers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsPhraseMatchersListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListPhraseMatchersResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListPhraseMatchersResponse.class);
                res.googleCloudContactcenterinsightsV1ListPhraseMatchersResponse = out;
            }
        }

        return res;
    }

    /**
     * Creates a view.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse contactcenterinsightsProjectsLocationsViewsCreate(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest.class, baseUrl, "/v1/{parent}/views", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1ViewInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsCreateResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1View = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View.class);
                res.googleCloudContactcenterinsightsV1View = out;
            }
        }

        return res;
    }

    /**
     * Deletes a view.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse contactcenterinsightsProjectsLocationsViewsDelete(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsDeleteResponse(contentType, httpRes.statusCode()) {{
            googleProtobufEmpty = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, Object> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, Object>>() {});
                res.googleProtobufEmpty = out;
            }
        }

        return res;
    }

    /**
     * Gets a view.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetResponse contactcenterinsightsProjectsLocationsViewsGet(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsGetResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1View = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View.class);
                res.googleCloudContactcenterinsightsV1View = out;
            }
        }

        return res;
    }

    /**
     * Lists views.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListResponse contactcenterinsightsProjectsLocationsViewsList(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListRequest.class, baseUrl, "/v1/{parent}/views", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsListResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1ListViewsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListViewsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1ListViewsResponse.class);
                res.googleCloudContactcenterinsightsV1ListViewsResponse = out;
            }
        }

        return res;
    }

    /**
     * Updates a view.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse contactcenterinsightsProjectsLocationsViewsPatch(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest request, org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest.class, baseUrl, "/v1/{name}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "googleCloudContactcenterinsightsV1ViewInput", "json");
        req.setBody(serializedRequestBody);
        
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse res = new org.openapis.openapi.models.operations.ContactcenterinsightsProjectsLocationsViewsPatchResponse(contentType, httpRes.statusCode()) {{
            googleCloudContactcenterinsightsV1View = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.GoogleCloudContactcenterinsightsV1View.class);
                res.googleCloudContactcenterinsightsV1View = out;
            }
        }

        return res;
    }
}