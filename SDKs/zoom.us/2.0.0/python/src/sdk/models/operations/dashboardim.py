"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class DashboardIMSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    

@dataclasses.dataclass
class DashboardIMRequest:
    
    from_: date = dataclasses.field(metadata={'query_param': { 'field_name': 'from', 'style': 'form', 'explode': True }})
    r"""Start date in 'yyyy-mm-dd' format. The date range defined by the \\"from\\" and \\"to\\" parameters should only be one month as the report includes only one month worth of data at once."""  
    to: date = dataclasses.field(metadata={'query_param': { 'field_name': 'to', 'style': 'form', 'explode': True }})
    r"""End date."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'next_page_token', 'style': 'form', 'explode': True }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'page_size', 'style': 'form', 'explode': True }})
    r"""The number of records returned within a single API call."""  
    

@dataclasses.dataclass
class DashboardIM200ApplicationXMLUsers:
    
    calls_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of instant meeting calls received by the user."""  
    calls_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of instant meeting calls made by the user."""  
    email: Optional[str] = dataclasses.field(default=None)
    r"""User email."""  
    emoji_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of emojis received by the user."""  
    emoji_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of emojis sent by the user."""  
    files_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of files received by the user."""  
    files_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of files sent by the user."""  
    group_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of messages received by the user in channels."""  
    group_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of messages sent by the user in channels."""  
    images_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of images received by the user."""  
    images_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of images sent by the user."""  
    total_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of messages received by the user."""  
    total_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of messages sent by the user."""  
    user_id: Optional[str] = dataclasses.field(default=None)
    r"""User ID."""  
    user_name: Optional[str] = dataclasses.field(default=None)
    r"""User display name."""  
    videos_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of video files received by the user."""  
    videos_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of video files sent by the user."""  
    voice_receive: Optional[int] = dataclasses.field(default=None)
    r"""Total number of voice files received by the user."""  
    voice_send: Optional[int] = dataclasses.field(default=None)
    r"""Total number of voice files sent by the user."""  
    

@dataclasses.dataclass
class DashboardIM200ApplicationXML:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None)
    r"""Start date for this report."""  
    next_page_token: Optional[str] = dataclasses.field(default=None)
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None)
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None)
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None)
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None)
    r"""The number of all records available across pages."""  
    users: Optional[list[DashboardIM200ApplicationXMLUsers]] = dataclasses.field(default=None)  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIM200ApplicationJSONUsers:
    
    calls_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calls_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of instant meeting calls received by the user."""  
    calls_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calls_send'), 'exclude': lambda f: f is None }})
    r"""Total number of instant meeting calls made by the user."""  
    email: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('email'), 'exclude': lambda f: f is None }})
    r"""User email."""  
    emoji_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emoji_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of emojis received by the user."""  
    emoji_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('emoji_send'), 'exclude': lambda f: f is None }})
    r"""Total number of emojis sent by the user."""  
    files_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of files received by the user."""  
    files_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('files_send'), 'exclude': lambda f: f is None }})
    r"""Total number of files sent by the user."""  
    group_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of messages received by the user in channels."""  
    group_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_send'), 'exclude': lambda f: f is None }})
    r"""Total number of messages sent by the user in channels."""  
    images_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of images received by the user."""  
    images_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('images_send'), 'exclude': lambda f: f is None }})
    r"""Total number of images sent by the user."""  
    total_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of messages received by the user."""  
    total_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_send'), 'exclude': lambda f: f is None }})
    r"""Total number of messages sent by the user."""  
    user_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id'), 'exclude': lambda f: f is None }})
    r"""User ID."""  
    user_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_name'), 'exclude': lambda f: f is None }})
    r"""User display name."""  
    videos_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of video files received by the user."""  
    videos_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('videos_send'), 'exclude': lambda f: f is None }})
    r"""Total number of video files sent by the user."""  
    voice_receive: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_receive'), 'exclude': lambda f: f is None }})
    r"""Total number of voice files received by the user."""  
    voice_send: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice_send'), 'exclude': lambda f: f is None }})
    r"""Total number of voice files sent by the user."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DashboardIM200ApplicationJSON:
    r"""Pagination object."""
    
    from_: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('from'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""Start date for this report."""  
    next_page_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('next_page_token'), 'exclude': lambda f: f is None }})
    r"""The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes."""  
    page_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_count'), 'exclude': lambda f: f is None }})
    r"""The number of pages returned for the request made."""  
    page_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('page_size'), 'exclude': lambda f: f is None }})
    r"""The number of records returned within a single API call."""  
    to: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('to'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""End date for this report."""  
    total_records: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_records'), 'exclude': lambda f: f is None }})
    r"""The number of all records available across pages."""  
    users: Optional[list[DashboardIM200ApplicationJSONUsers]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('users'), 'exclude': lambda f: f is None }})  
    

@dataclasses.dataclass
class DashboardIMResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    body: Optional[bytes] = dataclasses.field(default=None)  
    dashboard_im_200_application_json_object: Optional[DashboardIM200ApplicationJSON] = dataclasses.field(default=None)
    r"""**HTTP Status Code:** `200`<br>
    IM details returned.<br>
    Only available for paid accounts that have enabled the dashboard feature.
    """  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    