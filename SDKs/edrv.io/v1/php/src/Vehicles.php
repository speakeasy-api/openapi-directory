<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Vehicles 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Get a vehicle's data
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleResponse
     */
	public function getVehicle(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}', \OpenAPI\OpenAPI\Models\Operations\GetVehicleRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVehicleRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a vehicle's battery
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryResponse
     */
	public function getVehicleBattery(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}/battery', \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleBatteryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a vehicle's charge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeResponse
     */
	public function getVehicleCharge(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}/charge', \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleChargeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a vehicle's location
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationResponse
     */
	public function getVehicleLocation(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}/location', \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleLocationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * Get a vehicle's odometer
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerResponse
     */
	public function getVehicleOdometer(
        \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}/odometer', \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehicleOdometerResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }

        return $response;
    }
	
    /**
     * List all vehicles
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse
     */
	public function getVehicles(
        \OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetVehiclesRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetVehiclesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getVehicles200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\GetVehicles200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
	
    /**
     * Change charge
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostChargeRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostChargeResponse
     */
	public function postCharge(
        \OpenAPI\OpenAPI\Models\Operations\PostChargeRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostChargeResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/vehicles/{id}/charge', \OpenAPI\OpenAPI\Models\Operations\PostChargeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostChargeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->postCharge200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\PostCharge200ApplicationJSON', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400) {
        }

        return $response;
    }
}