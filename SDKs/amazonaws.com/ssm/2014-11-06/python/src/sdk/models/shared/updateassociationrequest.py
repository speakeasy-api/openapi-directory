"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import alarmconfiguration as shared_alarmconfiguration
from ..shared import associationcomplianceseverity_enum as shared_associationcomplianceseverity_enum
from ..shared import associationsynccompliance_enum as shared_associationsynccompliance_enum
from ..shared import instanceassociationoutputlocation as shared_instanceassociationoutputlocation
from ..shared import target as shared_target
from ..shared import targetlocation as shared_targetlocation
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateAssociationRequest:
    
    association_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociationId') }})  
    alarm_configuration: Optional[shared_alarmconfiguration.AlarmConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AlarmConfiguration'), 'exclude': lambda f: f is None }})
    r"""The details for the CloudWatch alarm you want to apply to an automation or command."""  
    apply_only_at_cron_interval: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ApplyOnlyAtCronInterval'), 'exclude': lambda f: f is None }})  
    association_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociationName'), 'exclude': lambda f: f is None }})  
    association_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AssociationVersion'), 'exclude': lambda f: f is None }})  
    automation_target_parameter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AutomationTargetParameterName'), 'exclude': lambda f: f is None }})  
    calendar_names: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CalendarNames'), 'exclude': lambda f: f is None }})  
    compliance_severity: Optional[shared_associationcomplianceseverity_enum.AssociationComplianceSeverityEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ComplianceSeverity'), 'exclude': lambda f: f is None }})  
    document_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DocumentVersion'), 'exclude': lambda f: f is None }})  
    max_concurrency: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxConcurrency'), 'exclude': lambda f: f is None }})  
    max_errors: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MaxErrors'), 'exclude': lambda f: f is None }})  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Name'), 'exclude': lambda f: f is None }})  
    output_location: Optional[shared_instanceassociationoutputlocation.InstanceAssociationOutputLocation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OutputLocation'), 'exclude': lambda f: f is None }})  
    parameters: Optional[dict[str, list[str]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Parameters'), 'exclude': lambda f: f is None }})  
    schedule_expression: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScheduleExpression'), 'exclude': lambda f: f is None }})  
    schedule_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ScheduleOffset'), 'exclude': lambda f: f is None }})  
    sync_compliance: Optional[shared_associationsynccompliance_enum.AssociationSyncComplianceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SyncCompliance'), 'exclude': lambda f: f is None }})  
    target_locations: Optional[list[shared_targetlocation.TargetLocation]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetLocations'), 'exclude': lambda f: f is None }})  
    target_maps: Optional[list[dict[str, list[str]]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TargetMaps'), 'exclude': lambda f: f is None }})  
    targets: Optional[list[shared_target.Target]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Targets'), 'exclude': lambda f: f is None }})  
    