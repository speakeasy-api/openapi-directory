"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AccessTokenInfoResponse:
    r"""successful operation"""
    
    app_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id') }})  
    expires_in: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expires_in') }})  
    hub_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hub_id') }})  
    scope_to_scope_group_pks: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope_to_scope_group_pks') }})  
    scopes: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scopes') }})  
    token: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token') }})  
    token_type: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('token_type') }})  
    trial_scope_to_scope_group_pks: list[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trial_scope_to_scope_group_pks') }})  
    trial_scopes: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trial_scopes') }})  
    user_id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})  
    hub_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hub_domain'), 'exclude': lambda f: f is None }})  
    user: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user'), 'exclude': lambda f: f is None }})  
    