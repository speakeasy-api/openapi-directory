"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from typing import Optional


@dataclasses.dataclass
class NewProjectDocuments:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    documents: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'documents[]' }})  
    

@dataclasses.dataclass
class NewProjectGlossaries:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    glossaries: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'glossaries[]' }})  
    

@dataclasses.dataclass
class NewProjectStyleguides:
    
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})  
    styleguides: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'styleguides[]' }})  
    

@dataclasses.dataclass
class NewProject1:
    
    callback_url: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'callback_url' }})
    r"""Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'."""  
    coupon_code: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'coupon_code' }})
    r"""Coupon code to redeem"""  
    custom: Optional[list[str]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'custom' }})
    r"""Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value."""  
    documents: Optional[NewProjectDocuments] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls."""  
    glossaries: Optional[NewProjectGlossaries] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Optional. Only one glossary is supported at the moment."""  
    source_language: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'source_language' }})  
    styleguides: Optional[NewProjectStyleguides] = dataclasses.field(default=None, metadata={'multipart_form': { 'file': True }})
    r"""Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls."""  
    target_languages: Optional[list[str]] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'target_languages[]' }})  
    