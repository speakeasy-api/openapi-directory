/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PublicDelegatedPrefixes {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes.
   */
  computePublicDelegatedPrefixesAggregatedList(
    req: operations.ComputePublicDelegatedPrefixesAggregatedListRequest,
    security: operations.ComputePublicDelegatedPrefixesAggregatedListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesAggregatedListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesAggregatedListRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/aggregated/publicDelegatedPrefixes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ComputePublicDelegatedPrefixesAggregatedListSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesAggregatedListResponse =
        new operations.ComputePublicDelegatedPrefixesAggregatedListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicDelegatedPrefixAggregatedList = utils.objectToClass(
              httpRes?.data,
              shared.PublicDelegatedPrefixAggregatedList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Announces the specified PublicDelegatedPrefix in the given region.
   */
  computePublicDelegatedPrefixesAnnounce(
    req: operations.ComputePublicDelegatedPrefixesAnnounceRequest,
    security: operations.ComputePublicDelegatedPrefixesAnnounceSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesAnnounceResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesAnnounceRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/announce",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesAnnounceSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesAnnounceResponse =
        new operations.ComputePublicDelegatedPrefixesAnnounceResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes the specified PublicDelegatedPrefix in the given region.
   */
  computePublicDelegatedPrefixesDelete(
    req: operations.ComputePublicDelegatedPrefixesDeleteRequest,
    security: operations.ComputePublicDelegatedPrefixesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesDeleteSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesDeleteResponse =
        new operations.ComputePublicDelegatedPrefixesDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the specified PublicDelegatedPrefix resource in the given region.
   */
  computePublicDelegatedPrefixesGet(
    req: operations.ComputePublicDelegatedPrefixesGetRequest,
    security: operations.ComputePublicDelegatedPrefixesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesGetSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesGetResponse =
        new operations.ComputePublicDelegatedPrefixesGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicDelegatedPrefix = utils.objectToClass(
              httpRes?.data,
              shared.PublicDelegatedPrefix
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.
   */
  computePublicDelegatedPrefixesInsert(
    req: operations.ComputePublicDelegatedPrefixesInsertRequest,
    security: operations.ComputePublicDelegatedPrefixesInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "publicDelegatedPrefix",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesInsertSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesInsertResponse =
        new operations.ComputePublicDelegatedPrefixesInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the PublicDelegatedPrefixes for a project in the given region.
   */
  computePublicDelegatedPrefixesList(
    req: operations.ComputePublicDelegatedPrefixesListRequest,
    security: operations.ComputePublicDelegatedPrefixesListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesListSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesListResponse =
        new operations.ComputePublicDelegatedPrefixesListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.publicDelegatedPrefixList = utils.objectToClass(
              httpRes?.data,
              shared.PublicDelegatedPrefixList
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.
   */
  computePublicDelegatedPrefixesPatch(
    req: operations.ComputePublicDelegatedPrefixesPatchRequest,
    security: operations.ComputePublicDelegatedPrefixesPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesPatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "publicDelegatedPrefix1",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesPatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesPatchResponse =
        new operations.ComputePublicDelegatedPrefixesPatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Withdraws the specified PublicDelegatedPrefix in the given region.
   */
  computePublicDelegatedPrefixesWithdraw(
    req: operations.ComputePublicDelegatedPrefixesWithdrawRequest,
    security: operations.ComputePublicDelegatedPrefixesWithdrawSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ComputePublicDelegatedPrefixesWithdrawResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ComputePublicDelegatedPrefixesWithdrawRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}/withdraw",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ComputePublicDelegatedPrefixesWithdrawSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ComputePublicDelegatedPrefixesWithdrawResponse =
        new operations.ComputePublicDelegatedPrefixesWithdrawResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.operation = utils.objectToClass(
              httpRes?.data,
              shared.Operation
            );
          }
          break;
      }

      return res;
    });
  }
}
