"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import arimafittingmetrics as shared_arimafittingmetrics
from ..shared import arimaorder as shared_arimaorder
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ArimaSingleModelForecastingMetricsSeasonalPeriodsEnum(str, Enum):
    SEASONAL_PERIOD_TYPE_UNSPECIFIED = 'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
    NO_SEASONALITY = 'NO_SEASONALITY'
    DAILY = 'DAILY'
    WEEKLY = 'WEEKLY'
    MONTHLY = 'MONTHLY'
    QUARTERLY = 'QUARTERLY'
    YEARLY = 'YEARLY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ArimaSingleModelForecastingMetrics:
    r"""Model evaluation metrics for a single ARIMA forecasting model."""
    
    arima_fitting_metrics: Optional[shared_arimafittingmetrics.ArimaFittingMetrics] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arimaFittingMetrics'), 'exclude': lambda f: f is None }})
    r"""ARIMA model fitting metrics."""  
    has_drift: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasDrift'), 'exclude': lambda f: f is None }})
    r"""Is arima model fitted with drift or not. It is always false when d is not 1."""  
    has_holiday_effect: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasHolidayEffect'), 'exclude': lambda f: f is None }})
    r"""If true, holiday_effect is a part of time series decomposition result."""  
    has_spikes_and_dips: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasSpikesAndDips'), 'exclude': lambda f: f is None }})
    r"""If true, spikes_and_dips is a part of time series decomposition result."""  
    has_step_changes: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasStepChanges'), 'exclude': lambda f: f is None }})
    r"""If true, step_changes is a part of time series decomposition result."""  
    non_seasonal_order: Optional[shared_arimaorder.ArimaOrder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nonSeasonalOrder'), 'exclude': lambda f: f is None }})
    r"""Arima order, can be used for both non-seasonal and seasonal parts."""  
    seasonal_periods: Optional[list[ArimaSingleModelForecastingMetricsSeasonalPeriodsEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seasonalPeriods'), 'exclude': lambda f: f is None }})
    r"""Seasonal periods. Repeated because multiple periods are supported for one time series."""  
    time_series_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesId'), 'exclude': lambda f: f is None }})
    r"""The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used."""  
    time_series_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timeSeriesIds'), 'exclude': lambda f: f is None }})
    r"""The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns."""  
    