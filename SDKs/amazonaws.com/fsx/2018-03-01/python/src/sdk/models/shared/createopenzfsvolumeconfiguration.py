"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import createopenzfsoriginsnapshotconfiguration as shared_createopenzfsoriginsnapshotconfiguration
from ..shared import openzfsdatacompressiontype_enum as shared_openzfsdatacompressiontype_enum
from ..shared import openzfsnfsexport as shared_openzfsnfsexport
from ..shared import openzfsuserorgroupquota as shared_openzfsuserorgroupquota
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateOpenZFSVolumeConfiguration:
    r"""Specifies the configuration of the Amazon FSx for OpenZFS volume that you are creating."""
    
    parent_volume_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ParentVolumeId') }})  
    copy_tags_to_snapshots: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CopyTagsToSnapshots'), 'exclude': lambda f: f is None }})  
    data_compression_type: Optional[shared_openzfsdatacompressiontype_enum.OpenZFSDataCompressionTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DataCompressionType'), 'exclude': lambda f: f is None }})  
    nfs_exports: Optional[list[shared_openzfsnfsexport.OpenZFSNfsExport]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NfsExports'), 'exclude': lambda f: f is None }})  
    origin_snapshot: Optional[shared_createopenzfsoriginsnapshotconfiguration.CreateOpenZFSOriginSnapshotConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('OriginSnapshot'), 'exclude': lambda f: f is None }})  
    read_only: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReadOnly'), 'exclude': lambda f: f is None }})  
    record_size_ki_b: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RecordSizeKiB'), 'exclude': lambda f: f is None }})  
    storage_capacity_quota_gi_b: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageCapacityQuotaGiB'), 'exclude': lambda f: f is None }})  
    storage_capacity_reservation_gi_b: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StorageCapacityReservationGiB'), 'exclude': lambda f: f is None }})  
    user_and_group_quotas: Optional[list[shared_openzfsuserorgroupquota.OpenZFSUserOrGroupQuota]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('UserAndGroupQuotas'), 'exclude': lambda f: f is None }})  
    