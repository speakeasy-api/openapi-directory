/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Poll - Represents a poll attached to a status.
 * https://docs.joinmastodon.org/entities/poll/
 */
public class Poll {
    /**
     * Custom emoji to be used for rendering poll options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emojis")
    public Emoji[] emojis;

    public Poll withEmojis(Emoji[] emojis) {
        this.emojis = emojis;
        return this;
    }
    
    /**
     * Is the poll currently expired?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expired")
    public Boolean expired;

    public Poll withExpired(Boolean expired) {
        this.expired = expired;
        return this;
    }
    
    /**
     * When the poll ends. ISO 8601 Datetime, or null if the poll does not end.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_at")
    public OffsetDateTime expiresAt;

    public Poll withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Poll withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Does the poll allow multiple-choice answers?
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiple")
    public Boolean multiple;

    public Poll withMultiple(Boolean multiple) {
        this.multiple = multiple;
        return this;
    }
    
    /**
     * Possible answers for the poll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public Object[] options;

    public Poll withOptions(Object[] options) {
        this.options = options;
        return this;
    }
    
    /**
     * When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("own_votes")
    public Long[] ownVotes;

    public Poll withOwnVotes(Long[] ownVotes) {
        this.ownVotes = ownVotes;
        return this;
    }
    
    /**
     * When called with a user token, has the authorized user voted? Boolean, or null if no current user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voted")
    public Boolean voted;

    public Poll withVoted(Boolean voted) {
        this.voted = voted;
        return this;
    }
    
    /**
     * How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voters_count")
    public Long votersCount;

    public Poll withVotersCount(Long votersCount) {
        this.votersCount = votersCount;
        return this;
    }
    
    /**
     * How many votes have been received.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("votes_count")
    public Long votesCount;

    public Poll withVotesCount(Long votesCount) {
        this.votesCount = votesCount;
        return this;
    }
    
    public Poll(){}
}
