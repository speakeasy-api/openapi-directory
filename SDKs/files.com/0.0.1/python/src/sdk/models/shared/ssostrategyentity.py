"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class SsoStrategyEntityDeprovisionBehaviorEnum(str, Enum):
    r"""Method used for deprovisioning users."""
    DISABLE = 'disable'
    DELETE = 'delete'

class SsoStrategyEntityLdapUsernameFieldEnum(str, Enum):
    r"""LDAP username field"""
    S_AM_ACCOUNT_NAME = 'sAMAccountName'
    USER_PRINCIPAL_NAME = 'userPrincipalName'

class SsoStrategyEntityProtocolEnum(str, Enum):
    r"""SSO Protocol"""
    OAUTH2 = 'oauth2'
    UNUSED_OPENID2 = '_unused_openid2'
    SAML = 'saml'
    ACTIVE_DIRECTORY = 'active_directory'
    OPEN_LDAP = 'open_ldap'
    SCIM = 'scim'

class SsoStrategyEntityProviderEnum(str, Enum):
    r"""Provider name"""
    GOOGLE = 'google'
    AUTH0 = 'auth0'
    OKTA = 'okta'
    ATLASSIAN = 'atlassian'
    AZURE = 'azure'
    BOX = 'box'
    DROPBOX = 'dropbox'
    SLACK = 'slack'
    UNUSED_UBUNTU = '_unused_ubuntu'
    ONELOGIN = 'onelogin'
    SAML = 'saml'
    IDAPTIVE = 'idaptive'
    LDAP = 'ldap'
    SCIM = 'scim'

class SsoStrategyEntityScimAuthenticationMethodEnum(str, Enum):
    r"""SCIM authentication type."""
    NONE = 'none'
    BASIC = 'basic'
    TOKEN = 'token'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SsoStrategyEntity:
    r"""List Sso Strategies"""
    
    deprovision_behavior: Optional[SsoStrategyEntityDeprovisionBehaviorEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprovision_behavior'), 'exclude': lambda f: f is None }})
    r"""Method used for deprovisioning users."""  
    deprovision_groups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprovision_groups'), 'exclude': lambda f: f is None }})
    r"""Auto-deprovision group membership based on group memberships on the SSO side?"""  
    deprovision_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('deprovision_users'), 'exclude': lambda f: f is None }})
    r"""Auto-deprovision users?"""  
    enabled: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('enabled'), 'exclude': lambda f: f is None }})
    r"""Is strategy enabled?  This may become automatically set to `false` after a high number and duration of failures."""  
    id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID"""  
    label: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('label'), 'exclude': lambda f: f is None }})
    r"""Custom label for the SSO provider on the login page."""  
    ldap_base_dn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_base_dn'), 'exclude': lambda f: f is None }})
    r"""Base DN for looking up users in LDAP server"""  
    ldap_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_domain'), 'exclude': lambda f: f is None }})
    r"""Domain name that will be appended to LDAP usernames"""  
    ldap_host: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host'), 'exclude': lambda f: f is None }})
    r"""LDAP host"""  
    ldap_host_2: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host_2'), 'exclude': lambda f: f is None }})
    r"""LDAP backup host"""  
    ldap_host_3: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_host_3'), 'exclude': lambda f: f is None }})
    r"""LDAP backup host"""  
    ldap_port: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_port'), 'exclude': lambda f: f is None }})
    r"""LDAP port"""  
    ldap_secure: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_secure'), 'exclude': lambda f: f is None }})
    r"""Use secure LDAP?"""  
    ldap_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_username'), 'exclude': lambda f: f is None }})
    r"""Username for signing in to LDAP server."""  
    ldap_username_field: Optional[SsoStrategyEntityLdapUsernameFieldEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ldap_username_field'), 'exclude': lambda f: f is None }})
    r"""LDAP username field"""  
    logo_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo_url'), 'exclude': lambda f: f is None }})
    r"""URL holding a custom logo for the SSO provider on the login page."""  
    protocol: Optional[SsoStrategyEntityProtocolEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('protocol'), 'exclude': lambda f: f is None }})
    r"""SSO Protocol"""  
    provider: Optional[SsoStrategyEntityProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""Provider name"""  
    provision_attachments_permission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_attachments_permission'), 'exclude': lambda f: f is None }})
    r"""DEPRECATED: Auto-provisioned users get Sharing permission. Use a Group with the Bundle permission instead."""  
    provision_company: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_company'), 'exclude': lambda f: f is None }})
    r"""Default company for auto provisioned users."""  
    provision_dav_permission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_dav_permission'), 'exclude': lambda f: f is None }})
    r"""Auto-provisioned users get WebDAV permission?"""  
    provision_email_signup_groups: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_email_signup_groups'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of group names whose members will be created with email_signup authentication."""  
    provision_ftp_permission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_ftp_permission'), 'exclude': lambda f: f is None }})
    r"""Auto-provisioned users get FTP permission?"""  
    provision_group_default: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_group_default'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of group names for groups to automatically add all auto-provisioned users to."""  
    provision_group_exclusion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_group_exclusion'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of group names for groups (with optional wildcards) that will be excluded from auto-provisioning."""  
    provision_group_inclusion: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_group_inclusion'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of group names for groups (with optional wildcards) that will be auto-provisioned."""  
    provision_group_required: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_group_required'), 'exclude': lambda f: f is None }})
    r"""Comma or newline separated list of group names (with optional wildcards) to require membership for user provisioning."""  
    provision_groups: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_groups'), 'exclude': lambda f: f is None }})
    r"""Auto-provision group membership based on group memberships on the SSO side?"""  
    provision_sftp_permission: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_sftp_permission'), 'exclude': lambda f: f is None }})
    r"""Auto-provisioned users get SFTP permission?"""  
    provision_site_admin_groups: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_site_admin_groups'), 'exclude': lambda f: f is None }})
    r"""Comma-separated list of group names whose members will be created as Site Admins."""  
    provision_time_zone: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_time_zone'), 'exclude': lambda f: f is None }})
    r"""Default time zone for auto provisioned users."""  
    provision_users: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provision_users'), 'exclude': lambda f: f is None }})
    r"""Auto-provision users?"""  
    saml_provider_cert_fingerprint: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_cert_fingerprint'), 'exclude': lambda f: f is None }})
    r"""Identity provider sha256 cert fingerprint if saml_provider_metadata_url is not available."""  
    saml_provider_issuer_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_issuer_url'), 'exclude': lambda f: f is None }})
    r"""Identity provider issuer url"""  
    saml_provider_metadata_content: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_metadata_content'), 'exclude': lambda f: f is None }})
    r"""Custom identity provider metadata"""  
    saml_provider_metadata_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_metadata_url'), 'exclude': lambda f: f is None }})
    r"""Metadata URL for the SAML identity provider"""  
    saml_provider_slo_target_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_slo_target_url'), 'exclude': lambda f: f is None }})
    r"""Identity provider SLO endpoint"""  
    saml_provider_sso_target_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('saml_provider_sso_target_url'), 'exclude': lambda f: f is None }})
    r"""Identity provider SSO endpoint if saml_provider_metadata_url is not available."""  
    scim_authentication_method: Optional[SsoStrategyEntityScimAuthenticationMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scim_authentication_method'), 'exclude': lambda f: f is None }})
    r"""SCIM authentication type."""  
    scim_oauth_access_token: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scim_oauth_access_token'), 'exclude': lambda f: f is None }})
    r"""SCIM OAuth Access Token."""  
    scim_oauth_access_token_expires_at: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scim_oauth_access_token_expires_at'), 'exclude': lambda f: f is None }})
    r"""SCIM OAuth Access Token Expiration Time."""  
    scim_username: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scim_username'), 'exclude': lambda f: f is None }})
    r"""SCIM username."""  
    subdomain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('subdomain'), 'exclude': lambda f: f is None }})
    r"""Subdomain"""  
    