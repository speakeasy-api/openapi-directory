"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import bulkresponse as shared_bulkresponse
from dataclasses_json import Undefined, dataclass_json
from datetime import date
from marshmallow import fields
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PostScrobbleShowsRequestBody:
    
    airdate: Optional[date] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('airdate'), 'encoder': utils.dateisoformat(True), 'decoder': utils.datefromisoformat, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})
    r"""The episode airdate"""  
    episode: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('episode'), 'exclude': lambda f: f is None }})
    r"""The episode number"""  
    marked_at: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('marked_at'), 'exclude': lambda f: f is None }})
    r"""Epoch timestamp for when the user watched the episode, or 0 for unknown."""  
    season: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('season'), 'exclude': lambda f: f is None }})
    r"""The season number"""  
    type: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""0 for watched, 1 for acquired, 2 for skipped"""  
    

@dataclasses.dataclass
class PostScrobbleShowsRequest:
    
    imdb_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'imdb_id', 'style': 'form', 'explode': True }})
    r"""The show's IMDB ID"""  
    request_body: Optional[list[PostScrobbleShowsRequestBody]] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})  
    thetvdb_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'thetvdb_id', 'style': 'form', 'explode': True }})
    r"""The show's TheTVDB ID"""  
    tvmaze_id: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tvmaze_id', 'style': 'form', 'explode': True }})
    r"""The show's TVmaze ID"""  
    

@dataclasses.dataclass
class PostScrobbleShowsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    bulk_response: Optional[list[shared_bulkresponse.BulkResponse]] = dataclasses.field(default=None)
    r"""All episodes were succesfully marked"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    