<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Returns the list of Changelogs.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListResponse
     */
	public function dialogflowProjectsLocationsAgentsChangelogsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/changelogs', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsChangelogsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListChangelogsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListChangelogsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an agent in the specified location. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/agents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1Agent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Agent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Agent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a list of continuous test results for a given environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/continuousTestResults', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsContinuousTestResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListContinuousTestResultsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListContinuousTestResultsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1EnvironmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsDeployFlow(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{environment}:deployFlow', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1DeployFlowRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeployFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all deployments in the specified Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsDeploymentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/deployments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsDeploymentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListDeploymentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListDeploymentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Experiment in the specified Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/experiments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1Experiment", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all experiments in the specified Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsExperimentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/experiments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListExperimentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListExperimentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsExperimentsStart(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:start', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Stops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsExperimentsStop(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:stop', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsExperimentsStopResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Experiment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Experiment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all environments in the specified Agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/environments', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListEnvironmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListEnvironmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Looks up the history of the specified Environment.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistorySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistory(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistorySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:lookupEnvironmentHistory', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsLookupEnvironmentHistoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1LookupEnvironmentHistoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1LookupEnvironmentHistoryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Kicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse
     */
	public function dialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTest(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{environment}:runContinuousTest', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsEnvironmentsRunContinuousTestResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/flows', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1FlowInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Flow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Flow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsExport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:export', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1ExportFlowRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsImport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/flows:import', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1ImportFlowRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all flows in the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/flows', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListFlowsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListFlowsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a page in the specified flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsPagesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/pages', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1PageInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Page = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Page', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all pages in the specified flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsPagesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/pages', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsPagesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListPagesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListPagesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Trains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsTrain(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:train', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTrainResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/transitionRouteGroups', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1TransitionRouteGroupInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1TransitionRouteGroup = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1TransitionRouteGroup', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all transition route groups in the specified flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/transitionRouteGroups', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsTransitionRouteGroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListTransitionRouteGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListTransitionRouteGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Validates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsValidate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:validate', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1ValidateFlowRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsValidateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1FlowValidationResult = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1FlowValidationResult', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Compares the specified base version with target version.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsVersionsCompareVersions(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{baseVersion}:compareVersions', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1CompareVersionsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCompareVersionsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1CompareVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1CompareVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsVersionsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1VersionInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all versions in the specified Flow.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsVersionsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/versions', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListVersionsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListVersionsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Loads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse
     */
	public function dialogflowProjectsLocationsAgentsFlowsVersionsLoad(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:load', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1LoadVersionRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsFlowsVersionsLoadResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsIntentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/intents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1Intent", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Intent = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Intent', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all intents in the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListResponse
     */
	public function dialogflowProjectsLocationsAgentsIntentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/intents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsIntentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListIntentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListIntentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all agents in the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListResponse
     */
	public function dialogflowProjectsLocationsAgentsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/agents', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListAgentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListAgentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Restores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreResponse
     */
	public function dialogflowProjectsLocationsAgentsRestore(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:restore', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1RestoreAgentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsRestoreResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse
     */
	public function dialogflowProjectsLocationsAgentsSessionsDetectIntent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{session}:detectIntent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1DetectIntentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsDetectIntentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1DetectIntentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1DetectIntentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a session entity type.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsSessionsEntityTypesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/entityTypes', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1SessionEntityType", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1SessionEntityType = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1SessionEntityType', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all session entity types in the specified session.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse
     */
	public function dialogflowProjectsLocationsAgentsSessionsEntityTypesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/entityTypes', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsEntityTypesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListSessionEntityTypesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListSessionEntityTypesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse
     */
	public function dialogflowProjectsLocationsAgentsSessionsFulfillIntent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{session}:fulfillIntent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1FulfillIntentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsFulfillIntentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1FulfillIntentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1FulfillIntentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns preliminary intent match results, doesn't change the session status.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse
     */
	public function dialogflowProjectsLocationsAgentsSessionsMatchIntent(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{session}:matchIntent', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1MatchIntentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsSessionsMatchIntentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1MatchIntentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1MatchIntentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Batch deletes test cases.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesBatchDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases:batchDelete', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1BatchDeleteTestCasesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Kicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesBatchRun(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases:batchRun', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1BatchRunTestCasesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesBatchRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Calculates the test coverage for an agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesCalculateCoverage(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{agent}/testCases:calculateCoverage', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCalculateCoverageResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1CalculateCoverageResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1CalculateCoverageResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a test case for the given agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1TestCaseInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1TestCase = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1TestCase', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Exports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesExport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases:export', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1ExportTestCasesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesExportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Imports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwrite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesImport(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases:import', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1ImportTestCasesRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesImportResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a list of test cases for a given agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/testCases', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListTestCasesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListTestCasesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetches a list of results for a given test case.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesResultsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/results', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesResultsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListTestCaseResultsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListTestCaseResultsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Kicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunResponse
     */
	public function dialogflowProjectsLocationsAgentsTestCasesRun(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:run', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1RunTestCaseRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsTestCasesRunResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a webhook in the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateResponse
     */
	public function dialogflowProjectsLocationsAgentsWebhooksCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/webhooks', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1Webhook", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1Webhook = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1Webhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all webhooks in the specified agent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListResponse
     */
	public function dialogflowProjectsLocationsAgentsWebhooksList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/webhooks', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsAgentsWebhooksListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListWebhooksResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListWebhooksResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists information about the supported locations for this service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse
     */
	public function dialogflowProjectsLocationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}/locations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudLocationListLocationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudLocationListLocationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create security settings in the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateResponse
     */
	public function dialogflowProjectsLocationsSecuritySettingsCreate(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/securitySettings', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1SecuritySettings", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1SecuritySettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1SecuritySettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified SecuritySettings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteResponse
     */
	public function dialogflowProjectsLocationsSecuritySettingsDelete(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all security settings in the specified location.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListResponse
     */
	public function dialogflowProjectsLocationsSecuritySettingsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{parent}/securitySettings', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1ListSecuritySettingsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1ListSecuritySettingsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified SecuritySettings.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchResponse
     */
	public function dialogflowProjectsLocationsSecuritySettingsPatch(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudDialogflowCxV3beta1SecuritySettings", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsLocationsSecuritySettingsPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudDialogflowCxV3beta1SecuritySettings = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudDialogflowCxV3beta1SecuritySettings', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse
     */
	public function dialogflowProjectsOperationsCancel(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}:cancel', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsCancelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse
     */
	public function dialogflowProjectsOperationsGet(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningOperation = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningOperation', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse
     */
	public function dialogflowProjectsOperationsList(
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v3beta1/{name}/operations', \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DialogflowProjectsOperationsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleLongrunningListOperationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleLongrunningListOperationsResponse', 'json');
            }
        }

        return $response;
    }
}