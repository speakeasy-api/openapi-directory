// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateACLXAmzTargetEnum
type CreateACLXAmzTargetEnum string

const (
	CreateACLXAmzTargetEnumAmazonMemoryDbCreateACL CreateACLXAmzTargetEnum = "AmazonMemoryDB.CreateACL"
)

func (e CreateACLXAmzTargetEnum) ToPointer() *CreateACLXAmzTargetEnum {
	return &e
}

func (e *CreateACLXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonMemoryDB.CreateACL":
		*e = CreateACLXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateACLXAmzTargetEnum: %v", v)
	}
}

type CreateACLRequest struct {
	CreateACLRequest  shared.CreateACLRequest `request:"mediaType=application/json"`
	XAmzAlgorithm     *string                 `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                 `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                 `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                 `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                 `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                 `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                 `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        CreateACLXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateACLResponse struct {
	// ACLAlreadyExistsFault
	ACLAlreadyExistsFault interface{}
	// ACLQuotaExceededFault
	ACLQuotaExceededFault interface{}
	ContentType           string
	// Success
	CreateACLResponse *shared.CreateACLResponse
	// DefaultUserRequired
	DefaultUserRequired interface{}
	// DuplicateUserNameFault
	DuplicateUserNameFault interface{}
	// InvalidParameterValueException
	InvalidParameterValueException interface{}
	StatusCode                     int
	RawResponse                    *http.Response
	// TagQuotaPerResourceExceeded
	TagQuotaPerResourceExceeded interface{}
	// UserNotFoundFault
	UserNotFoundFault interface{}
}
