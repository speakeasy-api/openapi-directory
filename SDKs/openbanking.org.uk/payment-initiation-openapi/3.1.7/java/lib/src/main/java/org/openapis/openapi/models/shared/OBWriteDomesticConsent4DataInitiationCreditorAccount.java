/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * OBWriteDomesticConsent4DataInitiationCreditorAccount - Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
 */
public class OBWriteDomesticConsent4DataInitiationCreditorAccount {
    /**
     * Identification assigned by an institution to identify an account. This identification is known by the account owner.
     */
    @JsonProperty("Identification")
    public String identification;

    public OBWriteDomesticConsent4DataInitiationCreditorAccount withIdentification(String identification) {
        this.identification = identification;
        return this;
    }
    
    /**
     * The account name is the name or names of the account owner(s) represented at an account level.
     * Note, the account name is not the product name or the nickname of the account.
     * OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
     */
    @JsonProperty("Name")
    public String name;

    public OBWriteDomesticConsent4DataInitiationCreditorAccount withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Name of the identification scheme, in a coded form as published in an external list.
     */
    @JsonProperty("SchemeName")
    public String schemeName;

    public OBWriteDomesticConsent4DataInitiationCreditorAccount withSchemeName(String schemeName) {
        this.schemeName = schemeName;
        return this;
    }
    
    /**
     * This is secondary identification of the account, as assigned by the account servicing institution. 
     * This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("SecondaryIdentification")
    public String secondaryIdentification;

    public OBWriteDomesticConsent4DataInitiationCreditorAccount withSecondaryIdentification(String secondaryIdentification) {
        this.secondaryIdentification = secondaryIdentification;
        return this;
    }
    
    public OBWriteDomesticConsent4DataInitiationCreditorAccount(@JsonProperty("Identification") String identification, @JsonProperty("Name") String name, @JsonProperty("SchemeName") String schemeName) {
        this.identification = identification;
        this.name = name;
        this.schemeName = schemeName;
  }
}
