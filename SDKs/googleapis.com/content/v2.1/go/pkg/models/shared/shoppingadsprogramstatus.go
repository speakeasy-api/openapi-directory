// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// ShoppingAdsProgramStatusGlobalStateEnum - State of the program. `ENABLED` if there are offers for at least one region.
type ShoppingAdsProgramStatusGlobalStateEnum string

const (
	ShoppingAdsProgramStatusGlobalStateEnumProgramStateUnspecified ShoppingAdsProgramStatusGlobalStateEnum = "PROGRAM_STATE_UNSPECIFIED"
	ShoppingAdsProgramStatusGlobalStateEnumNotEnabled              ShoppingAdsProgramStatusGlobalStateEnum = "NOT_ENABLED"
	ShoppingAdsProgramStatusGlobalStateEnumNoOffersUploaded        ShoppingAdsProgramStatusGlobalStateEnum = "NO_OFFERS_UPLOADED"
	ShoppingAdsProgramStatusGlobalStateEnumEnabled                 ShoppingAdsProgramStatusGlobalStateEnum = "ENABLED"
)

func (e *ShoppingAdsProgramStatusGlobalStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "PROGRAM_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_ENABLED":
		fallthrough
	case "NO_OFFERS_UPLOADED":
		fallthrough
	case "ENABLED":
		*e = ShoppingAdsProgramStatusGlobalStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShoppingAdsProgramStatusGlobalStateEnum: %s", s)
	}
}

// ShoppingAdsProgramStatus - Response message for GetShoppingAdsProgramStatus.
type ShoppingAdsProgramStatus struct {
	// State of the program. `ENABLED` if there are offers for at least one region.
	GlobalState *ShoppingAdsProgramStatusGlobalStateEnum `json:"globalState,omitempty"`
	// Status of the program in each region. Regions with the same status and review eligibility are grouped together in `regionCodes`.
	RegionStatuses []ShoppingAdsProgramStatusRegionStatus `json:"regionStatuses,omitempty"`
}
