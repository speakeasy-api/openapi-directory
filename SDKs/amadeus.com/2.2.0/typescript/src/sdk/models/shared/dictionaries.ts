/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import { LocationValue } from "./locationvalue";
import { Expose, Transform } from "class-transformer";

export class Dictionaries extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "aircraft" })
  aircraft?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "carriers" })
  carriers?: Record<string, string>;

  @SpeakeasyMetadata()
  @Expose({ name: "currencies" })
  currencies?: Record<string, string>;

  @SpeakeasyMetadata({ elemType: LocationValue })
  @Expose({ name: "locations" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, LocationValue> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], LocationValue);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  locations?: Record<string, LocationValue>;
}
