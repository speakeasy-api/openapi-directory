// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

type UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum string

const (
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumAfp         UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "AFP"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumAirPlay     UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "AirPlay"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumAllServices UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "All Services"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumBitTorrent  UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "BitTorrent"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumFtp         UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "FTP"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumPrinters    UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "Printers"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumSSH         UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "SSH"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumSamba       UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "Samba"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumScanners    UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "Scanners"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumIChat       UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "iChat"
	UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnumITunes      UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum = "iTunes"
)

func (e UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum) ToPointer() *UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum {
	return &e
}

func (e *UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AFP":
		fallthrough
	case "AirPlay":
		fallthrough
	case "All Services":
		fallthrough
	case "BitTorrent":
		fallthrough
	case "FTP":
		fallthrough
	case "Printers":
		fallthrough
	case "SSH":
		fallthrough
	case "Samba":
		fallthrough
	case "Scanners":
		fallthrough
	case "iChat":
		fallthrough
	case "iTunes":
		*e = UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum: %v", v)
	}
}

type UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRules struct {
	// A description for your Bonjour forwarding rule. Optional.
	Description *string `json:"description,omitempty"`
	// A list of Bonjour services. At least one service must be specified. Available services are 'All Services', 'AirPlay', 'AFP', 'BitTorrent', 'FTP', 'iChat', 'iTunes', 'Printers', 'Samba', 'Scanners' and 'SSH'
	Services []UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRulesServicesEnum `json:"services"`
	// The ID of the service VLAN. Required.
	VlanID string `json:"vlanId"`
}

type UpdateNetworkWirelessSsidBonjourForwardingRequestBody struct {
	// If true, Bonjour forwarding is enabled on this SSID.
	Enabled *bool `json:"enabled,omitempty"`
	// List of bonjour forwarding rules.
	Rules []UpdateNetworkWirelessSsidBonjourForwardingRequestBodyRules `json:"rules,omitempty"`
}

type UpdateNetworkWirelessSsidBonjourForwardingRequest struct {
	RequestBody *UpdateNetworkWirelessSsidBonjourForwardingRequestBody `request:"mediaType=application/json"`
	NetworkID   string                                                 `pathParam:"style=simple,explode=false,name=networkId"`
	Number      string                                                 `pathParam:"style=simple,explode=false,name=number"`
}

type UpdateNetworkWirelessSsidBonjourForwardingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful operation
	UpdateNetworkWirelessSsidBonjourForwarding200ApplicationJSONObject map[string]interface{}
}
