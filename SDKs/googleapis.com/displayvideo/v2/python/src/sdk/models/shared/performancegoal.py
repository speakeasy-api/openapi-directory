"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PerformanceGoalPerformanceGoalTypeEnum(str, Enum):
    r"""Required. The type of the performance goal."""
    PERFORMANCE_GOAL_TYPE_UNSPECIFIED = 'PERFORMANCE_GOAL_TYPE_UNSPECIFIED'
    PERFORMANCE_GOAL_TYPE_CPM = 'PERFORMANCE_GOAL_TYPE_CPM'
    PERFORMANCE_GOAL_TYPE_CPC = 'PERFORMANCE_GOAL_TYPE_CPC'
    PERFORMANCE_GOAL_TYPE_CPA = 'PERFORMANCE_GOAL_TYPE_CPA'
    PERFORMANCE_GOAL_TYPE_CTR = 'PERFORMANCE_GOAL_TYPE_CTR'
    PERFORMANCE_GOAL_TYPE_VIEWABILITY = 'PERFORMANCE_GOAL_TYPE_VIEWABILITY'
    PERFORMANCE_GOAL_TYPE_CPIAVC = 'PERFORMANCE_GOAL_TYPE_CPIAVC'
    PERFORMANCE_GOAL_TYPE_CPE = 'PERFORMANCE_GOAL_TYPE_CPE'
    PERFORMANCE_GOAL_TYPE_CLICK_CVR = 'PERFORMANCE_GOAL_TYPE_CLICK_CVR'
    PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR = 'PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR'
    PERFORMANCE_GOAL_TYPE_VCPM = 'PERFORMANCE_GOAL_TYPE_VCPM'
    PERFORMANCE_GOAL_TYPE_VTR = 'PERFORMANCE_GOAL_TYPE_VTR'
    PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE = 'PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE'
    PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE = 'PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE'
    PERFORMANCE_GOAL_TYPE_OTHER = 'PERFORMANCE_GOAL_TYPE_OTHER'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PerformanceGoal:
    r"""Settings that control the performance goal of a campaign or insertion order."""
    
    performance_goal_amount_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoalAmountMicros'), 'exclude': lambda f: f is None }})
    r"""The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency."""  
    performance_goal_percentage_micros: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoalPercentageMicros'), 'exclude': lambda f: f is None }})
    r"""The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07)."""  
    performance_goal_string: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoalString'), 'exclude': lambda f: f is None }})
    r"""A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to `PERFORMANCE_GOAL_TYPE_OTHER`."""  
    performance_goal_type: Optional[PerformanceGoalPerformanceGoalTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('performanceGoalType'), 'exclude': lambda f: f is None }})
    r"""Required. The type of the performance goal."""  
    