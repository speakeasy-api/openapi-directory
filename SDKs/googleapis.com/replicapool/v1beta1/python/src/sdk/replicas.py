"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Replicas:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def replicapool_replicas_delete(self, request: operations.ReplicapoolReplicasDeleteRequest, security: operations.ReplicapoolReplicasDeleteSecurity) -> operations.ReplicapoolReplicasDeleteResponse:
        r"""Deletes a replica from the pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolReplicasDeleteRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "replicas_delete_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ReplicapoolReplicasDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolReplicasDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_replicas_get(self, request: operations.ReplicapoolReplicasGetRequest, security: operations.ReplicapoolReplicasGetSecurity) -> operations.ReplicapoolReplicasGetResponse:
        r"""Gets information about a specific replica."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolReplicasGetRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolReplicasGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolReplicasGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_replicas_list(self, request: operations.ReplicapoolReplicasListRequest, security: operations.ReplicapoolReplicasListSecurity) -> operations.ReplicapoolReplicasListResponse:
        r"""Lists all replicas in a pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolReplicasListRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/replicas', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolReplicasListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolReplicasListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    def replicapool_replicas_restart(self, request: operations.ReplicapoolReplicasRestartRequest, security: operations.ReplicapoolReplicasRestartSecurity) -> operations.ReplicapoolReplicasRestartResponse:
        r"""Restarts a replica in a pool."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ReplicapoolReplicasRestartRequest, base_url, '/{projectName}/zones/{zone}/pools/{poolName}/replicas/{replicaName}/restart', request)
        
        query_params = utils.get_query_params(operations.ReplicapoolReplicasRestartRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ReplicapoolReplicasRestartResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, '*/*'):
                res.body = http_res.content

        return res

    