"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import compositefilter as shared_compositefilter
from ..shared import propertyfilter as shared_propertyfilter
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Filter:
    r"""A holder for any type of filter."""
    
    composite_filter: Optional[shared_compositefilter.CompositeFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compositeFilter'), 'exclude': lambda f: f is None }})
    r"""A filter that merges multiple other filters using the given operator."""  
    property_filter: Optional[shared_propertyfilter.PropertyFilter] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('propertyFilter'), 'exclude': lambda f: f is None }})
    r"""A filter on a specific property."""  
    