// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListAssociationsQueryParams struct {
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=MaxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=NextToken"`
}

// ListAssociationsXAmzTargetEnum
type ListAssociationsXAmzTargetEnum string

const (
	ListAssociationsXAmzTargetEnumAmazonSsmListAssociations ListAssociationsXAmzTargetEnum = "AmazonSSM.ListAssociations"
)

func (e *ListAssociationsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AmazonSSM.ListAssociations":
		*e = ListAssociationsXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAssociationsXAmzTargetEnum: %s", s)
	}
}

type ListAssociationsHeaders struct {
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget        ListAssociationsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type ListAssociationsRequest struct {
	QueryParams ListAssociationsQueryParams
	Headers     ListAssociationsHeaders
	Request     shared.ListAssociationsRequest `request:"mediaType=application/json"`
}

type ListAssociationsResponse struct {
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// InvalidNextToken
	InvalidNextToken interface{}
	// Success
	ListAssociationsResult *shared.ListAssociationsResult
	StatusCode             int
	RawResponse            *http.Response
}
