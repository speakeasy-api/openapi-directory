/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class StatusMessage {
    /**
     * Is the connection now closed
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionClosed")
    public Boolean connectionClosed;

    public StatusMessage withConnectionClosed(Boolean connectionClosed) {
        this.connectionClosed = connectionClosed;
        return this;
    }
    
    /**
     * The connection id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionId")
    public String connectionId;

    public StatusMessage withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    /**
     * The number of connections available for this account at this moment in time. Present on responses to Authentication messages only.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connectionsAvailable")
    public Integer connectionsAvailable;

    public StatusMessage withConnectionsAvailable(Integer connectionsAvailable) {
        this.connectionsAvailable = connectionsAvailable;
        return this;
    }
    
    /**
     * The type of error in case of a failure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorCode")
    public StatusMessageErrorCodeEnum errorCode;

    public StatusMessage withErrorCode(StatusMessageErrorCodeEnum errorCode) {
        this.errorCode = errorCode;
        return this;
    }
    
    /**
     * Additional message in case of a failure
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorMessage")
    public String errorMessage;

    public StatusMessage withErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
        return this;
    }
    
    /**
     * Client generated unique id to link request with response (like json rpc)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Integer id;

    public StatusMessage withId(Integer id) {
        this.id = id;
        return this;
    }
    
    /**
     * The operation type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("op")
    public String op;

    public StatusMessage withOp(String op) {
        this.op = op;
        return this;
    }
    
    /**
     * The status of the last request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusCode")
    public StatusMessageStatusCodeEnum statusCode;

    public StatusMessage withStatusCode(StatusMessageStatusCodeEnum statusCode) {
        this.statusCode = statusCode;
        return this;
    }
    
    public StatusMessage(){}
}
