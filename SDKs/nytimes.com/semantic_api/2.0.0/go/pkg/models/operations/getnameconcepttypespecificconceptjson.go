// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// GetNameConceptTypeSpecificConceptJSONConceptTypeEnum - The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
type GetNameConceptTypeSpecificConceptJSONConceptTypeEnum string

const (
	GetNameConceptTypeSpecificConceptJSONConceptTypeEnumNytdGeo GetNameConceptTypeSpecificConceptJSONConceptTypeEnum = "nytd_geo"
	GetNameConceptTypeSpecificConceptJSONConceptTypeEnumNytdPer GetNameConceptTypeSpecificConceptJSONConceptTypeEnum = "nytd_per"
	GetNameConceptTypeSpecificConceptJSONConceptTypeEnumNytdOrg GetNameConceptTypeSpecificConceptJSONConceptTypeEnum = "nytd_org"
	GetNameConceptTypeSpecificConceptJSONConceptTypeEnumNytdDes GetNameConceptTypeSpecificConceptJSONConceptTypeEnum = "nytd_des"
)

func (e *GetNameConceptTypeSpecificConceptJSONConceptTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "nytd_geo":
		fallthrough
	case "nytd_per":
		fallthrough
	case "nytd_org":
		fallthrough
	case "nytd_des":
		*e = GetNameConceptTypeSpecificConceptJSONConceptTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNameConceptTypeSpecificConceptJSONConceptTypeEnum: %s", s)
	}
}

type GetNameConceptTypeSpecificConceptJSONPathParams struct {
	// The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
	//
	ConceptType GetNameConceptTypeSpecificConceptJSONConceptTypeEnum `pathParam:"style=simple,explode=false,name=concept-type"`
	// The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding ".json" like with "Baseball.json".
	//
	SpecificConcept string `pathParam:"style=simple,explode=false,name=specific-concept"`
}

// GetNameConceptTypeSpecificConceptJSONFieldsEnum - "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
//
// Optional fields are returned in result_set. They are briefly explained here:
//
// pages: A list of topic pages associated with a specific concept.
// ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
// links: A list of links from this concept to external data resources.
// taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
// combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
// geocodes: For geographic concepts, the full GIS record from geonames.
// article_list: A list of up to 10 articles associated with this concept.
// scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
// search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
type GetNameConceptTypeSpecificConceptJSONFieldsEnum string

const (
	GetNameConceptTypeSpecificConceptJSONFieldsEnumAll            GetNameConceptTypeSpecificConceptJSONFieldsEnum = "all"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumPages          GetNameConceptTypeSpecificConceptJSONFieldsEnum = "pages"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumTickerSymbol   GetNameConceptTypeSpecificConceptJSONFieldsEnum = "ticker_symbol"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumLinks          GetNameConceptTypeSpecificConceptJSONFieldsEnum = "links"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumTaxonomy       GetNameConceptTypeSpecificConceptJSONFieldsEnum = "taxonomy"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumCombinations   GetNameConceptTypeSpecificConceptJSONFieldsEnum = "combinations"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumGeocodes       GetNameConceptTypeSpecificConceptJSONFieldsEnum = "geocodes"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumArticleList    GetNameConceptTypeSpecificConceptJSONFieldsEnum = "article_list"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumScopeNotes     GetNameConceptTypeSpecificConceptJSONFieldsEnum = "scope_notes"
	GetNameConceptTypeSpecificConceptJSONFieldsEnumSearchAPIQuery GetNameConceptTypeSpecificConceptJSONFieldsEnum = "search_api_query"
)

func (e *GetNameConceptTypeSpecificConceptJSONFieldsEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "pages":
		fallthrough
	case "ticker_symbol":
		fallthrough
	case "links":
		fallthrough
	case "taxonomy":
		fallthrough
	case "combinations":
		fallthrough
	case "geocodes":
		fallthrough
	case "article_list":
		fallthrough
	case "scope_notes":
		fallthrough
	case "search_api_query":
		*e = GetNameConceptTypeSpecificConceptJSONFieldsEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNameConceptTypeSpecificConceptJSONFieldsEnum: %s", s)
	}
}

type GetNameConceptTypeSpecificConceptJSONQueryParams struct {
	// "all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
	//
	// Optional fields are returned in result_set. They are briefly explained here:
	//
	// pages: A list of topic pages associated with a specific concept.
	// ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
	// links: A list of links from this concept to external data resources.
	// taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
	// combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
	// geocodes: For geographic concepts, the full GIS record from geonames.
	// article_list: A list of up to 10 articles associated with this concept.
	// scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
	// search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
	//
	Fields *GetNameConceptTypeSpecificConceptJSONFieldsEnum `queryParam:"style=form,explode=true,name=fields"`
	// Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.
	Query string `queryParam:"style=form,explode=true,name=query"`
}

type GetNameConceptTypeSpecificConceptJSONRequest struct {
	PathParams  GetNameConceptTypeSpecificConceptJSONPathParams
	QueryParams GetNameConceptTypeSpecificConceptJSONQueryParams
}

// GetNameConceptTypeSpecificConceptJSON200ApplicationJSON - An array of Concepts
type GetNameConceptTypeSpecificConceptJSON200ApplicationJSON struct {
	Copyright  *string          `json:"copyright,omitempty"`
	NumResults *int64           `json:"num_results,omitempty"`
	Results    []shared.Concept `json:"results,omitempty"`
	Status     *string          `json:"status,omitempty"`
}

type GetNameConceptTypeSpecificConceptJSONResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// An array of Concepts
	GetNameConceptTypeSpecificConceptJSON200ApplicationJSONObject *GetNameConceptTypeSpecificConceptJSON200ApplicationJSON
}
