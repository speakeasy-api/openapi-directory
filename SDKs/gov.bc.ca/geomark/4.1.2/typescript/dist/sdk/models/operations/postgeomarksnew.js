"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostGeomarksNewResponse = exports.PostGeomarksNewRequestBody = exports.PostGeomarksNewRequestBodySridEnum = exports.PostGeomarksNewRequestBodyResultFormatEnum = exports.PostGeomarksNewRequestBodyMultipleEnum = exports.PostGeomarksNewRequestBodyFormatEnum = exports.PostGeomarksNewRequestBodyBufferJoinEnum = exports.PostGeomarksNewRequestBodyBufferCapEnum = exports.PostGeomarksNewRequestBodyAllowOverlapEnum = void 0;
var utils_1 = require("../../../internal/utils");
/**
 * When multiple=true select this option to allow overlapping geometries
 */
var PostGeomarksNewRequestBodyAllowOverlapEnum;
(function (PostGeomarksNewRequestBodyAllowOverlapEnum) {
    PostGeomarksNewRequestBodyAllowOverlapEnum["False"] = "false";
    PostGeomarksNewRequestBodyAllowOverlapEnum["True"] = "true";
})(PostGeomarksNewRequestBodyAllowOverlapEnum = exports.PostGeomarksNewRequestBodyAllowOverlapEnum || (exports.PostGeomarksNewRequestBodyAllowOverlapEnum = {}));
/**
 * If bufferMetres is specified, The style of buffer to use at the ends of a buffered line.
 */
var PostGeomarksNewRequestBodyBufferCapEnum;
(function (PostGeomarksNewRequestBodyBufferCapEnum) {
    PostGeomarksNewRequestBodyBufferCapEnum["Round"] = "ROUND";
    PostGeomarksNewRequestBodyBufferCapEnum["Square"] = "SQUARE";
    PostGeomarksNewRequestBodyBufferCapEnum["Flat"] = "FLAT";
})(PostGeomarksNewRequestBodyBufferCapEnum = exports.PostGeomarksNewRequestBodyBufferCapEnum || (exports.PostGeomarksNewRequestBodyBufferCapEnum = {}));
/**
 * If bufferMetres is specified, The style of buffer to use for joins between the line segments for lines and polygons.
 */
var PostGeomarksNewRequestBodyBufferJoinEnum;
(function (PostGeomarksNewRequestBodyBufferJoinEnum) {
    PostGeomarksNewRequestBodyBufferJoinEnum["Round"] = "ROUND";
    PostGeomarksNewRequestBodyBufferJoinEnum["Mitre"] = "MITRE";
    PostGeomarksNewRequestBodyBufferJoinEnum["Bevel"] = "BEVEL";
})(PostGeomarksNewRequestBodyBufferJoinEnum = exports.PostGeomarksNewRequestBodyBufferJoinEnum || (exports.PostGeomarksNewRequestBodyBufferJoinEnum = {}));
/**
 * The file format name extension of the input geometry.
 */
var PostGeomarksNewRequestBodyFormatEnum;
(function (PostGeomarksNewRequestBodyFormatEnum) {
    PostGeomarksNewRequestBodyFormatEnum["Json"] = "json";
    PostGeomarksNewRequestBodyFormatEnum["Xml"] = "xml";
    PostGeomarksNewRequestBodyFormatEnum["Kml"] = "kml";
    PostGeomarksNewRequestBodyFormatEnum["Kmz"] = "kmz";
    PostGeomarksNewRequestBodyFormatEnum["Shp"] = "shp";
    PostGeomarksNewRequestBodyFormatEnum["Shpz"] = "shpz";
    PostGeomarksNewRequestBodyFormatEnum["Geojson"] = "geojson";
    PostGeomarksNewRequestBodyFormatEnum["Gml"] = "gml";
    PostGeomarksNewRequestBodyFormatEnum["Gpkg"] = "gpkg";
    PostGeomarksNewRequestBodyFormatEnum["Wkt"] = "wkt";
})(PostGeomarksNewRequestBodyFormatEnum = exports.PostGeomarksNewRequestBodyFormatEnum || (exports.PostGeomarksNewRequestBodyFormatEnum = {}));
/**
 * Boolean flag indicating if multiple geometries are to be used for the geomark (true) or only a single geometry from the first geometry (false).
 */
var PostGeomarksNewRequestBodyMultipleEnum;
(function (PostGeomarksNewRequestBodyMultipleEnum) {
    PostGeomarksNewRequestBodyMultipleEnum["False"] = "false";
    PostGeomarksNewRequestBodyMultipleEnum["True"] = "true";
})(PostGeomarksNewRequestBodyMultipleEnum = exports.PostGeomarksNewRequestBodyMultipleEnum || (exports.PostGeomarksNewRequestBodyMultipleEnum = {}));
/**
 * The file format the geomark info resource should be returned using.
 */
var PostGeomarksNewRequestBodyResultFormatEnum;
(function (PostGeomarksNewRequestBodyResultFormatEnum) {
    PostGeomarksNewRequestBodyResultFormatEnum["Json"] = "json";
    PostGeomarksNewRequestBodyResultFormatEnum["Xml"] = "xml";
    PostGeomarksNewRequestBodyResultFormatEnum["Kml"] = "kml";
    PostGeomarksNewRequestBodyResultFormatEnum["Kmz"] = "kmz";
    PostGeomarksNewRequestBodyResultFormatEnum["Shp"] = "shp";
    PostGeomarksNewRequestBodyResultFormatEnum["Shpz"] = "shpz";
    PostGeomarksNewRequestBodyResultFormatEnum["Geojson"] = "geojson";
    PostGeomarksNewRequestBodyResultFormatEnum["Gml"] = "gml";
    PostGeomarksNewRequestBodyResultFormatEnum["Gpkg"] = "gpkg";
    PostGeomarksNewRequestBodyResultFormatEnum["Wkt"] = "wkt";
})(PostGeomarksNewRequestBodyResultFormatEnum = exports.PostGeomarksNewRequestBodyResultFormatEnum || (exports.PostGeomarksNewRequestBodyResultFormatEnum = {}));
/**
 * The srid of the coordinate system the input geometries are in. If the file includes a coordinate system definition that will be used.
 */
var PostGeomarksNewRequestBodySridEnum;
(function (PostGeomarksNewRequestBodySridEnum) {
    PostGeomarksNewRequestBodySridEnum["FourThousandThreeHundredAndTwentySix"] = "4326";
    PostGeomarksNewRequestBodySridEnum["ThreeThousandAndFive"] = "3005";
    PostGeomarksNewRequestBodySridEnum["ThreeThousandEightHundredAndFiftySeven"] = "3857";
    PostGeomarksNewRequestBodySridEnum["TwentySixThousandNineHundredAndSeven"] = "26907";
    PostGeomarksNewRequestBodySridEnum["TwentySixThousandNineHundredAndEight"] = "26908";
    PostGeomarksNewRequestBodySridEnum["TwentySixThousandNineHundredAndNine"] = "26909";
    PostGeomarksNewRequestBodySridEnum["TwentySixThousandNineHundredAndTen"] = "26910";
    PostGeomarksNewRequestBodySridEnum["TwentySixThousandNineHundredAndEleven"] = "26911";
})(PostGeomarksNewRequestBodySridEnum = exports.PostGeomarksNewRequestBodySridEnum || (exports.PostGeomarksNewRequestBodySridEnum = {}));
var PostGeomarksNewRequestBody = /** @class */ (function (_super) {
    __extends(PostGeomarksNewRequestBody, _super);
    function PostGeomarksNewRequestBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=allowOverlap" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "allowOverlap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=body" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "body", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=bufferCap" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "bufferCap", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=bufferJoin" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "bufferJoin", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=bufferMetres" }),
        __metadata("design:type", Number)
    ], PostGeomarksNewRequestBody.prototype, "bufferMetres", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=bufferMitreLimit" }),
        __metadata("design:type", Number)
    ], PostGeomarksNewRequestBody.prototype, "bufferMitreLimit", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=bufferSegments" }),
        __metadata("design:type", Number)
    ], PostGeomarksNewRequestBody.prototype, "bufferSegments", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=callback" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "callback", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=failureRedirectUrl" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "failureRedirectUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=format" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "format", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=multiple" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "multiple", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=redirectUrl" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "redirectUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=resultFormat" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "resultFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ data: "form, name=srid" }),
        __metadata("design:type", String)
    ], PostGeomarksNewRequestBody.prototype, "srid", void 0);
    return PostGeomarksNewRequestBody;
}(utils_1.SpeakeasyBase));
exports.PostGeomarksNewRequestBody = PostGeomarksNewRequestBody;
var PostGeomarksNewResponse = /** @class */ (function (_super) {
    __extends(PostGeomarksNewResponse, _super);
    function PostGeomarksNewResponse() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", String)
    ], PostGeomarksNewResponse.prototype, "contentType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Number)
    ], PostGeomarksNewResponse.prototype, "statusCode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        __metadata("design:type", Object)
    ], PostGeomarksNewResponse.prototype, "rawResponse", void 0);
    return PostGeomarksNewResponse;
}(utils_1.SpeakeasyBase));
exports.PostGeomarksNewResponse = PostGeomarksNewResponse;
