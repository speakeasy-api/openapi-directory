// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListRules200ApplicationJSONActionEnum - The id of the action
type ListRules200ApplicationJSONActionEnum string

const (
	ListRules200ApplicationJSONActionEnumListRules ListRules200ApplicationJSONActionEnum = "listRules"
)

func (e *ListRules200ApplicationJSONActionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "listRules":
		*e = ListRules200ApplicationJSONActionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRules200ApplicationJSONActionEnum: %s", s)
	}
}

type ListRules200ApplicationJSONData struct {
	Rules []shared.Rule `json:"rules"`
}

// ListRules200ApplicationJSONResultEnum - Result of the request
type ListRules200ApplicationJSONResultEnum string

const (
	ListRules200ApplicationJSONResultEnumSuccess ListRules200ApplicationJSONResultEnum = "success"
	ListRules200ApplicationJSONResultEnumError   ListRules200ApplicationJSONResultEnum = "error"
)

func (e *ListRules200ApplicationJSONResultEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "success":
		fallthrough
	case "error":
		*e = ListRules200ApplicationJSONResultEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListRules200ApplicationJSONResultEnum: %s", s)
	}
}

// ListRules200ApplicationJSON - Rules information
type ListRules200ApplicationJSON struct {
	// The id of the action
	Action ListRules200ApplicationJSONActionEnum `json:"action"`
	Data   ListRules200ApplicationJSONData       `json:"data"`
	// Result of the request
	Result ListRules200ApplicationJSONResultEnum `json:"result"`
}

type ListRulesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Rules information
	ListRules200ApplicationJSONObject *ListRules200ApplicationJSON
}
