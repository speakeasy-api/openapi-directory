// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

type TeamRepositoryPermissions struct {
	Admin    bool  `json:"admin"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull     bool  `json:"pull"`
	Push     bool  `json:"push"`
	Triage   *bool `json:"triage,omitempty"`
}

// TeamRepository - A team's access to a repository.
type TeamRepository struct {
	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`
	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool  `json:"allow_squash_merge,omitempty"`
	ArchiveURL       string `json:"archive_url"`
	// Whether the repository is archived.
	Archived         bool      `json:"archived"`
	AssigneesURL     string    `json:"assignees_url"`
	BlobsURL         string    `json:"blobs_url"`
	BranchesURL      string    `json:"branches_url"`
	CloneURL         string    `json:"clone_url"`
	CollaboratorsURL string    `json:"collaborators_url"`
	CommentsURL      string    `json:"comments_url"`
	CommitsURL       string    `json:"commits_url"`
	CompareURL       string    `json:"compare_url"`
	ContentsURL      string    `json:"contents_url"`
	ContributorsURL  string    `json:"contributors_url"`
	CreatedAt        time.Time `json:"created_at"`
	// The default branch of the repository.
	DefaultBranch string `json:"default_branch"`
	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool  `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL      string `json:"deployments_url"`
	Description         string `json:"description"`
	// Returns whether or not this repository disabled.
	Disabled      bool   `json:"disabled"`
	DownloadsURL  string `json:"downloads_url"`
	EventsURL     string `json:"events_url"`
	Fork          bool   `json:"fork"`
	Forks         int64  `json:"forks"`
	ForksCount    int64  `json:"forks_count"`
	ForksURL      string `json:"forks_url"`
	FullName      string `json:"full_name"`
	GitCommitsURL string `json:"git_commits_url"`
	GitRefsURL    string `json:"git_refs_url"`
	GitTagsURL    string `json:"git_tags_url"`
	GitURL        string `json:"git_url"`
	// Whether downloads are enabled.
	HasDownloads bool `json:"has_downloads"`
	// Whether issues are enabled.
	HasIssues bool `json:"has_issues"`
	HasPages  bool `json:"has_pages"`
	// Whether projects are enabled.
	HasProjects bool `json:"has_projects"`
	// Whether the wiki is enabled.
	HasWiki  bool   `json:"has_wiki"`
	Homepage string `json:"homepage"`
	HooksURL string `json:"hooks_url"`
	HTMLURL  string `json:"html_url"`
	// Unique identifier of the repository
	ID int64 `json:"id"`
	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate      *bool  `json:"is_template,omitempty"`
	IssueCommentURL string `json:"issue_comment_url"`
	IssueEventsURL  string `json:"issue_events_url"`
	IssuesURL       string `json:"issues_url"`
	KeysURL         string `json:"keys_url"`
	LabelsURL       string `json:"labels_url"`
	Language        string `json:"language"`
	LanguagesURL    string `json:"languages_url"`
	// License Simple
	License       NullableLicenseSimple `json:"license"`
	MasterBranch  *string               `json:"master_branch,omitempty"`
	MergesURL     string                `json:"merges_url"`
	MilestonesURL string                `json:"milestones_url"`
	MirrorURL     string                `json:"mirror_url"`
	// The name of the repository.
	Name             string `json:"name"`
	NetworkCount     *int64 `json:"network_count,omitempty"`
	NodeID           string `json:"node_id"`
	NotificationsURL string `json:"notifications_url"`
	OpenIssues       int64  `json:"open_issues"`
	OpenIssuesCount  int64  `json:"open_issues_count"`
	// Simple User
	Owner       NullableSimpleUser         `json:"owner"`
	Permissions *TeamRepositoryPermissions `json:"permissions,omitempty"`
	// Whether the repository is private or public.
	Private          bool      `json:"private"`
	PullsURL         string    `json:"pulls_url"`
	PushedAt         time.Time `json:"pushed_at"`
	ReleasesURL      string    `json:"releases_url"`
	Size             int64     `json:"size"`
	SSHURL           string    `json:"ssh_url"`
	StargazersCount  int64     `json:"stargazers_count"`
	StargazersURL    string    `json:"stargazers_url"`
	StatusesURL      string    `json:"statuses_url"`
	SubscribersCount *int64    `json:"subscribers_count,omitempty"`
	SubscribersURL   string    `json:"subscribers_url"`
	SubscriptionURL  string    `json:"subscription_url"`
	SvnURL           string    `json:"svn_url"`
	TagsURL          string    `json:"tags_url"`
	TeamsURL         string    `json:"teams_url"`
	TempCloneToken   *string   `json:"temp_clone_token,omitempty"`
	// A git repository
	TemplateRepository *NullableRepository `json:"template_repository,omitempty"`
	Topics             []string            `json:"topics,omitempty"`
	TreesURL           string              `json:"trees_url"`
	UpdatedAt          time.Time           `json:"updated_at"`
	URL                string              `json:"url"`
	// The repository visibility: public, private, or internal.
	Visibility    *string `json:"visibility,omitempty"`
	Watchers      int64   `json:"watchers"`
	WatchersCount int64   `json:"watchers_count"`
}
