"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum(str, Enum):
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""
    WITH_ALL_TAGS = 'withAllTags'
    WITH_ANY_TAGS = 'withAnyTags'


@dataclasses.dataclass
class GetOrganizationDevicesPowerModulesStatusesByDeviceRequest:
    
    organization_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'organizationId', 'style': 'simple', 'explode': False }})  
    ending_before: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'endingBefore', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the end of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    network_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'networkIds', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device availabilities by network ID. This filter uses multiple exact matches."""  
    per_page: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'perPage', 'style': 'form', 'explode': True }})
    r"""The number of entries per page returned. Acceptable range is 3 - 1000. Default is 1000."""  
    product_types: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'productTypes', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device availabilities by device product types. This filter uses multiple exact matches."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'serials', 'style': 'form', 'explode': False }})
    r"""Optional parameter to filter device availabilities by device serial numbers. This filter uses multiple exact matches."""  
    starting_after: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'startingAfter', 'style': 'form', 'explode': True }})
    r"""A token used by the server to indicate the start of the page. Often this is a timestamp or an ID but it is not limited to those. This parameter should not be defined by client applications. The link for the first, last, prev, or next page in the HTTP Link header should define it."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tags', 'style': 'form', 'explode': False }})
    r"""An optional parameter to filter devices by tags. The filtering is case-sensitive. If tags are included, 'tagsFilterType' should also be included (see below). This filter uses multiple exact matches."""  
    tags_filter_type: Optional[GetOrganizationDevicesPowerModulesStatusesByDeviceTagsFilterTypeEnum] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'tagsFilterType', 'style': 'form', 'explode': True }})
    r"""An optional parameter of value 'withAnyTags' or 'withAllTags' to indicate whether to return devices which contain ANY or ALL of the included tags. If no type is included, 'withAnyTags' will be selected."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONNetwork:
    r"""Network info."""
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""ID for the network that the device is associated with."""  
    
class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum(str, Enum):
    r"""Device product type."""
    APPLIANCE = 'appliance'
    CAMERA = 'camera'
    CELLULAR_GATEWAY = 'cellularGateway'
    SENSOR = 'sensor'
    SWITCH = 'switch'
    SYSTEMS_MANAGER = 'systemsManager'
    WIRELESS = 'wireless'

class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum(str, Enum):
    r"""Which slot the AC power supply occupies. Possible values are: 0, 1, 2."""
    ZERO = '0'
    ONE = '1'
    TWO = '2'

class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum(str, Enum):
    r"""Status of the power supply unit. Possible values are: connected, not connected, powering."""
    CONNECTED = 'connected'
    NOT_CONNECTED = 'not connected'
    POWERING = 'powering'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlots:
    
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model'), 'exclude': lambda f: f is None }})
    r"""The power supply unit model."""  
    number: Optional[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsNumberEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('number'), 'exclude': lambda f: f is None }})
    r"""Which slot the AC power supply occupies. Possible values are: 0, 1, 2."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The power supply unit serial number."""  
    status: Optional[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlotsStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""Status of the power supply unit. Possible values are: connected, not connected, powering."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON:
    
    mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mac'), 'exclude': lambda f: f is None }})
    r"""The device MAC address."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The device name."""  
    network: Optional[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONNetwork] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('network'), 'exclude': lambda f: f is None }})
    r"""Network info."""  
    product_type: Optional[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONProductTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('productType'), 'exclude': lambda f: f is None }})
    r"""Device product type."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device serial number."""  
    slots: Optional[list[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSONSlots]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slots'), 'exclude': lambda f: f is None }})
    r"""Information for the device's AC power supplies."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""List of custom tags for the device."""  
    

@dataclasses.dataclass
class GetOrganizationDevicesPowerModulesStatusesByDeviceResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    get_organization_devices_power_modules_statuses_by_device_200_application_json_objects: Optional[list[GetOrganizationDevicesPowerModulesStatusesByDevice200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    headers: Optional[dict[str, list[str]]] = dataclasses.field(default=None)  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    