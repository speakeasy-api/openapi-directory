<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Scrobbling 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * List watched and acquired episodes for a show
     * 
     * This endpoint can be used by all users, even without premium
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdResponse
     */
	public function getScrobbleShowsShowId(
        \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scrobble/shows/{show_id}', \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetScrobbleShowsShowIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->markedEpisodes = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\MarkedEpisode>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark episodes as acquired or watched based on their IDs
     * 
     * This endpoint can be used by all users, even without premium
     * 
     * @param array<\OpenAPI\OpenAPI\Models\Operations\PostScrobbleEpisodesRequestBody> $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostScrobbleEpisodesResponse
     */
	public function postScrobbleEpisodes(
        array $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostScrobbleEpisodesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scrobble/episodes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostScrobbleEpisodesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 207 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BulkResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark episodes within a show as acquired or watched based on their attributes
     * 
     * To specify a show, supply either `tvmaze_id`, `thetvdb_id` or `imdb_id`. To specify an episode, supply either both `season` and `episode`, or `airdate`.
     * 
     * This endpoint can be used by all users, even without premium.
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsResponse
     */
	public function postScrobbleShows(
        \OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scrobble/shows');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostScrobbleShowsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200 or $httpResponse->getStatusCode() === 207 or $httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->bulkResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\BulkResponse>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Mark an episode as acquired or watched based on its ID
     * 
     * This endpoint can be used by all users, even without premium
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdResponse
     */
	public function putScrobbleEpisodesEpisodeId(
        \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/scrobble/episodes/{episode_id}', \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "markedEpisodeInput", "json");
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PutScrobbleEpisodesEpisodeIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->markedEpisode = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\MarkedEpisode', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 404 or $httpResponse->getStatusCode() === 422) {
        }

        return $response;
    }
}