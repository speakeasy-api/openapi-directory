// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InstanceStateEnum string

const (
	InstanceStateEnumAwaitingFulfillment InstanceStateEnum = "AWAITING_FULFILLMENT"
	InstanceStateEnumProvisioning        InstanceStateEnum = "PROVISIONING"
	InstanceStateEnumBootstrapping       InstanceStateEnum = "BOOTSTRAPPING"
	InstanceStateEnumRunning             InstanceStateEnum = "RUNNING"
	InstanceStateEnumTerminated          InstanceStateEnum = "TERMINATED"
)

func (e InstanceStateEnum) ToPointer() *InstanceStateEnum {
	return &e
}

func (e *InstanceStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWAITING_FULFILLMENT":
		fallthrough
	case "PROVISIONING":
		fallthrough
	case "BOOTSTRAPPING":
		fallthrough
	case "RUNNING":
		fallthrough
	case "TERMINATED":
		*e = InstanceStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InstanceStateEnum: %v", v)
	}
}
