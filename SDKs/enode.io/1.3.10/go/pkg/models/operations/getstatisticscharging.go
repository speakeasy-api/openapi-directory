// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/types"
)

type GetStatisticsChargingSecurity struct {
	UserAccessToken string `security:"scheme,type=oauth2,name=Authorization"`
}

// GetStatisticsChargingResolutionEnum - The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day.
type GetStatisticsChargingResolutionEnum string

const (
	GetStatisticsChargingResolutionEnumHour  GetStatisticsChargingResolutionEnum = "HOUR"
	GetStatisticsChargingResolutionEnumDay   GetStatisticsChargingResolutionEnum = "DAY"
	GetStatisticsChargingResolutionEnumWeek  GetStatisticsChargingResolutionEnum = "WEEK"
	GetStatisticsChargingResolutionEnumMonth GetStatisticsChargingResolutionEnum = "MONTH"
	GetStatisticsChargingResolutionEnumYear  GetStatisticsChargingResolutionEnum = "YEAR"
)

func (e *GetStatisticsChargingResolutionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "HOUR":
		fallthrough
	case "DAY":
		fallthrough
	case "WEEK":
		fallthrough
	case "MONTH":
		fallthrough
	case "YEAR":
		*e = GetStatisticsChargingResolutionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetStatisticsChargingResolutionEnum: %s", s)
	}
}

type GetStatisticsChargingRequest struct {
	// Filter statistics to only include this charging location
	ChargingLocationID *string `queryParam:"style=form,explode=true,name=chargingLocationId"`
	// Latest date to include in the response (defaults to current date/time)
	EndDate *types.Date `queryParam:"style=form,explode=true,name=endDate"`
	// The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day.
	Resolution *GetStatisticsChargingResolutionEnum `queryParam:"style=form,explode=true,name=resolution"`
	// Earliest date to include in the response
	StartDate types.Date `queryParam:"style=form,explode=true,name=startDate"`
	// Filter statistics to only include this vehicle
	VehicleID *string `queryParam:"style=form,explode=true,name=vehicleId"`
}

// GetStatisticsCharging200ApplicationJSONKw - Aggregate statistics for charge rate in kW
type GetStatisticsCharging200ApplicationJSONKw struct {
	Max  float64 `json:"max"`
	Mean float64 `json:"mean"`
	Min  float64 `json:"min"`
}

// GetStatisticsCharging200ApplicationJSONPrice - Aggregate statistics for power price (<CURRENCY> per kWh)
type GetStatisticsCharging200ApplicationJSONPrice struct {
	Max  float64 `json:"max"`
	Mean float64 `json:"mean"`
	Min  float64 `json:"min"`
}

type GetStatisticsCharging200ApplicationJSON struct {
	// Total cost in <CURRENCY>
	CostSum float64 `json:"costSum"`
	// The start date of this sample within the timeseries
	Date types.Date `json:"date"`
	// Aggregate statistics for charge rate in kW
	Kw GetStatisticsCharging200ApplicationJSONKw `json:"kw"`
	// Total power consumption in kWh
	KwhSum float64 `json:"kwhSum"`
	// Aggregate statistics for power price (<CURRENCY> per kWh)
	Price GetStatisticsCharging200ApplicationJSONPrice `json:"price"`
}

type GetStatisticsChargingResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Successful
	GetStatisticsCharging200ApplicationJSONObjects []GetStatisticsCharging200ApplicationJSON
}
