// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// ActivityChangeEnum - Type of change:
//   - created - First time the issue is found
//   - comment - User left a comment in the timeline
//   - found - Found again in a later scan
//   - changed - One of the parameters of the finding was changed
//     (e.g. severity)
type ActivityChangeEnum string

const (
	ActivityChangeEnumCreated ActivityChangeEnum = "created"
	ActivityChangeEnumComment ActivityChangeEnum = "comment"
	ActivityChangeEnumFound   ActivityChangeEnum = "found"
	ActivityChangeEnumChanged ActivityChangeEnum = "changed"
)

func (e *ActivityChangeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "created":
		fallthrough
	case "comment":
		fallthrough
	case "found":
		fallthrough
	case "changed":
		*e = ActivityChangeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivityChangeEnum: %s", s)
	}
}

type Activity struct {
	// Type of change:
	//   * created - First time the issue is found
	//   * comment - User left a comment in the timeline
	//   * found - Found again in a later scan
	//   * changed - One of the parameters of the finding was changed
	//    (e.g. severity)
	//
	Change *ActivityChangeEnum `json:"change,omitempty"`
	// Date time of the last change
	Changed *time.Time `json:"changed,omitempty"`
	// User that last modified the object
	ChangedBy *ChangedBy `json:"changed_by,omitempty"`
	// Field that was changed
	Field *string `json:"field,omitempty"`
	// Previous value
	OldValue *string `json:"old_value,omitempty"`
	// New value
	Value *string `json:"value,omitempty"`
}
