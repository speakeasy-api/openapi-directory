<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class TransferInstruments 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Delete a transfer instrument
     * 
     * Deletes a transfer instrument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdResponse
     */
	public function deleteTransferInstrumentsId(
        \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transferInstruments/{id}', \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteTransferInstrumentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get a transfer instrument
     * 
     * Returns the details of a transfer instrument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdResponse
     */
	public function getTransferInstrumentsId(
        \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transferInstruments/{id}', \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetTransferInstrumentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferInstrument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferInstrument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a transfer instrument
     * 
     * Updates a transfer instrument.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdResponse
     */
	public function patchTransferInstrumentsId(
        \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transferInstruments/{id}', \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "transferInstrumentInfo", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PatchTransferInstrumentsIdResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferInstrument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferInstrument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a transfer instrument
     * 
     * Creates a transfer instrument. 
     * 
     * A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.
     * 
     * When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\TransferInstrumentInfo $request
     * @param \OpenAPI\OpenAPI\Models\Operations\PostTransferInstrumentsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\PostTransferInstrumentsResponse
     */
	public function postTransferInstruments(
        \OpenAPI\OpenAPI\Models\Shared\TransferInstrumentInfo $request,
        \OpenAPI\OpenAPI\Models\Operations\PostTransferInstrumentsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\PostTransferInstrumentsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/transferInstruments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\PostTransferInstrumentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->transferInstrument = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\TransferInstrument', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403 or $httpResponse->getStatusCode() === 422 or $httpResponse->getStatusCode() === 500) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->serviceError = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ServiceError', 'json');
            }
        }

        return $response;
    }
}