/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ExecuteSellTrasactionSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=apiKey;subtype=header;name=x-api-key",
  })
  apiSecretKey: string;
}

/**
 * Definition of an single instruction(buy|sell)
 */
export class ExecuteSellTrasactionSellTransactionRequestInstructionBuySell extends SpeakeasyBase {
  /**
   * (Optional) Order identifier assigned by the wealth manager
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_order_id" })
  clientOrderId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Require if `value` is not available. Must be in correct pattern (eg: 25, 332.34, 1050.0025). For `funds`, upto 4 decimal places. For `equities`, `bonds` and `etf`, 0 decimal places allowed.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "quantity" })
  quantity?: string;

  /**
   * Require if `quantity` is not available. Must be in correct pattern (upto 2 decimal places, eg: 25, 332.3, 1050.25).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "value" })
  value?: string;
}

/**
 * Definition of an sell transaction request
 */
export class ExecuteSellTrasactionSellTransactionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pot_id" })
  potId: string;

  /**
   * Unique request id to ensure idempotency. (ex: UUID)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "request_id" })
  requestId: string;

  @SpeakeasyMetadata({
    elemType: ExecuteSellTrasactionSellTransactionRequestInstructionBuySell,
  })
  @Expose({ name: "sell_instructions" })
  @Type(() => ExecuteSellTrasactionSellTransactionRequestInstructionBuySell)
  sellInstructions: ExecuteSellTrasactionSellTransactionRequestInstructionBuySell[];
}

export class ExecuteSellTrasactionRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: ExecuteSellTrasactionSellTransactionRequest;

  /**
   * ApiSecretKey
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=x-api-key",
  })
  xApiKey: string;
}

/**
 * System error. Retry later. If the error persist, contact WOS support
 */
export class ExecuteSellTrasaction500ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
 */
export class ExecuteSellTrasaction429ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Current status of the original request
 */
export enum ExecuteSellTrasaction409ApplicationJSONStatusEnum {
  Processing = "PROCESSING",
  Complete = "COMPLETE",
}

/**
 * Duplicate request
 */
export class ExecuteSellTrasaction409ApplicationJSON extends SpeakeasyBase {
  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;

  /**
   * Stringified original response body if status is `COMPLETE`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "response" })
  response?: Record<string, any>;

  /**
   * Current status of the original request
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ExecuteSellTrasaction409ApplicationJSONStatusEnum;
}

/**
 * The specified resource was not found
 */
export class ExecuteSellTrasaction404ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
 */
export class ExecuteSellTrasaction403ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * You do not have permissions to access this resource.
 */
export class ExecuteSellTrasaction401ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Request is not complete and may have one or more validations errors. Please check the error message and the code
 */
export class ExecuteSellTrasaction400ApplicationJSON extends SpeakeasyBase {
  /**
   * Optional error code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error_code" })
  errorCode?: string;

  /**
   * Human readable description of the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * status of the transaction request
 *
 * @remarks
 * . `submitted`: All requested transactions submitted
 * . `partially_submitted`: Some (but not all) requested transactions submitted
 *
 */
export enum ExecuteSellTrasaction200ApplicationJSONStatusEnum {
  Submitted = "submitted",
  PartiallySubmitted = "partially_submitted",
}

/**
 * in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
 */
export enum ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum {
  In = "in",
  Out = "out",
}

/**
 * Origin of the transaction
 */
export enum ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum {
  Api = "api",
  AdminUi = "admin_ui",
  FileUpload = "file_upload",
  System = "system",
}

export enum ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum {
  Fees = "Fees",
  Buy = "Buy",
  Sell = "Sell",
  Transfers = "Transfers",
  Income = "Income",
  Tax = "Tax",
  Contribution = "Contribution",
  Withdrawal = "Withdrawal",
  CorporateActions = "Corporate actions",
}

export enum ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum {
  Submitted = "submitted",
  Failed = "failed",
}

/**
 * Sub transaction type
 */
export enum ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum {
  DividendReinvestment = "Dividend Reinvestment",
  InterestReinvestment = "Interest Reinvestment",
  Reinvestment = "Reinvestment",
  Buy = "Buy",
  SellCancel = "Sell Cancel",
  SwitchBuy = "Switch Buy",
  Sell = "Sell",
  BuyCancel = "Buy Cancel",
  SwitchSell = "Switch Sell",
  LumpSum = "Lump sum",
  EmployerContribution = "Employer contribution",
  EmployeeContribution = "Employee contribution",
  RegularContribution = "Regular contribution",
  PaymentInForFees = "Payment in for fees",
  InternalTransferCashIn = "Internal Transfer - Cash In",
  InternalTransferStockIn = "Internal Transfer - Stock In",
  InternalTransferCashOut = "Internal Transfer - Cash Out",
  InternalTransferStockOut = "Internal Transfer - Stock Out",
  StockTransferIn = "Stock Transfer In",
  CashTransferIn = "Cash Transfer In",
  StockTransferOut = "Stock Transfer Out",
  CashTransferOut = "Cash Transfer Out",
  Commission = "Commission",
  AncillaryFee = "Ancillary fee",
  ManagementFee = "Management fee",
  FeeCredit = "Fee credit",
  FeeRebate = "Fee rebate",
  AdvisorOngoingFee = "Advisor ongoing fee",
  OneOffAdvisorFee = "One-off advisor fee",
  CommissionRebate = "Commission rebate",
  CustodyFees = "Custody fees",
  Dividends = "Dividends",
  Distributions = "Distributions",
  Interest = "Interest",
  OtherIncome = "Other income",
  TakeoversMergersAndNameChangesCreate = "Takeovers, Mergers & Name Changes - Create",
  TakeoversMergersAndNameChangesExtinguish = "Takeovers, Mergers & Name Changes - Extinguish",
  RightsExpiry = "Rights Expiry",
  RightsExercise = "Rights Exercise",
  WarrantExercise = "Warrant Exercise",
  FixedIncomeMaturityReceiveCapital = "Fixed Income Maturity - Receive Capital",
  FixedIncomeMaturityExtinguishBondUnits = "Fixed Income Maturity - Extinguish Bond Units",
  FundMergerCreateNewFundUnits = "Fund Merger - Create New Fund Units",
  FundMergerExtinguishOldFundUnits = "Fund Merger - Extinguish Old Fund Units",
  RightsIssue = "Rights Issue",
  StockDividend = "Stock Dividend",
  SpinOff = "Spin-Off",
  WarrantIssue = "Warrant Issue",
  StockSplit = "Stock Split",
  FeeTax = "Fee Tax",
  TaxRelief = "Tax Relief",
  Gst = "GST",
  Hst = "HST",
  Pst = "PST",
  Qst = "QST",
  WithholdingTax = "Withholding Tax",
  NonResidentTax = "Non-resident Tax",
  Penalty = "Penalty",
  ContributionRefund = "Contribution Refund",
  IncomeWithdrawal = "Income Withdrawal",
  Reversal = "Reversal",
  Withdrawal = "Withdrawal",
  MiscellaneousCorporateActionExercise = "Miscellaneous Corporate Action Exercise",
}

/**
 * Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
 */
export enum ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum {
  Instructed = "instructed",
  Confirmed = "confirmed",
  Priced = "priced",
  Rejected = "rejected",
  Settled = "settled",
  Cancelled = "cancelled",
  Scheduled = "scheduled",
}

/**
 * State of the transaction
 */
export enum ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum {
  Pending = "pending",
  Archived = "archived",
}

export class ExecuteSellTrasaction200ApplicationJSONTransactions extends SpeakeasyBase {
  /**
   * Additional external details of the transaction, This may be populated in reconciliation process
   */
  @SpeakeasyMetadata()
  @Expose({ name: "additional_external_details" })
  additionalExternalDetails?: Record<string, any>;

  /**
   * (optional) Order identifier assigned by the wealth manager
   */
  @SpeakeasyMetadata()
  @Expose({ name: "client_order_id" })
  clientOrderId?: string;

  /**
   * Will indicate the date where this record was created
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created_at" })
  createdAt: string;

  /**
   * Currency of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "currency" })
  currency: string;

  /**
   * in = cash payment or pending buy transaction, out= cash out or pending sell transaction.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "direction" })
  direction: ExecuteSellTrasaction200ApplicationJSONTransactionsDirectionEnum;

  /**
   * Executed price of the buy, sell transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "execution_price" })
  executionPrice?: string;

  /**
   * External Transaction Reference
   */
  @SpeakeasyMetadata()
  @Expose({ name: "external_transaction_reference" })
  externalTransactionReference?: string;

  /**
   * Investment product id of the transaction. Will be 'cash' for cash transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "investment_product_id" })
  investmentProductId: string;

  /**
   * Origin of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin: ExecuteSellTrasaction200ApplicationJSONTransactionsOriginEnum;

  /**
   * parent_transaction_id
   */
  @SpeakeasyMetadata()
  @Expose({ name: "parent_transaction_id" })
  parentTransactionId?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "primary_transaction_type" })
  primaryTransactionType: ExecuteSellTrasaction200ApplicationJSONTransactionsPrimaryTransactionTypeEnum;

  /**
   * Intended settlement date of the pending transaction or actual the settled day of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "settlement_date" })
  settlementDate?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ExecuteSellTrasaction200ApplicationJSONTransactionsStatusEnum;

  /**
   * Sub transaction type
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sub_transaction_type" })
  subTransactionType: ExecuteSellTrasaction200ApplicationJSONTransactionsSubTransactionTypeEnum;

  /**
   * Sub state of the transaction. instructed, confirmed, priced and scheduled sub_types are applicable for pending state and rejected, cancelled, settled sub_types applicable for archived state
   */
  @SpeakeasyMetadata()
  @Expose({ name: "sub_type" })
  subType: ExecuteSellTrasaction200ApplicationJSONTransactionsSubTypeEnum;

  /**
   * Date the transaction was effected
   */
  @SpeakeasyMetadata()
  @Expose({ name: "trade_date" })
  tradeDate?: string;

  /**
   * transaction_id of successful transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_id" })
  transactionId: string;

  /**
   * (optional) quantity of the investment product, required for unit based orders
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_quantity" })
  transactionQuantity?: string;

  /**
   * (optional) value of the investment product, required for value based orders
   */
  @SpeakeasyMetadata()
  @Expose({ name: "transaction_value" })
  transactionValue?: string;

  /**
   * State of the transaction
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: ExecuteSellTrasaction200ApplicationJSONTransactionsTypeEnum;

  /**
   * Will indicate the date where this record was last changed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "updated_at" })
  updatedAt: string;
}

/**
 * success
 */
export class ExecuteSellTrasaction200ApplicationJSON extends SpeakeasyBase {
  /**
   * error message if status is `failed`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "pot_id" })
  potId: string;

  /**
   * status of the transaction request
   *
   * @remarks
   * . `submitted`: All requested transactions submitted
   * . `partially_submitted`: Some (but not all) requested transactions submitted
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: ExecuteSellTrasaction200ApplicationJSONStatusEnum;

  @SpeakeasyMetadata({
    elemType: ExecuteSellTrasaction200ApplicationJSONTransactions,
  })
  @Expose({ name: "transactions" })
  @Type(() => ExecuteSellTrasaction200ApplicationJSONTransactions)
  transactions?: ExecuteSellTrasaction200ApplicationJSONTransactions[];
}

export class ExecuteSellTrasactionResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * success
   */
  @SpeakeasyMetadata()
  executeSellTrasaction200ApplicationJSONObject?: ExecuteSellTrasaction200ApplicationJSON;

  /**
   * Request is not complete and may have one or more validations errors. Please check the error message and the code
   */
  @SpeakeasyMetadata()
  executeSellTrasaction400ApplicationJSONObject?: ExecuteSellTrasaction400ApplicationJSON;

  /**
   * You do not have permissions to access this resource.
   */
  @SpeakeasyMetadata()
  executeSellTrasaction401ApplicationJSONObject?: ExecuteSellTrasaction401ApplicationJSON;

  /**
   * Your authentication information is missing or invalid. Please check the keys are properly set and its correct
   */
  @SpeakeasyMetadata()
  executeSellTrasaction403ApplicationJSONObject?: ExecuteSellTrasaction403ApplicationJSON;

  /**
   * The specified resource was not found
   */
  @SpeakeasyMetadata()
  executeSellTrasaction404ApplicationJSONObject?: ExecuteSellTrasaction404ApplicationJSON;

  /**
   * Duplicate request
   */
  @SpeakeasyMetadata()
  executeSellTrasaction409ApplicationJSONObject?: ExecuteSellTrasaction409ApplicationJSON;

  /**
   * You have sent too many requests to the system. Please retry later. If you need to increase your throtteling limits, please contact WOS support
   */
  @SpeakeasyMetadata()
  executeSellTrasaction429ApplicationJSONObject?: ExecuteSellTrasaction429ApplicationJSON;

  /**
   * System error. Retry later. If the error persist, contact WOS support
   */
  @SpeakeasyMetadata()
  executeSellTrasaction500ApplicationJSONObject?: ExecuteSellTrasaction500ApplicationJSON;
}
