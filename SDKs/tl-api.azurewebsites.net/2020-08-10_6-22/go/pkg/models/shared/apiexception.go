// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"bytes"
	"encoding/json"
	"errors"
)

type APIExceptionInnerExceptionType string

const (
	APIExceptionInnerExceptionTypeException APIExceptionInnerExceptionType = "Exception"
)

type APIExceptionInnerException struct {
	Exception *Exception

	Type APIExceptionInnerExceptionType
}

func CreateAPIExceptionInnerExceptionException(exception Exception) APIExceptionInnerException {
	typ := APIExceptionInnerExceptionTypeException

	return APIExceptionInnerException{
		Exception: &exception,
		Type:      typ,
	}
}

func (u *APIExceptionInnerException) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	exception := new(Exception)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&exception); err == nil {
		u.Exception = exception
		u.Type = APIExceptionInnerExceptionTypeException
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u APIExceptionInnerException) MarshalJSON() ([]byte, error) {
	if u.Exception != nil {
		return json.Marshal(u.Exception)
	}

	return nil, nil
}

type APIException struct {
	InnerException        *APIExceptionInnerException `json:"InnerException,omitempty"`
	Message               *string                     `json:"Message,omitempty"`
	Source                *string                     `json:"Source,omitempty"`
	StackTrace            *string                     `json:"StackTrace,omitempty"`
	CustomError           interface{}                 `json:"customError,omitempty"`
	Errors                []ValidationError           `json:"errors,omitempty"`
	IsCustomErrorObject   *bool                       `json:"isCustomErrorObject,omitempty"`
	IsModelValidatonError *bool                       `json:"isModelValidatonError,omitempty"`
	ReferenceDocumentLink *string                     `json:"referenceDocumentLink,omitempty"`
	ReferenceErrorCode    *string                     `json:"referenceErrorCode,omitempty"`
	StatusCode            *int                        `json:"statusCode,omitempty"`
}
