/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * WindowSummary - &lt;p&gt;The metrics for a time range within the evaluation portion of a dataset. This object is part of the &lt;a&gt;EvaluationResult&lt;/a&gt; object.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;TestWindowStart&lt;/code&gt; and &lt;code&gt;TestWindowEnd&lt;/code&gt; parameters are determined by the &lt;code&gt;BackTestWindowOffset&lt;/code&gt; parameter of the &lt;a&gt;EvaluationParameters&lt;/a&gt; object.&lt;/p&gt;
 */
public class WindowSummary {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("EvaluationType")
    public EvaluationTypeEnum evaluationType;
    public WindowSummary withEvaluationType(EvaluationTypeEnum evaluationType) {
        this.evaluationType = evaluationType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ItemCount")
    public Long itemCount;
    public WindowSummary withItemCount(Long itemCount) {
        this.itemCount = itemCount;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Metrics")
    public Metrics metrics;
    public WindowSummary withMetrics(Metrics metrics) {
        this.metrics = metrics;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("TestWindowEnd")
    public OffsetDateTime testWindowEnd;
    public WindowSummary withTestWindowEnd(OffsetDateTime testWindowEnd) {
        this.testWindowEnd = testWindowEnd;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("TestWindowStart")
    public OffsetDateTime testWindowStart;
    public WindowSummary withTestWindowStart(OffsetDateTime testWindowStart) {
        this.testWindowStart = testWindowStart;
        return this;
    }
    
}
