"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import cloudsqlconnectionprofile as shared_cloudsqlconnectionprofile
from ..shared import mysqlconnectionprofile as shared_mysqlconnectionprofile
from ..shared import status as shared_status
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConnectionProfileProviderEnum(str, Enum):
    r"""The database provider."""
    DATABASE_PROVIDER_UNSPECIFIED = 'DATABASE_PROVIDER_UNSPECIFIED'
    CLOUDSQL = 'CLOUDSQL'
    RDS = 'RDS'

class ConnectionProfileStateEnum(str, Enum):
    r"""The current connection profile state (e.g. DRAFT, READY, or FAILED)."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    CREATING = 'CREATING'
    READY = 'READY'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'
    FAILED = 'FAILED'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionProfile:
    r"""A connection profile definition."""
    
    cloudsql: Optional[shared_cloudsqlconnectionprofile.CloudSQLConnectionProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudsql'), 'exclude': lambda f: f is None }})
    r"""Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC \\"Zulu\\" format, accurate to nanoseconds. Example: \\"2014-10-02T15:01:23.045123456Z\\"."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The connection profile display name."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \\"key\\": \\"value\\" pairs. Example: `{ \\"name\\": \\"wrench\\", \\"mass\\": \\"1.3kg\\", \\"count\\": \\"3\\" }`."""  
    mysql: Optional[shared_mysqlconnectionprofile.MySQLConnectionProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mysql'), 'exclude': lambda f: f is None }})
    r"""Specifies connection parameters required specifically for MySQL databases."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}."""  
    provider: Optional[ConnectionProfileProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""The database provider."""  
    state: Optional[ConnectionProfileStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current connection profile state (e.g. DRAFT, READY, or FAILED)."""  
    update_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateTime'), 'exclude': lambda f: f is None }})
    r"""Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC \\"Zulu\\" format, accurate to nanoseconds. Example: \\"2014-10-02T15:01:23.045123456Z\\"."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConnectionProfileInput:
    r"""A connection profile definition."""
    
    cloudsql: Optional[shared_cloudsqlconnectionprofile.CloudSQLConnectionProfileInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cloudsql'), 'exclude': lambda f: f is None }})
    r"""Specifies required connection parameters, and, optionally, the parameters required to create a Cloud SQL destination database instance."""  
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The connection profile display name."""  
    error: Optional[shared_status.Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."""  
    labels: Optional[dict[str, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('labels'), 'exclude': lambda f: f is None }})
    r"""The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \\"key\\": \\"value\\" pairs. Example: `{ \\"name\\": \\"wrench\\", \\"mass\\": \\"1.3kg\\", \\"count\\": \\"3\\" }`."""  
    mysql: Optional[shared_mysqlconnectionprofile.MySQLConnectionProfileInput] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mysql'), 'exclude': lambda f: f is None }})
    r"""Specifies connection parameters required specifically for MySQL databases."""  
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}."""  
    provider: Optional[ConnectionProfileProviderEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider'), 'exclude': lambda f: f is None }})
    r"""The database provider."""  
    state: Optional[ConnectionProfileStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""The current connection profile state (e.g. DRAFT, READY, or FAILED)."""  
    