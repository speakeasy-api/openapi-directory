// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// EncryptionInfoEncryptionEntityTypeEnum - The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
type EncryptionInfoEncryptionEntityTypeEnum string

const (
	EncryptionInfoEncryptionEntityTypeEnumEncryptionEntityTypeUnknown EncryptionInfoEncryptionEntityTypeEnum = "ENCRYPTION_ENTITY_TYPE_UNKNOWN"
	EncryptionInfoEncryptionEntityTypeEnumDcmAccount                  EncryptionInfoEncryptionEntityTypeEnum = "DCM_ACCOUNT"
	EncryptionInfoEncryptionEntityTypeEnumDcmAdvertiser               EncryptionInfoEncryptionEntityTypeEnum = "DCM_ADVERTISER"
	EncryptionInfoEncryptionEntityTypeEnumDbmPartner                  EncryptionInfoEncryptionEntityTypeEnum = "DBM_PARTNER"
	EncryptionInfoEncryptionEntityTypeEnumDbmAdvertiser               EncryptionInfoEncryptionEntityTypeEnum = "DBM_ADVERTISER"
	EncryptionInfoEncryptionEntityTypeEnumAdwordsCustomer             EncryptionInfoEncryptionEntityTypeEnum = "ADWORDS_CUSTOMER"
	EncryptionInfoEncryptionEntityTypeEnumDfpNetworkCode              EncryptionInfoEncryptionEntityTypeEnum = "DFP_NETWORK_CODE"
)

func (e *EncryptionInfoEncryptionEntityTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENCRYPTION_ENTITY_TYPE_UNKNOWN":
		fallthrough
	case "DCM_ACCOUNT":
		fallthrough
	case "DCM_ADVERTISER":
		fallthrough
	case "DBM_PARTNER":
		fallthrough
	case "DBM_ADVERTISER":
		fallthrough
	case "ADWORDS_CUSTOMER":
		fallthrough
	case "DFP_NETWORK_CODE":
		*e = EncryptionInfoEncryptionEntityTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionInfoEncryptionEntityTypeEnum: %s", s)
	}
}

// EncryptionInfoEncryptionSourceEnum - Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
type EncryptionInfoEncryptionSourceEnum string

const (
	EncryptionInfoEncryptionSourceEnumEncryptionScopeUnknown EncryptionInfoEncryptionSourceEnum = "ENCRYPTION_SCOPE_UNKNOWN"
	EncryptionInfoEncryptionSourceEnumAdServing              EncryptionInfoEncryptionSourceEnum = "AD_SERVING"
	EncryptionInfoEncryptionSourceEnumDataTransfer           EncryptionInfoEncryptionSourceEnum = "DATA_TRANSFER"
)

func (e *EncryptionInfoEncryptionSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "ENCRYPTION_SCOPE_UNKNOWN":
		fallthrough
	case "AD_SERVING":
		fallthrough
	case "DATA_TRANSFER":
		*e = EncryptionInfoEncryptionSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for EncryptionInfoEncryptionSourceEnum: %s", s)
	}
}

// EncryptionInfo - A description of how user IDs are encrypted.
type EncryptionInfo struct {
	// The encryption entity ID. This should match the encryption configuration for ad serving or Data Transfer.
	EncryptionEntityID *string `json:"encryptionEntityId,omitempty"`
	// The encryption entity type. This should match the encryption configuration for ad serving or Data Transfer.
	EncryptionEntityType *EncryptionInfoEncryptionEntityTypeEnum `json:"encryptionEntityType,omitempty"`
	// Describes whether the encrypted cookie was received from ad serving (the %m macro) or from Data Transfer.
	EncryptionSource *EncryptionInfoEncryptionSourceEnum `json:"encryptionSource,omitempty"`
	// Identifies what kind of resource this is. Value: the fixed string "dfareporting#encryptionInfo".
	Kind *string `json:"kind,omitempty"`
}
