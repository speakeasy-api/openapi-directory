"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Datafeeds:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def content_datafeeds_custombatch(self, request: operations.ContentDatafeedsCustombatchRequest, security: operations.ContentDatafeedsCustombatchSecurity) -> operations.ContentDatafeedsCustombatchResponse:
        r"""Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/datafeeds/batch'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "datafeeds_custom_batch_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentDatafeedsCustombatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsCustombatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatafeedsCustomBatchResponse])
                res.datafeeds_custom_batch_response = out

        return res

    def content_datafeeds_delete(self, request: operations.ContentDatafeedsDeleteRequest, security: operations.ContentDatafeedsDeleteSecurity) -> operations.ContentDatafeedsDeleteResponse:
        r"""Deletes a datafeed configuration from your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsDeleteRequest, base_url, '/{merchantId}/datafeeds/{datafeedId}', request)
        
        query_params = utils.get_query_params(operations.ContentDatafeedsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def content_datafeeds_fetchnow(self, request: operations.ContentDatafeedsFetchnowRequest, security: operations.ContentDatafeedsFetchnowSecurity) -> operations.ContentDatafeedsFetchnowResponse:
        r"""Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the [Products service](https://developers.google.com/shopping-content/reference/rest/v2.1/products) to update your product data."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsFetchnowRequest, base_url, '/{merchantId}/datafeeds/{datafeedId}/fetchNow', request)
        
        query_params = utils.get_query_params(operations.ContentDatafeedsFetchnowRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsFetchnowResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatafeedsFetchNowResponse])
                res.datafeeds_fetch_now_response = out

        return res

    def content_datafeeds_get(self, request: operations.ContentDatafeedsGetRequest, security: operations.ContentDatafeedsGetSecurity) -> operations.ContentDatafeedsGetResponse:
        r"""Retrieves a datafeed configuration from your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsGetRequest, base_url, '/{merchantId}/datafeeds/{datafeedId}', request)
        
        query_params = utils.get_query_params(operations.ContentDatafeedsGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Datafeed])
                res.datafeed = out

        return res

    def content_datafeeds_insert(self, request: operations.ContentDatafeedsInsertRequest, security: operations.ContentDatafeedsInsertSecurity) -> operations.ContentDatafeedsInsertResponse:
        r"""Registers a datafeed configuration with your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsInsertRequest, base_url, '/{merchantId}/datafeeds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "datafeed", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentDatafeedsInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Datafeed])
                res.datafeed = out

        return res

    def content_datafeeds_list(self, request: operations.ContentDatafeedsListRequest, security: operations.ContentDatafeedsListSecurity) -> operations.ContentDatafeedsListResponse:
        r"""Lists the configurations for datafeeds in your Merchant Center account."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsListRequest, base_url, '/{merchantId}/datafeeds', request)
        
        query_params = utils.get_query_params(operations.ContentDatafeedsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.DatafeedsListResponse])
                res.datafeeds_list_response = out

        return res

    def content_datafeeds_update(self, request: operations.ContentDatafeedsUpdateRequest, security: operations.ContentDatafeedsUpdateSecurity) -> operations.ContentDatafeedsUpdateResponse:
        r"""Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.ContentDatafeedsUpdateRequest, base_url, '/{merchantId}/datafeeds/{datafeedId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "datafeed", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.ContentDatafeedsUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ContentDatafeedsUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Datafeed])
                res.datafeed = out

        return res

    