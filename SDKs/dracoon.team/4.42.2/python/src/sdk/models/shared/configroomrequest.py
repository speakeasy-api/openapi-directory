"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class ConfigRoomRequestClassificationEnum(str, Enum):
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """
    ONE = '1'
    TWO = '2'
    THREE = '3'
    FOUR = '4'

class ConfigRoomRequestNewGroupMemberAcceptanceEnum(str, Enum):
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """
    AUTOALLOW = 'autoallow'
    PENDING = 'pending'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigRoomRequest:
    r"""Request model for configuring a room"""
    
    admin_group_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminGroupIds'), 'exclude': lambda f: f is None }})
    r"""List of group ids
    
    A room requires at least one admin (user or group)
    """  
    admin_ids: Optional[list[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('adminIds'), 'exclude': lambda f: f is None }})
    r"""List of user ids
    
    A room requires at least one admin (user or group)
    """  
    classification: Optional[ConfigRoomRequestClassificationEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('classification'), 'exclude': lambda f: f is None }})
    r"""Classification ID:
    
    * `1` - public
    
    * `2` - internal
    
    * `3` - confidential
    
    * `4` - strictly confidential
    
    
    
    Provided (or default) classification is taken from room
    
    when file gets uploaded without any classification.
    """  
    has_activities_log: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hasActivitiesLog'), 'exclude': lambda f: f is None }})
    r"""Is activities log active (for rooms only)"""  
    inherit_permissions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('inheritPermissions'), 'exclude': lambda f: f is None }})
    r"""Inherit permissions from parent room
    
    (default: `false` if `parentId` is `0`; otherwise: `true`)
    """  
    new_group_member_acceptance: Optional[ConfigRoomRequestNewGroupMemberAcceptanceEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('newGroupMemberAcceptance'), 'exclude': lambda f: f is None }})
    r"""Behaviour when new users are added to the group:
    
    * `autoallow`
    
    * `pending`
    
    
    
    Only relevant if `adminGroupIds` has items.
    """  
    recycle_bin_retention_period: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('recycleBinRetentionPeriod'), 'exclude': lambda f: f is None }})
    r"""Retention period for deleted nodes in days"""  
    take_over_permissions: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('takeOverPermissions'), 'exclude': lambda f: f is None }})
    r"""Take over existing permissions"""  
    