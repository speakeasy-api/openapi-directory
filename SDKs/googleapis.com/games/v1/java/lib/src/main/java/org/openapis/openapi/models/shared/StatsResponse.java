/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * StatsResponse - A third party stats resource.
 */
public class StatsResponse {
    /**
     * Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avg_session_length_minutes")
    public Float avgSessionLengthMinutes;
    public StatsResponse withAvgSessionLengthMinutes(Float avgSessionLengthMinutes) {
        this.avgSessionLengthMinutes = avgSessionLengthMinutes;
        return this;
    }
    
    /**
     * The probability of the player not returning to play the game in the next day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("churn_probability")
    public Float churnProbability;
    public StatsResponse withChurnProbability(Float churnProbability) {
        this.churnProbability = churnProbability;
        return this;
    }
    
    /**
     * Number of days since the player last played this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("days_since_last_played")
    public Integer daysSinceLastPlayed;
    public StatsResponse withDaysSinceLastPlayed(Integer daysSinceLastPlayed) {
        this.daysSinceLastPlayed = daysSinceLastPlayed;
        return this;
    }
    
    /**
     * The probability of the player going to spend beyond a threshold amount of money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("high_spender_probability")
    public Float highSpenderProbability;
    public StatsResponse withHighSpenderProbability(Float highSpenderProbability) {
        this.highSpenderProbability = highSpenderProbability;
        return this;
    }
    
    /**
     * Uniquely identifies the type of this resource. Value is always the fixed string `games#statsResponse`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public StatsResponse withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * Number of in-app purchases made by the player in this game. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_purchases")
    public Integer numPurchases;
    public StatsResponse withNumPurchases(Integer numPurchases) {
        this.numPurchases = numPurchases;
        return this;
    }
    
    /**
     * The approximate number of sessions of the player within the last 28 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_sessions")
    public Integer numSessions;
    public StatsResponse withNumSessions(Integer numSessions) {
        this.numSessions = numSessions;
        return this;
    }
    
    /**
     * The approximation of the sessions percentile of the player within the last 30 days, where a session begins when the player is connected to Play Games Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("num_sessions_percentile")
    public Float numSessionsPercentile;
    public StatsResponse withNumSessionsPercentile(Float numSessionsPercentile) {
        this.numSessionsPercentile = numSessionsPercentile;
        return this;
    }
    
    /**
     * The approximate spend percentile of the player in this game. E.g., 0, 0.25, 0.5, 0.75. Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spend_percentile")
    public Float spendPercentile;
    public StatsResponse withSpendPercentile(Float spendPercentile) {
        this.spendPercentile = spendPercentile;
        return this;
    }
    
    /**
     * The probability of the player going to spend the game in the next seven days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("spend_probability")
    public Float spendProbability;
    public StatsResponse withSpendProbability(Float spendProbability) {
        this.spendProbability = spendProbability;
        return this;
    }
    
    /**
     * The predicted amount of money that the player going to spend in the next 28 days. E.g., 1, 30, 60, ... . Not populated if there is not enough information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_spend_next_28_days")
    public Float totalSpendNext28Days;
    public StatsResponse withTotalSpendNext28Days(Float totalSpendNext28Days) {
        this.totalSpendNext28Days = totalSpendNext28Days;
        return this;
    }
    
}
