"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import authenticationconfiguration as shared_authenticationconfiguration
from ..shared import authenticationdecision_enum as shared_authenticationdecision_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AuthenticationResult:
    r"""The authentication result produced by Voice ID, processed against the current session state and streamed audio of the speaker."""
    
    audio_aggregation_ended_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AudioAggregationEndedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    audio_aggregation_started_at: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AudioAggregationStartedAt'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    authentication_result_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('AuthenticationResultId'), 'exclude': lambda f: f is None }})  
    configuration: Optional[shared_authenticationconfiguration.AuthenticationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Configuration'), 'exclude': lambda f: f is None }})  
    customer_speaker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CustomerSpeakerId'), 'exclude': lambda f: f is None }})  
    decision: Optional[shared_authenticationdecision_enum.AuthenticationDecisionEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Decision'), 'exclude': lambda f: f is None }})  
    generated_speaker_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('GeneratedSpeakerId'), 'exclude': lambda f: f is None }})  
    score: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Score'), 'exclude': lambda f: f is None }})  
    