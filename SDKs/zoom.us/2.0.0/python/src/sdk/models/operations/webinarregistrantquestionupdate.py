"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateSecurity:
    
    o_auth: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'oauth2', 'field_name': 'Authorization' }})  
    
class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum(str, Enum):
    r"""The question-answer type."""
    SHORT = 'short'
    SINGLE_RADIO = 'single_radio'
    SINGLE_DROPDOWN = 'single_dropdown'
    MULTIPLE = 'multiple'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions:
    
    answers: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('answers'), 'exclude': lambda f: f is None }})
    r"""An array of answer choices. Can't be used for short answer type."""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""State whether or not the custom question is required to be answered by a registrant."""  
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Custom question."""  
    type: Optional[WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestionsTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The question-answer type."""  
    
class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum(str, Enum):
    r"""Field name"""
    LAST_NAME = 'last_name'
    ADDRESS = 'address'
    CITY = 'city'
    COUNTRY = 'country'
    ZIP = 'zip'
    STATE = 'state'
    PHONE = 'phone'
    INDUSTRY = 'industry'
    ORG = 'org'
    JOB_TITLE = 'job_title'
    PURCHASING_TIME_FRAME = 'purchasing_time_frame'
    ROLE_IN_PURCHASE_PROCESS = 'role_in_purchase_process'
    NO_OF_EMPLOYEES = 'no_of_employees'
    COMMENTS = 'comments'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions:
    
    field_name: Optional[WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestionsFieldNameEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('field_name'), 'exclude': lambda f: f is None }})
    r"""Field name"""  
    required: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('required'), 'exclude': lambda f: f is None }})
    r"""State whether the selected fields are required or optional."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions:
    r"""Webinar Registrant Questions"""
    
    custom_questions: Optional[list[WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsCustomQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_questions'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'custom_questions', 'json': True }})
    r"""Array of Registrant Custom Questions."""  
    questions: Optional[list[WebinarRegistrantQuestionUpdateWebinarRegistrantQuestionsQuestions]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('questions'), 'exclude': lambda f: f is None }, 'multipart_form': { 'field_name': 'questions', 'json': True }})
    r"""Array of registration fields whose values should be provided by registrants during registration."""  
    

@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateRequest:
    
    request_body: WebinarRegistrantQuestionUpdateWebinarRegistrantQuestions = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})
    r"""Webinar Registrant Questions"""  
    webinar_id: int = dataclasses.field(metadata={'path_param': { 'field_name': 'webinarId', 'style': 'simple', 'explode': False }})
    r"""The webinar ID in \\"**long**\\" format(represented as int64 data type in JSON)."""  
    

@dataclasses.dataclass
class WebinarRegistrantQuestionUpdateResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    