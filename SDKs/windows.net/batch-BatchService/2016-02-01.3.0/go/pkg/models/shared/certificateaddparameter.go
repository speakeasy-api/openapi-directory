// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// CertificateAddParameterCertificateFormatEnum - The format of the certificate data.
type CertificateAddParameterCertificateFormatEnum string

const (
	CertificateAddParameterCertificateFormatEnumPfx      CertificateAddParameterCertificateFormatEnum = "pfx"
	CertificateAddParameterCertificateFormatEnumCer      CertificateAddParameterCertificateFormatEnum = "cer"
	CertificateAddParameterCertificateFormatEnumUnmapped CertificateAddParameterCertificateFormatEnum = "unmapped"
)

func (e *CertificateAddParameterCertificateFormatEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "pfx":
		fallthrough
	case "cer":
		fallthrough
	case "unmapped":
		*e = CertificateAddParameterCertificateFormatEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for CertificateAddParameterCertificateFormatEnum: %s", s)
	}
}

// CertificateAddParameter - A certificate that can be installed on compute nodes and can be used to authenticate operations on the machine.
type CertificateAddParameter struct {
	// The format of the certificate data.
	CertificateFormat *CertificateAddParameterCertificateFormatEnum `json:"certificateFormat,omitempty"`
	// The base64-encoded contents of the certificate. The maximum size is 10KB.
	Data string `json:"data"`
	// The password to access the certificate's private key.
	Password *string `json:"password,omitempty"`
	// The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed).
	Thumbprint string `json:"thumbprint"`
	// The algorithm used to derive the thumbprint. This must be sha1.
	ThumbprintAlgorithm string `json:"thumbprintAlgorithm"`
}
