/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * MessageInput - A message in Google Chat.
 */
public class MessageInput {
    /**
     * Parameters that a Chat app can use to configure how its response is posted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actionResponse")
    public ActionResponse actionResponse;
    public MessageInput withActionResponse(ActionResponse actionResponse) {
        this.actionResponse = actionResponse;
        return this;
    }
    
    /**
     * User-uploaded attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment")
    public AttachmentInput[] attachment;
    public MessageInput withAttachment(AttachmentInput[] attachment) {
        this.attachment = attachment;
        return this;
    }
    
    /**
     * Deprecated: Use `cards_v2` instead. Rich, formatted and interactive cards that can be used to display UI elements such as: formatted texts, buttons, clickable images. Cards are normally displayed below the plain-text body of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cards")
    public Card[] cards;
    public MessageInput withCards(Card[] cards) {
        this.cards = cards;
        return this;
    }
    
    /**
     * Richly formatted and interactive cards that display UI elements and editable widgets, such as: - Formatted text - Buttons - Clickable images - Checkboxes - Radio buttons - Input widgets. Cards are usually displayed below the text body of a Chat message, but can situationally appear other places, such as [dialogs](https://developers.google.com/chat/how-tos/dialogs). Each card can have a maximum size of 32 KB. The `cardId` is a unique identifier among cards in the same message and for identifying user input values. Currently supported widgets include: - `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider` - `TextInput` - `SelectionInput` - `Grid`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cardsV2")
    public CardWithId[] cardsV2;
    public MessageInput withCardsV2(CardWithId[] cardsV2) {
        this.cardsV2 = cardsV2;
        return this;
    }
    
    /**
     * A custom name for a Chat message assigned at creation. Must start with `client-` and contain only lowercase letters, numbers, and hyphens up to 63 characters in length. Specify this field to get, update, or delete the message with the specified value. For example usage, see [Name a created message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAssignedMessageId")
    public String clientAssignedMessageId;
    public MessageInput withClientAssignedMessageId(String clientAssignedMessageId) {
        this.clientAssignedMessageId = clientAssignedMessageId;
        return this;
    }
    
    /**
     * A plain-text description of the message's cards, used when the actual cards cannot be displayed (e.g. mobile notifications).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fallbackText")
    public String fallbackText;
    public MessageInput withFallbackText(String fallbackText) {
        this.fallbackText = fallbackText;
        return this;
    }
    
    /**
     * Resource name in the form `spaces/* /messages/*`. Example: `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public MessageInput withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * A user in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender")
    public UserInput sender;
    public MessageInput withSender(UserInput sender) {
        this.sender = sender;
        return this;
    }
    
    /**
     * A [slash command](https://developers.google.com/chat/how-tos/slash-commands) in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slashCommand")
    public SlashCommand slashCommand;
    public MessageInput withSlashCommand(SlashCommand slashCommand) {
        this.slashCommand = slashCommand;
        return this;
    }
    
    /**
     * A space in Google Chat. Spaces are conversations between two or more users or 1:1 messages between a user and a Chat app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("space")
    public SpaceInput space;
    public MessageInput withSpace(SpaceInput space) {
        this.space = space;
        return this;
    }
    
    /**
     * Plain-text body of the message. The first link to an image, video, web page, or other preview-able item generates a preview chip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public MessageInput withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * A thread in Google Chat.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thread")
    public Thread thread;
    public MessageInput withThread(Thread thread) {
        this.thread = thread;
        return this;
    }
    
}
