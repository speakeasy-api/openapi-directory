// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// ListKeywordsForDataSourceSourceEnum -  The control mapping data source that the keywords apply to.
type ListKeywordsForDataSourceSourceEnum string

const (
	ListKeywordsForDataSourceSourceEnumAwsCloudtrail  ListKeywordsForDataSourceSourceEnum = "AWS_Cloudtrail"
	ListKeywordsForDataSourceSourceEnumAwsConfig      ListKeywordsForDataSourceSourceEnum = "AWS_Config"
	ListKeywordsForDataSourceSourceEnumAwsSecurityHub ListKeywordsForDataSourceSourceEnum = "AWS_Security_Hub"
	ListKeywordsForDataSourceSourceEnumAwsAPICall     ListKeywordsForDataSourceSourceEnum = "AWS_API_Call"
	ListKeywordsForDataSourceSourceEnumManual         ListKeywordsForDataSourceSourceEnum = "MANUAL"
)

func (e *ListKeywordsForDataSourceSourceEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "AWS_Cloudtrail":
		fallthrough
	case "AWS_Config":
		fallthrough
	case "AWS_Security_Hub":
		fallthrough
	case "AWS_API_Call":
		fallthrough
	case "MANUAL":
		*e = ListKeywordsForDataSourceSourceEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListKeywordsForDataSourceSourceEnum: %s", s)
	}
}

type ListKeywordsForDataSourceQueryParams struct {
	//  Represents the maximum number of results on a page or for an API request call.
	MaxResults *int64 `queryParam:"style=form,explode=true,name=maxResults"`
	//  The pagination token that's used to fetch the next set of results.
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
	//  The control mapping data source that the keywords apply to.
	Source ListKeywordsForDataSourceSourceEnum `queryParam:"style=form,explode=true,name=source"`
}

type ListKeywordsForDataSourceHeaders struct {
	XAmzAlgorithm     *string `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type ListKeywordsForDataSourceRequest struct {
	QueryParams ListKeywordsForDataSourceQueryParams
	Headers     ListKeywordsForDataSourceHeaders
}

type ListKeywordsForDataSourceResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServerException
	InternalServerException interface{}
	// Success
	ListKeywordsForDataSourceResponse *shared.ListKeywordsForDataSourceResponse
	StatusCode                        int
	RawResponse                       *http.Response
	// ValidationException
	ValidationException interface{}
}
