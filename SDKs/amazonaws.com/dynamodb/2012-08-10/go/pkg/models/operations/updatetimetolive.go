// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// UpdateTimeToLiveXAmzTargetEnum
type UpdateTimeToLiveXAmzTargetEnum string

const (
	UpdateTimeToLiveXAmzTargetEnumDynamoDb20120810UpdateTimeToLive UpdateTimeToLiveXAmzTargetEnum = "DynamoDB_20120810.UpdateTimeToLive"
)

func (e *UpdateTimeToLiveXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "DynamoDB_20120810.UpdateTimeToLive":
		*e = UpdateTimeToLiveXAmzTargetEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateTimeToLiveXAmzTargetEnum: %s", s)
	}
}

type UpdateTimeToLiveRequest struct {
	UpdateTimeToLiveInput shared.UpdateTimeToLiveInput   `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            UpdateTimeToLiveXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type UpdateTimeToLiveResponse struct {
	ContentType string
	// InternalServerError
	InternalServerError interface{}
	// LimitExceededException
	LimitExceededException interface{}
	StatusCode             int
	RawResponse            *http.Response
	// ResourceInUseException
	ResourceInUseException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	UpdateTimeToLiveOutput *shared.UpdateTimeToLiveOutput
}
