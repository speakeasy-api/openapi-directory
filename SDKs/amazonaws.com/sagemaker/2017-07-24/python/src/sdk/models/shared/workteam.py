"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import memberdefinition as shared_memberdefinition
from ..shared import notificationconfiguration as shared_notificationconfiguration
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Workteam:
    r"""Provides details about a labeling work team."""
    
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description') }})  
    member_definitions: list[shared_memberdefinition.MemberDefinition] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemberDefinitions') }})  
    workteam_arn: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkteamArn') }})  
    workteam_name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkteamName') }})  
    create_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    last_updated_date: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdatedDate'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    notification_configuration: Optional[shared_notificationconfiguration.NotificationConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('NotificationConfiguration'), 'exclude': lambda f: f is None }})  
    product_listing_ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductListingIds'), 'exclude': lambda f: f is None }})  
    sub_domain: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SubDomain'), 'exclude': lambda f: f is None }})  
    workforce_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('WorkforceArn'), 'exclude': lambda f: f is None }})  
    