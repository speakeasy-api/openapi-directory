/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class TestnetNtp1 {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Broadcasts a signed raw transaction to the network
   *
   * @remarks
   * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
   *
   */
  testnetBroadcastTx(
    req: shared.BroadcastTxRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetBroadcastTxResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BroadcastTxRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/testnet/ntp1/broadcast";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetBroadcastTxResponse =
        new operations.TestnetBroadcastTxResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.broadcastTxResponse = utils.objectToClass(
              httpRes?.data,
              shared.BroadcastTxResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Builds a transaction that burns an NTP1 Token
   *
   * @remarks
   * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.
   *
   */
  testnetBurnToken(
    req: shared.BurnTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetBurnTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.BurnTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/testnet/ntp1/burntoken";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetBurnTokenResponse =
        new operations.TestnetBurnTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.burnTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.BurnTokenResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Information On a Neblio Address
   *
   * @remarks
   * Returns both NEBL and NTP1 token UTXOs held at the given address.
   *
   */
  testnetGetAddressInfo(
    req: operations.TestnetGetAddressInfoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetAddressInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetAddressInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/addressinfo/{address}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetAddressInfoResponse =
        new operations.TestnetGetAddressInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getAddressInfoResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetAddressInfoResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Addresses Holding a Token
   *
   * @remarks
   * Returns the the the addresses holding a token and how many tokens are held
   *
   */
  testnetGetTokenHolders(
    req: operations.TestnetGetTokenHoldersRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetTokenHoldersResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetTokenHoldersRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/stakeholders/{tokenid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetTokenHoldersResponse =
        new operations.TestnetGetTokenHoldersResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTokenHoldersResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTokenHoldersResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Returns the tokenId representing a token
   *
   * @remarks
   * Translates a token symbol to a tokenId if a token exists with that symbol on the network
   *
   */
  testnetGetTokenId(
    req: operations.TestnetGetTokenIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetTokenIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetTokenIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/tokenid/{tokensymbol}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetTokenIdResponse =
        new operations.TestnetGetTokenIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTokenIdResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTokenIdResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get Metadata of Token
   *
   * @remarks
   * Returns the metadata associated with a token.
   *
   */
  testnetGetTokenMetadata(
    req: operations.TestnetGetTokenMetadataRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetTokenMetadataResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetTokenMetadataRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/tokenmetadata/{tokenid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetTokenMetadataResponse =
        new operations.TestnetGetTokenMetadataResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTokenMetadataResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTokenMetadataResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get UTXO Metadata of Token
   *
   * @remarks
   * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.
   *
   */
  testnetGetTokenMetadataOfUtxo(
    req: operations.TestnetGetTokenMetadataOfUtxoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetTokenMetadataOfUtxoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetTokenMetadataOfUtxoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetTokenMetadataOfUtxoResponse =
        new operations.TestnetGetTokenMetadataOfUtxoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTokenMetadataResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTokenMetadataResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Information On an NTP1 Transaction
   *
   * @remarks
   * Returns detailed information regarding an NTP1 transaction.
   *
   */
  testnetGetTransactionInfo(
    req: operations.TestnetGetTransactionInfoRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetGetTransactionInfoResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.TestnetGetTransactionInfoRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/testnet/ntp1/transactioninfo/{txid}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetGetTransactionInfoResponse =
        new operations.TestnetGetTransactionInfoResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getTransactionInfoResponse = utils.objectToClass(
              httpRes?.data,
              shared.GetTransactionInfoResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Builds a transaction that issues a new NTP1 Token
   *
   * @remarks
   * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.
   *
   */
  testnetIssueToken(
    req: shared.IssueTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetIssueTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.IssueTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/testnet/ntp1/issue";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetIssueTokenResponse =
        new operations.TestnetIssueTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.issueTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.IssueTokenResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }

  /**
   * Builds a transaction that sends an NTP1 Token
   *
   * @remarks
   * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.
   *
   */
  testnetSendToken(
    req: shared.SendTokenRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.TestnetSendTokenResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new shared.SendTokenRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/testnet/ntp1/sendtoken";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.TestnetSendTokenResponse =
        new operations.TestnetSendTokenResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.sendTokenResponse = utils.objectToClass(
              httpRes?.data,
              shared.SendTokenResponse
            );
          }
          break;
        default:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.error = utils.objectToClass(httpRes?.data, shared.ErrorT);
          }
          break;
      }

      return res;
    });
  }
}
