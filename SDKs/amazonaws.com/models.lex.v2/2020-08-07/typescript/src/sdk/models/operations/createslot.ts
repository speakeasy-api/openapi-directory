/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
  objectToClass,
  SpeakeasyBase,
  SpeakeasyMetadata,
} from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Indicates whether a slot can return multiple values.
 */
export class CreateSlotRequestBodyMultipleValuesSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "allowMultipleValues" })
  allowMultipleValues?: boolean;
}

/**
 * Determines whether Amazon Lex obscures slot values in conversation logs.
 */
export class CreateSlotRequestBodyObfuscationSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "obfuscationSettingType" })
  obfuscationSettingType?: shared.ObfuscationSettingTypeEnum;
}

/**
 * Specifications for the constituent sub slots and the expression for the composite slot.
 */
export class CreateSlotRequestBodySubSlotSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "expression" })
  expression?: string;

  @SpeakeasyMetadata({ elemType: shared.Specifications })
  @Expose({ name: "slotSpecifications" })
  @Transform(
    ({ value }) => {
      const obj: Record<string, shared.Specifications> = {};
      for (const key in value) {
        obj[key] = objectToClass(value[key], shared.Specifications);
      }
      return obj;
    },
    { toClassOnly: true }
  )
  slotSpecifications?: Record<string, shared.Specifications>;
}

/**
 * Specifies the elicitation setting details for constituent sub slots of a composite slot.
 */
export class CreateSlotRequestBodyValueElicitationSetting extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "defaultValueSpecification" })
  @Type(() => shared.SlotDefaultValueSpecification)
  defaultValueSpecification?: shared.SlotDefaultValueSpecification;

  @SpeakeasyMetadata()
  @Expose({ name: "promptSpecification" })
  @Type(() => shared.PromptSpecification)
  promptSpecification?: shared.PromptSpecification;

  @SpeakeasyMetadata({ elemType: shared.SampleUtterance })
  @Expose({ name: "sampleUtterances" })
  @Type(() => shared.SampleUtterance)
  sampleUtterances?: shared.SampleUtterance[];

  @SpeakeasyMetadata()
  @Expose({ name: "slotCaptureSetting" })
  @Type(() => shared.SlotCaptureSetting)
  slotCaptureSetting?: shared.SlotCaptureSetting;

  @SpeakeasyMetadata()
  @Expose({ name: "slotConstraint" })
  slotConstraint?: shared.SlotConstraintEnum;

  /**
   * Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "waitAndContinueSpecification" })
  @Type(() => shared.WaitAndContinueSpecification)
  waitAndContinueSpecification?: shared.WaitAndContinueSpecification;
}

export class CreateSlotRequestBody extends SpeakeasyBase {
  /**
   * A description of the slot. Use this to help identify the slot in lists.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  /**
   * Indicates whether a slot can return multiple values.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "multipleValuesSetting" })
  @Type(() => CreateSlotRequestBodyMultipleValuesSetting)
  multipleValuesSetting?: CreateSlotRequestBodyMultipleValuesSetting;

  /**
   * Determines whether Amazon Lex obscures slot values in conversation logs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "obfuscationSetting" })
  @Type(() => CreateSlotRequestBodyObfuscationSetting)
  obfuscationSetting?: CreateSlotRequestBodyObfuscationSetting;

  /**
   * The name of the slot. Slot names must be unique within the bot that contains the slot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slotName" })
  slotName: string;

  /**
   * The unique identifier for the slot type associated with this slot. The slot type determines the values that can be entered into the slot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "slotTypeId" })
  slotTypeId?: string;

  /**
   * Specifications for the constituent sub slots and the expression for the composite slot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "subSlotSetting" })
  @Type(() => CreateSlotRequestBodySubSlotSetting)
  subSlotSetting?: CreateSlotRequestBodySubSlotSetting;

  /**
   * Specifies the elicitation setting details for constituent sub slots of a composite slot.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "valueElicitationSetting" })
  @Type(() => CreateSlotRequestBodyValueElicitationSetting)
  valueElicitationSetting: CreateSlotRequestBodyValueElicitationSetting;
}

export class CreateSlotRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: CreateSlotRequestBody;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Algorithm",
  })
  xAmzAlgorithm?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Content-Sha256",
  })
  xAmzContentSha256?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Credential",
  })
  xAmzCredential?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Date",
  })
  xAmzDate?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Security-Token",
  })
  xAmzSecurityToken?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-Signature",
  })
  xAmzSignature?: string;

  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=X-Amz-SignedHeaders",
  })
  xAmzSignedHeaders?: string;

  /**
   * The identifier of the bot associated with the slot.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botId",
  })
  botId: string;

  /**
   * The version of the bot associated with the slot.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=botVersion",
  })
  botVersion: string;

  /**
   * The identifier of the intent that contains the slot.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=intentId",
  })
  intentId: string;

  /**
   * The identifier of the language and locale that the slot will be used in. The string must match one of the supported locales. All of the bots, intents, slot types used by the slot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a>.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=localeId",
  })
  localeId: string;
}

export class CreateSlotResponse extends SpeakeasyBase {
  /**
   * ConflictException
   */
  @SpeakeasyMetadata()
  conflictException?: any;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * Success
   */
  @SpeakeasyMetadata()
  createSlotResponse?: shared.CreateSlotResponse;

  /**
   * InternalServerException
   */
  @SpeakeasyMetadata()
  internalServerException?: any;

  /**
   * PreconditionFailedException
   */
  @SpeakeasyMetadata()
  preconditionFailedException?: any;

  /**
   * ServiceQuotaExceededException
   */
  @SpeakeasyMetadata()
  serviceQuotaExceededException?: any;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * ThrottlingException
   */
  @SpeakeasyMetadata()
  throttlingException?: any;

  /**
   * ValidationException
   */
  @SpeakeasyMetadata()
  validationException?: any;
}
