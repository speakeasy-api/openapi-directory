"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional

class DescribeImagesResultImagesArchitectureEnum(str, Enum):
    r"""The architecture of the image."""
    I386 = 'i386'
    X86_64 = 'x86_64'
    ARM64 = 'arm64'
    X86_64_MAC = 'x86_64_mac'
    ARM64_MAC = 'arm64_mac'

class DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum(str, Enum):
    r"""The volume type. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\\">Amazon EBS volume types</a> in the <i>Amazon EC2 User Guide</i>. If the volume type is <code>io1</code> or <code>io2</code>, you must specify the IOPS that the volume supports."""
    STANDARD = 'standard'
    IO1 = 'io1'
    IO2 = 'io2'
    GP2 = 'gp2'
    SC1 = 'sc1'
    ST1 = 'st1'
    GP3 = 'gp3'


@dataclasses.dataclass
class DescribeImagesResultImagesBlockDeviceMappingsEbs:
    r"""Parameters used to automatically set up EBS volumes when the instance is launched."""
    
    delete_on_termination: Optional[bool] = dataclasses.field(default=None)  
    encrypted: Optional[bool] = dataclasses.field(default=None)  
    iops: Optional[int] = dataclasses.field(default=None)  
    kms_key_id: Optional[str] = dataclasses.field(default=None)  
    outpost_arn: Optional[str] = dataclasses.field(default=None)  
    snapshot_id: Optional[str] = dataclasses.field(default=None)  
    throughput: Optional[int] = dataclasses.field(default=None)  
    volume_size: Optional[int] = dataclasses.field(default=None)  
    volume_type: Optional[DescribeImagesResultImagesBlockDeviceMappingsEbsVolumeTypeEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeImagesResultImagesBlockDeviceMappings:
    r"""Describes a block device mapping, which defines the EBS volumes and instance store volumes to attach to an instance at launch."""
    
    device_name: Optional[str] = dataclasses.field(default=None)  
    ebs: Optional[DescribeImagesResultImagesBlockDeviceMappingsEbs] = dataclasses.field(default=None)  
    no_device: Optional[str] = dataclasses.field(default=None)  
    virtual_name: Optional[str] = dataclasses.field(default=None)  
    
class DescribeImagesResultImagesBootModeEnum(str, Enum):
    r"""The boot mode of the image. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ami-boot.html\\">Boot modes</a> in the <i>Amazon EC2 User Guide</i>."""
    LEGACY_BIOS = 'legacy-bios'
    UEFI = 'uefi'
    UEFI_PREFERRED = 'uefi-preferred'

class DescribeImagesResultImagesHypervisorEnum(str, Enum):
    r"""The hypervisor type of the image."""
    OVM = 'ovm'
    XEN = 'xen'

class DescribeImagesResultImagesImageTypeEnum(str, Enum):
    r"""The type of image."""
    MACHINE = 'machine'
    KERNEL = 'kernel'
    RAMDISK = 'ramdisk'

class DescribeImagesResultImagesImdsSupportEnum(str, Enum):
    r"""If <code>v2.0</code>, it indicates that IMDSv2 is specified in the AMI. Instances launched from this AMI will have <code>HttpTokens</code> automatically set to <code>required</code> so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, <code>HttpPutResponseHopLimit</code> is set to <code>2</code>. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-IMDS-new-instances.html#configure-IMDS-new-instances-ami-configuration\\">Configure the AMI</a> in the <i>Amazon EC2 User Guide</i>."""
    V2_0 = 'v2.0'

class DescribeImagesResultImagesPlatformEnum(str, Enum):
    r"""This value is set to <code>windows</code> for Windows AMIs; otherwise, it is blank."""
    WINDOWS = 'Windows'

class DescribeImagesResultImagesProductCodesProductCodeTypeEnum(str, Enum):
    r"""The type of product code."""
    DEVPAY = 'devpay'
    MARKETPLACE = 'marketplace'


@dataclasses.dataclass
class DescribeImagesResultImagesProductCodes:
    r"""Describes a product code."""
    
    product_code_id: Optional[str] = dataclasses.field(default=None)  
    product_code_type: Optional[DescribeImagesResultImagesProductCodesProductCodeTypeEnum] = dataclasses.field(default=None)  
    
class DescribeImagesResultImagesRootDeviceTypeEnum(str, Enum):
    r"""The type of root device used by the AMI. The AMI can use an Amazon EBS volume or an instance store volume."""
    EBS = 'ebs'
    INSTANCE_STORE = 'instance-store'

class DescribeImagesResultImagesStateEnum(str, Enum):
    r"""The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance."""
    PENDING = 'pending'
    AVAILABLE = 'available'
    INVALID = 'invalid'
    DEREGISTERED = 'deregistered'
    TRANSIENT = 'transient'
    FAILED = 'failed'
    ERROR = 'error'


@dataclasses.dataclass
class DescribeImagesResultImagesStateReason:
    r"""The reason for the state change."""
    
    code: Optional[str] = dataclasses.field(default=None)  
    message: Optional[str] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeImagesResultImagesTags:
    r"""Describes a tag."""
    
    key: Optional[str] = dataclasses.field(default=None)  
    value: Optional[str] = dataclasses.field(default=None)  
    
class DescribeImagesResultImagesTpmSupportEnum(str, Enum):
    r"""If the image is configured for NitroTPM support, the value is <code>v2.0</code>. For more information, see <a href=\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nitrotpm.html\\">NitroTPM</a> in the <i>Amazon EC2 User Guide</i>."""
    V2_0 = 'v2.0'

class DescribeImagesResultImagesVirtualizationTypeEnum(str, Enum):
    r"""The type of virtualization of the AMI."""
    HVM = 'hvm'
    PARAVIRTUAL = 'paravirtual'


@dataclasses.dataclass
class DescribeImagesResultImages:
    r"""Describes an image."""
    
    architecture: Optional[DescribeImagesResultImagesArchitectureEnum] = dataclasses.field(default=None)  
    block_device_mappings: Optional[list[DescribeImagesResultImagesBlockDeviceMappings]] = dataclasses.field(default=None)  
    boot_mode: Optional[DescribeImagesResultImagesBootModeEnum] = dataclasses.field(default=None)  
    creation_date: Optional[str] = dataclasses.field(default=None)  
    deprecation_time: Optional[str] = dataclasses.field(default=None)  
    description: Optional[str] = dataclasses.field(default=None)  
    ena_support: Optional[bool] = dataclasses.field(default=None)  
    hypervisor: Optional[DescribeImagesResultImagesHypervisorEnum] = dataclasses.field(default=None)  
    image_id: Optional[str] = dataclasses.field(default=None)  
    image_location: Optional[str] = dataclasses.field(default=None)  
    image_owner_alias: Optional[str] = dataclasses.field(default=None)  
    image_type: Optional[DescribeImagesResultImagesImageTypeEnum] = dataclasses.field(default=None)  
    imds_support: Optional[DescribeImagesResultImagesImdsSupportEnum] = dataclasses.field(default=None)  
    kernel_id: Optional[str] = dataclasses.field(default=None)  
    name: Optional[str] = dataclasses.field(default=None)  
    owner_id: Optional[str] = dataclasses.field(default=None)  
    platform: Optional[DescribeImagesResultImagesPlatformEnum] = dataclasses.field(default=None)  
    platform_details: Optional[str] = dataclasses.field(default=None)  
    product_codes: Optional[list[DescribeImagesResultImagesProductCodes]] = dataclasses.field(default=None)  
    public: Optional[bool] = dataclasses.field(default=None)  
    ramdisk_id: Optional[str] = dataclasses.field(default=None)  
    root_device_name: Optional[str] = dataclasses.field(default=None)  
    root_device_type: Optional[DescribeImagesResultImagesRootDeviceTypeEnum] = dataclasses.field(default=None)  
    sriov_net_support: Optional[str] = dataclasses.field(default=None)  
    state: Optional[DescribeImagesResultImagesStateEnum] = dataclasses.field(default=None)  
    state_reason: Optional[DescribeImagesResultImagesStateReason] = dataclasses.field(default=None)  
    tags: Optional[list[DescribeImagesResultImagesTags]] = dataclasses.field(default=None)  
    tpm_support: Optional[DescribeImagesResultImagesTpmSupportEnum] = dataclasses.field(default=None)  
    usage_operation: Optional[str] = dataclasses.field(default=None)  
    virtualization_type: Optional[DescribeImagesResultImagesVirtualizationTypeEnum] = dataclasses.field(default=None)  
    

@dataclasses.dataclass
class DescribeImagesResult:
    r"""Success"""
    
    images: Optional[list[DescribeImagesResultImages]] = dataclasses.field(default=None)  
    next_token: Optional[str] = dataclasses.field(default=None)  
    