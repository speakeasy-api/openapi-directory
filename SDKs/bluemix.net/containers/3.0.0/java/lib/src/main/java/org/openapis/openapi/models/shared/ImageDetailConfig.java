/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ImageDetailConfig {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ArgsEscaped")
    public Boolean argsEscaped;
    public ImageDetailConfig withArgsEscaped(Boolean argsEscaped) {
        this.argsEscaped = argsEscaped;
        return this;
    }
    
    /**
     * Attaches the container to stderr.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStderr")
    public Boolean attachStderr;
    public ImageDetailConfig withAttachStderr(Boolean attachStderr) {
        this.attachStderr = attachStderr;
        return this;
    }
    
    /**
     * Attaches the container to stdin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStdin")
    public Boolean attachStdin;
    public ImageDetailConfig withAttachStdin(Boolean attachStdin) {
        this.attachStdin = attachStdin;
        return this;
    }
    
    /**
     * Attaches the container to stdout.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("AttachStdout")
    public Boolean attachStdout;
    public ImageDetailConfig withAttachStdout(Boolean attachStdout) {
        this.attachStdout = attachStdout;
        return this;
    }
    
    /**
     * The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. &lt;br&gt;Sample long-running commands:&lt;br&gt;["ping","localhost"]&lt;br&gt;["tail","-f","/dev/null"]&lt;br&gt;["sh","-c","while true; do date; sleep 20; done"]
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Cmd")
    public String[] cmd;
    public ImageDetailConfig withCmd(String[] cmd) {
        this.cmd = cmd;
        return this;
    }
    
    /**
     * The domain name to be used for the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Domainmame")
    public String domainmame;
    public ImageDetailConfig withDomainmame(String domainmame) {
        this.domainmame = domainmame;
        return this;
    }
    
    /**
     * The entrypoint specifies a command that will always be executed when the container starts.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Entrypoint")
    public String entrypoint;
    public ImageDetailConfig withEntrypoint(String entrypoint) {
        this.entrypoint = entrypoint;
        return this;
    }
    
    /**
     * A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Env")
    public String[] env;
    public ImageDetailConfig withEnv(String[] env) {
        this.env = env;
        return this;
    }
    
    /**
     * A list of all udp and tcp ports that have been publicly exposed during the container creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ExposedPorts")
    public String[] exposedPorts;
    public ImageDetailConfig withExposedPorts(String[] exposedPorts) {
        this.exposedPorts = exposedPorts;
        return this;
    }
    
    /**
     * The host name of the container provided by Openstack. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Hostname")
    public String hostname;
    public ImageDetailConfig withHostname(String hostname) {
        this.hostname = hostname;
        return this;
    }
    
    /**
     * The unique ID of the image. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    public String image;
    public ImageDetailConfig withImage(String image) {
        this.image = image;
        return this;
    }
    
    /**
     * List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Labels")
    public String[] labels;
    public ImageDetailConfig withLabels(String[] labels) {
        this.labels = labels;
        return this;
    }
    
    /**
     * ???
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OnBuild")
    public String[] onBuild;
    public ImageDetailConfig withOnBuild(String[] onBuild) {
        this.onBuild = onBuild;
        return this;
    }
    
    /**
     * When set to true, it opens stdin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("OpenStdin")
    public Boolean openStdin;
    public ImageDetailConfig withOpenStdin(Boolean openStdin) {
        this.openStdin = openStdin;
        return this;
    }
    
    /**
     * When set to true it closes stdin after the attached client disconnects.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StdinOnce")
    public Boolean stdinOnce;
    public ImageDetailConfig withStdinOnce(Boolean stdinOnce) {
        this.stdinOnce = stdinOnce;
        return this;
    }
    
    /**
     * When set to true, attach standard streams to a tty, including stdin if it is not closed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Tty")
    public Boolean tty;
    public ImageDetailConfig withTty(Boolean tty) {
        this.tty = tty;
        return this;
    }
    
    /**
     * The user to be used inside the container.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("User")
    public String user;
    public ImageDetailConfig withUser(String user) {
        this.user = user;
        return this;
    }
    
    /**
     * Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Volumes")
    public String volumes;
    public ImageDetailConfig withVolumes(String volumes) {
        this.volumes = volumes;
        return this;
    }
    
    /**
     * The working directory inside the container where specified commands are executed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WorkingDir")
    public String workingDir;
    public ImageDetailConfig withWorkingDir(String workingDir) {
        this.workingDir = workingDir;
        return this;
    }
    
}
