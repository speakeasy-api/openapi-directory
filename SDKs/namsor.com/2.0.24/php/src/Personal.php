<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Personal 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * [USES 20 UNITS PER NAME COUPLE] Infer several classifications for a cross border interaction between names (ex. remit, travel, intl com)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CorridorRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CorridorSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CorridorResponse
     */
	public function corridor(
        \OpenAPI\OpenAPI\Models\Operations\CorridorRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CorridorSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CorridorResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/corridor/{countryIso2From}/{firstNameFrom}/{lastNameFrom}/{countryIso2To}/{firstNameTo}/{lastNameTo}', \OpenAPI\OpenAPI\Models\Operations\CorridorRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CorridorResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->corridorOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CorridorOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 20 UNITS PER NAME PAIR] Infer several classifications for up to 100 cross border interaction between names (ex. remit, travel, intl com)
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchCorridorIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CorridorBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CorridorBatchResponse
     */
	public function corridorBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchCorridorIn $request,
        \OpenAPI\OpenAPI\Models\Operations\CorridorBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CorridorBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/corridorBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CorridorBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchCorridorOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchCorridorOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of a personal full name, or one surname. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CountryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CountrySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CountryResponse
     */
	public function country(
        \OpenAPI\OpenAPI\Models\Operations\CountryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CountrySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CountryResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/country/{personalNameFull}', \OpenAPI\OpenAPI\Models\Operations\CountryRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGeoOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGeoOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of residence of up to 100 personal full names, or surnames. Assumes names as they are in the country of residence OR the country of origin.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CountryBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\CountryBatchResponse
     */
	public function countryBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\CountryBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\CountryBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/countryBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CountryBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGeoOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of a personal name, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DiasporaRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiasporaSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiasporaResponse
     */
	public function diaspora(
        \OpenAPI\OpenAPI\Models\Operations\DiasporaRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DiasporaSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiasporaResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/diaspora/{countryIso2}/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\DiasporaRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiasporaResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameDiasporaedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameDiasporaedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 20 UNITS PER NAME] Infer the likely ethnicity/diaspora of up to 100 personal names, given a country of residence ISO2 code (ex. US, CA, AU, NZ etc.)
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DiasporaBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\DiasporaBatchResponse
     */
	public function diasporaBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\DiasporaBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\DiasporaBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/diasporaBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DiasporaBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameDiasporaedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameDiasporaedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a just a fiven name, assuming default 'US' local context. Please use preferably full names and local geographic context for better accuracy.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderResponse
     */
	public function gender(
        \OpenAPI\OpenAPI\Models\Operations\GenderRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/gender/{firstName}', \OpenAPI\OpenAPI\Models\Operations\GenderRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 names, detecting automatically the cultural context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderBatchResponse
     */
	public function genderBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a full name, ex. John H. Smith
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderFullResponse
     */
	public function genderFull(
        \OpenAPI\OpenAPI\Models\Operations\GenderFullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderFullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderFullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderFull/{fullName}', \OpenAPI\OpenAPI\Models\Operations\GenderFullRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderFullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 full names, detecting automatically the cultural context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderFullBatchResponse
     */
	public function genderFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a full name, given a local context (ISO2 country code).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoResponse
     */
	public function genderFullGeo(
        \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderFullGeo/{fullName}/{countryIso2}', \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 full names, with a given cultural context (country ISO2 code).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoBatchResponse
     */
	public function genderFullGeoBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderFullGeoBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderFullGeoBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a name, given a local context (ISO2 country code).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderGeoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderGeoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderGeoResponse
     */
	public function genderGeo(
        \OpenAPI\OpenAPI\Models\Operations\GenderGeoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderGeoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderGeoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderGeo/{firstName}/{lastName}/{countryIso2}', \OpenAPI\OpenAPI\Models\Operations\GenderGeoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderGeoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of up to 100 names, each given a local context (ISO2 country code).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\GenderGeoBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\GenderGeoBatchResponse
     */
	public function genderGeoBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\GenderGeoBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\GenderGeoBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/genderGeoBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenderGeoBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely gender of a name.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Gender1Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\Gender1Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\Gender1Response
     */
	public function gender1(
        \OpenAPI\OpenAPI\Models\Operations\Gender1Request $request,
        \OpenAPI\OpenAPI\Models\Operations\Gender1Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\Gender1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/gender/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\Gender1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Gender1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGenderedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGenderedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of a personal name. Assumes names as they are in the country of origin. For US, CA, AU, NZ and other melting-pots : use 'diaspora' instead.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\OriginRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OriginSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OriginResponse
     */
	public function origin(
        \OpenAPI\OpenAPI\Models\Operations\OriginRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\OriginSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OriginResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/origin/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\OriginRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OriginResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameOriginedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameOriginedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely country of origin of up to 100 names, detecting automatically the cultural context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\OriginBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\OriginBatchResponse
     */
	public function originBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\OriginBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\OriginBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/originBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\OriginBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameOriginedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameOriginedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseNameResponse
     */
	public function parseName(
        \OpenAPI\OpenAPI\Models\Operations\ParseNameRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseNameSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseNameResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseName/{nameFull}', \OpenAPI\OpenAPI\Models\Operations\ParseNameRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseNameResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseNameBatchResponse
     */
	public function parseNameBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseNameBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseNameBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseNameBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseNameBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. For better accuracy, provide a geographic context.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoResponse
     */
	public function parseNameGeo(
        \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseName/{nameFull}/{countryIso2}', \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * Infer the likely first/last name structure of a name, ex. John Smith or SMITH, John or SMITH; John. Giving a local context improves precision. 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoBatchResponse
     */
	public function parseNameGeoBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/parseNameGeoBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ParseNameGeoBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameParsedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameParsedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of a personal full name. NB: only for INDIA (as of current version).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionFullRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionFullSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReligionFullResponse
     */
	public function religionFull(
        \OpenAPI\OpenAPI\Models\Operations\ReligionFullRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ReligionFullSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReligionFullResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/religionFull/{countryIso2}/{subDivisionIso31662}/{personalNameFull}', \OpenAPI\OpenAPI\Models\Operations\ReligionFullRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReligionFullResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personalNameReligionedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonalNameReligionedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely religion of up to 100 personal full names. NB: only for India as of currently.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoSubdivisionIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ReligionFullBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\ReligionFullBatchResponse
     */
	public function religionFullBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameGeoSubdivisionIn $request,
        \OpenAPI\OpenAPI\Models\Operations\ReligionFullBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\ReligionFullBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/religionFullBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ReligionFullBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchPersonalNameReligionedOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchPersonalNameReligionedOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a name at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationResponse
     */
	public function subclassification(
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassification/{countryIso2}/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\SubclassificationRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer the likely origin of a list of up to 100 names at a country subclassification level (state or regeion). Initially, this is only supported for India (ISO2 code 'IN').
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\SubclassificationBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\SubclassificationBatchResponse
     */
	public function subclassificationBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\SubclassificationBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\SubclassificationBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/subclassificationBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\SubclassificationBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameGeoSubclassificationOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoSubclassificationOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicitySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityResponse
     */
	public function usRaceEthnicity(
        \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicitySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/usRaceEthnicity/{firstName}/{lastName}', \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameUSRaceEthnicityOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameUSRaceEthnicityOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityBatchResponse
     */
	public function usRaceEthnicityBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoIn $request,
        \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/usRaceEthnicityBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameUSRaceEthnicityOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameUSRaceEthnicityOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer a US resident's likely race/ethnicity according to US Census taxonomy, using (optional) ZIP5 code info. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Request $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Security $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Response
     */
	public function usRaceEthnicityZip5(
        \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Request $request,
        \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Security $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/usRaceEthnicityZIP5/{firstName}/{lastName}/{zip5Code}', \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsRaceEthnicityZip5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->firstLastNameUSRaceEthnicityOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FirstLastNameUSRaceEthnicityOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
	
    /**
     * [USES 10 UNITS PER NAME] Infer up-to 100 US resident's likely race/ethnicity according to US Census taxonomy, with (optional) ZIP code. Output is W_NL (white, non latino), HL (hispano latino),  A (asian, non latino), B_NL (black, non latino). Optionally add header X-OPTION-USRACEETHNICITY-TAXONOMY: USRACEETHNICITY-6CLASSES for two additional classes, AI_AN (American Indian or Alaskan Native) and PI (Pacific Islander).
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoZippedIn $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UsZipRaceEthnicityBatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\UsZipRaceEthnicityBatchResponse
     */
	public function usZipRaceEthnicityBatch(
        \OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameGeoZippedIn $request,
        \OpenAPI\OpenAPI\Models\Operations\UsZipRaceEthnicityBatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\UsZipRaceEthnicityBatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/api2/json/usZipRaceEthnicityBatch');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UsZipRaceEthnicityBatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->batchFirstLastNameUSRaceEthnicityOut = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\BatchFirstLastNameUSRaceEthnicityOut', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 400 or $httpResponse->getStatusCode() === 401 or $httpResponse->getStatusCode() === 403) {
        }

        return $response;
    }
}