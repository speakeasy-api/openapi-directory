/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class GetAtmsRequest extends SpeakeasyBase {
  /**
   * Used for conditional request, to retrieve data only if modified since a given date
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-Modified-Since",
  })
  ifModifiedSince?: string;

  /**
   * Used for conditional request, to retrieve data only if the given Etag value does not match
   */
  @SpeakeasyMetadata({
    data: "header, style=simple;explode=false;name=If-None-Match",
  })
  ifNoneMatch?: string;
}

/**
 * A standard error response.
 */
export class GetAtmsErrorObject extends SpeakeasyBase {
  /**
   * Further details describing the error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: string;

  /**
   * This corresponds to the HTTP status code
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: string;

  /**
   * A short title of the type of error
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: string;
}

export enum GetAtms503ErrorObjectDescriptionEnum {
  TheServiceIsTemporarilyUnavailable = "The service is temporarily unavailable.",
}

export enum GetAtms503ErrorObjectStatusEnum {
  FiveHundredAndThree = "503",
}

export enum GetAtms503ErrorObjectTitleEnum {
  ServiceTemporarilyUnavailable = "Service temporarily unavailable",
}

/**
 * The service is temporarily unavailable.
 */
export class GetAtms503ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetAtms503ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAtms503ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetAtms503ErrorObjectTitleEnum;
}

export enum GetAtms500ErrorObjectDescriptionEnum {
  AnErrorOccurredOnTheServerNoFurtherInformationIsAvailable = "An error occurred on the server. No further information is available.",
}

export enum GetAtms500ErrorObjectStatusEnum {
  FiveHundred = "500",
}

export enum GetAtms500ErrorObjectTitleEnum {
  InternalServerError = "Internal server error",
}

/**
 * An error occurred on the server. No further information is available.
 */
export class GetAtms500ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetAtms500ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAtms500ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetAtms500ErrorObjectTitleEnum;
}

export enum GetAtms429ErrorObjectDescriptionEnum {
  YouHaveRequestedThisResourceTooOftenSlowDown = "You have requested this resource too often. Slow down.",
}

export enum GetAtms429ErrorObjectStatusEnum {
  FourHundredAndTwentyNine = "429",
}

export enum GetAtms429ErrorObjectTitleEnum {
  TooManyRequests = "Too many requests",
}

/**
 * You have requested this resource too often. Slow down.
 */
export class GetAtms429ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetAtms429ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAtms429ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetAtms429ErrorObjectTitleEnum;
}

export enum GetAtms408ErrorObjectDescriptionEnum {
  YourClientHasFailedToSubmitARequestAndATimeoutHasOccurred = "Your client has failed to submit a request, and a timeout has occurred.",
}

export enum GetAtms408ErrorObjectStatusEnum {
  FourHundredAndEight = "408",
}

export enum GetAtms408ErrorObjectTitleEnum {
  ClientTimeout = "Client timeout",
}

/**
 * Your client has failed to submit a request, and a timeout has occurred.
 */
export class GetAtms408ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetAtms408ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAtms408ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetAtms408ErrorObjectTitleEnum;
}

export enum GetAtms400ErrorObjectDescriptionEnum {
  YouHaveSentARequestWhichCouldNotBeUnderstood = "You have sent a request which could not be understood.",
}

export enum GetAtms400ErrorObjectStatusEnum {
  FourHundred = "400",
}

export enum GetAtms400ErrorObjectTitleEnum {
  BadRequest = "Bad request",
}

/**
 * You have sent a request which could not be understood.
 */
export class GetAtms400ErrorObject extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description: GetAtms400ErrorObjectDescriptionEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status: GetAtms400ErrorObjectStatusEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title: GetAtms400ErrorObjectTitleEnum;
}

/**
 * Information about ATM services
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMATMServicesEnum {
  Balance = "Balance",
  BillPayments = "BillPayments",
  CashDeposits = "CashDeposits",
  CashWithdrawal = "CashWithdrawal",
  CharityDonation = "CharityDonation",
  ChequeBookRequest = "ChequeBookRequest",
  ChequeDeposits = "ChequeDeposits",
  FastCash = "FastCash",
  MiniStatement = "MiniStatement",
  MobileBankingRegistration = "MobileBankingRegistration",
  MobilePaymentRegistration = "MobilePaymentRegistration",
  MobilePhoneTopUp = "MobilePhoneTopUp",
  OrderStatement = "OrderStatement",
  PINActivation = "PINActivation",
  PINChange = "PINChange",
}

/**
 * Information about the accessibility
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMAccessibilityTypesEnum {
  AudioCashMachine = "AudioCashMachine",
  AutomaticDoors = "AutomaticDoors",
  ChairAccess = "ChairAccess",
  DriveThru = "DriveThru",
  ExternalRamp = "ExternalRamp",
  InductionLoop = "InductionLoop",
  InternalRamp = "InternalRamp",
  LevelAccess = "LevelAccess",
  LowerLevelCounter = "LowerLevelCounter",
  WheelchairAccess = "WheelchairAccess",
}

/**
 * Postal Address
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMAddress extends SpeakeasyBase {
  /**
   * Number or Name that identifies the position of a building on a street
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BuildingNumberOrName" })
  buildingNumberOrName?: string;

  /**
   * Nation with its own government
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Country" })
  country: string;

  /**
   * Identifies a subdivision of a country such as state, region, county
   */
  @SpeakeasyMetadata()
  @Expose({ name: "CountrySubDivision" })
  countrySubDivision?: string;

  /**
   * Directions for customers
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OptionalAddressField" })
  optionalAddressField?: string;

  /**
   * Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail
   */
  @SpeakeasyMetadata()
  @Expose({ name: "PostCode" })
  postCode: string;

  /**
   * Name of a street or thoroughfare
   */
  @SpeakeasyMetadata()
  @Expose({ name: "StreetName" })
  streetName: string;

  /**
   * Name of a built-up area, with defined boundaries, and a local government
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TownName" })
  townName?: string;
}

/**
 * Geographic Coordinates
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMGeographicLocation extends SpeakeasyBase {
  /**
   * The Latitude measured in decimal format according to ISO 213
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Latitude" })
  latitude: string;

  /**
   * The longitude measured in decimal format according to ISO 213
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Longitude" })
  longitude: string;
}

/**
 * Indicates the environment of the ATM
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMLocationCategoryEnum {
  Airport = "Airport",
  BankSpecialisedOutlet = "BankSpecialisedOutlet",
  BranchExternal = "BranchExternal",
  BranchInternal = "BranchInternal",
  BranchLobby = "BranchLobby",
  BureauDeChange = "BureauDeChange",
  CoachStation = "CoachStation",
  CommercialSpaceInternal = "CommercialSpaceInternal",
  ConvenienceStore = "ConvenienceStore",
  ExhibitionCentre = "ExhibitionCentre",
  FactoryOrOffice = "FactoryOrOffice",
  FillingStation = "FillingStation",
  FinancialInstitution = "FinancialInstitution",
  GovernmentOffice = "GovernmentOffice",
  Hospital = "Hospital",
  Hotel = "Hotel",
  KioskPod = "KioskPod",
  LeisureCentre = "LeisureCentre",
  PleasurePark = "PleasurePark",
  PublicHouse = "PublicHouse",
  RailwayStation = "RailwayStation",
  RemoteUnit = "RemoteUnit",
  RetailerDepartmentStore = "RetailerDepartmentStore",
  RetailerOutlet = "RetailerOutlet",
  SeaportTerminal = "SeaportTerminal",
  ServiceStation = "ServiceStation",
  ShoppingCentreExternal = "ShoppingCentreExternal",
  ShoppingCentreInternal = "ShoppingCentreInternal",
  StorageDepot = "StorageDepot",
  SupermarketExternal = "SupermarketExternal",
  SupermarketInternal = "SupermarketInternal",
  UndergroundRailwayStation = "UndergroundRailwayStation",
  UniversityOrCollege = "UniversityOrCollege",
}

/**
 * Minimum currency denominations usually available
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMMinimumValueDispensedEnum {
  Pound5 = "£5",
  Pound10 = "£10",
  Pound20 = "£20",
  Pound50 = "£50",
  Pound100 = "£100",
}

/**
 * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationBrandTrademarkIPOCodeEnum {
  Uk = "UK",
  Eu = "EU",
}

/**
 * Brand
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationBrand extends SpeakeasyBase {
  /**
   * The trademark number that has been registered with the Intellectual Property Office. Note: The 2 letter IPO prefix should be omitted
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkID" })
  trademarkID: string;

  /**
   * The Intellectual Property Office (IPO) is the official body responsible for intellectual property (IP) rights including patents, designs, trademarks and copyright. (Code: UK or EU only)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TrademarkIPOCode" })
  trademarkIPOCode: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationBrandTrademarkIPOCodeEnum;
}

/**
 * Organisation Name
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisationOrganisationName extends SpeakeasyBase {
  /**
   * Legal Name of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LegalName" })
  legalName: string;
}

/**
 * Parent organisation
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisation extends SpeakeasyBase {
  /**
   * The BIC from the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BIC" })
  bic?: string;

  /**
   * The LEI ID of the organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LEI" })
  lei?: string;

  /**
   * Organisation Name
   */
  @SpeakeasyMetadata()
  @Expose({ name: "OrganisationName" })
  @Type(
    () =>
      GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisationOrganisationName
  )
  organisationName: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisationOrganisationName;
}

/**
 * Organisation
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisation extends SpeakeasyBase {
  /**
   * Brand
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Brand" })
  @Type(
    () =>
      GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationBrand
  )
  brand: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationBrand;

  /**
   * Parent organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ParentOrganisation" })
  @Type(
    () =>
      GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisation
  )
  parentOrganisation: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisationParentOrganisation;
}

export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATM extends SpeakeasyBase {
  /**
   * ATM terminal device identification for the acquirer and the issuer
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ATMID" })
  atmid: string;

  /**
   * Information about ATM services
   */
  @SpeakeasyMetadata()
  @Expose({ name: "ATMServices" })
  atmServices: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMATMServicesEnum[];

  /**
   * Information about the accessibility
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AccessibilityTypes" })
  accessibilityTypes?: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMAccessibilityTypesEnum[];

  /**
   * ATM Service Description
   */
  @SpeakeasyMetadata()
  @Expose({ name: "AdditionalATMServices" })
  additionalATMServices?: string[];

  /**
   * Postal Address
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Address" })
  @Type(() => GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMAddress)
  address: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMAddress;

  /**
   * Unique and unambiguous identification of a retail branch of a financial institution
   */
  @SpeakeasyMetadata()
  @Expose({ name: "BranchIdentification" })
  branchIdentification?: string;

  /**
   * Defines currency type available for dispense
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Currency" })
  currency: string[];

  /**
   * Geographic Coordinates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "GeographicLocation" })
  @Type(
    () =>
      GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMGeographicLocation
  )
  geographicLocation: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMGeographicLocation;

  /**
   * Indicates the environment of the ATM
   */
  @SpeakeasyMetadata()
  @Expose({ name: "LocationCategory" })
  locationCategory?: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMLocationCategoryEnum;

  /**
   * Minimum currency denominations usually available
   */
  @SpeakeasyMetadata()
  @Expose({ name: "MinimumValueDispensed" })
  minimumValueDispensed?: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMMinimumValueDispensedEnum;

  /**
   * Organisation
   */
  @SpeakeasyMetadata()
  @Expose({ name: "Organisation" })
  @Type(
    () => GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisation
  )
  organisation: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATMOrganisation;

  /**
   * Site identifying code, where ATM is located
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SiteID" })
  siteID?: string;

  /**
   * Site identifying name, where ATM is located
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SiteName" })
  siteName?: string;

  /**
   * Languages that the ATM supports
   */
  @SpeakeasyMetadata()
  @Expose({ name: "SupportedLanguages" })
  supportedLanguages: string[];
}

export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum {
  UseOfTheAPIsAndAnyRelatedDataWillBeSubjectToTheTermsOfTheOpenLicenceAndSubjectToTermsAndConditions = "Use of the APIs and any related data will be subject to the terms of the Open Licence and subject to terms and conditions",
}

/**
 * Open Banking License
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum {
  HttpsWwwOpenbankingOrgUkOpenLicence = "https://www.openbanking.org.uk/open-licence",
}

/**
 * Open Banking Terms of Use
 */
export enum GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum {
  HttpsWwwOpenbankingOrgUkTerms = "https://www.openbanking.org.uk/terms",
}

export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "Agreement" })
  agreement: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataAgreementEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "LastUpdated" })
  @Transform(({ value }) => new Date(value), { toClassOnly: true })
  lastUpdated: Date;

  /**
   * Open Banking License
   */
  @SpeakeasyMetadata()
  @Expose({ name: "License" })
  license: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataLicenseEnum;

  /**
   * Open Banking Terms of Use
   */
  @SpeakeasyMetadata()
  @Expose({ name: "TermsOfUse" })
  termsOfUse: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaDataTermsOfUseEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "TotalResults" })
  totalResults: number;
}

/**
 * Successful response with a list of `ATM` data
 */
export class GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJson extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATM,
  })
  @Expose({ name: "data" })
  @Type(() => GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATM)
  data: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonATM[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData)
  meta: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonMetaData;
}

export class GetAtmsResponse extends SpeakeasyBase {
  /**
   * You have sent a request which could not be understood.
   */
  @SpeakeasyMetadata()
  fourHundredErrorObject?: GetAtms400ErrorObject;

  /**
   * Your client has failed to submit a request, and a timeout has occurred.
   */
  @SpeakeasyMetadata()
  fourHundredAndEightErrorObject?: GetAtms408ErrorObject;

  /**
   * You have requested this resource too often. Slow down.
   */
  @SpeakeasyMetadata()
  fourHundredAndTwentyNineErrorObject?: GetAtms429ErrorObject;

  /**
   * An error occurred on the server. No further information is available.
   */
  @SpeakeasyMetadata()
  fiveHundredErrorObject?: GetAtms500ErrorObject;

  /**
   * The service is temporarily unavailable.
   */
  @SpeakeasyMetadata()
  fiveHundredAndThreeErrorObject?: GetAtms503ErrorObject;

  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A standard error response.
   */
  @SpeakeasyMetadata()
  errorObject?: GetAtmsErrorObject;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful response with a list of `ATM` data
   */
  @SpeakeasyMetadata()
  getAtms200ApplicationPrsOpenbankingOpendataV13PlusJsonObject?: GetAtms200ApplicationPrsOpenbankingOpendataV13PlusJson;
}
