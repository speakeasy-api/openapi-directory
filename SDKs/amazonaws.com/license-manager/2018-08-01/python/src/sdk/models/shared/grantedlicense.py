"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import consumptionconfiguration as shared_consumptionconfiguration
from ..shared import datetimerange as shared_datetimerange
from ..shared import entitlement as shared_entitlement
from ..shared import issuerdetails as shared_issuerdetails
from ..shared import licensestatus_enum as shared_licensestatus_enum
from ..shared import metadata as shared_metadata
from ..shared import receivedmetadata as shared_receivedmetadata
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GrantedLicense:
    r"""Describes a license that is granted to a grantee."""
    
    beneficiary: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Beneficiary'), 'exclude': lambda f: f is None }})  
    consumption_configuration: Optional[shared_consumptionconfiguration.ConsumptionConfiguration] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ConsumptionConfiguration'), 'exclude': lambda f: f is None }})  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CreateTime'), 'exclude': lambda f: f is None }})  
    entitlements: Optional[list[shared_entitlement.Entitlement]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Entitlements'), 'exclude': lambda f: f is None }})  
    home_region: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('HomeRegion'), 'exclude': lambda f: f is None }})  
    issuer: Optional[shared_issuerdetails.IssuerDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Issuer'), 'exclude': lambda f: f is None }})  
    license_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseArn'), 'exclude': lambda f: f is None }})  
    license_metadata: Optional[list[shared_metadata.Metadata]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseMetadata'), 'exclude': lambda f: f is None }})  
    license_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LicenseName'), 'exclude': lambda f: f is None }})  
    product_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductName'), 'exclude': lambda f: f is None }})  
    product_sku: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ProductSKU'), 'exclude': lambda f: f is None }})  
    received_metadata: Optional[shared_receivedmetadata.ReceivedMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ReceivedMetadata'), 'exclude': lambda f: f is None }})  
    status: Optional[shared_licensestatus_enum.LicenseStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Status'), 'exclude': lambda f: f is None }})  
    validity: Optional[shared_datetimerange.DatetimeRange] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Validity'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})  
    