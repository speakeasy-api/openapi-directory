<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * ChannelMetadataInteractions - A list of resource URIs related to the channel.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class ChannelMetadataInteractions
{
    /**
     * An action indicating that the authenticated user is the owner of the channel and may therefore add other users as channel moderators. This data requires a bearer token with the `private` scope.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddModerators $addModerators
     */
	#[\JMS\Serializer\Annotation\SerializedName('add_moderators')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddModerators')]
    public ChannelMetadataInteractionsAddModerators $addModerators;
    
    /**
     * When a channel appears in the context of adding or removing a video from it (`/videos/{video_id}/available_channels`), include information about adding or removing the video. This data requires a bearer token with the `private` scope.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddTo $addTo
     */
	#[\JMS\Serializer\Annotation\SerializedName('add_to')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddTo')]
    public ChannelMetadataInteractionsAddTo $addTo;
    
    /**
     * An action indicating if the authenticated user has followed this channel. This data requires a bearer token with the `private` scope.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsFollow $follow
     */
	#[\JMS\Serializer\Annotation\SerializedName('follow')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsFollow')]
    public ChannelMetadataInteractionsFollow $follow;
    
    /**
     * An action indicating that the authenticated user is a moderator of the channel and may therefore add or remove videos from the channel. This data requires a bearer token with the `private` scope.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsModerateVideos $moderateVideos
     */
	#[\JMS\Serializer\Annotation\SerializedName('moderate_videos')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsModerateVideos')]
    public ChannelMetadataInteractionsModerateVideos $moderateVideos;
    
	public function __construct()
	{
		$this->addModerators = new \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddModerators();
		$this->addTo = new \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsAddTo();
		$this->follow = new \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsFollow();
		$this->moderateVideos = new \OpenAPI\OpenAPI\Models\Shared\ChannelMetadataInteractionsModerateVideos();
	}
}
