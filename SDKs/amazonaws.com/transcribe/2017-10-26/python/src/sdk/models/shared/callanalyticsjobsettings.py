"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import contentredaction as shared_contentredaction
from ..shared import languagecode_enum as shared_languagecode_enum
from ..shared import languageidsettings as shared_languageidsettings
from ..shared import vocabularyfiltermethod_enum as shared_vocabularyfiltermethod_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CallAnalyticsJobSettings:
    r"""Provides additional optional settings for your request, including content redaction, automatic language identification; allows you to apply custom language models, custom vocabulary filters, and custom vocabularies."""
    
    content_redaction: Optional[shared_contentredaction.ContentRedaction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ContentRedaction'), 'exclude': lambda f: f is None }})
    r"""Makes it possible to redact or flag specified personally identifiable information (PII) in your transcript. If you use <code>ContentRedaction</code>, you must also include the sub-parameters: <code>PiiEntityTypes</code>, <code>RedactionOutput</code>, and <code>RedactionType</code>."""  
    language_id_settings: Optional[dict[str, shared_languageidsettings.LanguageIDSettings]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageIdSettings'), 'exclude': lambda f: f is None }})  
    language_model_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageModelName'), 'exclude': lambda f: f is None }})  
    language_options: Optional[list[shared_languagecode_enum.LanguageCodeEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LanguageOptions'), 'exclude': lambda f: f is None }})  
    vocabulary_filter_method: Optional[shared_vocabularyfiltermethod_enum.VocabularyFilterMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VocabularyFilterMethod'), 'exclude': lambda f: f is None }})  
    vocabulary_filter_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VocabularyFilterName'), 'exclude': lambda f: f is None }})  
    vocabulary_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VocabularyName'), 'exclude': lambda f: f is None }})  
    