"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import crmlogerrorcode as shared_crmlogerrorcode
from ..shared import enterprisecrmeventbusprotoerrordetail as shared_enterprisecrmeventbusprotoerrordetail
from ..shared import enterprisecrmeventbusprotoexecutiontraceinfo as shared_enterprisecrmeventbusprotoexecutiontraceinfo
from ..shared import enterprisecrmfrontendseventbusprotoeventexecutiondetails as shared_enterprisecrmfrontendseventbusprotoeventexecutiondetails
from ..shared import enterprisecrmfrontendseventbusprotoeventparameters as shared_enterprisecrmfrontendseventbusprotoeventparameters
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoPostMethodEnum(str, Enum):
    r"""The ways user posts this event."""
    UNSPECIFIED = 'UNSPECIFIED'
    POST = 'POST'
    POST_TO_QUEUE = 'POST_TO_QUEUE'
    SCHEDULE = 'SCHEDULE'
    POST_BY_EVENT_CONFIG_ID = 'POST_BY_EVENT_CONFIG_ID'
    POST_WITH_EVENT_DETAILS = 'POST_WITH_EVENT_DETAILS'

class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoProductEnum(str, Enum):
    r"""Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default."""
    UNSPECIFIED_PRODUCT = 'UNSPECIFIED_PRODUCT'
    IP = 'IP'
    APIGEE = 'APIGEE'
    SECURITY = 'SECURITY'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo:
    r"""Contains all the execution details for a workflow instance. Next available id: 24"""
    
    client_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('clientId'), 'exclude': lambda f: f is None }})
    r"""The event data user sends as request."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""Auto-generated."""  
    error_code: Optional[shared_crmlogerrorcode.CrmlogErrorCode] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errorCode'), 'exclude': lambda f: f is None }})
    r"""Registered ids for errors, as \\"oneof\\" enums. Each task or logical grouping of tasks may share the same enum."""  
    errors: Optional[list[shared_enterprisecrmeventbusprotoerrordetail.EnterpriseCrmEventbusProtoErrorDetail]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('errors'), 'exclude': lambda f: f is None }})
    r"""Errors, warnings, and informationals associated with the workflow/task. The order in which the errors were added by the workflow/task is maintained."""  
    event_execution_details: Optional[shared_enterprisecrmfrontendseventbusprotoeventexecutiondetails.EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionDetails'), 'exclude': lambda f: f is None }})
    r"""Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10"""  
    event_execution_info_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventExecutionInfoId'), 'exclude': lambda f: f is None }})
    r"""Auto-generated primary key."""  
    execution_trace_info: Optional[shared_enterprisecrmeventbusprotoexecutiontraceinfo.EnterpriseCrmEventbusProtoExecutionTraceInfo] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('executionTraceInfo'), 'exclude': lambda f: f is None }})
    r"""Message that helps aggregate all sub-executions triggered by one execution and keeps track of child-parent relationships."""  
    last_modified_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastModifiedTime'), 'exclude': lambda f: f is None }})
    r"""Auto-generated."""  
    post_method: Optional[EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoPostMethodEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postMethod'), 'exclude': lambda f: f is None }})
    r"""The ways user posts this event."""  
    product: Optional[EnterpriseCrmFrontendsEventbusProtoEventExecutionInfoProductEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('product'), 'exclude': lambda f: f is None }})
    r"""Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default."""  
    request_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestId'), 'exclude': lambda f: f is None }})
    r"""Optional. This is used to de-dup incoming request."""  
    request_params: Optional[shared_enterprisecrmfrontendseventbusprotoeventparameters.EnterpriseCrmFrontendsEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requestParams'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    response_params: Optional[shared_enterprisecrmfrontendseventbusprotoeventparameters.EnterpriseCrmFrontendsEventbusProtoEventParameters] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('responseParams'), 'exclude': lambda f: f is None }})
    r"""LINT.IfChange This message is used for processing and persisting (when applicable) key value pair parameters for each event in the event bus. Please see"""  
    snapshot_number: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('snapshotNumber'), 'exclude': lambda f: f is None }})
    r"""Workflow snapshot number."""  
    tenant: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tenant'), 'exclude': lambda f: f is None }})
    r"""Tenant this event is created. Used to reschedule the event to correct tenant."""  
    trigger_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('triggerId'), 'exclude': lambda f: f is None }})
    r"""The trigger id of the workflow trigger config. If both trigger_id and client_id is present, the workflow is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks."""  
    workflow_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowId'), 'exclude': lambda f: f is None }})
    r"""Required. Pointer to the workflow it is executing."""  
    workflow_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowName'), 'exclude': lambda f: f is None }})
    r"""Name of the workflow."""  
    workflow_retry_backoff_interval_seconds: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('workflowRetryBackoffIntervalSeconds'), 'exclude': lambda f: f is None }})
    r"""Time interval in seconds to schedule retry of workflow in manifold when workflow is already running"""  
    