/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Can be used multiple times.
 */
export enum GetCertificatesSortEnum {
  Id = "id",
  IdAsc = "id:asc",
  IdDesc = "id:desc",
  Name = "name",
  NameAsc = "name:asc",
  NameDesc = "name:desc",
  Created = "created",
  CreatedAsc = "created:asc",
  CreatedDesc = "created:desc",
}

/**
 * Can be used multiple times. The response will only contain Certificates matching the type.
 */
export enum GetCertificatesTypeParameterTypeEnum {
  Uploaded = "uploaded",
  Managed = "managed",
}

export class GetCertificatesRequest extends SpeakeasyBase {
  /**
   * Can be used to filter resources by labels. The response will only contain resources matching the label selector.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=label_selector",
  })
  labelSelector?: string;

  /**
   * Can be used to filter resources by their name. The response will only contain the resources matching the specified name
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
  name?: string;

  /**
   * Can be used multiple times.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=sort" })
  sort?: GetCertificatesSortEnum;

  /**
   * Can be used multiple times. The response will only contain Certificates matching the type.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
  type?: GetCertificatesTypeParameterTypeEnum;
}

/**
 * If issuance or renewal reports `failed`, this property contains information about what happened
 */
export class GetCertificatesCertificatesResponseCertificateStatusError extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message?: string;
}

/**
 * Status of the issuance process of the Certificate
 */
export enum GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum {
  Pending = "pending",
  Completed = "completed",
  Failed = "failed",
}

/**
 * Status of the renewal process of the Certificate.
 */
export enum GetCertificatesCertificatesResponseCertificateStatusRenewalEnum {
  Scheduled = "scheduled",
  Pending = "pending",
  Failed = "failed",
  Unavailable = "unavailable",
}

/**
 * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
 */
export class GetCertificatesCertificatesResponseCertificateStatus extends SpeakeasyBase {
  /**
   * If issuance or renewal reports `failed`, this property contains information about what happened
   */
  @SpeakeasyMetadata()
  @Expose({ name: "error" })
  @Type(() => GetCertificatesCertificatesResponseCertificateStatusError)
  error?: GetCertificatesCertificatesResponseCertificateStatusError;

  /**
   * Status of the issuance process of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "issuance" })
  issuance?: GetCertificatesCertificatesResponseCertificateStatusIssuanceEnum;

  /**
   * Status of the renewal process of the Certificate.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "renewal" })
  renewal?: GetCertificatesCertificatesResponseCertificateStatusRenewalEnum;
}

/**
 * Type of the Certificate
 */
export enum GetCertificatesCertificatesResponseCertificateTypeEnum {
  Uploaded = "uploaded",
  Managed = "managed",
}

export class GetCertificatesCertificatesResponseCertificateUsedBy extends SpeakeasyBase {
  /**
   * ID of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * Type of resource referenced
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type: string;
}

export class GetCertificatesCertificatesResponseCertificate extends SpeakeasyBase {
  /**
   * Certificate and chain in PEM format, in order so that each record directly certifies the one preceding
   */
  @SpeakeasyMetadata()
  @Expose({ name: "certificate" })
  certificate: string;

  /**
   * Point in time when the Resource was created (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "created" })
  created: string;

  /**
   * Domains and subdomains covered by the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "domain_names" })
  domainNames: string[];

  /**
   * SHA256 fingerprint of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint: string;

  /**
   * ID of the Resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * User-defined labels (key-value pairs)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "labels" })
  labels: Record<string, string>;

  /**
   * Name of the Resource. Must be unique per Project.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name: string;

  /**
   * Point in time when the Certificate stops being valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_after" })
  notValidAfter: string;

  /**
   * Point in time when the Certificate becomes valid (in ISO-8601 format)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "not_valid_before" })
  notValidBefore: string;

  /**
   * Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => GetCertificatesCertificatesResponseCertificateStatus)
  status?: GetCertificatesCertificatesResponseCertificateStatus;

  /**
   * Type of the Certificate
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetCertificatesCertificatesResponseCertificateTypeEnum;

  /**
   * Resources currently using the Certificate
   */
  @SpeakeasyMetadata({
    elemType: GetCertificatesCertificatesResponseCertificateUsedBy,
  })
  @Expose({ name: "used_by" })
  @Type(() => GetCertificatesCertificatesResponseCertificateUsedBy)
  usedBy: GetCertificatesCertificatesResponseCertificateUsedBy[];
}

export class GetCertificatesCertificatesResponseMetaPagination extends SpeakeasyBase {
  /**
   * ID of the last page available. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "last_page" })
  lastPage: number;

  /**
   * ID of the next page. Can be null if the current page is the last one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "next_page" })
  nextPage: number;

  /**
   * Current page number
   */
  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page: number;

  /**
   * Maximum number of items shown per page in the response
   */
  @SpeakeasyMetadata()
  @Expose({ name: "per_page" })
  perPage: number;

  /**
   * ID of the previous page. Can be null if the current page is the first one.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "previous_page" })
  previousPage: number;

  /**
   * The total number of entries that exist in the database for this query. Nullable if unknown.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "total_entries" })
  totalEntries: number;
}

export class GetCertificatesCertificatesResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "pagination" })
  @Type(() => GetCertificatesCertificatesResponseMetaPagination)
  pagination: GetCertificatesCertificatesResponseMetaPagination;
}

/**
 * The `certificates` key contains an array of Certificate objects
 */
export class GetCertificatesCertificatesResponse extends SpeakeasyBase {
  @SpeakeasyMetadata({
    elemType: GetCertificatesCertificatesResponseCertificate,
  })
  @Expose({ name: "certificates" })
  @Type(() => GetCertificatesCertificatesResponseCertificate)
  certificates: GetCertificatesCertificatesResponseCertificate[];

  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => GetCertificatesCertificatesResponseMeta)
  meta?: GetCertificatesCertificatesResponseMeta;
}

export class GetCertificatesResponse extends SpeakeasyBase {
  /**
   * The `certificates` key contains an array of Certificate objects
   */
  @SpeakeasyMetadata()
  certificatesResponse?: GetCertificatesCertificatesResponse;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
