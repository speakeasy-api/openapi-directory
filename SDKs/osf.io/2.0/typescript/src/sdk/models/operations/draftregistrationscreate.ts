/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class DraftRegistrationsCreateDraftRegistrationAttributesNodeLicense extends SpeakeasyBase {
  /**
   * A list of names of copyright holders for the license.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "copyright_holders" })
  copyrightHolders?: string[];

  /**
   * The year the copyright was made.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "year" })
  year?: number;
}

/**
 * The properties of the Draft Registration entity.
 */
export class DraftRegistrationsCreateDraftRegistrationAttributesInput extends SpeakeasyBase {
  /**
   * The category of the Draft Registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "category" })
  category?: string;

  /**
   * The description of the Draft Registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "description" })
  description?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "node_license" })
  @Type(() => DraftRegistrationsCreateDraftRegistrationAttributesNodeLicense)
  nodeLicense?: DraftRegistrationsCreateDraftRegistrationAttributesNodeLicense;

  /**
   * This is a legacy format for `registration_responses`.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registration_metadata" })
  registrationMetadata?: Record<string, any>;

  /**
   * A dictionary of question IDs and responses from the registration schema.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "registration_responses" })
  registrationResponses?: Record<string, any>;

  /**
   * The searchable tags of the Draft Registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tags" })
  tags?: string[];

  /**
   * The title of the Draft Registration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class DraftRegistrationsCreateDraftRegistrationInput extends SpeakeasyBase {
  /**
   * The properties of the Draft Registration entity.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "attributes" })
  @Type(() => DraftRegistrationsCreateDraftRegistrationAttributesInput)
  attributes: DraftRegistrationsCreateDraftRegistrationAttributesInput;
}

/**
 * The properties of the Draft Registration entity.
 */
export class DraftRegistrationsCreateDraftRegistrationAttributes extends SpeakeasyBase {
  /**
   * The category of the Draft Registration.
   */
  @SpeakeasyMetadata()
  category?: string;

  /**
   * The current users permission level for the Draft Registration.
   */
  @SpeakeasyMetadata()
  currentUserPermissions?: string[];

  /**
   * The time at which the draft registration was first initiated, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  datetimeInitiated?: Date;

  /**
   * The time at which the draft registration was last updated, as an iso8601 formatted timestamp.
   */
  @SpeakeasyMetadata()
  datetimeUpdated?: Date;

  /**
   * The description of the Draft Registration.
   */
  @SpeakeasyMetadata()
  description?: string;

  /**
   * This indicates whether a Draft Registration was branched from a project.
   */
  @SpeakeasyMetadata()
  hasProject?: boolean;

  @SpeakeasyMetadata()
  nodeLicense?: DraftRegistrationsCreateDraftRegistrationAttributesNodeLicense;

  /**
   * This is a legacy format for `registration_responses`.
   */
  @SpeakeasyMetadata()
  registrationMetadata?: Record<string, any>;

  /**
   * A dictionary of question IDs and responses from the registration schema.
   */
  @SpeakeasyMetadata()
  registrationResponses?: Record<string, any>;

  /**
   * The searchable tags of the Draft Registration.
   */
  @SpeakeasyMetadata()
  tags?: string[];

  /**
   * The title of the Draft Registration.
   */
  @SpeakeasyMetadata()
  title?: string;
}

/**
 * URLs to alternative representations of the draft registration entity.
 */
export class DraftRegistrationsCreateDraftRegistrationLinks extends SpeakeasyBase {
  /**
   * A link to the draft registration's page on the OSF.
   */
  @SpeakeasyMetadata()
  html: string;
}

/**
 * URLs to other entities or entity collections that have a relationship to the draft registration entity.
 */
export class DraftRegistrationsCreateDraftRegistrationRelationships extends SpeakeasyBase {
  /**
   * A link to the node that this draft registration was created from.
   */
  @SpeakeasyMetadata()
  branchedFrom?: string;

  /**
   * A link to the user who initiated the draft registration.
   */
  @SpeakeasyMetadata()
  initiator?: string;

  /**
   * A link to the detailed registration schema that this draft conforms to.
   */
  @SpeakeasyMetadata()
  registrationSchema?: string;
}

/**
 * Created
 */
export class DraftRegistrationsCreateDraftRegistration extends SpeakeasyBase {
  /**
   * The properties of the Draft Registration entity.
   */
  @SpeakeasyMetadata()
  attributes: DraftRegistrationsCreateDraftRegistrationAttributes;

  /**
   * The unique identifier of the draft registration entity.
   */
  @SpeakeasyMetadata()
  id: string;

  /**
   * URLs to alternative representations of the draft registration entity.
   */
  @SpeakeasyMetadata()
  links: DraftRegistrationsCreateDraftRegistrationLinks;

  /**
   * URLs to other entities or entity collections that have a relationship to the draft registration entity.
   */
  @SpeakeasyMetadata()
  relationships: DraftRegistrationsCreateDraftRegistrationRelationships;

  /**
   * The type identifier of the draft registration entity (`draft_registrations`).
   */
  @SpeakeasyMetadata()
  type: string;
}

export class DraftRegistrationsCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
