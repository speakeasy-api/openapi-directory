"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkPeering = exports.NetworkPeeringStateEnum = exports.NetworkPeeringStackTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
 */
var NetworkPeeringStackTypeEnum;
(function (NetworkPeeringStackTypeEnum) {
    NetworkPeeringStackTypeEnum["Ipv4Ipv6"] = "IPV4_IPV6";
    NetworkPeeringStackTypeEnum["Ipv4Only"] = "IPV4_ONLY";
})(NetworkPeeringStackTypeEnum = exports.NetworkPeeringStackTypeEnum || (exports.NetworkPeeringStackTypeEnum = {}));
/**
 * [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network.
 */
var NetworkPeeringStateEnum;
(function (NetworkPeeringStateEnum) {
    NetworkPeeringStateEnum["Active"] = "ACTIVE";
    NetworkPeeringStateEnum["Inactive"] = "INACTIVE";
})(NetworkPeeringStateEnum = exports.NetworkPeeringStateEnum || (exports.NetworkPeeringStateEnum = {}));
/**
 * A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
 */
var NetworkPeering = /** @class */ (function (_super) {
    __extends(NetworkPeering, _super);
    function NetworkPeering() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "advertisePeerSubnetsViaRouters" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "advertisePeerSubnetsViaRouters", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "autoCreateRoutes" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "autoCreateRoutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exchangeSubnetRoutes" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "exchangeSubnetRoutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportCustomRoutes" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "exportCustomRoutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportSubnetRoutesWithPublicIp" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "exportSubnetRoutesWithPublicIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "importCustomRoutes" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "importCustomRoutes", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "importSubnetRoutesWithPublicIp" }),
        __metadata("design:type", Boolean)
    ], NetworkPeering.prototype, "importSubnetRoutesWithPublicIp", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], NetworkPeering.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "network" }),
        __metadata("design:type", String)
    ], NetworkPeering.prototype, "network", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "peerMtu" }),
        __metadata("design:type", Number)
    ], NetworkPeering.prototype, "peerMtu", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stackType" }),
        __metadata("design:type", String)
    ], NetworkPeering.prototype, "stackType", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "state" }),
        __metadata("design:type", String)
    ], NetworkPeering.prototype, "state", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "stateDetails" }),
        __metadata("design:type", String)
    ], NetworkPeering.prototype, "stateDetails", void 0);
    return NetworkPeering;
}(utils_1.SpeakeasyBase));
exports.NetworkPeering = NetworkPeering;
