"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import autorenewingbaseplantype as shared_autorenewingbaseplantype
from ..shared import offertag as shared_offertag
from ..shared import otherregionsbaseplanconfig as shared_otherregionsbaseplanconfig
from ..shared import prepaidbaseplantype as shared_prepaidbaseplantype
from ..shared import regionalbaseplanconfig as shared_regionalbaseplanconfig
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BasePlanInput:
    r"""A single base plan for a subscription."""
    
    auto_renewing_base_plan_type: Optional[shared_autorenewingbaseplantype.AutoRenewingBasePlanType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenewingBasePlanType'), 'exclude': lambda f: f is None }})
    r"""Represents a base plan that automatically renews at the end of its subscription period."""  
    base_plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basePlanId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters."""  
    offer_tags: Optional[list[shared_offertag.OfferTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerTags'), 'exclude': lambda f: f is None }})
    r"""List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library."""  
    other_regions_config: Optional[shared_otherregionsbaseplanconfig.OtherRegionsBasePlanConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherRegionsConfig'), 'exclude': lambda f: f is None }})
    r"""Pricing information for any new locations Play may launch in."""  
    prepaid_base_plan_type: Optional[shared_prepaidbaseplantype.PrepaidBasePlanType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaidBasePlanType'), 'exclude': lambda f: f is None }})
    r"""Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user."""  
    regional_configs: Optional[list[shared_regionalbaseplanconfig.RegionalBasePlanConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionalConfigs'), 'exclude': lambda f: f is None }})
    r"""Region-specific information for this base plan."""  
    
class BasePlanStateEnum(str, Enum):
    r"""Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead."""
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    DRAFT = 'DRAFT'
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class BasePlan:
    r"""A single base plan for a subscription."""
    
    auto_renewing_base_plan_type: Optional[shared_autorenewingbaseplantype.AutoRenewingBasePlanType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('autoRenewingBasePlanType'), 'exclude': lambda f: f is None }})
    r"""Represents a base plan that automatically renews at the end of its subscription period."""  
    base_plan_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('basePlanId'), 'exclude': lambda f: f is None }})
    r"""Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters."""  
    offer_tags: Optional[list[shared_offertag.OfferTag]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('offerTags'), 'exclude': lambda f: f is None }})
    r"""List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library."""  
    other_regions_config: Optional[shared_otherregionsbaseplanconfig.OtherRegionsBasePlanConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('otherRegionsConfig'), 'exclude': lambda f: f is None }})
    r"""Pricing information for any new locations Play may launch in."""  
    prepaid_base_plan_type: Optional[shared_prepaidbaseplantype.PrepaidBasePlanType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('prepaidBasePlanType'), 'exclude': lambda f: f is None }})
    r"""Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user."""  
    regional_configs: Optional[list[shared_regionalbaseplanconfig.RegionalBasePlanConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionalConfigs'), 'exclude': lambda f: f is None }})
    r"""Region-specific information for this base plan."""  
    state: Optional[BasePlanStateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('state'), 'exclude': lambda f: f is None }})
    r"""Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead."""  
    