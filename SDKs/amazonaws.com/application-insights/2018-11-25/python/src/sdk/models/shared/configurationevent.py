"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import configurationeventresourcetype_enum as shared_configurationeventresourcetype_enum
from ..shared import configurationeventstatus_enum as shared_configurationeventstatus_enum
from dataclasses_json import Undefined, dataclass_json
from datetime import datetime
from marshmallow import fields
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ConfigurationEvent:
    r"""The event information."""
    
    event_detail: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventDetail'), 'exclude': lambda f: f is None }})  
    event_resource_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventResourceName'), 'exclude': lambda f: f is None }})  
    event_resource_type: Optional[shared_configurationeventresourcetype_enum.ConfigurationEventResourceTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventResourceType'), 'exclude': lambda f: f is None }})  
    event_status: Optional[shared_configurationeventstatus_enum.ConfigurationEventStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventStatus'), 'exclude': lambda f: f is None }})  
    event_time: Optional[datetime] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EventTime'), 'encoder': utils.datetimeisoformat(True), 'decoder': dateutil.parser.isoparse, 'mm_field': fields.DateTime(format='iso'), 'exclude': lambda f: f is None }})  
    monitored_resource_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MonitoredResourceARN'), 'exclude': lambda f: f is None }})  
    