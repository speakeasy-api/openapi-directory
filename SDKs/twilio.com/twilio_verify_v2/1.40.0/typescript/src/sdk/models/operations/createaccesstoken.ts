/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
export const CreateAccessTokenServerList = [
  "https://verify.twilio.com",
] as const;

export class CreateAccessTokenSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class CreateAccessTokenCreateAccessTokenRequest extends SpeakeasyBase {
  /**
   * The friendly name of the factor that is going to be created with this access token
   */
  @SpeakeasyMetadata({ data: "form, name=FactorFriendlyName" })
  factorFriendlyName?: string;

  @SpeakeasyMetadata({ data: "form, name=FactorType" })
  factorType: shared.AccessTokenEnumFactorTypesEnum;

  /**
   * The unique external identifier for the Entity of the Service. This identifier should be immutable, not PII, and generated by your external system, such as your user's UUID, GUID, or SID.
   */
  @SpeakeasyMetadata({ data: "form, name=Identity" })
  identity: string;

  /**
   * How long, in seconds, the access token is valid. Can be an integer between 60 and 300. Default is 60.
   */
  @SpeakeasyMetadata({ data: "form, name=Ttl" })
  ttl?: number;
}

export class CreateAccessTokenRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "request, media_type=application/x-www-form-urlencoded",
  })
  requestBody?: CreateAccessTokenCreateAccessTokenRequest;

  /**
   * The unique SID identifier of the Service.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=ServiceSid",
  })
  serviceSid: string;
}

export class CreateAccessTokenResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Created
   */
  @SpeakeasyMetadata()
  verifyV2ServiceAccessToken?: shared.VerifyV2ServiceAccessToken;
}
