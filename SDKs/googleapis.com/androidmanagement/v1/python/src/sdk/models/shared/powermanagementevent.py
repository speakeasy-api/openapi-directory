"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class PowerManagementEventEventTypeEnum(str, Enum):
    r"""Event type."""
    POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED = 'POWER_MANAGEMENT_EVENT_TYPE_UNSPECIFIED'
    BATTERY_LEVEL_COLLECTED = 'BATTERY_LEVEL_COLLECTED'
    POWER_CONNECTED = 'POWER_CONNECTED'
    POWER_DISCONNECTED = 'POWER_DISCONNECTED'
    BATTERY_LOW = 'BATTERY_LOW'
    BATTERY_OKAY = 'BATTERY_OKAY'
    BOOT_COMPLETED = 'BOOT_COMPLETED'
    SHUTDOWN = 'SHUTDOWN'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PowerManagementEvent:
    r"""A power management event."""
    
    battery_level: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('batteryLevel'), 'exclude': lambda f: f is None }})
    r"""For BATTERY_LEVEL_COLLECTED events, the battery level as a percentage."""  
    create_time: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createTime'), 'exclude': lambda f: f is None }})
    r"""The creation time of the event."""  
    event_type: Optional[PowerManagementEventEventTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('eventType'), 'exclude': lambda f: f is None }})
    r"""Event type."""  
    