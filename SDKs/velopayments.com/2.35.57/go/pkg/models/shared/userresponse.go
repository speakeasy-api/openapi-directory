// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// UserResponseMfaStatusEnum - The status of the MFA device
type UserResponseMfaStatusEnum string

const (
	UserResponseMfaStatusEnumRegistered   UserResponseMfaStatusEnum = "REGISTERED"
	UserResponseMfaStatusEnumUnregistered UserResponseMfaStatusEnum = "UNREGISTERED"
)

func (e UserResponseMfaStatusEnum) ToPointer() *UserResponseMfaStatusEnum {
	return &e
}

func (e *UserResponseMfaStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REGISTERED":
		fallthrough
	case "UNREGISTERED":
		*e = UserResponseMfaStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserResponseMfaStatusEnum: %v", v)
	}
}

// UserResponseMfaTypeEnum - The type of the MFA device
type UserResponseMfaTypeEnum string

const (
	UserResponseMfaTypeEnumSms     UserResponseMfaTypeEnum = "SMS"
	UserResponseMfaTypeEnumYubikey UserResponseMfaTypeEnum = "YUBIKEY"
	UserResponseMfaTypeEnumTotp    UserResponseMfaTypeEnum = "TOTP"
)

func (e UserResponseMfaTypeEnum) ToPointer() *UserResponseMfaTypeEnum {
	return &e
}

func (e *UserResponseMfaTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SMS":
		fallthrough
	case "YUBIKEY":
		fallthrough
	case "TOTP":
		*e = UserResponseMfaTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserResponseMfaTypeEnum: %v", v)
	}
}

// UserResponseStatusEnum - The status of the user
// when the user has been invited but not yet enrolled they will have a PENDING status
type UserResponseStatusEnum string

const (
	UserResponseStatusEnumEnabled  UserResponseStatusEnum = "ENABLED"
	UserResponseStatusEnumDisabled UserResponseStatusEnum = "DISABLED"
	UserResponseStatusEnumPending  UserResponseStatusEnum = "PENDING"
)

func (e UserResponseStatusEnum) ToPointer() *UserResponseStatusEnum {
	return &e
}

func (e *UserResponseStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ENABLED":
		fallthrough
	case "DISABLED":
		fallthrough
	case "PENDING":
		*e = UserResponseStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserResponseStatusEnum: %v", v)
	}
}

// UserResponseUserTypeEnum - Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
type UserResponseUserTypeEnum string

const (
	UserResponseUserTypeEnumBackoffice UserResponseUserTypeEnum = "BACKOFFICE"
	UserResponseUserTypeEnumPayor      UserResponseUserTypeEnum = "PAYOR"
	UserResponseUserTypeEnumPayee      UserResponseUserTypeEnum = "PAYEE"
)

func (e UserResponseUserTypeEnum) ToPointer() *UserResponseUserTypeEnum {
	return &e
}

func (e *UserResponseUserTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BACKOFFICE":
		fallthrough
	case "PAYOR":
		fallthrough
	case "PAYEE":
		*e = UserResponseUserTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserResponseUserTypeEnum: %v", v)
	}
}

// UserResponse - Get User Details
type UserResponse struct {
	// The payor or payee company name or null if the user is not a payor or payee user
	//
	CompanyName *string `json:"companyName,omitempty"`
	// the email address of the user
	Email *string `json:"email,omitempty"`
	// The payorId or payeeId or null if the user is not a payor or payee user
	//
	EntityID  *string `json:"entityId,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	// The id of the user
	ID       *string `json:"id,omitempty"`
	LastName *string `json:"lastName,omitempty"`
	// If true the user is currently locked out and unable to log in
	LockedOut *bool `json:"lockedOut,omitempty"`
	// A timestamp showing when the user was locked out
	// If null then the user is not currently locked out
	//
	LockedOutTimestamp *time.Time `json:"lockedOutTimestamp,omitempty"`
	// The status of the MFA device
	MfaStatus *UserResponseMfaStatusEnum `json:"mfaStatus,omitempty"`
	// The type of the MFA device
	MfaType *UserResponseMfaTypeEnum `json:"mfaType,omitempty"`
	// The main contact number for the user
	//
	PrimaryContactNumber *string `json:"primaryContactNumber,omitempty"`
	// The role(s) for the user
	//
	Roles []Role `json:"roles,omitempty"`
	// The secondary contact number for the user
	//
	SecondaryContactNumber *string `json:"secondaryContactNumber,omitempty"`
	// The phone number of a device that the user can receive sms messages on
	//
	SmsNumber *string `json:"smsNumber,omitempty"`
	// The status of the user
	// when the user has been invited but not yet enrolled they will have a PENDING status
	//
	Status *UserResponseStatusEnum `json:"status,omitempty"`
	// Indicates the type of user. Could be BACKOFFICE, PAYOR or PAYEE.
	UserType *UserResponseUserTypeEnum `json:"userType,omitempty"`
}
