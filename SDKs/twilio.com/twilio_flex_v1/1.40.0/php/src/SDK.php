<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

/**
 * SDK - This is the public Twilio REST API.
 * 
 * @package OpenAPI\OpenAPI
 * @access public
 */
class SDK
{
	public const SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_FLEX_FLOW_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_ASSESSMENTS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_QUESTIONNAIRES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INSIGHTS_SESSION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INTERACTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INTERACTION_CHANNEL_INVITE_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const CREATE_WEB_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_FLEX_FLOW_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_INSIGHTS_QUESTIONNAIRES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const DELETE_WEB_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_CONFIGURATION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_FLEX_FLOW_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INSIGHTS_QUESTIONNAIRES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INSIGHTS_SEGMENTS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INSIGHTS_SETTINGS_ANSWERSETS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INSIGHTS_SETTINGS_COMMENT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INSIGHTS_USER_ROLES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INTERACTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_INTERACTION_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const FETCH_WEB_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_FLEX_FLOW_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_ASSESSMENTS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_CONVERSATIONS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_QUESTIONNAIRES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INSIGHTS_SEGMENTS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INTERACTION_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INTERACTION_CHANNEL_INVITE_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const LIST_WEB_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_FLEX_FLOW_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INSIGHTS_ASSESSMENTS_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INSIGHTS_QUESTIONNAIRES_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INTERACTION_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS = [
		'https://flex-api.twilio.com',
	];
	
	public const UPDATE_WEB_CHANNEL_SERVERS = [
		'https://flex-api.twilio.com',
	];
  		
	// SDK private variables namespaced with _ to avoid conflicts with API models
	private ?\GuzzleHttp\ClientInterface $_defaultClient;
	private ?\GuzzleHttp\ClientInterface $_securityClient;
	
	private string $_serverUrl;
	private string $_language = 'php';
	private string $_sdkVersion = '0.0.1';
	private string $_genVersion = 'internal';

	/**
	 * Returns a new instance of the SDK builder used to configure and create the SDK instance.
	 * 
	 * @return SDKBuilder
	 */
	public static function builder(): SDKBuilder
	{
		return new SDKBuilder();
	}

	/**
	 * @param \GuzzleHttp\ClientInterface|null $client
	 * @param string $serverUrl
	 * @param array<string, string>|null $params
	 */
	public function __construct(?\GuzzleHttp\ClientInterface $client, string $serverUrl, ?array $params)
	{
		$this->_defaultClient = $client;
		
		if ($this->_defaultClient === null) {
			$this->_defaultClient = new \GuzzleHttp\Client([
				'timeout' => 60,
			]);
		}

		$this->_securityClient = null;
		if ($this->_securityClient === null) {
			$this->_securityClient = $this->_defaultClient;
		}

		if (!empty($serverUrl)) {
			$this->_serverUrl = Utils\Utils::templateUrl($serverUrl, $params);
		}
		
		if (empty($this->_serverUrl)) {
			$this->_serverUrl = $this::SERVERS[0];
		}
	}
	
    /**
     * createChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelCreateChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
     */
	public function createChannel(
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelCreateChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse
    {
        $baseUrl = SDK::CREATE_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Channels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1Channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createFlexFlow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowCreateFlexFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowResponse
     */
	public function createFlexFlow(
        \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowCreateFlexFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowResponse
    {
        $baseUrl = SDK::CREATE_FLEX_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/FlexFlows');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateFlexFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1FlexFlow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1FlexFlow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add assessments against conversation to dynamo db. Used in assessments screen by user. Users can select the questionnaire and pick up answers for each and every question.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsResponse
     */
	public function createInsightsAssessments(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Assessments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsAssessments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsAssessments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To create a comment assessment for a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentResponse
     */
	public function createInsightsAssessmentsComment(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Assessments/Comments');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsAssessmentsCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsAssessmentsComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsAssessmentsComment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To create a Questionnaire
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesResponse
     */
	public function createInsightsQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questionnaires');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnaires = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnaires', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To create a category for Questions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategorySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategoryResponse
     */
	public function createInsightsQuestionnairesCategory(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategorySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategoryResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Categories');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnairesCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnairesCategory', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To create a question for a Category
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionResponse
     */
	public function createInsightsQuestionnairesQuestion(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsQuestionnairesQuestionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnairesQuestion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnairesQuestion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To obtain session details for fetching reports and dashboards
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionResponse
     */
	public function createInsightsSession(
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionResponse
    {
        $baseUrl = SDK::CREATE_INSIGHTS_SESSION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/Session');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInsightsSessionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsSession = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsSession', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Create a new Interaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionCreateInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInteractionResponse
     */
	public function createInteraction(
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionCreateInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInteractionResponse
    {
        $baseUrl = SDK::CREATE_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1Interaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1Interaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Invite an Agent or a TaskQueue to a Channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteResponse
     */
	public function createInteractionChannelInvite(
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteResponse
    {
        $baseUrl = SDK::CREATE_INTERACTION_CHANNEL_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites', \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InteractionInteractionChannelInteractionChannelInvite = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InteractionInteractionChannelInteractionChannelInvite', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a Participant to a Channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantResponse
     */
	public function createInteractionChannelParticipant(
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantResponse
    {
        $baseUrl = SDK::CREATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateInteractionChannelParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InteractionInteractionChannelInteractionChannelParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InteractionInteractionChannelInteractionChannelParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * createWebChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelCreateWebChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelResponse
     */
	public function createWebChannel(
        \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelCreateWebChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelResponse
    {
        $baseUrl = SDK::CREATE_WEB_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/WebChannels');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\CreateWebChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1WebChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1WebChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * deleteChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
     */
	public function deleteChannel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse
    {
        $baseUrl = SDK::DELETE_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteFlexFlow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowResponse
     */
	public function deleteFlexFlow(
        \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowResponse
    {
        $baseUrl = SDK::DELETE_FLEX_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/FlexFlows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteFlexFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * To delete the questionnaire
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesResponse
     */
	public function deleteInsightsQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesResponse
    {
        $baseUrl = SDK::DELETE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questionnaires/{Id}', \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteInsightsQuestionnairesCategory
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategorySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryResponse
     */
	public function deleteInsightsQuestionnairesCategory(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategorySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryResponse
    {
        $baseUrl = SDK::DELETE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Categories/{CategoryId}', \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteInsightsQuestionnairesQuestion
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionResponse
     */
	public function deleteInsightsQuestionnairesQuestion(
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionResponse
    {
        $baseUrl = SDK::DELETE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questions/{QuestionId}', \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteInsightsQuestionnairesQuestionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * deleteWebChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelResponse
     */
	public function deleteWebChannel(
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelResponse
    {
        $baseUrl = SDK::DELETE_WEB_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/WebChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\DeleteWebChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * fetchChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse
     */
	public function fetchChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse
    {
        $baseUrl = SDK::FETCH_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1Channel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1Channel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchConfiguration
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse
     */
	public function fetchConfiguration(
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse
    {
        $baseUrl = SDK::FETCH_CONFIGURATION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Configuration');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\FetchConfigurationRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchConfigurationResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1Configuration = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1Configuration', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchFlexFlow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowResponse
     */
	public function fetchFlexFlow(
        \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowResponse
    {
        $baseUrl = SDK::FETCH_FLEX_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/FlexFlows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchFlexFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1FlexFlow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1FlexFlow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get the Questionnaire Detail
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesResponse
     */
	public function fetchInsightsQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesResponse
    {
        $baseUrl = SDK::FETCH_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questionnaires/{Id}', \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInsightsQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnaires = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnaires', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get the Segments of an Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsResponse
     */
	public function fetchInsightsSegments(
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsResponse
    {
        $baseUrl = SDK::FETCH_INSIGHTS_SEGMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/Segments/{SegmentId}', \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSegmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsSegments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsSegments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get the Answer Set Settings for an Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsResponse
     */
	public function fetchInsightsSettingsAnswersets(
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsResponse
    {
        $baseUrl = SDK::FETCH_INSIGHTS_SETTINGS_ANSWERSETS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Settings/AnswerSets');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsAnswersetsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsSettingsAnswersets = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsSettingsAnswersets', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get the Comment Settings for an Account
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentResponse
     */
	public function fetchInsightsSettingsComment(
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentResponse
    {
        $baseUrl = SDK::FETCH_INSIGHTS_SETTINGS_COMMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Settings/CommentTags');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInsightsSettingsCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsSettingsComment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsSettingsComment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * This is used by Flex UI and Quality Management to fetch the Flex Insights roles for the user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesResponse
     */
	public function fetchInsightsUserRoles(
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesResponse
    {
        $baseUrl = SDK::FETCH_INSIGHTS_USER_ROLES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/UserRoles');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInsightsUserRolesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsUserRoles = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsUserRoles', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchInteraction
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse
     */
	public function fetchInteraction(
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse
    {
        $baseUrl = SDK::FETCH_INTERACTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchInteractionRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInteractionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1Interaction = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1Interaction', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Fetch a Channel for an Interaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelResponse
     */
	public function fetchInteractionChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelResponse
    {
        $baseUrl = SDK::FETCH_INTERACTION_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchInteractionChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InteractionInteractionChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InteractionInteractionChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * fetchWebChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelResponse
     */
	public function fetchWebChannel(
        \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelResponse
    {
        $baseUrl = SDK::FETCH_WEB_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/WebChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\FetchWebChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1WebChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1WebChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse
     */
	public function listChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse
    {
        $baseUrl = SDK::LIST_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Channels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListChannelListChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listFlexFlow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowResponse
     */
	public function listFlexFlow(
        \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowResponse
    {
        $baseUrl = SDK::LIST_FLEX_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/FlexFlows');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListFlexFlowRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListFlexFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listFlexFlowResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListFlexFlowListFlexFlowResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get assessments done for a conversation by logged in user
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsResponse
     */
	public function listInsightsAssessments(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Assessments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsAssessmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsListInsightsAssessmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To create a comment assessment for a conversation
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentResponse
     */
	public function listInsightsAssessmentsComment(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_ASSESSMENTS_COMMENT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Assessments/Comments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsAssessmentsCommentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsAssessmentsCommentListInsightsAssessmentsCommentResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get conversation with segment id
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsResponse
     */
	public function listInsightsConversations(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_CONVERSATIONS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/Conversations');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsConversationsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsConversationsListInsightsConversationsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get all questionnaires with questions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesResponse
     */
	public function listInsightsQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questionnaires');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsQuestionnairesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesListInsightsQuestionnairesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get all the categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategorySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryResponse
     */
	public function listInsightsQuestionnairesCategory(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategorySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Categories');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsQuestionnairesCategoryResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesCategoryListInsightsQuestionnairesCategoryResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get all the question for the given categories
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionResponse
     */
	public function listInsightsQuestionnairesQuestion(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questions');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsQuestionnairesQuestionResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsQuestionnairesQuestionListInsightsQuestionnairesQuestionResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To get segments for given reservation Ids
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsResponse
     */
	public function listInsightsSegments(
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsResponse
    {
        $baseUrl = SDK::LIST_INSIGHTS_SEGMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/Segments');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInsightsSegmentsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInsightsSegmentsListInsightsSegmentsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Channels for an Interaction.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelResponse
     */
	public function listInteractionChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelResponse
    {
        $baseUrl = SDK::LIST_INTERACTION_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels', \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInteractionChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelListInteractionChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Invites for a Channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteResponse
     */
	public function listInteractionChannelInvite(
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteResponse
    {
        $baseUrl = SDK::LIST_INTERACTION_CHANNEL_INVITE_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Invites', \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInteractionChannelInviteResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelInviteListInteractionChannelInviteResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List all Participants for a Channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantResponse
     */
	public function listInteractionChannelParticipant(
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantResponse
    {
        $baseUrl = SDK::LIST_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants', \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listInteractionChannelParticipantResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListInteractionChannelParticipantListInteractionChannelParticipantResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * listWebChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\ListWebChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\ListWebChannelResponse
     */
	public function listWebChannel(
        \OpenAPI\OpenAPI\Models\Operations\ListWebChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\ListWebChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\ListWebChannelResponse
    {
        $baseUrl = SDK::LIST_WEB_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/WebChannels');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\ListWebChannelRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\ListWebChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listWebChannelResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Operations\ListWebChannelListWebChannelResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateFlexFlow
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowResponse
     */
	public function updateFlexFlow(
        \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowResponse
    {
        $baseUrl = SDK::UPDATE_FLEX_FLOW_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/FlexFlows/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateFlexFlowResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1FlexFlow = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1FlexFlow', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update a specific Assessment assessed earlier
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsResponse
     */
	public function updateInsightsAssessments(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsResponse
    {
        $baseUrl = SDK::UPDATE_INSIGHTS_ASSESSMENTS_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Assessments/{AssessmentId}', \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsAssessmentsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsAssessments = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsAssessments', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To update the questionnaire
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesResponse
     */
	public function updateInsightsQuestionnaires(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesResponse
    {
        $baseUrl = SDK::UPDATE_INSIGHTS_QUESTIONNAIRES_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questionnaires/{Id}', \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnaires = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnaires', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To update the category for Questions
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategorySecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryResponse
     */
	public function updateInsightsQuestionnairesCategory(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategorySecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryResponse
    {
        $baseUrl = SDK::UPDATE_INSIGHTS_QUESTIONNAIRES_CATEGORY_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Categories/{CategoryId}', \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesCategoryResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnairesCategory = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnairesCategory', 'json');
            }
        }

        return $response;
    }
	
    /**
     * To update the question
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionResponse
     */
	public function updateInsightsQuestionnairesQuestion(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionResponse
    {
        $baseUrl = SDK::UPDATE_INSIGHTS_QUESTIONNAIRES_QUESTION_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Insights/QM/Questions/{QuestionId}', \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInsightsQuestionnairesQuestionResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InsightsQuestionnairesQuestion = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InsightsQuestionnairesQuestion', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing Interaction Channel.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelResponse
     */
	public function updateInteractionChannel(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelResponse
    {
        $baseUrl = SDK::UPDATE_INTERACTION_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InteractionInteractionChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InteractionInteractionChannel', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update an existing Channel Participant.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantResponse
     */
	public function updateInteractionChannelParticipant(
        \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantResponse
    {
        $baseUrl = SDK::UPDATE_INTERACTION_CHANNEL_PARTICIPANT_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/Interactions/{InteractionSid}/Channels/{ChannelSid}/Participants/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateInteractionChannelParticipantResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1InteractionInteractionChannelInteractionChannelParticipant = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1InteractionInteractionChannelInteractionChannelParticipant', 'json');
            }
        }

        return $response;
    }
	
    /**
     * updateWebChannel
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelSecurity $security
     * @param string $serverURL
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelResponse
     */
	public function updateWebChannel(
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelSecurity $security,
        string $serverURL = null,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelResponse
    {
        $baseUrl = SDK::UPDATE_WEB_CHANNEL_SERVERS[0];
        if (!empty($serverURL)) {
            $baseUrl = $serverURL;
        }
        
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/WebChannels/{Sid}', \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "form");
        $options = array_merge_recursive($options, $body);
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateWebChannelResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->flexV1WebChannel = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\FlexV1WebChannel', 'json');
            }
        }

        return $response;
    }
}