// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// FindingStateEnum - Finding state:
//   - notfixed - Issue can still be exploited
//   - invalid - Issue determined to be a false positive
//   - accepted - Issue will not be solved and the risk was accepted
//   - fixed - No problem here anymore
type FindingStateEnum string

const (
	FindingStateEnumNotfixed FindingStateEnum = "notfixed"
	FindingStateEnumInvalid  FindingStateEnum = "invalid"
	FindingStateEnumAccepted FindingStateEnum = "accepted"
	FindingStateEnumFixed    FindingStateEnum = "fixed"
)

func (e *FindingStateEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "notfixed":
		fallthrough
	case "invalid":
		fallthrough
	case "accepted":
		fallthrough
	case "fixed":
		*e = FindingStateEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for FindingStateEnum: %s", s)
	}
}
