/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class MeetingPollCreateSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

/**
 * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
 */
export enum MeetingPollCreatePollQuestionsTypeEnum {
  Single = "single",
  Multiple = "multiple",
}

export class MeetingPollCreatePollQuestions extends SpeakeasyBase {
  /**
   * Answers to the questions
   */
  @SpeakeasyMetadata()
  @Expose({ name: "answers" })
  answers?: string[];

  /**
   * Question to be asked to the attendees.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Poll Question & Answer type:<br>`single` - Single choice<br>`mutliple` - Multiple choice
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: MeetingPollCreatePollQuestionsTypeEnum;
}

/**
 * Poll
 */
export class MeetingPollCreatePoll extends SpeakeasyBase {
  /**
   * Array of Polls
   */
  @SpeakeasyMetadata({
    data: "multipart_form, name=questions;json=true",
    elemType: MeetingPollCreatePollQuestions,
  })
  @Expose({ name: "questions" })
  @Type(() => MeetingPollCreatePollQuestions)
  questions?: MeetingPollCreatePollQuestions[];

  /**
   * Title for the poll.
   */
  @SpeakeasyMetadata({ data: "multipart_form, name=title" })
  @Expose({ name: "title" })
  title?: string;
}

export class MeetingPollCreateRequest extends SpeakeasyBase {
  /**
   * Meeting poll object
   */
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody: MeetingPollCreatePoll;

  /**
   * The meeting ID in **long** format. The data type of this field is "long"(represented as int64 in JSON).
   *
   * @remarks
   *
   * While storing it in your database, store it as a **long** data type and **not as an integer**, as the Meeting IDs can be longer than 10 digits.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=meetingId",
  })
  meetingId: number;
}

/**
 * Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
 */
export enum MeetingPollCreatePollStatusEnum {
  Notstart = "notstart",
  Started = "started",
  Ended = "ended",
  Sharing = "sharing",
}

/**
 * Poll
 */
export class MeetingPollCreatePoll2 extends SpeakeasyBase {
  /**
   * Meeting Poll ID
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Array of Polls
   */
  @SpeakeasyMetadata({ elemType: MeetingPollCreatePollQuestions })
  @Expose({ name: "questions" })
  @Type(() => MeetingPollCreatePollQuestions)
  questions?: MeetingPollCreatePollQuestions[];

  /**
   * Status of the Meeting Poll:<br>`notstart` - Poll not started<br>`started` - Poll started<br>`ended` - Poll ended<br>`sharing` - Sharing poll results
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: MeetingPollCreatePollStatusEnum;

  /**
   * Title for the poll.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "title" })
  title?: string;
}

export class MeetingPollCreateResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  headers?: Record<string, string[]>;

  /**
   * **HTTP Status Code:** `201` <br>
   *
   * @remarks
   * Meeting Poll Created
   */
  @SpeakeasyMetadata()
  poll?: MeetingPollCreatePoll2;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
