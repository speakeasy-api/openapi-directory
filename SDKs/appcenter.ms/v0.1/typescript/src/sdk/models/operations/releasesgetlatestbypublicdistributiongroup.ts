/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class ReleasesGetLatestByPublicDistributionGroupRequest extends SpeakeasyBase {
  /**
   * The secret of the target application
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=app_secret",
  })
  appSecret: string;

  /**
   * the id for destination
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=distribution_group_id",
  })
  distributionGroupId: string;

  /**
   * The check if the request is from Install page
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=is_install_page",
  })
  isInstallPage?: boolean;
}

export enum ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Error Codes:
 *
 * @remarks
 * - `not_found` - Distribution group or the app doesn't exist
 * - `no_releases_for_app` - App has no releases.
 *
 */
export class ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesGetLatestByPublicDistributionGroup404ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

export enum ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum {
  BadRequest = "BadRequest",
  Conflict = "Conflict",
  NotAcceptable = "NotAcceptable",
  NotFound = "NotFound",
  InternalServerError = "InternalServerError",
  Unauthorized = "Unauthorized",
  TooManyRequests = "TooManyRequests",
}

/**
 * Error Codes:
 *
 * @remarks
 * - `forbidden` - Unauthorized to access private distribution group
 *
 */
export class ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "code" })
  code: ReleasesGetLatestByPublicDistributionGroup403ApplicationJSONCodeEnum;

  @SpeakeasyMetadata()
  @Expose({ name: "message" })
  message: string;
}

/**
 * Contains metadata about the build that produced the release being uploaded
 */
export class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild extends SpeakeasyBase {
  /**
   * The branch name of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "branch_name" })
  branchName?: string;

  /**
   * The commit hash of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_hash" })
  commitHash?: string;

  /**
   * The commit message of the build producing the release
   */
  @SpeakeasyMetadata()
  @Expose({ name: "commit_message" })
  commitMessage?: string;
}

/**
 * OBSOLETE. Will be removed in next version. The destination type.<br>
 *
 * @remarks
 * <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
 * <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
 * <b>tester</b>: The release distributed testers details will be returned.<br>
 *
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum {
  Group = "group",
  Store = "store",
  Tester = "tester",
}

/**
 * Destination can be either store or group.
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum {
  Group = "group",
  Store = "store",
  Tester = "tester",
}

/**
 * type of the distribution store currently stores type can be intune, googleplay or windows.
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum {
  Intune = "intune",
  Googleplay = "googleplay",
  Apple = "apple",
  None = "none",
}

/**
 * A unique identifier for a destination. A destination can be identified by an ID (guid) or by a name. DestinationId encapsulates both options. A destination can be either a distribution group or a store.
 */
export class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations extends SpeakeasyBase {
  /**
   * Destination can be either store or group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_type" })
  destinationType?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsDestinationTypeEnum;

  /**
   * Display name for the group or tester
   */
  @SpeakeasyMetadata()
  @Expose({ name: "display_name" })
  displayName?: string;

  /**
   * ID identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * Is the containing release the latest one in this distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_latest" })
  isLatest?: boolean;

  /**
   * A name identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * publishing status of the release in the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishing_status" })
  publishingStatus?: string;

  /**
   * type of the distribution store currently stores type can be intune, googleplay or windows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationsTypeEnum;
}

export class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups extends SpeakeasyBase {
  /**
   * ID identifying a unique distribution group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * A name identifying a unique distribution group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;
}

/**
 * type of the distribution store currently stores type can be intune, googleplay or windows.
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum {
  Intune = "intune",
  Googleplay = "googleplay",
  Apple = "apple",
  None = "none",
}

export class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores extends SpeakeasyBase {
  /**
   * ID identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: string;

  /**
   * A name identifying a unique distribution store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * publishing status of the release in the store.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "publishing_status" })
  publishingStatus?: string;

  /**
   * type of the distribution store currently stores type can be intune, googleplay or windows.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStoresTypeEnum;
}

/**
 * The release's origin
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum {
  Hockeyapp = "hockeyapp",
  Appcenter = "appcenter",
}

/**
 * The type of the provisioning profile for the requested app version.
 */
export enum ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum {
  Adhoc = "adhoc",
  Enterprise = "enterprise",
  Other = "other",
}

/**
 * Details of an uploaded release
 */
export class ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON extends SpeakeasyBase {
  /**
   * The release's minimum required Android API level.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "android_min_api_level" })
  androidMinApiLevel?: string;

  /**
   * The app's display name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_display_name" })
  appDisplayName: string;

  /**
   * A URL to the app's icon.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_icon_url" })
  appIconUrl: string;

  /**
   * The app's name (extracted from the uploaded release).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_name" })
  appName: string;

  /**
   * The app's OS.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "app_os" })
  appOs?: string;

  /**
   * Contains metadata about the build that produced the release being uploaded
   */
  @SpeakeasyMetadata()
  @Expose({ name: "build" })
  @Type(() => ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild)
  build?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONBuild;

  /**
   * The identifier of the apps bundle.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "bundle_identifier" })
  bundleIdentifier?: string;

  /**
   * In calls that allow passing `udid` in the query string, this value determines if a release can be re-signed. When true, after a re-sign, the tester will be able to install the release from his registered devices. Will not be returned for non-iOS platforms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "can_resign" })
  canResign?: boolean;

  /**
   * OBSOLETE. Will be removed in next version. The destination type.<br>
   *
   * @remarks
   * <b>group</b>: The release distributed to internal groups and distribution_groups details will be returned.<br>
   * <b>store</b>: The release distributed to external stores and distribution_stores details will be returned.<br>
   * <b>tester</b>: The release distributed testers details will be returned.<br>
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "destination_type" })
  destinationType?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinationTypeEnum;

  /**
   * A list of distribution groups or stores.
   */
  @SpeakeasyMetadata({
    elemType:
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations,
  })
  @Expose({ name: "destinations" })
  @Type(
    () =>
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations
  )
  destinations?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDestinations[];

  /**
   * The release's device family.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "device_family" })
  deviceFamily?: string;

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution groups that are associated with this release.
   */
  @SpeakeasyMetadata({
    elemType:
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups,
  })
  @Expose({ name: "distribution_groups" })
  @Type(
    () =>
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups
  )
  distributionGroups?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionGroups[];

  /**
   * OBSOLETE. Will be removed in next version. A list of distribution stores that are associated with this release.
   */
  @SpeakeasyMetadata({
    elemType:
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores,
  })
  @Expose({ name: "distribution_stores" })
  @Type(
    () =>
      ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores
  )
  distributionStores?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONDistributionStores[];

  /**
   * The URL that hosts the binary for this release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "download_url" })
  downloadUrl?: string;

  /**
   * This value determines the whether a release currently is enabled or disabled.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enabled" })
  enabled: boolean;

  /**
   * MD5 checksum of the release binary.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "fingerprint" })
  fingerprint?: string;

  /**
   * ID identifying this unique release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id: number;

  /**
   * The href required to install a release on a mobile device. On iOS devices will be prefixed with `itms-services://?action=download-manifest&url=`
   */
  @SpeakeasyMetadata()
  @Expose({ name: "install_url" })
  installUrl?: string;

  /**
   * This value determines if a release is external or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_external_build" })
  isExternalBuild?: boolean;

  /**
   * A flag that determines whether the release's provisioning profile is still extracted or not.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_provisioning_profile_syncing" })
  isProvisioningProfileSyncing?: boolean;

  /**
   * In calls that allow passing `udid` in the query string, this value will hold the provisioning status of that UDID in this release. Will be ignored for non-iOS platforms.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "is_udid_provisioned" })
  isUdidProvisioned?: boolean;

  /**
   * The release's minimum required operating system.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "min_os" })
  minOs?: string;

  /**
   * The release's origin
   */
  @SpeakeasyMetadata()
  @Expose({ name: "origin" })
  origin?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONOriginEnum;

  /**
   * Hashes for the packages.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "package_hashes" })
  packageHashes?: string[];

  /**
   * expiration date of provisioning profile in UTC format.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioning_profile_expiry_date" })
  provisioningProfileExpiryDate?: string;

  /**
   * The release's provisioning profile name.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioning_profile_name" })
  provisioningProfileName?: string;

  /**
   * The type of the provisioning profile for the requested app version.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "provisioning_profile_type" })
  provisioningProfileType?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSONProvisioningProfileTypeEnum;

  /**
   * The release's release notes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "release_notes" })
  releaseNotes?: string;

  /**
   * The URL that hosts the secondary binary for this release, such as the apk file for aab releases.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondary_download_url" })
  secondaryDownloadUrl?: string;

  /**
   * The release's short version.<br>
   *
   * @remarks
   * For iOS: CFBundleShortVersionString from info.plist.
   * For Android: android:versionName from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "short_version" })
  shortVersion: string;

  /**
   * The release's size in bytes.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "size" })
  size?: number;

  /**
   * Status of the release.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  status?: string;

  /**
   * UTC time in ISO 8601 format of the uploaded time.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uploaded_at" })
  uploadedAt: string;

  /**
   * The release's version.<br>
   *
   * @remarks
   * For iOS: CFBundleVersion from info.plist.
   * For Android: android:versionCode from AppManifest.xml.
   *
   */
  @SpeakeasyMetadata()
  @Expose({ name: "version" })
  version: string;
}

export class ReleasesGetLatestByPublicDistributionGroupResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * The full release details of the latest release that was distributed from the given public group.
   */
  @SpeakeasyMetadata()
  releasesGetLatestByPublicDistributionGroup200ApplicationJSONObject?: ReleasesGetLatestByPublicDistributionGroup200ApplicationJSON;

  /**
   * Error Codes:
   *
   * @remarks
   * - `forbidden` - Unauthorized to access private distribution group
   *
   */
  @SpeakeasyMetadata()
  releasesGetLatestByPublicDistributionGroup403ApplicationJSONObject?: ReleasesGetLatestByPublicDistributionGroup403ApplicationJSON;

  /**
   * Error Codes:
   *
   * @remarks
   * - `not_found` - Distribution group or the app doesn't exist
   * - `no_releases_for_app` - App has no releases.
   *
   */
  @SpeakeasyMetadata()
  releasesGetLatestByPublicDistributionGroup404ApplicationJSONObject?: ReleasesGetLatestByPublicDistributionGroup404ApplicationJSON;
}
