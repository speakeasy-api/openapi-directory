// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SubscriptionItemPriceChangeDetailsPriceChangeModeEnum - Price change mode specifies how the subscription item price is changing.
type SubscriptionItemPriceChangeDetailsPriceChangeModeEnum string

const (
	SubscriptionItemPriceChangeDetailsPriceChangeModeEnumPriceChangeModeUnspecified SubscriptionItemPriceChangeDetailsPriceChangeModeEnum = "PRICE_CHANGE_MODE_UNSPECIFIED"
	SubscriptionItemPriceChangeDetailsPriceChangeModeEnumPriceDecrease              SubscriptionItemPriceChangeDetailsPriceChangeModeEnum = "PRICE_DECREASE"
	SubscriptionItemPriceChangeDetailsPriceChangeModeEnumPriceIncrease              SubscriptionItemPriceChangeDetailsPriceChangeModeEnum = "PRICE_INCREASE"
)

func (e SubscriptionItemPriceChangeDetailsPriceChangeModeEnum) ToPointer() *SubscriptionItemPriceChangeDetailsPriceChangeModeEnum {
	return &e
}

func (e *SubscriptionItemPriceChangeDetailsPriceChangeModeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRICE_CHANGE_MODE_UNSPECIFIED":
		fallthrough
	case "PRICE_DECREASE":
		fallthrough
	case "PRICE_INCREASE":
		*e = SubscriptionItemPriceChangeDetailsPriceChangeModeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionItemPriceChangeDetailsPriceChangeModeEnum: %v", v)
	}
}

// SubscriptionItemPriceChangeDetailsPriceChangeStateEnum - State the price change is currently in.
type SubscriptionItemPriceChangeDetailsPriceChangeStateEnum string

const (
	SubscriptionItemPriceChangeDetailsPriceChangeStateEnumPriceChangeStateUnspecified SubscriptionItemPriceChangeDetailsPriceChangeStateEnum = "PRICE_CHANGE_STATE_UNSPECIFIED"
	SubscriptionItemPriceChangeDetailsPriceChangeStateEnumOutstanding                 SubscriptionItemPriceChangeDetailsPriceChangeStateEnum = "OUTSTANDING"
	SubscriptionItemPriceChangeDetailsPriceChangeStateEnumConfirmed                   SubscriptionItemPriceChangeDetailsPriceChangeStateEnum = "CONFIRMED"
	SubscriptionItemPriceChangeDetailsPriceChangeStateEnumApplied                     SubscriptionItemPriceChangeDetailsPriceChangeStateEnum = "APPLIED"
)

func (e SubscriptionItemPriceChangeDetailsPriceChangeStateEnum) ToPointer() *SubscriptionItemPriceChangeDetailsPriceChangeStateEnum {
	return &e
}

func (e *SubscriptionItemPriceChangeDetailsPriceChangeStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PRICE_CHANGE_STATE_UNSPECIFIED":
		fallthrough
	case "OUTSTANDING":
		fallthrough
	case "CONFIRMED":
		fallthrough
	case "APPLIED":
		*e = SubscriptionItemPriceChangeDetailsPriceChangeStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubscriptionItemPriceChangeDetailsPriceChangeStateEnum: %v", v)
	}
}

// SubscriptionItemPriceChangeDetails - Price change related information of a subscription item.
type SubscriptionItemPriceChangeDetails struct {
	// The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause.
	ExpectedNewPriceChargeTime *string `json:"expectedNewPriceChargeTime,omitempty"`
	// Represents an amount of money with its currency type.
	NewPrice *Money `json:"newPrice,omitempty"`
	// Price change mode specifies how the subscription item price is changing.
	PriceChangeMode *SubscriptionItemPriceChangeDetailsPriceChangeModeEnum `json:"priceChangeMode,omitempty"`
	// State the price change is currently in.
	PriceChangeState *SubscriptionItemPriceChangeDetailsPriceChangeStateEnum `json:"priceChangeState,omitempty"`
}
