/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class PriceTables {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Get rules for a price table
   *
   * @remarks
   * This method will retrieve the rules from a specific Price Table.
   *
   * ## Response body example
   *
   * ```json
   * {
   *     "tradePolicyId": "b2c",
   *     "rules": [{
   *         "id": 0,
   *         "context": {
   *             "categories": {},
   *             "brands": {
   *                 "2000009": "Whiskas"
   *             },
   *             "stockStatuses": null,
   *             "internalCategories": null,
   *             "markupRange": null,
   *             "dateRange": null
   *         },
   *         "percentualModifier": 15
   *     }]
   * }
   * ```
   */
  getrulesforapricetable(
    req: operations.GetrulesforapricetableRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetrulesforapricetableResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetrulesforapricetableRequest(req);
    }

    let baseURL: string = operations.GetrulesforapricetableServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = utils.generateURL(
      baseURL,
      "/pricing/pipeline/catalog/{priceTableId}",
      req
    );

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetrulesforapricetableResponse =
        new operations.GetrulesforapricetableResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getrulesforapricetable200ApplicationJSONObject =
              utils.objectToClass(
                httpRes?.data,
                operations.Getrulesforapricetable200ApplicationJSON
              );
          }
          break;
        case [401, 403, 429].includes(httpRes?.status):
          break;
      }

      return res;
    });
  }

  /**
   * List price tables
   *
   * @remarks
   * This method will list all price tables.
   *
   * ## Response body example
   *
   * ```json
   * [
   *     "1",
   *     "2",
   *     "3",
   *     "b2c",
   *     "b2b",
   *     "gold"
   * ]
   * ```
   */
  listpricetables(
    req: operations.ListpricetablesRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.ListpricetablesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListpricetablesRequest(req);
    }

    let baseURL: string = operations.ListpricetablesServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string = baseURL.replace(/\/$/, "") + "/pricing/tables";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ListpricetablesResponse =
        new operations.ListpricetablesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.listpricetables200ApplicationJSONStrings = utils.objectToClass(
              httpRes?.data
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get all price tables and their rules
   *
   * @remarks
   * This method will retrieve all price tables and their rules.
   *
   * ## Response body example
   *
   * ```json
   * [
   *     {
   *         "tradePolicyId": "2",
   *         "rules": [
   *             {
   *                 "id": 0,
   *                 "context": {
   *                     "categories": {},
   *                     "brands": {},
   *                     "stockStatuses": null,
   *                     "internalCategories": null,
   *                     "markupRange": null,
   *                     "dateRange": null
   *                 },
   *                 "percentualModifier": 20
   *             }
   *         ]
   *     },
   *     {
   *         "tradePolicyId": "b2c",
   *         "rules": [
   *             {
   *                 "id": 0,
   *                 "context": {
   *                     "categories": {},
   *                     "brands": {
   *                         "2000009": "Whiskas"
   *                     },
   *                     "stockStatuses": null,
   *                     "internalCategories": null,
   *                     "markupRange": null,
   *                     "dateRange": null
   *                 },
   *                 "percentualModifier": 15
   *             }
   *         ]
   *     }
   * ]
   * ```
   */
  getallpricetablesandrules(
    req: operations.GetallpricetablesandrulesRequest,
    serverURL?: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetallpricetablesandrulesResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.GetallpricetablesandrulesRequest(req);
    }

    let baseURL: string = operations.GetallpricetablesandrulesServerList[0];
    if (serverURL) {
      baseURL = serverURL;
    }
    const url: string =
      baseURL.replace(/\/$/, "") + "/pricing/pipeline/catalog";

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = { ...utils.getHeadersFromRequest(req), ...config?.headers };

    const r = client.request({
      url: url,
      method: "get",
      headers: headers,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.GetallpricetablesandrulesResponse =
        new operations.GetallpricetablesandrulesResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.getallpricetablesandrules200ApplicationJSONObjects = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.getallpricetablesandrules200ApplicationJSONObjects =
              utils.objectToClass(
                httpRes?.data,
                operations.Getallpricetablesandrules200ApplicationJSON,
                resFieldDepth
              );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Update rules for a price table
   *
   * @remarks
   * This method will update the rules from a specific Price Table. It will delete all the rules from the requested Price Table and create new rules based on the content of the request.
   *
   * ## Request body example
   *
   * ```json
   * {
   *     "rules": [
   *           {
   *                "id": 1,
   *                "context": {
   *                     "categories": {
   *                          "Category ID": "1",
   *                          "Category Name": "Alimentação"
   *                     },
   *                     "brands": {
   *                          "Brand ID": "2000002",
   *                          "Brand Name": "Whiskas"
   *                     },
   *                     "markupRange": {
   *                          "from": 0,
   *                          "to": 200
   *                     },
   *                     "dateRange": {
   *                          "from": "2022-01-23T19:00:00.000Z",
   *                          "to": "2023-10-26T00:00:00.000Z"
   *                     }
   *                },
   *                "percentualModifier": 0
   *           }
   *     ]
   * }
   * ```
   */
  putPricingPipelineCatalogPriceTableId(
    req: operations.PutPricingPipelineCatalogPriceTableIdRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.PutPricingPipelineCatalogPriceTableIdResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.PutPricingPipelineCatalogPriceTableIdRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/pricing/pipeline/catalog/{priceTableId}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._securityClient || this._defaultClient;

    const headers = {
      ...utils.getHeadersFromRequest(req),
      ...reqBodyHeaders,
      ...config?.headers,
    };

    const r = client.request({
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.PutPricingPipelineCatalogPriceTableIdResponse =
        new operations.PutPricingPipelineCatalogPriceTableIdResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          break;
      }

      return res;
    });
  }
}
