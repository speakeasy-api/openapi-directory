/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AutoscalingConfig } from "./autoscalingconfig";
import {
  AuxiliaryNodeGroup,
  AuxiliaryNodeGroupInput,
} from "./auxiliarynodegroup";
import { DataprocMetricConfig } from "./dataprocmetricconfig";
import { EncryptionConfig } from "./encryptionconfig";
import { EndpointConfig, EndpointConfigInput } from "./endpointconfig";
import { GceClusterConfig } from "./gceclusterconfig";
import { GkeClusterConfig } from "./gkeclusterconfig";
import {
  InstanceGroupConfig,
  InstanceGroupConfigInput,
} from "./instancegroupconfig";
import { LifecycleConfig, LifecycleConfigInput } from "./lifecycleconfig";
import { MetastoreConfig } from "./metastoreconfig";
import { NodeInitializationAction } from "./nodeinitializationaction";
import { SecurityConfig } from "./securityconfig";
import { SoftwareConfig } from "./softwareconfig";
import { Expose, Type } from "class-transformer";

/**
 * The cluster config.
 */
export class ClusterConfigInput extends SpeakeasyBase {
  /**
   * Autoscaling Policy config associated with the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoscalingConfig" })
  @Type(() => AutoscalingConfig)
  autoscalingConfig?: AutoscalingConfig;

  /**
   * Optional. The node group settings.
   */
  @SpeakeasyMetadata({ elemType: AuxiliaryNodeGroupInput })
  @Expose({ name: "auxiliaryNodeGroups" })
  @Type(() => AuxiliaryNodeGroupInput)
  auxiliaryNodeGroups?: AuxiliaryNodeGroupInput[];

  /**
   * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configBucket" })
  configBucket?: string;

  /**
   * Dataproc metric config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataprocMetricConfig" })
  @Type(() => DataprocMetricConfig)
  dataprocMetricConfig?: DataprocMetricConfig;

  /**
   * Encryption settings for the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryptionConfig" })
  @Type(() => EncryptionConfig)
  encryptionConfig?: EncryptionConfig;

  /**
   * Endpoint config for this cluster
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpointConfig" })
  @Type(() => EndpointConfigInput)
  endpointConfig?: EndpointConfigInput;

  /**
   * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gceClusterConfig" })
  @Type(() => GceClusterConfig)
  gceClusterConfig?: GceClusterConfig;

  /**
   * The cluster's GKE config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gkeClusterConfig" })
  @Type(() => GkeClusterConfig)
  gkeClusterConfig?: GkeClusterConfig;

  /**
   * Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi
   */
  @SpeakeasyMetadata({ elemType: NodeInitializationAction })
  @Expose({ name: "initializationActions" })
  @Type(() => NodeInitializationAction)
  initializationActions?: NodeInitializationAction[];

  /**
   * Specifies the cluster auto-delete schedule configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifecycleConfig" })
  @Type(() => LifecycleConfigInput)
  lifecycleConfig?: LifecycleConfigInput;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "masterConfig" })
  @Type(() => InstanceGroupConfigInput)
  masterConfig?: InstanceGroupConfigInput;

  /**
   * Specifies a Metastore configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metastoreConfig" })
  @Type(() => MetastoreConfig)
  metastoreConfig?: MetastoreConfig;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondaryWorkerConfig" })
  @Type(() => InstanceGroupConfigInput)
  secondaryWorkerConfig?: InstanceGroupConfigInput;

  /**
   * Security related configuration, including encryption, Kerberos, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securityConfig" })
  @Type(() => SecurityConfig)
  securityConfig?: SecurityConfig;

  /**
   * Specifies the selection and config of software inside the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softwareConfig" })
  @Type(() => SoftwareConfig)
  softwareConfig?: SoftwareConfig;

  /**
   * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tempBucket" })
  tempBucket?: string;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workerConfig" })
  @Type(() => InstanceGroupConfigInput)
  workerConfig?: InstanceGroupConfigInput;
}

/**
 * The cluster config.
 */
export class ClusterConfig extends SpeakeasyBase {
  /**
   * Autoscaling Policy config associated with the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "autoscalingConfig" })
  @Type(() => AutoscalingConfig)
  autoscalingConfig?: AutoscalingConfig;

  /**
   * Optional. The node group settings.
   */
  @SpeakeasyMetadata({ elemType: AuxiliaryNodeGroup })
  @Expose({ name: "auxiliaryNodeGroups" })
  @Type(() => AuxiliaryNodeGroup)
  auxiliaryNodeGroups?: AuxiliaryNodeGroup[];

  /**
   * Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "configBucket" })
  configBucket?: string;

  /**
   * Dataproc metric config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "dataprocMetricConfig" })
  @Type(() => DataprocMetricConfig)
  dataprocMetricConfig?: DataprocMetricConfig;

  /**
   * Encryption settings for the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "encryptionConfig" })
  @Type(() => EncryptionConfig)
  encryptionConfig?: EncryptionConfig;

  /**
   * Endpoint config for this cluster
   */
  @SpeakeasyMetadata()
  @Expose({ name: "endpointConfig" })
  @Type(() => EndpointConfig)
  endpointConfig?: EndpointConfig;

  /**
   * Common config settings for resources of Compute Engine cluster instances, applicable to all instances in the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gceClusterConfig" })
  @Type(() => GceClusterConfig)
  gceClusterConfig?: GceClusterConfig;

  /**
   * The cluster's GKE config.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "gkeClusterConfig" })
  @Type(() => GkeClusterConfig)
  gkeClusterConfig?: GkeClusterConfig;

  /**
   * Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node's role metadata to run an executable on a master or worker node, as shown below using curl (you can also use wget): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == 'Master' ]]; then ... master specific actions ... else ... worker specific actions ... fi
   */
  @SpeakeasyMetadata({ elemType: NodeInitializationAction })
  @Expose({ name: "initializationActions" })
  @Type(() => NodeInitializationAction)
  initializationActions?: NodeInitializationAction[];

  /**
   * Specifies the cluster auto-delete schedule configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "lifecycleConfig" })
  @Type(() => LifecycleConfig)
  lifecycleConfig?: LifecycleConfig;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "masterConfig" })
  @Type(() => InstanceGroupConfig)
  masterConfig?: InstanceGroupConfig;

  /**
   * Specifies a Metastore configuration.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "metastoreConfig" })
  @Type(() => MetastoreConfig)
  metastoreConfig?: MetastoreConfig;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "secondaryWorkerConfig" })
  @Type(() => InstanceGroupConfig)
  secondaryWorkerConfig?: InstanceGroupConfig;

  /**
   * Security related configuration, including encryption, Kerberos, etc.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "securityConfig" })
  @Type(() => SecurityConfig)
  securityConfig?: SecurityConfig;

  /**
   * Specifies the selection and config of software inside the cluster.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "softwareConfig" })
  @Type(() => SoftwareConfig)
  softwareConfig?: SoftwareConfig;

  /**
   * Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket (see Dataproc staging and temp buckets (https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). This field requires a Cloud Storage bucket name, not a gs://... URI to a Cloud Storage bucket.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "tempBucket" })
  tempBucket?: string;

  /**
   * The config settings for Compute Engine resources in an instance group, such as a master or worker group.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "workerConfig" })
  @Type(() => InstanceGroupConfig)
  workerConfig?: InstanceGroupConfig;
}
