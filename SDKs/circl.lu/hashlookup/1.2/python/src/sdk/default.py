"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations

class Default:
    r"""Default namespace"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def get_children(self, request: operations.GetChildrenRequest) -> operations.GetChildrenResponse:
        r"""Return children from a given SHA1.  A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetChildrenRequest, base_url, '/children/{sha1}/{count}/{cursor}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetChildrenResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_info(self) -> operations.GetInfoResponse:
        r"""Info about the hashlookup database"""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/info'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetInfoResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_lookup_md5(self, request: operations.GetLookupMd5Request) -> operations.GetLookupMd5Response:
        r"""Lookup MD5."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLookupMd5Request, base_url, '/lookup/md5/{md5}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLookupMd5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_lookup_sha1(self, request: operations.GetLookupSha1Request) -> operations.GetLookupSha1Response:
        r"""Lookup SHA-1."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLookupSha1Request, base_url, '/lookup/sha1/{sha1}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLookupSha1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_lookup_sha256(self, request: operations.GetLookupSha256Request) -> operations.GetLookupSha256Response:
        r"""Lookup SHA-256."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetLookupSha256Request, base_url, '/lookup/sha256/{sha256}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetLookupSha256Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_parents(self, request: operations.GetParentsRequest) -> operations.GetParentsResponse:
        r"""Return parents from a given SHA1. A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetParentsRequest, base_url, '/parents/{sha1}/{count}/{cursor}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetParentsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_session_create(self, request: operations.GetSessionCreateRequest) -> operations.GetSessionCreateResponse:
        r"""Create a session key to keep search context. The session is attached to a name. After the session is created, the header `hashlookup_session` can be set to the session name."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSessionCreateRequest, base_url, '/session/create/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSessionCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_session_matches(self, request: operations.GetSessionMatchesRequest) -> operations.GetSessionMatchesResponse:
        r"""Return set of matching and non-matching hashes from a session."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSessionMatchesRequest, base_url, '/session/get/{name}', request)
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSessionMatchesResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def get_stattop(self) -> operations.GetStattopResponse:
        r"""Return the top 100 of most queried values."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/stats/top'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetStattopResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_bulkmd5(self) -> operations.PostBulkmd5Response:
        r"""Bulk search of MD5 hashes in a JSON array with the key 'hashes'."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bulk/md5'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBulkmd5Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    def post_bulksha1(self) -> operations.PostBulksha1Response:
        r"""Bulk search of SHA1 hashes in a JSON array with the 'hashes'."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/bulk/sha1'
        
        
        client = self._client
        
        http_res = client.request('POST', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.PostBulksha1Response(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        

        return res

    