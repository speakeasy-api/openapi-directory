<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Projects 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateResponse
     */
	public function recaptchaenterpriseProjectsAssessmentsAnnotate(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:annotate', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsAnnotateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1AnnotateAssessmentResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates an Assessment of the likelihood an event is legitimate.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateResponse
     */
	public function recaptchaenterpriseProjectsAssessmentsCreate(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/assessments', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1AssessmentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsAssessmentsCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1Assessment = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1Assessment', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse
     */
	public function recaptchaenterpriseProjectsFirewallpoliciesCreate(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/firewallpolicies', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1FirewallPolicy", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1FirewallPolicy = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1FirewallPolicy', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all firewall policies that belong to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListResponse
     */
	public function recaptchaenterpriseProjectsFirewallpoliciesList(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/firewallpolicies', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsFirewallpoliciesListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1ListFirewallPoliciesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new reCAPTCHA Enterprise key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateResponse
     */
	public function recaptchaenterpriseProjectsKeysCreate(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/keys', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1KeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1Key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Deletes the specified key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteResponse
     */
	public function recaptchaenterpriseProjectsKeysDelete(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleProtobufEmpty = $serializer->deserialize((string)$httpResponse->getBody(), 'array<string, mixed>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get some aggregated metrics for a Key. This data can be used to build dashboards.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsResponse
     */
	public function recaptchaenterpriseProjectsKeysGetMetrics(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysGetMetricsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1Metrics = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1Metrics', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the list of all keys that belong to a project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListResponse
     */
	public function recaptchaenterpriseProjectsKeysList(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/keys', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1ListKeysResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1ListKeysResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateResponse
     */
	public function recaptchaenterpriseProjectsKeysMigrate(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}:migrate', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1MigrateKeyRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysMigrateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1Key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates the specified key.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchResponse
     */
	public function recaptchaenterpriseProjectsKeysPatch(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{name}', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1KeyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysPatchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1Key = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1Key', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns the secret key related to the specified public key. You must use the legacy secret key only in a 3rd party integration with legacy reCAPTCHA.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeySecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse
     */
	public function recaptchaenterpriseProjectsKeysRetrieveLegacySecretKey(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeySecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{key}:retrieveLegacySecretKey', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsKeysRetrieveLegacySecretKeyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1RetrieveLegacySecretKeyResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Search group memberships related to a given account.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse
     */
	public function recaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearch(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{project}/relatedaccountgroupmemberships:search', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsRequest", "json");
        $options = array_merge_recursive($options, $body);
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupmembershipsSearchResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1SearchRelatedAccountGroupMembershipsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * List groups of related accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse
     */
	public function recaptchaenterpriseProjectsRelatedaccountgroupsList(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/relatedaccountgroups', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get memberships in a group of related accounts.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest $request
     * @param \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListSecurity $security
     * @return \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse
     */
	public function recaptchaenterpriseProjectsRelatedaccountgroupsMembershipsList(
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest $request,
        \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListSecurity $security,
    ): \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/v1/{parent}/memberships', \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListRequest::class, $request, null));
        
        $client = Utils\Utils::configureSecurityClient($this->_defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\RecaptchaenterpriseProjectsRelatedaccountgroupsMembershipsListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->googleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\GoogleCloudRecaptchaenterpriseV1ListRelatedAccountGroupMembershipsResponse', 'json');
            }
        }

        return $response;
    }
}