<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI\Models\Shared;


/**
 * NullableRepository - A repository on GitHub.
 * 
 * @package OpenAPI\OpenAPI\Models\Shared
 * @access public
 */
class NullableRepository
{
    /**
     * Whether to allow Auto-merge to be used on pull requests.
     * 
     * @var ?bool $allowAutoMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_auto_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowAutoMerge = null;
    
    /**
     * Whether to allow forking this repo
     * 
     * @var ?bool $allowForking
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_forking')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowForking = null;
    
    /**
     * Whether to allow merge commits for pull requests.
     * 
     * @var ?bool $allowMergeCommit
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_merge_commit')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowMergeCommit = null;
    
    /**
     * Whether to allow rebase merges for pull requests.
     * 
     * @var ?bool $allowRebaseMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_rebase_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowRebaseMerge = null;
    
    /**
     * Whether to allow squash merges for pull requests.
     * 
     * @var ?bool $allowSquashMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_squash_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowSquashMerge = null;
    
    /**
     * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
     * 
     * @var ?bool $allowUpdateBranch
     */
	#[\JMS\Serializer\Annotation\SerializedName('allow_update_branch')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $allowUpdateBranch = null;
    
    /**
     * Whether anonymous git access is enabled for this repository
     * 
     * @var ?bool $anonymousAccessEnabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('anonymous_access_enabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $anonymousAccessEnabled = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('archive_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $archiveUrl;
    
    /**
     * Whether the repository is archived.
     * 
     * @var bool $archived
     */
	#[\JMS\Serializer\Annotation\SerializedName('archived')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $archived;
    
	#[\JMS\Serializer\Annotation\SerializedName('assignees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $assigneesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('blobs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $blobsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('branches_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $branchesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('clone_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $cloneUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('collaborators_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $collaboratorsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('comments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $commitsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('compare_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $compareUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('contents_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('contributors_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $contributorsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The default branch of the repository.
     * 
     * @var string $defaultBranch
     */
	#[\JMS\Serializer\Annotation\SerializedName('default_branch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $defaultBranch;
    
    /**
     * Whether to delete head branches when pull requests are merged
     * 
     * @var ?bool $deleteBranchOnMerge
     */
	#[\JMS\Serializer\Annotation\SerializedName('delete_branch_on_merge')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $deleteBranchOnMerge = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('deployments_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $deploymentsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
    /**
     * Returns whether or not this repository disabled.
     * 
     * @var bool $disabled
     */
	#[\JMS\Serializer\Annotation\SerializedName('disabled')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $disabled;
    
	#[\JMS\Serializer\Annotation\SerializedName('downloads_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $downloadsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $eventsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('fork')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $fork;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $forks;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $forksCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('forks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $forksUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('full_name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $fullName;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_commits_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitCommitsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_refs_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitRefsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitTagsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('git_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $gitUrl;
    
    /**
     * Whether discussions are enabled.
     * 
     * @var ?bool $hasDiscussions
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_discussions')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $hasDiscussions = null;
    
    /**
     * Whether downloads are enabled.
     * 
     * @var bool $hasDownloads
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_downloads')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasDownloads;
    
    /**
     * Whether issues are enabled.
     * 
     * @var bool $hasIssues
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_issues')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasIssues;
    
	#[\JMS\Serializer\Annotation\SerializedName('has_pages')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasPages;
    
    /**
     * Whether projects are enabled.
     * 
     * @var bool $hasProjects
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_projects')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasProjects;
    
    /**
     * Whether the wiki is enabled.
     * 
     * @var bool $hasWiki
     */
	#[\JMS\Serializer\Annotation\SerializedName('has_wiki')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $hasWiki;
    
	#[\JMS\Serializer\Annotation\SerializedName('homepage')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $homepage;
    
	#[\JMS\Serializer\Annotation\SerializedName('hooks_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $hooksUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('html_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $htmlUrl;
    
    /**
     * Unique identifier of the repository
     * 
     * @var int $id
     */
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $id;
    
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     * 
     * @var ?bool $isTemplate
     */
	#[\JMS\Serializer\Annotation\SerializedName('is_template')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $isTemplate = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('issue_comment_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueCommentUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('issue_events_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issueEventsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('issues_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $issuesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('keys_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $keysUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('labels_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $labelsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('language')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $language;
    
	#[\JMS\Serializer\Annotation\SerializedName('languages_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $languagesUrl;
    
    /**
     * License Simple
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple $license
     */
	#[\JMS\Serializer\Annotation\SerializedName('license')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple')]
    public NullableLicenseSimple $license;
    
	#[\JMS\Serializer\Annotation\SerializedName('master_branch')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $masterBranch = null;
    
    /**
     * The default value for a merge commit message.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableRepositoryMergeCommitMessageEnum $mergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\NullableRepositoryMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositoryMergeCommitMessageEnum $mergeCommitMessage = null;
    
    /**
     * The default value for a merge commit title.
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableRepositoryMergeCommitTitleEnum $mergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\NullableRepositoryMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositoryMergeCommitTitleEnum $mergeCommitTitle = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('merges_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mergesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('milestones_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $milestonesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('mirror_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $mirrorUrl;
    
    /**
     * The name of the repository.
     * 
     * @var string $name
     */
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
	#[\JMS\Serializer\Annotation\SerializedName('network_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $networkCount = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('node_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $nodeId;
    
	#[\JMS\Serializer\Annotation\SerializedName('notifications_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $notificationsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('open_issues')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $openIssues;
    
	#[\JMS\Serializer\Annotation\SerializedName('open_issues_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $openIssuesCount;
    
    /**
     * A GitHub user.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser $organization
     */
	#[\JMS\Serializer\Annotation\SerializedName('organization')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableSimpleUser')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableSimpleUser $organization = null;
    
    /**
     * A GitHub user.
     * 
     * @var \OpenAPI\OpenAPI\Models\Shared\SimpleUser $owner
     */
	#[\JMS\Serializer\Annotation\SerializedName('owner')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\SimpleUser')]
    public SimpleUser $owner;
    
	#[\JMS\Serializer\Annotation\SerializedName('permissions')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableRepositoryPermissions')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositoryPermissions $permissions = null;
    
    /**
     * Whether the repository is private or public.
     * 
     * @var bool $private
     */
	#[\JMS\Serializer\Annotation\SerializedName('private')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    public bool $private;
    
	#[\JMS\Serializer\Annotation\SerializedName('pulls_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $pullsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('pushed_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $pushedAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('releases_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $releasesUrl;
    
    /**
     * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
     * 
     * @var int $size
     */
	#[\JMS\Serializer\Annotation\SerializedName('size')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $size;
    
    /**
     * The default value for a squash merge commit message:
     * 
     * 
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableRepositorySquashMergeCommitMessageEnum $squashMergeCommitMessage
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_message')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\NullableRepositorySquashMergeCommitMessageEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositorySquashMergeCommitMessageEnum $squashMergeCommitMessage = null;
    
    /**
     * The default value for a squash merge commit title:
     * 
     * 
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     * 
     * @var ?\OpenAPI\OpenAPI\Models\Shared\NullableRepositorySquashMergeCommitTitleEnum $squashMergeCommitTitle
     */
	#[\JMS\Serializer\Annotation\SerializedName('squash_merge_commit_title')]
    #[\JMS\Serializer\Annotation\Type('enum<OpenAPI\OpenAPI\Models\Shared\NullableRepositorySquashMergeCommitTitleEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositorySquashMergeCommitTitleEnum $squashMergeCommitTitle = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('ssh_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $sshUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('stargazers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $stargazersCount;
    
	#[\JMS\Serializer\Annotation\SerializedName('stargazers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $stargazersUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('starred_at')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $starredAt = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('statuses_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $statusesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscribers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $subscribersCount = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscribers_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscribersUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('subscription_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subscriptionUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('svn_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $svnUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('tags_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $tagsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('teams_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $teamsUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('temp_clone_token')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $tempCloneToken = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('template_repository')]
    #[\JMS\Serializer\Annotation\Type('OpenAPI\OpenAPI\Models\Shared\NullableRepositoryTemplateRepository')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?NullableRepositoryTemplateRepository $templateRepository = null;
    
    /**
     * $topics
     * 
     * @var ?array<string> $topics
     */
	#[\JMS\Serializer\Annotation\SerializedName('topics')]
    #[\JMS\Serializer\Annotation\Type('array<string>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $topics = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('trees_url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $treesUrl;
    
	#[\JMS\Serializer\Annotation\SerializedName('updated_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $updatedAt;
    
	#[\JMS\Serializer\Annotation\SerializedName('url')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $url;
    
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * 
     * @var ?bool $useSquashPrTitleAsDefault
     */
	#[\JMS\Serializer\Annotation\SerializedName('use_squash_pr_title_as_default')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $useSquashPrTitleAsDefault = null;
    
    /**
     * The repository visibility: public, private, or internal.
     * 
     * @var ?string $visibility
     */
	#[\JMS\Serializer\Annotation\SerializedName('visibility')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $visibility = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('watchers')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $watchers;
    
	#[\JMS\Serializer\Annotation\SerializedName('watchers_count')]
    #[\JMS\Serializer\Annotation\Type('int')]
    public int $watchersCount;
    
    /**
     * Whether to require contributors to sign off on web-based commits
     * 
     * @var ?bool $webCommitSignoffRequired
     */
	#[\JMS\Serializer\Annotation\SerializedName('web_commit_signoff_required')]
    #[\JMS\Serializer\Annotation\Type('bool')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?bool $webCommitSignoffRequired = null;
    
	public function __construct()
	{
		$this->allowAutoMerge = null;
		$this->allowForking = null;
		$this->allowMergeCommit = null;
		$this->allowRebaseMerge = null;
		$this->allowSquashMerge = null;
		$this->allowUpdateBranch = null;
		$this->anonymousAccessEnabled = null;
		$this->archiveUrl = "";
		$this->archived = false;
		$this->assigneesUrl = "";
		$this->blobsUrl = "";
		$this->branchesUrl = "";
		$this->cloneUrl = "";
		$this->collaboratorsUrl = "";
		$this->commentsUrl = "";
		$this->commitsUrl = "";
		$this->compareUrl = "";
		$this->contentsUrl = "";
		$this->contributorsUrl = "";
		$this->createdAt = new \DateTime();
		$this->defaultBranch = "";
		$this->deleteBranchOnMerge = null;
		$this->deploymentsUrl = "";
		$this->description = "";
		$this->disabled = false;
		$this->downloadsUrl = "";
		$this->eventsUrl = "";
		$this->fork = false;
		$this->forks = 0;
		$this->forksCount = 0;
		$this->forksUrl = "";
		$this->fullName = "";
		$this->gitCommitsUrl = "";
		$this->gitRefsUrl = "";
		$this->gitTagsUrl = "";
		$this->gitUrl = "";
		$this->hasDiscussions = null;
		$this->hasDownloads = false;
		$this->hasIssues = false;
		$this->hasPages = false;
		$this->hasProjects = false;
		$this->hasWiki = false;
		$this->homepage = "";
		$this->hooksUrl = "";
		$this->htmlUrl = "";
		$this->id = 0;
		$this->isTemplate = null;
		$this->issueCommentUrl = "";
		$this->issueEventsUrl = "";
		$this->issuesUrl = "";
		$this->keysUrl = "";
		$this->labelsUrl = "";
		$this->language = "";
		$this->languagesUrl = "";
		$this->license = new \OpenAPI\OpenAPI\Models\Shared\NullableLicenseSimple();
		$this->masterBranch = null;
		$this->mergeCommitMessage = null;
		$this->mergeCommitTitle = null;
		$this->mergesUrl = "";
		$this->milestonesUrl = "";
		$this->mirrorUrl = "";
		$this->name = "";
		$this->networkCount = null;
		$this->nodeId = "";
		$this->notificationsUrl = "";
		$this->openIssues = 0;
		$this->openIssuesCount = 0;
		$this->organization = null;
		$this->owner = new \OpenAPI\OpenAPI\Models\Shared\SimpleUser();
		$this->permissions = null;
		$this->private = false;
		$this->pullsUrl = "";
		$this->pushedAt = new \DateTime();
		$this->releasesUrl = "";
		$this->size = 0;
		$this->squashMergeCommitMessage = null;
		$this->squashMergeCommitTitle = null;
		$this->sshUrl = "";
		$this->stargazersCount = 0;
		$this->stargazersUrl = "";
		$this->starredAt = null;
		$this->statusesUrl = "";
		$this->subscribersCount = null;
		$this->subscribersUrl = "";
		$this->subscriptionUrl = "";
		$this->svnUrl = "";
		$this->tagsUrl = "";
		$this->teamsUrl = "";
		$this->tempCloneToken = null;
		$this->templateRepository = null;
		$this->topics = null;
		$this->treesUrl = "";
		$this->updatedAt = new \DateTime();
		$this->url = "";
		$this->useSquashPrTitleAsDefault = null;
		$this->visibility = null;
		$this->watchers = 0;
		$this->watchersCount = 0;
		$this->webCommitSignoffRequired = null;
	}
}
