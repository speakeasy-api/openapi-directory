"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPSHealthCheck = exports.HTTPSHealthCheckWeightReportModeEnum = exports.HTTPSHealthCheckProxyHeaderEnum = exports.HTTPSHealthCheckPortSpecificationEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.
 */
var HTTPSHealthCheckPortSpecificationEnum;
(function (HTTPSHealthCheckPortSpecificationEnum) {
    HTTPSHealthCheckPortSpecificationEnum["UseFixedPort"] = "USE_FIXED_PORT";
    HTTPSHealthCheckPortSpecificationEnum["UseNamedPort"] = "USE_NAMED_PORT";
    HTTPSHealthCheckPortSpecificationEnum["UseServingPort"] = "USE_SERVING_PORT";
})(HTTPSHealthCheckPortSpecificationEnum = exports.HTTPSHealthCheckPortSpecificationEnum || (exports.HTTPSHealthCheckPortSpecificationEnum = {}));
/**
 * Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
 */
var HTTPSHealthCheckProxyHeaderEnum;
(function (HTTPSHealthCheckProxyHeaderEnum) {
    HTTPSHealthCheckProxyHeaderEnum["None"] = "NONE";
    HTTPSHealthCheckProxyHeaderEnum["ProxyV1"] = "PROXY_V1";
})(HTTPSHealthCheckProxyHeaderEnum = exports.HTTPSHealthCheckProxyHeaderEnum || (exports.HTTPSHealthCheckProxyHeaderEnum = {}));
/**
 * Weight report mode. used for weighted Load Balancing.
 */
var HTTPSHealthCheckWeightReportModeEnum;
(function (HTTPSHealthCheckWeightReportModeEnum) {
    HTTPSHealthCheckWeightReportModeEnum["Disable"] = "DISABLE";
    HTTPSHealthCheckWeightReportModeEnum["DryRun"] = "DRY_RUN";
    HTTPSHealthCheckWeightReportModeEnum["Enable"] = "ENABLE";
})(HTTPSHealthCheckWeightReportModeEnum = exports.HTTPSHealthCheckWeightReportModeEnum || (exports.HTTPSHealthCheckWeightReportModeEnum = {}));
var HTTPSHealthCheck = /** @class */ (function (_super) {
    __extends(HTTPSHealthCheck, _super);
    function HTTPSHealthCheck() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "host" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "host", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "port" }),
        __metadata("design:type", Number)
    ], HTTPSHealthCheck.prototype, "port", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portName" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "portName", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "portSpecification" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "portSpecification", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "proxyHeader" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "proxyHeader", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "requestPath" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "requestPath", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "response" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "response", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "weightReportMode" }),
        __metadata("design:type", String)
    ], HTTPSHealthCheck.prototype, "weightReportMode", void 0);
    return HTTPSHealthCheck;
}(utils_1.SpeakeasyBase));
exports.HTTPSHealthCheck = HTTPSHealthCheck;
