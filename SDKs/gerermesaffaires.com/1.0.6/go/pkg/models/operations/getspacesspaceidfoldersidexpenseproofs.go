// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetSpacesSpaceIDFoldersIDExpenseProofsPathParams struct {
	// Id of the folder
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum - Status of the expense proof
type GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum string

const (
	GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnumR GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum = "R"
	GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnumW GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum = "W"
	GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnumV GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum = "V"
)

func (e *GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "R":
		fallthrough
	case "W":
		fallthrough
	case "V":
		*e = GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum: %s", s)
	}
}

type GetSpacesSpaceIDFoldersIDExpenseProofsQueryParams struct {
	// date range of the documents
	Date *string `queryParam:"style=form,explode=true,name=Date"`
	// date range of attachment
	FolderDate *string `queryParam:"style=form,explode=true,name=FolderDate"`
	// To return expense proofs not attached to an expense report
	NoExpenseReport *bool `queryParam:"style=form,explode=true,name=NoExpenseReport"`
	// index range of the results
	Range *string `queryParam:"style=form,explode=true,name=Range"`
	// Status of the expense proof
	Status *GetSpacesSpaceIDFoldersIDExpenseProofsStatusEnum `queryParam:"style=form,explode=true,name=Status"`
}

type GetSpacesSpaceIDFoldersIDExpenseProofsRequest struct {
	PathParams  GetSpacesSpaceIDFoldersIDExpenseProofsPathParams
	QueryParams GetSpacesSpaceIDFoldersIDExpenseProofsQueryParams
}

type GetSpacesSpaceIDFoldersIDExpenseProofsResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// A list of expense proof of the folder (if the folder is social the PersonId is also returned)
	GetSpacesSpaceIDFoldersIDExpenseProofs200ApplicationJSONAllOfs []shared.ExpenseProof
}
