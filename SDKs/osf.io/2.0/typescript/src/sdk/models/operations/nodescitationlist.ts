/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";

export class NodesCitationListRequest extends SpeakeasyBase {
  /**
   * The unique identifier of the node.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=node_id",
  })
  nodeId: string;
}

/**
 * The properties of the citation entity.
 */
export class NodesCitationListCitationDetailAttributes extends SpeakeasyBase {
  /**
   * The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited.
   */
  @SpeakeasyMetadata()
  author?: string;

  /**
   * The DOI for the entity being cited, if one exists.
   */
  @SpeakeasyMetadata()
  doi?: string;

  /**
   * The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider.
   */
  @SpeakeasyMetadata()
  publisher?: string;

  /**
   * The title of the entity being cited.
   */
  @SpeakeasyMetadata()
  title?: string;
}

/**
 * URLs to alternative representations of the citation entity.
 */
export class NodesCitationListCitationDetailLinks extends SpeakeasyBase {
  /**
   * A link to the entity that is being cited.
   */
  @SpeakeasyMetadata()
  self?: string;
}

/**
 * OK
 */
export class NodesCitationListCitationDetail extends SpeakeasyBase {
  /**
   * The properties of the citation entity.
   */
  @SpeakeasyMetadata()
  attributes?: NodesCitationListCitationDetailAttributes;

  /**
   * The identifier of the entity being cited.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * URLs to alternative representations of the citation entity.
   */
  @SpeakeasyMetadata()
  links?: NodesCitationListCitationDetailLinks;

  /**
   * The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`).
   */
  @SpeakeasyMetadata()
  type?: string;
}

export class NodesCitationListResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
