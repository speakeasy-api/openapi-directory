/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Pages } from "./pages";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://vtex.local",
  "https://{account}.myvtex.com",
  "https://{workspace}--{account}.myvtex.com",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosInstance;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
};

/**
 *
 * @remarks
 * The VTEX Headless CMS is a no-code management system for storefront content.
 * That means you can store your content as structured data in a layer decoupled from the frontend and
 * use the VTEX Headless CMS to access and deliver your content to your storefront project.
 *
 * Notice that the VTEX Headless CMS typically works with **FastStore** projects only. In this case, you can use this API
 * to fetch data using SSR (NextJS and Gatsby v4+) or SSG (NextJS).
 *
 * **Servers**
 * - `https://{account}.myvtex.com/`
 * - `https://{workspace}--{account}.myvtex.com/`
 *
 * **Server variables**
 * - `accountName`: Name of your VTEX account.
 * - `workspace`: Name of your VTEX workspace.
 *
 */
export class SDK {
  public pages: Pages;

  public _defaultClient: AxiosInstance;
  public _securityClient: AxiosInstance;
  public _serverURL: string;
  private _language = "typescript";
  private _sdkVersion = "0.0.1";
  private _genVersion = "internal";
  private _globals: any;

  constructor(props?: SDKProps) {
    this._serverURL = props?.serverURL ?? ServerList[0];

    this._defaultClient =
      props?.defaultClient ?? axios.create({ baseURL: this._serverURL });
    this._securityClient = this._defaultClient;

    this.pages = new Pages(
      this._defaultClient,
      this._securityClient,
      this._serverURL,
      this._language,
      this._sdkVersion,
      this._genVersion
    );
  }
}
