// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type InferredWorkloadTypeEnum string

const (
	InferredWorkloadTypeEnumAmazonEmr       InferredWorkloadTypeEnum = "AmazonEmr"
	InferredWorkloadTypeEnumApacheCassandra InferredWorkloadTypeEnum = "ApacheCassandra"
	InferredWorkloadTypeEnumApacheHadoop    InferredWorkloadTypeEnum = "ApacheHadoop"
	InferredWorkloadTypeEnumMemcached       InferredWorkloadTypeEnum = "Memcached"
	InferredWorkloadTypeEnumNginx           InferredWorkloadTypeEnum = "Nginx"
	InferredWorkloadTypeEnumPostgreSQL      InferredWorkloadTypeEnum = "PostgreSql"
	InferredWorkloadTypeEnumRedis           InferredWorkloadTypeEnum = "Redis"
	InferredWorkloadTypeEnumKafka           InferredWorkloadTypeEnum = "Kafka"
)

func (e InferredWorkloadTypeEnum) ToPointer() *InferredWorkloadTypeEnum {
	return &e
}

func (e *InferredWorkloadTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AmazonEmr":
		fallthrough
	case "ApacheCassandra":
		fallthrough
	case "ApacheHadoop":
		fallthrough
	case "Memcached":
		fallthrough
	case "Nginx":
		fallthrough
	case "PostgreSql":
		fallthrough
	case "Redis":
		fallthrough
	case "Kafka":
		*e = InferredWorkloadTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InferredWorkloadTypeEnum: %v", v)
	}
}
