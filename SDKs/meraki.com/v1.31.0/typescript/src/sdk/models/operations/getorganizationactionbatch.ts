/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetOrganizationActionBatchRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=actionBatchId",
  })
  actionBatchId: string;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=organizationId",
  })
  organizationId: string;
}

export class GetOrganizationActionBatch200ApplicationJSONActions extends SpeakeasyBase {
  /**
   * The operation to be used by this action
   */
  @SpeakeasyMetadata()
  @Expose({ name: "operation" })
  operation: string;

  /**
   * Unique identifier for the resource to be acted on
   */
  @SpeakeasyMetadata()
  @Expose({ name: "resource" })
  resource: string;
}

export class GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources extends SpeakeasyBase {
  /**
   * ID of the created resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * URI, not including base, of the created resource
   */
  @SpeakeasyMetadata()
  @Expose({ name: "uri" })
  uri?: string;
}

/**
 * Status of action batch
 */
export class GetOrganizationActionBatch200ApplicationJSONStatus extends SpeakeasyBase {
  /**
   * Flag describing whether all actions in the action batch have completed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "completed" })
  completed?: boolean;

  /**
   * Resources created as a result of this action batch
   */
  @SpeakeasyMetadata({
    elemType:
      GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources,
  })
  @Expose({ name: "createdResources" })
  @Type(
    () => GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources
  )
  createdResources: GetOrganizationActionBatch200ApplicationJSONStatusCreatedResources[];

  /**
   * List of errors encountered when running actions in the action batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "errors" })
  errors?: string[];

  /**
   * Flag describing whether any actions in the action batch failed
   */
  @SpeakeasyMetadata()
  @Expose({ name: "failed" })
  failed?: boolean;
}

/**
 * Successful operation
 */
export class GetOrganizationActionBatch200ApplicationJSON extends SpeakeasyBase {
  /**
   * A set of changes made as part of this action (<a href='https://developer.cisco.com/meraki/api/#/rest/guides/action-batches/'>more details</a>)
   */
  @SpeakeasyMetadata({
    elemType: GetOrganizationActionBatch200ApplicationJSONActions,
  })
  @Expose({ name: "actions" })
  @Type(() => GetOrganizationActionBatch200ApplicationJSONActions)
  actions: GetOrganizationActionBatch200ApplicationJSONActions[];

  /**
   * Flag describing whether the action should be previewed before executing or not
   */
  @SpeakeasyMetadata()
  @Expose({ name: "confirmed" })
  confirmed?: boolean;

  /**
   * ID of the action batch. Can be used to check the status of the action batch at /organizations/{organizationId}/actionBatches/{actionBatchId}
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * ID of the organization this action batch belongs to
   */
  @SpeakeasyMetadata()
  @Expose({ name: "organizationId" })
  organizationId?: string;

  /**
   * Status of action batch
   */
  @SpeakeasyMetadata()
  @Expose({ name: "status" })
  @Type(() => GetOrganizationActionBatch200ApplicationJSONStatus)
  status?: GetOrganizationActionBatch200ApplicationJSONStatus;

  /**
   * Flag describing whether actions should run synchronously or asynchronously
   */
  @SpeakeasyMetadata()
  @Expose({ name: "synchronous" })
  synchronous?: boolean;
}

export class GetOrganizationActionBatchResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  getOrganizationActionBatch200ApplicationJSONObject?: GetOrganizationActionBatch200ApplicationJSON;
}
