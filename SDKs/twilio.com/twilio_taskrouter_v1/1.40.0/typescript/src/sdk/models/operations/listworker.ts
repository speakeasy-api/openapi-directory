/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";
export const ListWorkerServerList = ["https://taskrouter.twilio.com"] as const;

export class ListWorkerSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=password",
  })
  password: string;

  @SpeakeasyMetadata({
    data: "security, scheme=true;type=http;subtype=basic;name=username",
  })
  username: string;
}

export class ListWorkerRequest extends SpeakeasyBase {
  /**
   * The `activity_name` of the Worker resources to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ActivityName",
  })
  activityName?: string;

  /**
   * The `activity_sid` of the Worker resources to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=ActivitySid",
  })
  activitySid?: string;

  /**
   * Whether to return only Worker resources that are available or unavailable. Can be `true`, `1`, or `yes` to return Worker resources that are available, and `false`, or any value returns the Worker resources that are not available.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Available",
  })
  available?: string;

  /**
   * The `friendly_name` of the Worker resources to read.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=FriendlyName",
  })
  friendlyName?: string;

  /**
   * Sorting parameter for Workers
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=Ordering",
  })
  ordering?: string;

  /**
   * The page index. This value is simply for client state.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=Page" })
  page?: number;

  /**
   * How many resources to return in each list page. The default is 50, and the maximum is 1000.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageSize",
  })
  pageSize?: number;

  /**
   * The page token. This is provided by the API.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=PageToken",
  })
  pageToken?: string;

  /**
   * Filter by Workers that would match an expression on a TaskQueue. This is helpful for debugging which Workers would match a potential queue.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TargetWorkersExpression",
  })
  targetWorkersExpression?: string;

  /**
   * The `friendly_name` of the TaskQueue that the Workers to read are eligible for.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskQueueName",
  })
  taskQueueName?: string;

  /**
   * The SID of the TaskQueue that the Workers to read are eligible for.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=TaskQueueSid",
  })
  taskQueueSid?: string;

  /**
   * The SID of the Workspace with the Workers to read.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=WorkspaceSid",
  })
  workspaceSid: string;
}

export class ListWorkerListWorkerResponseMeta extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "first_page_url" })
  firstPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "key" })
  key?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "next_page_url" })
  nextPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "page" })
  page?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "page_size" })
  pageSize?: number;

  @SpeakeasyMetadata()
  @Expose({ name: "previous_page_url" })
  previousPageUrl?: string;

  @SpeakeasyMetadata()
  @Expose({ name: "url" })
  url?: string;
}

/**
 * OK
 */
export class ListWorkerListWorkerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  @Expose({ name: "meta" })
  @Type(() => ListWorkerListWorkerResponseMeta)
  meta?: ListWorkerListWorkerResponseMeta;

  @SpeakeasyMetadata({ elemType: shared.TaskrouterV1WorkspaceWorker })
  @Expose({ name: "workers" })
  @Type(() => shared.TaskrouterV1WorkspaceWorker)
  workers?: shared.TaskrouterV1WorkspaceWorker[];
}

export class ListWorkerResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * OK
   */
  @SpeakeasyMetadata()
  listWorkerResponse?: ListWorkerListWorkerResponse;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
