// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// AccountPermissionLevelEnum - Output only. Specifies the permission level the user has for this account.
type AccountPermissionLevelEnum string

const (
	AccountPermissionLevelEnumPermissionLevelUnspecified AccountPermissionLevelEnum = "PERMISSION_LEVEL_UNSPECIFIED"
	AccountPermissionLevelEnumOwnerLevel                 AccountPermissionLevelEnum = "OWNER_LEVEL"
	AccountPermissionLevelEnumMemberLevel                AccountPermissionLevelEnum = "MEMBER_LEVEL"
)

func (e AccountPermissionLevelEnum) ToPointer() *AccountPermissionLevelEnum {
	return &e
}

func (e *AccountPermissionLevelEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PERMISSION_LEVEL_UNSPECIFIED":
		fallthrough
	case "OWNER_LEVEL":
		fallthrough
	case "MEMBER_LEVEL":
		*e = AccountPermissionLevelEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountPermissionLevelEnum: %v", v)
	}
}

// AccountRoleEnum - Output only. Specifies the AccountRole of this account.
type AccountRoleEnum string

const (
	AccountRoleEnumAccountRoleUnspecified AccountRoleEnum = "ACCOUNT_ROLE_UNSPECIFIED"
	AccountRoleEnumPrimaryOwner           AccountRoleEnum = "PRIMARY_OWNER"
	AccountRoleEnumOwner                  AccountRoleEnum = "OWNER"
	AccountRoleEnumManager                AccountRoleEnum = "MANAGER"
	AccountRoleEnumSiteManager            AccountRoleEnum = "SITE_MANAGER"
)

func (e AccountRoleEnum) ToPointer() *AccountRoleEnum {
	return &e
}

func (e *AccountRoleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT_ROLE_UNSPECIFIED":
		fallthrough
	case "PRIMARY_OWNER":
		fallthrough
	case "OWNER":
		fallthrough
	case "MANAGER":
		fallthrough
	case "SITE_MANAGER":
		*e = AccountRoleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountRoleEnum: %v", v)
	}
}

// AccountTypeEnum - Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
type AccountTypeEnum string

const (
	AccountTypeEnumAccountTypeUnspecified AccountTypeEnum = "ACCOUNT_TYPE_UNSPECIFIED"
	AccountTypeEnumPersonal               AccountTypeEnum = "PERSONAL"
	AccountTypeEnumLocationGroup          AccountTypeEnum = "LOCATION_GROUP"
	AccountTypeEnumUserGroup              AccountTypeEnum = "USER_GROUP"
	AccountTypeEnumOrganization           AccountTypeEnum = "ORGANIZATION"
)

func (e AccountTypeEnum) ToPointer() *AccountTypeEnum {
	return &e
}

func (e *AccountTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACCOUNT_TYPE_UNSPECIFIED":
		fallthrough
	case "PERSONAL":
		fallthrough
	case "LOCATION_GROUP":
		fallthrough
	case "USER_GROUP":
		fallthrough
	case "ORGANIZATION":
		*e = AccountTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountTypeEnum: %v", v)
	}
}

// AccountVerificationStateEnum - Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
type AccountVerificationStateEnum string

const (
	AccountVerificationStateEnumVerificationStateUnspecified AccountVerificationStateEnum = "VERIFICATION_STATE_UNSPECIFIED"
	AccountVerificationStateEnumVerified                     AccountVerificationStateEnum = "VERIFIED"
	AccountVerificationStateEnumUnverified                   AccountVerificationStateEnum = "UNVERIFIED"
	AccountVerificationStateEnumVerificationRequested        AccountVerificationStateEnum = "VERIFICATION_REQUESTED"
)

func (e AccountVerificationStateEnum) ToPointer() *AccountVerificationStateEnum {
	return &e
}

func (e *AccountVerificationStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VERIFICATION_STATE_UNSPECIFIED":
		fallthrough
	case "VERIFIED":
		fallthrough
	case "UNVERIFIED":
		fallthrough
	case "VERIFICATION_REQUESTED":
		*e = AccountVerificationStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountVerificationStateEnum: %v", v)
	}
}

// AccountVettedStateEnum - Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
type AccountVettedStateEnum string

const (
	AccountVettedStateEnumVettedStateUnspecified AccountVettedStateEnum = "VETTED_STATE_UNSPECIFIED"
	AccountVettedStateEnumNotVetted              AccountVettedStateEnum = "NOT_VETTED"
	AccountVettedStateEnumVetted                 AccountVettedStateEnum = "VETTED"
	AccountVettedStateEnumInvalid                AccountVettedStateEnum = "INVALID"
)

func (e AccountVettedStateEnum) ToPointer() *AccountVettedStateEnum {
	return &e
}

func (e *AccountVettedStateEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "VETTED_STATE_UNSPECIFIED":
		fallthrough
	case "NOT_VETTED":
		fallthrough
	case "VETTED":
		fallthrough
	case "INVALID":
		*e = AccountVettedStateEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AccountVettedStateEnum: %v", v)
	}
}

// Account - An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
type Account struct {
	// Required. The name of the account. For an account of type `PERSONAL`, this is the first and last name of the user account.
	AccountName *string `json:"accountName,omitempty"`
	// Output only. Account reference number if provisioned.
	AccountNumber *string `json:"accountNumber,omitempty"`
	// Immutable. The resource name, in the format `accounts/{account_id}`.
	Name *string `json:"name,omitempty"`
	// Additional information stored for an organization.
	OrganizationInfo *OrganizationInfo `json:"organizationInfo,omitempty"`
	// Output only. Specifies the permission level the user has for this account.
	PermissionLevel *AccountPermissionLevelEnum `json:"permissionLevel,omitempty"`
	// Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}`.
	PrimaryOwner *string `json:"primaryOwner,omitempty"`
	// Output only. Specifies the AccountRole of this account.
	Role *AccountRoleEnum `json:"role,omitempty"`
	// Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
	Type *AccountTypeEnum `json:"type,omitempty"`
	// Output only. If verified, future locations that are created are automatically connected to Google Maps, and have Google+ pages created, without requiring moderation.
	VerificationState *AccountVerificationStateEnum `json:"verificationState,omitempty"`
	// Output only. Indicates whether the account is vetted by Google. A vetted account is able to verify locations via the VETTED_PARTNER method.
	VettedState *AccountVettedStateEnum `json:"vettedState,omitempty"`
}

// AccountInput - An account is a container for your location. If you are the only user who manages locations for your business, you can use your personal Google Account. To share management of locations with multiple users, [create a business account] (https://support.google.com/business/answer/6085339?ref_topic=6085325).
type AccountInput struct {
	// Required. The name of the account. For an account of type `PERSONAL`, this is the first and last name of the user account.
	AccountName *string `json:"accountName,omitempty"`
	// Immutable. The resource name, in the format `accounts/{account_id}`.
	Name *string `json:"name,omitempty"`
	// Additional information stored for an organization.
	OrganizationInfo *OrganizationInfoInput `json:"organizationInfo,omitempty"`
	// Required. Input only. The resource name of the account which will be the primary owner of the account being created. It should be of the form `accounts/{account_id}`.
	PrimaryOwner *string `json:"primaryOwner,omitempty"`
	// Required. Contains the type of account. Accounts of type PERSONAL and ORGANIZATION cannot be created using this API.
	Type *AccountTypeEnum `json:"type,omitempty"`
}
