// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type ListSipPhonesSecurity struct {
	OAuth shared.SchemeOAuth `security:"scheme,type=oauth2"`
}

type ListSipPhonesQueryParams struct {
	// The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
	NextPageToken *string `queryParam:"style=form,explode=true,name=next_page_token"`
	// **Deprecated** - This field has been deprecated and we will stop supporting it completely in a future release. Please use "next_page_token" for pagination instead of this field.
	//
	// The page number of the current page in the returned records.
	PageNumber *int64 `queryParam:"style=form,explode=true,name=page_number"`
	// The number of records returned within a single API call.
	PageSize *int64 `queryParam:"style=form,explode=true,name=page_size"`
	// User name or email address of a user. If this parameter is provided, only the SIP phone system integration enabled for that specific user will be returned. Otherwise, all SIP phones on an account will be returned.
	SearchKey *string `queryParam:"style=form,explode=true,name=search_key"`
}

type ListSipPhonesRequest struct {
	QueryParams ListSipPhonesQueryParams
	Security    ListSipPhonesSecurity
}

// ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum string

const (
	ListSipPhones200ApplicationXMLPhonesTransportProtocolEnumUDP  ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum = "UDP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocolEnumTCP  ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum = "TCP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocolEnumTLS  ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum = "TLS"
	ListSipPhones200ApplicationXMLPhonesTransportProtocolEnumAuto ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum = "AUTO"
)

func (e *ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum: %s", s)
	}
}

// ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum string

const (
	ListSipPhones200ApplicationXMLPhonesTransportProtocol2EnumUDP  ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum = "UDP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol2EnumTCP  ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum = "TCP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol2EnumTLS  ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum = "TLS"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol2EnumAuto ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum = "AUTO"
)

func (e *ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum: %s", s)
	}
}

// ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum string

const (
	ListSipPhones200ApplicationXMLPhonesTransportProtocol3EnumUDP  ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum = "UDP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol3EnumTCP  ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum = "TCP"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol3EnumTLS  ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum = "TLS"
	ListSipPhones200ApplicationXMLPhonesTransportProtocol3EnumAuto ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum = "AUTO"
)

func (e *ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum: %s", s)
	}
}

type ListSipPhones200ApplicationXMLPhones struct {
	// Authorization name of the user  registered for SIP Phone.
	AuthorizationName *string
	// The name or IP address of your providerâ€™s SIP domain. (example: CDC.WEB).
	//
	Domain *string
	// Unique Identifier of the SIP Phone.
	ID *string
	// The password generated for the user in the SIP account.
	//
	Password *string
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer *string
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer2 *string
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer3 *string
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer *string
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer2 *string
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer3 *string
	// The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
	RegistrationExpireTime *int64
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol *ListSipPhones200ApplicationXMLPhonesTransportProtocolEnum
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol2 *ListSipPhones200ApplicationXMLPhonesTransportProtocol2Enum
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol3 *ListSipPhones200ApplicationXMLPhonesTransportProtocol3Enum
	// The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user.
	UserEmail *string
	// The phone number associated with the user in the SIP account.
	UserName *string
	// The number to dial for checking voicemail.
	VoiceMail *string
}

// ListSipPhones200ApplicationXML - **HTTP Status Code:** `200`<br>
// SIP Phones listed successfully.
//
// **Error Code:** `200`<br>
// Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
type ListSipPhones200ApplicationXML struct {
	NextPageToken *string
	// The number of pages returned for the request made.
	PageCount *int64
	// The page number of the current results.
	PageNumber *int64
	// The number of records returned within a single API call.
	PageSize *int64
	// SIP phones object.
	Phones []ListSipPhones200ApplicationXMLPhones
	// The total number of all the records available across pages.
	TotalRecords *int64
}

// ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum string

const (
	ListSipPhones200ApplicationJSONPhonesTransportProtocolEnumUDP  ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum = "UDP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocolEnumTCP  ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum = "TCP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocolEnumTLS  ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum = "TLS"
	ListSipPhones200ApplicationJSONPhonesTransportProtocolEnumAuto ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum = "AUTO"
)

func (e *ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum: %s", s)
	}
}

// ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum string

const (
	ListSipPhones200ApplicationJSONPhonesTransportProtocol2EnumUDP  ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum = "UDP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol2EnumTCP  ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum = "TCP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol2EnumTLS  ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum = "TLS"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol2EnumAuto ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum = "AUTO"
)

func (e *ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum: %s", s)
	}
}

// ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum - Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
type ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum string

const (
	ListSipPhones200ApplicationJSONPhonesTransportProtocol3EnumUDP  ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum = "UDP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol3EnumTCP  ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum = "TCP"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol3EnumTLS  ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum = "TLS"
	ListSipPhones200ApplicationJSONPhonesTransportProtocol3EnumAuto ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum = "AUTO"
)

func (e *ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "UDP":
		fallthrough
	case "TCP":
		fallthrough
	case "TLS":
		fallthrough
	case "AUTO":
		*e = ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum: %s", s)
	}
}

type ListSipPhones200ApplicationJSONPhones struct {
	// Authorization name of the user  registered for SIP Phone.
	AuthorizationName *string `json:"authorization_name,omitempty"`
	// The name or IP address of your providerâ€™s SIP domain. (example: CDC.WEB).
	//
	Domain *string `json:"domain,omitempty"`
	// Unique Identifier of the SIP Phone.
	ID *string `json:"id,omitempty"`
	// The password generated for the user in the SIP account.
	//
	Password *string `json:"password,omitempty"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer *string `json:"proxy_server,omitempty"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer2 *string `json:"proxy_server2,omitempty"`
	// IP address of the proxy server for SIP requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address. If you are not using a proxy server, this value can be the same as the Register Server, or empty.
	ProxyServer3 *string `json:"proxy_server3,omitempty"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer *string `json:"register_server,omitempty"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer2 *string `json:"register_server2,omitempty"`
	// IP address of the server that accepts REGISTER requests. Note that if you are using the UDP transport protocol, the default port is 5060. If you are using UDP with a different port number, that port number must be included with the IP address.
	RegisterServer3 *string `json:"register_server3,omitempty"`
	// The number of minutes after which the SIP registration of the Zoom client user will expire, and the client will auto register to the SIP server.
	RegistrationExpireTime *int64 `json:"registration_expire_time,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol *ListSipPhones200ApplicationJSONPhonesTransportProtocolEnum `json:"transport_protocol,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol2 *ListSipPhones200ApplicationJSONPhonesTransportProtocol2Enum `json:"transport_protocol2,omitempty"`
	// Protocols supported by the SIP provider.<br> The value must be either `UDP`, `TCP`, `TLS`, `AUTO`.
	TransportProtocol3 *ListSipPhones200ApplicationJSONPhonesTransportProtocol3Enum `json:"transport_protocol3,omitempty"`
	// The email address of the user to associate with the SIP Phone. Can add [.win, .mac, .android, .ipad, .iphone, .linux, .pc, .mobile, .pad] at the end of the email (ex. user@test.com.mac) to add accounts for different platforms for the same user.
	UserEmail *string `json:"user_email,omitempty"`
	// The phone number associated with the user in the SIP account.
	UserName *string `json:"user_name,omitempty"`
	// The number to dial for checking voicemail.
	VoiceMail *string `json:"voice_mail,omitempty"`
}

// ListSipPhones200ApplicationJSON - **HTTP Status Code:** `200`<br>
// SIP Phones listed successfully.
//
// **Error Code:** `200`<br>
// Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
type ListSipPhones200ApplicationJSON struct {
	NextPageToken *string `json:"next_page_token,omitempty"`
	// The number of pages returned for the request made.
	PageCount *int64 `json:"page_count,omitempty"`
	// The page number of the current results.
	PageNumber *int64 `json:"page_number,omitempty"`
	// The number of records returned within a single API call.
	PageSize *int64 `json:"page_size,omitempty"`
	// SIP phones object.
	Phones []ListSipPhones200ApplicationJSONPhones `json:"phones,omitempty"`
	// The total number of all the records available across pages.
	TotalRecords *int64 `json:"total_records,omitempty"`
}

type ListSipPhonesResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// **HTTP Status Code:** `200`<br>
	// SIP Phones listed successfully.
	//
	// **Error Code:** `200`<br>
	// Permission missing: Enable SIP Phone Integration by contacting a Zoom Admin first.
	ListSipPhones200ApplicationJSONObject *ListSipPhones200ApplicationJSON
}
