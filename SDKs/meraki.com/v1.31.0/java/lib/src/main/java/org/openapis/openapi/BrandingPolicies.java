/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

public class BrandingPolicies {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public BrandingPolicies(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Add a new branding policy to an organization
     * Add a new branding policy to an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicyResponse createOrganizationBrandingPolicy(org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicyRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicyResponse res = new org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicyResponse() {{
            createOrganizationBrandingPolicy201ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicy201ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CreateOrganizationBrandingPolicy201ApplicationJSON.class);
                res.createOrganizationBrandingPolicy201ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Delete a branding policy
     * Delete a branding policy
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeleteOrganizationBrandingPolicyResponse deleteOrganizationBrandingPolicy(org.openapis.openapi.models.operations.DeleteOrganizationBrandingPolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeleteOrganizationBrandingPolicyRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.DeleteOrganizationBrandingPolicyResponse res = new org.openapis.openapi.models.operations.DeleteOrganizationBrandingPolicyResponse() {{
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    /**
     * List the branding policies of an organization
     * List the branding policies of an organization
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesResponse getOrganizationBrandingPolicies(org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesResponse res = new org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesResponse() {{
            getOrganizationBrandingPolicies200ApplicationJSONObjects = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationBrandingPolicies200ApplicationJSON[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationBrandingPolicies200ApplicationJSON[].class);
                res.getOrganizationBrandingPolicies200ApplicationJSONObjects = out;
            }
        }

        return res;
    }

    /**
     * Return the branding policy IDs of an organization in priority order
     * Return the branding policy IDs of an organization in priority order. IDs are ordered in ascending order of priority (IDs later in the array have higher priority).
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPrioritiesResponse getOrganizationBrandingPoliciesPriorities(org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPrioritiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPrioritiesRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies/priorities", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPrioritiesResponse res = new org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPrioritiesResponse() {{
            getOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPriorities200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationBrandingPoliciesPriorities200ApplicationJSON.class);
                res.getOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Return a branding policy
     * Return a branding policy
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetOrganizationBrandingPolicyResponse getOrganizationBrandingPolicy(org.openapis.openapi.models.operations.GetOrganizationBrandingPolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetOrganizationBrandingPolicyRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.GetOrganizationBrandingPolicyResponse res = new org.openapis.openapi.models.operations.GetOrganizationBrandingPolicyResponse() {{
            getOrganizationBrandingPolicy200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.GetOrganizationBrandingPolicy200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.GetOrganizationBrandingPolicy200ApplicationJSON.class);
                res.getOrganizationBrandingPolicy200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update the priority ordering of an organization's branding policies.
     * Update the priority ordering of an organization's branding policies.
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPrioritiesResponse updateOrganizationBrandingPoliciesPriorities(org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPrioritiesRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPrioritiesRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies/priorities", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPrioritiesResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPrioritiesResponse() {{
            updateOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPriorities200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateOrganizationBrandingPoliciesPriorities200ApplicationJSON.class);
                res.updateOrganizationBrandingPoliciesPriorities200ApplicationJSONObject = out;
            }
        }

        return res;
    }

    /**
     * Update a branding policy
     * Update a branding policy
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicyResponse updateOrganizationBrandingPolicy(org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicyRequest request) throws Exception {
        String baseUrl = this._serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicyRequest.class, baseUrl, "/organizations/{organizationId}/brandingPolicies/{brandingPolicyId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        
        HTTPClient client = this._securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicyResponse res = new org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicyResponse() {{
            updateOrganizationBrandingPolicy200ApplicationJSONObject = null;
        }};
        res.statusCode = httpRes.statusCode();
        res.contentType = contentType;
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicy200ApplicationJSON out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.UpdateOrganizationBrandingPolicy200ApplicationJSON.class);
                res.updateOrganizationBrandingPolicy200ApplicationJSONObject = out;
            }
        }

        return res;
    }
}