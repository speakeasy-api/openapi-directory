/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.SpeakeasyMetadata;

public class GETPaymentRunsQueryParams {
    /**
     * This parameter filters the response based on the `createdById` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=createdById")
    public String createdById;
    public GETPaymentRunsQueryParams withCreatedById(String createdById) {
        this.createdById = createdById;
        return this;
    }
    
    /**
     * This parameter filters the response based on the `createdDate` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=createdDate")
    public OffsetDateTime createdDate;
    public GETPaymentRunsQueryParams withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Number of rows returned per page.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pageSize")
    public Long pageSize;
    public GETPaymentRunsQueryParams withPageSize(Long pageSize) {
        this.pageSize = pageSize;
        return this;
    }
    
    /**
     * This parameter restricts the order of the data returned in the response. You can use this parameter to supply a dimension you want to sort on.
     * 
     * A sortable field uses the following form: 
     * 
     * *operator* *field_name*
     * 
     * You can use at most two sortable fields in one URL path. Use a comma to separate sortable fields. For example:  *operator* *field_name*, *operator* *field_name*  
     * 
     * *operator* is used to mark the order of sequencing. The operator is optional. If you only specify the sortable field without any operator, the response data is sorted in descending order by this field.
     * 
     *   - The `-` operator indicates an ascending order.
     *   - The `+` operator indicates a descending order.
     * 
     * By default, the response data is displayed in descending order by payment run number.
     * 
     * *field_name* indicates the name of a sortable field. The supported sortable fields of this operation are as below:
     * 
     *   - targetDate
     *   - status
     *   - createdDate
     *   - createdById
     *   - updatedDate
     *   - updatedById
     * 
     * Examples:
     * 
     * - /v1/payment-runs?sort=+createdDate
     * 
     * - /v1/payment-runs?status=Processing&amp;sort=-createdById,+targetDate
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public GETPaymentRunsQueryParams withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * This parameter filters the response based on the `status` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")
    public GETPaymentRunsStatusEnum status;
    public GETPaymentRunsQueryParams withStatus(GETPaymentRunsStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * This parameter filters the response based on the `targetDate` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=targetDate")
    public LocalDate targetDate;
    public GETPaymentRunsQueryParams withTargetDate(LocalDate targetDate) {
        this.targetDate = targetDate;
        return this;
    }
    
    /**
     * This parameter filters the response based on the `updatedById` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updatedById")
    public String updatedById;
    public GETPaymentRunsQueryParams withUpdatedById(String updatedById) {
        this.updatedById = updatedById;
        return this;
    }
    
    /**
     * This parameter filters the response based on the `updatedDate` field.
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updatedDate")
    public OffsetDateTime updatedDate;
    public GETPaymentRunsQueryParams withUpdatedDate(OffsetDateTime updatedDate) {
        this.updatedDate = updatedDate;
        return this;
    }
    
}
