// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum - Default permission level members have for organization repositories:
// \* `read` - can pull, but not push to or administer this repository.
// \* `write` - can pull and push, but not administer this repository.
// \* `admin` - can pull, push, and administer this repository.
// \* `none` - no permissions granted by default.
type OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum string

const (
	OrgsUpdateRequestBodyDefaultRepositoryPermissionEnumRead  OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum = "read"
	OrgsUpdateRequestBodyDefaultRepositoryPermissionEnumWrite OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum = "write"
	OrgsUpdateRequestBodyDefaultRepositoryPermissionEnumAdmin OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum = "admin"
	OrgsUpdateRequestBodyDefaultRepositoryPermissionEnumNone  OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum = "none"
)

func (e *OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "read":
		fallthrough
	case "write":
		fallthrough
	case "admin":
		fallthrough
	case "none":
		*e = OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum: %s", s)
	}
}

// OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum - Specifies which types of repositories non-admin organization members can create. Can be one of:
// \* `all` - all organization members can create public and private repositories.
// \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
// \* `none` - only admin members can create repositories.
// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
type OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum string

const (
	OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnumAll     OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum = "all"
	OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnumPrivate OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum = "private"
	OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnumNone    OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum = "none"
)

func (e *OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "all":
		fallthrough
	case "private":
		fallthrough
	case "none":
		*e = OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum: %s", s)
	}
}

type OrgsUpdateRequestBody struct {
	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`
	Blog         *string `json:"blog,omitempty"`
	// The company name.
	Company *string `json:"company,omitempty"`
	// Default permission level members have for organization repositories:
	// \* `read` - can pull, but not push to or administer this repository.
	// \* `write` - can pull and push, but not administer this repository.
	// \* `admin` - can pull, push, and administer this repository.
	// \* `none` - no permissions granted by default.
	DefaultRepositoryPermission *OrgsUpdateRequestBodyDefaultRepositoryPermissionEnum `json:"default_repository_permission,omitempty"`
	// The description of the company.
	Description *string `json:"description,omitempty"`
	// The publicly visible email address.
	Email *string `json:"email,omitempty"`
	// Toggles whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`
	// Toggles whether repositories that belong to the organization can use repository projects.
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`
	// The location.
	Location *string `json:"location,omitempty"`
	// Specifies which types of repositories non-admin organization members can create. Can be one of:
	// \* `all` - all organization members can create public and private repositories.
	// \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
	// \* `none` - only admin members can create repositories.
	// **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
	MembersAllowedRepositoryCreationType *OrgsUpdateRequestBodyMembersAllowedRepositoryCreationTypeEnum `json:"members_allowed_repository_creation_type,omitempty"`
	// Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
	// \* `true` - all organization members can create internal repositories.
	// \* `false` - only organization owners can create internal repositories.
	// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`
	// Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
	// \* `true` - all organization members can create private repositories.
	// \* `false` - only organization owners can create private repositories.
	// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`
	// Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
	// \* `true` - all organization members can create public repositories.
	// \* `false` - only organization owners can create public repositories.
	// Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`
	// Toggles the ability of non-admin organization members to create repositories. Can be one of:
	// \* `true` - all organization members can create repositories.
	// \* `false` - only organization owners can create repositories.
	// Default: `true`
	// **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`
	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`
	// The Twitter username of the company.
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

type OrgsUpdateRequest struct {
	RequestBody *OrgsUpdateRequestBody `request:"mediaType=application/json"`
	Org         string                 `pathParam:"style=simple,explode=false,name=org"`
}

type OrgsUpdate422ApplicationJSONType string

const (
	OrgsUpdate422ApplicationJSONTypeValidationError       OrgsUpdate422ApplicationJSONType = "validation-error"
	OrgsUpdate422ApplicationJSONTypeValidationErrorSimple OrgsUpdate422ApplicationJSONType = "validation-error-simple"
)

type OrgsUpdate422ApplicationJSON struct {
	ValidationError       *shared.ValidationError
	ValidationErrorSimple *shared.ValidationErrorSimple

	Type OrgsUpdate422ApplicationJSONType
}

func CreateOrgsUpdate422ApplicationJSONValidationError(validationError shared.ValidationError) OrgsUpdate422ApplicationJSON {
	typ := OrgsUpdate422ApplicationJSONTypeValidationError

	return OrgsUpdate422ApplicationJSON{
		ValidationError: &validationError,
		Type:            typ,
	}
}

func CreateOrgsUpdate422ApplicationJSONValidationErrorSimple(validationErrorSimple shared.ValidationErrorSimple) OrgsUpdate422ApplicationJSON {
	typ := OrgsUpdate422ApplicationJSONTypeValidationErrorSimple

	return OrgsUpdate422ApplicationJSON{
		ValidationErrorSimple: &validationErrorSimple,
		Type:                  typ,
	}
}

func (u *OrgsUpdate422ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	validationError := new(shared.ValidationError)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&validationError); err == nil {
		u.ValidationError = validationError
		u.Type = OrgsUpdate422ApplicationJSONTypeValidationError
		return nil
	}

	validationErrorSimple := new(shared.ValidationErrorSimple)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&validationErrorSimple); err == nil {
		u.ValidationErrorSimple = validationErrorSimple
		u.Type = OrgsUpdate422ApplicationJSONTypeValidationErrorSimple
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u OrgsUpdate422ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.ValidationError != nil {
		return json.Marshal(u.ValidationError)
	}

	if u.ValidationErrorSimple != nil {
		return json.Marshal(u.ValidationErrorSimple)
	}

	return nil, nil
}

type OrgsUpdateResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Conflict
	BasicError *shared.BasicError
	// Response
	OrganizationFull *shared.OrganizationFull
	// Validation failed
	OrgsUpdate422ApplicationJSONOneOf *OrgsUpdate422ApplicationJSON
}
