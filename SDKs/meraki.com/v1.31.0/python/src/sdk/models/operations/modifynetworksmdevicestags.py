"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModifyNetworkSmDevicesTagsRequestBody:
    
    tags: list[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags') }})
    r"""The tags to be added, deleted, or updated."""  
    update_action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updateAction') }})
    r"""One of add, delete, or update. Only devices that have been modified will be returned."""  
    ids: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ids'), 'exclude': lambda f: f is None }})
    r"""The ids of the devices to be modified."""  
    scope: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('scope'), 'exclude': lambda f: f is None }})
    r"""The scope (one of all, none, withAny, withAll, withoutAny, or withoutAll) and a set of tags of the devices to be modified."""  
    serials: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serials'), 'exclude': lambda f: f is None }})
    r"""The serials of the devices to be modified."""  
    wifi_macs: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiMacs'), 'exclude': lambda f: f is None }})
    r"""The wifiMacs of the devices to be modified."""  
    

@dataclasses.dataclass
class ModifyNetworkSmDevicesTagsRequest:
    
    network_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'networkId', 'style': 'simple', 'explode': False }})  
    request_body: ModifyNetworkSmDevicesTagsRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ModifyNetworkSmDevicesTags200ApplicationJSON:
    
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    r"""The Meraki Id of the device record."""  
    serial: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('serial'), 'exclude': lambda f: f is None }})
    r"""The device serial."""  
    tags: Optional[list[str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tags'), 'exclude': lambda f: f is None }})
    r"""An array of tags associated with the device."""  
    wifi_mac: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('wifiMac'), 'exclude': lambda f: f is None }})
    r"""The MAC of the device."""  
    

@dataclasses.dataclass
class ModifyNetworkSmDevicesTagsResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    modify_network_sm_devices_tags_200_application_json_objects: Optional[list[ModifyNetworkSmDevicesTags200ApplicationJSON]] = dataclasses.field(default=None)
    r"""Successful operation"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    