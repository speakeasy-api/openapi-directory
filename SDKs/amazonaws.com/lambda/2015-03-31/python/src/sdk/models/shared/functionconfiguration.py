"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import deadletterconfig as shared_deadletterconfig
from ..shared import environmentresponse as shared_environmentresponse
from ..shared import ephemeralstorage as shared_ephemeralstorage
from ..shared import filesystemconfig as shared_filesystemconfig
from ..shared import imageconfigresponse as shared_imageconfigresponse
from ..shared import lastupdatestatus_enum as shared_lastupdatestatus_enum
from ..shared import lastupdatestatusreasoncode_enum as shared_lastupdatestatusreasoncode_enum
from ..shared import layer as shared_layer
from ..shared import packagetype_enum as shared_packagetype_enum
from ..shared import runtime_enum as shared_runtime_enum
from ..shared import runtimeversionconfig as shared_runtimeversionconfig
from ..shared import snapstartresponse as shared_snapstartresponse
from ..shared import state_enum as shared_state_enum
from ..shared import statereasoncode_enum as shared_statereasoncode_enum
from ..shared import tracingconfigresponse as shared_tracingconfigresponse
from ..shared import vpcconfigresponse as shared_vpcconfigresponse
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionConfiguration:
    r"""Details about a function's configuration."""
    
    architectures: Optional[list[shared_architecture_enum.ArchitectureEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Architectures'), 'exclude': lambda f: f is None }})  
    code_sha256: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeSha256'), 'exclude': lambda f: f is None }})  
    code_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('CodeSize'), 'exclude': lambda f: f is None }})  
    dead_letter_config: Optional[shared_deadletterconfig.DeadLetterConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DeadLetterConfig'), 'exclude': lambda f: f is None }})  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Description'), 'exclude': lambda f: f is None }})  
    environment: Optional[shared_environmentresponse.EnvironmentResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Environment'), 'exclude': lambda f: f is None }})  
    ephemeral_storage: Optional[shared_ephemeralstorage.EphemeralStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('EphemeralStorage'), 'exclude': lambda f: f is None }})  
    file_system_configs: Optional[list[shared_filesystemconfig.FileSystemConfig]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FileSystemConfigs'), 'exclude': lambda f: f is None }})  
    function_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FunctionArn'), 'exclude': lambda f: f is None }})  
    function_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('FunctionName'), 'exclude': lambda f: f is None }})  
    handler: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Handler'), 'exclude': lambda f: f is None }})  
    image_config_response: Optional[shared_imageconfigresponse.ImageConfigResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageConfigResponse'), 'exclude': lambda f: f is None }})  
    kms_key_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('KMSKeyArn'), 'exclude': lambda f: f is None }})  
    last_modified: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastModified'), 'exclude': lambda f: f is None }})  
    last_update_status: Optional[shared_lastupdatestatus_enum.LastUpdateStatusEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateStatus'), 'exclude': lambda f: f is None }})  
    last_update_status_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateStatusReason'), 'exclude': lambda f: f is None }})  
    last_update_status_reason_code: Optional[shared_lastupdatestatusreasoncode_enum.LastUpdateStatusReasonCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('LastUpdateStatusReasonCode'), 'exclude': lambda f: f is None }})  
    layers: Optional[list[shared_layer.Layer]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Layers'), 'exclude': lambda f: f is None }})  
    master_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MasterArn'), 'exclude': lambda f: f is None }})  
    memory_size: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('MemorySize'), 'exclude': lambda f: f is None }})  
    package_type: Optional[shared_packagetype_enum.PackageTypeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('PackageType'), 'exclude': lambda f: f is None }})  
    revision_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevisionId'), 'exclude': lambda f: f is None }})  
    role: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Role'), 'exclude': lambda f: f is None }})  
    runtime: Optional[shared_runtime_enum.RuntimeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Runtime'), 'exclude': lambda f: f is None }})  
    runtime_version_config: Optional[shared_runtimeversionconfig.RuntimeVersionConfig] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RuntimeVersionConfig'), 'exclude': lambda f: f is None }})  
    signing_job_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningJobArn'), 'exclude': lambda f: f is None }})  
    signing_profile_version_arn: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SigningProfileVersionArn'), 'exclude': lambda f: f is None }})  
    snap_start: Optional[shared_snapstartresponse.SnapStartResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('SnapStart'), 'exclude': lambda f: f is None }})  
    state: Optional[shared_state_enum.StateEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('State'), 'exclude': lambda f: f is None }})  
    state_reason: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateReason'), 'exclude': lambda f: f is None }})  
    state_reason_code: Optional[shared_statereasoncode_enum.StateReasonCodeEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('StateReasonCode'), 'exclude': lambda f: f is None }})  
    timeout: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Timeout'), 'exclude': lambda f: f is None }})  
    tracing_config: Optional[shared_tracingconfigresponse.TracingConfigResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('TracingConfig'), 'exclude': lambda f: f is None }})  
    version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Version'), 'exclude': lambda f: f is None }})  
    vpc_config: Optional[shared_vpcconfigresponse.VpcConfigResponse] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('VpcConfig'), 'exclude': lambda f: f is None }})  
    