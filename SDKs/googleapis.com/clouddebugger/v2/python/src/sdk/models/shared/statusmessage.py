"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import formatmessage as shared_formatmessage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import Optional

class StatusMessageRefersToEnum(str, Enum):
    r"""Reference to which the message applies."""
    UNSPECIFIED = 'UNSPECIFIED'
    BREAKPOINT_SOURCE_LOCATION = 'BREAKPOINT_SOURCE_LOCATION'
    BREAKPOINT_CONDITION = 'BREAKPOINT_CONDITION'
    BREAKPOINT_EXPRESSION = 'BREAKPOINT_EXPRESSION'
    BREAKPOINT_AGE = 'BREAKPOINT_AGE'
    BREAKPOINT_CANARY_FAILED = 'BREAKPOINT_CANARY_FAILED'
    VARIABLE_NAME = 'VARIABLE_NAME'
    VARIABLE_VALUE = 'VARIABLE_VALUE'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StatusMessage:
    r"""Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`."""
    
    description: Optional[shared_formatmessage.FormatMessage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Represents a message with parameters."""  
    is_error: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('isError'), 'exclude': lambda f: f is None }})
    r"""Distinguishes errors from informational messages."""  
    refers_to: Optional[StatusMessageRefersToEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('refersTo'), 'exclude': lambda f: f is None }})
    r"""Reference to which the message applies."""  
    