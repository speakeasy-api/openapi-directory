"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import regiongeotargetarea as shared_regiongeotargetarea
from ..shared import regionpostalcodearea as shared_regionpostalcodearea
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RegionInput:
    r"""Represents a geographic region that you can use as a target with both the `RegionalInventory` and `ShippingSettings` services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the region."""  
    geotarget_area: Optional[shared_regiongeotargetarea.RegionGeoTargetArea] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geotargetArea'), 'exclude': lambda f: f is None }})
    r"""A list of geotargets that defines the region area."""  
    postal_code_area: Optional[shared_regionpostalcodearea.RegionPostalCodeArea] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCodeArea'), 'exclude': lambda f: f is None }})
    r"""A list of postal codes that defines the region area. Note: All regions defined using postal codes are accessible via the account's `ShippingSettings.postalCodeGroups` resource."""  
    

@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Region:
    r"""Represents a geographic region that you can use as a target with both the `RegionalInventory` and `ShippingSettings` services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets."""
    
    display_name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('displayName'), 'exclude': lambda f: f is None }})
    r"""The display name of the region."""  
    geotarget_area: Optional[shared_regiongeotargetarea.RegionGeoTargetArea] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('geotargetArea'), 'exclude': lambda f: f is None }})
    r"""A list of geotargets that defines the region area."""  
    merchant_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('merchantId'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. Merchant that owns the region."""  
    postal_code_area: Optional[shared_regionpostalcodearea.RegionPostalCodeArea] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('postalCodeArea'), 'exclude': lambda f: f is None }})
    r"""A list of postal codes that defines the region area. Note: All regions defined using postal codes are accessible via the account's `ShippingSettings.postalCodeGroups` resource."""  
    regional_inventory_eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionalInventoryEligible'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates if the region is eligible to use in the Regional Inventory configuration."""  
    region_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('regionId'), 'exclude': lambda f: f is None }})
    r"""Output only. Immutable. The ID uniquely identifying each region."""  
    shipping_eligible: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('shippingEligible'), 'exclude': lambda f: f is None }})
    r"""Output only. Indicates if the region is eligible to use in the Shipping Services configuration."""  
    