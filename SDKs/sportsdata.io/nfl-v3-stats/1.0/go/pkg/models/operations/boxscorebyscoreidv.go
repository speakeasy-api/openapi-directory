// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// BoxScoreByScoreidVFormatEnum - Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
type BoxScoreByScoreidVFormatEnum string

const (
	BoxScoreByScoreidVFormatEnumXML  BoxScoreByScoreidVFormatEnum = "XML"
	BoxScoreByScoreidVFormatEnumJSON BoxScoreByScoreidVFormatEnum = "JSON"
)

func (e BoxScoreByScoreidVFormatEnum) ToPointer() *BoxScoreByScoreidVFormatEnum {
	return &e
}

func (e *BoxScoreByScoreidVFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "XML":
		fallthrough
	case "JSON":
		*e = BoxScoreByScoreidVFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BoxScoreByScoreidVFormatEnum: %v", v)
	}
}

type BoxScoreByScoreidVRequest struct {
	// Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
	Format BoxScoreByScoreidVFormatEnum `pathParam:"style=simple,explode=false,name=format"`
	// The ScoreID of the game. Possible values include: <code>16247</code>, <code>16245</code>, etc.
	Scoreid string `pathParam:"style=simple,explode=false,name=scoreid"`
}

type BoxScoreByScoreidVResponse struct {
	BoxScoreV3  *shared.BoxScoreV3
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
