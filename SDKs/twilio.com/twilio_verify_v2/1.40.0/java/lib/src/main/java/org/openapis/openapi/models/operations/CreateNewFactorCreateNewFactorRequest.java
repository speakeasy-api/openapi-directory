/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import org.openapis.openapi.utils.SpeakeasyMetadata;

public class CreateNewFactorCreateNewFactorRequest {
    /**
     * The algorithm used when `factor_type` is `push`. Algorithm supported: `ES256`
     */
    @SpeakeasyMetadata("form:name=Binding.Alg")
    public String bindingAlg;
    public CreateNewFactorCreateNewFactorRequest withBindingAlg(String bindingAlg) {
        this.bindingAlg = bindingAlg;
        return this;
    }
    
    /**
     * The Ecdsa public key in PKIX, ASN.1 DER format encoded in Base64.
     * 
     * Required when `factor_type` is `push`
     */
    @SpeakeasyMetadata("form:name=Binding.PublicKey")
    public String bindingPublicKey;
    public CreateNewFactorCreateNewFactorRequest withBindingPublicKey(String bindingPublicKey) {
        this.bindingPublicKey = bindingPublicKey;
        return this;
    }
    
    /**
     * The shared secret for TOTP factors encoded in Base32. This can be provided when creating the Factor, otherwise it will be generated.
     * 
     * Used when `factor_type` is `totp`
     */
    @SpeakeasyMetadata("form:name=Binding.Secret")
    public String bindingSecret;
    public CreateNewFactorCreateNewFactorRequest withBindingSecret(String bindingSecret) {
        this.bindingSecret = bindingSecret;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=Config.Alg")
    public org.openapis.openapi.models.shared.NewFactorEnumTotpAlgorithmsEnum configAlg;
    public CreateNewFactorCreateNewFactorRequest withConfigAlg(org.openapis.openapi.models.shared.NewFactorEnumTotpAlgorithmsEnum configAlg) {
        this.configAlg = configAlg;
        return this;
    }
    
    /**
     * The ID that uniquely identifies your app in the Google or Apple store, such as `com.example.myapp`. It can be up to 100 characters long.
     * 
     * Required when `factor_type` is `push`.
     */
    @SpeakeasyMetadata("form:name=Config.AppId")
    public String configAppId;
    public CreateNewFactorCreateNewFactorRequest withConfigAppId(String configAppId) {
        this.configAppId = configAppId;
        return this;
    }
    
    /**
     * Number of digits for generated TOTP codes. Must be between 3 and 8, inclusive. The default value is defined at the service level in the property `totp.code_length`. If not configured defaults to 6.
     * 
     * Used when `factor_type` is `totp`
     */
    @SpeakeasyMetadata("form:name=Config.CodeLength")
    public Long configCodeLength;
    public CreateNewFactorCreateNewFactorRequest withConfigCodeLength(Long configCodeLength) {
        this.configCodeLength = configCodeLength;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=Config.NotificationPlatform")
    public org.openapis.openapi.models.shared.NewFactorEnumNotificationPlatformsEnum configNotificationPlatform;
    public CreateNewFactorCreateNewFactorRequest withConfigNotificationPlatform(org.openapis.openapi.models.shared.NewFactorEnumNotificationPlatformsEnum configNotificationPlatform) {
        this.configNotificationPlatform = configNotificationPlatform;
        return this;
    }
    
    /**
     * For APN, the device token. For FCM, the registration token. It is used to send the push notifications. Must be between 32 and 255 characters long.
     * 
     * Required when `factor_type` is `push`.
     */
    @SpeakeasyMetadata("form:name=Config.NotificationToken")
    public String configNotificationToken;
    public CreateNewFactorCreateNewFactorRequest withConfigNotificationToken(String configNotificationToken) {
        this.configNotificationToken = configNotificationToken;
        return this;
    }
    
    /**
     * The Verify Push SDK version used to configure the factor
     * 
     * Required when `factor_type` is `push`
     */
    @SpeakeasyMetadata("form:name=Config.SdkVersion")
    public String configSDKVersion;
    public CreateNewFactorCreateNewFactorRequest withConfigSDKVersion(String configSDKVersion) {
        this.configSDKVersion = configSDKVersion;
        return this;
    }
    
    /**
     * The number of time-steps, past and future, that are valid for validation of TOTP codes. Must be between 0 and 2, inclusive. The default value is defined at the service level in the property `totp.skew`. If not configured defaults to 1.
     * 
     * Used when `factor_type` is `totp`
     */
    @SpeakeasyMetadata("form:name=Config.Skew")
    public Long configSkew;
    public CreateNewFactorCreateNewFactorRequest withConfigSkew(Long configSkew) {
        this.configSkew = configSkew;
        return this;
    }
    
    /**
     * Defines how often, in seconds, are TOTP codes generated. i.e, a new TOTP code is generated every time_step seconds. Must be between 20 and 60 seconds, inclusive. The default value is defined at the service level in the property `totp.time_step`. Defaults to 30 seconds if not configured.
     * 
     * Used when `factor_type` is `totp`
     */
    @SpeakeasyMetadata("form:name=Config.TimeStep")
    public Long configTimeStep;
    public CreateNewFactorCreateNewFactorRequest withConfigTimeStep(Long configTimeStep) {
        this.configTimeStep = configTimeStep;
        return this;
    }
    
    @SpeakeasyMetadata("form:name=FactorType")
    public org.openapis.openapi.models.shared.NewFactorEnumFactorTypesEnum factorType;
    public CreateNewFactorCreateNewFactorRequest withFactorType(org.openapis.openapi.models.shared.NewFactorEnumFactorTypesEnum factorType) {
        this.factorType = factorType;
        return this;
    }
    
    /**
     * The friendly name of this Factor. This can be any string up to 64 characters, meant for humans to distinguish between Factors.
     * For `factor_type` `push`, this could be a device name.
     * For `factor_type` `totp`, this value is used as the \u201caccount name\u201d in constructing the `binding.uri` property.
     * At the same time, we recommend avoiding providing PII.
     */
    @SpeakeasyMetadata("form:name=FriendlyName")
    public String friendlyName;
    public CreateNewFactorCreateNewFactorRequest withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }
    
    /**
     * Custom metadata associated with the factor. This is added by the Device/SDK directly to allow for the inclusion of device information. It must be a stringified JSON with only strings values eg. `{"os": "Android"}`. Can be up to 1024 characters in length.
     */
    @SpeakeasyMetadata("form:name=Metadata")
    public Object metadata;
    public CreateNewFactorCreateNewFactorRequest withMetadata(Object metadata) {
        this.metadata = metadata;
        return this;
    }
    
}
