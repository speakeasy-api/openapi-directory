/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * NodeTemplate - Represent a sole-tenant Node Template resource. You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances.
 */
public class NodeTemplate {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accelerators")
    public AcceleratorConfig[] accelerators;
    public NodeTemplate withAccelerators(AcceleratorConfig[] accelerators) {
        this.accelerators = accelerators;
        return this;
    }
    
    /**
     * CPU overcommit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cpuOvercommitType")
    public NodeTemplateCpuOvercommitTypeEnum cpuOvercommitType;
    public NodeTemplate withCpuOvercommitType(NodeTemplateCpuOvercommitTypeEnum cpuOvercommitType) {
        this.cpuOvercommitType = cpuOvercommitType;
        return this;
    }
    
    /**
     * [Output Only] Creation timestamp in RFC3339 text format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creationTimestamp")
    public String creationTimestamp;
    public NodeTemplate withCreationTimestamp(String creationTimestamp) {
        this.creationTimestamp = creationTimestamp;
        return this;
    }
    
    /**
     * An optional description of this resource. Provide this property when you create the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;
    public NodeTemplate withDescription(String description) {
        this.description = description;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("disks")
    public LocalDisk[] disks;
    public NodeTemplate withDisks(LocalDisk[] disks) {
        this.disks = disks;
        return this;
    }
    
    /**
     * [Output Only] The unique identifier for the resource. This identifier is defined by the server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public NodeTemplate withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * [Output Only] The type of the resource. Always compute#nodeTemplate for node templates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public NodeTemplate withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public NodeTemplate withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Labels to use for node affinity, which will be used in instance scheduling.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeAffinityLabels")
    public java.util.Map<String, String> nodeAffinityLabels;
    public NodeTemplate withNodeAffinityLabels(java.util.Map<String, String> nodeAffinityLabels) {
        this.nodeAffinityLabels = nodeAffinityLabels;
        return this;
    }
    
    /**
     * The node type to use for nodes group that are created from this template.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeType")
    public String nodeType;
    public NodeTemplate withNodeType(String nodeType) {
        this.nodeType = nodeType;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nodeTypeFlexibility")
    public NodeTemplateNodeTypeFlexibility nodeTypeFlexibility;
    public NodeTemplate withNodeTypeFlexibility(NodeTemplateNodeTypeFlexibility nodeTypeFlexibility) {
        this.nodeTypeFlexibility = nodeTypeFlexibility;
        return this;
    }
    
    /**
     * [Output Only] The name of the region where the node template resides, such as us-central1.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region")
    public String region;
    public NodeTemplate withRegion(String region) {
        this.region = region;
        return this;
    }
    
    /**
     * [Output Only] Server-defined URL for the resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public NodeTemplate withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serverBinding")
    public ServerBinding serverBinding;
    public NodeTemplate withServerBinding(ServerBinding serverBinding) {
        this.serverBinding = serverBinding;
        return this;
    }
    
    /**
     * [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public NodeTemplateStatusEnum status;
    public NodeTemplate withStatus(NodeTemplateStatusEnum status) {
        this.status = status;
        return this;
    }
    
    /**
     * [Output Only] An optional, human-readable explanation of the status.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("statusMessage")
    public String statusMessage;
    public NodeTemplate withStatusMessage(String statusMessage) {
        this.statusMessage = statusMessage;
        return this;
    }
    
}
