/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";

export class GetUsersUserIdPermissionsRequest extends SpeakeasyBase {
  /**
   * Used for pagination.  When a list request has more records available, cursors are provided in the response headers `X-Files-Cursor-Next` and `X-Files-Cursor-Prev`.  Send one of those cursor value here to resume an existing list from the next available record.  Note: many of our SDKs have iterator methods that will automatically handle cursor-based pagination.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=cursor",
  })
  cursor?: string;

  /**
   * If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter",
  })
  filter?: Record<string, any>;

  /**
   * If set, return records where the specified field is greater than the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_gt",
  })
  filterGt?: Record<string, any>;

  /**
   * If set, return records where the specified field is greater than or equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_gteq",
  })
  filterGteq?: Record<string, any>;

  /**
   * If set, return records where the specified field is equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_like",
  })
  filterLike?: Record<string, any>;

  /**
   * If set, return records where the specified field is less than the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_lt",
  })
  filterLt?: Record<string, any>;

  /**
   * If set, return records where the specified field is less than or equal to the supplied value. Valid fields are `group_id`, `user_id` or `path`. Valid field combinations are `[ group_id, path ]` and `[ user_id, path ]`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=filter_lteq",
  })
  filterLteq?: Record<string, any>;

  /**
   * DEPRECATED: Group ID.  If provided, will scope permissions to this group. Use `filter[group_id]` instead.`
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=group_id",
  })
  groupId?: string;

  /**
   * If searching by user or group, also include user's permissions that are inherited from its groups?
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=include_groups",
  })
  includeGroups?: boolean;

  /**
   * DEPRECATED: Permission path.  If provided, will scope permissions to this path. Use `filter[path]` instead.
   */
  @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=path" })
  path?: string;

  /**
   * Number of records to show per page.  (Max: 10,000, 1,000 or less is recommended).
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=per_page",
  })
  perPage?: number;

  /**
   * If set, sort records by the specified field in either `asc` or `desc` direction (e.g. `sort_by[group_id]=desc`). Valid fields are `group_id`, `path`, `user_id` or `permission`.
   */
  @SpeakeasyMetadata({
    data: "queryParam, style=form;explode=true;name=sort_by",
  })
  sortBy?: Record<string, any>;

  /**
   * DEPRECATED: User ID.  If provided, will scope permissions to this user. Use `filter[user_id]` instead.`
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=user_id",
  })
  userId: string;
}

export class GetUsersUserIdPermissionsResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * A list of Permissions objects.
   */
  @SpeakeasyMetadata({ elemType: shared.PermissionEntity })
  permissionEntities?: shared.PermissionEntity[];

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;
}
