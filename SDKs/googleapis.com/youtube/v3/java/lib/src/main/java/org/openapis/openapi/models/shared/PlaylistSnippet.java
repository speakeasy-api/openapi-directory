/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * PlaylistSnippet - Basic details about a playlist, including title, description and thumbnails.
 */
public class PlaylistSnippet {
    /**
     * The ID that YouTube uses to uniquely identify the channel that published the playlist.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelId")
    public String channelId;

    public PlaylistSnippet withChannelId(String channelId) {
        this.channelId = channelId;
        return this;
    }
    
    /**
     * The channel title of the channel that the video belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channelTitle")
    public String channelTitle;

    public PlaylistSnippet withChannelTitle(String channelTitle) {
        this.channelTitle = channelTitle;
        return this;
    }
    
    /**
     * The language of the playlist's default title and description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultLanguage")
    public String defaultLanguage;

    public PlaylistSnippet withDefaultLanguage(String defaultLanguage) {
        this.defaultLanguage = defaultLanguage;
        return this;
    }
    
    /**
     * The playlist's description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public PlaylistSnippet withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * Playlist localization setting
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("localized")
    public PlaylistLocalization localized;

    public PlaylistSnippet withLocalized(PlaylistLocalization localized) {
        this.localized = localized;
        return this;
    }
    
    /**
     * The date and time that the playlist was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("publishedAt")
    public OffsetDateTime publishedAt;

    public PlaylistSnippet withPublishedAt(OffsetDateTime publishedAt) {
        this.publishedAt = publishedAt;
        return this;
    }
    
    /**
     * Keyword tags associated with the playlist.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    public String[] tags;

    public PlaylistSnippet withTags(String[] tags) {
        this.tags = tags;
        return this;
    }
    
    /**
     * Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnailVideoId")
    public String thumbnailVideoId;

    public PlaylistSnippet withThumbnailVideoId(String thumbnailVideoId) {
        this.thumbnailVideoId = thumbnailVideoId;
        return this;
    }
    
    /**
     * Internal representation of thumbnails for a YouTube resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnails")
    public ThumbnailDetails thumbnails;

    public PlaylistSnippet withThumbnails(ThumbnailDetails thumbnails) {
        this.thumbnails = thumbnails;
        return this;
    }
    
    /**
     * The playlist's title.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    public String title;

    public PlaylistSnippet withTitle(String title) {
        this.title = title;
        return this;
    }
    
    public PlaylistSnippet(){}
}
