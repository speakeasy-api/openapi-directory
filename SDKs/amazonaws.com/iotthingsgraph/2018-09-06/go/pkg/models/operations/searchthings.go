// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// SearchThingsXAmzTargetEnum
type SearchThingsXAmzTargetEnum string

const (
	SearchThingsXAmzTargetEnumIotThingsGraphFrontEndServiceSearchThings SearchThingsXAmzTargetEnum = "IotThingsGraphFrontEndService.SearchThings"
)

func (e SearchThingsXAmzTargetEnum) ToPointer() *SearchThingsXAmzTargetEnum {
	return &e
}

func (e *SearchThingsXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "IotThingsGraphFrontEndService.SearchThings":
		*e = SearchThingsXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SearchThingsXAmzTargetEnum: %v", v)
	}
}

type SearchThingsRequest struct {
	SearchThingsRequest shared.SearchThingsRequest `request:"mediaType=application/json"`
	XAmzAlgorithm       *string                    `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256   *string                    `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential      *string                    `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate            *string                    `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken   *string                    `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature       *string                    `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders   *string                    `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget          SearchThingsXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
	// Pagination limit
	MaxResults *string `queryParam:"style=form,explode=true,name=maxResults"`
	// Pagination token
	NextToken *string `queryParam:"style=form,explode=true,name=nextToken"`
}

type SearchThingsResponse struct {
	ContentType string
	// InternalFailureException
	InternalFailureException interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// ResourceNotFoundException
	ResourceNotFoundException interface{}
	// Success
	SearchThingsResponse *shared.SearchThingsResponse
	StatusCode           int
	RawResponse          *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
