/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * User - A user resource.
 */
public class User {
    /**
     * Output only. The state of the user's access to the Play Console.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessState")
    public UserAccessStateEnum accessState;
    public User withAccessState(UserAccessStateEnum accessState) {
        this.accessState = accessState;
        return this;
    }
    
    /**
     * Permissions for the user which apply across the developer account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("developerAccountPermissions")
    public UserDeveloperAccountPermissionsEnum[] developerAccountPermissions;
    public User withDeveloperAccountPermissions(UserDeveloperAccountPermissionsEnum[] developerAccountPermissions) {
        this.developerAccountPermissions = developerAccountPermissions;
        return this;
    }
    
    /**
     * Immutable. The user's email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    public String email;
    public User withEmail(String email) {
        this.email = email;
        return this;
    }
    
    /**
     * The time at which the user's access expires, if set. When setting this value, it must always be in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationTime")
    public String expirationTime;
    public User withExpirationTime(String expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * Output only. Per-app permissions for the user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grants")
    public Grant[] grants;
    public User withGrants(Grant[] grants) {
        this.grants = grants;
        return this;
    }
    
    /**
     * Required. Resource name for this user, following the pattern "developers/{developer}/users/{email}".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public User withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partial")
    public Boolean partial;
    public User withPartial(Boolean partial) {
        this.partial = partial;
        return this;
    }
    
}
