// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// CreateDeploymentXAmzTargetEnum
type CreateDeploymentXAmzTargetEnum string

const (
	CreateDeploymentXAmzTargetEnumCodeDeploy20141006CreateDeployment CreateDeploymentXAmzTargetEnum = "CodeDeploy_20141006.CreateDeployment"
)

func (e CreateDeploymentXAmzTargetEnum) ToPointer() *CreateDeploymentXAmzTargetEnum {
	return &e
}

func (e *CreateDeploymentXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CodeDeploy_20141006.CreateDeployment":
		*e = CreateDeploymentXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDeploymentXAmzTargetEnum: %v", v)
	}
}

type CreateDeploymentRequest struct {
	CreateDeploymentInput shared.CreateDeploymentInput   `request:"mediaType=application/json"`
	XAmzAlgorithm         *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256     *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential        *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate              *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken     *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature         *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders     *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget            CreateDeploymentXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type CreateDeploymentResponse struct {
	// AlarmsLimitExceededException
	AlarmsLimitExceededException interface{}
	// ApplicationDoesNotExistException
	ApplicationDoesNotExistException interface{}
	// ApplicationNameRequiredException
	ApplicationNameRequiredException interface{}
	ContentType                      string
	// Success
	CreateDeploymentOutput *shared.CreateDeploymentOutput
	// DeploymentConfigDoesNotExistException
	DeploymentConfigDoesNotExistException interface{}
	// DeploymentGroupDoesNotExistException
	DeploymentGroupDoesNotExistException interface{}
	// DeploymentGroupNameRequiredException
	DeploymentGroupNameRequiredException interface{}
	// DeploymentLimitExceededException
	DeploymentLimitExceededException interface{}
	// DescriptionTooLongException
	DescriptionTooLongException interface{}
	// InvalidAlarmConfigException
	InvalidAlarmConfigException interface{}
	// InvalidApplicationNameException
	InvalidApplicationNameException interface{}
	// InvalidAutoRollbackConfigException
	InvalidAutoRollbackConfigException interface{}
	// InvalidAutoScalingGroupException
	InvalidAutoScalingGroupException interface{}
	// InvalidDeploymentConfigNameException
	InvalidDeploymentConfigNameException interface{}
	// InvalidDeploymentGroupNameException
	InvalidDeploymentGroupNameException interface{}
	// InvalidFileExistsBehaviorException
	InvalidFileExistsBehaviorException interface{}
	// InvalidGitHubAccountTokenException
	InvalidGitHubAccountTokenException interface{}
	// InvalidIgnoreApplicationStopFailuresValueException
	InvalidIgnoreApplicationStopFailuresValueException interface{}
	// InvalidLoadBalancerInfoException
	InvalidLoadBalancerInfoException interface{}
	// InvalidRevisionException
	InvalidRevisionException interface{}
	// InvalidRoleException
	InvalidRoleException interface{}
	// InvalidTargetInstancesException
	InvalidTargetInstancesException interface{}
	// InvalidTrafficRoutingConfigurationException
	InvalidTrafficRoutingConfigurationException interface{}
	// InvalidUpdateOutdatedInstancesOnlyValueException
	InvalidUpdateOutdatedInstancesOnlyValueException interface{}
	// RevisionDoesNotExistException
	RevisionDoesNotExistException interface{}
	// RevisionRequiredException
	RevisionRequiredException interface{}
	StatusCode                int
	RawResponse               *http.Response
	// ThrottlingException
	ThrottlingException interface{}
}
