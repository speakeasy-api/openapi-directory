"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import customarticlefieldadd as shared_customarticlefieldadd
from ..shared import fundingcreate as shared_fundingcreate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ProjectCreate:
    r"""Project  description"""
    
    title: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title') }})
    r"""The title for this project - mandatory. 3 - 1000 characters."""  
    custom_fields: Optional[dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields'), 'exclude': lambda f: f is None }})
    r"""List of key, values pairs to be associated with the project"""  
    custom_fields_list: Optional[list[shared_customarticlefieldadd.CustomArticleFieldAdd]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('custom_fields_list'), 'exclude': lambda f: f is None }})
    r"""List of custom fields values, supersedes custom_fields parameter"""  
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    r"""Project description"""  
    funding: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding'), 'exclude': lambda f: f is None }})
    r"""Grant number or organization(s) that funded this project. Up to 2000 characters permitted."""  
    funding_list: Optional[list[shared_fundingcreate.FundingCreate]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('funding_list'), 'exclude': lambda f: f is None }})
    r"""Funding creation / update items"""  
    group_id: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('group_id'), 'exclude': lambda f: f is None }})
    r"""Only if project type is group."""  
    