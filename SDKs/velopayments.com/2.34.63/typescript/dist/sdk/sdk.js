"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = exports.ServerList = void 0;
var utils = __importStar(require("../internal/utils"));
var countries_1 = require("./countries");
var currencies_1 = require("./currencies");
var funding_1 = require("./funding");
var fundingmanagerprivate_1 = require("./fundingmanagerprivate");
var login_1 = require("./login");
var shared = __importStar(require("./models/shared"));
var payeeinvitation_1 = require("./payeeinvitation");
var payees_1 = require("./payees");
var paymentauditservice_1 = require("./paymentauditservice");
var paymentauditservicedeprecated_1 = require("./paymentauditservicedeprecated");
var payorhierarchy_1 = require("./payorhierarchy");
var payors_1 = require("./payors");
var payorsprivate_1 = require("./payorsprivate");
var payouts_1 = require("./payouts");
var sourceaccounts_1 = require("./sourceaccounts");
var tokens_1 = require("./tokens");
var users_1 = require("./users");
var webhooks_1 = require("./webhooks");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = [
    /**
     * Velo Payments Sandbox for testing
     */
    "https://api.sandbox.velopayments.com/",
    /**
     * Velo Payments Production URL
     */
    "https://api.payouts.velopayments.com",
];
/**
 * ## Terms and Definitions
 *
 * @remarks
 *
 * Throughout this document and the Velo platform the following terms are used:
 *
 * * **Payor.** An entity (typically a corporation) which wishes to pay funds to one or more payees via a payout.
 * * **Payee.** The recipient of funds paid out by a payor.
 * * **Payment.** A single transfer of funds from a payor to a payee.
 * * **Payout.** A batch of Payments, typically used by a payor to logically group payments (e.g. by business day). Technically there need be no relationship between the payments in a payout - a single payout can contain payments to multiple payees and/or multiple payments to a single payee.
 * * **Sandbox.** An integration environment provided by Velo Payments which offers a similar API experience to the production environment, but all funding and payment events are simulated, along with many other services such as OFAC sanctions list checking.
 *
 * ## Overview
 *
 * The Velo Payments API allows a payor to perform a number of operations. The following is a list of the main capabilities in a natural order of execution:
 *
 * * Authenticate with the Velo platform
 * * Maintain a collection of payees
 * * Query the payor’s current balance of funds within the platform and perform additional funding
 * * Issue payments to payees
 * * Query the platform for a history of those payments
 *
 * This document describes the main concepts and APIs required to get up and running with the Velo Payments platform. It is not an exhaustive API reference. For that, please see the separate Velo Payments API Reference.
 *
 * ## API Considerations
 *
 * The Velo Payments API is REST based and uses the JSON format for requests and responses.
 *
 * Most calls are secured using OAuth 2 security and require a valid authentication access token for successful operation. See the Authentication section for details.
 *
 * Where a dynamic value is required in the examples below, the {token} format is used, suggesting that the caller needs to supply the appropriate value of the token in question (without including the { or } characters).
 *
 * Where curl examples are given, the –d @filename.json approach is used, indicating that the request body should be placed into a file named filename.json in the current directory. Each of the curl examples in this document should be considered a single line on the command-line, regardless of how they appear in print.
 *
 * ## Authenticating with the Velo Platform
 *
 * Once Velo backoffice staff have added your organization as a payor within the Velo platform sandbox, they will create you a payor Id, an API key and an API secret and share these with you in a secure manner.
 *
 * You will need to use these values to authenticate with the Velo platform in order to gain access to the APIs. The steps to take are explained in the following:
 *
 * create a string comprising the API key (e.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8) and API secret (e.g. c396b26b-137a-44fd-87f5-34631f8fd529) with a colon between them. E.g. 44a9537d-d55d-4b47-8082-14061c2bcdd8:c396b26b-137a-44fd-87f5-34631f8fd529
 *
 * base64 encode this string. E.g.: NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==
 *
 * create an HTTP **Authorization** header with the value set to e.g. Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==
 *
 * perform the Velo authentication REST call using the HTTP header created above e.g. via curl:
 *
 * ```
 *   curl -X POST \
 *   -H "Content-Type: application/json" \
 *   -H "Authorization: Basic NDRhOTUzN2QtZDU1ZC00YjQ3LTgwODItMTQwNjFjMmJjZGQ4OmMzOTZiMjZiLTEzN2EtNDRmZC04N2Y1LTM0NjMxZjhmZDUyOQ==" \
 *   'https://api.sandbox.velopayments.com/v1/authenticate?grant_type=client_credentials'
 * ```
 *
 * If successful, this call will result in a **200** HTTP status code and a response body such as:
 *
 * ```
 *   {
 *     "access_token":"19f6bafd-93fd-4747-b229-00507bbc991f",
 *     "token_type":"bearer",
 *     "expires_in":1799,
 *     "scope":"..."
 *   }
 * ```
 * ## API access following authentication
 * Following successful authentication, the value of the access_token field in the response (indicated in green above) should then be presented with all subsequent API calls to allow the Velo platform to validate that the caller is authenticated.
 *
 * This is achieved by setting the HTTP Authorization header with the value set to e.g. Bearer 19f6bafd-93fd-4747-b229-00507bbc991f such as the curl example below:
 *
 * ```
 *   -H "Authorization: Bearer 19f6bafd-93fd-4747-b229-00507bbc991f "
 * ```
 *
 * If you make other Velo API calls which require authorization but the Authorization header is missing or invalid then you will get a **401** HTTP status response.
 *
 */
var SDK = /** @class */ (function () {
    function SDK(props) {
        var _a, _b;
        this._language = "typescript";
        this._sdkVersion = "0.0.1";
        this._genVersion = "internal";
        this._serverURL = (_a = props === null || props === void 0 ? void 0 : props.serverURL) !== null && _a !== void 0 ? _a : exports.ServerList[0];
        this._defaultClient =
            (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create({ baseURL: this._serverURL });
        if (props === null || props === void 0 ? void 0 : props.security) {
            var security = props.security;
            if (!(props.security instanceof utils.SpeakeasyBase))
                security = new shared.Security(props.security);
            this._securityClient = utils.createSecurityClient(this._defaultClient, security);
        }
        else {
            this._securityClient = this._defaultClient;
        }
        this.countries = new countries_1.Countries(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.currencies = new currencies_1.Currencies(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.funding = new funding_1.Funding(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.fundingManagerPrivate = new fundingmanagerprivate_1.FundingManagerPrivate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.login = new login_1.Login(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payeeInvitation = new payeeinvitation_1.PayeeInvitation(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payees = new payees_1.Payees(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.paymentAuditService = new paymentauditservice_1.PaymentAuditService(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.paymentAuditServiceDeprecated = new paymentauditservicedeprecated_1.PaymentAuditServiceDeprecated(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payorHierarchy = new payorhierarchy_1.PayorHierarchy(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payors = new payors_1.Payors(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payorsPrivate = new payorsprivate_1.PayorsPrivate(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.payouts = new payouts_1.Payouts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.sourceAccounts = new sourceaccounts_1.SourceAccounts(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.tokens = new tokens_1.Tokens(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.users = new users_1.Users(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
        this.webhooks = new webhooks_1.Webhooks(this._defaultClient, this._securityClient, this._serverURL, this._language, this._sdkVersion, this._genVersion);
    }
    return SDK;
}());
exports.SDK = SDK;
