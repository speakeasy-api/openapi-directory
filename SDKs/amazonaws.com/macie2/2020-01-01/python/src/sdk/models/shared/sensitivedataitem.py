"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import defaultdetection as shared_defaultdetection
from ..shared import sensitivedataitemcategory_enum as shared_sensitivedataitemcategory_enum
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SensitiveDataItem:
    r"""Provides information about the category, types, and occurrences of sensitive data that produced a sensitive data finding."""
    
    category: Optional[shared_sensitivedataitemcategory_enum.SensitiveDataItemCategoryEnum] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('category'), 'exclude': lambda f: f is None }})  
    detections: Optional[list[shared_defaultdetection.DefaultDetection]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('detections'), 'exclude': lambda f: f is None }})  
    total_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalCount'), 'exclude': lambda f: f is None }})  
    