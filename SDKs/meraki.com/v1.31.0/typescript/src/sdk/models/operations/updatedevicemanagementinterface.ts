/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
 */
export enum UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum {
  Disabled = "disabled",
  Enabled = "enabled",
  NotConfigured = "not configured",
}

/**
 * WAN 1 settings
 */
export class UpdateDeviceManagementInterfaceRequestBodyWan1 extends SpeakeasyBase {
  /**
   * Up to two DNS IPs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticDns" })
  staticDns?: string[];

  /**
   * The IP of the gateway on the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticGatewayIp" })
  staticGatewayIp?: string;

  /**
   * The IP the device should use on the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticIp" })
  staticIp?: string;

  /**
   * The subnet mask for the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticSubnetMask" })
  staticSubnetMask?: string;

  /**
   * Configure the interface to have static IP settings or use DHCP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "usingStaticIp" })
  usingStaticIp?: boolean;

  /**
   * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;

  /**
   * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wanEnabled" })
  wanEnabled?: UpdateDeviceManagementInterfaceRequestBodyWan1WanEnabledEnum;
}

/**
 * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
 */
export enum UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum {
  Disabled = "disabled",
  Enabled = "enabled",
  NotConfigured = "not configured",
}

/**
 * WAN 2 settings (only for MX devices)
 */
export class UpdateDeviceManagementInterfaceRequestBodyWan2 extends SpeakeasyBase {
  /**
   * Up to two DNS IPs.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticDns" })
  staticDns?: string[];

  /**
   * The IP of the gateway on the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticGatewayIp" })
  staticGatewayIp?: string;

  /**
   * The IP the device should use on the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticIp" })
  staticIp?: string;

  /**
   * The subnet mask for the WAN.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "staticSubnetMask" })
  staticSubnetMask?: string;

  /**
   * Configure the interface to have static IP settings or use DHCP.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "usingStaticIp" })
  usingStaticIp?: boolean;

  /**
   * The VLAN that management traffic should be tagged with. Applies whether usingStaticIp is true or false.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "vlan" })
  vlan?: number;

  /**
   * Enable or disable the interface (only for MX devices). Valid values are 'enabled', 'disabled', and 'not configured'.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wanEnabled" })
  wanEnabled?: UpdateDeviceManagementInterfaceRequestBodyWan2WanEnabledEnum;
}

export class UpdateDeviceManagementInterfaceRequestBody extends SpeakeasyBase {
  /**
   * WAN 1 settings
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wan1" })
  @Type(() => UpdateDeviceManagementInterfaceRequestBodyWan1)
  wan1?: UpdateDeviceManagementInterfaceRequestBodyWan1;

  /**
   * WAN 2 settings (only for MX devices)
   */
  @SpeakeasyMetadata()
  @Expose({ name: "wan2" })
  @Type(() => UpdateDeviceManagementInterfaceRequestBodyWan2)
  wan2?: UpdateDeviceManagementInterfaceRequestBodyWan2;
}

export class UpdateDeviceManagementInterfaceRequest extends SpeakeasyBase {
  @SpeakeasyMetadata({ data: "request, media_type=application/json" })
  requestBody?: UpdateDeviceManagementInterfaceRequestBody;

  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=serial",
  })
  serial: string;
}

export class UpdateDeviceManagementInterfaceResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * Successful operation
   */
  @SpeakeasyMetadata()
  updateDeviceManagementInterface200ApplicationJSONObject?: Record<string, any>;
}
