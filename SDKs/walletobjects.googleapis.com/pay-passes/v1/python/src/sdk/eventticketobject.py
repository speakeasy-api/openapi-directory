"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Eventticketobject:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def walletobjects_eventticketobject_addmessage(self, request: operations.WalletobjectsEventticketobjectAddmessageRequest, security: operations.WalletobjectsEventticketobjectAddmessageSecurity) -> operations.WalletobjectsEventticketobjectAddmessageResponse:
        r"""Adds a message to the event ticket object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketobjectAddmessageRequest, base_url, '/walletobjects/v1/eventTicketObject/{resourceId}/addMessage', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "add_message_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectAddmessageRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectAddmessageResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObjectAddMessageResponse])
                res.event_ticket_object_add_message_response = out

        return res

    def walletobjects_eventticketobject_get(self, request: operations.WalletobjectsEventticketobjectGetRequest, security: operations.WalletobjectsEventticketobjectGetSecurity) -> operations.WalletobjectsEventticketobjectGetResponse:
        r"""Returns the event ticket object with the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketobjectGetRequest, base_url, '/walletobjects/v1/eventTicketObject/{resourceId}', request)
        
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObject])
                res.event_ticket_object = out

        return res

    def walletobjects_eventticketobject_insert(self, request: operations.WalletobjectsEventticketobjectInsertRequest, security: operations.WalletobjectsEventticketobjectInsertSecurity) -> operations.WalletobjectsEventticketobjectInsertResponse:
        r"""Inserts an event ticket object with the given ID and properties."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/eventTicketObject'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectInsertRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectInsertResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObject])
                res.event_ticket_object = out

        return res

    def walletobjects_eventticketobject_list(self, request: operations.WalletobjectsEventticketobjectListRequest, security: operations.WalletobjectsEventticketobjectListSecurity) -> operations.WalletobjectsEventticketobjectListResponse:
        r"""Returns a list of all event ticket objects for a given issuer ID."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/walletobjects/v1/eventTicketObject'
        
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObjectListResponse])
                res.event_ticket_object_list_response = out

        return res

    def walletobjects_eventticketobject_modifylinkedofferobjects(self, request: operations.WalletobjectsEventticketobjectModifylinkedofferobjectsRequest, security: operations.WalletobjectsEventticketobjectModifylinkedofferobjectsSecurity) -> operations.WalletobjectsEventticketobjectModifylinkedofferobjectsResponse:
        r"""Modifies linked offer objects for the event ticket object with the given ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketobjectModifylinkedofferobjectsRequest, base_url, '/walletobjects/v1/eventTicketObject/{resourceId}/modifyLinkedOfferObjects', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "modify_linked_offer_objects_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectModifylinkedofferobjectsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectModifylinkedofferobjectsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObject])
                res.event_ticket_object = out

        return res

    def walletobjects_eventticketobject_patch(self, request: operations.WalletobjectsEventticketobjectPatchRequest, security: operations.WalletobjectsEventticketobjectPatchSecurity) -> operations.WalletobjectsEventticketobjectPatchResponse:
        r"""Updates the event ticket object referenced by the given object ID. This method supports patch semantics."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketobjectPatchRequest, base_url, '/walletobjects/v1/eventTicketObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObject])
                res.event_ticket_object = out

        return res

    def walletobjects_eventticketobject_update(self, request: operations.WalletobjectsEventticketobjectUpdateRequest, security: operations.WalletobjectsEventticketobjectUpdateSecurity) -> operations.WalletobjectsEventticketobjectUpdateResponse:
        r"""Updates the event ticket object referenced by the given object ID."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.WalletobjectsEventticketobjectUpdateRequest, base_url, '/walletobjects/v1/eventTicketObject/{resourceId}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "event_ticket_object", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.WalletobjectsEventticketobjectUpdateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PUT', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.WalletobjectsEventticketobjectUpdateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.EventTicketObject])
                res.event_ticket_object = out

        return res

    