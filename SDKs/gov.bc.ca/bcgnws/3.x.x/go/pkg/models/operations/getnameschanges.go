// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GetNamesChangesEmbedEnum - A flag to indicate whether to embed the corresponding 'feature' into each matching name
type GetNamesChangesEmbedEnum int64

const (
	GetNamesChangesEmbedEnumZero GetNamesChangesEmbedEnum = 0
	GetNamesChangesEmbedEnumOne  GetNamesChangesEmbedEnum = 1
)

func (e GetNamesChangesEmbedEnum) ToPointer() *GetNamesChangesEmbedEnum {
	return &e
}

func (e *GetNamesChangesEmbedEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 0:
		fallthrough
	case 1:
		*e = GetNamesChangesEmbedEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesChangesEmbedEnum: %v", v)
	}
}

// GetNamesChangesOutputFormatEnum - The format of the output.
type GetNamesChangesOutputFormatEnum string

const (
	GetNamesChangesOutputFormatEnumJSON GetNamesChangesOutputFormatEnum = "json"
	GetNamesChangesOutputFormatEnumXML  GetNamesChangesOutputFormatEnum = "xml"
	GetNamesChangesOutputFormatEnumKml  GetNamesChangesOutputFormatEnum = "kml"
	GetNamesChangesOutputFormatEnumCsv  GetNamesChangesOutputFormatEnum = "csv"
)

func (e GetNamesChangesOutputFormatEnum) ToPointer() *GetNamesChangesOutputFormatEnum {
	return &e
}

func (e *GetNamesChangesOutputFormatEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "xml":
		fallthrough
	case "kml":
		fallthrough
	case "csv":
		*e = GetNamesChangesOutputFormatEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesChangesOutputFormatEnum: %v", v)
	}
}

// GetNamesChangesOutputSrsEnum - The EPSG code of the spatial reference system (SRS) to use for output geometries.
type GetNamesChangesOutputSrsEnum int64

const (
	GetNamesChangesOutputSrsEnumFourThousandThreeHundredAndTwentySix   GetNamesChangesOutputSrsEnum = 4326
	GetNamesChangesOutputSrsEnumFourThousandTwoHundredAndSixtyNine     GetNamesChangesOutputSrsEnum = 4269
	GetNamesChangesOutputSrsEnumThreeThousandAndFive                   GetNamesChangesOutputSrsEnum = 3005
	GetNamesChangesOutputSrsEnumThreeThousandEightHundredAndFiftySeven GetNamesChangesOutputSrsEnum = 3857
	GetNamesChangesOutputSrsEnumTwentySixThousandNineHundredAndSeven   GetNamesChangesOutputSrsEnum = 26907
	GetNamesChangesOutputSrsEnumTwentySixThousandNineHundredAndEight   GetNamesChangesOutputSrsEnum = 26908
	GetNamesChangesOutputSrsEnumTwentySixThousandNineHundredAndNine    GetNamesChangesOutputSrsEnum = 26909
	GetNamesChangesOutputSrsEnumTwentySixThousandNineHundredAndTen     GetNamesChangesOutputSrsEnum = 26910
	GetNamesChangesOutputSrsEnumTwentySixThousandNineHundredAndEleven  GetNamesChangesOutputSrsEnum = 26911
)

func (e GetNamesChangesOutputSrsEnum) ToPointer() *GetNamesChangesOutputSrsEnum {
	return &e
}

func (e *GetNamesChangesOutputSrsEnum) UnmarshalJSON(data []byte) error {
	var v int64
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case 4326:
		fallthrough
	case 4269:
		fallthrough
	case 3005:
		fallthrough
	case 3857:
		fallthrough
	case 26907:
		fallthrough
	case 26908:
		fallthrough
	case 26909:
		fallthrough
	case 26910:
		fallthrough
	case 26911:
		*e = GetNamesChangesOutputSrsEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesChangesOutputSrsEnum: %v", v)
	}
}

// GetNamesChangesOutputStyleEnum - A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
type GetNamesChangesOutputStyleEnum string

const (
	GetNamesChangesOutputStyleEnumSummary GetNamesChangesOutputStyleEnum = "summary"
	GetNamesChangesOutputStyleEnumDetail  GetNamesChangesOutputStyleEnum = "detail"
)

func (e GetNamesChangesOutputStyleEnum) ToPointer() *GetNamesChangesOutputStyleEnum {
	return &e
}

func (e *GetNamesChangesOutputStyleEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "summary":
		fallthrough
	case "detail":
		*e = GetNamesChangesOutputStyleEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesChangesOutputStyleEnum: %v", v)
	}
}

// GetNamesChangesSortByEnum - The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
type GetNamesChangesSortByEnum string

const (
	GetNamesChangesSortByEnumName         GetNamesChangesSortByEnum = "name"
	GetNamesChangesSortByEnumFeatureType  GetNamesChangesSortByEnum = "featureType"
	GetNamesChangesSortByEnumDecisionDate GetNamesChangesSortByEnum = "decisionDate"
)

func (e GetNamesChangesSortByEnum) ToPointer() *GetNamesChangesSortByEnum {
	return &e
}

func (e *GetNamesChangesSortByEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "name":
		fallthrough
	case "featureType":
		fallthrough
	case "decisionDate":
		*e = GetNamesChangesSortByEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetNamesChangesSortByEnum: %v", v)
	}
}

type GetNamesChangesRequest struct {
	// A flag to indicate whether to embed the corresponding 'feature' into each matching name
	Embed *GetNamesChangesEmbedEnum `queryParam:"style=form,explode=true,name=embed"`
	// A filter to limit the search to names associated with features of a certain 'category'  The value of this parameter should be a 'featureCategoryCode' value returned by the /featureCategories resource, or an asterisk (*) to request that all feature categories be included.
	FeatureCategory *string `queryParam:"style=form,explode=true,name=featureCategory"`
	// A filter to limit the search to names associated with features of a certain 'class'  The value of this parameter should be a 'featureClassCode' value returned by the /featureClasses resource, or an asterisk (*) to request that all feature classes be included.
	FeatureClass *string `queryParam:"style=form,explode=true,name=featureClass"`
	// A filter to limit the search to names associated with features of a certain 'type'  The value of this parameter should be a 'featureTypeCode' value returned by the /featureTypes resource, or an asterisk (*) to request that all feature types be included
	FeatureType *string `queryParam:"style=form,explode=true,name=featureType"`
	// Defines the earliest date (YYYY-MM-DD format) of the change time window for the search
	FromDate int64 `queryParam:"style=form,explode=true,name=fromDate"`
	// The number of search results to return (1-200)
	ItemsPerPage *int64 `queryParam:"style=form,explode=true,name=itemsPerPage"`
	// The format of the output.
	OutputFormat GetNamesChangesOutputFormatEnum `queryParam:"style=form,explode=true,name=outputFormat"`
	// The EPSG code of the spatial reference system (SRS) to use for output geometries.
	OutputSRS *GetNamesChangesOutputSrsEnum `queryParam:"style=form,explode=true,name=outputSRS"`
	// A flag indicating whether to include with each matching name a succinct list of attributes (summary), or a comprehensive list of attributes (detail)
	OutputStyle *GetNamesChangesOutputStyleEnum `queryParam:"style=form,explode=true,name=outputStyle"`
	// The distance to move the accessPoint away from the curb and towards the inside of the parcel (in metres). Ignored if locationDescriptor not set to accessPoint.
	SortBy *GetNamesChangesSortByEnum `queryParam:"style=form,explode=true,name=sortBy"`
	// The index of the first record to be returned (>= 1)
	StartIndex *int64 `queryParam:"style=form,explode=true,name=startIndex"`
	// Defines the latest date (YYYY-MM-DD format) of the change time window for the search
	ToDate int64 `queryParam:"style=form,explode=true,name=toDate"`
}

type GetNamesChangesResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
