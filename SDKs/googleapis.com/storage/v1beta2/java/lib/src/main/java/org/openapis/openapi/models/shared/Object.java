/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Object - An object.
 */
public class Object {
    /**
     * Access controls on the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acl")
    public ObjectAccessControl[] acl;
    public Object withAcl(ObjectAccessControl[] acl) {
        this.acl = acl;
        return this;
    }
    
    /**
     * The bucket containing this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bucket")
    public String bucket;
    public Object withBucket(String bucket) {
        this.bucket = bucket;
        return this;
    }
    
    /**
     * Cache-Control directive for the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cacheControl")
    public String cacheControl;
    public Object withCacheControl(String cacheControl) {
        this.cacheControl = cacheControl;
        return this;
    }
    
    /**
     * Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("componentCount")
    public Integer componentCount;
    public Object withComponentCount(Integer componentCount) {
        this.componentCount = componentCount;
        return this;
    }
    
    /**
     * Content-Disposition of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentDisposition")
    public String contentDisposition;
    public Object withContentDisposition(String contentDisposition) {
        this.contentDisposition = contentDisposition;
        return this;
    }
    
    /**
     * Content-Encoding of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentEncoding")
    public String contentEncoding;
    public Object withContentEncoding(String contentEncoding) {
        this.contentEncoding = contentEncoding;
        return this;
    }
    
    /**
     * Content-Language of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentLanguage")
    public String contentLanguage;
    public Object withContentLanguage(String contentLanguage) {
        this.contentLanguage = contentLanguage;
        return this;
    }
    
    /**
     * Content-Type of the object data.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentType")
    public String contentType;
    public Object withContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }
    
    /**
     * CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crc32c")
    public String crc32c;
    public Object withCrc32c(String crc32c) {
        this.crc32c = crc32c;
        return this;
    }
    
    /**
     * HTTP 1.1 Entity tag for the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("etag")
    public String etag;
    public Object withEtag(String etag) {
        this.etag = etag;
        return this;
    }
    
    /**
     * The content generation of this object. Used for object versioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("generation")
    public String generation;
    public Object withGeneration(String generation) {
        this.generation = generation;
        return this;
    }
    
    /**
     * The ID of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;
    public Object withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The kind of item this is. For objects, this is always storage#object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Object withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * MD5 hash of the data; encoded using base64.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("md5Hash")
    public String md5Hash;
    public Object withMd5Hash(String md5Hash) {
        this.md5Hash = md5Hash;
        return this;
    }
    
    /**
     * Media download link.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaLink")
    public String mediaLink;
    public Object withMediaLink(String mediaLink) {
        this.mediaLink = mediaLink;
        return this;
    }
    
    /**
     * User-provided metadata, in key/value pairs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    public java.util.Map<String, String> metadata;
    public Object withMetadata(java.util.Map<String, String> metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metageneration")
    public String metageneration;
    public Object withMetageneration(String metageneration) {
        this.metageneration = metageneration;
        return this;
    }
    
    /**
     * The name of this object. Required if not specified by URL parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;
    public Object withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * The owner of the object. This will always be the uploader of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owner")
    public ObjectOwner owner;
    public Object withOwner(ObjectOwner owner) {
        this.owner = owner;
        return this;
    }
    
    /**
     * The link to this object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Object withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * Content-Length of the data in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public String size;
    public Object withSize(String size) {
        this.size = size;
        return this;
    }
    
    /**
     * Storage class of the object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storageClass")
    public String storageClass;
    public Object withStorageClass(String storageClass) {
        this.storageClass = storageClass;
        return this;
    }
    
    /**
     * Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("timeDeleted")
    public OffsetDateTime timeDeleted;
    public Object withTimeDeleted(OffsetDateTime timeDeleted) {
        this.timeDeleted = timeDeleted;
        return this;
    }
    
    /**
     * Modification time of the object metadata in RFC 3339 format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated")
    public OffsetDateTime updated;
    public Object withUpdated(OffsetDateTime updated) {
        this.updated = updated;
        return this;
    }
    
}
