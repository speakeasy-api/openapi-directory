"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentificationData = exports.IdentificationDataTypeEnum = void 0;
var utils_1 = require("../../../internal/utils");
var class_transformer_1 = require("class-transformer");
/**
 * Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.
 *
 * @remarks
 *
 * When providing ID numbers:
 * * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.
 *
 * When uploading photo IDs:
 * * For **individual**, the `type` values can be **identityCard**, **driversLicense**, or **passport**.
 *
 * When uploading other documents:
 * * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **vatDocument**, **proofOfOrganizationTaxInfo**, **proofOfOwnership**, or **proofOfIndustry**.
 *
 * * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **passport**, **proofOfNationalIdNumber**, **proofOfResidency**, **proofOfIndustry**, or **proofOfIndividualTaxId**.
 *
 * * For **soleProprietorship**, the `type` values can be **constitutionalDocument**, **proofOfAddress**, or **proofOfIndustry**.
 *
 * * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).
 */
var IdentificationDataTypeEnum;
(function (IdentificationDataTypeEnum) {
    IdentificationDataTypeEnum["BankStatement"] = "bankStatement";
    IdentificationDataTypeEnum["DriversLicense"] = "driversLicense";
    IdentificationDataTypeEnum["IdentityCard"] = "identityCard";
    IdentificationDataTypeEnum["NationalIdNumber"] = "nationalIdNumber";
    IdentificationDataTypeEnum["Passport"] = "passport";
    IdentificationDataTypeEnum["ProofOfAddress"] = "proofOfAddress";
    IdentificationDataTypeEnum["ProofOfNationalIdNumber"] = "proofOfNationalIdNumber";
    IdentificationDataTypeEnum["ProofOfResidency"] = "proofOfResidency";
    IdentificationDataTypeEnum["RegistrationDocument"] = "registrationDocument";
    IdentificationDataTypeEnum["VatDocument"] = "vatDocument";
    IdentificationDataTypeEnum["ProofOfOrganizationTaxInfo"] = "proofOfOrganizationTaxInfo";
    IdentificationDataTypeEnum["ProofOfIndustry"] = "proofOfIndustry";
    IdentificationDataTypeEnum["ConstitutionalDocument"] = "constitutionalDocument";
})(IdentificationDataTypeEnum = exports.IdentificationDataTypeEnum || (exports.IdentificationDataTypeEnum = {}));
var IdentificationData = /** @class */ (function (_super) {
    __extends(IdentificationData, _super);
    function IdentificationData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cardNumber" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "cardNumber", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "expiryDate" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "expiryDate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "issuerCountry" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "issuerCountry", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "issuerState" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "issuerState", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nationalIdExempt" }),
        __metadata("design:type", Boolean)
    ], IdentificationData.prototype, "nationalIdExempt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "number" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "number", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], IdentificationData.prototype, "type", void 0);
    return IdentificationData;
}(utils_1.SpeakeasyBase));
exports.IdentificationData = IdentificationData;
