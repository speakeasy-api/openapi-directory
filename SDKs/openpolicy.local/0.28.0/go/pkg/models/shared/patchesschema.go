// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// PatchesSchemaOpEnum - JSON patch operation type
type PatchesSchemaOpEnum string

const (
	PatchesSchemaOpEnumAdd     PatchesSchemaOpEnum = "add"
	PatchesSchemaOpEnumRemove  PatchesSchemaOpEnum = "remove"
	PatchesSchemaOpEnumReplace PatchesSchemaOpEnum = "replace"
	PatchesSchemaOpEnumMove    PatchesSchemaOpEnum = "move"
	PatchesSchemaOpEnumCopy    PatchesSchemaOpEnum = "copy"
	PatchesSchemaOpEnumTest    PatchesSchemaOpEnum = "test"
)

func (e *PatchesSchemaOpEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "add":
		fallthrough
	case "remove":
		fallthrough
	case "replace":
		fallthrough
	case "move":
		fallthrough
	case "copy":
		fallthrough
	case "test":
		*e = PatchesSchemaOpEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchesSchemaOpEnum: %s", s)
	}
}

// PatchesSchema - A JSON patch operation
type PatchesSchema struct {
	// JSON patch operation type
	Op PatchesSchemaOpEnum `json:"op"`
	// A [JSON pointer](https://tools.ietf.org/html/rfc6901) to a location within the target document where the operation is performed.
	//
	// The *effective path* is this value prefixed with the API call's `path` parameter.
	//
	// The server will return a *bad request* (404) response if:
	//
	// - The *parent* of the effective path does not refer to an existing document
	// - For **remove** and **replace** operations, the effective path does not refer to an existing document.
	Path string `json:"path"`
	// The value to add, replace or test.
	Value map[string]interface{} `json:"value,omitempty"`
}
