/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class GetChannelSecurity extends SpeakeasyBase {
  @SpeakeasyMetadata({
    data: "security, scheme=true;type=oauth2;name=Authorization",
  })
  oAuth: string;
}

export class GetChannelRequest extends SpeakeasyBase {
  /**
   * Channel ID: Unique Identifier of a channel.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=channelId",
  })
  channelId: string;

  /**
   * Unique identifier of the user who is the owner of the channel.
   */
  @SpeakeasyMetadata({
    data: "pathParam, style=simple;explode=false;name=userId",
  })
  userId: string;
}

/**
 * Type of the channel. The value can be one of the following:<br>
 *
 * @remarks
 * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
 * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
 * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
 */
export enum GetChannel200ApplicationXMLTypeEnum {
  One = "1",
  Two = "2",
  Three = "3",
}

/**
 * The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
 */
export class GetChannel200ApplicationXML extends SpeakeasyBase {
  /**
   * Channel Id.
   */
  @SpeakeasyMetadata()
  id?: string;

  /**
   * Name of the channel.
   */
  @SpeakeasyMetadata()
  name?: string;

  /**
   * Type of the channel. The value can be one of the following:<br>
   *
   * @remarks
   * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
   * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
   * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
   */
  @SpeakeasyMetadata()
  type?: GetChannel200ApplicationXMLTypeEnum;
}

/**
 * Type of the channel. The value can be one of the following:<br>
 *
 * @remarks
 * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
 * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
 * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
 */
export enum GetChannel200ApplicationJSONTypeEnum {
  One = "1",
  Two = "2",
  Three = "3",
}

/**
 * The channel object represents a Zoom chat [channel](https://support.zoom.us/hc/en-us/articles/200912909-Getting-Started-With-Channels-Group-Messaging-).
 */
export class GetChannel200ApplicationJSON extends SpeakeasyBase {
  /**
   * Channel Id.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "id" })
  id?: string;

  /**
   * Name of the channel.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "name" })
  name?: string;

  /**
   * Type of the channel. The value can be one of the following:<br>
   *
   * @remarks
   * `1`: Private channel. In this type of channel, members must be invited to join a channel.<br>
   * `2`: Private channel with members that belong to one Zoom account. Members in this channel should be invited and the members should be from the same organization.<br>
   * `3`: Public channel. Anyone can search for this channel and join the channel.<br>
   */
  @SpeakeasyMetadata()
  @Expose({ name: "type" })
  type?: GetChannel200ApplicationJSONTypeEnum;
}

export class GetChannelResponse extends SpeakeasyBase {
  @SpeakeasyMetadata()
  body?: Uint8Array;

  @SpeakeasyMetadata()
  contentType: string;

  @SpeakeasyMetadata()
  statusCode: number;

  @SpeakeasyMetadata()
  rawResponse?: AxiosResponse;

  /**
   * **HTTP Status Code:** `200`<br>
   *
   * @remarks
   * Channel returned.<br>
   *
   *
   *
   *
   */
  @SpeakeasyMetadata()
  getChannel200ApplicationJSONObject?: GetChannel200ApplicationJSON;
}
