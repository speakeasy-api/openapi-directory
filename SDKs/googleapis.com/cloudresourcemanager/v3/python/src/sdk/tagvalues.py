"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class TagValues:
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def cloudresourcemanager_tag_values_create(self, request: operations.CloudresourcemanagerTagValuesCreateRequest, security: operations.CloudresourcemanagerTagValuesCreateSecurity) -> operations.CloudresourcemanagerTagValuesCreateResponse:
        r"""Creates a TagValue as a child of the specified TagKey. If a another request with the same parameters is sent while the original request is in process the second request will receive an error. A maximum of 1000 TagValues can exist under a TagKey at any given time."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/tagValues'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_value_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudresourcemanager_tag_values_get(self, request: operations.CloudresourcemanagerTagValuesGetRequest, security: operations.CloudresourcemanagerTagValuesGetSecurity) -> operations.CloudresourcemanagerTagValuesGetResponse:
        r"""Retrieves a TagValue. This method will return `PERMISSION_DENIED` if the value does not exist or the user does not have permission to view it."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesGetRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesGetRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TagValue])
                res.tag_value = out

        return res

    def cloudresourcemanager_tag_values_get_iam_policy(self, request: operations.CloudresourcemanagerTagValuesGetIamPolicyRequest, security: operations.CloudresourcemanagerTagValuesGetIamPolicySecurity) -> operations.CloudresourcemanagerTagValuesGetIamPolicyResponse:
        r"""Gets the access control policy for a TagValue. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have the `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on the identified TagValue to get the access control policy."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesGetIamPolicyRequest, base_url, '/v3/{resource}:getIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "get_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesGetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesGetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def cloudresourcemanager_tag_values_list(self, request: operations.CloudresourcemanagerTagValuesListRequest, security: operations.CloudresourcemanagerTagValuesListSecurity) -> operations.CloudresourcemanagerTagValuesListResponse:
        r"""Lists all TagValues for a specific TagKey."""
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/v3/tagValues'
        
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagValuesResponse])
                res.list_tag_values_response = out

        return res

    def cloudresourcemanager_tag_values_patch(self, request: operations.CloudresourcemanagerTagValuesPatchRequest, security: operations.CloudresourcemanagerTagValuesPatchSecurity) -> operations.CloudresourcemanagerTagValuesPatchResponse:
        r"""Updates the attributes of the TagValue resource."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesPatchRequest, base_url, '/v3/{name}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_value_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesPatchRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('PATCH', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesPatchResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudresourcemanager_tag_values_set_iam_policy(self, request: operations.CloudresourcemanagerTagValuesSetIamPolicyRequest, security: operations.CloudresourcemanagerTagValuesSetIamPolicySecurity) -> operations.CloudresourcemanagerTagValuesSetIamPolicyResponse:
        r"""Sets the access control policy on a TagValue, replacing any existing policy. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have `resourcemanager.tagValues.setIamPolicy` permission on the identified tagValue."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesSetIamPolicyRequest, base_url, '/v3/{resource}:setIamPolicy', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "set_iam_policy_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesSetIamPolicyRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesSetIamPolicyResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Policy])
                res.policy = out

        return res

    def cloudresourcemanager_tag_values_tag_holds_create(self, request: operations.CloudresourcemanagerTagValuesTagHoldsCreateRequest, security: operations.CloudresourcemanagerTagValuesTagHoldsCreateSecurity) -> operations.CloudresourcemanagerTagValuesTagHoldsCreateResponse:
        r"""Creates a TagHold. Returns ALREADY_EXISTS if a TagHold with the same resource and origin exists under the same TagValue."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesTagHoldsCreateRequest, base_url, '/v3/{parent}/tagHolds', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "tag_hold_input", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesTagHoldsCreateRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesTagHoldsCreateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudresourcemanager_tag_values_tag_holds_delete(self, request: operations.CloudresourcemanagerTagValuesTagHoldsDeleteRequest, security: operations.CloudresourcemanagerTagValuesTagHoldsDeleteSecurity) -> operations.CloudresourcemanagerTagValuesTagHoldsDeleteResponse:
        r"""Deletes a TagHold."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesTagHoldsDeleteRequest, base_url, '/v3/{name}', request)
        
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesTagHoldsDeleteRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesTagHoldsDeleteResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Operation])
                res.operation = out

        return res

    def cloudresourcemanager_tag_values_tag_holds_list(self, request: operations.CloudresourcemanagerTagValuesTagHoldsListRequest, security: operations.CloudresourcemanagerTagValuesTagHoldsListSecurity) -> operations.CloudresourcemanagerTagValuesTagHoldsListResponse:
        r"""Lists TagHolds under a TagValue."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesTagHoldsListRequest, base_url, '/v3/{parent}/tagHolds', request)
        
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesTagHoldsListRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesTagHoldsListResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.ListTagHoldsResponse])
                res.list_tag_holds_response = out

        return res

    def cloudresourcemanager_tag_values_test_iam_permissions(self, request: operations.CloudresourcemanagerTagValuesTestIamPermissionsRequest, security: operations.CloudresourcemanagerTagValuesTestIamPermissionsSecurity) -> operations.CloudresourcemanagerTagValuesTestIamPermissionsResponse:
        r"""Returns permissions that a caller has on the specified TagValue. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. There are no permissions required for making this API call."""
        base_url = self._server_url
        
        url = utils.generate_url(operations.CloudresourcemanagerTagValuesTestIamPermissionsRequest, base_url, '/v3/{resource}:testIamPermissions', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "test_iam_permissions_request", 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        query_params = utils.get_query_params(operations.CloudresourcemanagerTagValuesTestIamPermissionsRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, params=query_params, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CloudresourcemanagerTagValuesTestIamPermissionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.TestIamPermissionsResponse])
                res.test_iam_permissions_response = out

        return res

    