/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

/**
 * Move projects to or from GitHub.
 */
export class Migrations {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete an organization migration archive
   *
   * @remarks
   * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#delete-an-organization-migration-archive} - API method documentation
   */
  migrationsDeleteArchiveForOrg(
    req: operations.MigrationsDeleteArchiveForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsDeleteArchiveForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsDeleteArchiveForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations/{migration_id}/archive",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsDeleteArchiveForOrgResponse =
        new operations.MigrationsDeleteArchiveForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download an organization migration archive
   *
   * @remarks
   * Fetches the URL to a migration archive.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#download-an-organization-migration-archive} - API method documentation
   */
  migrationsDownloadArchiveForOrg(
    req: operations.MigrationsDownloadArchiveForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsDownloadArchiveForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsDownloadArchiveForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations/{migration_id}/archive",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsDownloadArchiveForOrgResponse =
        new operations.MigrationsDownloadArchiveForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 302:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Download a user migration archive
   *
   * @remarks
   * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/users#download-a-user-migration-archive} - API method documentation
   */
  migrationsGetArchiveForAuthenticatedUser(
    req: operations.MigrationsGetArchiveForAuthenticatedUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsGetArchiveForAuthenticatedUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsGetArchiveForAuthenticatedUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/user/migrations/{migration_id}/archive",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsGetArchiveForAuthenticatedUserResponse =
        new operations.MigrationsGetArchiveForAuthenticatedUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case [302, 304].includes(httpRes?.status):
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Get an organization migration status
   *
   * @remarks
   * Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#get-an-organization-migration-status} - API method documentation
   */
  migrationsGetStatusForOrg(
    req: operations.MigrationsGetStatusForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsGetStatusForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsGetStatusForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations/{migration_id}",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsGetStatusForOrgResponse =
        new operations.MigrationsGetStatusForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.migration = utils.objectToClass(
              httpRes?.data,
              shared.Migration
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List user migrations
   *
   * @remarks
   * Lists all migrations a user has started.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/users#list-user-migrations} - API method documentation
   */
  migrationsListForAuthenticatedUser(
    req: operations.MigrationsListForAuthenticatedUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsListForAuthenticatedUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsListForAuthenticatedUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user/migrations";

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsListForAuthenticatedUserResponse =
        new operations.MigrationsListForAuthenticatedUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.migrations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.migrations = utils.objectToClass(
              httpRes?.data,
              shared.Migration,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List organization migrations
   *
   * @remarks
   * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which cannot be started using the REST API).
   *
   * A list of `repositories` is only returned for export migrations.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#list-organization-migrations} - API method documentation
   */
  migrationsListForOrg(
    req: operations.MigrationsListForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsListForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsListForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsListForOrgResponse =
        new operations.MigrationsListForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.migrations = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.migrations = utils.objectToClass(
              httpRes?.data,
              shared.Migration,
              resFieldDepth
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List repositories for a user migration
   *
   * @remarks
   * Lists all the repositories for this user migration.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/users#list-repositories-for-a-user-migration} - API method documentation
   */
  migrationsListReposForAuthenticatedUser(
    req: operations.MigrationsListReposForAuthenticatedUserRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsListReposForAuthenticatedUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsListReposForAuthenticatedUserRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/user/migrations/{migration_id}/repositories",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsListReposForAuthenticatedUserResponse =
        new operations.MigrationsListReposForAuthenticatedUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.minimalRepositories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.minimalRepositories = utils.objectToClass(
              httpRes?.data,
              shared.MinimalRepository,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * List repositories in an organization migration
   *
   * @remarks
   * List all the repositories for this organization migration.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#list-repositories-in-an-organization-migration} - API method documentation
   */
  migrationsListReposForOrg(
    req: operations.MigrationsListReposForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsListReposForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsListReposForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations/{migration_id}/repositories",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsListReposForOrgResponse =
        new operations.MigrationsListReposForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
          headers: utils.getHeadersFromResponse(httpRes.headers),
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.minimalRepositories = [];
            const resFieldDepth: number = utils.getResFieldDepth(res);
            res.minimalRepositories = utils.objectToClass(
              httpRes?.data,
              shared.MinimalRepository,
              resFieldDepth
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start a user migration
   *
   * @remarks
   * Initiates the generation of a user migration archive.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/users#start-a-user-migration} - API method documentation
   */
  migrationsStartForAuthenticatedUser(
    req: operations.MigrationsStartForAuthenticatedUserRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsStartForAuthenticatedUserResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsStartForAuthenticatedUserRequestBody(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/user/migrations";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsStartForAuthenticatedUserResponse =
        new operations.MigrationsStartForAuthenticatedUserResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.migration = utils.objectToClass(
              httpRes?.data,
              shared.Migration
            );
          }
          break;
        case httpRes?.status == 304:
          break;
        case [401, 403].includes(httpRes?.status):
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Start an organization migration
   *
   * @remarks
   * Initiates the generation of a migration archive.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#start-an-organization-migration} - API method documentation
   */
  migrationsStartForOrg(
    req: operations.MigrationsStartForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsStartForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsStartForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    const client: AxiosInstance = this._defaultClient;

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const r = client.request({
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsStartForOrgResponse =
        new operations.MigrationsStartForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 201:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.migration = utils.objectToClass(
              httpRes?.data,
              shared.Migration
            );
          }
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
        case httpRes?.status == 422:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.validationError = utils.objectToClass(
              httpRes?.data,
              shared.ValidationError
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Unlock an organization repository
   *
   * @remarks
   * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/enterprise-server@3.6/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
   *
   * @see {@link https://docs.github.com/enterprise-server@3.6/rest/migrations/orgs#unlock-an-organization-repository} - API method documentation
   */
  migrationsUnlockRepoForOrg(
    req: operations.MigrationsUnlockRepoForOrgRequest,
    config?: AxiosRequestConfig
  ): Promise<operations.MigrationsUnlockRepoForOrgResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.MigrationsUnlockRepoForOrgRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
      req
    );

    const client: AxiosInstance = this._defaultClient;

    const r = client.request({
      url: url,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.MigrationsUnlockRepoForOrgResponse =
        new operations.MigrationsUnlockRepoForOrgResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 204:
          break;
        case httpRes?.status == 404:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.basicError = utils.objectToClass(
              httpRes?.data,
              shared.BasicError
            );
          }
          break;
      }

      return res;
    });
  }
}
