// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
)

// GETDetectStackDriftActionEnum
type GETDetectStackDriftActionEnum string

const (
	GETDetectStackDriftActionEnumDetectStackDrift GETDetectStackDriftActionEnum = "DetectStackDrift"
)

func (e GETDetectStackDriftActionEnum) ToPointer() *GETDetectStackDriftActionEnum {
	return &e
}

func (e *GETDetectStackDriftActionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DetectStackDrift":
		*e = GETDetectStackDriftActionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetectStackDriftActionEnum: %v", v)
	}
}

// GETDetectStackDriftVersionEnum
type GETDetectStackDriftVersionEnum string

const (
	GETDetectStackDriftVersionEnumTwoThousandAndTen0515 GETDetectStackDriftVersionEnum = "2010-05-15"
)

func (e GETDetectStackDriftVersionEnum) ToPointer() *GETDetectStackDriftVersionEnum {
	return &e
}

func (e *GETDetectStackDriftVersionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "2010-05-15":
		*e = GETDetectStackDriftVersionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GETDetectStackDriftVersionEnum: %v", v)
	}
}

type GETDetectStackDriftRequest struct {
	Action GETDetectStackDriftActionEnum `queryParam:"style=form,explode=true,name=Action"`
	// The logical names of any resources you want to use as filters.
	LogicalResourceIds []string `queryParam:"style=form,explode=true,name=LogicalResourceIds"`
	// The name of the stack for which you want to detect drift.
	StackName         string                         `queryParam:"style=form,explode=true,name=StackName"`
	Version           GETDetectStackDriftVersionEnum `queryParam:"style=form,explode=true,name=Version"`
	XAmzAlgorithm     *string                        `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256 *string                        `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential    *string                        `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate          *string                        `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken *string                        `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature     *string                        `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders *string                        `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
}

type GETDetectStackDriftResponse struct {
	Body        []byte
	ContentType string
	StatusCode  int
	RawResponse *http.Response
}
