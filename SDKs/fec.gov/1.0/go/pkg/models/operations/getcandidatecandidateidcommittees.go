// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

type GetCandidateCandidateIDCommitteesCommitteeTypeEnum string

const (
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumUnknown GetCandidateCandidateIDCommitteesCommitteeTypeEnum = ""
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumC       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "C"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumD       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "D"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumE       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "E"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumH       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "H"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumI       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "I"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumN       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "N"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumO       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "O"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumP       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "P"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumQ       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "Q"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumS       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "S"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumU       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "U"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumV       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "V"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumW       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "W"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumX       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "X"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumY       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "Y"
	GetCandidateCandidateIDCommitteesCommitteeTypeEnumZ       GetCandidateCandidateIDCommitteesCommitteeTypeEnum = "Z"
)

func (e GetCandidateCandidateIDCommitteesCommitteeTypeEnum) ToPointer() *GetCandidateCandidateIDCommitteesCommitteeTypeEnum {
	return &e
}

func (e *GetCandidateCandidateIDCommitteesCommitteeTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "D":
		fallthrough
	case "E":
		fallthrough
	case "H":
		fallthrough
	case "I":
		fallthrough
	case "N":
		fallthrough
	case "O":
		fallthrough
	case "P":
		fallthrough
	case "Q":
		fallthrough
	case "S":
		fallthrough
	case "U":
		fallthrough
	case "V":
		fallthrough
	case "W":
		fallthrough
	case "X":
		fallthrough
	case "Y":
		fallthrough
	case "Z":
		*e = GetCandidateCandidateIDCommitteesCommitteeTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDCommitteesCommitteeTypeEnum: %v", v)
	}
}

type GetCandidateCandidateIDCommitteesDesignationEnum string

const (
	GetCandidateCandidateIDCommitteesDesignationEnumUnknown GetCandidateCandidateIDCommitteesDesignationEnum = ""
	GetCandidateCandidateIDCommitteesDesignationEnumA       GetCandidateCandidateIDCommitteesDesignationEnum = "A"
	GetCandidateCandidateIDCommitteesDesignationEnumJ       GetCandidateCandidateIDCommitteesDesignationEnum = "J"
	GetCandidateCandidateIDCommitteesDesignationEnumP       GetCandidateCandidateIDCommitteesDesignationEnum = "P"
	GetCandidateCandidateIDCommitteesDesignationEnumU       GetCandidateCandidateIDCommitteesDesignationEnum = "U"
	GetCandidateCandidateIDCommitteesDesignationEnumB       GetCandidateCandidateIDCommitteesDesignationEnum = "B"
	GetCandidateCandidateIDCommitteesDesignationEnumD       GetCandidateCandidateIDCommitteesDesignationEnum = "D"
)

func (e GetCandidateCandidateIDCommitteesDesignationEnum) ToPointer() *GetCandidateCandidateIDCommitteesDesignationEnum {
	return &e
}

func (e *GetCandidateCandidateIDCommitteesDesignationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "J":
		fallthrough
	case "P":
		fallthrough
	case "U":
		fallthrough
	case "B":
		fallthrough
	case "D":
		*e = GetCandidateCandidateIDCommitteesDesignationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDCommitteesDesignationEnum: %v", v)
	}
}

type GetCandidateCandidateIDCommitteesFilingFrequencyEnum string

const (
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumUnknown GetCandidateCandidateIDCommitteesFilingFrequencyEnum = ""
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumA       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "A"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumM       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "M"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumN       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "N"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumQ       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "Q"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumT       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "T"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumW       GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "W"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumMinusA  GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "-A"
	GetCandidateCandidateIDCommitteesFilingFrequencyEnumMinusT  GetCandidateCandidateIDCommitteesFilingFrequencyEnum = "-T"
)

func (e GetCandidateCandidateIDCommitteesFilingFrequencyEnum) ToPointer() *GetCandidateCandidateIDCommitteesFilingFrequencyEnum {
	return &e
}

func (e *GetCandidateCandidateIDCommitteesFilingFrequencyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "A":
		fallthrough
	case "M":
		fallthrough
	case "N":
		fallthrough
	case "Q":
		fallthrough
	case "T":
		fallthrough
	case "W":
		fallthrough
	case "-A":
		fallthrough
	case "-T":
		*e = GetCandidateCandidateIDCommitteesFilingFrequencyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDCommitteesFilingFrequencyEnum: %v", v)
	}
}

type GetCandidateCandidateIDCommitteesOrganizationTypeEnum string

const (
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumUnknown GetCandidateCandidateIDCommitteesOrganizationTypeEnum = ""
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumC       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "C"
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumL       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "L"
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumM       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "M"
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumT       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "T"
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumV       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "V"
	GetCandidateCandidateIDCommitteesOrganizationTypeEnumW       GetCandidateCandidateIDCommitteesOrganizationTypeEnum = "W"
)

func (e GetCandidateCandidateIDCommitteesOrganizationTypeEnum) ToPointer() *GetCandidateCandidateIDCommitteesOrganizationTypeEnum {
	return &e
}

func (e *GetCandidateCandidateIDCommitteesOrganizationTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "":
		fallthrough
	case "C":
		fallthrough
	case "L":
		fallthrough
	case "M":
		fallthrough
	case "T":
		fallthrough
	case "V":
		fallthrough
	case "W":
		*e = GetCandidateCandidateIDCommitteesOrganizationTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetCandidateCandidateIDCommitteesOrganizationTypeEnum: %v", v)
	}
}

type GetCandidateCandidateIDCommitteesRequest struct {
	// API key for https://api.data.gov. Get one at https://api.data.gov/signup.
	//
	APIKey string `queryParam:"style=form,explode=true,name=api_key"`
	// A unique identifier assigned to each candidate registered with the FEC.
	// If a person runs for several offices, that person will have separate candidate IDs for each office.
	// First character indicates office - [P]residential, [H]ouse, [S]enate].
	// Second character is the last digit of the two-year period the ID was created.
	// Third and fourth is the candidate state. Presidential IDs don't have state.
	// Fifth and sixth is the district when the candidate first ran. This does not change if the
	// candidate/member's district changes during re-districting. Presidential IDs don't have districts.
	// The rest is sequence.
	//
	CandidateID string `pathParam:"style=simple,explode=false,name=candidate_id"`
	// The one-letter type code of the organization:
	//         - C communication cost
	//         - D delegate
	//         - E electioneering communication
	//         - H House
	//         - I independent expenditure filer (not a committee)
	//         - N PAC - nonqualified
	//         - O independent expenditure-only (super PACs)
	//         - P presidential
	//         - Q PAC - qualified
	//         - S Senate
	//         - U single candidate independent expenditure
	//         - V PAC with non-contribution account, nonqualified
	//         - W PAC with non-contribution account, qualified
	//         - X party, nonqualified
	//         - Y party, qualified
	//         - Z national party non-federal account
	//
	CommitteeType []GetCandidateCandidateIDCommitteesCommitteeTypeEnum `queryParam:"style=form,explode=true,name=committee_type"`
	// A two year election cycle that the committee was active- (after original registration
	// date but before expiration date in Form 1s) The cycle begins with
	// an odd year and is named for its ending, even year.
	//
	Cycle []int `queryParam:"style=form,explode=true,name=cycle"`
	// The one-letter designation code of the organization:
	//          - A authorized by a candidate
	//          - J joint fundraising committee
	//          - P principal campaign committee of a candidate
	//          - U unauthorized
	//          - B lobbyist/registrant PAC
	//          - D leadership PAC
	//
	Designation []GetCandidateCandidateIDCommitteesDesignationEnum `queryParam:"style=form,explode=true,name=designation"`
	// The one-letter
	//     code of the filing frequency:
	//          - A Administratively terminated
	//          - D Debt
	//          - M Monthly filer
	//          - Q Quarterly filer
	//          - T Terminated
	//          - W Waived
	//
	FilingFrequency []GetCandidateCandidateIDCommitteesFilingFrequencyEnum `queryParam:"style=form,explode=true,name=filing_frequency"`
	// The one-letter code for the kind for organization:
	//         - C corporation
	//         - L labor organization
	//         - M membership organization
	//         - T trade association
	//         - V cooperative
	//         - W corporation without capital stock
	//
	OrganizationType []GetCandidateCandidateIDCommitteesOrganizationTypeEnum `queryParam:"style=form,explode=true,name=organization_type"`
	// For paginating through results, starting at page 1
	Page *int `queryParam:"style=form,explode=true,name=page"`
	// The number of results returned per page. Defaults to 20.
	PerPage *int `queryParam:"style=form,explode=true,name=per_page"`
	// Provide a field to sort by. Use `-` for descending order.
	//
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Hide null values on sorted column(s).
	SortHideNull *bool `queryParam:"style=form,explode=true,name=sort_hide_null"`
	// Toggle that filters out all rows having sort column that is non-null
	SortNullOnly *bool `queryParam:"style=form,explode=true,name=sort_null_only"`
	// Toggle that sorts null values last
	SortNullsLast *bool `queryParam:"style=form,explode=true,name=sort_nulls_last"`
	// A year that the committee was active— (after original registration date     or filing but before expiration date)
	Year []int `queryParam:"style=form,explode=true,name=year"`
}

type GetCandidateCandidateIDCommitteesResponse struct {
	CommitteeDetailPage *shared.CommitteeDetailPage
	ContentType         string
	StatusCode          int
	RawResponse         *http.Response
}
