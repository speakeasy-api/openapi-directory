<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace OpenAPI\OpenAPI;

class Clients 
{

	// SDK private variables namespaced with _ to avoid conflicts with API models
	private \GuzzleHttp\ClientInterface $_defaultClient;
	private \GuzzleHttp\ClientInterface $_securityClient;
	private string $_serverUrl;
	private string $_language;
	private string $_sdkVersion;
	private string $_genVersion;	

	/**
	 * @param \GuzzleHttp\ClientInterface $defaultClient
	 * @param \GuzzleHttp\ClientInterface $securityClient
	 * @param string $serverUrl
	 * @param string $language
	 * @param string $sdkVersion
	 * @param string $genVersion
	 */
	public function __construct(\GuzzleHttp\ClientInterface $defaultClient, \GuzzleHttp\ClientInterface $securityClient, string $serverUrl, string $language, string $sdkVersion, string $genVersion)
	{
		$this->_defaultClient = $defaultClient;
		$this->_securityClient = $securityClient;
		$this->_serverUrl = $serverUrl;
		$this->_language = $language;
		$this->_sdkVersion = $sdkVersion;
		$this->_genVersion = $genVersion;
	}
	
    /**
     * Creates a new person.
     * 
     * Creates a new person. Required fields are presented in the example. Other fields (from PUT) may also be specified here.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CustomerPersonDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create2Response
     */
	public function create2(
        \OpenAPI\OpenAPI\Models\Shared\CustomerPersonDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerPersonDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerPersonDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Creates a new client.
     * 
     * Creates a new client. All available fields are presented in PUT request.<p>
     *   Required fields:
     *   <ul>
     *     <li>name</li>
     *     <li>fullName</li>
     *     <li>contact -> emails -> primary</li>
     *   </ul>
     * </p>
     * 
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\CustomerDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Create3Response
     */
	public function create3(
        \OpenAPI\OpenAPI\Models\Shared\CustomerDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Create3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Create3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Removes a person.
     * 
     * Removes a person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete3Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete3Response
     */
	public function delete3(
        \OpenAPI\OpenAPI\Models\Operations\Delete3Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete3Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\Delete3Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete3Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a customer price list.
     * 
     * Removes a customer price list.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete4Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete4Response
     */
	public function delete4(
        \OpenAPI\OpenAPI\Models\Operations\Delete4Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete4Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/priceLists/{priceListId}', \OpenAPI\OpenAPI\Models\Operations\Delete4Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete4Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Removes a client.
     * 
     * Removes a client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Delete5Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Delete5Response
     */
	public function delete5(
        \OpenAPI\OpenAPI\Models\Operations\Delete5Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Delete5Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}', \OpenAPI\OpenAPI\Models\Operations\Delete5Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Delete5Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Generates a single use sign-in token.
     * 
     * Generates a single use sign-in token for the customer person found for given login or e-mail. Returns 'url' and 'token' which allows to sign-in to customer portal as this person. Token is valid for two minutes and can be used only once. To sign-in to customer portal you should post 'token' provided as the 'accessToken' form param to the 'url' using POST method.Detailed description is available in the Customer API <a href="/api-doc/customer-api/authentication">authentication</a>.
     * 
     * @param \OpenAPI\OpenAPI\Models\Shared\AccessTokenRequestDTO $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GenerateSingleUseSignInTokenResponse
     */
	public function generateSingleUseSignInToken(
        \OpenAPI\OpenAPI\Models\Shared\AccessTokenRequestDTO $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GenerateSingleUseSignInTokenResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/accessToken');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GenerateSingleUseSignInTokenResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->accessTokenDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AccessTokenDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns address of a given client.
     * 
     * Returns address of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
     */
	public function getAddress(
        \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/address', \OpenAPI\OpenAPI\Models\Operations\GetAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns persons' internal identifiers.
     * 
     * Returns persons' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds1Response
     */
	public function getAllIds1(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds1Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds1DefaultApplicationVndXtrfV1PlusJsonInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns clients' internal identifiers.
     * 
     * Returns clients' internal identifiers.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllIds2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllIds2Response
     */
	public function getAllIds2(
        \OpenAPI\OpenAPI\Models\Operations\GetAllIds2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllIds2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/ids');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllIds2Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllIds2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->getAllIds2DefaultApplicationJSONInt32Integers = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns list of simple clients representations
     * 
     * Returns list of simple clients representations
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsResponse
     */
	public function getAllNamesWithIds(
        \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsRequest::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetAllNamesWithIdsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->entityWithNameDTOS = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\EntityWithNameDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns person details.
     * 
     * Returns person details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById1Response
     */
	public function getById1(
        \OpenAPI\OpenAPI\Models\Operations\GetById1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\GetById1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerPersonDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerPersonDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns client details.
     * 
     * Returns client details.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetById2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetById2Response
     */
	public function getById2(
        \OpenAPI\OpenAPI\Models\Operations\GetById2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetById2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}', \OpenAPI\OpenAPI\Models\Operations\GetById2Request::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\OpenAPI\OpenAPI\Models\Operations\GetById2Request::class, $request, null));
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetById2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns categories of a given client.
     * 
     * Returns categories of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCategoriesResponse
     */
	public function getCategories(
        \OpenAPI\OpenAPI\Models\Operations\GetCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/categories', \OpenAPI\OpenAPI\Models\Operations\GetCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categoriesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns contact of a given person.
     * 
     * Returns contact of a given person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
     */
	public function getContact(
        \OpenAPI\OpenAPI\Models\Operations\GetContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}/contact', \OpenAPI\OpenAPI\Models\Operations\GetContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personContactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns contact of a given client.
     * 
     * Returns contact of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetContact1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetContact1Response
     */
	public function getContact1(
        \OpenAPI\OpenAPI\Models\Operations\GetContact1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetContact1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/contact', \OpenAPI\OpenAPI\Models\Operations\GetContact1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetContact1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns correspondence address of a given client.
     * 
     * Returns correspondence address of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressResponse
     */
	public function getCorrespondenceAddress(
        \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/correspondenceAddress', \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCorrespondenceAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom field of a given client.
     * 
     * Returns custom field of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldResponse
     */
	public function getCustomField(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/customFields/{customFieldKey}', \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given person.
     * 
     * Returns custom fields of a given person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsResponse
     */
	public function getCustomFields(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns custom fields of a given client.
     * 
     * Returns custom fields of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Response
     */
	public function getCustomFields1(
        \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/customFields', \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Request::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetCustomFields1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Returns industries of a given client.
     * 
     * Returns industries of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\GetIndustriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\GetIndustriesResponse
     */
	public function getIndustries(
        \OpenAPI\OpenAPI\Models\Operations\GetIndustriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\GetIndustriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/industries', \OpenAPI\OpenAPI\Models\Operations\GetIndustriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        
        $httpResponse = $this->_securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\GetIndustriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->industriesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates address of a given client.
     * 
     * Updates address of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse
     */
	public function updateAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/address', \OpenAPI\OpenAPI\Models\Operations\UpdateAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addressDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates categories of a given client.
     * 
     * Updates categories of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesResponse
     */
	public function updateCategories(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/categories', \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCategoriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->categoriesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates contact of a given person.
     * 
     * Updates contact of a given person. Sets that this person uses specific address and contact (not the one from customer).
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse
     */
	public function updateContact(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}/contact', \OpenAPI\OpenAPI\Models\Operations\UpdateContactRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "personContactDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContactResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->personContactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\PersonContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates contact of a given client.
     * 
     * Updates contact of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Response
     */
	public function updateContact1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/contact', \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "contactDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateContact1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->contactDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\ContactDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates correspondence address of a given client.
     * 
     * Updates correspondence address of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressResponse
     */
	public function updateCorrespondenceAddress(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/correspondenceAddress', \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "addressDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCorrespondenceAddressResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->addressDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\AddressDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates given custom field of a given client.
     * 
     * Updates given custom field of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldResponse
     */
	public function updateCustomField(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/customFields/{customFieldKey}', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customFieldDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given person.
     * 
     * Updates custom fields of a given person.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsResponse
     */
	public function updateCustomFields(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFieldsResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates custom fields of a given client.
     * 
     * Updates custom fields of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Response
     */
	public function updateCustomFields1(
        \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/customFields', \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateCustomFields1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customFieldsDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<OpenAPI\OpenAPI\Models\Shared\CustomFieldDTO>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates industries of a given client.
     * 
     * Updates industries of a given client.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesRequest $request
     * @return \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesResponse
     */
	public function updateIndustries(
        \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesRequest $request,
    ): \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesResponse
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}/industries', \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "requestBody", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\UpdateIndustriesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->industriesDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'array<int>', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing person.
     * 
     * Only specified fields will be changed. One may not specify embeddable fields here - use separate API calls for updating them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Update1Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Update1Response
     */
	public function update1(
        \OpenAPI\OpenAPI\Models\Operations\Update1Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Update1Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/persons/{personId}', \OpenAPI\OpenAPI\Models\Operations\Update1Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerPersonDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Update1Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerPersonDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerPersonDTO', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Updates an existing client.
     * 
     * Only specified fields will be changed (id is required). One may not specify embeddable fields here - use separate API calls for updating them.
     * 
     * @param \OpenAPI\OpenAPI\Models\Operations\Update2Request $request
     * @return \OpenAPI\OpenAPI\Models\Operations\Update2Response
     */
	public function update2(
        \OpenAPI\OpenAPI\Models\Operations\Update2Request $request,
    ): \OpenAPI\OpenAPI\Models\Operations\Update2Response
    {
        $baseUrl = $this->_serverUrl;
        $url = Utils\Utils::generateUrl($baseUrl, '/customers/{customerId}', \OpenAPI\OpenAPI\Models\Operations\Update2Request::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "customerDTO", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        
        $httpResponse = $this->_securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \OpenAPI\OpenAPI\Models\Operations\Update2Response();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if (true) { /** @phpstan-ignore-line */
            if (Utils\Utils::matchContentType($contentType, 'application/vnd.xtrf-v1+json;charset=UTF-8')) {
                $serializer = Utils\JSON::createSerializer();
                $response->customerDTO = $serializer->deserialize((string)$httpResponse->getBody(), 'OpenAPI\OpenAPI\Models\Shared\CustomerDTO', 'json');
            }
        }

        return $response;
    }
}