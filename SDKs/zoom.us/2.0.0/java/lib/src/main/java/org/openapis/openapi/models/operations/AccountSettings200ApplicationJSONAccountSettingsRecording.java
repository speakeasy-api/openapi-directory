/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AccountSettings200ApplicationJSONAccountSettingsRecording - Account Settings: Recording.
 */
public class AccountSettings200ApplicationJSONAccountSettingsRecording {
    /**
     * Cloud recordings are only accessible to account members. People outside of your organization cannot open links that provide access to cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_user_access_recording")
    public Boolean accountUserAccessRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withAccountUserAccessRecording(Boolean accountUserAccessRecording) {
        this.accountUserAccessRecording = accountUserAccessRecording;
        return this;
    }
    
    /**
     * Allow recovery of deleted cloud recordings from trash. 
     * If the value of this field is set to `true`, deleted cloud recordings will be kept in trash for 30 days after deletion and can be recovered within that period. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allow_recovery_deleted_cloud_recordings")
    public Boolean allowRecoveryDeletedCloudRecordings;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withAllowRecoveryDeletedCloudRecordings(Boolean allowRecoveryDeletedCloudRecordings) {
        this.allowRecoveryDeletedCloudRecordings = allowRecoveryDeletedCloudRecordings;
        return this;
    }
    
    /**
     * [Archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-Meeting-and-Webinar-data) settings. This setting can only be used if you have been granted with archiving solution access by the Zoom support team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archive")
    public AccountSettings200ApplicationJSONAccountSettingsRecordingArchive archive;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withArchive(AccountSettings200ApplicationJSONAccountSettingsRecordingArchive archive) {
        this.archive = archive;
        return this;
    }
    
    /**
     * Allow Zoom to permanantly delete recordings automatically after a specified number of days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_delete_cmr")
    public Boolean autoDeleteCmr;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withAutoDeleteCmr(Boolean autoDeleteCmr) {
        this.autoDeleteCmr = autoDeleteCmr;
        return this;
    }
    
    /**
     * When `auto_delete_cmr` function is 'true' this value will set the number of days before the auto deletion of cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_delete_cmr_days")
    public Long autoDeleteCmrDays;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withAutoDeleteCmrDays(Long autoDeleteCmrDays) {
        this.autoDeleteCmrDays = autoDeleteCmrDays;
        return this;
    }
    
    /**
     * Automatic recording:&lt;br&gt;`local` - Record on local.&lt;br&gt;`cloud` -  Record on cloud.&lt;br&gt;`none` - Disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_recording")
    public AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum autoRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withAutoRecording(AccountSettings200ApplicationJSONAccountSettingsRecordingAutoRecordingEnum autoRecording) {
        this.autoRecording = autoRecording;
        return this;
    }
    
    /**
     * Allow hosts to record and save the meeting in the cloud.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording")
    public Boolean cloudRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withCloudRecording(Boolean cloudRecording) {
        this.cloudRecording = cloudRecording;
        return this;
    }
    
    /**
     * Cloud recording downloads.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording_download")
    public Boolean cloudRecordingDownload;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withCloudRecordingDownload(Boolean cloudRecordingDownload) {
        this.cloudRecordingDownload = cloudRecordingDownload;
        return this;
    }
    
    /**
     * Only the host can download cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cloud_recording_download_host")
    public Boolean cloudRecordingDownloadHost;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withCloudRecordingDownloadHost(Boolean cloudRecordingDownloadHost) {
        this.cloudRecordingDownloadHost = cloudRecordingDownloadHost;
        return this;
    }
    
    /**
     * If the value of this field is set to `true`, hosts will be able to delete the recordings. If this option is set to `false`, the recordings cannot be deleted by the host and only admin can delete them.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_delete_cloud_recording")
    public Boolean hostDeleteCloudRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withHostDeleteCloudRecording(Boolean hostDeleteCloudRecording) {
        this.hostDeleteCloudRecording = hostDeleteCloudRecording;
        return this;
    }
    
    /**
     * Setting to allow cloud recording access only from specific IP address ranges.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address_access_control")
    public AccountSettings200ApplicationJSONAccountSettingsRecordingIpAddressAccessControl ipAddressAccessControl;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withIpAddressAccessControl(AccountSettings200ApplicationJSONAccountSettingsRecordingIpAddressAccessControl ipAddressAccessControl) {
        this.ipAddressAccessControl = ipAddressAccessControl;
        return this;
    }
    
    /**
     * Allow hosts and participants to record the meeting using a local file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("local_recording")
    public Boolean localRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withLocalRecording(Boolean localRecording) {
        this.localRecording = localRecording;
        return this;
    }
    
    /**
     * If set to `true`, meeting hosts cannot view their meeting cloud recordings. Only the admins who have recording management privilege can access them.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prevent_host_access_recording")
    public Boolean preventHostAccessRecording;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withPreventHostAccessRecording(Boolean preventHostAccessRecording) {
        this.preventHostAccessRecording = preventHostAccessRecording;
        return this;
    }
    
    /**
     * Record an audio only file.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_audio_file")
    public Boolean recordAudioFile;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordAudioFile(Boolean recordAudioFile) {
        this.recordAudioFile = recordAudioFile;
        return this;
    }
    
    /**
     * Record the gallery view with a shared screen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_gallery_view")
    public Boolean recordGalleryView;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordGalleryView(Boolean recordGalleryView) {
        this.recordGalleryView = recordGalleryView;
        return this;
    }
    
    /**
     * Record the active speaker with a shared screen.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("record_speaker_view")
    public Boolean recordSpeakerView;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordSpeakerView(Boolean recordSpeakerView) {
        this.recordSpeakerView = recordSpeakerView;
        return this;
    }
    
    /**
     * Automatically transcribe the audio of the meeting or webinar to the cloud.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_audio_transcript")
    public Boolean recordingAudioTranscript;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordingAudioTranscript(Boolean recordingAudioTranscript) {
        this.recordingAudioTranscript = recordingAudioTranscript;
        return this;
    }
    
    /**
     * Show a disclaimer to participants before a recording starts
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_disclaimer")
    public Boolean recordingDisclaimer;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordingDisclaimer(Boolean recordingDisclaimer) {
        this.recordingDisclaimer = recordingDisclaimer;
        return this;
    }
    
    /**
     * This object represents the minimum password requirements set for recordings via Account Recording Settings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_password_requirement")
    public AccountSettings200ApplicationJSONAccountSettingsRecordingRecordingPasswordRequirement recordingPasswordRequirement;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRecordingPasswordRequirement(AccountSettings200ApplicationJSONAccountSettingsRecordingRecordingPasswordRequirement recordingPasswordRequirement) {
        this.recordingPasswordRequirement = recordingPasswordRequirement;
        return this;
    }
    
    /**
     * Require a passcode to access existing cloud recordings.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required_password_for_existing_cloud_recordings")
    public Boolean requiredPasswordForExistingCloudRecordings;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withRequiredPasswordForExistingCloudRecordings(Boolean requiredPasswordForExistingCloudRecordings) {
        this.requiredPasswordForExistingCloudRecordings = requiredPasswordForExistingCloudRecordings;
        return this;
    }
    
    /**
     * Save the chat text from the meeting.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("save_chat_text")
    public Boolean saveChatText;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withSaveChatText(Boolean saveChatText) {
        this.saveChatText = saveChatText;
        return this;
    }
    
    /**
     * Add a timestamp to the recording.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("show_timestamp")
    public Boolean showTimestamp;
    public AccountSettings200ApplicationJSONAccountSettingsRecording withShowTimestamp(Boolean showTimestamp) {
        this.showTimestamp = showTimestamp;
        return this;
    }
    
}
