// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ProvisionedProductStatusEnum string

const (
	ProvisionedProductStatusEnumAvailable      ProvisionedProductStatusEnum = "AVAILABLE"
	ProvisionedProductStatusEnumUnderChange    ProvisionedProductStatusEnum = "UNDER_CHANGE"
	ProvisionedProductStatusEnumTainted        ProvisionedProductStatusEnum = "TAINTED"
	ProvisionedProductStatusEnumError          ProvisionedProductStatusEnum = "ERROR"
	ProvisionedProductStatusEnumPlanInProgress ProvisionedProductStatusEnum = "PLAN_IN_PROGRESS"
)

func (e ProvisionedProductStatusEnum) ToPointer() *ProvisionedProductStatusEnum {
	return &e
}

func (e *ProvisionedProductStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AVAILABLE":
		fallthrough
	case "UNDER_CHANGE":
		fallthrough
	case "TAINTED":
		fallthrough
	case "ERROR":
		fallthrough
	case "PLAN_IN_PROGRESS":
		*e = ProvisionedProductStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProvisionedProductStatusEnum: %v", v)
	}
}
