"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from sdk.models import operations, shared
from typing import Optional

class Product:
    r"""Product operations
    https://netlicensing.io/wiki/product-services - Product Services
    """
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    def create_product(self, request: operations.CreateProductRequestBody, security: operations.CreateProductSecurity) -> operations.CreateProductResponse:
        r"""Create Product
        Creates a new Product
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/product'
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.CreateProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 402, 403, 404, 500]:
            pass

        return res

    def delete_product(self, request: operations.DeleteProductRequest, security: operations.DeleteProductSecurity) -> operations.DeleteProductResponse:
        r"""Delete Product
        Delete a Product by 'number'
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.DeleteProductRequest, base_url, '/product/{productNumber}', request)
        
        query_params = utils.get_query_params(operations.DeleteProductRequest, request)
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('DELETE', url, params=query_params)
        content_type = http_res.headers.get('Content-Type')

        res = operations.DeleteProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def list_products(self) -> operations.ListProductsResponse:
        r"""List Products
        Return a list of all configured Products for the current Vendor
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/product'
        
        
        client = self._client
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ListProductsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[list[shared.Netlicensing]])
                res.netlicensings = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def product_number(self, request: operations.ProductNumberRequest, security: operations.ProductNumberSecurity) -> operations.ProductNumberResponse:
        r"""Get Product
        Return a Product by 'productNumber'
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.ProductNumberRequest, base_url, '/product/{productNumber}', request)
        
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url)
        content_type = http_res.headers.get('Content-Type')

        res = operations.ProductNumberResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 403, 404, 500]:
            pass

        return res

    def update_product(self, request: operations.UpdateProductRequest, security: operations.UpdateProductSecurity) -> operations.UpdateProductResponse:
        r"""Update Product
        Sets the provided properties to a Product. Return an updated Product
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.UpdateProductRequest, base_url, '/product/{productNumber}', request)
        
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request_body", 'form')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.UpdateProductResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[shared.Netlicensing])
                res.netlicensing = out
            if utils.match_content_type(content_type, 'application/xml'):
                res.body = http_res.content
        elif http_res.status_code in [400, 402, 403, 404, 500]:
            pass

        return res

    