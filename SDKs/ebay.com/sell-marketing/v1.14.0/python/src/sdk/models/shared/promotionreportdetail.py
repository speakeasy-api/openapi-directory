"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import amount as shared_amount
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PromotionReportDetail:
    r"""This type defines the fields in a promotion-level report."""
    
    average_item_discount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageItemDiscount'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    average_item_revenue: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageItemRevenue'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    average_order_discount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageOrderDiscount'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    average_order_revenue: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageOrderRevenue'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    average_order_size: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('averageOrderSize'), 'exclude': lambda f: f is None }})
    r"""The <i>average order size</i> is the average number of items that each order contained in a promotion. This value is calculated as follows:  <br><br><b>itemsSoldQuantity</b> / <b>numberOfOrdersSold</b> = <b>averageOrderSize</b>"""  
    base_sale: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('baseSale'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    items_sold_quantity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('itemsSoldQuantity'), 'exclude': lambda f: f is None }})
    r"""This is the quantity of items purchased in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your number of items sold (<b>itemsSoldQuantity</b>) would be 2 and you number of orders sold (<b>numberOfOrdersSold</b>) would be 1."""  
    number_of_orders_sold: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('numberOfOrdersSold'), 'exclude': lambda f: f is None }})
    r"""This is the number of orders sold in a threshold promotion where the threshold <i>has been met</i> and the discount was applied. <br><br>For example, suppose you're running a \"Buy 1, get 1 at 50%\" promotion on $5 socks. One buyer purchases two pairs of socks, so they pay $7.50 for both pairs (rather than the full price of $10). Your <b>numberOfOrdersSold</b> would be 1 and your <b>itemsSoldQuantity</b> would be 2."""  
    percentage_sales_lift: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('percentageSalesLift'), 'exclude': lambda f: f is None }})
    r"""The <i>percentage sales lift</i> is the total dollar amount gained due to promotions. This value is calculated as follows:  <br><br> <b>promotionSale</b> / <b>totalSale</b> =  <b>percentageSalesLift</b>"""  
    promotion_href: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionHref'), 'exclude': lambda f: f is None }})
    r"""The URI of the promotion report."""  
    promotion_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionId'), 'exclude': lambda f: f is None }})
    r"""A unique eBay-assigned ID for the promotion that's generated when the promotion is created."""  
    promotion_report_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionReportId'), 'exclude': lambda f: f is None }})
    r"""The unique eBay-assigned ID of the promotion report that is generated when the report is created."""  
    promotion_sale: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionSale'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    promotion_type: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('promotionType'), 'exclude': lambda f: f is None }})
    r"""Indicates the type of the promotion, either <code>CODED_COUPON</code>, <code>MARKDOWN_SALE</code>, <code>ORDER_DISCOUNT</code>, or <code>VOLUME_DISCOUNT</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/marketing/types/sme:PromotionTypeEnum'>eBay API documentation</a>"""  
    total_discount: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalDiscount'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    total_sale: Optional[shared_amount.Amount] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('totalSale'), 'exclude': lambda f: f is None }})
    r"""A complex type that describes the value of a monetary amount as represented by a global currency."""  
    