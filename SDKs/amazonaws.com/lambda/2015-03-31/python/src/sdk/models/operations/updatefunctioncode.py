"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import architecture_enum as shared_architecture_enum
from ..shared import functionconfiguration as shared_functionconfiguration
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Any, Optional


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UpdateFunctionCodeRequestBody:
    
    architectures: Optional[list[shared_architecture_enum.ArchitectureEnum]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Architectures'), 'exclude': lambda f: f is None }})
    r"""The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>."""  
    dry_run: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('DryRun'), 'exclude': lambda f: f is None }})
    r"""Set to true to validate the request parameters and access permissions without modifying the function code."""  
    image_uri: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ImageUri'), 'exclude': lambda f: f is None }})
    r"""URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive."""  
    publish: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('Publish'), 'exclude': lambda f: f is None }})
    r"""Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately."""  
    revision_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('RevisionId'), 'exclude': lambda f: f is None }})
    r"""Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it."""  
    s3_bucket: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Bucket'), 'exclude': lambda f: f is None }})
    r"""An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package."""  
    s3_key: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3Key'), 'exclude': lambda f: f is None }})
    r"""The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package."""  
    s3_object_version: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('S3ObjectVersion'), 'exclude': lambda f: f is None }})
    r"""For versioned objects, the version of the deployment package object to use."""  
    zip_file: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ZipFile'), 'exclude': lambda f: f is None }})
    r"""The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients handle the encoding for you. Use only with a function defined with a .zip file archive deployment package."""  
    

@dataclasses.dataclass
class UpdateFunctionCodeRequest:
    
    function_name: str = dataclasses.field(metadata={'path_param': { 'field_name': 'FunctionName', 'style': 'simple', 'explode': False }})
    r"""<p>The name of the Lambda function.</p> <p class=\\"title\\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"""  
    request_body: UpdateFunctionCodeRequestBody = dataclasses.field(metadata={'request': { 'media_type': 'application/json' }})  
    x_amz_algorithm: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Algorithm', 'style': 'simple', 'explode': False }})  
    x_amz_content_sha256: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Content-Sha256', 'style': 'simple', 'explode': False }})  
    x_amz_credential: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Credential', 'style': 'simple', 'explode': False }})  
    x_amz_date: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Date', 'style': 'simple', 'explode': False }})  
    x_amz_security_token: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Security-Token', 'style': 'simple', 'explode': False }})  
    x_amz_signature: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-Signature', 'style': 'simple', 'explode': False }})  
    x_amz_signed_headers: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'X-Amz-SignedHeaders', 'style': 'simple', 'explode': False }})  
    

@dataclasses.dataclass
class UpdateFunctionCodeResponse:
    
    content_type: str = dataclasses.field()  
    status_code: int = dataclasses.field()  
    code_signing_config_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeSigningConfigNotFoundException"""  
    code_storage_exceeded_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeStorageExceededException"""  
    code_verification_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""CodeVerificationFailedException"""  
    function_configuration: Optional[shared_functionconfiguration.FunctionConfiguration] = dataclasses.field(default=None)
    r"""Success"""  
    invalid_code_signature_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidCodeSignatureException"""  
    invalid_parameter_value_exception: Optional[Any] = dataclasses.field(default=None)
    r"""InvalidParameterValueException"""  
    precondition_failed_exception: Optional[Any] = dataclasses.field(default=None)
    r"""PreconditionFailedException"""  
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)  
    resource_conflict_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceConflictException"""  
    resource_not_found_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ResourceNotFoundException"""  
    service_exception: Optional[Any] = dataclasses.field(default=None)
    r"""ServiceException"""  
    too_many_requests_exception: Optional[Any] = dataclasses.field(default=None)
    r"""TooManyRequestsException"""  
    