// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
)

type PostSpacesSpaceIDFoldersIDBankStatementsJSONSecurity struct {
	GmaAuth string `security:"scheme,type=oauth2,name=Authorization"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum string

const (
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumCustomer    PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "customer"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumProvider    PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "provider"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumBank        PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "bank"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumCashWoucher PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "cashWoucher"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumFiscal      PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "fiscal"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumInsurance   PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "insurance"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumSocial      PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "social"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumOther       PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "other"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnumPermanent   PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum = "permanent"
)

func (e PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum) ToPointer() *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum {
	return &e
}

func (e *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "customer":
		fallthrough
	case "provider":
		fallthrough
	case "bank":
		fallthrough
	case "cashWoucher":
		fallthrough
	case "fiscal":
		fallthrough
	case "insurance":
		fallthrough
	case "social":
		fallthrough
	case "other":
		fallthrough
	case "permanent":
		*e = PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum: %v", v)
	}
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2Accounting struct {
	AccountedOn *string                                                                         `json:"AccountedOn,omitempty"`
	Workbook    *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2AccountingWorkbookEnum `json:"Workbook,omitempty"`
	YearMonth   *string                                                                         `json:"YearMonth,omitempty"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2File struct {
	Content64Encoded *string `json:"Content64Encoded,omitempty"`
	Name             *string `json:"Name,omitempty"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 struct {
	Accounting    *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2Accounting `json:"Accounting,omitempty"`
	Author        *string                                                             `json:"Author,omitempty"`
	Balance       *float64                                                            `json:"Balance,omitempty"`
	Code          *string                                                             `json:"Code,omitempty"`
	Comment       *string                                                             `json:"Comment,omitempty"`
	Date          *string                                                             `json:"Date,omitempty"`
	File          PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2File        `json:"File"`
	Number        *float64                                                            `json:"Number,omitempty"`
	StatementDate string                                                              `json:"StatementDate"`
	Title         string                                                              `json:"Title"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 struct {
	Balance       *float64 `json:"Balance,omitempty"`
	DocumentID    string   `json:"DocumentId"`
	Number        *float64 `json:"Number,omitempty"`
	StatementDate string   `json:"StatementDate"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONType string

const (
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/bank-statements_ApplicationJSON_1"
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONType = "post_/spaces/{spaceId}/folders/{id}/bank-statements_ApplicationJSON_2"
)

type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON struct {
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1
	PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2

	Type PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONType
}

func CreatePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONPostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1(postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1) PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1

	return PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON{
		PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1: &postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1,
		Type: typ,
	}
}

func CreatePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONPostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2(postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2) PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON {
	typ := PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2

	return PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON{
		PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2: &postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2,
		Type: typ,
	}
}

func (u *PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 := new(PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1); err == nil {
		u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 = postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1
		u.Type = PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1
		return nil
	}

	postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 := new(PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2); err == nil {
		u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 = postSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2
		u.Type = PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSONTypePostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON1)
	}

	if u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2 != nil {
		return json.Marshal(u.PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON2)
	}

	return nil, nil
}

type PostSpacesSpaceIDFoldersIDBankStatementsJSONRequest struct {
	// Bank statement to add (either DocumentId,StatementDate either (File,Name,Content64Encoded,Title,StatementDate) is mandatory)
	RequestBody PostSpacesSpaceIDFoldersIDBankStatementsApplicationJSON `request:"mediaType=application/json"`
	// Id of the folder bank
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// Id of the space
	SpaceID string `pathParam:"style=simple,explode=false,name=spaceId"`
}

// PostSpacesSpaceIDFoldersIDBankStatementsJSON201ApplicationJSON - Id of document created
type PostSpacesSpaceIDFoldersIDBankStatementsJSON201ApplicationJSON struct {
	ID *string `json:"Id,omitempty"`
}

type PostSpacesSpaceIDFoldersIDBankStatementsJSONResponse struct {
	ContentType string
	Headers     map[string][]string
	StatusCode  int
	RawResponse *http.Response
	// Id of document created
	PostSpacesSpaceIDFoldersIDBankStatementsJSON201ApplicationJSONObject *PostSpacesSpaceIDFoldersIDBankStatementsJSON201ApplicationJSON
}
