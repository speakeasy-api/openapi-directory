// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// TargetVMDetailsBootOptionEnum - Output only. The VM Boot Option, as set in the source vm.
type TargetVMDetailsBootOptionEnum string

const (
	TargetVMDetailsBootOptionEnumBootOptionUnspecified TargetVMDetailsBootOptionEnum = "BOOT_OPTION_UNSPECIFIED"
	TargetVMDetailsBootOptionEnumEfi                   TargetVMDetailsBootOptionEnum = "EFI"
	TargetVMDetailsBootOptionEnumBios                  TargetVMDetailsBootOptionEnum = "BIOS"
)

func (e TargetVMDetailsBootOptionEnum) ToPointer() *TargetVMDetailsBootOptionEnum {
	return &e
}

func (e *TargetVMDetailsBootOptionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BOOT_OPTION_UNSPECIFIED":
		fallthrough
	case "EFI":
		fallthrough
	case "BIOS":
		*e = TargetVMDetailsBootOptionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetVMDetailsBootOptionEnum: %v", v)
	}
}

// TargetVMDetailsDiskTypeEnum - The disk type to use in the VM.
type TargetVMDetailsDiskTypeEnum string

const (
	TargetVMDetailsDiskTypeEnumDiskTypeUnspecified TargetVMDetailsDiskTypeEnum = "DISK_TYPE_UNSPECIFIED"
	TargetVMDetailsDiskTypeEnumStandard            TargetVMDetailsDiskTypeEnum = "STANDARD"
	TargetVMDetailsDiskTypeEnumBalanced            TargetVMDetailsDiskTypeEnum = "BALANCED"
	TargetVMDetailsDiskTypeEnumSsd                 TargetVMDetailsDiskTypeEnum = "SSD"
)

func (e TargetVMDetailsDiskTypeEnum) ToPointer() *TargetVMDetailsDiskTypeEnum {
	return &e
}

func (e *TargetVMDetailsDiskTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DISK_TYPE_UNSPECIFIED":
		fallthrough
	case "STANDARD":
		fallthrough
	case "BALANCED":
		fallthrough
	case "SSD":
		*e = TargetVMDetailsDiskTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetVMDetailsDiskTypeEnum: %v", v)
	}
}

// TargetVMDetailsLicenseTypeEnum - The license type to use in OS adaptation.
type TargetVMDetailsLicenseTypeEnum string

const (
	TargetVMDetailsLicenseTypeEnumDefault TargetVMDetailsLicenseTypeEnum = "DEFAULT"
	TargetVMDetailsLicenseTypeEnumPayg    TargetVMDetailsLicenseTypeEnum = "PAYG"
	TargetVMDetailsLicenseTypeEnumByol    TargetVMDetailsLicenseTypeEnum = "BYOL"
)

func (e TargetVMDetailsLicenseTypeEnum) ToPointer() *TargetVMDetailsLicenseTypeEnum {
	return &e
}

func (e *TargetVMDetailsLicenseTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DEFAULT":
		fallthrough
	case "PAYG":
		fallthrough
	case "BYOL":
		*e = TargetVMDetailsLicenseTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetVMDetailsLicenseTypeEnum: %v", v)
	}
}

// TargetVMDetails - TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetails struct {
	// AppliedLicense holds the license data returned by adaptation module report.
	AppliedLicense *AppliedLicense `json:"appliedLicense,omitempty"`
	// Output only. The VM Boot Option, as set in the source vm.
	BootOption *TargetVMDetailsBootOptionEnum `json:"bootOption,omitempty"`
	// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
	ComputeScheduling *ComputeScheduling `json:"computeScheduling,omitempty"`
	// The disk type to use in the VM.
	DiskType *TargetVMDetailsDiskTypeEnum `json:"diskType,omitempty"`
	// The external IP to define in the VM.
	ExternalIP *string `json:"externalIp,omitempty"`
	// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIP *string `json:"internalIp,omitempty"`
	// A map of labels to associate with the VM.
	Labels map[string]string `json:"labels,omitempty"`
	// The license type to use in OS adaptation.
	LicenseType *TargetVMDetailsLicenseTypeEnum `json:"licenseType,omitempty"`
	// The machine type to create the VM with.
	MachineType *string `json:"machineType,omitempty"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `json:"machineTypeSeries,omitempty"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `json:"metadata,omitempty"`
	// The name of the VM to create.
	Name *string `json:"name,omitempty"`
	// The network to connect the VM to.
	Network *string `json:"network,omitempty"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `json:"networkInterfaces,omitempty"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `json:"networkTags,omitempty"`
	// Output only. The project in which to create the VM.
	Project *string `json:"project,omitempty"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot *bool `json:"secureBoot,omitempty"`
	// The service account to associate the VM with.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// The subnetwork to connect the VM to.
	Subnetwork *string `json:"subnetwork,omitempty"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject *string `json:"targetProject,omitempty"`
	// The zone in which to create the VM.
	Zone *string `json:"zone,omitempty"`
}

// TargetVMDetailsInput - TargetVMDetails is a collection of details for creating a VM in a target Compute Engine project.
type TargetVMDetailsInput struct {
	// AppliedLicense holds the license data returned by adaptation module report.
	AppliedLicense *AppliedLicense `json:"appliedLicense,omitempty"`
	// Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
	ComputeScheduling *ComputeScheduling `json:"computeScheduling,omitempty"`
	// The disk type to use in the VM.
	DiskType *TargetVMDetailsDiskTypeEnum `json:"diskType,omitempty"`
	// The external IP to define in the VM.
	ExternalIP *string `json:"externalIp,omitempty"`
	// The internal IP to define in the VM. The formats accepted are: `ephemeral` \ ipv4 address \ a named address resource full path.
	InternalIP *string `json:"internalIp,omitempty"`
	// A map of labels to associate with the VM.
	Labels map[string]string `json:"labels,omitempty"`
	// The license type to use in OS adaptation.
	LicenseType *TargetVMDetailsLicenseTypeEnum `json:"licenseType,omitempty"`
	// The machine type to create the VM with.
	MachineType *string `json:"machineType,omitempty"`
	// The machine type series to create the VM with.
	MachineTypeSeries *string `json:"machineTypeSeries,omitempty"`
	// The metadata key/value pairs to assign to the VM.
	Metadata map[string]string `json:"metadata,omitempty"`
	// The name of the VM to create.
	Name *string `json:"name,omitempty"`
	// The network to connect the VM to.
	Network *string `json:"network,omitempty"`
	// List of NICs connected to this VM.
	NetworkInterfaces []NetworkInterface `json:"networkInterfaces,omitempty"`
	// A map of network tags to associate with the VM.
	NetworkTags []string `json:"networkTags,omitempty"`
	// Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.
	SecureBoot *bool `json:"secureBoot,omitempty"`
	// The service account to associate the VM with.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// The subnetwork to connect the VM to.
	Subnetwork *string `json:"subnetwork,omitempty"`
	// The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.
	TargetProject *string `json:"targetProject,omitempty"`
	// The zone in which to create the VM.
	Zone *string `json:"zone,omitempty"`
}
