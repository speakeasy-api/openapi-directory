// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"net/http"
	"openapi/pkg/models/shared"
)

// PutResolverQueryLogConfigPolicyXAmzTargetEnum
type PutResolverQueryLogConfigPolicyXAmzTargetEnum string

const (
	PutResolverQueryLogConfigPolicyXAmzTargetEnumRoute53ResolverPutResolverQueryLogConfigPolicy PutResolverQueryLogConfigPolicyXAmzTargetEnum = "Route53Resolver.PutResolverQueryLogConfigPolicy"
)

func (e PutResolverQueryLogConfigPolicyXAmzTargetEnum) ToPointer() *PutResolverQueryLogConfigPolicyXAmzTargetEnum {
	return &e
}

func (e *PutResolverQueryLogConfigPolicyXAmzTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Route53Resolver.PutResolverQueryLogConfigPolicy":
		*e = PutResolverQueryLogConfigPolicyXAmzTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutResolverQueryLogConfigPolicyXAmzTargetEnum: %v", v)
	}
}

type PutResolverQueryLogConfigPolicyRequest struct {
	PutResolverQueryLogConfigPolicyRequest shared.PutResolverQueryLogConfigPolicyRequest `request:"mediaType=application/json"`
	XAmzAlgorithm                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Algorithm"`
	XAmzContentSha256                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Content-Sha256"`
	XAmzCredential                         *string                                       `header:"style=simple,explode=false,name=X-Amz-Credential"`
	XAmzDate                               *string                                       `header:"style=simple,explode=false,name=X-Amz-Date"`
	XAmzSecurityToken                      *string                                       `header:"style=simple,explode=false,name=X-Amz-Security-Token"`
	XAmzSignature                          *string                                       `header:"style=simple,explode=false,name=X-Amz-Signature"`
	XAmzSignedHeaders                      *string                                       `header:"style=simple,explode=false,name=X-Amz-SignedHeaders"`
	XAmzTarget                             PutResolverQueryLogConfigPolicyXAmzTargetEnum `header:"style=simple,explode=false,name=X-Amz-Target"`
}

type PutResolverQueryLogConfigPolicyResponse struct {
	// AccessDeniedException
	AccessDeniedException interface{}
	ContentType           string
	// InternalServiceErrorException
	InternalServiceErrorException interface{}
	// InvalidParameterException
	InvalidParameterException interface{}
	// InvalidPolicyDocument
	InvalidPolicyDocument interface{}
	// InvalidRequestException
	InvalidRequestException interface{}
	// Success
	PutResolverQueryLogConfigPolicyResponse *shared.PutResolverQueryLogConfigPolicyResponse
	StatusCode                              int
	RawResponse                             *http.Response
	// UnknownResourceException
	UnknownResourceException interface{}
}
