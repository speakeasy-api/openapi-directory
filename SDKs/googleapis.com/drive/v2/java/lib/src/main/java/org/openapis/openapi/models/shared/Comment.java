/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Comment - A comment on a file in Google Drive.
 */
public class Comment {
    /**
     * A region of the document represented as a JSON string. For details on defining anchor properties, refer to  Add comments and replies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anchor")
    public String anchor;
    public Comment withAnchor(String anchor) {
        this.anchor = anchor;
        return this;
    }
    
    /**
     * Information about a Drive user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author")
    public User author;
    public Comment withAuthor(User author) {
        this.author = author;
        return this;
    }
    
    /**
     * The ID of the comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("commentId")
    public String commentId;
    public Comment withCommentId(String commentId) {
        this.commentId = commentId;
        return this;
    }
    
    /**
     * The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    public String content;
    public Comment withContent(String content) {
        this.content = content;
        return this;
    }
    
    /**
     * The context of the file which is being commented on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public CommentContext context;
    public Comment withContext(CommentContext context) {
        this.context = context;
        return this;
    }
    
    /**
     * The date when this comment was first created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("createdDate")
    public OffsetDateTime createdDate;
    public Comment withCreatedDate(OffsetDateTime createdDate) {
        this.createdDate = createdDate;
        return this;
    }
    
    /**
     * Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;
    public Comment withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * The file which this comment is addressing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileId")
    public String fileId;
    public Comment withFileId(String fileId) {
        this.fileId = fileId;
        return this;
    }
    
    /**
     * The title of the file which this comment is addressing.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fileTitle")
    public String fileTitle;
    public Comment withFileTitle(String fileTitle) {
        this.fileTitle = fileTitle;
        return this;
    }
    
    /**
     * HTML formatted content for this comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htmlContent")
    public String htmlContent;
    public Comment withHtmlContent(String htmlContent) {
        this.htmlContent = htmlContent;
        return this;
    }
    
    /**
     * This is always drive#comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("kind")
    public String kind;
    public Comment withKind(String kind) {
        this.kind = kind;
        return this;
    }
    
    /**
     * The date when this comment or any of its replies were last modified.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("modifiedDate")
    public OffsetDateTime modifiedDate;
    public Comment withModifiedDate(OffsetDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
        return this;
    }
    
    /**
     * Replies to this post.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replies")
    public CommentReply[] replies;
    public Comment withReplies(CommentReply[] replies) {
        this.replies = replies;
        return this;
    }
    
    /**
     * A link back to this comment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfLink")
    public String selfLink;
    public Comment withSelfLink(String selfLink) {
        this.selfLink = selfLink;
        return this;
    }
    
    /**
     * The status of this comment. Status can be changed by posting a reply to a comment with the desired status.  
     * - "open" - The comment is still open. 
     * - "resolved" - The comment has been resolved by one of its replies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public String status;
    public Comment withStatus(String status) {
        this.status = status;
        return this;
    }
    
}
