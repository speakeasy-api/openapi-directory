/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Returnaddress {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Batches multiple return address related calls in a single request.
   */
  contentReturnaddressCustombatch(
    req: operations.ContentReturnaddressCustombatchRequest,
    security: operations.ContentReturnaddressCustombatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnaddressCustombatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnaddressCustombatchRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = baseURL.replace(/\/$/, "") + "/returnaddress/batch";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "returnaddressCustomBatchRequest",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnaddressCustombatchSecurity(
        security
      );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnaddressCustombatchResponse =
        new operations.ContentReturnaddressCustombatchResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnaddressCustomBatchResponse = utils.objectToClass(
              httpRes?.data,
              shared.ReturnaddressCustomBatchResponse
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Deletes a return address for the given Merchant Center account.
   */
  contentReturnaddressDelete(
    req: operations.ContentReturnaddressDeleteRequest,
    security: operations.ContentReturnaddressDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnaddressDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnaddressDeleteRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnaddress/{returnAddressId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnaddressDeleteSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "delete",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnaddressDeleteResponse =
        new operations.ContentReturnaddressDeleteResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          break;
      }

      return res;
    });
  }

  /**
   * Gets a return address of the Merchant Center account.
   */
  contentReturnaddressGet(
    req: operations.ContentReturnaddressGetRequest,
    security: operations.ContentReturnaddressGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnaddressGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnaddressGetRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnaddress/{returnAddressId}",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnaddressGetSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnaddressGetResponse =
        new operations.ContentReturnaddressGetResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnAddress = utils.objectToClass(
              httpRes?.data,
              shared.ReturnAddress
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Inserts a return address for the Merchant Center account.
   */
  contentReturnaddressInsert(
    req: operations.ContentReturnaddressInsertRequest,
    security: operations.ContentReturnaddressInsertSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnaddressInsertResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnaddressInsertRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnaddress",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "returnAddress",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnaddressInsertSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnaddressInsertResponse =
        new operations.ContentReturnaddressInsertResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnAddress = utils.objectToClass(
              httpRes?.data,
              shared.ReturnAddress
            );
          }
          break;
      }

      return res;
    });
  }

  /**
   * Lists the return addresses of the Merchant Center account.
   */
  contentReturnaddressList(
    req: operations.ContentReturnaddressListRequest,
    security: operations.ContentReturnaddressListSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ContentReturnaddressListResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ContentReturnaddressListRequest(req);
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/{merchantId}/returnaddress",
      req
    );
    if (!(security instanceof utils.SpeakeasyBase)) {
      security = new operations.ContentReturnaddressListSecurity(security);
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const r = client.request({
      url: url + queryParams,
      method: "get",
      ...config,
    });

    return r.then((httpRes: AxiosResponse) => {
      const contentType: string = httpRes?.headers?.["content-type"] ?? "";

      if (httpRes?.status == null)
        throw new Error(`status code not found in response: ${httpRes}`);
      const res: operations.ContentReturnaddressListResponse =
        new operations.ContentReturnaddressListResponse({
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        });
      switch (true) {
        case httpRes?.status == 200:
          if (utils.matchContentType(contentType, `application/json`)) {
            res.returnaddressListResponse = utils.objectToClass(
              httpRes?.data,
              shared.ReturnaddressListResponse
            );
          }
          break;
      }

      return res;
    });
  }
}
